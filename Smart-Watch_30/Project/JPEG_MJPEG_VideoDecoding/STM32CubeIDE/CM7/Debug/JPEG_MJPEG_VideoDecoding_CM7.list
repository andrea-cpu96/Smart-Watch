
JPEG_MJPEG_VideoDecoding_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113f8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  08011698  08011698  00012698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011e18  08011e18  00012e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011e20  08011e20  00012e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011e24  08011e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  20000000  08011e28  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00018a68  20000060  08011e88  00013060  2**2
                  ALLOC
  8 ._user_heap_stack 00002400  20018ac8  08011e88  00013ac8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00013060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002330b  00000000  00000000  0001308e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004962  00000000  00000000  00036399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001a10  00000000  00000000  0003ad00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013cd  00000000  00000000  0003c710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00048eb9  00000000  00000000  0003dadd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028c93  00000000  00000000  00086996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001d3855  00000000  00000000  000af629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00282e7e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000703c  00000000  00000000  00282ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 000000a3  00000000  00000000  00289f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000060 	.word	0x20000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011680 	.word	0x08011680

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000064 	.word	0x20000064
 80002dc:	08011680 	.word	0x08011680

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <IS42S32800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800J_ERROR;
 800038a:	f04f 33ff 	mov.w	r3, #4294967295
 800038e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4619      	mov	r1, r3
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f000 f832 	bl	8000400 <IS42S32800J_ClockEnable>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d128      	bne.n	80003f4 <IS42S32800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800J_Delay(1);
 80003a2:	2001      	movs	r0, #1
 80003a4:	f000 f8e2 	bl	800056c <IS42S32800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4619      	mov	r1, r3
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f000 f84a 	bl	8000448 <IS42S32800J_Precharge>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d11c      	bne.n	80003f4 <IS42S32800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	6819      	ldr	r1, [r3, #0]
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	461a      	mov	r2, r3
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f000 f897 	bl	80004f8 <IS42S32800J_RefreshMode>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d111      	bne.n	80003f4 <IS42S32800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 80003d0:	6839      	ldr	r1, [r7, #0]
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f000 f85c 	bl	8000490 <IS42S32800J_ModeRegConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d10a      	bne.n	80003f4 <IS42S32800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	4619      	mov	r1, r3
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f000 f8ad 	bl	8000544 <IS42S32800J_RefreshRate>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d101      	bne.n	80003f4 <IS42S32800J_Init+0x74>
          {
            ret = IS42S32800J_OK;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 80003f4:	68fb      	ldr	r3, [r7, #12]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3710      	adds	r7, #16
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800040a:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 800040c:	2201      	movs	r2, #1
 800040e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000410:	4a0c      	ldr	r2, [pc, #48]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000416:	4b0b      	ldr	r3, [pc, #44]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 8000418:	2201      	movs	r2, #1
 800041a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800041c:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000426:	4907      	ldr	r1, [pc, #28]	@ (8000444 <IS42S32800J_ClockEnable+0x44>)
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f009 fcf7 	bl	8009e1c <HAL_SDRAM_SendCommand>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d002      	beq.n	800043a <IS42S32800J_ClockEnable+0x3a>
  {
    return IS42S32800J_ERROR;
 8000434:	f04f 33ff 	mov.w	r3, #4294967295
 8000438:	e000      	b.n	800043c <IS42S32800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 800043a:	2300      	movs	r3, #0
  }
}
 800043c:	4618      	mov	r0, r3
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	2000007c 	.word	0x2000007c

08000448 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <IS42S32800J_Precharge+0x44>)
 8000454:	2202      	movs	r2, #2
 8000456:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000458:	4a0c      	ldr	r2, [pc, #48]	@ (800048c <IS42S32800J_Precharge+0x44>)
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <IS42S32800J_Precharge+0x44>)
 8000460:	2201      	movs	r2, #1
 8000462:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <IS42S32800J_Precharge+0x44>)
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800046a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800046e:	4907      	ldr	r1, [pc, #28]	@ (800048c <IS42S32800J_Precharge+0x44>)
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f009 fcd3 	bl	8009e1c <HAL_SDRAM_SendCommand>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d002      	beq.n	8000482 <IS42S32800J_Precharge+0x3a>
  {
    return IS42S32800J_ERROR;
 800047c:	f04f 33ff 	mov.w	r3, #4294967295
 8000480:	e000      	b.n	8000484 <IS42S32800J_Precharge+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 8000482:	2300      	movs	r3, #0
  }
}
 8000484:	4618      	mov	r0, r3
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	2000007c 	.word	0x2000007c

08000490 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80004a2:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80004a8:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80004ae:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80004b4:	4313      	orrs	r3, r2
 80004b6:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80004b8:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004ba:	2204      	movs	r2, #4
 80004bc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a0c      	ldr	r2, [pc, #48]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004c4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80004cc:	4a09      	ldr	r2, [pc, #36]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80004d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004d6:	4907      	ldr	r1, [pc, #28]	@ (80004f4 <IS42S32800J_ModeRegConfig+0x64>)
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f009 fc9f 	bl	8009e1c <HAL_SDRAM_SendCommand>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <IS42S32800J_ModeRegConfig+0x5a>
  {
    return IS42S32800J_ERROR;
 80004e4:	f04f 33ff 	mov.w	r3, #4294967295
 80004e8:	e000      	b.n	80004ec <IS42S32800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800J_OK;
 80004ea:	2300      	movs	r3, #0
  }
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2000007c 	.word	0x2000007c

080004f8 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8000504:	4a0e      	ldr	r2, [pc, #56]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800050a:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000510:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 8000512:	2208      	movs	r2, #8
 8000514:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000516:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800051c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000520:	4907      	ldr	r1, [pc, #28]	@ (8000540 <IS42S32800J_RefreshMode+0x48>)
 8000522:	68f8      	ldr	r0, [r7, #12]
 8000524:	f009 fc7a 	bl	8009e1c <HAL_SDRAM_SendCommand>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <IS42S32800J_RefreshMode+0x3c>
  {
    return IS42S32800J_ERROR;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	e000      	b.n	8000536 <IS42S32800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800J_OK;
 8000534:	2300      	movs	r3, #0
  }
}
 8000536:	4618      	mov	r0, r3
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	2000007c 	.word	0x2000007c

08000544 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800054e:	6839      	ldr	r1, [r7, #0]
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f009 fc98 	bl	8009e86 <HAL_SDRAM_ProgramRefreshRate>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d002      	beq.n	8000562 <IS42S32800J_RefreshRate+0x1e>
  {
    return IS42S32800J_ERROR;
 800055c:	f04f 33ff 	mov.w	r3, #4294967295
 8000560:	e000      	b.n	8000564 <IS42S32800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800J_OK;
 8000562:	2300      	movs	r3, #0
  }
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}

0800056c <IS42S32800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000574:	f000 fcc6 	bl	8000f04 <HAL_GetTick>
 8000578:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800057a:	bf00      	nop
 800057c:	f000 fcc2 	bl	8000f04 <HAL_GetTick>
 8000580:	4602      	mov	r2, r0
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	429a      	cmp	r2, r3
 800058a:	d8f7      	bhi.n	800057c <IS42S32800J_Delay+0x10>
  {
  }
  return IS42S32800J_OK;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t BSP_SD_Init(uint32_t Instance)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	@ 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;

  if(Instance >= SD_INSTANCES_NBR)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d003      	beq.n	80005b2 <BSP_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80005aa:	f06f 0301 	mvn.w	r3, #1
 80005ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80005b0:	e063      	b.n	800067a <BSP_SD_Init+0xe2>
  }
  else
  {
    /* Configure Input mode for SD detection pin */
    SD_DETECT_GPIO_CLK_ENABLE();
 80005b2:	4b34      	ldr	r3, [pc, #208]	@ (8000684 <BSP_SD_Init+0xec>)
 80005b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005b8:	4a32      	ldr	r2, [pc, #200]	@ (8000684 <BSP_SD_Init+0xec>)
 80005ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005c2:	4b30      	ldr	r3, [pc, #192]	@ (8000684 <BSP_SD_Init+0xec>)
 80005c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
    gpio_init_structure.Pin = SD_DETECT_PIN;
 80005d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005d4:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80005da:	2302      	movs	r3, #2
 80005dc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4619      	mov	r1, r3
 80005e8:	4827      	ldr	r0, [pc, #156]	@ (8000688 <BSP_SD_Init+0xf0>)
 80005ea:	f001 f991 	bl	8001910 <HAL_GPIO_Init>

    if(BSP_SD_IsDetected(Instance) != SD_PRESENT)
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f876 	bl	80006e0 <BSP_SD_IsDetected>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d003      	beq.n	8000602 <BSP_SD_Init+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80005fa:	f06f 0306 	mvn.w	r3, #6
 80005fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000600:	e03b      	b.n	800067a <BSP_SD_Init+0xe2>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SD initialization */
      SD_MspInit(&hsd_sdmmc[Instance]);
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	4613      	mov	r3, r2
 8000606:	015b      	lsls	r3, r3, #5
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4a1f      	ldr	r2, [pc, #124]	@ (800068c <BSP_SD_Init+0xf4>)
 800060e:	4413      	add	r3, r2
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f929 	bl	8000868 <SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS   */

      if(ret == BSP_ERROR_NONE)
 8000616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000618:	2b00      	cmp	r3, #0
 800061a:	d12e      	bne.n	800067a <BSP_SD_Init+0xe2>
      {
        /* HAL SD initialization and Enable wide operation   */
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	4613      	mov	r3, r2
 8000620:	015b      	lsls	r3, r3, #5
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4a19      	ldr	r2, [pc, #100]	@ (800068c <BSP_SD_Init+0xf4>)
 8000628:	4413      	add	r3, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f830 	bl	8000690 <MX_SDMMC1_SD_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d003      	beq.n	800063e <BSP_SD_Init+0xa6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8000636:	f06f 0303 	mvn.w	r3, #3
 800063a:	627b      	str	r3, [r7, #36]	@ 0x24
 800063c:	e01d      	b.n	800067a <BSP_SD_Init+0xe2>
        }
#if (USE_SD_BUS_WIDE_4B > 0)
        else if(HAL_SD_ConfigWideBusOperation(&hsd_sdmmc[Instance], SDMMC_BUS_WIDE_4B) != HAL_OK)
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	4613      	mov	r3, r2
 8000642:	015b      	lsls	r3, r3, #5
 8000644:	1a9b      	subs	r3, r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	4a10      	ldr	r2, [pc, #64]	@ (800068c <BSP_SD_Init+0xf4>)
 800064a:	4413      	add	r3, r2
 800064c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000650:	4618      	mov	r0, r3
 8000652:	f008 fd27 	bl	80090a4 <HAL_SD_ConfigWideBusOperation>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d003      	beq.n	8000664 <BSP_SD_Init+0xcc>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800065c:	f06f 0303 	mvn.w	r3, #3
 8000660:	627b      	str	r3, [r7, #36]	@ 0x24
 8000662:	e00a      	b.n	800067a <BSP_SD_Init+0xe2>
        }
#endif
        else
        {
          /* Switch to High Speed mode if the card support this mode */
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	4613      	mov	r3, r2
 8000668:	015b      	lsls	r3, r3, #5
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4a07      	ldr	r2, [pc, #28]	@ (800068c <BSP_SD_Init+0xf4>)
 8000670:	4413      	add	r3, r2
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f008 fe27 	bl	80092c8 <HAL_SD_ConfigSpeedBusOperation>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }
    }
  }
  return ret;
 800067a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800067c:	4618      	mov	r0, r3
 800067e:	3728      	adds	r7, #40	@ 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	58024400 	.word	0x58024400
 8000688:	58022000 	.word	0x58022000
 800068c:	2000008c 	.word	0x2000008c

08000690 <MX_SDMMC1_SD_Init>:
  * @brief  Initializes the SDMMC1 peripheral.
  * @param  hsd SD handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDMMC1_SD_Init(SD_HandleTypeDef *hsd)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000698:	2300      	movs	r3, #0
 800069a:	73fb      	strb	r3, [r7, #15]
  /* uSD device interface configuration */
  hsd->Instance                 = SDMMC1;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a0f      	ldr	r2, [pc, #60]	@ (80006dc <MX_SDMMC1_SD_Init+0x4c>)
 80006a0:	601a      	str	r2, [r3, #0]
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
  hsd->Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
#if (USE_SD_BUS_WIDE_4B > 0)
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_4B;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006b4:	60da      	str	r2, [r3, #12]
#else
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_1B;
#endif
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
#endif /*USE_SD_TRANSCEIVER*/
#if ( USE_SD_HIGH_PERFORMANCE > 0 )
  hsd->Init.ClockDiv            = SDMMC_HSpeed_CLK_DIV;
#else
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2204      	movs	r2, #4
 80006c0:	615a      	str	r2, [r3, #20]
#endif /*USE_SD_HIGH_PERFORMANCE*/

  /* HAL SD initialization   */
  if(HAL_SD_Init(hsd) != HAL_OK)
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f007 fe1e 	bl	8008304 <HAL_SD_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_SDMMC1_SD_Init+0x42>
  {
    ret = HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	52007000 	.word	0x52007000

080006e0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t BSP_SD_IsDetected(uint32_t Instance)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80006e8:	f06f 0305 	mvn.w	r3, #5
 80006ec:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d002      	beq.n	80006fa <BSP_SD_IsDetected+0x1a>
  {
    return BSP_ERROR_WRONG_PARAM;
 80006f4:	f06f 0301 	mvn.w	r3, #1
 80006f8:	e00f      	b.n	800071a <BSP_SD_IsDetected+0x3a>
  }
  else
  {
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 80006fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006fe:	4809      	ldr	r0, [pc, #36]	@ (8000724 <BSP_SD_IsDetected+0x44>)
 8000700:	f001 fab6 	bl	8001c70 <HAL_GPIO_ReadPin>
 8000704:	4603      	mov	r3, r0
 8000706:	60fb      	str	r3, [r7, #12]
    /* Check SD card detect pin */
    if(ret != GPIO_PIN_RESET)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <BSP_SD_IsDetected+0x34>
    {
      ret = (int32_t)SD_NOT_PRESENT;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e001      	b.n	8000718 <BSP_SD_IsDetected+0x38>
    }
    else
    {
      ret = (int32_t)SD_PRESENT;
 8000714:	2301      	movs	r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000718:	68fb      	ldr	r3, [r7, #12]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	58022000 	.word	0x58022000

08000728 <BSP_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t BSP_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af02      	add	r7, sp, #8
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	2264      	movs	r2, #100	@ 0x64
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <BSP_SD_ReadBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800074a:	f06f 0301 	mvn.w	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	e013      	b.n	800077a <BSP_SD_ReadBlocks+0x52>
  }
  else
  {
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	4613      	mov	r3, r2
 8000756:	015b      	lsls	r3, r3, #5
 8000758:	1a9b      	subs	r3, r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4a09      	ldr	r2, [pc, #36]	@ (8000784 <BSP_SD_ReadBlocks+0x5c>)
 800075e:	1898      	adds	r0, r3, r2
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	68b9      	ldr	r1, [r7, #8]
 800076a:	f007 fef5 	bl	8008558 <HAL_SD_ReadBlocks>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d002      	beq.n	800077a <BSP_SD_ReadBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000774:	f06f 0303 	mvn.w	r3, #3
 8000778:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 800077a:	697b      	ldr	r3, [r7, #20]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3718      	adds	r7, #24
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000008c 	.word	0x2000008c

08000788 <BSP_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t BSP_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af02      	add	r7, sp, #8
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	2264      	movs	r2, #100	@ 0x64
 800079e:	fb02 f303 	mul.w	r3, r2, r3
 80007a2:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d003      	beq.n	80007b2 <BSP_SD_WriteBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80007aa:	f06f 0301 	mvn.w	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	e013      	b.n	80007da <BSP_SD_WriteBlocks+0x52>
  }
  else
  {
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	4613      	mov	r3, r2
 80007b6:	015b      	lsls	r3, r3, #5
 80007b8:	1a9b      	subs	r3, r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <BSP_SD_WriteBlocks+0x5c>)
 80007be:	1898      	adds	r0, r3, r2
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	f008 f84f 	bl	800886c <HAL_SD_WriteBlocks>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d002      	beq.n	80007da <BSP_SD_WriteBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80007d4:	f06f 0303 	mvn.w	r3, #3
 80007d8:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 80007da:	697b      	ldr	r3, [r7, #20]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2000008c 	.word	0x2000008c

080007e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t BSP_SD_GetCardState(uint32_t Instance)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	4613      	mov	r3, r2
 80007f4:	015b      	lsls	r3, r3, #5
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4a07      	ldr	r2, [pc, #28]	@ (8000818 <BSP_SD_GetCardState+0x30>)
 80007fc:	4413      	add	r3, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f008 fe1e 	bl	8009440 <HAL_SD_GetCardState>
 8000804:	4603      	mov	r3, r0
 8000806:	2b04      	cmp	r3, #4
 8000808:	bf14      	ite	ne
 800080a:	2301      	movne	r3, #1
 800080c:	2300      	moveq	r3, #0
 800080e:	b2db      	uxtb	r3, r3
}
 8000810:	4618      	mov	r0, r3
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000008c 	.word	0x2000008c

0800081c <BSP_SD_GetCardInfo>:
  * @param  Instance  SD Instance
  * @param  CardInfo  Pointer to HAL_SD_CardInfoTypedef structure
  * @retval BSP status
  */
int32_t BSP_SD_GetCardInfo(uint32_t Instance, BSP_SD_CardInfo *CardInfo)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d003      	beq.n	8000838 <BSP_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000830:	f06f 0301 	mvn.w	r3, #1
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	e010      	b.n	800085a <BSP_SD_GetCardInfo+0x3e>
  }
  else
  {
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	4613      	mov	r3, r2
 800083c:	015b      	lsls	r3, r3, #5
 800083e:	1a9b      	subs	r3, r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4a08      	ldr	r2, [pc, #32]	@ (8000864 <BSP_SD_GetCardInfo+0x48>)
 8000844:	4413      	add	r3, r2
 8000846:	6839      	ldr	r1, [r7, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f008 fbff 	bl	800904c <HAL_SD_GetCardInfo>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d002      	beq.n	800085a <BSP_SD_GetCardInfo+0x3e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000854:	f06f 0303 	mvn.w	r3, #3
 8000858:	60fb      	str	r3, [r7, #12]
    }
  }
  /* Return BSP status */
  return ret;
 800085a:	68fb      	ldr	r3, [r7, #12]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000008c 	.word	0x2000008c

08000868 <SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd  SD handle
  * @retval None
  */
static void SD_MspInit(SD_HandleTypeDef *hsd)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08c      	sub	sp, #48	@ 0x30
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a44      	ldr	r2, [pc, #272]	@ (8000984 <SD_MspInit+0x11c>)
 8000874:	4293      	cmp	r3, r2
 8000876:	f040 8081 	bne.w	800097c <SD_MspInit+0x114>
    therefore Camera must be power down before using the BSP SD
    To power down the camera , Set GPIOJ pin 14 to high
    */

    /* Enable GPIO J clock */
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800087a:	4b43      	ldr	r3, [pc, #268]	@ (8000988 <SD_MspInit+0x120>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000880:	4a41      	ldr	r2, [pc, #260]	@ (8000988 <SD_MspInit+0x120>)
 8000882:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800088a:	4b3f      	ldr	r3, [pc, #252]	@ (8000988 <SD_MspInit+0x120>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	69bb      	ldr	r3, [r7, #24]

    gpio_init_structure.Pin       = GPIO_PIN_14;
 8000898:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800089c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4836      	ldr	r0, [pc, #216]	@ (800098c <SD_MspInit+0x124>)
 80008b2:	f001 f82d 	bl	8001910 <HAL_GPIO_Init>

    /* Set the camera POWER_DOWN pin (active high) */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008bc:	4833      	ldr	r0, [pc, #204]	@ (800098c <SD_MspInit+0x124>)
 80008be:	f001 f9ef 	bl	8001ca0 <HAL_GPIO_WritePin>
#endif

    /* Enable SDIO clock */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80008c2:	4b31      	ldr	r3, [pc, #196]	@ (8000988 <SD_MspInit+0x120>)
 80008c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80008c8:	4a2f      	ldr	r2, [pc, #188]	@ (8000988 <SD_MspInit+0x120>)
 80008ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ce:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80008d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <SD_MspInit+0x120>)
 80008d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80008d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	697b      	ldr	r3, [r7, #20]


    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e0:	4b29      	ldr	r3, [pc, #164]	@ (8000988 <SD_MspInit+0x120>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e6:	4a28      	ldr	r2, [pc, #160]	@ (8000988 <SD_MspInit+0x120>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f0:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <SD_MspInit+0x120>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <SD_MspInit+0x120>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000904:	4a20      	ldr	r2, [pc, #128]	@ (8000988 <SD_MspInit+0x120>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800090e:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <SD_MspInit+0x120>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800091c:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <SD_MspInit+0x120>)
 800091e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000922:	4a19      	ldr	r2, [pc, #100]	@ (8000988 <SD_MspInit+0x120>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <SD_MspInit+0x120>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]


    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_PULLUP;
 800093e:	2301      	movs	r3, #1
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 8000946:	230c      	movs	r3, #12
 8000948:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SD_BUS_WIDE_4B > 0)
    /* SDMMC GPIO CLKIN PB8, D0 PC8, D1 PC9, D2 PC10, D3 PC11, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800094a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800094e:	61fb      	str	r3, [r7, #28]
    /* SDMMC GPIO CLKIN PB8, D0 PC8, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif

    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	480e      	ldr	r0, [pc, #56]	@ (8000990 <SD_MspInit+0x128>)
 8000958:	f000 ffda 	bl	8001910 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
 800095c:	2304      	movs	r3, #4
 800095e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	480b      	ldr	r0, [pc, #44]	@ (8000994 <SD_MspInit+0x12c>)
 8000968:	f000 ffd2 	bl	8001910 <HAL_GPIO_Init>

    /* NVIC configuration for SDIO interrupts */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	210e      	movs	r1, #14
 8000970:	2031      	movs	r0, #49	@ 0x31
 8000972:	f000 fc32 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000976:	2031      	movs	r0, #49	@ 0x31
 8000978:	f000 fc49 	bl	800120e <HAL_NVIC_EnableIRQ>
  }
}
 800097c:	bf00      	nop
 800097e:	3730      	adds	r7, #48	@ 0x30
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2000008c 	.word	0x2000008c
 8000988:	58024400 	.word	0x58024400
 800098c:	58022400 	.word	0x58022400
 8000990:	58020800 	.word	0x58020800
 8000994:	58020c00 	.word	0x58020c00

08000998 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800J_Context_t pRegMode;

  if(Instance >=SDRAM_INSTANCES_NBR)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80009a6:	f06f 0301 	mvn.w	r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e033      	b.n	8000a16 <BSP_SDRAM_Init+0x7e>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SDRAM initialization */
      SDRAM_MspInit(&hsdram[0]);
 80009ae:	481c      	ldr	r0, [pc, #112]	@ (8000a20 <BSP_SDRAM_Init+0x88>)
 80009b0:	f000 f884 	bl	8000abc <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80009b4:	481a      	ldr	r0, [pc, #104]	@ (8000a20 <BSP_SDRAM_Init+0x88>)
 80009b6:	f000 f837 	bl	8000a28 <MX_SDRAM_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d003      	beq.n	80009c8 <BSP_SDRAM_Init+0x30>
    {
      ret = BSP_ERROR_NO_INIT;
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e026      	b.n	8000a16 <BSP_SDRAM_Init+0x7e>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009ca:	2208      	movs	r2, #8
 80009cc:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009d0:	2203      	movs	r2, #3
 80009d2:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009d6:	f240 6203 	movw	r2, #1539	@ 0x603
 80009da:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80009e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009ea:	2230      	movs	r2, #48	@ 0x30
 80009ec:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80009f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009fa:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80009fc:	4909      	ldr	r1, [pc, #36]	@ (8000a24 <BSP_SDRAM_Init+0x8c>)
 80009fe:	4808      	ldr	r0, [pc, #32]	@ (8000a20 <BSP_SDRAM_Init+0x88>)
 8000a00:	f7ff fcbe 	bl	8000380 <IS42S32800J_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <BSP_SDRAM_Init+0x7a>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8000a0a:	f06f 0304 	mvn.w	r3, #4
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	e001      	b.n	8000a16 <BSP_SDRAM_Init+0x7e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000108 	.word	0x20000108
 8000a24:	2000013c 	.word	0x2000013c

08000a28 <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a20      	ldr	r2, [pc, #128]	@ (8000ab4 <MX_SDRAM_Init+0x8c>)
 8000a34:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2204      	movs	r2, #4
 8000a46:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2220      	movs	r2, #32
 8000a4c:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2240      	movs	r2, #64	@ 0x40
 8000a52:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000a5a:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a68:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <MX_SDRAM_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 8000a80:	2304      	movs	r3, #4
 8000a82:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 8000a84:	2307      	movs	r3, #7
 8000a86:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f009 f978 	bl	8009d90 <HAL_SDRAM_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_SDRAM_Init+0x82>
  {
    return  HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e000      	b.n	8000aac <MX_SDRAM_Init+0x84>
  }
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3728      	adds	r7, #40	@ 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	52004140 	.word	0x52004140
 8000ab8:	20000108 	.word	0x20000108

08000abc <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hsdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b090      	sub	sp, #64	@ 0x40
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ac4:	4b7f      	ldr	r3, [pc, #508]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000ac6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000aca:	4a7e      	ldr	r2, [pc, #504]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000acc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ad0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000ad4:	4b7b      	ldr	r3, [pc, #492]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000ad6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ada:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8000ae2:	4b78      	ldr	r3, [pc, #480]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000ae4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ae8:	4a76      	ldr	r2, [pc, #472]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000af2:	4b74      	ldr	r3, [pc, #464]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000af4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b00:	4b70      	ldr	r3, [pc, #448]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b06:	4a6f      	ldr	r2, [pc, #444]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b08:	f043 0308 	orr.w	r3, r3, #8
 8000b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b10:	4b6c      	ldr	r3, [pc, #432]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	623b      	str	r3, [r7, #32]
 8000b1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1e:	4b69      	ldr	r3, [pc, #420]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	4a67      	ldr	r2, [pc, #412]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2e:	4b65      	ldr	r3, [pc, #404]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	f003 0310 	and.w	r3, r3, #16
 8000b38:	61fb      	str	r3, [r7, #28]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3c:	4b61      	ldr	r3, [pc, #388]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b42:	4a60      	ldr	r2, [pc, #384]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b44:	f043 0320 	orr.w	r3, r3, #32
 8000b48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b4c:	4b5d      	ldr	r3, [pc, #372]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b52:	f003 0320 	and.w	r3, r3, #32
 8000b56:	61bb      	str	r3, [r7, #24]
 8000b58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b60:	4a58      	ldr	r2, [pc, #352]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b6a:	4b56      	ldr	r3, [pc, #344]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b78:	4b52      	ldr	r3, [pc, #328]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7e:	4a51      	ldr	r2, [pc, #324]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b88:	4b4e      	ldr	r3, [pc, #312]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b96:	4b4b      	ldr	r3, [pc, #300]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9c:	4a49      	ldr	r2, [pc, #292]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba6:	4b47      	ldr	r3, [pc, #284]	@ (8000cc4 <SDRAM_MspInit+0x208>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000bc0:	230c      	movs	r3, #12
 8000bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000bc4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000bca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bce:	4619      	mov	r1, r3
 8000bd0:	483d      	ldr	r0, [pc, #244]	@ (8000cc8 <SDRAM_MspInit+0x20c>)
 8000bd2:	f000 fe9d 	bl	8001910 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000bd6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000bdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be0:	4619      	mov	r1, r3
 8000be2:	483a      	ldr	r0, [pc, #232]	@ (8000ccc <SDRAM_MspInit+0x210>)
 8000be4:	f000 fe94 	bl	8001910 <HAL_GPIO_Init>
  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000be8:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000bee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4836      	ldr	r0, [pc, #216]	@ (8000cd0 <SDRAM_MspInit+0x214>)
 8000bf6:	f000 fe8b 	bl	8001910 <HAL_GPIO_Init>
  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8000bfa:	f248 1337 	movw	r3, #33079	@ 0x8137
 8000bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000c00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c04:	4619      	mov	r1, r3
 8000c06:	4833      	ldr	r0, [pc, #204]	@ (8000cd4 <SDRAM_MspInit+0x218>)
 8000c08:	f000 fe82 	bl	8001910 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8000c0c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000c12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c16:	4619      	mov	r1, r3
 8000c18:	482f      	ldr	r0, [pc, #188]	@ (8000cd8 <SDRAM_MspInit+0x21c>)
 8000c1a:	f000 fe79 	bl	8001910 <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8000c1e:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8000c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;

  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000c24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c28:	4619      	mov	r1, r3
 8000c2a:	482c      	ldr	r0, [pc, #176]	@ (8000cdc <SDRAM_MspInit+0x220>)
 8000c2c:	f000 fe70 	bl	8001910 <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8000c30:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c36:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8000c38:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c3e:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8000c40:	4b27      	ldr	r3, [pc, #156]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c42:	2280      	movs	r2, #128	@ 0x80
 8000c44:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000c46:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8000c4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c4e:	f240 2202 	movw	r2, #514	@ 0x202
 8000c52:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8000c54:	4b22      	ldr	r3, [pc, #136]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c56:	f640 0208 	movw	r2, #2056	@ 0x808
 8000c5a:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8000c5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c5e:	2220      	movs	r2, #32
 8000c60:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8000c62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c64:	2280      	movs	r2, #128	@ 0x80
 8000c66:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c6e:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8000c7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c7e:	2280      	movs	r2, #128	@ 0x80
 8000c80:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8000c82:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8000c88:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	639a      	str	r2, [r3, #56]	@ 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c90:	4a14      	ldr	r2, [pc, #80]	@ (8000ce4 <SDRAM_MspInit+0x228>)
 8000c92:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c98:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c9a:	4a11      	ldr	r2, [pc, #68]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8000ca0:	480f      	ldr	r0, [pc, #60]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000ca2:	f002 ff01 	bl	8003aa8 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8000ca6:	480e      	ldr	r0, [pc, #56]	@ (8000ce0 <SDRAM_MspInit+0x224>)
 8000ca8:	f002 feb2 	bl	8003a10 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	210f      	movs	r1, #15
 8000cb0:	207a      	movs	r0, #122	@ 0x7a
 8000cb2:	f000 fa92 	bl	80011da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8000cb6:	207a      	movs	r0, #122	@ 0x7a
 8000cb8:	f000 faa9 	bl	800120e <HAL_NVIC_EnableIRQ>
}
 8000cbc:	bf00      	nop
 8000cbe:	3740      	adds	r7, #64	@ 0x40
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	58020c00 	.word	0x58020c00
 8000ccc:	58021000 	.word	0x58021000
 8000cd0:	58021400 	.word	0x58021400
 8000cd4:	58021800 	.word	0x58021800
 8000cd8:	58021c00 	.word	0x58021c00
 8000cdc:	58022000 	.word	0x58022000
 8000ce0:	2000015c 	.word	0x2000015c
 8000ce4:	52000040 	.word	0x52000040

08000ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cec:	4b37      	ldr	r3, [pc, #220]	@ (8000dcc <SystemInit+0xe4>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf2:	4a36      	ldr	r2, [pc, #216]	@ (8000dcc <SystemInit+0xe4>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cfc:	4b34      	ldr	r3, [pc, #208]	@ (8000dd0 <SystemInit+0xe8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 030f 	and.w	r3, r3, #15
 8000d04:	2b06      	cmp	r3, #6
 8000d06:	d807      	bhi.n	8000d18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d08:	4b31      	ldr	r3, [pc, #196]	@ (8000dd0 <SystemInit+0xe8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f023 030f 	bic.w	r3, r3, #15
 8000d10:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd0 <SystemInit+0xe8>)
 8000d12:	f043 0307 	orr.w	r3, r3, #7
 8000d16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d18:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd4 <SystemInit+0xec>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000dd4 <SystemInit+0xec>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d24:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd4 <SystemInit+0xec>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <SystemInit+0xec>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4929      	ldr	r1, [pc, #164]	@ (8000dd4 <SystemInit+0xec>)
 8000d30:	4b29      	ldr	r3, [pc, #164]	@ (8000dd8 <SystemInit+0xf0>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d36:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <SystemInit+0xe8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d007      	beq.n	8000d52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <SystemInit+0xe8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f023 030f 	bic.w	r3, r3, #15
 8000d4a:	4a21      	ldr	r2, [pc, #132]	@ (8000dd0 <SystemInit+0xe8>)
 8000d4c:	f043 0307 	orr.w	r3, r3, #7
 8000d50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <SystemInit+0xec>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d58:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <SystemInit+0xec>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <SystemInit+0xec>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <SystemInit+0xec>)
 8000d66:	4a1d      	ldr	r2, [pc, #116]	@ (8000ddc <SystemInit+0xf4>)
 8000d68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <SystemInit+0xec>)
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000de0 <SystemInit+0xf8>)
 8000d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d70:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <SystemInit+0xec>)
 8000d72:	4a1c      	ldr	r2, [pc, #112]	@ (8000de4 <SystemInit+0xfc>)
 8000d74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d76:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <SystemInit+0xec>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <SystemInit+0xec>)
 8000d7e:	4a19      	ldr	r2, [pc, #100]	@ (8000de4 <SystemInit+0xfc>)
 8000d80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <SystemInit+0xec>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <SystemInit+0xec>)
 8000d8a:	4a16      	ldr	r2, [pc, #88]	@ (8000de4 <SystemInit+0xfc>)
 8000d8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <SystemInit+0xec>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d94:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <SystemInit+0xec>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd4 <SystemInit+0xec>)
 8000d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <SystemInit+0xec>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <SystemInit+0x100>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <SystemInit+0x104>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000db2:	d202      	bcs.n	8000dba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000db4:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <SystemInit+0x108>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <SystemInit+0x10c>)
 8000dbc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000dc0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00
 8000dd0:	52002000 	.word	0x52002000
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ddc:	02020200 	.word	0x02020200
 8000de0:	01ff0000 	.word	0x01ff0000
 8000de4:	01010280 	.word	0x01010280
 8000de8:	5c001000 	.word	0x5c001000
 8000dec:	ffff0000 	.word	0xffff0000
 8000df0:	51008108 	.word	0x51008108
 8000df4:	52004000 	.word	0x52004000

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfe:	2003      	movs	r0, #3
 8000e00:	f000 f9e0 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e04:	f004 f85e 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <HAL_Init+0x68>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	0a1b      	lsrs	r3, r3, #8
 8000e10:	f003 030f 	and.w	r3, r3, #15
 8000e14:	4913      	ldr	r1, [pc, #76]	@ (8000e64 <HAL_Init+0x6c>)
 8000e16:	5ccb      	ldrb	r3, [r1, r3]
 8000e18:	f003 031f 	and.w	r3, r3, #31
 8000e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <HAL_Init+0x68>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e64 <HAL_Init+0x6c>)
 8000e2c:	5cd3      	ldrb	r3, [r2, r3]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	fa22 f303 	lsr.w	r3, r2, r3
 8000e38:	4a0b      	ldr	r2, [pc, #44]	@ (8000e68 <HAL_Init+0x70>)
 8000e3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e6c <HAL_Init+0x74>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e42:	200f      	movs	r0, #15
 8000e44:	f000 f814 	bl	8000e70 <HAL_InitTick>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e002      	b.n	8000e58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e52:	f003 f985 	bl	8004160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400
 8000e64:	08011720 	.word	0x08011720
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	20000000 	.word	0x20000000

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e78:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <HAL_InitTick+0x60>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e021      	b.n	8000ec8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e84:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <HAL_InitTick+0x64>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <HAL_InitTick+0x60>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f9d3 	bl	8001246 <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 f98f 	bl	80011da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	@ (8000ed8 <HAL_InitTick+0x68>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2000000c 	.word	0x2000000c
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2000000c 	.word	0x2000000c
 8000f00:	200001c8 	.word	0x200001c8

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200001c8 	.word	0x200001c8

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffee 	bl	8000f04 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_Delay+0x44>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f42:	bf00      	nop
 8000f44:	f7ff ffde 	bl	8000f04 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
  {
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000000c 	.word	0x2000000c

08000f64 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <HAL_SuspendTick+0x1c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <HAL_SuspendTick+0x1c>)
 8000f6e:	f023 0302 	bic.w	r3, r3, #2
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <HAL_ResumeTick+0x1c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <HAL_ResumeTick+0x1c>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <HAL_GetREVID+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	0c1b      	lsrs	r3, r3, #16
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	5c001000 	.word	0x5c001000

08000fbc <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <HAL_EnableCompensationCell+0x1c>)
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <HAL_EnableCompensationCell+0x1c>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6213      	str	r3, [r2, #32]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	58000400 	.word	0x58000400

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <__NVIC_SetPriorityGrouping+0x40>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	4313      	orrs	r3, r2
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	@ (800101c <__NVIC_SetPriorityGrouping+0x40>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00
 8001020:	05fa0000 	.word	0x05fa0000

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	@ (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db12      	blt.n	80010b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	490a      	ldr	r1, [pc, #40]	@ (80010c0 <__NVIC_DisableIRQ+0x44>)
 8001096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	3320      	adds	r3, #32
 80010a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010a8:	f3bf 8f4f 	dsb	sy
}
 80010ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010ae:	f3bf 8f6f 	isb	sy
}
 80010b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	@ (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	@ (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	@ 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	@ 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff05 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff1c 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff90 	bl	8001118 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5f 	bl	80010c4 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff0f 	bl	8001040 <__NVIC_EnableIRQ>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff1f 	bl	800107c <__NVIC_DisableIRQ>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff96 	bl	8001180 <SysTick_Config>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001264:	f3bf 8f5f 	dmb	sy
}
 8001268:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <HAL_MPU_Disable+0x28>)
 800126c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126e:	4a06      	ldr	r2, [pc, #24]	@ (8001288 <HAL_MPU_Disable+0x28>)
 8001270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001274:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001276:	4b05      	ldr	r3, [pc, #20]	@ (800128c <HAL_MPU_Disable+0x2c>)
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00
 800128c:	e000ed90 	.word	0xe000ed90

08001290 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001298:	4a0b      	ldr	r2, [pc, #44]	@ (80012c8 <HAL_MPU_Enable+0x38>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <HAL_MPU_Enable+0x3c>)
 80012a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a6:	4a09      	ldr	r2, [pc, #36]	@ (80012cc <HAL_MPU_Enable+0x3c>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80012ae:	f3bf 8f4f 	dsb	sy
}
 80012b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012b4:	f3bf 8f6f 	isb	sy
}
 80012b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed90 	.word	0xe000ed90
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	785a      	ldrb	r2, [r3, #1]
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <HAL_MPU_ConfigRegion+0x7c>)
 80012de:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80012e0:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <HAL_MPU_ConfigRegion+0x7c>)
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	4a19      	ldr	r2, [pc, #100]	@ (800134c <HAL_MPU_ConfigRegion+0x7c>)
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80012ec:	4a17      	ldr	r2, [pc, #92]	@ (800134c <HAL_MPU_ConfigRegion+0x7c>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7b1b      	ldrb	r3, [r3, #12]
 80012f8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7adb      	ldrb	r3, [r3, #11]
 80012fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001300:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7a9b      	ldrb	r3, [r3, #10]
 8001306:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001308:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7b5b      	ldrb	r3, [r3, #13]
 800130e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001310:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7b9b      	ldrb	r3, [r3, #14]
 8001316:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001318:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7bdb      	ldrb	r3, [r3, #15]
 800131e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001320:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	7a5b      	ldrb	r3, [r3, #9]
 8001326:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001328:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7a1b      	ldrb	r3, [r3, #8]
 800132e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001330:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	7812      	ldrb	r2, [r2, #0]
 8001336:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001338:	4a04      	ldr	r2, [pc, #16]	@ (800134c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800133a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800133c:	6113      	str	r3, [r2, #16]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed90 	.word	0xe000ed90

08001350 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001354:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <HAL_GetCurrentCPUID+0x24>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	2b07      	cmp	r3, #7
 8001360:	d101      	bne.n	8001366 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001362:	2303      	movs	r3, #3
 8001364:	e000      	b.n	8001368 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001366:	2301      	movs	r3, #1
  }
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e04f      	b.n	800142a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d106      	bne.n	80013a4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f00c fb34 	bl	800da0c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2202      	movs	r2, #2
 80013a8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <HAL_DMA2D_Init+0xbc>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6851      	ldr	r1, [r2, #4]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	69d2      	ldr	r2, [r2, #28]
 80013be:	4311      	orrs	r1, r2
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	430b      	orrs	r3, r1
 80013c6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <HAL_DMA2D_Init+0xc0>)
 80013d0:	4013      	ands	r3, r2
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6891      	ldr	r1, [r2, #8]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6992      	ldr	r2, [r2, #24]
 80013da:	4311      	orrs	r1, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	430b      	orrs	r3, r1
 80013e2:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ea:	4b14      	ldr	r3, [pc, #80]	@ (800143c <HAL_DMA2D_Init+0xc4>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68d1      	ldr	r1, [r2, #12]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	430b      	orrs	r3, r1
 80013f8:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001400:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	051a      	lsls	r2, r3, #20
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	055b      	lsls	r3, r3, #21
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	fff8ffbf 	.word	0xfff8ffbf
 8001438:	fffffef8 	.word	0xfffffef8
 800143c:	ffff0000 	.word	0xffff0000

08001440 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af02      	add	r7, sp, #8
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_DMA2D_Start+0x1c>
 8001458:	2302      	movs	r3, #2
 800145a:	e018      	b.n	800148e <HAL_DMA2D_Start+0x4e>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2202      	movs	r2, #2
 8001468:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f000 f9a4 	bl	80017c4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d056      	beq.n	8001560 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80014b2:	f7ff fd27 	bl	8000f04 <HAL_GetTick>
 80014b6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80014b8:	e04b      	b.n	8001552 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d023      	beq.n	8001514 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014da:	f043 0202 	orr.w	r2, r3, #2
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2221      	movs	r2, #33	@ 0x21
 80014fe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2204      	movs	r2, #4
 8001504:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0a5      	b.n	8001660 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151a:	d01a      	beq.n	8001552 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800151c:	f7ff fcf2 	bl	8000f04 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d302      	bcc.n	8001532 <HAL_DMA2D_PollForTransfer+0x9c>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001536:	f043 0220 	orr.w	r2, r3, #32
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2203      	movs	r2, #3
 8001542:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e086      	b.n	8001660 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0ac      	beq.n	80014ba <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001572:	f003 0320 	and.w	r3, r3, #32
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d061      	beq.n	8001646 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001582:	f7ff fcbf 	bl	8000f04 <HAL_GetTick>
 8001586:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001588:	e056      	b.n	8001638 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8001598:	2b00      	cmp	r3, #0
 800159a:	d02e      	beq.n	80015fa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015aa:	f043 0204 	orr.w	r2, r3, #4
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015c0:	f043 0202 	orr.w	r2, r3, #2
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015d6:	f043 0201 	orr.w	r2, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2229      	movs	r2, #41	@ 0x29
 80015e4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2204      	movs	r2, #4
 80015ea:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e032      	b.n	8001660 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d01a      	beq.n	8001638 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001602:	f7ff fc7f 	bl	8000f04 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d302      	bcc.n	8001618 <HAL_DMA2D_PollForTransfer+0x182>
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10f      	bne.n	8001638 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800161c:	f043 0220 	orr.w	r2, r3, #32
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2203      	movs	r2, #3
 8001628:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e013      	b.n	8001660 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0a1      	beq.n	800158a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2212      	movs	r2, #18
 800164c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_DMA2D_ConfigLayer+0x24>
 8001688:	2302      	movs	r3, #2
 800168a:	e092      	b.n	80017b2 <HAL_DMA2D_ConfigLayer+0x14a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2202      	movs	r2, #2
 8001698:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	4613      	mov	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	3328      	adds	r3, #40	@ 0x28
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	041b      	lsls	r3, r3, #16
 80016b8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80016c0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80016cc:	4b3c      	ldr	r3, [pc, #240]	@ (80017c0 <HAL_DMA2D_ConfigLayer+0x158>)
 80016ce:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b0a      	cmp	r3, #10
 80016d6:	d003      	beq.n	80016e0 <HAL_DMA2D_ConfigLayer+0x78>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b09      	cmp	r3, #9
 80016de:	d107      	bne.n	80016f0 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	e005      	b.n	80016fc <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	061b      	lsls	r3, r3, #24
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d120      	bne.n	8001744 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	43db      	mvns	r3, r3
 800170c:	ea02 0103 	and.w	r1, r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	430a      	orrs	r2, r1
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b0a      	cmp	r3, #10
 800172a:	d003      	beq.n	8001734 <HAL_DMA2D_ConfigLayer+0xcc>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d135      	bne.n	80017a0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001740:	629a      	str	r2, [r3, #40]	@ 0x28
 8001742:	e02d      	b.n	80017a0 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b0b      	cmp	r3, #11
 800174a:	d109      	bne.n	8001760 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	049b      	lsls	r3, r3, #18
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800175e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	69da      	ldr	r2, [r3, #28]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	43db      	mvns	r3, r3
 800176a:	ea02 0103 	and.w	r1, r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	430a      	orrs	r2, r1
 8001776:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b0a      	cmp	r3, #10
 8001788:	d003      	beq.n	8001792 <HAL_DMA2D_ConfigLayer+0x12a>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b09      	cmp	r3, #9
 8001790:	d106      	bne.n	80017a0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	68da      	ldr	r2, [r3, #12]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800179e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	ff33000f 	.word	0xff33000f

080017c4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b08b      	sub	sp, #44	@ 0x2c
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	041a      	lsls	r2, r3, #16
 80017e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017e2:	431a      	orrs	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80017fc:	d174      	bne.n	80018e8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001804:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800180c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001814:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d108      	bne.n	8001836 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	431a      	orrs	r2, r3
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	4313      	orrs	r3, r2
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4313      	orrs	r3, r2
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
 8001834:	e053      	b.n	80018de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d106      	bne.n	800184c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	4313      	orrs	r3, r2
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	4313      	orrs	r3, r2
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
 800184a:	e048      	b.n	80018de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d111      	bne.n	8001878 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	0cdb      	lsrs	r3, r3, #19
 8001858:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	0a9b      	lsrs	r3, r3, #10
 800185e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	08db      	lsrs	r3, r3, #3
 8001864:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	015a      	lsls	r2, r3, #5
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	02db      	lsls	r3, r3, #11
 800186e:	4313      	orrs	r3, r2
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	4313      	orrs	r3, r2
 8001874:	627b      	str	r3, [r7, #36]	@ 0x24
 8001876:	e032      	b.n	80018de <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d117      	bne.n	80018b0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	0fdb      	lsrs	r3, r3, #31
 8001884:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	0cdb      	lsrs	r3, r3, #19
 800188a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	0adb      	lsrs	r3, r3, #11
 8001890:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	08db      	lsrs	r3, r3, #3
 8001896:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	015a      	lsls	r2, r3, #5
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	029b      	lsls	r3, r3, #10
 80018a0:	431a      	orrs	r2, r3
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	03db      	lsls	r3, r3, #15
 80018a6:	4313      	orrs	r3, r2
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ae:	e016      	b.n	80018de <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	0f1b      	lsrs	r3, r3, #28
 80018b4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	0d1b      	lsrs	r3, r3, #20
 80018ba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	0b1b      	lsrs	r3, r3, #12
 80018c0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	011a      	lsls	r2, r3, #4
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	431a      	orrs	r2, r3
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	031b      	lsls	r3, r3, #12
 80018d6:	4313      	orrs	r3, r2
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	4313      	orrs	r3, r2
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e4:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80018e6:	e00d      	b.n	8001904 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80018f0:	d104      	bne.n	80018fc <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	615a      	str	r2, [r3, #20]
}
 80018fa:	e003      	b.n	8001904 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	60da      	str	r2, [r3, #12]
}
 8001904:	bf00      	nop
 8001906:	372c      	adds	r7, #44	@ 0x2c
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800191e:	4b89      	ldr	r3, [pc, #548]	@ (8001b44 <HAL_GPIO_Init+0x234>)
 8001920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001922:	e194      	b.n	8001c4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2101      	movs	r1, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8186 	beq.w	8001c48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d005      	beq.n	8001954 <HAL_GPIO_Init+0x44>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d130      	bne.n	80019b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800198a:	2201      	movs	r2, #1
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	f003 0201 	and.w	r2, r3, #1
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d017      	beq.n	80019f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d123      	bne.n	8001a46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	08da      	lsrs	r2, r3, #3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3208      	adds	r2, #8
 8001a40:	69b9      	ldr	r1, [r7, #24]
 8001a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0203 	and.w	r2, r3, #3
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80e0 	beq.w	8001c48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a88:	4b2f      	ldr	r3, [pc, #188]	@ (8001b48 <HAL_GPIO_Init+0x238>)
 8001a8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a8e:	4a2e      	ldr	r2, [pc, #184]	@ (8001b48 <HAL_GPIO_Init+0x238>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a98:	4b2b      	ldr	r3, [pc, #172]	@ (8001b48 <HAL_GPIO_Init+0x238>)
 8001a9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa6:	4a29      	ldr	r2, [pc, #164]	@ (8001b4c <HAL_GPIO_Init+0x23c>)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a20      	ldr	r2, [pc, #128]	@ (8001b50 <HAL_GPIO_Init+0x240>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d052      	beq.n	8001b78 <HAL_GPIO_Init+0x268>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b54 <HAL_GPIO_Init+0x244>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d031      	beq.n	8001b3e <HAL_GPIO_Init+0x22e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a1e      	ldr	r2, [pc, #120]	@ (8001b58 <HAL_GPIO_Init+0x248>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d02b      	beq.n	8001b3a <HAL_GPIO_Init+0x22a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b5c <HAL_GPIO_Init+0x24c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d025      	beq.n	8001b36 <HAL_GPIO_Init+0x226>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a1c      	ldr	r2, [pc, #112]	@ (8001b60 <HAL_GPIO_Init+0x250>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01f      	beq.n	8001b32 <HAL_GPIO_Init+0x222>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b64 <HAL_GPIO_Init+0x254>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_GPIO_Init+0x21e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a1a      	ldr	r2, [pc, #104]	@ (8001b68 <HAL_GPIO_Init+0x258>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0x21a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a19      	ldr	r2, [pc, #100]	@ (8001b6c <HAL_GPIO_Init+0x25c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00d      	beq.n	8001b26 <HAL_GPIO_Init+0x216>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a18      	ldr	r2, [pc, #96]	@ (8001b70 <HAL_GPIO_Init+0x260>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <HAL_GPIO_Init+0x212>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a17      	ldr	r2, [pc, #92]	@ (8001b74 <HAL_GPIO_Init+0x264>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_GPIO_Init+0x20e>
 8001b1a:	2309      	movs	r3, #9
 8001b1c:	e02d      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b1e:	230a      	movs	r3, #10
 8001b20:	e02b      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b22:	2308      	movs	r3, #8
 8001b24:	e029      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b26:	2307      	movs	r3, #7
 8001b28:	e027      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	e025      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b2e:	2305      	movs	r3, #5
 8001b30:	e023      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b32:	2304      	movs	r3, #4
 8001b34:	e021      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b36:	2303      	movs	r3, #3
 8001b38:	e01f      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e01d      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e01b      	b.n	8001b7a <HAL_GPIO_Init+0x26a>
 8001b42:	bf00      	nop
 8001b44:	58000080 	.word	0x58000080
 8001b48:	58024400 	.word	0x58024400
 8001b4c:	58000400 	.word	0x58000400
 8001b50:	58020000 	.word	0x58020000
 8001b54:	58020400 	.word	0x58020400
 8001b58:	58020800 	.word	0x58020800
 8001b5c:	58020c00 	.word	0x58020c00
 8001b60:	58021000 	.word	0x58021000
 8001b64:	58021400 	.word	0x58021400
 8001b68:	58021800 	.word	0x58021800
 8001b6c:	58021c00 	.word	0x58021c00
 8001b70:	58022000 	.word	0x58022000
 8001b74:	58022400 	.word	0x58022400
 8001b78:	2300      	movs	r3, #0
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	f002 0203 	and.w	r2, r2, #3
 8001b80:	0092      	lsls	r2, r2, #2
 8001b82:	4093      	lsls	r3, r2
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b8a:	4938      	ldr	r1, [pc, #224]	@ (8001c6c <HAL_GPIO_Init+0x35c>)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001bbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d003      	beq.n	8001bec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001bec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f47f ae63 	bne.w	8001924 <HAL_GPIO_Init+0x14>
  }
}
 8001c5e:	bf00      	nop
 8001c60:	bf00      	nop
 8001c62:	3724      	adds	r7, #36	@ 0x24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	58000400 	.word	0x58000400

08001c70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e001      	b.n	8001c92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cb0:	787b      	ldrb	r3, [r7, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001cbc:	e003      	b.n	8001cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cbe:	887b      	ldrh	r3, [r7, #2]
 8001cc0:	041a      	lsls	r2, r3, #16
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	619a      	str	r2, [r3, #24]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f00b fd2a 	bl	800d752 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e070      	b.n	8001dfc <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f00b fd24 	bl	800d77c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8001d6a:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d8a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8001d9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a19      	ldr	r2, [pc, #100]	@ (8001e04 <HAL_JPEG_Init+0xfc>)
 8001da0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a18      	ldr	r2, [pc, #96]	@ (8001e08 <HAL_JPEG_Init+0x100>)
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 fcdb 	bl	8002770 <JPEG_Set_HuffEnc_Mem>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d004      	beq.n	8001dca <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e018      	b.n	8001dfc <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dd8:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	08011910 	.word	0x08011910
 8001e08:	08011950 	.word	0x08011950

08001e0c <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <HAL_JPEG_GetInfo+0x16>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e083      	b.n	8001f2e <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d103      	bne.n	8001e3c <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	2210      	movs	r2, #16
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e017      	b.n	8001e6c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d103      	bne.n	8001e52 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	e00c      	b.n	8001e6c <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d103      	bne.n	8001e68 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2230      	movs	r2, #48	@ 0x30
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e001      	b.n	8001e6c <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e060      	b.n	8001f2e <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	0c1b      	lsrs	r3, r3, #16
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d003      	beq.n	8001e98 <HAL_JPEG_GetInfo+0x8c>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b30      	cmp	r3, #48	@ 0x30
 8001e96:	d140      	bne.n	8001f1a <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d109      	bne.n	8001edc <HAL_JPEG_GetInfo+0xd0>
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_JPEG_GetInfo+0xd0>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d103      	bne.n	8001edc <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	e01d      	b.n	8001f18 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_JPEG_GetInfo+0xea>
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d106      	bne.n	8001ef6 <HAL_JPEG_GetInfo+0xea>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	e010      	b.n	8001f18 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d109      	bne.n	8001f10 <HAL_JPEG_GetInfo+0x104>
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d106      	bne.n	8001f10 <HAL_JPEG_GetInfo+0x104>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d103      	bne.n	8001f10 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	e003      	b.n	8001f18 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2200      	movs	r2, #0
 8001f14:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001f16:	e003      	b.n	8001f20 <HAL_JPEG_GetInfo+0x114>
 8001f18:	e002      	b.n	8001f20 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f001 fd17 	bl	8003954 <JPEG_GetQuality>
 8001f26:	4602      	mov	r2, r0
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_JPEG_Decode_DMA+0x20>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <HAL_JPEG_Decode_DMA+0x20>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e04c      	b.n	8001ff4 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_JPEG_Decode_DMA+0x32>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e045      	b.n	8001ff4 <HAL_JPEG_Decode_DMA+0xbe>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d134      	bne.n	8001fe6 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2204      	movs	r2, #4
 8001f80:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f88:	f023 020f 	bic.w	r2, r3, #15
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f94:	f043 020e 	orr.w	r2, r3, #14
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 fe57 	bl	8002c74 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f001 f978 	bl	80032bc <JPEG_DMA_StartProcess>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00f      	beq.n	8001ff2 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2206      	movs	r2, #6
 8001fd6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e006      	b.n	8001ff4 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e000      	b.n	8001ff4 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b0c      	cmp	r3, #12
 8002014:	d116      	bne.n	8002044 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002024:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d033      	beq.n	800209e <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	655a      	str	r2, [r3, #84]	@ 0x54
 8002042:	e02c      	b.n	800209e <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b08      	cmp	r3, #8
 800204e:	d126      	bne.n	800209e <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f043 0306 	orr.w	r3, r3, #6
 800206c:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d009      	beq.n	800208c <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800208a:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43da      	mvns	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	400a      	ands	r2, r1
 800209c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002116:	b2db      	uxtb	r3, r3
 8002118:	3b03      	subs	r3, #3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d813      	bhi.n	8002146 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b08      	cmp	r3, #8
 8002128:	d103      	bne.n	8002132 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fe16 	bl	8002d5c <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8002130:	e00b      	b.n	800214a <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d105      	bne.n	800214a <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f001 f956 	bl	80033f0 <JPEG_DMA_ContinueProcess>
      break;
 8002144:	e001      	b.n	800214a <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8002146:	bf00      	nop
 8002148:	e000      	b.n	800214c <HAL_JPEG_IRQHandler+0x44>
      break;
 800214a:	bf00      	nop
  }
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8002154:	b480      	push	{r7}
 8002156:	b08b      	sub	sp, #44	@ 0x2c
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
 800216a:	e020      	b.n	80021ae <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	4413      	add	r3, r2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8002176:	6a3a      	ldr	r2, [r7, #32]
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	4413      	add	r3, r2
 800217c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002180:	d90f      	bls.n	80021a2 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e055      	b.n	8002232 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	68b9      	ldr	r1, [r7, #8]
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	440b      	add	r3, r1
 8002190:	3201      	adds	r2, #1
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]
      p++;
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	3301      	adds	r3, #1
 800219a:	623b      	str	r3, [r7, #32]
      i--;
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	3b01      	subs	r3, #1
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1ee      	bne.n	8002186 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	3301      	adds	r3, #1
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d9db      	bls.n	800216c <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	4413      	add	r3, r2
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	6a3a      	ldr	r2, [r7, #32]
 80021c2:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	617b      	str	r3, [r7, #20]
  p = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80021d2:	e027      	b.n	8002224 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	4413      	add	r3, r2
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	601a      	str	r2, [r3, #0]
      p++;
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	3301      	adds	r3, #1
 80021e4:	623b      	str	r3, [r7, #32]
      code++;
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	3301      	adds	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80021ec:	68ba      	ldr	r2, [r7, #8]
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	4413      	add	r3, r2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	461a      	mov	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d0eb      	beq.n	80021d4 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b1f      	cmp	r3, #31
 8002200:	d901      	bls.n	8002206 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e015      	b.n	8002232 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8002206:	2201      	movs	r2, #1
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	429a      	cmp	r2, r3
 8002212:	d301      	bcc.n	8002218 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e00c      	b.n	8002232 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
    si++;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	4413      	add	r3, r2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1dd      	bne.n	80021ec <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	372c      	adds	r7, #44	@ 0x2c
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8002244:	af00      	add	r7, sp, #0
 8002246:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800224a:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800224e:	6018      	str	r0, [r3, #0]
 8002250:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002254:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002258:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800225a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800225e:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	f107 020c 	add.w	r2, r7, #12
 800226c:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8002270:	f7ff ff70 	bl	8002154 <JPEG_Bits_To_SizeCodes>
 8002274:	4603      	mov	r3, r0
 8002276:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 800227a:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8002282:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8002286:	e075      	b.n	8002374 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 800228e:	e067      	b.n	8002360 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8002290:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002294:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800229e:	4413      	add	r3, r2
 80022a0:	3310      	adds	r3, #16
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 80022a8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80022b0:	23a0      	movs	r3, #160	@ 0xa0
 80022b2:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80022b6:	e021      	b.n	80022fc <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80022b8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80022bc:	2bf0      	cmp	r3, #240	@ 0xf0
 80022be:	d103      	bne.n	80022c8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80022c0:	23a1      	movs	r3, #161	@ 0xa1
 80022c2:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 80022c6:	e019      	b.n	80022fc <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80022c8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 80022d6:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80022e2:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	461a      	mov	r2, r3
 80022f0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80022f4:	4413      	add	r3, r2
 80022f6:	3b01      	subs	r3, #1
 80022f8:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80022fc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002300:	2ba1      	cmp	r3, #161	@ 0xa1
 8002302:	d901      	bls.n	8002308 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002304:	2301      	movs	r3, #1
 8002306:	e035      	b.n	8002374 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002308:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800230c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002310:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8002314:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002318:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800231c:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002320:	6819      	ldr	r1, [r3, #0]
 8002322:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002326:	3328      	adds	r3, #40	@ 0x28
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800232e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002332:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8002336:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	3b01      	subs	r3, #1
 8002340:	b2d9      	uxtb	r1, r3
 8002342:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002346:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002350:	4413      	add	r3, r2
 8002352:	460a      	mov	r2, r1
 8002354:	701a      	strb	r2, [r3, #0]
      k++;
 8002356:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800235a:	3301      	adds	r3, #1
 800235c:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8002360:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002364:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800236e:	429a      	cmp	r2, r3
 8002370:	d38e      	bcc.n	8002290 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8002384:	af00      	add	r7, sp, #0
 8002386:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800238a:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800238e:	6018      	str	r0, [r3, #0]
 8002390:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002394:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002398:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800239a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800239e:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 80023a8:	f107 0208 	add.w	r2, r7, #8
 80023ac:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 80023b0:	f7ff fed0 	bl	8002154 <JPEG_Bits_To_SizeCodes>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 80023ba:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80023c2:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 80023c6:	e048      	b.n	800245a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 80023ce:	e03d      	b.n	800244c <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 80023d0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80023d4:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80023de:	4413      	add	r3, r2
 80023e0:	3310      	adds	r3, #16
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80023e8:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80023ec:	2b0b      	cmp	r3, #11
 80023ee:	d901      	bls.n	80023f4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80023f0:	2301      	movs	r3, #1
 80023f2:	e032      	b.n	800245a <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80023f4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80023f8:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 80023fc:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8002400:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002404:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002408:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800240c:	6819      	ldr	r1, [r3, #0]
 800240e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002412:	3302      	adds	r3, #2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800241a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800241e:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8002422:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8002426:	4413      	add	r3, r2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	3b01      	subs	r3, #1
 800242c:	b2d9      	uxtb	r1, r3
 800242e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002432:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800243c:	4413      	add	r3, r2
 800243e:	460a      	mov	r2, r1
 8002440:	701a      	strb	r2, [r3, #0]
      k++;
 8002442:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8002446:	3301      	adds	r3, #1
 8002448:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 800244c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8002450:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8002454:	429a      	cmp	r2, r3
 8002456:	d3bb      	bcc.n	80023d0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b09a      	sub	sp, #104	@ 0x68
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	d106      	bne.n	800248c <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8002486:	3318      	adds	r3, #24
 8002488:	663b      	str	r3, [r7, #96]	@ 0x60
 800248a:	e00f      	b.n	80024ac <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	429a      	cmp	r2, r3
 8002498:	d106      	bne.n	80024a8 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 80024a2:	3318      	adds	r3, #24
 80024a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80024a6:	e001      	b.n	80024ac <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e059      	b.n	8002560 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d055      	beq.n	800255e <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4619      	mov	r1, r3
 80024b8:	68b8      	ldr	r0, [r7, #8]
 80024ba:	f7ff ff60 	bl	800237e <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80024be:	4603      	mov	r3, r0
 80024c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 80024c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 80024cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80024d0:	e046      	b.n	8002560 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 80024d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024d4:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 80024d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024d8:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80024dc:	601a      	str	r2, [r3, #0]
    addressDef++;
 80024de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024e0:	3304      	adds	r3, #4
 80024e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 80024e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80024e6:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80024ea:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 80024ec:	230c      	movs	r3, #12
 80024ee:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 80024f0:	e032      	b.n	8002558 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 80024f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024f4:	3b01      	subs	r3, #1
 80024f6:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 80024f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024fa:	3b04      	subs	r3, #4
 80024fc:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80024fe:	f107 0214 	add.w	r2, r7, #20
 8002502:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002504:	4413      	add	r3, r2
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800250e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002510:	3302      	adds	r3, #2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	3368      	adds	r3, #104	@ 0x68
 8002516:	443b      	add	r3, r7
 8002518:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8002522:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002524:	3b01      	subs	r3, #1
 8002526:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002528:	f107 0214 	add.w	r2, r7, #20
 800252c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800252e:	4413      	add	r3, r2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002538:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800253a:	3302      	adds	r3, #2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	3368      	adds	r3, #104	@ 0x68
 8002540:	443b      	add	r3, r7
 8002542:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	4313      	orrs	r3, r2
 800254a:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800254c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800254e:	041a      	lsls	r2, r3, #16
 8002550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002552:	431a      	orrs	r2, r3
 8002554:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002556:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8002558:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800255a:	2b01      	cmp	r3, #1
 800255c:	d8c9      	bhi.n	80024f2 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3768      	adds	r7, #104	@ 0x68
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 800256e:	af00      	add	r7, sp, #0
 8002570:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002574:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002578:	6018      	str	r0, [r3, #0]
 800257a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800257e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002582:	6019      	str	r1, [r3, #0]
 8002584:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002588:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800258c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800258e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002592:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800259e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80025a2:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d10c      	bne.n	80025c6 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80025ac:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80025b0:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025bc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80025c0:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80025c4:	e01d      	b.n	8002602 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80025c6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80025ca:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80025d6:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80025da:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d10c      	bne.n	80025fe <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80025e4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80025e8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 80025f4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80025f8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 80025fc:	e001      	b.n	8002602 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0a8      	b.n	8002754 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8002602:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002606:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80a0 	beq.w	8002752 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8002612:	f107 0214 	add.w	r2, r7, #20
 8002616:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800261a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800261e:	4611      	mov	r1, r2
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	f7ff fe0c 	bl	800223e <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8002626:	4603      	mov	r3, r0
 8002628:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 800262c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8002634:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002638:	e08c      	b.n	8002754 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800263a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800263e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002648:	e00e      	b.n	8002668 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800264a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800264e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002652:	601a      	str	r2, [r3, #0]
      addressDef++;
 8002654:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002658:	3304      	adds	r3, #4
 800265a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800265e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002662:	3301      	adds	r3, #1
 8002664:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002668:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800266c:	2b02      	cmp	r3, #2
 800266e:	d9ec      	bls.n	800264a <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8002670:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002674:	4a3a      	ldr	r2, [pc, #232]	@ (8002760 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8002676:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002678:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800267c:	3304      	adds	r3, #4
 800267e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8002682:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002686:	4a37      	ldr	r2, [pc, #220]	@ (8002764 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8002688:	601a      	str	r2, [r3, #0]
    addressDef++;
 800268a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800268e:	3304      	adds	r3, #4
 8002690:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8002694:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002698:	4a33      	ldr	r2, [pc, #204]	@ (8002768 <JPEG_Set_HuffAC_Mem+0x200>)
 800269a:	601a      	str	r2, [r3, #0]
    addressDef++;
 800269c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80026a0:	3304      	adds	r3, #4
 80026a2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 80026a6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80026aa:	4a30      	ldr	r2, [pc, #192]	@ (800276c <JPEG_Set_HuffAC_Mem+0x204>)
 80026ac:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 80026ae:	23a2      	movs	r3, #162	@ 0xa2
 80026b0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 80026b4:	e049      	b.n	800274a <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 80026b6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 80026c0:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80026c4:	3b04      	subs	r3, #4
 80026c6:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80026ca:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80026ce:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 80026d2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80026e0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80026e4:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 80026e8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80026ec:	3328      	adds	r3, #40	@ 0x28
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 80026fc:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002700:	3b01      	subs	r3, #1
 8002702:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002706:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800270a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800270e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002712:	4413      	add	r3, r2
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800271c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002720:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8002724:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002728:	3328      	adds	r3, #40	@ 0x28
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002738:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800273c:	041a      	lsls	r2, r3, #16
 800273e:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8002742:	431a      	orrs	r2, r3
 8002744:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002748:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800274a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800274e:	2b01      	cmp	r3, #1
 8002750:	d8b1      	bhi.n	80026b6 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	0fd10fd0 	.word	0x0fd10fd0
 8002764:	0fd30fd2 	.word	0x0fd30fd2
 8002768:	0fd50fd4 	.word	0x0fd50fd4
 800276c:	0fd70fd6 	.word	0x0fd70fd6

08002770 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f84d 	bl	8002818 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8002786:	461a      	mov	r2, r3
 8002788:	491f      	ldr	r1, [pc, #124]	@ (8002808 <JPEG_Set_HuffEnc_Mem+0x98>)
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff feec 	bl	8002568 <JPEG_Set_HuffAC_Mem>
 8002790:	4603      	mov	r3, r0
 8002792:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	e030      	b.n	8002800 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80027a6:	461a      	mov	r2, r3
 80027a8:	4918      	ldr	r1, [pc, #96]	@ (800280c <JPEG_Set_HuffEnc_Mem+0x9c>)
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fedc 	bl	8002568 <JPEG_Set_HuffAC_Mem>
 80027b0:	4603      	mov	r3, r0
 80027b2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	e020      	b.n	8002800 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 80027c6:	461a      	mov	r2, r3
 80027c8:	4911      	ldr	r1, [pc, #68]	@ (8002810 <JPEG_Set_HuffEnc_Mem+0xa0>)
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fe4a 	bl	8002464 <JPEG_Set_HuffDC_Mem>
 80027d0:	4603      	mov	r3, r0
 80027d2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	e010      	b.n	8002800 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 80027e6:	461a      	mov	r2, r3
 80027e8:	490a      	ldr	r1, [pc, #40]	@ (8002814 <JPEG_Set_HuffEnc_Mem+0xa4>)
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff fe3a 	bl	8002464 <JPEG_Set_HuffDC_Mem>
 80027f0:	4603      	mov	r3, r0
 80027f2:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	e000      	b.n	8002800 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	08011768 	.word	0x08011768
 800280c:	0801181c 	.word	0x0801181c
 8002810:	08011730 	.word	0x08011730
 8002814:	0801174c 	.word	0x0801174c

08002818 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8002818:	b480      	push	{r7}
 800281a:	b08b      	sub	sp, #44	@ 0x2c
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8002820:	4b80      	ldr	r3, [pc, #512]	@ (8002a24 <JPEG_Set_Huff_DHTMem+0x20c>)
 8002822:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8002824:	4b80      	ldr	r3, [pc, #512]	@ (8002a28 <JPEG_Set_Huff_DHTMem+0x210>)
 8002826:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8002828:	4b80      	ldr	r3, [pc, #512]	@ (8002a2c <JPEG_Set_Huff_DHTMem+0x214>)
 800282a:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800282c:	4b80      	ldr	r3, [pc, #512]	@ (8002a30 <JPEG_Set_Huff_DHTMem+0x218>)
 800282e:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002838:	330c      	adds	r3, #12
 800283a:	623b      	str	r3, [r7, #32]
  index = 16;
 800283c:	2310      	movs	r3, #16
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002840:	e01d      	b.n	800287e <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	3b01      	subs	r3, #1
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	5cd3      	ldrb	r3, [r2, r3]
 800284a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284e:	3b02      	subs	r3, #2
 8002850:	6979      	ldr	r1, [r7, #20]
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002856:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	3b03      	subs	r3, #3
 800285c:	6979      	ldr	r1, [r7, #20]
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002862:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8002864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002866:	3a04      	subs	r2, #4
 8002868:	6979      	ldr	r1, [r7, #20]
 800286a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800286c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	601a      	str	r2, [r3, #0]
    address--;
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	3b04      	subs	r3, #4
 8002876:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	3b04      	subs	r3, #4
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	2b03      	cmp	r3, #3
 8002882:	d8de      	bhi.n	8002842 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800288c:	3318      	adds	r3, #24
 800288e:	623b      	str	r3, [r7, #32]
  index = 12;
 8002890:	230c      	movs	r3, #12
 8002892:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002894:	e021      	b.n	80028da <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	3b01      	subs	r3, #1
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4413      	add	r3, r2
 800289e:	7c1b      	ldrb	r3, [r3, #16]
 80028a0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	3b02      	subs	r3, #2
 80028a6:	6979      	ldr	r1, [r7, #20]
 80028a8:	440b      	add	r3, r1
 80028aa:	7c1b      	ldrb	r3, [r3, #16]
 80028ac:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80028ae:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	3b03      	subs	r3, #3
 80028b4:	6979      	ldr	r1, [r7, #20]
 80028b6:	440b      	add	r3, r1
 80028b8:	7c1b      	ldrb	r3, [r3, #16]
 80028ba:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80028bc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 80028be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c0:	3a04      	subs	r2, #4
 80028c2:	6979      	ldr	r1, [r7, #20]
 80028c4:	440a      	add	r2, r1
 80028c6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80028c8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	601a      	str	r2, [r3, #0]
    address--;
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	3b04      	subs	r3, #4
 80028d2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	3b04      	subs	r3, #4
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d8da      	bhi.n	8002896 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80028e8:	3328      	adds	r3, #40	@ 0x28
 80028ea:	623b      	str	r3, [r7, #32]
  index = 16;
 80028ec:	2310      	movs	r3, #16
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80028f0:	e01d      	b.n	800292e <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	3b01      	subs	r3, #1
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	5cd3      	ldrb	r3, [r2, r3]
 80028fa:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	3b02      	subs	r3, #2
 8002900:	69f9      	ldr	r1, [r7, #28]
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002906:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	3b03      	subs	r3, #3
 800290c:	69f9      	ldr	r1, [r7, #28]
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002912:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8002914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002916:	3a04      	subs	r2, #4
 8002918:	69f9      	ldr	r1, [r7, #28]
 800291a:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800291c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	601a      	str	r2, [r3, #0]
    address--;
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	3b04      	subs	r3, #4
 8002926:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	3b04      	subs	r3, #4
 800292c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	2b03      	cmp	r3, #3
 8002932:	d8de      	bhi.n	80028f2 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800293c:	33cc      	adds	r3, #204	@ 0xcc
 800293e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b3b      	ldr	r3, [pc, #236]	@ (8002a34 <JPEG_Set_Huff_DHTMem+0x21c>)
 8002946:	4013      	ands	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8002950:	021a      	lsls	r2, r3, #8
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800295c:	4313      	orrs	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	3b04      	subs	r3, #4
 800296a:	623b      	str	r3, [r7, #32]
  index = 160;
 800296c:	23a0      	movs	r3, #160	@ 0xa0
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002970:	e021      	b.n	80029b6 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	3b01      	subs	r3, #1
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	7c1b      	ldrb	r3, [r3, #16]
 800297c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	3b02      	subs	r3, #2
 8002982:	69f9      	ldr	r1, [r7, #28]
 8002984:	440b      	add	r3, r1
 8002986:	7c1b      	ldrb	r3, [r3, #16]
 8002988:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800298a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	3b03      	subs	r3, #3
 8002990:	69f9      	ldr	r1, [r7, #28]
 8002992:	440b      	add	r3, r1
 8002994:	7c1b      	ldrb	r3, [r3, #16]
 8002996:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002998:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800299a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800299c:	3a04      	subs	r2, #4
 800299e:	69f9      	ldr	r1, [r7, #28]
 80029a0:	440a      	add	r2, r1
 80029a2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80029a4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	601a      	str	r2, [r3, #0]
    address--;
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	3b04      	subs	r3, #4
 80029ae:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	3b04      	subs	r3, #4
 80029b4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d8da      	bhi.n	8002972 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80029c4:	33cc      	adds	r3, #204	@ 0xcc
 80029c6:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	785b      	ldrb	r3, [r3, #1]
 80029d4:	061a      	lsls	r2, r3, #24
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	431a      	orrs	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
  *address = value;
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80029f2:	33dc      	adds	r3, #220	@ 0xdc
 80029f4:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002a34 <JPEG_Set_Huff_DHTMem+0x21c>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	7bdb      	ldrb	r3, [r3, #15]
 8002a04:	021a      	lsls	r2, r3, #8
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	7b92      	ldrb	r2, [r2, #14]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	3b04      	subs	r3, #4
 8002a1c:	623b      	str	r3, [r7, #32]
  index = 12;
 8002a1e:	230c      	movs	r3, #12
 8002a20:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a22:	e027      	b.n	8002a74 <JPEG_Set_Huff_DHTMem+0x25c>
 8002a24:	08011768 	.word	0x08011768
 8002a28:	0801181c 	.word	0x0801181c
 8002a2c:	08011730 	.word	0x08011730
 8002a30:	0801174c 	.word	0x0801174c
 8002a34:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	5cd3      	ldrb	r3, [r2, r3]
 8002a40:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8002a42:	6939      	ldr	r1, [r7, #16]
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a46:	440b      	add	r3, r1
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002a4c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	3b01      	subs	r3, #1
 8002a52:	6939      	ldr	r1, [r7, #16]
 8002a54:	5ccb      	ldrb	r3, [r1, r3]
 8002a56:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8002a58:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a5c:	3a02      	subs	r2, #2
 8002a5e:	6939      	ldr	r1, [r7, #16]
 8002a60:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002a62:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	601a      	str	r2, [r3, #0]
    address--;
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	3b04      	subs	r3, #4
 8002a6c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	3b04      	subs	r3, #4
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d8de      	bhi.n	8002a38 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002a82:	33dc      	adds	r3, #220	@ 0xdc
 8002a84:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	7c5b      	ldrb	r3, [r3, #17]
 8002a92:	061a      	lsls	r2, r3, #24
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	7c1b      	ldrb	r3, [r3, #16]
 8002a9c:	041b      	lsls	r3, r3, #16
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002ab0:	33e8      	adds	r3, #232	@ 0xe8
 8002ab2:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b6d      	ldr	r3, [pc, #436]	@ (8002c70 <JPEG_Set_Huff_DHTMem+0x458>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	7edb      	ldrb	r3, [r3, #27]
 8002ac2:	021a      	lsls	r2, r3, #8
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	7e92      	ldrb	r2, [r2, #26]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	3b04      	subs	r3, #4
 8002ada:	623b      	str	r3, [r7, #32]
  index = 8;
 8002adc:	2308      	movs	r3, #8
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002ae0:	e021      	b.n	8002b26 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	7c1b      	ldrb	r3, [r3, #16]
 8002aec:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002aee:	6939      	ldr	r1, [r7, #16]
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	440b      	add	r3, r1
 8002af4:	3310      	adds	r3, #16
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002afa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	3b01      	subs	r3, #1
 8002b00:	6939      	ldr	r1, [r7, #16]
 8002b02:	440b      	add	r3, r1
 8002b04:	7c1b      	ldrb	r3, [r3, #16]
 8002b06:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002b08:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0c:	3a02      	subs	r2, #2
 8002b0e:	6939      	ldr	r1, [r7, #16]
 8002b10:	440a      	add	r2, r1
 8002b12:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002b14:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	601a      	str	r2, [r3, #0]
    address--;
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	3b04      	subs	r3, #4
 8002b1e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	3b04      	subs	r3, #4
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d8da      	bhi.n	8002ae2 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002b34:	33e8      	adds	r3, #232	@ 0xe8
 8002b36:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	785b      	ldrb	r3, [r3, #1]
 8002b44:	061a      	lsls	r2, r3, #24
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	041b      	lsls	r3, r3, #16
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002b62:	33f8      	adds	r3, #248	@ 0xf8
 8002b64:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b41      	ldr	r3, [pc, #260]	@ (8002c70 <JPEG_Set_Huff_DHTMem+0x458>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	7bdb      	ldrb	r3, [r3, #15]
 8002b74:	021a      	lsls	r2, r3, #8
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	7b92      	ldrb	r2, [r2, #14]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	3b04      	subs	r3, #4
 8002b8c:	623b      	str	r3, [r7, #32]
  index = 12;
 8002b8e:	230c      	movs	r3, #12
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002b92:	e01d      	b.n	8002bd0 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	3301      	adds	r3, #1
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002b9e:	69b9      	ldr	r1, [r7, #24]
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	440b      	add	r3, r1
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002ba8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	3b01      	subs	r3, #1
 8002bae:	69b9      	ldr	r1, [r7, #24]
 8002bb0:	5ccb      	ldrb	r3, [r1, r3]
 8002bb2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002bb4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb8:	3a02      	subs	r2, #2
 8002bba:	69b9      	ldr	r1, [r7, #24]
 8002bbc:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002bbe:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	601a      	str	r2, [r3, #0]
    address--;
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	3b04      	subs	r3, #4
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d8de      	bhi.n	8002b94 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002bde:	33f8      	adds	r3, #248	@ 0xf8
 8002be0:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	7c5b      	ldrb	r3, [r3, #17]
 8002bee:	061a      	lsls	r2, r3, #24
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	7c1b      	ldrb	r3, [r3, #16]
 8002bf8:	041b      	lsls	r3, r3, #16
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002c0c:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002c10:	623b      	str	r3, [r7, #32]
  index = 160;
 8002c12:	23a0      	movs	r3, #160	@ 0xa0
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002c16:	e021      	b.n	8002c5c <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4413      	add	r3, r2
 8002c20:	7c1b      	ldrb	r3, [r3, #16]
 8002c22:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002c24:	69b9      	ldr	r1, [r7, #24]
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	440b      	add	r3, r1
 8002c2a:	3310      	adds	r3, #16
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002c30:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	3b01      	subs	r3, #1
 8002c36:	69b9      	ldr	r1, [r7, #24]
 8002c38:	440b      	add	r3, r1
 8002c3a:	7c1b      	ldrb	r3, [r3, #16]
 8002c3c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002c3e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8002c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c42:	3a02      	subs	r2, #2
 8002c44:	69b9      	ldr	r1, [r7, #24]
 8002c46:	440a      	add	r2, r1
 8002c48:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002c4a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	601a      	str	r2, [r3, #0]
    address--;
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	3b04      	subs	r3, #4
 8002c54:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	3b04      	subs	r3, #4
 8002c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d8da      	bhi.n	8002c18 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8002c62:	bf00      	nop
 8002c64:	bf00      	nop
 8002c66:	372c      	adds	r7, #44	@ 0x2c
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	ffff0000 	.word	0xffff0000

08002c74 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c80:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d108      	bne.n	8002ca6 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0208 	orr.w	r2, r2, #8
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	e007      	b.n	8002cb6 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0208 	bic.w	r2, r2, #8
 8002cb4:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0201 	bic.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002cd4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ce4:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cf4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002d04:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d108      	bne.n	8002d34 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8002d30:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8002d32:	e00d      	b.n	8002d50 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d38:	f003 030c 	and.w	r3, r3, #12
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d107      	bne.n	8002d50 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002d4e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d125      	bne.n	8002dbc <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01e      	beq.n	8002dbc <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3304      	adds	r3, #4
 8002d82:	4619      	mov	r1, r3
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff f841 	bl	8001e0c <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3304      	adds	r3, #4
 8002d94:	4619      	mov	r1, r3
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f009 fa0a 	bl	800c1b0 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002daa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dba:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d116      	bne.n	8002df6 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d004      	beq.n	8002de0 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002dd6:	2108      	movs	r1, #8
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f988 	bl	80030ee <JPEG_ReadInputData>
 8002dde:	e00a      	b.n	8002df6 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8002dee:	2101      	movs	r1, #1
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f97c 	bl	80030ee <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d116      	bne.n	8002e30 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002e10:	2108      	movs	r1, #8
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f864 	bl	8002ee0 <JPEG_StoreOutputData>
 8002e18:	e00a      	b.n	8002e30 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8002e28:	2101      	movs	r1, #1
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f858 	bl	8002ee0 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d14b      	bne.n	8002ed6 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0201 	bic.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d107      	bne.n	8002e6a <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002e68:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002e78:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69d9      	ldr	r1, [r3, #28]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f009 f9d9 	bl	800c244 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9c:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea2:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d103      	bne.n	8002ecc <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f009 f9e1 	bl	800c28c <HAL_JPEG_DecodeCpltCallback>
 8002eca:	e002      	b.n	8002ed2 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff f911 	bl	80020f4 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d34b      	bcc.n	8002f94 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e031      	b.n	8002f66 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f08:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f12:	4413      	add	r3, r2
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	0a19      	lsrs	r1, r3, #8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	3301      	adds	r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	b2ca      	uxtb	r2, r1
 8002f2c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	0c19      	lsrs	r1, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	3302      	adds	r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	b2ca      	uxtb	r2, r1
 8002f40:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	0e19      	lsrs	r1, r3, #24
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	3303      	adds	r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	b2ca      	uxtb	r2, r1
 8002f54:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5a:	1d1a      	adds	r2, r3, #4
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	3301      	adds	r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d3c9      	bcc.n	8002f02 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f76:	429a      	cmp	r2, r3
 8002f78:	f040 80b5 	bne.w	80030e6 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69d9      	ldr	r1, [r3, #28]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f84:	461a      	mov	r2, r3
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f009 f95c 	bl	800c244 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f92:	e0a8      	b.n	80030e6 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	f240 80a2 	bls.w	80030e6 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	e031      	b.n	800301a <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbc:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	4413      	add	r3, r2
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	0a19      	lsrs	r1, r3, #8
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69da      	ldr	r2, [r3, #28]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	3301      	adds	r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	b2ca      	uxtb	r2, r1
 8002fe0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	0c19      	lsrs	r1, r3, #16
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	3302      	adds	r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	b2ca      	uxtb	r2, r1
 8002ff4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	0e19      	lsrs	r1, r3, #24
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69da      	ldr	r2, [r3, #28]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	3303      	adds	r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	b2ca      	uxtb	r2, r1
 8003008:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300e:	1d1a      	adds	r2, r3, #4
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3301      	adds	r3, #1
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	429a      	cmp	r2, r3
 8003020:	d3c9      	bcc.n	8002fb6 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	429a      	cmp	r2, r3
 800302c:	d10b      	bne.n	8003046 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69d9      	ldr	r1, [r3, #28]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003036:	461a      	mov	r2, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f009 f903 	bl	800c244 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003044:	e04f      	b.n	80030e6 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003058:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e015      	b.n	800308c <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	fa22 f103 	lsr.w	r1, r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69da      	ldr	r2, [r3, #28]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	4413      	add	r3, r2
 8003078:	b2ca      	uxtb	r2, r1
 800307a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3301      	adds	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	429a      	cmp	r2, r3
 8003092:	d3e5      	bcc.n	8003060 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69d9      	ldr	r1, [r3, #28]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	461a      	mov	r2, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f009 f8d0 	bl	800c244 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f1c3 0304 	rsb	r3, r3, #4
 80030b0:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	e013      	b.n	80030e0 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	fa22 f103 	lsr.w	r1, r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69da      	ldr	r2, [r3, #28]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	4413      	add	r3, r2
 80030cc:	b2ca      	uxtb	r2, r1
 80030ce:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	3301      	adds	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d9e8      	bls.n	80030b8 <JPEG_StoreOutputData+0x1d8>
}
 80030e6:	bf00      	nop
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b088      	sub	sp, #32
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <JPEG_ReadInputData+0x1c>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800310a:	2101      	movs	r1, #1
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fe ff75 	bl	8001ffc <HAL_JPEG_Pause>
 8003112:	e028      	b.n	8003166 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	429a      	cmp	r2, r3
 800311e:	d906      	bls.n	800312e <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	e01b      	b.n	8003166 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	429a      	cmp	r2, r3
 8003138:	d115      	bne.n	8003166 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4619      	mov	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f009 f841 	bl	800c1c8 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314a:	2b04      	cmp	r3, #4
 800314c:	d905      	bls.n	800315a <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003152:	f023 0203 	bic.w	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003164:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 809f 	bne.w	80032b2 <JPEG_ReadInputData+0x1c4>
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 809b 	beq.w	80032b2 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	089b      	lsrs	r3, r3, #2
 8003180:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d335      	bcc.n	80031f6 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	e02d      	b.n	80031ec <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699a      	ldr	r2, [r3, #24]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3301      	adds	r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80031b0:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6999      	ldr	r1, [r3, #24]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3302      	adds	r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80031c2:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699a      	ldr	r2, [r3, #24]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	3303      	adds	r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80031d8:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80031da:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	1d1a      	adds	r2, r3, #4
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	3301      	adds	r3, #1
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d3cd      	bcc.n	8003190 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 80031f4:	e05d      	b.n	80032b2 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d035      	beq.n	8003268 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	e02d      	b.n	800325e <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699a      	ldr	r2, [r3, #24]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3301      	adds	r3, #1
 800321c:	4413      	add	r3, r2
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003222:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6999      	ldr	r1, [r3, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3302      	adds	r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8003234:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3303      	adds	r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800324a:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800324c:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	1d1a      	adds	r2, r3, #4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	3301      	adds	r3, #1
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	429a      	cmp	r2, r3
 8003264:	d3cd      	bcc.n	8003202 <JPEG_ReadInputData+0x114>
}
 8003266:	e024      	b.n	80032b2 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	e017      	b.n	80032a2 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4413      	add	r3, r2
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	3301      	adds	r3, #1
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d3e3      	bcc.n	8003272 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80032b2:	bf00      	nop
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b087      	sub	sp, #28
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ca:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d2:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d804      	bhi.n	80032e8 <JPEG_DMA_StartProcess+0x2c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d901      	bls.n	80032ec <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e074      	b.n	80033d6 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	4a3b      	ldr	r2, [pc, #236]	@ (80033e0 <JPEG_DMA_StartProcess+0x124>)
 80032f2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f8:	4a3a      	ldr	r2, [pc, #232]	@ (80033e4 <JPEG_DMA_StartProcess+0x128>)
 80032fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003300:	4a39      	ldr	r2, [pc, #228]	@ (80033e8 <JPEG_DMA_StartProcess+0x12c>)
 8003302:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003308:	4a36      	ldr	r2, [pc, #216]	@ (80033e4 <JPEG_DMA_StartProcess+0x128>)
 800330a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003310:	4a36      	ldr	r2, [pc, #216]	@ (80033ec <JPEG_DMA_StartProcess+0x130>)
 8003312:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <JPEG_DMA_StartProcess+0x64>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d107      	bne.n	8003330 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003324:	f043 0204 	orr.w	r2, r3, #4
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e052      	b.n	80033d6 <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003338:	68f9      	ldr	r1, [r7, #12]
 800333a:	fbb3 f1f1 	udiv	r1, r3, r1
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	fb00 f101 	mul.w	r1, r0, r1
 8003344:	1a5b      	subs	r3, r3, r1
 8003346:	1ad2      	subs	r2, r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	fbb3 f1f1 	udiv	r1, r3, r1
 800335a:	68b8      	ldr	r0, [r7, #8]
 800335c:	fb00 f101 	mul.w	r1, r0, r1
 8003360:	1a5b      	subs	r3, r3, r1
 8003362:	1ad2      	subs	r2, r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3344      	adds	r3, #68	@ 0x44
 8003372:	4619      	mov	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	461c      	mov	r4, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337e:	2201      	movs	r2, #1
 8003380:	9200      	str	r2, [sp, #0]
 8003382:	4622      	mov	r2, r4
 8003384:	f000 fbe8 	bl	8003b58 <HAL_MDMA_Start_IT>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003392:	f043 0204 	orr.w	r2, r3, #4
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e01b      	b.n	80033d6 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	4619      	mov	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3340      	adds	r3, #64	@ 0x40
 80033ae:	461c      	mov	r4, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b4:	2201      	movs	r2, #1
 80033b6:	9200      	str	r2, [sp, #0]
 80033b8:	4622      	mov	r2, r4
 80033ba:	f000 fbcd 	bl	8003b58 <HAL_MDMA_Start_IT>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d007      	beq.n	80033d4 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c8:	f043 0204 	orr.w	r2, r3, #4
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd90      	pop	{r4, r7, pc}
 80033de:	bf00      	nop
 80033e0:	080036ef 	.word	0x080036ef
 80033e4:	080038dd 	.word	0x080038dd
 80033e8:	0800381b 	.word	0x0800381b
 80033ec:	0800392d 	.word	0x0800392d

080033f0 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d125      	bne.n	8003450 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d01e      	beq.n	8003450 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3304      	adds	r3, #4
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7fe fcf7 	bl	8001e0c <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3304      	adds	r3, #4
 8003428:	4619      	mov	r1, r3
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f008 fec0 	bl	800c1b0 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800344e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	d039      	beq.n	80034d2 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003462:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0201 	bic.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003498:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d104      	bne.n	80034b2 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fbd4 	bl	8003c5a <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d105      	bne.n	80034cc <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fbc8 	bl	8003c5a <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 80034ca:	e002      	b.n	80034d2 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f804 	bl	80034da <JPEG_DMA_EndProcess>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80034f2:	1ad2      	subs	r2, r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003500:	429a      	cmp	r2, r3
 8003502:	d10a      	bne.n	800351a <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69d9      	ldr	r1, [r3, #28]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	461a      	mov	r2, r3
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f008 fe98 	bl	800c244 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b00      	cmp	r3, #0
 8003526:	d134      	bne.n	8003592 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	69d9      	ldr	r1, [r3, #28]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003538:	461a      	mov	r2, r3
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f008 fe82 	bl	800c244 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0201 	bic.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355a:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003560:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d103      	bne.n	800358a <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f008 fe82 	bl	800c28c <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8003588:	e00c      	b.n	80035a4 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fe fdb2 	bl	80020f4 <HAL_JPEG_EncodeCpltCallback>
}
 8003590:	e008      	b.n	80035a4 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f804 	bl	80035ac <JPEG_DMA_PollResidualData>
}
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80035b4:	2310      	movs	r3, #16
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	e04f      	b.n	800365a <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d146      	bne.n	8003654 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d03f      	beq.n	8003654 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035da:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e4:	4413      	add	r3, r2
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	0a19      	lsrs	r1, r3, #8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	69da      	ldr	r2, [r3, #28]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	3301      	adds	r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	b2ca      	uxtb	r2, r1
 80035fe:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	0c19      	lsrs	r1, r3, #16
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	3302      	adds	r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	b2ca      	uxtb	r2, r1
 8003612:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	0e19      	lsrs	r1, r3, #24
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003620:	3303      	adds	r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	b2ca      	uxtb	r2, r1
 8003626:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	1d1a      	adds	r2, r3, #4
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363a:	429a      	cmp	r2, r3
 800363c:	d10a      	bne.n	8003654 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69d9      	ldr	r1, [r3, #28]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	461a      	mov	r2, r3
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f008 fdfb 	bl	800c244 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3b01      	subs	r3, #1
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1ac      	bne.n	80035ba <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003664:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d004      	beq.n	800367e <JPEG_DMA_PollResidualData+0xd2>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d133      	bne.n	80036e6 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0201 	bic.w	r2, r2, #1
 800368c:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69d9      	ldr	r1, [r3, #28]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	461a      	mov	r2, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f008 fdcf 	bl	800c244 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b0:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b6:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d103      	bne.n	80036e0 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f008 fdd7 	bl	800c28c <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 80036de:	e002      	b.n	80036e6 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7fe fd07 	bl	80020f4 <HAL_JPEG_EncodeCpltCallback>
}
 80036e6:	bf00      	nop
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 80036ee:	b590      	push	{r4, r7, lr}
 80036f0:	b087      	sub	sp, #28
 80036f2:	af02      	add	r7, sp, #8
 80036f4:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800370a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003710:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003714:	4013      	ands	r3, r2
 8003716:	2b0c      	cmp	r3, #12
 8003718:	d17c      	bne.n	8003814 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003720:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8003730:	1ad2      	subs	r2, r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4619      	mov	r1, r3
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f008 fd43 	bl	800c1c8 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	429a      	cmp	r2, r3
 800374a:	d81f      	bhi.n	800378c <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10d      	bne.n	800376e <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003756:	f043 0204 	orr.w	r2, r3, #4
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2206      	movs	r2, #6
 8003762:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f008 fd86 	bl	800c278 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800376c:	e052      	b.n	8003814 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	fbb3 f1f1 	udiv	r1, r3, r1
 800377c:	68b8      	ldr	r0, [r7, #8]
 800377e:	fb00 f101 	mul.w	r1, r0, r1
 8003782:	1a5b      	subs	r3, r3, r1
 8003784:	1ad2      	subs	r2, r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	629a      	str	r2, [r3, #40]	@ 0x28
 800378a:	e010      	b.n	80037ae <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00c      	beq.n	80037ae <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d006      	beq.n	80037ae <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	089b      	lsrs	r3, r3, #2
 80037a6:	3301      	adds	r3, #1
 80037a8:	009a      	lsls	r2, r3, #2
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d124      	bne.n	8003804 <JPEG_MDMAInCpltCallback+0x116>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d020      	beq.n	8003804 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	4619      	mov	r1, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3340      	adds	r3, #64	@ 0x40
 80037d2:	461c      	mov	r4, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d8:	2201      	movs	r2, #1
 80037da:	9200      	str	r2, [sp, #0]
 80037dc:	4622      	mov	r2, r4
 80037de:	f000 f9bb 	bl	8003b58 <HAL_MDMA_Start_IT>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00d      	beq.n	8003804 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ec:	f043 0204 	orr.w	r2, r3, #4
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2206      	movs	r2, #6
 80037f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f008 fd3b 	bl	800c278 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 8003802:	e007      	b.n	8003814 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003812:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bd90      	pop	{r4, r7, pc}

0800381a <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800381a:	b590      	push	{r4, r7, lr}
 800381c:	b087      	sub	sp, #28
 800381e:	af02      	add	r7, sp, #8
 8003820:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003836:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800383c:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003840:	4013      	ands	r3, r2
 8003842:	2b0c      	cmp	r3, #12
 8003844:	d147      	bne.n	80038d6 <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d138      	bne.n	80038c6 <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8003862:	1ad2      	subs	r2, r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	69d9      	ldr	r1, [r3, #28]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	461a      	mov	r2, r3
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f008 fce6 	bl	800c244 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d120      	bne.n	80038c6 <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3344      	adds	r3, #68	@ 0x44
 800388e:	4619      	mov	r1, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	461c      	mov	r4, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389a:	2201      	movs	r2, #1
 800389c:	9200      	str	r2, [sp, #0]
 800389e:	4622      	mov	r2, r4
 80038a0:	f000 f95a 	bl	8003b58 <HAL_MDMA_Start_IT>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ae:	f043 0204 	orr.w	r2, r3, #4
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2206      	movs	r2, #6
 80038ba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f008 fcda 	bl	800c278 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 80038c4:	e007      	b.n	80038d6 <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80038d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd90      	pop	{r4, r7, pc}

080038dc <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003908:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003916:	f043 0204 	orr.w	r2, r3, #4
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f008 fcaa 	bl	800c278 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f7ff fdc7 	bl	80034da <JPEG_DMA_EndProcess>
  }
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8003954:	b480      	push	{r7}
 8003956:	b08b      	sub	sp, #44	@ 0x2c
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3350      	adds	r3, #80	@ 0x50
 8003966:	61bb      	str	r3, [r7, #24]

  i = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800396c:	e042      	b.n	80039f4 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8003974:	2300      	movs	r3, #0
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	e033      	b.n	80039e2 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d103      	bne.n	8003996 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	3364      	adds	r3, #100	@ 0x64
 8003992:	627b      	str	r3, [r7, #36]	@ 0x24
 8003994:	e022      	b.n	80039dc <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2264      	movs	r2, #100	@ 0x64
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039a2:	6a38      	ldr	r0, [r7, #32]
 80039a4:	69f9      	ldr	r1, [r7, #28]
 80039a6:	4401      	add	r1, r0
 80039a8:	4818      	ldr	r0, [pc, #96]	@ (8003a0c <JPEG_GetQuality+0xb8>)
 80039aa:	5c41      	ldrb	r1, [r0, r1]
 80039ac:	440a      	add	r2, r1
 80039ae:	7812      	ldrb	r2, [r2, #0]
 80039b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b64      	cmp	r3, #100	@ 0x64
 80039ba:	d807      	bhi.n	80039cc <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 80039c2:	085b      	lsrs	r3, r3, #1
 80039c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c6:	4413      	add	r3, r2
 80039c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ca:	e007      	b.n	80039dc <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 80039cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d8:	4413      	add	r3, r2
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	3301      	adds	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d9c8      	bls.n	800397a <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	3304      	adds	r3, #4
 80039ec:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	3304      	adds	r3, #4
 80039f2:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	2b3c      	cmp	r3, #60	@ 0x3c
 80039f8:	d9b9      	bls.n	800396e <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	099b      	lsrs	r3, r3, #6
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	372c      	adds	r7, #44	@ 0x2c
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	080118d0 	.word	0x080118d0

08003a10 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a18:	f7fd fa74 	bl	8000f04 <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e03b      	b.n	8003aa0 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68da      	ldr	r2, [r3, #12]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003a48:	e00f      	b.n	8003a6a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8003a4a:	f7fd fa5b 	bl	8000f04 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b05      	cmp	r3, #5
 8003a56:	d908      	bls.n	8003a6a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2240      	movs	r2, #64	@ 0x40
 8003a5c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2203      	movs	r2, #3
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e01a      	b.n	8003aa0 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e8      	bne.n	8003a4a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fad9 	bl	8004030 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e048      	b.n	8003b4c <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2200      	movs	r2, #0
 8003af8:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2200      	movs	r2, #0
 8003b00:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2200      	movs	r2, #0
 8003b08:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2200      	movs	r2, #0
 8003b18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	221f      	movs	r2, #31
 8003b20:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e070      	b.n	8003c52 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_MDMA_Start_IT+0x26>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e069      	b.n	8003c52 <HAL_MDMA_Start_IT+0xfa>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d158      	bne.n	8003c44 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2202      	movs	r2, #2
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f9c8 	bl	8003f50 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0206 	orr.w	r2, r2, #6
 8003bce:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0210 	orr.w	r2, r2, #16
 8003be6:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0208 	orr.w	r2, r2, #8
 8003bfe:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0220 	orr.w	r2, r2, #32
 8003c16:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c30:	d10e      	bne.n	8003c50 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003c40:	60da      	str	r2, [r3, #12]
 8003c42:	e005      	b.n	8003c50 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e000      	b.n	8003c52 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e017      	b.n	8003c9c <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d004      	beq.n	8003c82 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2280      	movs	r2, #128	@ 0x80
 8003c7c:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e00c      	b.n	8003c9c <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2204      	movs	r2, #4
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cb4:	4b91      	ldr	r3, [pc, #580]	@ (8003efc <HAL_MDMA_IRQHandler+0x254>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a91      	ldr	r2, [pc, #580]	@ (8003f00 <HAL_MDMA_IRQHandler+0x258>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	0a9b      	lsrs	r3, r3, #10
 8003cc0:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4b8e      	ldr	r3, [pc, #568]	@ (8003f04 <HAL_MDMA_IRQHandler+0x25c>)
 8003cca:	4413      	add	r3, r2
 8003ccc:	099b      	lsrs	r3, r3, #6
 8003cce:	f003 031f 	and.w	r3, r3, #31
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8003cda:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 812d 	beq.w	8003f44 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d054      	beq.n	8003da2 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d04d      	beq.n	8003da2 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0202 	bic.w	r2, r2, #2
 8003d14:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d2c:	f043 0201 	orr.w	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	669a      	str	r2, [r3, #104]	@ 0x68
 8003d34:	e005      	b.n	8003d42 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d3a:	f043 0202 	orr.w	r2, r3, #2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d50:	f043 0204 	orr.w	r2, r3, #4
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d66:	f043 0208 	orr.w	r2, r3, #8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d7c:	f043 0210 	orr.w	r2, r3, #16
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d92:	f043 0220 	orr.w	r2, r3, #32
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d012      	beq.n	8003dd6 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d012      	beq.n	8003e0a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2208      	movs	r2, #8
 8003df8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d012      	beq.n	8003e3e <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d039      	beq.n	8003ec0 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d032      	beq.n	8003ec0 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8003e68:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d110      	bne.n	8003e98 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d05c      	beq.n	8003f48 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	4798      	blx	r3
        }
        return;
 8003e96:	e057      	b.n	8003f48 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d040      	beq.n	8003f4a <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2204      	movs	r2, #4
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0201 	bic.w	r2, r2, #1
 8003ede:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d30d      	bcc.n	8003f08 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f2      	bne.n	8003ee0 <HAL_MDMA_IRQHandler+0x238>
 8003efa:	e006      	b.n	8003f0a <HAL_MDMA_IRQHandler+0x262>
 8003efc:	20000000 	.word	0x20000000
 8003f00:	1b4e81b5 	.word	0x1b4e81b5
 8003f04:	adffffc0 	.word	0xadffffc0
        break;
 8003f08:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2203      	movs	r2, #3
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f28:	e003      	b.n	8003f32 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d007      	beq.n	8003f4a <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	4798      	blx	r3
 8003f42:	e002      	b.n	8003f4a <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8003f44:	bf00      	nop
 8003f46:	e000      	b.n	8003f4a <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8003f48:	bf00      	nop
    }
  }
}
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695a      	ldr	r2, [r3, #20]
 8003f64:	4b31      	ldr	r3, [pc, #196]	@ (800402c <MDMA_SetConfig+0xdc>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	6812      	ldr	r2, [r2, #0]
 8003f72:	430b      	orrs	r3, r1
 8003f74:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	051a      	lsls	r2, r3, #20
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	221f      	movs	r2, #31
 8003f94:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003fac:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fb4:	d002      	beq.n	8003fbc <MDMA_SetConfig+0x6c>
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d108      	bne.n	8003fce <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003fca:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fcc:	e007      	b.n	8003fde <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003fdc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003fe4:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fec:	d002      	beq.n	8003ff4 <MDMA_SetConfig+0xa4>
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d108      	bne.n	8004006 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004002:	629a      	str	r2, [r3, #40]	@ 0x28
 8004004:	e007      	b.n	8004016 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004014:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	fffe0000 	.word	0xfffe0000

08004030 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68d9      	ldr	r1, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004056:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004062:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004068:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800406e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	3b01      	subs	r3, #1
 8004076:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8004078:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004084:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004086:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004090:	d107      	bne.n	80040a2 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80040a0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2200      	movs	r2, #0
 80040a8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	da11      	bge.n	80040d6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80040c0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c6:	425b      	negs	r3, r3
 80040c8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	b292      	uxth	r2, r2
 80040d2:	621a      	str	r2, [r3, #32]
 80040d4:	e006      	b.n	80040e4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040da:	461a      	mov	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	b292      	uxth	r2, r2
 80040e2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	da15      	bge.n	8004118 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80040fa:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004100:	425b      	negs	r3, r3
 8004102:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6a19      	ldr	r1, [r3, #32]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	041a      	lsls	r2, r3, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	621a      	str	r2, [r3, #32]
 8004116:	e009      	b.n	800412c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6a19      	ldr	r1, [r3, #32]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004122:	041a      	lsls	r2, r3, #16
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004134:	d006      	beq.n	8004144 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	629a      	str	r2, [r3, #40]	@ 0x28
 8004142:	e003      	b.n	800414c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2200      	movs	r2, #0
 800414a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2200      	movs	r2, #0
 8004152:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0

}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800417c:	4b1a      	ldr	r3, [pc, #104]	@ (80041e8 <HAL_PWR_EnterSTOPMode+0x78>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f023 0201 	bic.w	r2, r3, #1
 8004184:	4918      	ldr	r1, [pc, #96]	@ (80041e8 <HAL_PWR_EnterSTOPMode+0x78>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4313      	orrs	r3, r2
 800418a:	600b      	str	r3, [r1, #0]

  /* Configure the PWR mode for the different Domains */
#if defined (DUAL_CORE)
  /* Check CPU ID */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 800418c:	f7fd f8e0 	bl	8001350 <HAL_GetCurrentCPUID>
 8004190:	4603      	mov	r3, r0
 8004192:	2b03      	cmp	r3, #3
 8004194:	d106      	bne.n	80041a4 <HAL_PWR_EnterSTOPMode+0x34>
  {
    /* Keep DSTOP mode when Cortex-M7 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8004196:	4b14      	ldr	r3, [pc, #80]	@ (80041e8 <HAL_PWR_EnterSTOPMode+0x78>)
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	4a13      	ldr	r2, [pc, #76]	@ (80041e8 <HAL_PWR_EnterSTOPMode+0x78>)
 800419c:	f023 0305 	bic.w	r3, r3, #5
 80041a0:	6113      	str	r3, [r2, #16]
 80041a2:	e005      	b.n	80041b0 <HAL_PWR_EnterSTOPMode+0x40>
  }
  else
  {
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
 80041a4:	4b10      	ldr	r3, [pc, #64]	@ (80041e8 <HAL_PWR_EnterSTOPMode+0x78>)
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	4a0f      	ldr	r2, [pc, #60]	@ (80041e8 <HAL_PWR_EnterSTOPMode+0x78>)
 80041aa:	f023 0306 	bic.w	r3, r3, #6
 80041ae:	6113      	str	r3, [r2, #16]
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80041b0:	4b0e      	ldr	r3, [pc, #56]	@ (80041ec <HAL_PWR_EnterSTOPMode+0x7c>)
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	4a0d      	ldr	r2, [pc, #52]	@ (80041ec <HAL_PWR_EnterSTOPMode+0x7c>)
 80041b6:	f043 0304 	orr.w	r3, r3, #4
 80041ba:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80041bc:	f3bf 8f4f 	dsb	sy
}
 80041c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041c2:	f3bf 8f6f 	isb	sy
}
 80041c6:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_PWR_EnterSTOPMode+0x62>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80041ce:	bf30      	wfi
 80041d0:	e000      	b.n	80041d4 <HAL_PWR_EnterSTOPMode+0x64>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 80041d2:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <HAL_PWR_EnterSTOPMode+0x7c>)
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	4a04      	ldr	r2, [pc, #16]	@ (80041ec <HAL_PWR_EnterSTOPMode+0x7c>)
 80041da:	f023 0304 	bic.w	r3, r3, #4
 80041de:	6113      	str	r3, [r2, #16]
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	58024800 	.word	0x58024800
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80041f8:	4b29      	ldr	r3, [pc, #164]	@ (80042a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	2b06      	cmp	r3, #6
 8004202:	d00a      	beq.n	800421a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004204:	4b26      	ldr	r3, [pc, #152]	@ (80042a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	429a      	cmp	r2, r3
 8004210:	d001      	beq.n	8004216 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e040      	b.n	8004298 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e03e      	b.n	8004298 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800421a:	4b21      	ldr	r3, [pc, #132]	@ (80042a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004222:	491f      	ldr	r1, [pc, #124]	@ (80042a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4313      	orrs	r3, r2
 8004228:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800422a:	f7fc fe6b 	bl	8000f04 <HAL_GetTick>
 800422e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004230:	e009      	b.n	8004246 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004232:	f7fc fe67 	bl	8000f04 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004240:	d901      	bls.n	8004246 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e028      	b.n	8004298 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004246:	4b16      	ldr	r3, [pc, #88]	@ (80042a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800424e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004252:	d1ee      	bne.n	8004232 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b1e      	cmp	r3, #30
 8004258:	d008      	beq.n	800426c <HAL_PWREx_ConfigSupply+0x7c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b2e      	cmp	r3, #46	@ 0x2e
 800425e:	d005      	beq.n	800426c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b1d      	cmp	r3, #29
 8004264:	d002      	beq.n	800426c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b2d      	cmp	r3, #45	@ 0x2d
 800426a:	d114      	bne.n	8004296 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800426c:	f7fc fe4a 	bl	8000f04 <HAL_GetTick>
 8004270:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004272:	e009      	b.n	8004288 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004274:	f7fc fe46 	bl	8000f04 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004282:	d901      	bls.n	8004288 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e007      	b.n	8004298 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004288:	4b05      	ldr	r3, [pc, #20]	@ (80042a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004294:	d1ee      	bne.n	8004274 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	58024800 	.word	0x58024800

080042a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08c      	sub	sp, #48	@ 0x30
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d102      	bne.n	80042b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f000 bc48 	b.w	8004b48 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8088 	beq.w	80043d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c6:	4b99      	ldr	r3, [pc, #612]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042d0:	4b96      	ldr	r3, [pc, #600]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 80042d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80042d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d8:	2b10      	cmp	r3, #16
 80042da:	d007      	beq.n	80042ec <HAL_RCC_OscConfig+0x48>
 80042dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042de:	2b18      	cmp	r3, #24
 80042e0:	d111      	bne.n	8004306 <HAL_RCC_OscConfig+0x62>
 80042e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d10c      	bne.n	8004306 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	4b8f      	ldr	r3, [pc, #572]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d06d      	beq.n	80043d4 <HAL_RCC_OscConfig+0x130>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d169      	bne.n	80043d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f000 bc21 	b.w	8004b48 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800430e:	d106      	bne.n	800431e <HAL_RCC_OscConfig+0x7a>
 8004310:	4b86      	ldr	r3, [pc, #536]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a85      	ldr	r2, [pc, #532]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	e02e      	b.n	800437c <HAL_RCC_OscConfig+0xd8>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x9c>
 8004326:	4b81      	ldr	r3, [pc, #516]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a80      	ldr	r2, [pc, #512]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 800432c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4b7e      	ldr	r3, [pc, #504]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a7d      	ldr	r2, [pc, #500]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004338:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e01d      	b.n	800437c <HAL_RCC_OscConfig+0xd8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004348:	d10c      	bne.n	8004364 <HAL_RCC_OscConfig+0xc0>
 800434a:	4b78      	ldr	r3, [pc, #480]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a77      	ldr	r2, [pc, #476]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004350:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	4b75      	ldr	r3, [pc, #468]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a74      	ldr	r2, [pc, #464]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 800435c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	e00b      	b.n	800437c <HAL_RCC_OscConfig+0xd8>
 8004364:	4b71      	ldr	r3, [pc, #452]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a70      	ldr	r2, [pc, #448]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 800436a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	4b6e      	ldr	r3, [pc, #440]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a6d      	ldr	r2, [pc, #436]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004376:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800437a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d013      	beq.n	80043ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fc fdbe 	bl	8000f04 <HAL_GetTick>
 8004388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800438c:	f7fc fdba 	bl	8000f04 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b64      	cmp	r3, #100	@ 0x64
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e3d4      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800439e:	4b63      	ldr	r3, [pc, #396]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0xe8>
 80043aa:	e014      	b.n	80043d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ac:	f7fc fdaa 	bl	8000f04 <HAL_GetTick>
 80043b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b4:	f7fc fda6 	bl	8000f04 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b64      	cmp	r3, #100	@ 0x64
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e3c0      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043c6:	4b59      	ldr	r3, [pc, #356]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f0      	bne.n	80043b4 <HAL_RCC_OscConfig+0x110>
 80043d2:	e000      	b.n	80043d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 80ca 	beq.w	8004578 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e4:	4b51      	ldr	r3, [pc, #324]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043ee:	4b4f      	ldr	r3, [pc, #316]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 80043f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <HAL_RCC_OscConfig+0x166>
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	2b18      	cmp	r3, #24
 80043fe:	d156      	bne.n	80044ae <HAL_RCC_OscConfig+0x20a>
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d151      	bne.n	80044ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800440a:	4b48      	ldr	r3, [pc, #288]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b00      	cmp	r3, #0
 8004414:	d005      	beq.n	8004422 <HAL_RCC_OscConfig+0x17e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e392      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004422:	4b42      	ldr	r3, [pc, #264]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 0219 	bic.w	r2, r3, #25
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	493f      	ldr	r1, [pc, #252]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004430:	4313      	orrs	r3, r2
 8004432:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fc fd66 	bl	8000f04 <HAL_GetTick>
 8004438:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443c:	f7fc fd62 	bl	8000f04 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e37c      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800444e:	4b37      	ldr	r3, [pc, #220]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445a:	f7fc fda3 	bl	8000fa4 <HAL_GetREVID>
 800445e:	4603      	mov	r3, r0
 8004460:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004464:	4293      	cmp	r3, r2
 8004466:	d817      	bhi.n	8004498 <HAL_RCC_OscConfig+0x1f4>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b40      	cmp	r3, #64	@ 0x40
 800446e:	d108      	bne.n	8004482 <HAL_RCC_OscConfig+0x1de>
 8004470:	4b2e      	ldr	r3, [pc, #184]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004478:	4a2c      	ldr	r2, [pc, #176]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 800447a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800447e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004480:	e07a      	b.n	8004578 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004482:	4b2a      	ldr	r3, [pc, #168]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	031b      	lsls	r3, r3, #12
 8004490:	4926      	ldr	r1, [pc, #152]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004492:	4313      	orrs	r3, r2
 8004494:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004496:	e06f      	b.n	8004578 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004498:	4b24      	ldr	r3, [pc, #144]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	4921      	ldr	r1, [pc, #132]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ac:	e064      	b.n	8004578 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d047      	beq.n	8004546 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044b6:	4b1d      	ldr	r3, [pc, #116]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 0219 	bic.w	r2, r3, #25
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	491a      	ldr	r1, [pc, #104]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c8:	f7fc fd1c 	bl	8000f04 <HAL_GetTick>
 80044cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d0:	f7fc fd18 	bl	8000f04 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e332      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044e2:	4b12      	ldr	r3, [pc, #72]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ee:	f7fc fd59 	bl	8000fa4 <HAL_GetREVID>
 80044f2:	4603      	mov	r3, r0
 80044f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d819      	bhi.n	8004530 <HAL_RCC_OscConfig+0x28c>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b40      	cmp	r3, #64	@ 0x40
 8004502:	d108      	bne.n	8004516 <HAL_RCC_OscConfig+0x272>
 8004504:	4b09      	ldr	r3, [pc, #36]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800450c:	4a07      	ldr	r2, [pc, #28]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 800450e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004512:	6053      	str	r3, [r2, #4]
 8004514:	e030      	b.n	8004578 <HAL_RCC_OscConfig+0x2d4>
 8004516:	4b05      	ldr	r3, [pc, #20]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	031b      	lsls	r3, r3, #12
 8004524:	4901      	ldr	r1, [pc, #4]	@ (800452c <HAL_RCC_OscConfig+0x288>)
 8004526:	4313      	orrs	r3, r2
 8004528:	604b      	str	r3, [r1, #4]
 800452a:	e025      	b.n	8004578 <HAL_RCC_OscConfig+0x2d4>
 800452c:	58024400 	.word	0x58024400
 8004530:	4b9a      	ldr	r3, [pc, #616]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	061b      	lsls	r3, r3, #24
 800453e:	4997      	ldr	r1, [pc, #604]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004540:	4313      	orrs	r3, r2
 8004542:	604b      	str	r3, [r1, #4]
 8004544:	e018      	b.n	8004578 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004546:	4b95      	ldr	r3, [pc, #596]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a94      	ldr	r2, [pc, #592]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004552:	f7fc fcd7 	bl	8000f04 <HAL_GetTick>
 8004556:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455a:	f7fc fcd3 	bl	8000f04 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e2ed      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800456c:	4b8b      	ldr	r3, [pc, #556]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f0      	bne.n	800455a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80a9 	beq.w	80046d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004586:	4b85      	ldr	r3, [pc, #532]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800458e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004590:	4b82      	ldr	r3, [pc, #520]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004594:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d007      	beq.n	80045ac <HAL_RCC_OscConfig+0x308>
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b18      	cmp	r3, #24
 80045a0:	d13a      	bne.n	8004618 <HAL_RCC_OscConfig+0x374>
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d135      	bne.n	8004618 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045ac:	4b7b      	ldr	r3, [pc, #492]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_OscConfig+0x320>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	2b80      	cmp	r3, #128	@ 0x80
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e2c1      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045c4:	f7fc fcee 	bl	8000fa4 <HAL_GetREVID>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d817      	bhi.n	8004602 <HAL_RCC_OscConfig+0x35e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d108      	bne.n	80045ec <HAL_RCC_OscConfig+0x348>
 80045da:	4b70      	ldr	r3, [pc, #448]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80045e2:	4a6e      	ldr	r2, [pc, #440]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 80045e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045e8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045ea:	e075      	b.n	80046d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045ec:	4b6b      	ldr	r3, [pc, #428]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	069b      	lsls	r3, r3, #26
 80045fa:	4968      	ldr	r1, [pc, #416]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004600:	e06a      	b.n	80046d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004602:	4b66      	ldr	r3, [pc, #408]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	061b      	lsls	r3, r3, #24
 8004610:	4962      	ldr	r1, [pc, #392]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004612:	4313      	orrs	r3, r2
 8004614:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004616:	e05f      	b.n	80046d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d042      	beq.n	80046a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004620:	4b5e      	ldr	r3, [pc, #376]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a5d      	ldr	r2, [pc, #372]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800462a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fc fc6a 	bl	8000f04 <HAL_GetTick>
 8004630:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004634:	f7fc fc66 	bl	8000f04 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e280      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004646:	4b55      	ldr	r3, [pc, #340]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004652:	f7fc fca7 	bl	8000fa4 <HAL_GetREVID>
 8004656:	4603      	mov	r3, r0
 8004658:	f241 0203 	movw	r2, #4099	@ 0x1003
 800465c:	4293      	cmp	r3, r2
 800465e:	d817      	bhi.n	8004690 <HAL_RCC_OscConfig+0x3ec>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	2b20      	cmp	r3, #32
 8004666:	d108      	bne.n	800467a <HAL_RCC_OscConfig+0x3d6>
 8004668:	4b4c      	ldr	r3, [pc, #304]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004670:	4a4a      	ldr	r2, [pc, #296]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004672:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004676:	6053      	str	r3, [r2, #4]
 8004678:	e02e      	b.n	80046d8 <HAL_RCC_OscConfig+0x434>
 800467a:	4b48      	ldr	r3, [pc, #288]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	069b      	lsls	r3, r3, #26
 8004688:	4944      	ldr	r1, [pc, #272]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 800468a:	4313      	orrs	r3, r2
 800468c:	604b      	str	r3, [r1, #4]
 800468e:	e023      	b.n	80046d8 <HAL_RCC_OscConfig+0x434>
 8004690:	4b42      	ldr	r3, [pc, #264]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	061b      	lsls	r3, r3, #24
 800469e:	493f      	ldr	r1, [pc, #252]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60cb      	str	r3, [r1, #12]
 80046a4:	e018      	b.n	80046d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80046a6:	4b3d      	ldr	r3, [pc, #244]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a3c      	ldr	r2, [pc, #240]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 80046ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b2:	f7fc fc27 	bl	8000f04 <HAL_GetTick>
 80046b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046ba:	f7fc fc23 	bl	8000f04 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e23d      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046cc:	4b33      	ldr	r3, [pc, #204]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f0      	bne.n	80046ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0308 	and.w	r3, r3, #8
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d036      	beq.n	8004752 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d019      	beq.n	8004720 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ec:	4b2b      	ldr	r3, [pc, #172]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 80046ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f0:	4a2a      	ldr	r2, [pc, #168]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fc fc04 	bl	8000f04 <HAL_GetTick>
 80046fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004700:	f7fc fc00 	bl	8000f04 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e21a      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004712:	4b22      	ldr	r3, [pc, #136]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0x45c>
 800471e:	e018      	b.n	8004752 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004720:	4b1e      	ldr	r3, [pc, #120]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004724:	4a1d      	ldr	r2, [pc, #116]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472c:	f7fc fbea 	bl	8000f04 <HAL_GetTick>
 8004730:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004734:	f7fc fbe6 	bl	8000f04 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e200      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004746:	4b15      	ldr	r3, [pc, #84]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b00      	cmp	r3, #0
 800475c:	d039      	beq.n	80047d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d01c      	beq.n	80047a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004766:	4b0d      	ldr	r3, [pc, #52]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a0c      	ldr	r2, [pc, #48]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 800476c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004770:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004772:	f7fc fbc7 	bl	8000f04 <HAL_GetTick>
 8004776:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800477a:	f7fc fbc3 	bl	8000f04 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e1dd      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800478c:	4b03      	ldr	r3, [pc, #12]	@ (800479c <HAL_RCC_OscConfig+0x4f8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0x4d6>
 8004798:	e01b      	b.n	80047d2 <HAL_RCC_OscConfig+0x52e>
 800479a:	bf00      	nop
 800479c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047a0:	4b9b      	ldr	r3, [pc, #620]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a9a      	ldr	r2, [pc, #616]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80047a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047ac:	f7fc fbaa 	bl	8000f04 <HAL_GetTick>
 80047b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047b4:	f7fc fba6 	bl	8000f04 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e1c0      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047c6:	4b92      	ldr	r3, [pc, #584]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8081 	beq.w	80048e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047e0:	4b8c      	ldr	r3, [pc, #560]	@ (8004a14 <HAL_RCC_OscConfig+0x770>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a8b      	ldr	r2, [pc, #556]	@ (8004a14 <HAL_RCC_OscConfig+0x770>)
 80047e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047ec:	f7fc fb8a 	bl	8000f04 <HAL_GetTick>
 80047f0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f4:	f7fc fb86 	bl	8000f04 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b64      	cmp	r3, #100	@ 0x64
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e1a0      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004806:	4b83      	ldr	r3, [pc, #524]	@ (8004a14 <HAL_RCC_OscConfig+0x770>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d106      	bne.n	8004828 <HAL_RCC_OscConfig+0x584>
 800481a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	6713      	str	r3, [r2, #112]	@ 0x70
 8004826:	e02d      	b.n	8004884 <HAL_RCC_OscConfig+0x5e0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10c      	bne.n	800484a <HAL_RCC_OscConfig+0x5a6>
 8004830:	4b77      	ldr	r3, [pc, #476]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004834:	4a76      	ldr	r2, [pc, #472]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004836:	f023 0301 	bic.w	r3, r3, #1
 800483a:	6713      	str	r3, [r2, #112]	@ 0x70
 800483c:	4b74      	ldr	r3, [pc, #464]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004840:	4a73      	ldr	r2, [pc, #460]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004842:	f023 0304 	bic.w	r3, r3, #4
 8004846:	6713      	str	r3, [r2, #112]	@ 0x70
 8004848:	e01c      	b.n	8004884 <HAL_RCC_OscConfig+0x5e0>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b05      	cmp	r3, #5
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0x5c8>
 8004852:	4b6f      	ldr	r3, [pc, #444]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004856:	4a6e      	ldr	r2, [pc, #440]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004858:	f043 0304 	orr.w	r3, r3, #4
 800485c:	6713      	str	r3, [r2, #112]	@ 0x70
 800485e:	4b6c      	ldr	r3, [pc, #432]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004862:	4a6b      	ldr	r2, [pc, #428]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	6713      	str	r3, [r2, #112]	@ 0x70
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0x5e0>
 800486c:	4b68      	ldr	r3, [pc, #416]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004870:	4a67      	ldr	r2, [pc, #412]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	6713      	str	r3, [r2, #112]	@ 0x70
 8004878:	4b65      	ldr	r3, [pc, #404]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 800487a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487c:	4a64      	ldr	r2, [pc, #400]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 800487e:	f023 0304 	bic.w	r3, r3, #4
 8004882:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d015      	beq.n	80048b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fc fb3a 	bl	8000f04 <HAL_GetTick>
 8004890:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004892:	e00a      	b.n	80048aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004894:	f7fc fb36 	bl	8000f04 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e14e      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048aa:	4b59      	ldr	r3, [pc, #356]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0ee      	beq.n	8004894 <HAL_RCC_OscConfig+0x5f0>
 80048b6:	e014      	b.n	80048e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fc fb24 	bl	8000f04 <HAL_GetTick>
 80048bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c0:	f7fc fb20 	bl	8000f04 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e138      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1ee      	bne.n	80048c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 812d 	beq.w	8004b46 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80048ec:	4b48      	ldr	r3, [pc, #288]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048f4:	2b18      	cmp	r3, #24
 80048f6:	f000 80bd 	beq.w	8004a74 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fe:	2b02      	cmp	r3, #2
 8004900:	f040 809e 	bne.w	8004a40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004904:	4b42      	ldr	r3, [pc, #264]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a41      	ldr	r2, [pc, #260]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 800490a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800490e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fc faf8 	bl	8000f04 <HAL_GetTick>
 8004914:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004918:	f7fc faf4 	bl	8000f04 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e10e      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800492a:	4b39      	ldr	r3, [pc, #228]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004936:	4b36      	ldr	r3, [pc, #216]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004938:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800493a:	4b37      	ldr	r3, [pc, #220]	@ (8004a18 <HAL_RCC_OscConfig+0x774>)
 800493c:	4013      	ands	r3, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004946:	0112      	lsls	r2, r2, #4
 8004948:	430a      	orrs	r2, r1
 800494a:	4931      	ldr	r1, [pc, #196]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 800494c:	4313      	orrs	r3, r2
 800494e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004954:	3b01      	subs	r3, #1
 8004956:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800495e:	3b01      	subs	r3, #1
 8004960:	025b      	lsls	r3, r3, #9
 8004962:	b29b      	uxth	r3, r3
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	3b01      	subs	r3, #1
 800496c:	041b      	lsls	r3, r3, #16
 800496e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004978:	3b01      	subs	r3, #1
 800497a:	061b      	lsls	r3, r3, #24
 800497c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004980:	4923      	ldr	r1, [pc, #140]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004982:	4313      	orrs	r3, r2
 8004984:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004986:	4b22      	ldr	r3, [pc, #136]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498a:	4a21      	ldr	r2, [pc, #132]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 800498c:	f023 0301 	bic.w	r3, r3, #1
 8004990:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004992:	4b1f      	ldr	r3, [pc, #124]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004996:	4b21      	ldr	r3, [pc, #132]	@ (8004a1c <HAL_RCC_OscConfig+0x778>)
 8004998:	4013      	ands	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800499e:	00d2      	lsls	r2, r2, #3
 80049a0:	491b      	ldr	r1, [pc, #108]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80049a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	f023 020c 	bic.w	r2, r3, #12
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	4917      	ldr	r1, [pc, #92]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80049b8:	4b15      	ldr	r3, [pc, #84]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	f023 0202 	bic.w	r2, r3, #2
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c4:	4912      	ldr	r1, [pc, #72]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049ca:	4b11      	ldr	r3, [pc, #68]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80049cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ce:	4a10      	ldr	r2, [pc, #64]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80049d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80049d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049da:	4a0d      	ldr	r2, [pc, #52]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80049dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80049e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80049e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80049ee:	4b08      	ldr	r3, [pc, #32]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	4a07      	ldr	r2, [pc, #28]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049fa:	4b05      	ldr	r3, [pc, #20]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a04      	ldr	r2, [pc, #16]	@ (8004a10 <HAL_RCC_OscConfig+0x76c>)
 8004a00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a06:	f7fc fa7d 	bl	8000f04 <HAL_GetTick>
 8004a0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a0c:	e011      	b.n	8004a32 <HAL_RCC_OscConfig+0x78e>
 8004a0e:	bf00      	nop
 8004a10:	58024400 	.word	0x58024400
 8004a14:	58024800 	.word	0x58024800
 8004a18:	fffffc0c 	.word	0xfffffc0c
 8004a1c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a20:	f7fc fa70 	bl	8000f04 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e08a      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a32:	4b47      	ldr	r3, [pc, #284]	@ (8004b50 <HAL_RCC_OscConfig+0x8ac>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x77c>
 8004a3e:	e082      	b.n	8004b46 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a40:	4b43      	ldr	r3, [pc, #268]	@ (8004b50 <HAL_RCC_OscConfig+0x8ac>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a42      	ldr	r2, [pc, #264]	@ (8004b50 <HAL_RCC_OscConfig+0x8ac>)
 8004a46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fc fa5a 	bl	8000f04 <HAL_GetTick>
 8004a50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a54:	f7fc fa56 	bl	8000f04 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e070      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a66:	4b3a      	ldr	r3, [pc, #232]	@ (8004b50 <HAL_RCC_OscConfig+0x8ac>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x7b0>
 8004a72:	e068      	b.n	8004b46 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a74:	4b36      	ldr	r3, [pc, #216]	@ (8004b50 <HAL_RCC_OscConfig+0x8ac>)
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a7a:	4b35      	ldr	r3, [pc, #212]	@ (8004b50 <HAL_RCC_OscConfig+0x8ac>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d031      	beq.n	8004aec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f003 0203 	and.w	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d12a      	bne.n	8004aec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d122      	bne.n	8004aec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d11a      	bne.n	8004aec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	0a5b      	lsrs	r3, r3, #9
 8004aba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d111      	bne.n	8004aec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	0c1b      	lsrs	r3, r3, #16
 8004acc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d108      	bne.n	8004aec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	0e1b      	lsrs	r3, r3, #24
 8004ade:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e02b      	b.n	8004b48 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004af0:	4b17      	ldr	r3, [pc, #92]	@ (8004b50 <HAL_RCC_OscConfig+0x8ac>)
 8004af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af4:	08db      	lsrs	r3, r3, #3
 8004af6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004afa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d01f      	beq.n	8004b46 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004b06:	4b12      	ldr	r3, [pc, #72]	@ (8004b50 <HAL_RCC_OscConfig+0x8ac>)
 8004b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0a:	4a11      	ldr	r2, [pc, #68]	@ (8004b50 <HAL_RCC_OscConfig+0x8ac>)
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b12:	f7fc f9f7 	bl	8000f04 <HAL_GetTick>
 8004b16:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004b18:	bf00      	nop
 8004b1a:	f7fc f9f3 	bl	8000f04 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d0f9      	beq.n	8004b1a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b26:	4b0a      	ldr	r3, [pc, #40]	@ (8004b50 <HAL_RCC_OscConfig+0x8ac>)
 8004b28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b54 <HAL_RCC_OscConfig+0x8b0>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b32:	00d2      	lsls	r2, r2, #3
 8004b34:	4906      	ldr	r1, [pc, #24]	@ (8004b50 <HAL_RCC_OscConfig+0x8ac>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004b3a:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_RCC_OscConfig+0x8ac>)
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3e:	4a04      	ldr	r2, [pc, #16]	@ (8004b50 <HAL_RCC_OscConfig+0x8ac>)
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3730      	adds	r7, #48	@ 0x30
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	58024400 	.word	0x58024400
 8004b54:	ffff0007 	.word	0xffff0007

08004b58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e19c      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b6c:	4b8a      	ldr	r3, [pc, #552]	@ (8004d98 <HAL_RCC_ClockConfig+0x240>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d910      	bls.n	8004b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7a:	4b87      	ldr	r3, [pc, #540]	@ (8004d98 <HAL_RCC_ClockConfig+0x240>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f023 020f 	bic.w	r2, r3, #15
 8004b82:	4985      	ldr	r1, [pc, #532]	@ (8004d98 <HAL_RCC_ClockConfig+0x240>)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b83      	ldr	r3, [pc, #524]	@ (8004d98 <HAL_RCC_ClockConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e184      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d010      	beq.n	8004bca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	4b7b      	ldr	r3, [pc, #492]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d908      	bls.n	8004bca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bb8:	4b78      	ldr	r3, [pc, #480]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	4975      	ldr	r1, [pc, #468]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d010      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	4b70      	ldr	r3, [pc, #448]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d908      	bls.n	8004bf8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004be6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	496a      	ldr	r1, [pc, #424]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d010      	beq.n	8004c26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699a      	ldr	r2, [r3, #24]
 8004c08:	4b64      	ldr	r3, [pc, #400]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d908      	bls.n	8004c26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c14:	4b61      	ldr	r3, [pc, #388]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	495e      	ldr	r1, [pc, #376]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d010      	beq.n	8004c54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69da      	ldr	r2, [r3, #28]
 8004c36:	4b59      	ldr	r3, [pc, #356]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d908      	bls.n	8004c54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c42:	4b56      	ldr	r3, [pc, #344]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	4953      	ldr	r1, [pc, #332]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d010      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	4b4d      	ldr	r3, [pc, #308]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d908      	bls.n	8004c82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c70:	4b4a      	ldr	r3, [pc, #296]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	f023 020f 	bic.w	r2, r3, #15
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4947      	ldr	r1, [pc, #284]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d055      	beq.n	8004d3a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c8e:	4b43      	ldr	r3, [pc, #268]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	4940      	ldr	r1, [pc, #256]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d107      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ca8:	4b3c      	ldr	r3, [pc, #240]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d121      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0f6      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d107      	bne.n	8004cd0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cc0:	4b36      	ldr	r3, [pc, #216]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d115      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0ea      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cd8:	4b30      	ldr	r3, [pc, #192]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0de      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0d6      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cf8:	4b28      	ldr	r3, [pc, #160]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f023 0207 	bic.w	r2, r3, #7
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	4925      	ldr	r1, [pc, #148]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0a:	f7fc f8fb 	bl	8000f04 <HAL_GetTick>
 8004d0e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d10:	e00a      	b.n	8004d28 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d12:	f7fc f8f7 	bl	8000f04 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e0be      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d28:	4b1c      	ldr	r3, [pc, #112]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d1eb      	bne.n	8004d12 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d010      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	4b14      	ldr	r3, [pc, #80]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d208      	bcs.n	8004d68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d56:	4b11      	ldr	r3, [pc, #68]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f023 020f 	bic.w	r2, r3, #15
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	490e      	ldr	r1, [pc, #56]	@ (8004d9c <HAL_RCC_ClockConfig+0x244>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_RCC_ClockConfig+0x240>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 030f 	and.w	r3, r3, #15
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d214      	bcs.n	8004da0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d76:	4b08      	ldr	r3, [pc, #32]	@ (8004d98 <HAL_RCC_ClockConfig+0x240>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f023 020f 	bic.w	r2, r3, #15
 8004d7e:	4906      	ldr	r1, [pc, #24]	@ (8004d98 <HAL_RCC_ClockConfig+0x240>)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d86:	4b04      	ldr	r3, [pc, #16]	@ (8004d98 <HAL_RCC_ClockConfig+0x240>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d005      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e086      	b.n	8004ea6 <HAL_RCC_ClockConfig+0x34e>
 8004d98:	52002000 	.word	0x52002000
 8004d9c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d010      	beq.n	8004dce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	4b3f      	ldr	r3, [pc, #252]	@ (8004eb0 <HAL_RCC_ClockConfig+0x358>)
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d208      	bcs.n	8004dce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004dbc:	4b3c      	ldr	r3, [pc, #240]	@ (8004eb0 <HAL_RCC_ClockConfig+0x358>)
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	4939      	ldr	r1, [pc, #228]	@ (8004eb0 <HAL_RCC_ClockConfig+0x358>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d010      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	4b34      	ldr	r3, [pc, #208]	@ (8004eb0 <HAL_RCC_ClockConfig+0x358>)
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d208      	bcs.n	8004dfc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004dea:	4b31      	ldr	r3, [pc, #196]	@ (8004eb0 <HAL_RCC_ClockConfig+0x358>)
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	492e      	ldr	r1, [pc, #184]	@ (8004eb0 <HAL_RCC_ClockConfig+0x358>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0310 	and.w	r3, r3, #16
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d010      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699a      	ldr	r2, [r3, #24]
 8004e0c:	4b28      	ldr	r3, [pc, #160]	@ (8004eb0 <HAL_RCC_ClockConfig+0x358>)
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d208      	bcs.n	8004e2a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e18:	4b25      	ldr	r3, [pc, #148]	@ (8004eb0 <HAL_RCC_ClockConfig+0x358>)
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	4922      	ldr	r1, [pc, #136]	@ (8004eb0 <HAL_RCC_ClockConfig+0x358>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d010      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69da      	ldr	r2, [r3, #28]
 8004e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb0 <HAL_RCC_ClockConfig+0x358>)
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d208      	bcs.n	8004e58 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e46:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb0 <HAL_RCC_ClockConfig+0x358>)
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	4917      	ldr	r1, [pc, #92]	@ (8004eb0 <HAL_RCC_ClockConfig+0x358>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e58:	f000 f834 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	4b14      	ldr	r3, [pc, #80]	@ (8004eb0 <HAL_RCC_ClockConfig+0x358>)
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	0a1b      	lsrs	r3, r3, #8
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	4912      	ldr	r1, [pc, #72]	@ (8004eb4 <HAL_RCC_ClockConfig+0x35c>)
 8004e6a:	5ccb      	ldrb	r3, [r1, r3]
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
 8004e74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e76:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb0 <HAL_RCC_ClockConfig+0x358>)
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8004eb4 <HAL_RCC_ClockConfig+0x35c>)
 8004e80:	5cd3      	ldrb	r3, [r2, r3]
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	fa22 f303 	lsr.w	r3, r2, r3
 8004e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb8 <HAL_RCC_ClockConfig+0x360>)
 8004e8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e90:	4a0a      	ldr	r2, [pc, #40]	@ (8004ebc <HAL_RCC_ClockConfig+0x364>)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e96:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec0 <HAL_RCC_ClockConfig+0x368>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fb ffe8 	bl	8000e70 <HAL_InitTick>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	58024400 	.word	0x58024400
 8004eb4:	08011720 	.word	0x08011720
 8004eb8:	20000004 	.word	0x20000004
 8004ebc:	20000000 	.word	0x20000000
 8004ec0:	20000008 	.word	0x20000008

08004ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b089      	sub	sp, #36	@ 0x24
 8004ec8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eca:	4bb3      	ldr	r3, [pc, #716]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ed2:	2b18      	cmp	r3, #24
 8004ed4:	f200 8155 	bhi.w	8005182 <HAL_RCC_GetSysClockFreq+0x2be>
 8004ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004f45 	.word	0x08004f45
 8004ee4:	08005183 	.word	0x08005183
 8004ee8:	08005183 	.word	0x08005183
 8004eec:	08005183 	.word	0x08005183
 8004ef0:	08005183 	.word	0x08005183
 8004ef4:	08005183 	.word	0x08005183
 8004ef8:	08005183 	.word	0x08005183
 8004efc:	08005183 	.word	0x08005183
 8004f00:	08004f6b 	.word	0x08004f6b
 8004f04:	08005183 	.word	0x08005183
 8004f08:	08005183 	.word	0x08005183
 8004f0c:	08005183 	.word	0x08005183
 8004f10:	08005183 	.word	0x08005183
 8004f14:	08005183 	.word	0x08005183
 8004f18:	08005183 	.word	0x08005183
 8004f1c:	08005183 	.word	0x08005183
 8004f20:	08004f71 	.word	0x08004f71
 8004f24:	08005183 	.word	0x08005183
 8004f28:	08005183 	.word	0x08005183
 8004f2c:	08005183 	.word	0x08005183
 8004f30:	08005183 	.word	0x08005183
 8004f34:	08005183 	.word	0x08005183
 8004f38:	08005183 	.word	0x08005183
 8004f3c:	08005183 	.word	0x08005183
 8004f40:	08004f77 	.word	0x08004f77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f44:	4b94      	ldr	r3, [pc, #592]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d009      	beq.n	8004f64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f50:	4b91      	ldr	r3, [pc, #580]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	08db      	lsrs	r3, r3, #3
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	4a90      	ldr	r2, [pc, #576]	@ (800519c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004f62:	e111      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f64:	4b8d      	ldr	r3, [pc, #564]	@ (800519c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f66:	61bb      	str	r3, [r7, #24]
      break;
 8004f68:	e10e      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f6a:	4b8d      	ldr	r3, [pc, #564]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f6c:	61bb      	str	r3, [r7, #24]
      break;
 8004f6e:	e10b      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f70:	4b8c      	ldr	r3, [pc, #560]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f72:	61bb      	str	r3, [r7, #24]
      break;
 8004f74:	e108      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f76:	4b88      	ldr	r3, [pc, #544]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f80:	4b85      	ldr	r3, [pc, #532]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f84:	091b      	lsrs	r3, r3, #4
 8004f86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f8a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f8c:	4b82      	ldr	r3, [pc, #520]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f96:	4b80      	ldr	r3, [pc, #512]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9a:	08db      	lsrs	r3, r3, #3
 8004f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	fb02 f303 	mul.w	r3, r2, r3
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80e1 	beq.w	800517c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	f000 8083 	beq.w	80050c8 <HAL_RCC_GetSysClockFreq+0x204>
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	f200 80a1 	bhi.w	800510c <HAL_RCC_GetSysClockFreq+0x248>
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x114>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d056      	beq.n	8005084 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004fd6:	e099      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d02d      	beq.n	8005040 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fe4:	4b6c      	ldr	r3, [pc, #432]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	08db      	lsrs	r3, r3, #3
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	4a6b      	ldr	r2, [pc, #428]	@ (800519c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	ee07 3a90 	vmov	s15, r3
 8004ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800500e:	4b62      	ldr	r3, [pc, #392]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005022:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80051a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800502e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800503e:	e087      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80051ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800504e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005052:	4b51      	ldr	r3, [pc, #324]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005062:	ed97 6a02 	vldr	s12, [r7, #8]
 8005066:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80051a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800506a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005082:	e065      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80051b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005096:	4b40      	ldr	r3, [pc, #256]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80050aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80051a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050c6:	e043      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80051b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80050d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050da:	4b2f      	ldr	r3, [pc, #188]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80051a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005106:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800510a:	e021      	b.n	8005150 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80051b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800511a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511e:	4b1e      	ldr	r3, [pc, #120]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005132:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80051a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800514e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005150:	4b11      	ldr	r3, [pc, #68]	@ (8005198 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005154:	0a5b      	lsrs	r3, r3, #9
 8005156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800515a:	3301      	adds	r3, #1
 800515c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005168:	edd7 6a07 	vldr	s13, [r7, #28]
 800516c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005174:	ee17 3a90 	vmov	r3, s15
 8005178:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800517a:	e005      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	61bb      	str	r3, [r7, #24]
      break;
 8005180:	e002      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005182:	4b07      	ldr	r3, [pc, #28]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005184:	61bb      	str	r3, [r7, #24]
      break;
 8005186:	bf00      	nop
  }

  return sysclockfreq;
 8005188:	69bb      	ldr	r3, [r7, #24]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3724      	adds	r7, #36	@ 0x24
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	58024400 	.word	0x58024400
 800519c:	03d09000 	.word	0x03d09000
 80051a0:	003d0900 	.word	0x003d0900
 80051a4:	017d7840 	.word	0x017d7840
 80051a8:	46000000 	.word	0x46000000
 80051ac:	4c742400 	.word	0x4c742400
 80051b0:	4a742400 	.word	0x4a742400
 80051b4:	4bbebc20 	.word	0x4bbebc20

080051b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80051be:	f7ff fe81 	bl	8004ec4 <HAL_RCC_GetSysClockFreq>
 80051c2:	4602      	mov	r2, r0
 80051c4:	4b10      	ldr	r3, [pc, #64]	@ (8005208 <HAL_RCC_GetHCLKFreq+0x50>)
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	0a1b      	lsrs	r3, r3, #8
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	490f      	ldr	r1, [pc, #60]	@ (800520c <HAL_RCC_GetHCLKFreq+0x54>)
 80051d0:	5ccb      	ldrb	r3, [r1, r3]
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	fa22 f303 	lsr.w	r3, r2, r3
 80051da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005208 <HAL_RCC_GetHCLKFreq+0x50>)
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	4a09      	ldr	r2, [pc, #36]	@ (800520c <HAL_RCC_GetHCLKFreq+0x54>)
 80051e6:	5cd3      	ldrb	r3, [r2, r3]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	fa22 f303 	lsr.w	r3, r2, r3
 80051f2:	4a07      	ldr	r2, [pc, #28]	@ (8005210 <HAL_RCC_GetHCLKFreq+0x58>)
 80051f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051f6:	4a07      	ldr	r2, [pc, #28]	@ (8005214 <HAL_RCC_GetHCLKFreq+0x5c>)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051fc:	4b04      	ldr	r3, [pc, #16]	@ (8005210 <HAL_RCC_GetHCLKFreq+0x58>)
 80051fe:	681b      	ldr	r3, [r3, #0]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	58024400 	.word	0x58024400
 800520c:	08011720 	.word	0x08011720
 8005210:	20000004 	.word	0x20000004
 8005214:	20000000 	.word	0x20000000

08005218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800521c:	f7ff ffcc 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 8005220:	4602      	mov	r2, r0
 8005222:	4b06      	ldr	r3, [pc, #24]	@ (800523c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	091b      	lsrs	r3, r3, #4
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	4904      	ldr	r1, [pc, #16]	@ (8005240 <HAL_RCC_GetPCLK1Freq+0x28>)
 800522e:	5ccb      	ldrb	r3, [r1, r3]
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005238:	4618      	mov	r0, r3
 800523a:	bd80      	pop	{r7, pc}
 800523c:	58024400 	.word	0x58024400
 8005240:	08011720 	.word	0x08011720

08005244 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005248:	b0cc      	sub	sp, #304	@ 0x130
 800524a:	af00      	add	r7, sp, #0
 800524c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005250:	2300      	movs	r3, #0
 8005252:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005256:	2300      	movs	r3, #0
 8005258:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800525c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005268:	2500      	movs	r5, #0
 800526a:	ea54 0305 	orrs.w	r3, r4, r5
 800526e:	d049      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005270:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005276:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800527a:	d02f      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800527c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005280:	d828      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005282:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005286:	d01a      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005288:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800528c:	d822      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005292:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005296:	d007      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005298:	e01c      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800529a:	4bb8      	ldr	r3, [pc, #736]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800529c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529e:	4ab7      	ldr	r2, [pc, #732]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052a6:	e01a      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052ac:	3308      	adds	r3, #8
 80052ae:	2102      	movs	r1, #2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f002 fba1 	bl	80079f8 <RCCEx_PLL2_Config>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052bc:	e00f      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052c2:	3328      	adds	r3, #40	@ 0x28
 80052c4:	2102      	movs	r1, #2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f002 fc48 	bl	8007b5c <RCCEx_PLL3_Config>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052d2:	e004      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80052da:	e000      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80052dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10a      	bne.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052e6:	4ba5      	ldr	r3, [pc, #660]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80052ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052f4:	4aa1      	ldr	r2, [pc, #644]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052f6:	430b      	orrs	r3, r1
 80052f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80052fa:	e003      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005300:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005304:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005310:	f04f 0900 	mov.w	r9, #0
 8005314:	ea58 0309 	orrs.w	r3, r8, r9
 8005318:	d047      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800531a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800531e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005320:	2b04      	cmp	r3, #4
 8005322:	d82a      	bhi.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005324:	a201      	add	r2, pc, #4	@ (adr r2, 800532c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532a:	bf00      	nop
 800532c:	08005341 	.word	0x08005341
 8005330:	0800534f 	.word	0x0800534f
 8005334:	08005365 	.word	0x08005365
 8005338:	08005383 	.word	0x08005383
 800533c:	08005383 	.word	0x08005383
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005340:	4b8e      	ldr	r3, [pc, #568]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	4a8d      	ldr	r2, [pc, #564]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800534a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800534c:	e01a      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800534e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005352:	3308      	adds	r3, #8
 8005354:	2100      	movs	r1, #0
 8005356:	4618      	mov	r0, r3
 8005358:	f002 fb4e 	bl	80079f8 <RCCEx_PLL2_Config>
 800535c:	4603      	mov	r3, r0
 800535e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005362:	e00f      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005364:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005368:	3328      	adds	r3, #40	@ 0x28
 800536a:	2100      	movs	r1, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f002 fbf5 	bl	8007b5c <RCCEx_PLL3_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005378:	e004      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005380:	e000      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005384:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800538c:	4b7b      	ldr	r3, [pc, #492]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800538e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005390:	f023 0107 	bic.w	r1, r3, #7
 8005394:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800539a:	4a78      	ldr	r2, [pc, #480]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800539c:	430b      	orrs	r3, r1
 800539e:	6513      	str	r3, [r2, #80]	@ 0x50
 80053a0:	e003      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80053aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80053b6:	f04f 0b00 	mov.w	fp, #0
 80053ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80053be:	d04c      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80053c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ca:	d030      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80053cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053d0:	d829      	bhi.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80053d4:	d02d      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80053d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80053d8:	d825      	bhi.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053da:	2b80      	cmp	r3, #128	@ 0x80
 80053dc:	d018      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80053de:	2b80      	cmp	r3, #128	@ 0x80
 80053e0:	d821      	bhi.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80053e6:	2b40      	cmp	r3, #64	@ 0x40
 80053e8:	d007      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80053ea:	e01c      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ec:	4b63      	ldr	r3, [pc, #396]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f0:	4a62      	ldr	r2, [pc, #392]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053f8:	e01c      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053fe:	3308      	adds	r3, #8
 8005400:	2100      	movs	r1, #0
 8005402:	4618      	mov	r0, r3
 8005404:	f002 faf8 	bl	80079f8 <RCCEx_PLL2_Config>
 8005408:	4603      	mov	r3, r0
 800540a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800540e:	e011      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005410:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005414:	3328      	adds	r3, #40	@ 0x28
 8005416:	2100      	movs	r1, #0
 8005418:	4618      	mov	r0, r3
 800541a:	f002 fb9f 	bl	8007b5c <RCCEx_PLL3_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005424:	e006      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800542c:	e002      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800542e:	bf00      	nop
 8005430:	e000      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005434:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800543c:	4b4f      	ldr	r3, [pc, #316]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800543e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005440:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005444:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800544a:	4a4c      	ldr	r2, [pc, #304]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800544c:	430b      	orrs	r3, r1
 800544e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005450:	e003      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005452:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005456:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800545a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005466:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800546a:	2300      	movs	r3, #0
 800546c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005470:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005474:	460b      	mov	r3, r1
 8005476:	4313      	orrs	r3, r2
 8005478:	d053      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800547a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800547e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005482:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005486:	d035      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005488:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800548c:	d82e      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800548e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005492:	d031      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005494:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005498:	d828      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800549a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800549e:	d01a      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80054a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054a4:	d822      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80054aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054ae:	d007      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80054b0:	e01c      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b2:	4b32      	ldr	r3, [pc, #200]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b6:	4a31      	ldr	r2, [pc, #196]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054be:	e01c      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054c4:	3308      	adds	r3, #8
 80054c6:	2100      	movs	r1, #0
 80054c8:	4618      	mov	r0, r3
 80054ca:	f002 fa95 	bl	80079f8 <RCCEx_PLL2_Config>
 80054ce:	4603      	mov	r3, r0
 80054d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054d4:	e011      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054da:	3328      	adds	r3, #40	@ 0x28
 80054dc:	2100      	movs	r1, #0
 80054de:	4618      	mov	r0, r3
 80054e0:	f002 fb3c 	bl	8007b5c <RCCEx_PLL3_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ea:	e006      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80054f2:	e002      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054f4:	bf00      	nop
 80054f6:	e000      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10b      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005502:	4b1e      	ldr	r3, [pc, #120]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005506:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800550a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800550e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005512:	4a1a      	ldr	r2, [pc, #104]	@ (800557c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005514:	430b      	orrs	r3, r1
 8005516:	6593      	str	r3, [r2, #88]	@ 0x58
 8005518:	e003      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800551e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800552e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005532:	2300      	movs	r3, #0
 8005534:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005538:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800553c:	460b      	mov	r3, r1
 800553e:	4313      	orrs	r3, r2
 8005540:	d056      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005546:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800554a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800554e:	d038      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005550:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005554:	d831      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005556:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800555a:	d034      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800555c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005560:	d82b      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005562:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005566:	d01d      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005568:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800556c:	d825      	bhi.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d006      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005572:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005576:	d00a      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005578:	e01f      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800557a:	bf00      	nop
 800557c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005580:	4ba2      	ldr	r3, [pc, #648]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005584:	4aa1      	ldr	r2, [pc, #644]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800558a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800558c:	e01c      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800558e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005592:	3308      	adds	r3, #8
 8005594:	2100      	movs	r1, #0
 8005596:	4618      	mov	r0, r3
 8005598:	f002 fa2e 	bl	80079f8 <RCCEx_PLL2_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80055a2:	e011      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055a8:	3328      	adds	r3, #40	@ 0x28
 80055aa:	2100      	movs	r1, #0
 80055ac:	4618      	mov	r0, r3
 80055ae:	f002 fad5 	bl	8007b5c <RCCEx_PLL3_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055b8:	e006      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80055c0:	e002      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80055c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10b      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80055d0:	4b8e      	ldr	r3, [pc, #568]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80055d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80055e0:	4a8a      	ldr	r2, [pc, #552]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055e2:	430b      	orrs	r3, r1
 80055e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055e6:	e003      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80055f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80055fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005600:	2300      	movs	r3, #0
 8005602:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005606:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800560a:	460b      	mov	r3, r1
 800560c:	4313      	orrs	r3, r2
 800560e:	d03a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005610:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005616:	2b30      	cmp	r3, #48	@ 0x30
 8005618:	d01f      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800561a:	2b30      	cmp	r3, #48	@ 0x30
 800561c:	d819      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800561e:	2b20      	cmp	r3, #32
 8005620:	d00c      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005622:	2b20      	cmp	r3, #32
 8005624:	d815      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d019      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800562a:	2b10      	cmp	r3, #16
 800562c:	d111      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800562e:	4b77      	ldr	r3, [pc, #476]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005632:	4a76      	ldr	r2, [pc, #472]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800563a:	e011      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800563c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005640:	3308      	adds	r3, #8
 8005642:	2102      	movs	r1, #2
 8005644:	4618      	mov	r0, r3
 8005646:	f002 f9d7 	bl	80079f8 <RCCEx_PLL2_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005650:	e006      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005658:	e002      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800565e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005660:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005668:	4b68      	ldr	r3, [pc, #416]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800566a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800566c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005670:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005676:	4a65      	ldr	r2, [pc, #404]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005678:	430b      	orrs	r3, r1
 800567a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800567c:	e003      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005682:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005692:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005696:	2300      	movs	r3, #0
 8005698:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800569c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80056a0:	460b      	mov	r3, r1
 80056a2:	4313      	orrs	r3, r2
 80056a4:	d051      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80056a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056b0:	d035      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80056b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056b6:	d82e      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056bc:	d031      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80056be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056c2:	d828      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056c8:	d01a      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80056ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ce:	d822      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80056d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d8:	d007      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80056da:	e01c      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056dc:	4b4b      	ldr	r3, [pc, #300]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e0:	4a4a      	ldr	r2, [pc, #296]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056e8:	e01c      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056ee:	3308      	adds	r3, #8
 80056f0:	2100      	movs	r1, #0
 80056f2:	4618      	mov	r0, r3
 80056f4:	f002 f980 	bl	80079f8 <RCCEx_PLL2_Config>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056fe:	e011      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005700:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005704:	3328      	adds	r3, #40	@ 0x28
 8005706:	2100      	movs	r1, #0
 8005708:	4618      	mov	r0, r3
 800570a:	f002 fa27 	bl	8007b5c <RCCEx_PLL3_Config>
 800570e:	4603      	mov	r3, r0
 8005710:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005714:	e006      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800571c:	e002      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800571e:	bf00      	nop
 8005720:	e000      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005724:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800572c:	4b37      	ldr	r3, [pc, #220]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800572e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005730:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005734:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005738:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800573a:	4a34      	ldr	r2, [pc, #208]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800573c:	430b      	orrs	r3, r1
 800573e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005740:	e003      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005742:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005746:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800574a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005756:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800575a:	2300      	movs	r3, #0
 800575c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005760:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005764:	460b      	mov	r3, r1
 8005766:	4313      	orrs	r3, r2
 8005768:	d056      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800576a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800576e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005770:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005774:	d033      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005776:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800577a:	d82c      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800577c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005780:	d02f      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005782:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005786:	d826      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005788:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800578c:	d02b      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800578e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005792:	d820      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005794:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005798:	d012      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800579a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800579e:	d81a      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d022      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a8:	d115      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057ae:	3308      	adds	r3, #8
 80057b0:	2101      	movs	r1, #1
 80057b2:	4618      	mov	r0, r3
 80057b4:	f002 f920 	bl	80079f8 <RCCEx_PLL2_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057be:	e015      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057c4:	3328      	adds	r3, #40	@ 0x28
 80057c6:	2101      	movs	r1, #1
 80057c8:	4618      	mov	r0, r3
 80057ca:	f002 f9c7 	bl	8007b5c <RCCEx_PLL3_Config>
 80057ce:	4603      	mov	r3, r0
 80057d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057d4:	e00a      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80057dc:	e006      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057de:	bf00      	nop
 80057e0:	e004      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057e2:	bf00      	nop
 80057e4:	e002      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057e6:	bf00      	nop
 80057e8:	e000      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10d      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80057f4:	4b05      	ldr	r3, [pc, #20]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80057fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005800:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005802:	4a02      	ldr	r2, [pc, #8]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005804:	430b      	orrs	r3, r1
 8005806:	6513      	str	r3, [r2, #80]	@ 0x50
 8005808:	e006      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800580a:	bf00      	nop
 800580c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005810:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005814:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005818:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005824:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005828:	2300      	movs	r3, #0
 800582a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800582e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005832:	460b      	mov	r3, r1
 8005834:	4313      	orrs	r3, r2
 8005836:	d055      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005838:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800583c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005840:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005844:	d033      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005846:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800584a:	d82c      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800584c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005850:	d02f      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005856:	d826      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005858:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800585c:	d02b      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800585e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005862:	d820      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005868:	d012      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800586a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800586e:	d81a      	bhi.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005870:	2b00      	cmp	r3, #0
 8005872:	d022      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005878:	d115      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800587a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800587e:	3308      	adds	r3, #8
 8005880:	2101      	movs	r1, #1
 8005882:	4618      	mov	r0, r3
 8005884:	f002 f8b8 	bl	80079f8 <RCCEx_PLL2_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800588e:	e015      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005890:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005894:	3328      	adds	r3, #40	@ 0x28
 8005896:	2101      	movs	r1, #1
 8005898:	4618      	mov	r0, r3
 800589a:	f002 f95f 	bl	8007b5c <RCCEx_PLL3_Config>
 800589e:	4603      	mov	r3, r0
 80058a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80058a4:	e00a      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80058ac:	e006      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058ae:	bf00      	nop
 80058b0:	e004      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058b2:	bf00      	nop
 80058b4:	e002      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058b6:	bf00      	nop
 80058b8:	e000      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10b      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80058c4:	4bb6      	ldr	r3, [pc, #728]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80058cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058d4:	4ab2      	ldr	r2, [pc, #712]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058d6:	430b      	orrs	r3, r1
 80058d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80058da:	e003      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058e0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80058e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80058f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058f4:	2300      	movs	r3, #0
 80058f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058fa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80058fe:	460b      	mov	r3, r1
 8005900:	4313      	orrs	r3, r2
 8005902:	d02a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005904:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800590a:	2b00      	cmp	r3, #0
 800590c:	d011      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800590e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005912:	d10a      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005914:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005918:	3308      	adds	r3, #8
 800591a:	2101      	movs	r1, #1
 800591c:	4618      	mov	r0, r3
 800591e:	f002 f86b 	bl	80079f8 <RCCEx_PLL2_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005928:	e004      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005930:	e000      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005932:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005934:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800593c:	4b98      	ldr	r3, [pc, #608]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800593e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005940:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005944:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800594a:	4a95      	ldr	r2, [pc, #596]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800594c:	430b      	orrs	r3, r1
 800594e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005950:	e003      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005952:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005956:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800595a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800596a:	2300      	movs	r3, #0
 800596c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005970:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005974:	460b      	mov	r3, r1
 8005976:	4313      	orrs	r3, r2
 8005978:	d037      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800597a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800597e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005984:	d00e      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800598a:	d816      	bhi.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x776>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d018      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005994:	d111      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005996:	4b82      	ldr	r3, [pc, #520]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599a:	4a81      	ldr	r2, [pc, #516]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800599c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059a2:	e00f      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059a8:	3308      	adds	r3, #8
 80059aa:	2101      	movs	r1, #1
 80059ac:	4618      	mov	r0, r3
 80059ae:	f002 f823 	bl	80079f8 <RCCEx_PLL2_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059b8:	e004      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80059c0:	e000      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80059c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10a      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059cc:	4b74      	ldr	r3, [pc, #464]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059da:	4a71      	ldr	r2, [pc, #452]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059dc:	430b      	orrs	r3, r1
 80059de:	6513      	str	r3, [r2, #80]	@ 0x50
 80059e0:	e003      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80059ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f2:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80059f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059fa:	2300      	movs	r3, #0
 80059fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a00:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4313      	orrs	r3, r2
 8005a08:	d03a      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d81d      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005a14:	a201      	add	r2, pc, #4	@ (adr r2, 8005a1c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1a:	bf00      	nop
 8005a1c:	08005a59 	.word	0x08005a59
 8005a20:	08005a2d 	.word	0x08005a2d
 8005a24:	08005a3b 	.word	0x08005a3b
 8005a28:	08005a59 	.word	0x08005a59
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a30:	4a5b      	ldr	r2, [pc, #364]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a38:	e00f      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a3e:	3308      	adds	r3, #8
 8005a40:	2102      	movs	r1, #2
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 ffd8 	bl	80079f8 <RCCEx_PLL2_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a4e:	e004      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a56:	e000      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005a62:	4b4f      	ldr	r3, [pc, #316]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a66:	f023 0103 	bic.w	r1, r3, #3
 8005a6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a70:	4a4b      	ldr	r2, [pc, #300]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a72:	430b      	orrs	r3, r1
 8005a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a76:	e003      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a7c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005a8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a90:	2300      	movs	r3, #0
 8005a92:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a96:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f000 80a0 	beq.w	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aa2:	4b40      	ldr	r3, [pc, #256]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a3f      	ldr	r2, [pc, #252]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005aae:	f7fb fa29 	bl	8000f04 <HAL_GetTick>
 8005ab2:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ab6:	e00b      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ab8:	f7fb fa24 	bl	8000f04 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b64      	cmp	r3, #100	@ 0x64
 8005ac6:	d903      	bls.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ace:	e005      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ad0:	4b34      	ldr	r3, [pc, #208]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0ed      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005adc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d17a      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ae6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ae8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005af0:	4053      	eors	r3, r2
 8005af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d015      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005afa:	4b29      	ldr	r3, [pc, #164]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b02:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b06:	4b26      	ldr	r3, [pc, #152]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b0a:	4a25      	ldr	r2, [pc, #148]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b10:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b12:	4b23      	ldr	r3, [pc, #140]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b16:	4a22      	ldr	r2, [pc, #136]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b1c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b1e:	4a20      	ldr	r2, [pc, #128]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b20:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005b24:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b32:	d118      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b34:	f7fb f9e6 	bl	8000f04 <HAL_GetTick>
 8005b38:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b3c:	e00d      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b3e:	f7fb f9e1 	bl	8000f04 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b48:	1ad2      	subs	r2, r2, r3
 8005b4a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d903      	bls.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8005b58:	e005      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b5a:	4b11      	ldr	r3, [pc, #68]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0eb      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005b66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d130      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b72:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b7e:	d115      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005b80:	4b07      	ldr	r3, [pc, #28]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005b88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b90:	091a      	lsrs	r2, r3, #4
 8005b92:	4b05      	ldr	r3, [pc, #20]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	4a02      	ldr	r2, [pc, #8]	@ (8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	6113      	str	r3, [r2, #16]
 8005b9c:	e00c      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005b9e:	bf00      	nop
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	58024800 	.word	0x58024800
 8005ba8:	00ffffcf 	.word	0x00ffffcf
 8005bac:	4bd4      	ldr	r3, [pc, #848]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	4ad3      	ldr	r2, [pc, #844]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bb2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005bb6:	6113      	str	r3, [r2, #16]
 8005bb8:	4bd1      	ldr	r3, [pc, #836]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bba:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005bbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bc0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bc8:	4acd      	ldr	r2, [pc, #820]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bce:	e008      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bd0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bd4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8005bd8:	e003      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bde:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005be2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f002 0301 	and.w	r3, r2, #1
 8005bee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f000 808b 	beq.w	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c0c:	2b28      	cmp	r3, #40	@ 0x28
 8005c0e:	d86b      	bhi.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005c10:	a201      	add	r2, pc, #4	@ (adr r2, 8005c18 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005cf1 	.word	0x08005cf1
 8005c1c:	08005ce9 	.word	0x08005ce9
 8005c20:	08005ce9 	.word	0x08005ce9
 8005c24:	08005ce9 	.word	0x08005ce9
 8005c28:	08005ce9 	.word	0x08005ce9
 8005c2c:	08005ce9 	.word	0x08005ce9
 8005c30:	08005ce9 	.word	0x08005ce9
 8005c34:	08005ce9 	.word	0x08005ce9
 8005c38:	08005cbd 	.word	0x08005cbd
 8005c3c:	08005ce9 	.word	0x08005ce9
 8005c40:	08005ce9 	.word	0x08005ce9
 8005c44:	08005ce9 	.word	0x08005ce9
 8005c48:	08005ce9 	.word	0x08005ce9
 8005c4c:	08005ce9 	.word	0x08005ce9
 8005c50:	08005ce9 	.word	0x08005ce9
 8005c54:	08005ce9 	.word	0x08005ce9
 8005c58:	08005cd3 	.word	0x08005cd3
 8005c5c:	08005ce9 	.word	0x08005ce9
 8005c60:	08005ce9 	.word	0x08005ce9
 8005c64:	08005ce9 	.word	0x08005ce9
 8005c68:	08005ce9 	.word	0x08005ce9
 8005c6c:	08005ce9 	.word	0x08005ce9
 8005c70:	08005ce9 	.word	0x08005ce9
 8005c74:	08005ce9 	.word	0x08005ce9
 8005c78:	08005cf1 	.word	0x08005cf1
 8005c7c:	08005ce9 	.word	0x08005ce9
 8005c80:	08005ce9 	.word	0x08005ce9
 8005c84:	08005ce9 	.word	0x08005ce9
 8005c88:	08005ce9 	.word	0x08005ce9
 8005c8c:	08005ce9 	.word	0x08005ce9
 8005c90:	08005ce9 	.word	0x08005ce9
 8005c94:	08005ce9 	.word	0x08005ce9
 8005c98:	08005cf1 	.word	0x08005cf1
 8005c9c:	08005ce9 	.word	0x08005ce9
 8005ca0:	08005ce9 	.word	0x08005ce9
 8005ca4:	08005ce9 	.word	0x08005ce9
 8005ca8:	08005ce9 	.word	0x08005ce9
 8005cac:	08005ce9 	.word	0x08005ce9
 8005cb0:	08005ce9 	.word	0x08005ce9
 8005cb4:	08005ce9 	.word	0x08005ce9
 8005cb8:	08005cf1 	.word	0x08005cf1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 fe97 	bl	80079f8 <RCCEx_PLL2_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005cd0:	e00f      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cd6:	3328      	adds	r3, #40	@ 0x28
 8005cd8:	2101      	movs	r1, #1
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 ff3e 	bl	8007b5c <RCCEx_PLL3_Config>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ce6:	e004      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005cee:	e000      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10b      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005cfa:	4b81      	ldr	r3, [pc, #516]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d0a:	4a7d      	ldr	r2, [pc, #500]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d10:	e003      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d12:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d16:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f002 0302 	and.w	r3, r2, #2
 8005d26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d30:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005d34:	460b      	mov	r3, r1
 8005d36:	4313      	orrs	r3, r2
 8005d38:	d042      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d40:	2b05      	cmp	r3, #5
 8005d42:	d825      	bhi.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005d44:	a201      	add	r2, pc, #4	@ (adr r2, 8005d4c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4a:	bf00      	nop
 8005d4c:	08005d99 	.word	0x08005d99
 8005d50:	08005d65 	.word	0x08005d65
 8005d54:	08005d7b 	.word	0x08005d7b
 8005d58:	08005d99 	.word	0x08005d99
 8005d5c:	08005d99 	.word	0x08005d99
 8005d60:	08005d99 	.word	0x08005d99
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d68:	3308      	adds	r3, #8
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f001 fe43 	bl	80079f8 <RCCEx_PLL2_Config>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d78:	e00f      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d7e:	3328      	adds	r3, #40	@ 0x28
 8005d80:	2101      	movs	r1, #1
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 feea 	bl	8007b5c <RCCEx_PLL3_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d8e:	e004      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d96:	e000      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10a      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005da2:	4b57      	ldr	r3, [pc, #348]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da6:	f023 0107 	bic.w	r1, r3, #7
 8005daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005db0:	4a53      	ldr	r2, [pc, #332]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005db2:	430b      	orrs	r3, r1
 8005db4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005db6:	e003      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dbc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc8:	f002 0304 	and.w	r3, r2, #4
 8005dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dd6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	d044      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005de0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	d825      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005dec:	a201      	add	r2, pc, #4	@ (adr r2, 8005df4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df2:	bf00      	nop
 8005df4:	08005e41 	.word	0x08005e41
 8005df8:	08005e0d 	.word	0x08005e0d
 8005dfc:	08005e23 	.word	0x08005e23
 8005e00:	08005e41 	.word	0x08005e41
 8005e04:	08005e41 	.word	0x08005e41
 8005e08:	08005e41 	.word	0x08005e41
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e10:	3308      	adds	r3, #8
 8005e12:	2101      	movs	r1, #1
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 fdef 	bl	80079f8 <RCCEx_PLL2_Config>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e20:	e00f      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e26:	3328      	adds	r3, #40	@ 0x28
 8005e28:	2101      	movs	r1, #1
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 fe96 	bl	8007b5c <RCCEx_PLL3_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e36:	e004      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e3e:	e000      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10b      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4e:	f023 0107 	bic.w	r1, r3, #7
 8005e52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e5a:	4a29      	ldr	r2, [pc, #164]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e60:	e003      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e66:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	f002 0320 	and.w	r3, r2, #32
 8005e76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e84:	460b      	mov	r3, r1
 8005e86:	4313      	orrs	r3, r2
 8005e88:	d057      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005e8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e96:	d035      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e9c:	d82c      	bhi.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea2:	d031      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea8:	d826      	bhi.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005eaa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005eae:	d02d      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005eb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005eb4:	d820      	bhi.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005eb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eba:	d012      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005ebc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ec0:	d81a      	bhi.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d024      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005ec6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005eca:	d115      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 fd8f 	bl	80079f8 <RCCEx_PLL2_Config>
 8005eda:	4603      	mov	r3, r0
 8005edc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005ee0:	e017      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ee6:	3328      	adds	r3, #40	@ 0x28
 8005ee8:	2102      	movs	r1, #2
 8005eea:	4618      	mov	r0, r3
 8005eec:	f001 fe36 	bl	8007b5c <RCCEx_PLL3_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005ef6:	e00c      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005efe:	e008      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005f00:	58024400 	.word	0x58024400
        break;
 8005f04:	bf00      	nop
 8005f06:	e004      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005f08:	bf00      	nop
 8005f0a:	e002      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005f0c:	bf00      	nop
 8005f0e:	e000      	b.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f12:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10b      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f1a:	4bc2      	ldr	r3, [pc, #776]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f2a:	4abe      	ldr	r2, [pc, #760]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f2c:	430b      	orrs	r3, r1
 8005f2e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f30:	e003      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f36:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f42:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005f46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4313      	orrs	r3, r2
 8005f58:	d055      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f62:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f66:	d033      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005f68:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f6c:	d82c      	bhi.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f72:	d02f      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f78:	d826      	bhi.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f7e:	d02b      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005f80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f84:	d820      	bhi.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f8a:	d012      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005f8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f90:	d81a      	bhi.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d022      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f9a:	d115      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 fd27 	bl	80079f8 <RCCEx_PLL2_Config>
 8005faa:	4603      	mov	r3, r0
 8005fac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005fb0:	e015      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fb6:	3328      	adds	r3, #40	@ 0x28
 8005fb8:	2102      	movs	r1, #2
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 fdce 	bl	8007b5c <RCCEx_PLL3_Config>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005fc6:	e00a      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005fce:	e006      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005fd0:	bf00      	nop
 8005fd2:	e004      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005fd4:	bf00      	nop
 8005fd6:	e002      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005fd8:	bf00      	nop
 8005fda:	e000      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10b      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fe6:	4b8f      	ldr	r3, [pc, #572]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ff2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ff6:	4a8b      	ldr	r2, [pc, #556]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ff8:	430b      	orrs	r3, r1
 8005ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ffc:	e003      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006002:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006006:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006012:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006016:	2300      	movs	r3, #0
 8006018:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800601c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006020:	460b      	mov	r3, r1
 8006022:	4313      	orrs	r3, r2
 8006024:	d055      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006026:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800602a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800602e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006032:	d033      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006034:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006038:	d82c      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800603a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800603e:	d02f      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006044:	d826      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006046:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800604a:	d02b      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800604c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006050:	d820      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006056:	d012      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006058:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800605c:	d81a      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d022      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006066:	d115      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006068:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800606c:	3308      	adds	r3, #8
 800606e:	2100      	movs	r1, #0
 8006070:	4618      	mov	r0, r3
 8006072:	f001 fcc1 	bl	80079f8 <RCCEx_PLL2_Config>
 8006076:	4603      	mov	r3, r0
 8006078:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800607c:	e015      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800607e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006082:	3328      	adds	r3, #40	@ 0x28
 8006084:	2102      	movs	r1, #2
 8006086:	4618      	mov	r0, r3
 8006088:	f001 fd68 	bl	8007b5c <RCCEx_PLL3_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006092:	e00a      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800609a:	e006      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800609c:	bf00      	nop
 800609e:	e004      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80060a0:	bf00      	nop
 80060a2:	e002      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80060a4:	bf00      	nop
 80060a6:	e000      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80060a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10b      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80060b2:	4b5c      	ldr	r3, [pc, #368]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060b6:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80060ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80060c2:	4a58      	ldr	r2, [pc, #352]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060c4:	430b      	orrs	r3, r1
 80060c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80060c8:	e003      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80060d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060da:	f002 0308 	and.w	r3, r2, #8
 80060de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060e2:	2300      	movs	r3, #0
 80060e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060e8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80060ec:	460b      	mov	r3, r1
 80060ee:	4313      	orrs	r3, r2
 80060f0:	d01e      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80060f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060fe:	d10c      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006100:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006104:	3328      	adds	r3, #40	@ 0x28
 8006106:	2102      	movs	r1, #2
 8006108:	4618      	mov	r0, r3
 800610a:	f001 fd27 	bl	8007b5c <RCCEx_PLL3_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800611a:	4b42      	ldr	r3, [pc, #264]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800611c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006122:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800612a:	4a3e      	ldr	r2, [pc, #248]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800612c:	430b      	orrs	r3, r1
 800612e:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f002 0310 	and.w	r3, r2, #16
 800613c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006140:	2300      	movs	r3, #0
 8006142:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006146:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800614a:	460b      	mov	r3, r1
 800614c:	4313      	orrs	r3, r2
 800614e:	d01e      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006154:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006158:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800615c:	d10c      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800615e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006162:	3328      	adds	r3, #40	@ 0x28
 8006164:	2102      	movs	r1, #2
 8006166:	4618      	mov	r0, r3
 8006168:	f001 fcf8 	bl	8007b5c <RCCEx_PLL3_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006178:	4b2a      	ldr	r3, [pc, #168]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800617a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006180:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006184:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006188:	4a26      	ldr	r2, [pc, #152]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800618a:	430b      	orrs	r3, r1
 800618c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800618e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800619a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800619e:	2300      	movs	r3, #0
 80061a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061a4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80061a8:	460b      	mov	r3, r1
 80061aa:	4313      	orrs	r3, r2
 80061ac:	d040      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80061ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80061b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061ba:	d022      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80061bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061c0:	d81b      	bhi.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80061c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ca:	d00b      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80061cc:	e015      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061d2:	3308      	adds	r3, #8
 80061d4:	2100      	movs	r1, #0
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 fc0e 	bl	80079f8 <RCCEx_PLL2_Config>
 80061dc:	4603      	mov	r3, r0
 80061de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80061e2:	e00f      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061e8:	3328      	adds	r3, #40	@ 0x28
 80061ea:	2102      	movs	r1, #2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 fcb5 	bl	8007b5c <RCCEx_PLL3_Config>
 80061f2:	4603      	mov	r3, r0
 80061f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80061f8:	e004      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006200:	e000      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8006202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006204:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10d      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800620c:	4b05      	ldr	r3, [pc, #20]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800620e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006210:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006214:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006218:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800621c:	4a01      	ldr	r2, [pc, #4]	@ (8006224 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800621e:	430b      	orrs	r3, r1
 8006220:	6593      	str	r3, [r2, #88]	@ 0x58
 8006222:	e005      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006224:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006228:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800622c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006230:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800623c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800623e:	2300      	movs	r3, #0
 8006240:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006242:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006246:	460b      	mov	r3, r1
 8006248:	4313      	orrs	r3, r2
 800624a:	d03b      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800624c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006254:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006258:	d01f      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800625a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800625e:	d818      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006260:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006264:	d003      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006266:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800626a:	d007      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800626c:	e011      	b.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800626e:	4b64      	ldr	r3, [pc, #400]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006272:	4a63      	ldr	r2, [pc, #396]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006278:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800627a:	e00f      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800627c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006280:	3328      	adds	r3, #40	@ 0x28
 8006282:	2101      	movs	r1, #1
 8006284:	4618      	mov	r0, r3
 8006286:	f001 fc69 	bl	8007b5c <RCCEx_PLL3_Config>
 800628a:	4603      	mov	r3, r0
 800628c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006290:	e004      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800629a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10b      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062a4:	4b56      	ldr	r3, [pc, #344]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062a8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80062ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062b4:	4a52      	ldr	r2, [pc, #328]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062b6:	430b      	orrs	r3, r1
 80062b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80062ba:	e003      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80062c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80062c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80062d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80062d2:	2300      	movs	r3, #0
 80062d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80062d6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80062da:	460b      	mov	r3, r1
 80062dc:	4313      	orrs	r3, r2
 80062de:	d031      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80062e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80062ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062ee:	d007      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80062f0:	e011      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f2:	4b43      	ldr	r3, [pc, #268]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f6:	4a42      	ldr	r2, [pc, #264]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80062f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80062fe:	e00e      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006304:	3308      	adds	r3, #8
 8006306:	2102      	movs	r1, #2
 8006308:	4618      	mov	r0, r3
 800630a:	f001 fb75 	bl	80079f8 <RCCEx_PLL2_Config>
 800630e:	4603      	mov	r3, r0
 8006310:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006314:	e003      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800631c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800631e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006326:	4b36      	ldr	r3, [pc, #216]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800632a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800632e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006334:	4a32      	ldr	r2, [pc, #200]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006336:	430b      	orrs	r3, r1
 8006338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800633a:	e003      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006340:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006344:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006350:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006352:	2300      	movs	r3, #0
 8006354:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006356:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800635a:	460b      	mov	r3, r1
 800635c:	4313      	orrs	r3, r2
 800635e:	d00c      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006360:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006364:	3328      	adds	r3, #40	@ 0x28
 8006366:	2102      	movs	r1, #2
 8006368:	4618      	mov	r0, r3
 800636a:	f001 fbf7 	bl	8007b5c <RCCEx_PLL3_Config>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800637a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006386:	663b      	str	r3, [r7, #96]	@ 0x60
 8006388:	2300      	movs	r3, #0
 800638a:	667b      	str	r3, [r7, #100]	@ 0x64
 800638c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006390:	460b      	mov	r3, r1
 8006392:	4313      	orrs	r3, r2
 8006394:	d03a      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006396:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800639a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800639e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063a2:	d018      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80063a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063a8:	d811      	bhi.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80063aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ae:	d014      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80063b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063b4:	d80b      	bhi.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d011      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80063ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063be:	d106      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c4:	4a0e      	ldr	r2, [pc, #56]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80063cc:	e008      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80063d4:	e004      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80063d6:	bf00      	nop
 80063d8:	e002      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80063da:	bf00      	nop
 80063dc:	e000      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80063de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10d      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80063e8:	4b05      	ldr	r3, [pc, #20]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ec:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063f8:	4a01      	ldr	r2, [pc, #4]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063fa:	430b      	orrs	r3, r1
 80063fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80063fe:	e005      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006400:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006404:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006408:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800640c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006418:	65bb      	str	r3, [r7, #88]	@ 0x58
 800641a:	2300      	movs	r3, #0
 800641c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800641e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006422:	460b      	mov	r3, r1
 8006424:	4313      	orrs	r3, r2
 8006426:	d009      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006428:	4baa      	ldr	r3, [pc, #680]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800642a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800642c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006430:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006434:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006436:	4aa7      	ldr	r2, [pc, #668]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006438:	430b      	orrs	r3, r1
 800643a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800643c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006448:	653b      	str	r3, [r7, #80]	@ 0x50
 800644a:	2300      	movs	r3, #0
 800644c:	657b      	str	r3, [r7, #84]	@ 0x54
 800644e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006452:	460b      	mov	r3, r1
 8006454:	4313      	orrs	r3, r2
 8006456:	d00a      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006458:	4b9e      	ldr	r3, [pc, #632]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006460:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006464:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006468:	4a9a      	ldr	r2, [pc, #616]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800646a:	430b      	orrs	r3, r1
 800646c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800646e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800647a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800647c:	2300      	movs	r3, #0
 800647e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006480:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006484:	460b      	mov	r3, r1
 8006486:	4313      	orrs	r3, r2
 8006488:	d009      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800648a:	4b92      	ldr	r3, [pc, #584]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800648c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800648e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006492:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006498:	4a8e      	ldr	r2, [pc, #568]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800649a:	430b      	orrs	r3, r1
 800649c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800649e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80064aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80064ac:	2300      	movs	r3, #0
 80064ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80064b4:	460b      	mov	r3, r1
 80064b6:	4313      	orrs	r3, r2
 80064b8:	d00e      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064ba:	4b86      	ldr	r3, [pc, #536]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	4a85      	ldr	r2, [pc, #532]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064c0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064c4:	6113      	str	r3, [r2, #16]
 80064c6:	4b83      	ldr	r3, [pc, #524]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064c8:	6919      	ldr	r1, [r3, #16]
 80064ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80064d2:	4a80      	ldr	r2, [pc, #512]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064d4:	430b      	orrs	r3, r1
 80064d6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80064d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80064e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064e6:	2300      	movs	r3, #0
 80064e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064ea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80064ee:	460b      	mov	r3, r1
 80064f0:	4313      	orrs	r3, r2
 80064f2:	d009      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80064f4:	4b77      	ldr	r3, [pc, #476]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80064fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006502:	4a74      	ldr	r2, [pc, #464]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006504:	430b      	orrs	r3, r1
 8006506:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006508:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006514:	633b      	str	r3, [r7, #48]	@ 0x30
 8006516:	2300      	movs	r3, #0
 8006518:	637b      	str	r3, [r7, #52]	@ 0x34
 800651a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800651e:	460b      	mov	r3, r1
 8006520:	4313      	orrs	r3, r2
 8006522:	d00a      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006524:	4b6b      	ldr	r3, [pc, #428]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006528:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800652c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006534:	4a67      	ldr	r2, [pc, #412]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006536:	430b      	orrs	r3, r1
 8006538:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800653a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	2100      	movs	r1, #0
 8006544:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800654c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006550:	460b      	mov	r3, r1
 8006552:	4313      	orrs	r3, r2
 8006554:	d011      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800655a:	3308      	adds	r3, #8
 800655c:	2100      	movs	r1, #0
 800655e:	4618      	mov	r0, r3
 8006560:	f001 fa4a 	bl	80079f8 <RCCEx_PLL2_Config>
 8006564:	4603      	mov	r3, r0
 8006566:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800656a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006572:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006576:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800657a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	2100      	movs	r1, #0
 8006584:	6239      	str	r1, [r7, #32]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	627b      	str	r3, [r7, #36]	@ 0x24
 800658c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006590:	460b      	mov	r3, r1
 8006592:	4313      	orrs	r3, r2
 8006594:	d011      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800659a:	3308      	adds	r3, #8
 800659c:	2101      	movs	r1, #1
 800659e:	4618      	mov	r0, r3
 80065a0:	f001 fa2a 	bl	80079f8 <RCCEx_PLL2_Config>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80065aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80065ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	2100      	movs	r1, #0
 80065c4:	61b9      	str	r1, [r7, #24]
 80065c6:	f003 0304 	and.w	r3, r3, #4
 80065ca:	61fb      	str	r3, [r7, #28]
 80065cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80065d0:	460b      	mov	r3, r1
 80065d2:	4313      	orrs	r3, r2
 80065d4:	d011      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065da:	3308      	adds	r3, #8
 80065dc:	2102      	movs	r1, #2
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 fa0a 	bl	80079f8 <RCCEx_PLL2_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80065ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80065fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006602:	2100      	movs	r1, #0
 8006604:	6139      	str	r1, [r7, #16]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006610:	460b      	mov	r3, r1
 8006612:	4313      	orrs	r3, r2
 8006614:	d011      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006616:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800661a:	3328      	adds	r3, #40	@ 0x28
 800661c:	2100      	movs	r1, #0
 800661e:	4618      	mov	r0, r3
 8006620:	f001 fa9c 	bl	8007b5c <RCCEx_PLL3_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 800662a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006632:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006636:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800663a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006642:	2100      	movs	r1, #0
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	f003 0310 	and.w	r3, r3, #16
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006650:	460b      	mov	r3, r1
 8006652:	4313      	orrs	r3, r2
 8006654:	d011      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006656:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800665a:	3328      	adds	r3, #40	@ 0x28
 800665c:	2101      	movs	r1, #1
 800665e:	4618      	mov	r0, r3
 8006660:	f001 fa7c 	bl	8007b5c <RCCEx_PLL3_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800666a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006672:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006676:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800667a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	2100      	movs	r1, #0
 8006684:	6039      	str	r1, [r7, #0]
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	607b      	str	r3, [r7, #4]
 800668c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006690:	460b      	mov	r3, r1
 8006692:	4313      	orrs	r3, r2
 8006694:	d011      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006696:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800669a:	3328      	adds	r3, #40	@ 0x28
 800669c:	2102      	movs	r1, #2
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 fa5c 	bl	8007b5c <RCCEx_PLL3_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80066aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80066b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80066ba:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e000      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80066ce:	46bd      	mov	sp, r7
 80066d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066d4:	58024400 	.word	0x58024400

080066d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b090      	sub	sp, #64	@ 0x40
 80066dc:	af00      	add	r7, sp, #0
 80066de:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80066e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066e6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80066ea:	430b      	orrs	r3, r1
 80066ec:	f040 8094 	bne.w	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80066f0:	4b9e      	ldr	r3, [pc, #632]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80066fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	f200 8087 	bhi.w	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006702:	a201      	add	r2, pc, #4	@ (adr r2, 8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	0800671d 	.word	0x0800671d
 800670c:	08006745 	.word	0x08006745
 8006710:	0800676d 	.word	0x0800676d
 8006714:	08006809 	.word	0x08006809
 8006718:	08006795 	.word	0x08006795
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800671c:	4b93      	ldr	r3, [pc, #588]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006724:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006728:	d108      	bne.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800672a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800672e:	4618      	mov	r0, r3
 8006730:	f001 f810 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006738:	f000 bd45 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006740:	f000 bd41 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006744:	4b89      	ldr	r3, [pc, #548]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800674c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006750:	d108      	bne.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006752:	f107 0318 	add.w	r3, r7, #24
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fd54 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006760:	f000 bd31 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006768:	f000 bd2d 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800676c:	4b7f      	ldr	r3, [pc, #508]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006774:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006778:	d108      	bne.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800677a:	f107 030c 	add.w	r3, r7, #12
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fe94 	bl	80074ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006788:	f000 bd1d 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006790:	f000 bd19 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006794:	4b75      	ldr	r3, [pc, #468]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006798:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800679c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800679e:	4b73      	ldr	r3, [pc, #460]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d10c      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80067aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d109      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067b0:	4b6e      	ldr	r3, [pc, #440]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	08db      	lsrs	r3, r3, #3
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	4a6d      	ldr	r2, [pc, #436]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067bc:	fa22 f303 	lsr.w	r3, r2, r3
 80067c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067c2:	e01f      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067c4:	4b69      	ldr	r3, [pc, #420]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067d0:	d106      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80067d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067d8:	d102      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067da:	4b66      	ldr	r3, [pc, #408]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80067dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067de:	e011      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067e0:	4b62      	ldr	r3, [pc, #392]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067ec:	d106      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80067ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067f4:	d102      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067f6:	4b60      	ldr	r3, [pc, #384]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80067f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067fa:	e003      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80067fc:	2300      	movs	r3, #0
 80067fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006800:	f000 bce1 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006804:	f000 bcdf 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006808:	4b5c      	ldr	r3, [pc, #368]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800680a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800680c:	f000 bcdb 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006814:	f000 bcd7 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800681c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006820:	430b      	orrs	r3, r1
 8006822:	f040 80ad 	bne.w	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006826:	4b51      	ldr	r3, [pc, #324]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800682a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800682e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006836:	d056      	beq.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800683e:	f200 8090 	bhi.w	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	2bc0      	cmp	r3, #192	@ 0xc0
 8006846:	f000 8088 	beq.w	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	2bc0      	cmp	r3, #192	@ 0xc0
 800684e:	f200 8088 	bhi.w	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	2b80      	cmp	r3, #128	@ 0x80
 8006856:	d032      	beq.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685a:	2b80      	cmp	r3, #128	@ 0x80
 800685c:	f200 8081 	bhi.w	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006868:	2b40      	cmp	r3, #64	@ 0x40
 800686a:	d014      	beq.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800686c:	e079      	b.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800686e:	4b3f      	ldr	r3, [pc, #252]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006876:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800687a:	d108      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800687c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006880:	4618      	mov	r0, r3
 8006882:	f000 ff67 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800688a:	f000 bc9c 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006892:	f000 bc98 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006896:	4b35      	ldr	r3, [pc, #212]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800689e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068a2:	d108      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068a4:	f107 0318 	add.w	r3, r7, #24
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fcab 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068b2:	f000 bc88 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ba:	f000 bc84 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068be:	4b2b      	ldr	r3, [pc, #172]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068ca:	d108      	bne.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068cc:	f107 030c 	add.w	r3, r7, #12
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fdeb 	bl	80074ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068da:	f000 bc74 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068e2:	f000 bc70 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068e6:	4b21      	ldr	r3, [pc, #132]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80068ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068f0:	4b1e      	ldr	r3, [pc, #120]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d10c      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80068fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006902:	4b1a      	ldr	r3, [pc, #104]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	08db      	lsrs	r3, r3, #3
 8006908:	f003 0303 	and.w	r3, r3, #3
 800690c:	4a18      	ldr	r2, [pc, #96]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800690e:	fa22 f303 	lsr.w	r3, r2, r3
 8006912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006914:	e01f      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006916:	4b15      	ldr	r3, [pc, #84]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800691e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006922:	d106      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006926:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800692a:	d102      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800692c:	4b11      	ldr	r3, [pc, #68]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800692e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006930:	e011      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006932:	4b0e      	ldr	r3, [pc, #56]	@ (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800693a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800693e:	d106      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006942:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006946:	d102      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006948:	4b0b      	ldr	r3, [pc, #44]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800694a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800694c:	e003      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006952:	f000 bc38 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006956:	f000 bc36 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800695a:	4b08      	ldr	r3, [pc, #32]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800695c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800695e:	f000 bc32 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006966:	f000 bc2e 	b.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800696a:	bf00      	nop
 800696c:	58024400 	.word	0x58024400
 8006970:	03d09000 	.word	0x03d09000
 8006974:	003d0900 	.word	0x003d0900
 8006978:	017d7840 	.word	0x017d7840
 800697c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006984:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006988:	430b      	orrs	r3, r1
 800698a:	f040 809c 	bne.w	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800698e:	4b9e      	ldr	r3, [pc, #632]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006992:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006996:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800699e:	d054      	beq.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069a6:	f200 808b 	bhi.w	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80069aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069b0:	f000 8083 	beq.w	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80069b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069ba:	f200 8081 	bhi.w	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069c4:	d02f      	beq.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069cc:	d878      	bhi.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d004      	beq.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069da:	d012      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80069dc:	e070      	b.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069de:	4b8a      	ldr	r3, [pc, #552]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069ea:	d107      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 feaf 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069fa:	e3e4      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a00:	e3e1      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a02:	4b81      	ldr	r3, [pc, #516]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a0e:	d107      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a10:	f107 0318 	add.w	r3, r7, #24
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 fbf5 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a1e:	e3d2      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a24:	e3cf      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a26:	4b78      	ldr	r3, [pc, #480]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a32:	d107      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a34:	f107 030c 	add.w	r3, r7, #12
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fd37 	bl	80074ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a42:	e3c0      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a48:	e3bd      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a4a:	4b6f      	ldr	r3, [pc, #444]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a52:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a54:	4b6c      	ldr	r3, [pc, #432]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b04      	cmp	r3, #4
 8006a5e:	d10c      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a66:	4b68      	ldr	r3, [pc, #416]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	08db      	lsrs	r3, r3, #3
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	4a66      	ldr	r2, [pc, #408]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006a72:	fa22 f303 	lsr.w	r3, r2, r3
 8006a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a78:	e01e      	b.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a7a:	4b63      	ldr	r3, [pc, #396]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a86:	d106      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a8e:	d102      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a90:	4b5f      	ldr	r3, [pc, #380]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a94:	e010      	b.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a96:	4b5c      	ldr	r3, [pc, #368]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aa2:	d106      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aaa:	d102      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006aac:	4b59      	ldr	r3, [pc, #356]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ab0:	e002      	b.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ab6:	e386      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ab8:	e385      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006aba:	4b57      	ldr	r3, [pc, #348]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006abe:	e382      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac4:	e37f      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aca:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006ace:	430b      	orrs	r3, r1
 8006ad0:	f040 80a7 	bne.w	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006ad4:	4b4c      	ldr	r3, [pc, #304]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006adc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ae4:	d055      	beq.n	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006aec:	f200 8096 	bhi.w	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006af6:	f000 8084 	beq.w	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006b00:	f200 808c 	bhi.w	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b0a:	d030      	beq.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b12:	f200 8083 	bhi.w	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d004      	beq.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b22:	d012      	beq.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006b24:	e07a      	b.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b26:	4b38      	ldr	r3, [pc, #224]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b32:	d107      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 fe0b 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b42:	e340      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b48:	e33d      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b56:	d107      	bne.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b58:	f107 0318 	add.w	r3, r7, #24
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 fb51 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b66:	e32e      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b6c:	e32b      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b6e:	4b26      	ldr	r3, [pc, #152]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b7a:	d107      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b7c:	f107 030c 	add.w	r3, r7, #12
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fc93 	bl	80074ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b8a:	e31c      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b90:	e319      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b92:	4b1d      	ldr	r3, [pc, #116]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d10c      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bae:	4b16      	ldr	r3, [pc, #88]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	08db      	lsrs	r3, r3, #3
 8006bb4:	f003 0303 	and.w	r3, r3, #3
 8006bb8:	4a14      	ldr	r2, [pc, #80]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006bba:	fa22 f303 	lsr.w	r3, r2, r3
 8006bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bc0:	e01e      	b.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bc2:	4b11      	ldr	r3, [pc, #68]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bce:	d106      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bd6:	d102      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bdc:	e010      	b.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bde:	4b0a      	ldr	r3, [pc, #40]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bea:	d106      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bf2:	d102      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bf4:	4b07      	ldr	r3, [pc, #28]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bf8:	e002      	b.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006bfe:	e2e2      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c00:	e2e1      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c02:	4b05      	ldr	r3, [pc, #20]	@ (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c06:	e2de      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c08:	58024400 	.word	0x58024400
 8006c0c:	03d09000 	.word	0x03d09000
 8006c10:	003d0900 	.word	0x003d0900
 8006c14:	017d7840 	.word	0x017d7840
 8006c18:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c20:	e2d1      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c26:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006c2a:	430b      	orrs	r3, r1
 8006c2c:	f040 809c 	bne.w	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006c30:	4b93      	ldr	r3, [pc, #588]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c34:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006c38:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c40:	d054      	beq.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c48:	f200 808b 	bhi.w	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c52:	f000 8083 	beq.w	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c5c:	f200 8081 	bhi.w	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c66:	d02f      	beq.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c6e:	d878      	bhi.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d004      	beq.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c7c:	d012      	beq.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006c7e:	e070      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c80:	4b7f      	ldr	r3, [pc, #508]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c8c:	d107      	bne.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fd5e 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c9c:	e293      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca2:	e290      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ca4:	4b76      	ldr	r3, [pc, #472]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cb0:	d107      	bne.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb2:	f107 0318 	add.w	r3, r7, #24
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 faa4 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cc0:	e281      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc6:	e27e      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cc8:	4b6d      	ldr	r3, [pc, #436]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cd4:	d107      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cd6:	f107 030c 	add.w	r3, r7, #12
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 fbe6 	bl	80074ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ce4:	e26f      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cea:	e26c      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cec:	4b64      	ldr	r3, [pc, #400]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cf0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006cf4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cf6:	4b62      	ldr	r3, [pc, #392]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0304 	and.w	r3, r3, #4
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d10c      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d08:	4b5d      	ldr	r3, [pc, #372]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	08db      	lsrs	r3, r3, #3
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	4a5c      	ldr	r2, [pc, #368]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006d14:	fa22 f303 	lsr.w	r3, r2, r3
 8006d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d1a:	e01e      	b.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d1c:	4b58      	ldr	r3, [pc, #352]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d28:	d106      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d30:	d102      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d32:	4b55      	ldr	r3, [pc, #340]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d36:	e010      	b.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d38:	4b51      	ldr	r3, [pc, #324]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d44:	d106      	bne.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d4c:	d102      	bne.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d4e:	4b4f      	ldr	r3, [pc, #316]	@ (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d52:	e002      	b.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d58:	e235      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d5a:	e234      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d60:	e231      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d66:	e22e      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d6c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006d70:	430b      	orrs	r3, r1
 8006d72:	f040 808f 	bne.w	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006d76:	4b42      	ldr	r3, [pc, #264]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d7a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d86:	d06b      	beq.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d8e:	d874      	bhi.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d96:	d056      	beq.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d9e:	d86c      	bhi.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006da6:	d03b      	beq.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006daa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006dae:	d864      	bhi.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006db6:	d021      	beq.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dbe:	d85c      	bhi.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d004      	beq.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dcc:	d004      	beq.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006dce:	e054      	b.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006dd0:	f7fe fa22 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
 8006dd4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006dd6:	e1f6      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dd8:	4b29      	ldr	r3, [pc, #164]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006de0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006de4:	d107      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006de6:	f107 0318 	add.w	r3, r7, #24
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 fa0a 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006df4:	e1e7      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006df6:	2300      	movs	r3, #0
 8006df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dfa:	e1e4      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dfc:	4b20      	ldr	r3, [pc, #128]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e08:	d107      	bne.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e0a:	f107 030c 	add.w	r3, r7, #12
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fb4c 	bl	80074ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e18:	e1d5      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e1e:	e1d2      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e20:	4b17      	ldr	r3, [pc, #92]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d109      	bne.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e2c:	4b14      	ldr	r3, [pc, #80]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	08db      	lsrs	r3, r3, #3
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	4a13      	ldr	r2, [pc, #76]	@ (8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e38:	fa22 f303 	lsr.w	r3, r2, r3
 8006e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e3e:	e1c2      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e40:	2300      	movs	r3, #0
 8006e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e44:	e1bf      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e46:	4b0e      	ldr	r3, [pc, #56]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e52:	d102      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006e54:	4b0c      	ldr	r3, [pc, #48]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e58:	e1b5      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e5e:	e1b2      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e60:	4b07      	ldr	r3, [pc, #28]	@ (8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e6c:	d102      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006e6e:	4b07      	ldr	r3, [pc, #28]	@ (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e72:	e1a8      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e78:	e1a5      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e7e:	e1a2      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e80:	58024400 	.word	0x58024400
 8006e84:	03d09000 	.word	0x03d09000
 8006e88:	003d0900 	.word	0x003d0900
 8006e8c:	017d7840 	.word	0x017d7840
 8006e90:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e98:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	d173      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006ea0:	4b9c      	ldr	r3, [pc, #624]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ea8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eb0:	d02f      	beq.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eb8:	d863      	bhi.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d004      	beq.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec6:	d012      	beq.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006ec8:	e05b      	b.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006eca:	4b92      	ldr	r3, [pc, #584]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ed2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ed6:	d107      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ed8:	f107 0318 	add.w	r3, r7, #24
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 f991 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ee6:	e16e      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eec:	e16b      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006eee:	4b89      	ldr	r3, [pc, #548]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ef6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006efa:	d107      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006efc:	f107 030c 	add.w	r3, r7, #12
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fad3 	bl	80074ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f0a:	e15c      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f10:	e159      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f12:	4b80      	ldr	r3, [pc, #512]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f1c:	4b7d      	ldr	r3, [pc, #500]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d10c      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d109      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f2e:	4b79      	ldr	r3, [pc, #484]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	08db      	lsrs	r3, r3, #3
 8006f34:	f003 0303 	and.w	r3, r3, #3
 8006f38:	4a77      	ldr	r2, [pc, #476]	@ (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f40:	e01e      	b.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f42:	4b74      	ldr	r3, [pc, #464]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f4e:	d106      	bne.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f56:	d102      	bne.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f58:	4b70      	ldr	r3, [pc, #448]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f5c:	e010      	b.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f5e:	4b6d      	ldr	r3, [pc, #436]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f6a:	d106      	bne.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f72:	d102      	bne.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f74:	4b6a      	ldr	r3, [pc, #424]	@ (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f78:	e002      	b.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006f7e:	e122      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f80:	e121      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f86:	e11e      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f8c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006f90:	430b      	orrs	r3, r1
 8006f92:	d133      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006f94:	4b5f      	ldr	r3, [pc, #380]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d004      	beq.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006faa:	d012      	beq.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006fac:	e023      	b.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fae:	4b59      	ldr	r3, [pc, #356]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fba:	d107      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 fbc7 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fca:	e0fc      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fd0:	e0f9      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fd2:	4b50      	ldr	r3, [pc, #320]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fde:	d107      	bne.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fe0:	f107 0318 	add.w	r3, r7, #24
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f000 f90d 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fee:	e0ea      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ff4:	e0e7      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ffa:	e0e4      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007000:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007004:	430b      	orrs	r3, r1
 8007006:	f040 808d 	bne.w	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800700a:	4b42      	ldr	r3, [pc, #264]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800700c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8007012:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007016:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800701a:	d06b      	beq.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800701c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007022:	d874      	bhi.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800702a:	d056      	beq.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800702c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007032:	d86c      	bhi.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007036:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800703a:	d03b      	beq.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800703c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007042:	d864      	bhi.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800704a:	d021      	beq.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800704c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007052:	d85c      	bhi.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007056:	2b00      	cmp	r3, #0
 8007058:	d004      	beq.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800705a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007060:	d004      	beq.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8007062:	e054      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007064:	f000 f8b8 	bl	80071d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007068:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800706a:	e0ac      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800706c:	4b29      	ldr	r3, [pc, #164]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007074:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007078:	d107      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800707a:	f107 0318 	add.w	r3, r7, #24
 800707e:	4618      	mov	r0, r3
 8007080:	f000 f8c0 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007088:	e09d      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800708e:	e09a      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007090:	4b20      	ldr	r3, [pc, #128]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800709c:	d107      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800709e:	f107 030c 	add.w	r3, r7, #12
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fa02 	bl	80074ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ac:	e08b      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070b2:	e088      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070b4:	4b17      	ldr	r3, [pc, #92]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d109      	bne.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070c0:	4b14      	ldr	r3, [pc, #80]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	08db      	lsrs	r3, r3, #3
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	4a13      	ldr	r2, [pc, #76]	@ (8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80070cc:	fa22 f303 	lsr.w	r3, r2, r3
 80070d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070d2:	e078      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070d8:	e075      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80070da:	4b0e      	ldr	r3, [pc, #56]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070e6:	d102      	bne.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80070e8:	4b0c      	ldr	r3, [pc, #48]	@ (800711c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80070ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ec:	e06b      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f2:	e068      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80070f4:	4b07      	ldr	r3, [pc, #28]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007100:	d102      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007102:	4b07      	ldr	r3, [pc, #28]	@ (8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007106:	e05e      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007108:	2300      	movs	r3, #0
 800710a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800710c:	e05b      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800710e:	2300      	movs	r3, #0
 8007110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007112:	e058      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007114:	58024400 	.word	0x58024400
 8007118:	03d09000 	.word	0x03d09000
 800711c:	003d0900 	.word	0x003d0900
 8007120:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007128:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800712c:	430b      	orrs	r3, r1
 800712e:	d148      	bne.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007130:	4b27      	ldr	r3, [pc, #156]	@ (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007134:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007138:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007140:	d02a      	beq.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8007142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007148:	d838      	bhi.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714c:	2b00      	cmp	r3, #0
 800714e:	d004      	beq.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007152:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007156:	d00d      	beq.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007158:	e030      	b.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800715a:	4b1d      	ldr	r3, [pc, #116]	@ (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007166:	d102      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007168:	4b1a      	ldr	r3, [pc, #104]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800716a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800716c:	e02b      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800716e:	2300      	movs	r3, #0
 8007170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007172:	e028      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007174:	4b16      	ldr	r3, [pc, #88]	@ (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800717c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007180:	d107      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fae4 	bl	8007754 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800718c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800718e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007190:	e019      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007196:	e016      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007198:	4b0d      	ldr	r3, [pc, #52]	@ (80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071a4:	d107      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071a6:	f107 0318 	add.w	r3, r7, #24
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 f82a 	bl	8007204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071b4:	e007      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ba:	e004      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071c0:	e001      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80071c2:	2300      	movs	r3, #0
 80071c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80071c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3740      	adds	r7, #64	@ 0x40
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	58024400 	.word	0x58024400
 80071d4:	017d7840 	.word	0x017d7840

080071d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80071dc:	f7fd ffec 	bl	80051b8 <HAL_RCC_GetHCLKFreq>
 80071e0:	4602      	mov	r2, r0
 80071e2:	4b06      	ldr	r3, [pc, #24]	@ (80071fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	091b      	lsrs	r3, r3, #4
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	4904      	ldr	r1, [pc, #16]	@ (8007200 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80071ee:	5ccb      	ldrb	r3, [r1, r3]
 80071f0:	f003 031f 	and.w	r3, r3, #31
 80071f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	58024400 	.word	0x58024400
 8007200:	08011720 	.word	0x08011720

08007204 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007204:	b480      	push	{r7}
 8007206:	b089      	sub	sp, #36	@ 0x24
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800720c:	4ba1      	ldr	r3, [pc, #644]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800720e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007216:	4b9f      	ldr	r3, [pc, #636]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721a:	0b1b      	lsrs	r3, r3, #12
 800721c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007220:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007222:	4b9c      	ldr	r3, [pc, #624]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007226:	091b      	lsrs	r3, r3, #4
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800722e:	4b99      	ldr	r3, [pc, #612]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007232:	08db      	lsrs	r3, r3, #3
 8007234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	fb02 f303 	mul.w	r3, r2, r3
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 8111 	beq.w	8007474 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	2b02      	cmp	r3, #2
 8007256:	f000 8083 	beq.w	8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	2b02      	cmp	r3, #2
 800725e:	f200 80a1 	bhi.w	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d056      	beq.n	800731c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800726e:	e099      	b.n	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007270:	4b88      	ldr	r3, [pc, #544]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0320 	and.w	r3, r3, #32
 8007278:	2b00      	cmp	r3, #0
 800727a:	d02d      	beq.n	80072d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800727c:	4b85      	ldr	r3, [pc, #532]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	08db      	lsrs	r3, r3, #3
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	4a84      	ldr	r2, [pc, #528]	@ (8007498 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007288:	fa22 f303 	lsr.w	r3, r2, r3
 800728c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800749c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80072d6:	e087      	b.n	80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80074a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80072e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ea:	4b6a      	ldr	r3, [pc, #424]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800749c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800730e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800731a:	e065      	b.n	80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007326:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800732a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732e:	4b59      	ldr	r3, [pc, #356]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007342:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800749c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800735e:	e043      	b.n	80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80074a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800736e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007372:	4b48      	ldr	r3, [pc, #288]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007382:	ed97 6a03 	vldr	s12, [r7, #12]
 8007386:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800749c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800738a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073a2:	e021      	b.n	80073e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80074a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b6:	4b37      	ldr	r3, [pc, #220]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800749c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80073e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ec:	0a5b      	lsrs	r3, r3, #9
 80073ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80073fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007402:	edd7 6a07 	vldr	s13, [r7, #28]
 8007406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800740a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800740e:	ee17 2a90 	vmov	r2, s15
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007416:	4b1f      	ldr	r3, [pc, #124]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007420:	ee07 3a90 	vmov	s15, r3
 8007424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007428:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800742c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007430:	edd7 6a07 	vldr	s13, [r7, #28]
 8007434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743c:	ee17 2a90 	vmov	r2, s15
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007444:	4b13      	ldr	r3, [pc, #76]	@ (8007494 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007448:	0e1b      	lsrs	r3, r3, #24
 800744a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800745a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800745e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800746a:	ee17 2a90 	vmov	r2, s15
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007472:	e008      	b.n	8007486 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	609a      	str	r2, [r3, #8]
}
 8007486:	bf00      	nop
 8007488:	3724      	adds	r7, #36	@ 0x24
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	58024400 	.word	0x58024400
 8007498:	03d09000 	.word	0x03d09000
 800749c:	46000000 	.word	0x46000000
 80074a0:	4c742400 	.word	0x4c742400
 80074a4:	4a742400 	.word	0x4a742400
 80074a8:	4bbebc20 	.word	0x4bbebc20

080074ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b089      	sub	sp, #36	@ 0x24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074b4:	4ba1      	ldr	r3, [pc, #644]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b8:	f003 0303 	and.w	r3, r3, #3
 80074bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80074be:	4b9f      	ldr	r3, [pc, #636]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c2:	0d1b      	lsrs	r3, r3, #20
 80074c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80074ca:	4b9c      	ldr	r3, [pc, #624]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ce:	0a1b      	lsrs	r3, r3, #8
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80074d6:	4b99      	ldr	r3, [pc, #612]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074da:	08db      	lsrs	r3, r3, #3
 80074dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	fb02 f303 	mul.w	r3, r2, r3
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 8111 	beq.w	800771c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	f000 8083 	beq.w	8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2b02      	cmp	r3, #2
 8007506:	f200 80a1 	bhi.w	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d003      	beq.n	8007518 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d056      	beq.n	80075c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007516:	e099      	b.n	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007518:	4b88      	ldr	r3, [pc, #544]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0320 	and.w	r3, r3, #32
 8007520:	2b00      	cmp	r3, #0
 8007522:	d02d      	beq.n	8007580 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007524:	4b85      	ldr	r3, [pc, #532]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	08db      	lsrs	r3, r3, #3
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	4a84      	ldr	r2, [pc, #528]	@ (8007740 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007530:	fa22 f303 	lsr.w	r3, r2, r3
 8007534:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	ee07 3a90 	vmov	s15, r3
 800753c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800754e:	4b7b      	ldr	r3, [pc, #492]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007562:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800756e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800757e:	e087      	b.n	8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	ee07 3a90 	vmov	s15, r3
 8007586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007748 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800758e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007592:	4b6a      	ldr	r3, [pc, #424]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075c2:	e065      	b.n	8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800774c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d6:	4b59      	ldr	r3, [pc, #356]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007606:	e043      	b.n	8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007612:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007750 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761a:	4b48      	ldr	r3, [pc, #288]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800761c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007622:	ee07 3a90 	vmov	s15, r3
 8007626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762a:	ed97 6a03 	vldr	s12, [r7, #12]
 800762e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800763e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007646:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800764a:	e021      	b.n	8007690 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007656:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800774c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800765a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800765e:	4b37      	ldr	r3, [pc, #220]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007666:	ee07 3a90 	vmov	s15, r3
 800766a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800766e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007672:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800767a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800767e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800768e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007690:	4b2a      	ldr	r3, [pc, #168]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007694:	0a5b      	lsrs	r3, r3, #9
 8007696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076b6:	ee17 2a90 	vmov	r2, s15
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80076be:	4b1f      	ldr	r3, [pc, #124]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c2:	0c1b      	lsrs	r3, r3, #16
 80076c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076c8:	ee07 3a90 	vmov	s15, r3
 80076cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80076dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e4:	ee17 2a90 	vmov	r2, s15
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80076ec:	4b13      	ldr	r3, [pc, #76]	@ (800773c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f0:	0e1b      	lsrs	r3, r3, #24
 80076f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007702:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007706:	edd7 6a07 	vldr	s13, [r7, #28]
 800770a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800770e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007712:	ee17 2a90 	vmov	r2, s15
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800771a:	e008      	b.n	800772e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	609a      	str	r2, [r3, #8]
}
 800772e:	bf00      	nop
 8007730:	3724      	adds	r7, #36	@ 0x24
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	58024400 	.word	0x58024400
 8007740:	03d09000 	.word	0x03d09000
 8007744:	46000000 	.word	0x46000000
 8007748:	4c742400 	.word	0x4c742400
 800774c:	4a742400 	.word	0x4a742400
 8007750:	4bbebc20 	.word	0x4bbebc20

08007754 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007754:	b480      	push	{r7}
 8007756:	b089      	sub	sp, #36	@ 0x24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800775c:	4ba0      	ldr	r3, [pc, #640]	@ (80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800775e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007760:	f003 0303 	and.w	r3, r3, #3
 8007764:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007766:	4b9e      	ldr	r3, [pc, #632]	@ (80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776a:	091b      	lsrs	r3, r3, #4
 800776c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007770:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007772:	4b9b      	ldr	r3, [pc, #620]	@ (80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800777c:	4b98      	ldr	r3, [pc, #608]	@ (80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800777e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007780:	08db      	lsrs	r3, r3, #3
 8007782:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	fb02 f303 	mul.w	r3, r2, r3
 800778c:	ee07 3a90 	vmov	s15, r3
 8007790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007794:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2b00      	cmp	r3, #0
 800779c:	f000 8111 	beq.w	80079c2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	f000 8083 	beq.w	80078ae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	f200 80a1 	bhi.w	80078f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d056      	beq.n	800786a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80077bc:	e099      	b.n	80078f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077be:	4b88      	ldr	r3, [pc, #544]	@ (80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d02d      	beq.n	8007826 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077ca:	4b85      	ldr	r3, [pc, #532]	@ (80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	08db      	lsrs	r3, r3, #3
 80077d0:	f003 0303 	and.w	r3, r3, #3
 80077d4:	4a83      	ldr	r2, [pc, #524]	@ (80079e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80077d6:	fa22 f303 	lsr.w	r3, r2, r3
 80077da:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	ee07 3a90 	vmov	s15, r3
 80077ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077f4:	4b7a      	ldr	r3, [pc, #488]	@ (80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077fc:	ee07 3a90 	vmov	s15, r3
 8007800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007804:	ed97 6a03 	vldr	s12, [r7, #12]
 8007808:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800780c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007810:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007814:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007818:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800781c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007820:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007824:	e087      	b.n	8007936 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	ee07 3a90 	vmov	s15, r3
 800782c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007830:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80079ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007834:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007838:	4b69      	ldr	r3, [pc, #420]	@ (80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800783a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007840:	ee07 3a90 	vmov	s15, r3
 8007844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007848:	ed97 6a03 	vldr	s12, [r7, #12]
 800784c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007858:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800785c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007864:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007868:	e065      	b.n	8007936 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	ee07 3a90 	vmov	s15, r3
 8007870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007874:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800787c:	4b58      	ldr	r3, [pc, #352]	@ (80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800787e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007884:	ee07 3a90 	vmov	s15, r3
 8007888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800788c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007890:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800789c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078ac:	e043      	b.n	8007936 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	ee07 3a90 	vmov	s15, r3
 80078b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80079f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80078bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c0:	4b47      	ldr	r3, [pc, #284]	@ (80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c8:	ee07 3a90 	vmov	s15, r3
 80078cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80078d4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078f0:	e021      	b.n	8007936 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	ee07 3a90 	vmov	s15, r3
 80078f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80079ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007904:	4b36      	ldr	r3, [pc, #216]	@ (80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790c:	ee07 3a90 	vmov	s15, r3
 8007910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007914:	ed97 6a03 	vldr	s12, [r7, #12]
 8007918:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800791c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007920:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007924:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007928:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800792c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007930:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007934:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007936:	4b2a      	ldr	r3, [pc, #168]	@ (80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800793a:	0a5b      	lsrs	r3, r3, #9
 800793c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007940:	ee07 3a90 	vmov	s15, r3
 8007944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007948:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800794c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007950:	edd7 6a07 	vldr	s13, [r7, #28]
 8007954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800795c:	ee17 2a90 	vmov	r2, s15
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007964:	4b1e      	ldr	r3, [pc, #120]	@ (80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007968:	0c1b      	lsrs	r3, r3, #16
 800796a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800796e:	ee07 3a90 	vmov	s15, r3
 8007972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007976:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800797a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800797e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800798a:	ee17 2a90 	vmov	r2, s15
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007992:	4b13      	ldr	r3, [pc, #76]	@ (80079e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007996:	0e1b      	lsrs	r3, r3, #24
 8007998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800799c:	ee07 3a90 	vmov	s15, r3
 80079a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80079b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079b8:	ee17 2a90 	vmov	r2, s15
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80079c0:	e008      	b.n	80079d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	609a      	str	r2, [r3, #8]
}
 80079d4:	bf00      	nop
 80079d6:	3724      	adds	r7, #36	@ 0x24
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	58024400 	.word	0x58024400
 80079e4:	03d09000 	.word	0x03d09000
 80079e8:	46000000 	.word	0x46000000
 80079ec:	4c742400 	.word	0x4c742400
 80079f0:	4a742400 	.word	0x4a742400
 80079f4:	4bbebc20 	.word	0x4bbebc20

080079f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a06:	4b53      	ldr	r3, [pc, #332]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d101      	bne.n	8007a16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e099      	b.n	8007b4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a16:	4b4f      	ldr	r3, [pc, #316]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a4e      	ldr	r2, [pc, #312]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007a1c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a22:	f7f9 fa6f 	bl	8000f04 <HAL_GetTick>
 8007a26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a28:	e008      	b.n	8007a3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a2a:	f7f9 fa6b 	bl	8000f04 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d901      	bls.n	8007a3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e086      	b.n	8007b4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a3c:	4b45      	ldr	r3, [pc, #276]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1f0      	bne.n	8007a2a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a48:	4b42      	ldr	r3, [pc, #264]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a4c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	031b      	lsls	r3, r3, #12
 8007a56:	493f      	ldr	r1, [pc, #252]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	025b      	lsls	r3, r3, #9
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	431a      	orrs	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	041b      	lsls	r3, r3, #16
 8007a7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	061b      	lsls	r3, r3, #24
 8007a88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007a8c:	4931      	ldr	r1, [pc, #196]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a92:	4b30      	ldr	r3, [pc, #192]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	492d      	ldr	r1, [pc, #180]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	f023 0220 	bic.w	r2, r3, #32
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	4928      	ldr	r1, [pc, #160]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007ab6:	4b27      	ldr	r3, [pc, #156]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aba:	4a26      	ldr	r2, [pc, #152]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007abc:	f023 0310 	bic.w	r3, r3, #16
 8007ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ac2:	4b24      	ldr	r3, [pc, #144]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007ac4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ac6:	4b24      	ldr	r3, [pc, #144]	@ (8007b58 <RCCEx_PLL2_Config+0x160>)
 8007ac8:	4013      	ands	r3, r2
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	69d2      	ldr	r2, [r2, #28]
 8007ace:	00d2      	lsls	r2, r2, #3
 8007ad0:	4920      	ldr	r1, [pc, #128]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ada:	4a1e      	ldr	r2, [pc, #120]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007adc:	f043 0310 	orr.w	r3, r3, #16
 8007ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d106      	bne.n	8007af6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aec:	4a19      	ldr	r2, [pc, #100]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007aee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007af2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007af4:	e00f      	b.n	8007b16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d106      	bne.n	8007b0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007afc:	4b15      	ldr	r3, [pc, #84]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b00:	4a14      	ldr	r2, [pc, #80]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007b02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007b08:	e005      	b.n	8007b16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b0a:	4b12      	ldr	r3, [pc, #72]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b0e:	4a11      	ldr	r2, [pc, #68]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007b10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b16:	4b0f      	ldr	r3, [pc, #60]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007b1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b22:	f7f9 f9ef 	bl	8000f04 <HAL_GetTick>
 8007b26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b28:	e008      	b.n	8007b3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b2a:	f7f9 f9eb 	bl	8000f04 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d901      	bls.n	8007b3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e006      	b.n	8007b4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b3c:	4b05      	ldr	r3, [pc, #20]	@ (8007b54 <RCCEx_PLL2_Config+0x15c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d0f0      	beq.n	8007b2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	58024400 	.word	0x58024400
 8007b58:	ffff0007 	.word	0xffff0007

08007b5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b6a:	4b53      	ldr	r3, [pc, #332]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6e:	f003 0303 	and.w	r3, r3, #3
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d101      	bne.n	8007b7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e099      	b.n	8007cae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b7a:	4b4f      	ldr	r3, [pc, #316]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a4e      	ldr	r2, [pc, #312]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007b80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b86:	f7f9 f9bd 	bl	8000f04 <HAL_GetTick>
 8007b8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b8c:	e008      	b.n	8007ba0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b8e:	f7f9 f9b9 	bl	8000f04 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d901      	bls.n	8007ba0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e086      	b.n	8007cae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ba0:	4b45      	ldr	r3, [pc, #276]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1f0      	bne.n	8007b8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007bac:	4b42      	ldr	r3, [pc, #264]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	051b      	lsls	r3, r3, #20
 8007bba:	493f      	ldr	r1, [pc, #252]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	628b      	str	r3, [r1, #40]	@ 0x28
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	025b      	lsls	r3, r3, #9
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	041b      	lsls	r3, r3, #16
 8007bde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007be2:	431a      	orrs	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	061b      	lsls	r3, r3, #24
 8007bec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007bf0:	4931      	ldr	r1, [pc, #196]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007bf6:	4b30      	ldr	r3, [pc, #192]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	492d      	ldr	r1, [pc, #180]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c04:	4313      	orrs	r3, r2
 8007c06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c08:	4b2b      	ldr	r3, [pc, #172]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	4928      	ldr	r1, [pc, #160]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c1a:	4b27      	ldr	r3, [pc, #156]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1e:	4a26      	ldr	r2, [pc, #152]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c26:	4b24      	ldr	r3, [pc, #144]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c2a:	4b24      	ldr	r3, [pc, #144]	@ (8007cbc <RCCEx_PLL3_Config+0x160>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	69d2      	ldr	r2, [r2, #28]
 8007c32:	00d2      	lsls	r2, r2, #3
 8007c34:	4920      	ldr	r1, [pc, #128]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d106      	bne.n	8007c5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c50:	4a19      	ldr	r2, [pc, #100]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007c56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c58:	e00f      	b.n	8007c7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d106      	bne.n	8007c6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c60:	4b15      	ldr	r3, [pc, #84]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c64:	4a14      	ldr	r2, [pc, #80]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c6c:	e005      	b.n	8007c7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c6e:	4b12      	ldr	r3, [pc, #72]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c72:	4a11      	ldr	r2, [pc, #68]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c86:	f7f9 f93d 	bl	8000f04 <HAL_GetTick>
 8007c8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c8c:	e008      	b.n	8007ca0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c8e:	f7f9 f939 	bl	8000f04 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d901      	bls.n	8007ca0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e006      	b.n	8007cae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ca0:	4b05      	ldr	r3, [pc, #20]	@ (8007cb8 <RCCEx_PLL3_Config+0x15c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0f0      	beq.n	8007c8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	58024400 	.word	0x58024400
 8007cbc:	ffff0007 	.word	0xffff0007

08007cc0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d071      	beq.n	8007db6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d106      	bne.n	8007cec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f005 feb8 	bl	800da5c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	f003 0310 	and.w	r3, r3, #16
 8007cfe:	2b10      	cmp	r3, #16
 8007d00:	d050      	beq.n	8007da4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	22ca      	movs	r2, #202	@ 0xca
 8007d08:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2253      	movs	r2, #83	@ 0x53
 8007d10:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fa4a 	bl	80081ac <RTC_EnterInitMode>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d124      	bne.n	8007d6c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6899      	ldr	r1, [r3, #8]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	4b24      	ldr	r3, [pc, #144]	@ (8007dc0 <HAL_RTC_Init+0x100>)
 8007d2e:	400b      	ands	r3, r1
 8007d30:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6899      	ldr	r1, [r3, #8]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	431a      	orrs	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	431a      	orrs	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	0419      	lsls	r1, r3, #16
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68da      	ldr	r2, [r3, #12]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fa56 	bl	8008214 <RTC_ExitInitMode>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d113      	bne.n	8007d9a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 0203 	bic.w	r2, r2, #3
 8007d80:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	69da      	ldr	r2, [r3, #28]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	22ff      	movs	r2, #255	@ 0xff
 8007da0:	625a      	str	r2, [r3, #36]	@ 0x24
 8007da2:	e001      	b.n	8007da8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d103      	bne.n	8007db6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	ff8fffbf 	.word	0xff8fffbf

08007dc4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007dc4:	b590      	push	{r4, r7, lr}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <HAL_RTC_SetTime+0x1a>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e089      	b.n	8007ef2 <HAL_RTC_SetTime+0x12e>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2202      	movs	r2, #2
 8007dea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	22ca      	movs	r2, #202	@ 0xca
 8007df4:	625a      	str	r2, [r3, #36]	@ 0x24
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2253      	movs	r2, #83	@ 0x53
 8007dfc:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f000 f9d4 	bl	80081ac <RTC_EnterInitMode>
 8007e04:	4603      	mov	r3, r0
 8007e06:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007e08:	7cfb      	ldrb	r3, [r7, #19]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d161      	bne.n	8007ed2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d126      	bne.n	8007e62 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d102      	bne.n	8007e28 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	2200      	movs	r2, #0
 8007e26:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 fa2f 	bl	8008290 <RTC_ByteToBcd2>
 8007e32:	4603      	mov	r3, r0
 8007e34:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	785b      	ldrb	r3, [r3, #1]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fa28 	bl	8008290 <RTC_ByteToBcd2>
 8007e40:	4603      	mov	r3, r0
 8007e42:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007e44:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	789b      	ldrb	r3, [r3, #2]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fa20 	bl	8008290 <RTC_ByteToBcd2>
 8007e50:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007e52:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	78db      	ldrb	r3, [r3, #3]
 8007e5a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]
 8007e60:	e018      	b.n	8007e94 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2200      	movs	r2, #0
 8007e74:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	785b      	ldrb	r3, [r3, #1]
 8007e80:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007e82:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007e88:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	78db      	ldrb	r3, [r3, #3]
 8007e8e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007e90:	4313      	orrs	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	6979      	ldr	r1, [r7, #20]
 8007e9a:	4b18      	ldr	r3, [pc, #96]	@ (8007efc <HAL_RTC_SetTime+0x138>)
 8007e9c:	400b      	ands	r3, r1
 8007e9e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689a      	ldr	r2, [r3, #8]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007eae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6899      	ldr	r1, [r3, #8]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	68da      	ldr	r2, [r3, #12]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 f9a3 	bl	8008214 <RTC_ExitInitMode>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	22ff      	movs	r2, #255	@ 0xff
 8007ed8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007eda:	7cfb      	ldrb	r3, [r7, #19]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d103      	bne.n	8007ee8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007ef0:	7cfb      	ldrb	r3, [r7, #19]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd90      	pop	{r4, r7, pc}
 8007efa:	bf00      	nop
 8007efc:	007f7f7f 	.word	0x007f7f7f

08007f00 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	4b22      	ldr	r3, [pc, #136]	@ (8007fb4 <HAL_RTC_GetTime+0xb4>)
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	0c1b      	lsrs	r3, r3, #16
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	0a1b      	lsrs	r3, r3, #8
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	0d9b      	lsrs	r3, r3, #22
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d11a      	bne.n	8007faa <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 f9a9 	bl	80082d0 <RTC_Bcd2ToByte>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	461a      	mov	r2, r3
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	785b      	ldrb	r3, [r3, #1]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 f9a0 	bl	80082d0 <RTC_Bcd2ToByte>
 8007f90:	4603      	mov	r3, r0
 8007f92:	461a      	mov	r2, r3
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	789b      	ldrb	r3, [r3, #2]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 f997 	bl	80082d0 <RTC_Bcd2ToByte>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	007f7f7f 	.word	0x007f7f7f

08007fb8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007fb8:	b590      	push	{r4, r7, lr}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d101      	bne.n	8007fd2 <HAL_RTC_SetDate+0x1a>
 8007fce:	2302      	movs	r3, #2
 8007fd0:	e073      	b.n	80080ba <HAL_RTC_SetDate+0x102>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10e      	bne.n	8008006 <HAL_RTC_SetDate+0x4e>
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	f003 0310 	and.w	r3, r3, #16
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d008      	beq.n	8008006 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	785b      	ldrb	r3, [r3, #1]
 8007ff8:	f023 0310 	bic.w	r3, r3, #16
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	330a      	adds	r3, #10
 8008000:	b2da      	uxtb	r2, r3
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d11c      	bne.n	8008046 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	78db      	ldrb	r3, [r3, #3]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 f93d 	bl	8008290 <RTC_ByteToBcd2>
 8008016:	4603      	mov	r3, r0
 8008018:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	785b      	ldrb	r3, [r3, #1]
 800801e:	4618      	mov	r0, r3
 8008020:	f000 f936 	bl	8008290 <RTC_ByteToBcd2>
 8008024:	4603      	mov	r3, r0
 8008026:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008028:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	789b      	ldrb	r3, [r3, #2]
 800802e:	4618      	mov	r0, r3
 8008030:	f000 f92e 	bl	8008290 <RTC_ByteToBcd2>
 8008034:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008036:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008040:	4313      	orrs	r3, r2
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	e00e      	b.n	8008064 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	78db      	ldrb	r3, [r3, #3]
 800804a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	785b      	ldrb	r3, [r3, #1]
 8008050:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008052:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008058:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008060:	4313      	orrs	r3, r2
 8008062:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	22ca      	movs	r2, #202	@ 0xca
 800806a:	625a      	str	r2, [r3, #36]	@ 0x24
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2253      	movs	r2, #83	@ 0x53
 8008072:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 f899 	bl	80081ac <RTC_EnterInitMode>
 800807a:	4603      	mov	r3, r0
 800807c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800807e:	7cfb      	ldrb	r3, [r7, #19]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	6979      	ldr	r1, [r7, #20]
 800808a:	4b0e      	ldr	r3, [pc, #56]	@ (80080c4 <HAL_RTC_SetDate+0x10c>)
 800808c:	400b      	ands	r3, r1
 800808e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 f8bf 	bl	8008214 <RTC_ExitInitMode>
 8008096:	4603      	mov	r3, r0
 8008098:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	22ff      	movs	r2, #255	@ 0xff
 80080a0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80080a2:	7cfb      	ldrb	r3, [r7, #19]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d103      	bne.n	80080b0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80080b8:	7cfb      	ldrb	r3, [r7, #19]


}
 80080ba:	4618      	mov	r0, r3
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd90      	pop	{r4, r7, pc}
 80080c2:	bf00      	nop
 80080c4:	00ffff3f 	.word	0x00ffff3f

080080c8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685a      	ldr	r2, [r3, #4]
 80080da:	4b21      	ldr	r3, [pc, #132]	@ (8008160 <HAL_RTC_GetDate+0x98>)
 80080dc:	4013      	ands	r3, r2
 80080de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	0c1b      	lsrs	r3, r3, #16
 80080e4:	b2da      	uxtb	r2, r3
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	0a1b      	lsrs	r3, r3, #8
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	f003 031f 	and.w	r3, r3, #31
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008102:	b2da      	uxtb	r2, r3
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	0b5b      	lsrs	r3, r3, #13
 800810c:	b2db      	uxtb	r3, r3
 800810e:	f003 0307 	and.w	r3, r3, #7
 8008112:	b2da      	uxtb	r2, r3
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d11a      	bne.n	8008154 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	78db      	ldrb	r3, [r3, #3]
 8008122:	4618      	mov	r0, r3
 8008124:	f000 f8d4 	bl	80082d0 <RTC_Bcd2ToByte>
 8008128:	4603      	mov	r3, r0
 800812a:	461a      	mov	r2, r3
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	785b      	ldrb	r3, [r3, #1]
 8008134:	4618      	mov	r0, r3
 8008136:	f000 f8cb 	bl	80082d0 <RTC_Bcd2ToByte>
 800813a:	4603      	mov	r3, r0
 800813c:	461a      	mov	r2, r3
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	789b      	ldrb	r3, [r3, #2]
 8008146:	4618      	mov	r0, r3
 8008148:	f000 f8c2 	bl	80082d0 <RTC_Bcd2ToByte>
 800814c:	4603      	mov	r3, r0
 800814e:	461a      	mov	r2, r3
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3718      	adds	r7, #24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	00ffff3f 	.word	0x00ffff3f

08008164 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a0d      	ldr	r2, [pc, #52]	@ (80081a8 <HAL_RTC_WaitForSynchro+0x44>)
 8008172:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8008174:	f7f8 fec6 	bl	8000f04 <HAL_GetTick>
 8008178:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800817a:	e009      	b.n	8008190 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800817c:	f7f8 fec2 	bl	8000f04 <HAL_GetTick>
 8008180:	4602      	mov	r2, r0
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800818a:	d901      	bls.n	8008190 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e007      	b.n	80081a0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0ee      	beq.n	800817c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	0003ff5f 	.word	0x0003ff5f

080081ac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d120      	bne.n	8008208 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f04f 32ff 	mov.w	r2, #4294967295
 80081ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80081d0:	f7f8 fe98 	bl	8000f04 <HAL_GetTick>
 80081d4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80081d6:	e00d      	b.n	80081f4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80081d8:	f7f8 fe94 	bl	8000f04 <HAL_GetTick>
 80081dc:	4602      	mov	r2, r0
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80081e6:	d905      	bls.n	80081f4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2203      	movs	r2, #3
 80081f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d102      	bne.n	8008208 <RTC_EnterInitMode+0x5c>
 8008202:	7bfb      	ldrb	r3, [r7, #15]
 8008204:	2b03      	cmp	r3, #3
 8008206:	d1e7      	bne.n	80081d8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008220:	4b1a      	ldr	r3, [pc, #104]	@ (800828c <RTC_ExitInitMode+0x78>)
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	4a19      	ldr	r2, [pc, #100]	@ (800828c <RTC_ExitInitMode+0x78>)
 8008226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800822a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800822c:	4b17      	ldr	r3, [pc, #92]	@ (800828c <RTC_ExitInitMode+0x78>)
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f003 0320 	and.w	r3, r3, #32
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10c      	bne.n	8008252 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7ff ff93 	bl	8008164 <HAL_RTC_WaitForSynchro>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d01e      	beq.n	8008282 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2203      	movs	r2, #3
 8008248:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	73fb      	strb	r3, [r7, #15]
 8008250:	e017      	b.n	8008282 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008252:	4b0e      	ldr	r3, [pc, #56]	@ (800828c <RTC_ExitInitMode+0x78>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	4a0d      	ldr	r2, [pc, #52]	@ (800828c <RTC_ExitInitMode+0x78>)
 8008258:	f023 0320 	bic.w	r3, r3, #32
 800825c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7ff ff80 	bl	8008164 <HAL_RTC_WaitForSynchro>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d005      	beq.n	8008276 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2203      	movs	r2, #3
 800826e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008276:	4b05      	ldr	r3, [pc, #20]	@ (800828c <RTC_ExitInitMode+0x78>)
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	4a04      	ldr	r2, [pc, #16]	@ (800828c <RTC_ExitInitMode+0x78>)
 800827c:	f043 0320 	orr.w	r3, r3, #32
 8008280:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008282:	7bfb      	ldrb	r3, [r7, #15]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	58004000 	.word	0x58004000

08008290 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80082a2:	e005      	b.n	80082b0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	3301      	adds	r3, #1
 80082a8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80082aa:	7afb      	ldrb	r3, [r7, #11]
 80082ac:	3b0a      	subs	r3, #10
 80082ae:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 80082b0:	7afb      	ldrb	r3, [r7, #11]
 80082b2:	2b09      	cmp	r3, #9
 80082b4:	d8f6      	bhi.n	80082a4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	011b      	lsls	r3, r3, #4
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	b2db      	uxtb	r3, r3
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	091b      	lsrs	r3, r3, #4
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	461a      	mov	r2, r3
 80082e2:	0092      	lsls	r2, r2, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	005b      	lsls	r3, r3, #1
 80082e8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	4413      	add	r3, r2
 80082f6:	b2db      	uxtb	r3, r3
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08a      	sub	sp, #40	@ 0x28
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e075      	b.n	8008402 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d105      	bne.n	800832e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f90b 	bl	8008544 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2204      	movs	r2, #4
 8008332:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 f868 	bl	800840c <HAL_SD_InitCard>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e05d      	b.n	8008402 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008346:	f107 0308 	add.w	r3, r7, #8
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fdbf 	bl	8008ed0 <HAL_SD_GetCardStatus>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e052      	b.n	8008402 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800835c:	7e3b      	ldrb	r3, [r7, #24]
 800835e:	b2db      	uxtb	r3, r3
 8008360:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008362:	7e7b      	ldrb	r3, [r7, #25]
 8008364:	b2db      	uxtb	r3, r3
 8008366:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836c:	2b01      	cmp	r3, #1
 800836e:	d10a      	bne.n	8008386 <HAL_SD_Init+0x82>
 8008370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008372:	2b00      	cmp	r3, #0
 8008374:	d102      	bne.n	800837c <HAL_SD_Init+0x78>
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d004      	beq.n	8008386 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008382:	659a      	str	r2, [r3, #88]	@ 0x58
 8008384:	e00b      	b.n	800839e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838a:	2b01      	cmp	r3, #1
 800838c:	d104      	bne.n	8008398 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008394:	659a      	str	r2, [r3, #88]	@ 0x58
 8008396:	e002      	b.n	800839e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fe7d 	bl	80090a4 <HAL_SD_ConfigWideBusOperation>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e026      	b.n	8008402 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80083b4:	f7f8 fda6 	bl	8000f04 <HAL_GetTick>
 80083b8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80083ba:	e011      	b.n	80083e0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80083bc:	f7f8 fda2 	bl	8000f04 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ca:	d109      	bne.n	80083e0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80083d2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e010      	b.n	8008402 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f001 f82d 	bl	8009440 <HAL_SD_GetCardState>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	d1e7      	bne.n	80083bc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3728      	adds	r7, #40	@ 0x28
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800840c:	b590      	push	{r4, r7, lr}
 800840e:	b08d      	sub	sp, #52	@ 0x34
 8008410:	af02      	add	r7, sp, #8
 8008412:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008414:	2300      	movs	r3, #0
 8008416:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008418:	2300      	movs	r3, #0
 800841a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008420:	2300      	movs	r3, #0
 8008422:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008424:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008428:	f04f 0100 	mov.w	r1, #0
 800842c:	f7fe f954 	bl	80066d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008430:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	d109      	bne.n	800844c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008446:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e070      	b.n	800852e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800844c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844e:	0a1b      	lsrs	r3, r3, #8
 8008450:	4a39      	ldr	r2, [pc, #228]	@ (8008538 <HAL_SD_InitCard+0x12c>)
 8008452:	fba2 2303 	umull	r2, r3, r2, r3
 8008456:	091b      	lsrs	r3, r3, #4
 8008458:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681c      	ldr	r4, [r3, #0]
 800845e:	466a      	mov	r2, sp
 8008460:	f107 0318 	add.w	r3, r7, #24
 8008464:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008468:	e882 0003 	stmia.w	r2, {r0, r1}
 800846c:	f107 030c 	add.w	r3, r7, #12
 8008470:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008472:	4620      	mov	r0, r4
 8008474:	f002 fa2e 	bl	800a8d4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4618      	mov	r0, r3
 800847e:	f002 fa71 	bl	800a964 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d005      	beq.n	8008494 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800848e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008492:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8008494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008496:	2b00      	cmp	r3, #0
 8008498:	d007      	beq.n	80084aa <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800849a:	4a28      	ldr	r2, [pc, #160]	@ (800853c <HAL_SD_InitCard+0x130>)
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a2:	3301      	adds	r3, #1
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7f8 fd39 	bl	8000f1c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f001 f8b6 	bl	800961c <SD_PowerON>
 80084b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00b      	beq.n	80084d0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	431a      	orrs	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e02e      	b.n	800852e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 ffd5 	bl	8009480 <SD_InitCard>
 80084d6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00b      	beq.n	80084f6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	431a      	orrs	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e01b      	b.n	800852e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80084fe:	4618      	mov	r0, r3
 8008500:	f002 fac6 	bl	800aa90 <SDMMC_CmdBlockLength>
 8008504:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00f      	beq.n	800852c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a0b      	ldr	r2, [pc, #44]	@ (8008540 <HAL_SD_InitCard+0x134>)
 8008512:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	431a      	orrs	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e000      	b.n	800852e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	372c      	adds	r7, #44	@ 0x2c
 8008532:	46bd      	mov	sp, r7
 8008534:	bd90      	pop	{r4, r7, pc}
 8008536:	bf00      	nop
 8008538:	014f8b59 	.word	0x014f8b59
 800853c:	00012110 	.word	0x00012110
 8008540:	1fe00fff 	.word	0x1fe00fff

08008544 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b092      	sub	sp, #72	@ 0x48
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008566:	f7f8 fccd 	bl	8000f04 <HAL_GetTick>
 800856a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d107      	bne.n	800858a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800857e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e167      	b.n	800885a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b01      	cmp	r3, #1
 8008594:	f040 815a 	bne.w	800884c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800859e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	441a      	add	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d907      	bls.n	80085bc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085b0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e14e      	b.n	800885a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2203      	movs	r2, #3
 80085c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2200      	movs	r2, #0
 80085ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d002      	beq.n	80085da <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80085d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d6:	025b      	lsls	r3, r3, #9
 80085d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085da:	f04f 33ff 	mov.w	r3, #4294967295
 80085de:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	025b      	lsls	r3, r3, #9
 80085e4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80085e6:	2390      	movs	r3, #144	@ 0x90
 80085e8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80085ea:	2302      	movs	r3, #2
 80085ec:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80085f2:	2300      	movs	r3, #0
 80085f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f107 0214 	add.w	r2, r7, #20
 80085fe:	4611      	mov	r1, r2
 8008600:	4618      	mov	r0, r3
 8008602:	f002 fa19 	bl	800aa38 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68da      	ldr	r2, [r3, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008614:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d90a      	bls.n	8008632 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2202      	movs	r2, #2
 8008620:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008628:	4618      	mov	r0, r3
 800862a:	f002 fa77 	bl	800ab1c <SDMMC_CmdReadMultiBlock>
 800862e:	6478      	str	r0, [r7, #68]	@ 0x44
 8008630:	e009      	b.n	8008646 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2201      	movs	r2, #1
 8008636:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800863e:	4618      	mov	r0, r3
 8008640:	f002 fa49 	bl	800aad6 <SDMMC_CmdReadSingleBlock>
 8008644:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008648:	2b00      	cmp	r3, #0
 800864a:	d012      	beq.n	8008672 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a84      	ldr	r2, [pc, #528]	@ (8008864 <HAL_SD_ReadBlocks+0x30c>)
 8008652:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800865a:	431a      	orrs	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e0f3      	b.n	800885a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008676:	e058      	b.n	800872a <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800867e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d033      	beq.n	80086ee <HAL_SD_ReadBlocks+0x196>
 8008686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008688:	2b1f      	cmp	r3, #31
 800868a:	d930      	bls.n	80086ee <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 800868c:	2300      	movs	r3, #0
 800868e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008690:	e027      	b.n	80086e2 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f002 f946 	bl	800a928 <SDMMC_ReadFIFO>
 800869c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800869e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80086a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a8:	3301      	adds	r3, #1
 80086aa:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80086ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ae:	0a1b      	lsrs	r3, r3, #8
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80086b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b8:	3301      	adds	r3, #1
 80086ba:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80086bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086be:	0c1b      	lsrs	r3, r3, #16
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80086c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c8:	3301      	adds	r3, #1
 80086ca:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80086cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ce:	0e1b      	lsrs	r3, r3, #24
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80086d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d8:	3301      	adds	r3, #1
 80086da:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 80086dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086de:	3301      	adds	r3, #1
 80086e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80086e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086e4:	2b07      	cmp	r3, #7
 80086e6:	d9d4      	bls.n	8008692 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80086e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ea:	3b20      	subs	r3, #32
 80086ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80086ee:	f7f8 fc09 	bl	8000f04 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d902      	bls.n	8008704 <HAL_SD_ReadBlocks+0x1ac>
 80086fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008700:	2b00      	cmp	r3, #0
 8008702:	d112      	bne.n	800872a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a56      	ldr	r2, [pc, #344]	@ (8008864 <HAL_SD_ReadBlocks+0x30c>)
 800870a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008710:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e097      	b.n	800885a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008730:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008734:	2b00      	cmp	r3, #0
 8008736:	d09f      	beq.n	8008678 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008746:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800874e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008752:	2b00      	cmp	r3, #0
 8008754:	d022      	beq.n	800879c <HAL_SD_ReadBlocks+0x244>
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d91f      	bls.n	800879c <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008760:	2b03      	cmp	r3, #3
 8008762:	d01b      	beq.n	800879c <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4618      	mov	r0, r3
 800876a:	f002 fa41 	bl	800abf0 <SDMMC_CmdStopTransfer>
 800876e:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008772:	2b00      	cmp	r3, #0
 8008774:	d012      	beq.n	800879c <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a3a      	ldr	r2, [pc, #232]	@ (8008864 <HAL_SD_ReadBlocks+0x30c>)
 800877c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008784:	431a      	orrs	r2, r3
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e05e      	b.n	800885a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087a2:	f003 0308 	and.w	r3, r3, #8
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d012      	beq.n	80087d0 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a2d      	ldr	r2, [pc, #180]	@ (8008864 <HAL_SD_ReadBlocks+0x30c>)
 80087b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087b6:	f043 0208 	orr.w	r2, r3, #8
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e044      	b.n	800885a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d012      	beq.n	8008804 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a20      	ldr	r2, [pc, #128]	@ (8008864 <HAL_SD_ReadBlocks+0x30c>)
 80087e4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087ea:	f043 0202 	orr.w	r2, r3, #2
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e02a      	b.n	800885a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b00      	cmp	r3, #0
 8008810:	d012      	beq.n	8008838 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a13      	ldr	r2, [pc, #76]	@ (8008864 <HAL_SD_ReadBlocks+0x30c>)
 8008818:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800881e:	f043 0220 	orr.w	r2, r3, #32
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2201      	movs	r2, #1
 800882a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e010      	b.n	800885a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a0a      	ldr	r2, [pc, #40]	@ (8008868 <HAL_SD_ReadBlocks+0x310>)
 800883e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	e006      	b.n	800885a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008850:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
  }
}
 800885a:	4618      	mov	r0, r3
 800885c:	3748      	adds	r7, #72	@ 0x48
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	1fe00fff 	.word	0x1fe00fff
 8008868:	18000f3a 	.word	0x18000f3a

0800886c <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b092      	sub	sp, #72	@ 0x48
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800887a:	f7f8 fb43 	bl	8000f04 <HAL_GetTick>
 800887e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d107      	bne.n	800889e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008892:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e16b      	b.n	8008b76 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	f040 815e 	bne.w	8008b68 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80088b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	441a      	add	r2, r3
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088bc:	429a      	cmp	r2, r3
 80088be:	d907      	bls.n	80088d0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e152      	b.n	8008b76 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2203      	movs	r2, #3
 80088d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2200      	movs	r2, #0
 80088de:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d002      	beq.n	80088ee <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80088e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ea:	025b      	lsls	r3, r3, #9
 80088ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80088ee:	f04f 33ff 	mov.w	r3, #4294967295
 80088f2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	025b      	lsls	r3, r3, #9
 80088f8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80088fa:	2390      	movs	r3, #144	@ 0x90
 80088fc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80088fe:	2300      	movs	r3, #0
 8008900:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008902:	2300      	movs	r3, #0
 8008904:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008906:	2300      	movs	r3, #0
 8008908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f107 0218 	add.w	r2, r7, #24
 8008912:	4611      	mov	r1, r2
 8008914:	4618      	mov	r0, r3
 8008916:	f002 f88f 	bl	800aa38 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68da      	ldr	r2, [r3, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008928:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d90a      	bls.n	8008946 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2220      	movs	r2, #32
 8008934:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800893c:	4618      	mov	r0, r3
 800893e:	f002 f933 	bl	800aba8 <SDMMC_CmdWriteMultiBlock>
 8008942:	6478      	str	r0, [r7, #68]	@ 0x44
 8008944:	e009      	b.n	800895a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2210      	movs	r2, #16
 800894a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008952:	4618      	mov	r0, r3
 8008954:	f002 f905 	bl	800ab62 <SDMMC_CmdWriteSingleBlock>
 8008958:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800895a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800895c:	2b00      	cmp	r3, #0
 800895e:	d012      	beq.n	8008986 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a86      	ldr	r2, [pc, #536]	@ (8008b80 <HAL_SD_WriteBlocks+0x314>)
 8008966:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800896c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800896e:	431a      	orrs	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e0f7      	b.n	8008b76 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800898a:	e05c      	b.n	8008a46 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008992:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d037      	beq.n	8008a0a <HAL_SD_WriteBlocks+0x19e>
 800899a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800899c:	2b1f      	cmp	r3, #31
 800899e:	d934      	bls.n	8008a0a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80089a0:	2300      	movs	r3, #0
 80089a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80089a4:	e02b      	b.n	80089fe <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80089a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80089ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ae:	3301      	adds	r3, #1
 80089b0:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80089b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	021a      	lsls	r2, r3, #8
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80089be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c0:	3301      	adds	r3, #1
 80089c2:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80089c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	041a      	lsls	r2, r3, #16
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80089d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d2:	3301      	adds	r3, #1
 80089d4:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80089d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	061a      	lsls	r2, r3, #24
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	4313      	orrs	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80089e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e4:	3301      	adds	r3, #1
 80089e6:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f107 0214 	add.w	r2, r7, #20
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f001 ffa5 	bl	800a942 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80089f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089fa:	3301      	adds	r3, #1
 80089fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80089fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a00:	2b07      	cmp	r3, #7
 8008a02:	d9d0      	bls.n	80089a6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a06:	3b20      	subs	r3, #32
 8008a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008a0a:	f7f8 fa7b 	bl	8000f04 <HAL_GetTick>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d902      	bls.n	8008a20 <HAL_SD_WriteBlocks+0x1b4>
 8008a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d112      	bne.n	8008a46 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a56      	ldr	r2, [pc, #344]	@ (8008b80 <HAL_SD_WriteBlocks+0x314>)
 8008a26:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e097      	b.n	8008b76 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a4c:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d09b      	beq.n	800898c <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a62:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d022      	beq.n	8008ab8 <HAL_SD_WriteBlocks+0x24c>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d91f      	bls.n	8008ab8 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d01b      	beq.n	8008ab8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f002 f8b3 	bl	800abf0 <SDMMC_CmdStopTransfer>
 8008a8a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d012      	beq.n	8008ab8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a3a      	ldr	r2, [pc, #232]	@ (8008b80 <HAL_SD_WriteBlocks+0x314>)
 8008a98:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e05e      	b.n	8008b76 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008abe:	f003 0308 	and.w	r3, r3, #8
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d012      	beq.n	8008aec <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a2d      	ldr	r2, [pc, #180]	@ (8008b80 <HAL_SD_WriteBlocks+0x314>)
 8008acc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad2:	f043 0208 	orr.w	r2, r3, #8
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e044      	b.n	8008b76 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d012      	beq.n	8008b20 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a20      	ldr	r2, [pc, #128]	@ (8008b80 <HAL_SD_WriteBlocks+0x314>)
 8008b00:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b06:	f043 0202 	orr.w	r2, r3, #2
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e02a      	b.n	8008b76 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b26:	f003 0310 	and.w	r3, r3, #16
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d012      	beq.n	8008b54 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a13      	ldr	r2, [pc, #76]	@ (8008b80 <HAL_SD_WriteBlocks+0x314>)
 8008b34:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b3a:	f043 0210 	orr.w	r2, r3, #16
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e010      	b.n	8008b76 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a0a      	ldr	r2, [pc, #40]	@ (8008b84 <HAL_SD_WriteBlocks+0x318>)
 8008b5a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	e006      	b.n	8008b76 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b6c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
  }
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3748      	adds	r7, #72	@ 0x48
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	1fe00fff 	.word	0x1fe00fff
 8008b84:	18000f3a 	.word	0x18000f3a

08008b88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b96:	0f9b      	lsrs	r3, r3, #30
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ba2:	0e9b      	lsrs	r3, r3, #26
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	f003 030f 	and.w	r3, r3, #15
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bb4:	0e1b      	lsrs	r3, r3, #24
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	f003 0303 	and.w	r3, r3, #3
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bc6:	0c1b      	lsrs	r3, r3, #16
 8008bc8:	b2da      	uxtb	r2, r3
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bd2:	0a1b      	lsrs	r3, r3, #8
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008be8:	0d1b      	lsrs	r3, r3, #20
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bf4:	0c1b      	lsrs	r3, r3, #16
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	f003 030f 	and.w	r3, r3, #15
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c06:	0bdb      	lsrs	r3, r3, #15
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c18:	0b9b      	lsrs	r3, r3, #14
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c2a:	0b5b      	lsrs	r3, r3, #13
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c3c:	0b1b      	lsrs	r3, r3, #12
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d163      	bne.n	8008d20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c5c:	009a      	lsls	r2, r3, #2
 8008c5e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008c62:	4013      	ands	r3, r2
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008c68:	0f92      	lsrs	r2, r2, #30
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c74:	0edb      	lsrs	r3, r3, #27
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	f003 0307 	and.w	r3, r3, #7
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c86:	0e1b      	lsrs	r3, r3, #24
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	f003 0307 	and.w	r3, r3, #7
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c98:	0d5b      	lsrs	r3, r3, #21
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	f003 0307 	and.w	r3, r3, #7
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008caa:	0c9b      	lsrs	r3, r3, #18
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cbc:	0bdb      	lsrs	r3, r3, #15
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	f003 0307 	and.w	r3, r3, #7
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	7e1b      	ldrb	r3, [r3, #24]
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	f003 0307 	and.w	r3, r3, #7
 8008cde:	3302      	adds	r3, #2
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008cea:	fb03 f202 	mul.w	r2, r3, r2
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	7a1b      	ldrb	r3, [r3, #8]
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	f003 030f 	and.w	r3, r3, #15
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	409a      	lsls	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008d0c:	0a52      	lsrs	r2, r2, #9
 8008d0e:	fb03 f202 	mul.w	r2, r3, r2
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8008d1e:	e031      	b.n	8008d84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d11d      	bne.n	8008d64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d2c:	041b      	lsls	r3, r3, #16
 8008d2e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d36:	0c1b      	lsrs	r3, r3, #16
 8008d38:	431a      	orrs	r2, r3
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	3301      	adds	r3, #1
 8008d44:	029a      	lsls	r2, r3, #10
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d58:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	655a      	str	r2, [r3, #84]	@ 0x54
 8008d62:	e00f      	b.n	8008d84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a58      	ldr	r2, [pc, #352]	@ (8008ecc <HAL_SD_GetCardCSD+0x344>)
 8008d6a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e09d      	b.n	8008ec0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d88:	0b9b      	lsrs	r3, r3, #14
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d9a:	09db      	lsrs	r3, r3, #7
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dbc:	0fdb      	lsrs	r3, r3, #31
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dc8:	0f5b      	lsrs	r3, r3, #29
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	f003 0303 	and.w	r3, r3, #3
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dda:	0e9b      	lsrs	r3, r3, #26
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dec:	0d9b      	lsrs	r3, r3, #22
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	f003 030f 	and.w	r3, r3, #15
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dfe:	0d5b      	lsrs	r3, r3, #21
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e1a:	0c1b      	lsrs	r3, r3, #16
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e2e:	0bdb      	lsrs	r3, r3, #15
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e42:	0b9b      	lsrs	r3, r3, #14
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e56:	0b5b      	lsrs	r3, r3, #13
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e6a:	0b1b      	lsrs	r3, r3, #12
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e7e:	0a9b      	lsrs	r3, r3, #10
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e92:	0a1b      	lsrs	r3, r3, #8
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	f003 0303 	and.w	r3, r3, #3
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ea6:	085b      	lsrs	r3, r3, #1
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	1fe00fff 	.word	0x1fe00fff

08008ed0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b094      	sub	sp, #80	@ 0x50
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008eda:	2300      	movs	r3, #0
 8008edc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b03      	cmp	r3, #3
 8008eea:	d101      	bne.n	8008ef0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e0a7      	b.n	8009040 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008ef0:	f107 0308 	add.w	r3, r7, #8
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fc1e 	bl	8009738 <SD_SendSDStatus>
 8008efc:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d011      	beq.n	8008f28 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a4f      	ldr	r2, [pc, #316]	@ (8009048 <HAL_SD_GetCardStatus+0x178>)
 8008f0a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f12:	431a      	orrs	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8008f26:	e070      	b.n	800900a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	099b      	lsrs	r3, r3, #6
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	f003 0303 	and.w	r3, r3, #3
 8008f32:	b2da      	uxtb	r2, r3
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	095b      	lsrs	r3, r3, #5
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	0a1b      	lsrs	r3, r3, #8
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	0e1b      	lsrs	r3, r3, #24
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	061a      	lsls	r2, r3, #24
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	021b      	lsls	r3, r3, #8
 8008f6a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008f6e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	0a1b      	lsrs	r3, r3, #8
 8008f74:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008f78:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	0e1b      	lsrs	r3, r3, #24
 8008f7e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	0a1b      	lsrs	r3, r3, #8
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	0d1b      	lsrs	r3, r3, #20
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	f003 030f 	and.w	r3, r3, #15
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	0c1b      	lsrs	r3, r3, #16
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	0a9b      	lsrs	r3, r3, #10
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	0a1b      	lsrs	r3, r3, #8
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	f003 0303 	and.w	r3, r3, #3
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	091b      	lsrs	r3, r3, #4
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	f003 030f 	and.w	r3, r3, #15
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	f003 030f 	and.w	r3, r3, #15
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	0e1b      	lsrs	r3, r3, #24
 8009004:	b2da      	uxtb	r2, r3
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009012:	4618      	mov	r0, r3
 8009014:	f001 fd3c 	bl	800aa90 <SDMMC_CmdBlockLength>
 8009018:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800901a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00d      	beq.n	800903c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a08      	ldr	r2, [pc, #32]	@ (8009048 <HAL_SD_GetCardStatus+0x178>)
 8009026:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800902c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800903c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8009040:	4618      	mov	r0, r3
 8009042:	3750      	adds	r7, #80	@ 0x50
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	1fe00fff 	.word	0x1fe00fff

0800904c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80090a4:	b590      	push	{r4, r7, lr}
 80090a6:	b08d      	sub	sp, #52	@ 0x34
 80090a8:	af02      	add	r7, sp, #8
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2203      	movs	r2, #3
 80090b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c0:	2b03      	cmp	r3, #3
 80090c2:	d02e      	beq.n	8009122 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090ca:	d106      	bne.n	80090da <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80090d8:	e029      	b.n	800912e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090e0:	d10a      	bne.n	80090f8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fc20 	bl	8009928 <SD_WideBus_Enable>
 80090e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	431a      	orrs	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80090f6:	e01a      	b.n	800912e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10a      	bne.n	8009114 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fc5d 	bl	80099be <SD_WideBus_Disable>
 8009104:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	431a      	orrs	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	635a      	str	r2, [r3, #52]	@ 0x34
 8009112:	e00c      	b.n	800912e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009118:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	635a      	str	r2, [r3, #52]	@ 0x34
 8009120:	e005      	b.n	800912e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009126:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009132:	2b00      	cmp	r3, #0
 8009134:	d007      	beq.n	8009146 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a5f      	ldr	r2, [pc, #380]	@ (80092b8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800913c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009144:	e096      	b.n	8009274 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009146:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800914a:	f04f 0100 	mov.w	r1, #0
 800914e:	f7fd fac3 	bl	80066d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009152:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 8083 	beq.w	8009262 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	695a      	ldr	r2, [r3, #20]
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	4950      	ldr	r1, [pc, #320]	@ (80092bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800917a:	fba1 1303 	umull	r1, r3, r1, r3
 800917e:	0e1b      	lsrs	r3, r3, #24
 8009180:	429a      	cmp	r2, r3
 8009182:	d303      	bcc.n	800918c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	61bb      	str	r3, [r7, #24]
 800918a:	e05a      	b.n	8009242 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009194:	d103      	bne.n	800919e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	61bb      	str	r3, [r7, #24]
 800919c:	e051      	b.n	8009242 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091a6:	d126      	bne.n	80091f6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10e      	bne.n	80091ce <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	4a43      	ldr	r2, [pc, #268]	@ (80092c0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d906      	bls.n	80091c6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	4a40      	ldr	r2, [pc, #256]	@ (80092bc <HAL_SD_ConfigWideBusOperation+0x218>)
 80091bc:	fba2 2303 	umull	r2, r3, r2, r3
 80091c0:	0e5b      	lsrs	r3, r3, #25
 80091c2:	61bb      	str	r3, [r7, #24]
 80091c4:	e03d      	b.n	8009242 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	61bb      	str	r3, [r7, #24]
 80091cc:	e039      	b.n	8009242 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	005b      	lsls	r3, r3, #1
 80091d4:	69fa      	ldr	r2, [r7, #28]
 80091d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091da:	4a39      	ldr	r2, [pc, #228]	@ (80092c0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d906      	bls.n	80091ee <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	4a36      	ldr	r2, [pc, #216]	@ (80092bc <HAL_SD_ConfigWideBusOperation+0x218>)
 80091e4:	fba2 2303 	umull	r2, r3, r2, r3
 80091e8:	0e5b      	lsrs	r3, r3, #25
 80091ea:	61bb      	str	r3, [r7, #24]
 80091ec:	e029      	b.n	8009242 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	61bb      	str	r3, [r7, #24]
 80091f4:	e025      	b.n	8009242 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d10e      	bne.n	800921c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	4a30      	ldr	r2, [pc, #192]	@ (80092c4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d906      	bls.n	8009214 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	4a2c      	ldr	r2, [pc, #176]	@ (80092bc <HAL_SD_ConfigWideBusOperation+0x218>)
 800920a:	fba2 2303 	umull	r2, r3, r2, r3
 800920e:	0e1b      	lsrs	r3, r3, #24
 8009210:	61bb      	str	r3, [r7, #24]
 8009212:	e016      	b.n	8009242 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	61bb      	str	r3, [r7, #24]
 800921a:	e012      	b.n	8009242 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	695b      	ldr	r3, [r3, #20]
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	69fa      	ldr	r2, [r7, #28]
 8009224:	fbb2 f3f3 	udiv	r3, r2, r3
 8009228:	4a26      	ldr	r2, [pc, #152]	@ (80092c4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d906      	bls.n	800923c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	4a22      	ldr	r2, [pc, #136]	@ (80092bc <HAL_SD_ConfigWideBusOperation+0x218>)
 8009232:	fba2 2303 	umull	r2, r3, r2, r3
 8009236:	0e1b      	lsrs	r3, r3, #24
 8009238:	61bb      	str	r3, [r7, #24]
 800923a:	e002      	b.n	8009242 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	695b      	ldr	r3, [r3, #20]
 8009240:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681c      	ldr	r4, [r3, #0]
 8009246:	466a      	mov	r2, sp
 8009248:	f107 0314 	add.w	r3, r7, #20
 800924c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009250:	e882 0003 	stmia.w	r2, {r0, r1}
 8009254:	f107 0308 	add.w	r3, r7, #8
 8009258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800925a:	4620      	mov	r0, r4
 800925c:	f001 fb3a 	bl	800a8d4 <SDMMC_Init>
 8009260:	e008      	b.n	8009274 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009266:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800927c:	4618      	mov	r0, r3
 800927e:	f001 fc07 	bl	800aa90 <SDMMC_CmdBlockLength>
 8009282:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00c      	beq.n	80092a4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a0a      	ldr	r2, [pc, #40]	@ (80092b8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009290:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	431a      	orrs	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80092ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	372c      	adds	r7, #44	@ 0x2c
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd90      	pop	{r4, r7, pc}
 80092b8:	1fe00fff 	.word	0x1fe00fff
 80092bc:	55e63b89 	.word	0x55e63b89
 80092c0:	02faf080 	.word	0x02faf080
 80092c4:	017d7840 	.word	0x017d7840

080092c8 <HAL_SD_ConfigSpeedBusOperation>:
  *            @arg SDMMC_SPEED_MODE_ULTRA: Ultra high speed mode
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_SD_ConfigSpeedBusOperation(SD_HandleTypeDef *hsd, uint32_t SpeedMode)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SDMMC_SPEED_MODE(SpeedMode));
  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2203      	movs	r2, #3
 80092da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        status = HAL_ERROR;
        break;
    }
  }
#else
  switch (SpeedMode)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d027      	beq.n	8009334 <HAL_SD_ConfigSpeedBusOperation+0x6c>
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d85c      	bhi.n	80093a4 <HAL_SD_ConfigSpeedBusOperation+0xdc>
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d003      	beq.n	80092f8 <HAL_SD_ConfigSpeedBusOperation+0x30>
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d046      	beq.n	8009384 <HAL_SD_ConfigSpeedBusOperation+0xbc>
 80092f6:	e055      	b.n	80093a4 <HAL_SD_ConfigSpeedBusOperation+0xdc>
  {
    case SDMMC_SPEED_MODE_AUTO:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009300:	d008      	beq.n	8009314 <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8009306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800930a:	d003      	beq.n	8009314 <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8009310:	2b01      	cmp	r3, #1
 8009312:	d150      	bne.n	80093b6 <HAL_SD_ConfigSpeedBusOperation+0xee>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8009314:	4947      	ldr	r1, [pc, #284]	@ (8009434 <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fc6c 	bl	8009bf4 <SD_SwitchSpeed>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d049      	beq.n	80093b6 <HAL_SD_ConfigSpeedBusOperation+0xee>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009326:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	75fb      	strb	r3, [r7, #23]
      }
      else
      {
        /*Nothing to do, Use defaultSpeed */
      }
      break;
 8009332:	e040      	b.n	80093b6 <HAL_SD_ConfigSpeedBusOperation+0xee>
    }
    case SDMMC_SPEED_MODE_HIGH:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800933c:	d008      	beq.n	8009350 <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8009342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009346:	d003      	beq.n	8009350 <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 800934c:	2b01      	cmp	r3, #1
 800934e:	d10f      	bne.n	8009370 <HAL_SD_ConfigSpeedBusOperation+0xa8>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8009350:	4938      	ldr	r1, [pc, #224]	@ (8009434 <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fc4e 	bl	8009bf4 <SD_SwitchSpeed>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d011      	beq.n	8009382 <HAL_SD_ConfigSpeedBusOperation+0xba>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009362:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	75fb      	strb	r3, [r7, #23]
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 800936e:	e008      	b.n	8009382 <HAL_SD_ConfigSpeedBusOperation+0xba>
        }
      }
      else
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009374:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009380:	e01c      	b.n	80093bc <HAL_SD_ConfigSpeedBusOperation+0xf4>
 8009382:	e01b      	b.n	80093bc <HAL_SD_ConfigSpeedBusOperation+0xf4>
    }
    case SDMMC_SPEED_MODE_DEFAULT:
    {
      /* Switch to default Speed */
      if (SD_SwitchSpeed(hsd, SDMMC_SDR12_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8009384:	492c      	ldr	r1, [pc, #176]	@ (8009438 <HAL_SD_ConfigSpeedBusOperation+0x170>)
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fc34 	bl	8009bf4 <SD_SwitchSpeed>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d013      	beq.n	80093ba <HAL_SD_ConfigSpeedBusOperation+0xf2>
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009396:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	75fb      	strb	r3, [r7, #23]
      }

      break;
 80093a2:	e00a      	b.n	80093ba <HAL_SD_ConfigSpeedBusOperation+0xf2>
    }
    case SDMMC_SPEED_MODE_ULTRA: /*not valid without transceiver*/
    default:
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093a8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	75fb      	strb	r3, [r7, #23]
      break;
 80093b4:	e002      	b.n	80093bc <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 80093b6:	bf00      	nop
 80093b8:	e000      	b.n	80093bc <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 80093ba:	bf00      	nop
  }
#endif /* USE_SD_TRANSCEIVER */

  /* Verify that SD card is ready to use after Speed mode switch*/
  tickstart = HAL_GetTick();
 80093bc:	f7f7 fda2 	bl	8000f04 <HAL_GetTick>
 80093c0:	6138      	str	r0, [r7, #16]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80093c2:	e011      	b.n	80093e8 <HAL_SD_ConfigSpeedBusOperation+0x120>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80093c4:	f7f7 fd9e 	bl	8000f04 <HAL_GetTick>
 80093c8:	4602      	mov	r2, r0
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d2:	d109      	bne.n	80093e8 <HAL_SD_ConfigSpeedBusOperation+0x120>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80093da:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80093e4:	2303      	movs	r3, #3
 80093e6:	e021      	b.n	800942c <HAL_SD_ConfigSpeedBusOperation+0x164>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f829 	bl	8009440 <HAL_SD_GetCardState>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b04      	cmp	r3, #4
 80093f2:	d1e7      	bne.n	80093c4 <HAL_SD_ConfigSpeedBusOperation+0xfc>
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80093fc:	4618      	mov	r0, r3
 80093fe:	f001 fb47 	bl	800aa90 <SDMMC_CmdBlockLength>
 8009402:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00b      	beq.n	8009422 <HAL_SD_ConfigSpeedBusOperation+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a0b      	ldr	r2, [pc, #44]	@ (800943c <HAL_SD_ConfigSpeedBusOperation+0x174>)
 8009410:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	431a      	orrs	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	75fb      	strb	r3, [r7, #23]
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  return status;
 800942a:	7dfb      	ldrb	r3, [r7, #23]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	80ffff01 	.word	0x80ffff01
 8009438:	80ffff00 	.word	0x80ffff00
 800943c:	1fe00fff 	.word	0x1fe00fff

08009440 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800944c:	f107 030c 	add.w	r3, r7, #12
 8009450:	4619      	mov	r1, r3
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fa40 	bl	80098d8 <SD_SendStatus>
 8009458:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d005      	beq.n	800946c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	431a      	orrs	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	0a5b      	lsrs	r3, r3, #9
 8009470:	f003 030f 	and.w	r3, r3, #15
 8009474:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009476:	693b      	ldr	r3, [r7, #16]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3718      	adds	r7, #24
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b090      	sub	sp, #64	@ 0x40
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009488:	2300      	movs	r3, #0
 800948a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800948c:	f7f7 fd3a 	bl	8000f04 <HAL_GetTick>
 8009490:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4618      	mov	r0, r3
 8009498:	f001 fa75 	bl	800a986 <SDMMC_GetPowerState>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d102      	bne.n	80094a8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80094a2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80094a6:	e0b5      	b.n	8009614 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ac:	2b03      	cmp	r3, #3
 80094ae:	d02e      	beq.n	800950e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f001 fcc0 	bl	800ae3a <SDMMC_CmdSendCID>
 80094ba:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80094bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <SD_InitCard+0x46>
    {
      return errorstate;
 80094c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c4:	e0a6      	b.n	8009614 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2100      	movs	r1, #0
 80094cc:	4618      	mov	r0, r3
 80094ce:	f001 faa0 	bl	800aa12 <SDMMC_GetResponse>
 80094d2:	4602      	mov	r2, r0
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2104      	movs	r1, #4
 80094de:	4618      	mov	r0, r3
 80094e0:	f001 fa97 	bl	800aa12 <SDMMC_GetResponse>
 80094e4:	4602      	mov	r2, r0
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2108      	movs	r1, #8
 80094f0:	4618      	mov	r0, r3
 80094f2:	f001 fa8e 	bl	800aa12 <SDMMC_GetResponse>
 80094f6:	4602      	mov	r2, r0
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	210c      	movs	r1, #12
 8009502:	4618      	mov	r0, r3
 8009504:	f001 fa85 	bl	800aa12 <SDMMC_GetResponse>
 8009508:	4602      	mov	r2, r0
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009512:	2b03      	cmp	r3, #3
 8009514:	d01d      	beq.n	8009552 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009516:	e019      	b.n	800954c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f107 020a 	add.w	r2, r7, #10
 8009520:	4611      	mov	r1, r2
 8009522:	4618      	mov	r0, r3
 8009524:	f001 fcc8 	bl	800aeb8 <SDMMC_CmdSetRelAdd>
 8009528:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800952a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952c:	2b00      	cmp	r3, #0
 800952e:	d001      	beq.n	8009534 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009532:	e06f      	b.n	8009614 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009534:	f7f7 fce6 	bl	8000f04 <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009542:	4293      	cmp	r3, r2
 8009544:	d902      	bls.n	800954c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009546:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800954a:	e063      	b.n	8009614 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800954c:	897b      	ldrh	r3, [r7, #10]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0e2      	beq.n	8009518 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009556:	2b03      	cmp	r3, #3
 8009558:	d036      	beq.n	80095c8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800955a:	897b      	ldrh	r3, [r7, #10]
 800955c:	461a      	mov	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800956a:	041b      	lsls	r3, r3, #16
 800956c:	4619      	mov	r1, r3
 800956e:	4610      	mov	r0, r2
 8009570:	f001 fc82 	bl	800ae78 <SDMMC_CmdSendCSD>
 8009574:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <SD_InitCard+0x100>
    {
      return errorstate;
 800957c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957e:	e049      	b.n	8009614 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2100      	movs	r1, #0
 8009586:	4618      	mov	r0, r3
 8009588:	f001 fa43 	bl	800aa12 <SDMMC_GetResponse>
 800958c:	4602      	mov	r2, r0
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2104      	movs	r1, #4
 8009598:	4618      	mov	r0, r3
 800959a:	f001 fa3a 	bl	800aa12 <SDMMC_GetResponse>
 800959e:	4602      	mov	r2, r0
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2108      	movs	r1, #8
 80095aa:	4618      	mov	r0, r3
 80095ac:	f001 fa31 	bl	800aa12 <SDMMC_GetResponse>
 80095b0:	4602      	mov	r2, r0
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	210c      	movs	r1, #12
 80095bc:	4618      	mov	r0, r3
 80095be:	f001 fa28 	bl	800aa12 <SDMMC_GetResponse>
 80095c2:	4602      	mov	r2, r0
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2104      	movs	r1, #4
 80095ce:	4618      	mov	r0, r3
 80095d0:	f001 fa1f 	bl	800aa12 <SDMMC_GetResponse>
 80095d4:	4603      	mov	r3, r0
 80095d6:	0d1a      	lsrs	r2, r3, #20
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80095dc:	f107 030c 	add.w	r3, r7, #12
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff fad0 	bl	8008b88 <HAL_SD_GetCardCSD>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d002      	beq.n	80095f4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80095f2:	e00f      	b.n	8009614 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095fc:	041b      	lsls	r3, r3, #16
 80095fe:	4619      	mov	r1, r3
 8009600:	4610      	mov	r0, r2
 8009602:	f001 fb31 	bl	800ac68 <SDMMC_CmdSelDesel>
 8009606:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <SD_InitCard+0x192>
  {
    return errorstate;
 800960e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009610:	e000      	b.n	8009614 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3740      	adds	r7, #64	@ 0x40
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009628:	2300      	movs	r3, #0
 800962a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4618      	mov	r0, r3
 8009636:	f001 fb3a 	bl	800acae <SDMMC_CmdGoIdleState>
 800963a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	e072      	b.n	800972c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4618      	mov	r0, r3
 800964c:	f001 fb4d 	bl	800acea <SDMMC_CmdOperCond>
 8009650:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009658:	d10d      	bne.n	8009676 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4618      	mov	r0, r3
 8009666:	f001 fb22 	bl	800acae <SDMMC_CmdGoIdleState>
 800966a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d004      	beq.n	800967c <SD_PowerON+0x60>
    {
      return errorstate;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	e05a      	b.n	800972c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009680:	2b01      	cmp	r3, #1
 8009682:	d137      	bne.n	80096f4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2100      	movs	r1, #0
 800968a:	4618      	mov	r0, r3
 800968c:	f001 fb4d 	bl	800ad2a <SDMMC_CmdAppCommand>
 8009690:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d02d      	beq.n	80096f4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009698:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800969c:	e046      	b.n	800972c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2100      	movs	r1, #0
 80096a4:	4618      	mov	r0, r3
 80096a6:	f001 fb40 	bl	800ad2a <SDMMC_CmdAppCommand>
 80096aa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <SD_PowerON+0x9a>
    {
      return errorstate;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	e03a      	b.n	800972c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	491e      	ldr	r1, [pc, #120]	@ (8009734 <SD_PowerON+0x118>)
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 fb57 	bl	800ad70 <SDMMC_CmdAppOperCommand>
 80096c2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80096ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80096ce:	e02d      	b.n	800972c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2100      	movs	r1, #0
 80096d6:	4618      	mov	r0, r3
 80096d8:	f001 f99b 	bl	800aa12 <SDMMC_GetResponse>
 80096dc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	0fdb      	lsrs	r3, r3, #31
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d101      	bne.n	80096ea <SD_PowerON+0xce>
 80096e6:	2301      	movs	r3, #1
 80096e8:	e000      	b.n	80096ec <SD_PowerON+0xd0>
 80096ea:	2300      	movs	r3, #0
 80096ec:	613b      	str	r3, [r7, #16]

    count++;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	3301      	adds	r3, #1
 80096f2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d802      	bhi.n	8009704 <SD_PowerON+0xe8>
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d0cc      	beq.n	800969e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800970a:	4293      	cmp	r3, r2
 800970c:	d902      	bls.n	8009714 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800970e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009712:	e00b      	b.n	800972c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d002      	beq.n	800972a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3718      	adds	r7, #24
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	c1100000 	.word	0xc1100000

08009738 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08c      	sub	sp, #48	@ 0x30
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009742:	f7f7 fbdf 	bl	8000f04 <HAL_GetTick>
 8009746:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2100      	movs	r1, #0
 8009752:	4618      	mov	r0, r3
 8009754:	f001 f95d 	bl	800aa12 <SDMMC_GetResponse>
 8009758:	4603      	mov	r3, r0
 800975a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800975e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009762:	d102      	bne.n	800976a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009764:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009768:	e0b0      	b.n	80098cc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2140      	movs	r1, #64	@ 0x40
 8009770:	4618      	mov	r0, r3
 8009772:	f001 f98d 	bl	800aa90 <SDMMC_CmdBlockLength>
 8009776:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d005      	beq.n	800978a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	e0a0      	b.n	80098cc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009792:	041b      	lsls	r3, r3, #16
 8009794:	4619      	mov	r1, r3
 8009796:	4610      	mov	r0, r2
 8009798:	f001 fac7 	bl	800ad2a <SDMMC_CmdAppCommand>
 800979c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800979e:	6a3b      	ldr	r3, [r7, #32]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d005      	beq.n	80097b0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80097ac:	6a3b      	ldr	r3, [r7, #32]
 80097ae:	e08d      	b.n	80098cc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80097b0:	f04f 33ff 	mov.w	r3, #4294967295
 80097b4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80097b6:	2340      	movs	r3, #64	@ 0x40
 80097b8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80097ba:	2360      	movs	r3, #96	@ 0x60
 80097bc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80097be:	2302      	movs	r3, #2
 80097c0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80097c6:	2301      	movs	r3, #1
 80097c8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f107 0208 	add.w	r2, r7, #8
 80097d2:	4611      	mov	r1, r2
 80097d4:	4618      	mov	r0, r3
 80097d6:	f001 f92f 	bl	800aa38 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4618      	mov	r0, r3
 80097e0:	f001 fbaf 	bl	800af42 <SDMMC_CmdStatusRegister>
 80097e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d02b      	beq.n	8009844 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	e069      	b.n	80098cc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d013      	beq.n	800982e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009806:	2300      	movs	r3, #0
 8009808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800980a:	e00d      	b.n	8009828 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4618      	mov	r0, r3
 8009812:	f001 f889 	bl	800a928 <SDMMC_ReadFIFO>
 8009816:	4602      	mov	r2, r0
 8009818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981a:	601a      	str	r2, [r3, #0]
        pData++;
 800981c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981e:	3304      	adds	r3, #4
 8009820:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009824:	3301      	adds	r3, #1
 8009826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800982a:	2b07      	cmp	r3, #7
 800982c:	d9ee      	bls.n	800980c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800982e:	f7f7 fb69 	bl	8000f04 <HAL_GetTick>
 8009832:	4602      	mov	r2, r0
 8009834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983c:	d102      	bne.n	8009844 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800983e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009842:	e043      	b.n	80098cc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800984a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800984e:	2b00      	cmp	r3, #0
 8009850:	d0d2      	beq.n	80097f8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009858:	f003 0308 	and.w	r3, r3, #8
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009860:	2308      	movs	r3, #8
 8009862:	e033      	b.n	80098cc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800986a:	f003 0302 	and.w	r3, r3, #2
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009872:	2302      	movs	r3, #2
 8009874:	e02a      	b.n	80098cc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800987c:	f003 0320 	and.w	r3, r3, #32
 8009880:	2b00      	cmp	r3, #0
 8009882:	d017      	beq.n	80098b4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009884:	2320      	movs	r3, #32
 8009886:	e021      	b.n	80098cc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4618      	mov	r0, r3
 800988e:	f001 f84b 	bl	800a928 <SDMMC_ReadFIFO>
 8009892:	4602      	mov	r2, r0
 8009894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009896:	601a      	str	r2, [r3, #0]
    pData++;
 8009898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800989a:	3304      	adds	r3, #4
 800989c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800989e:	f7f7 fb31 	bl	8000f04 <HAL_GetTick>
 80098a2:	4602      	mov	r2, r0
 80098a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ac:	d102      	bne.n	80098b4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80098ae:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80098b2:	e00b      	b.n	80098cc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1e2      	bne.n	8009888 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a03      	ldr	r2, [pc, #12]	@ (80098d4 <SD_SendSDStatus+0x19c>)
 80098c8:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3730      	adds	r7, #48	@ 0x30
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	18000f3a 	.word	0x18000f3a

080098d8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d102      	bne.n	80098ee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80098e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80098ec:	e018      	b.n	8009920 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098f6:	041b      	lsls	r3, r3, #16
 80098f8:	4619      	mov	r1, r3
 80098fa:	4610      	mov	r0, r2
 80098fc:	f001 fafe 	bl	800aefc <SDMMC_CmdSendStatus>
 8009900:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	e009      	b.n	8009920 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2100      	movs	r1, #0
 8009912:	4618      	mov	r0, r3
 8009914:	f001 f87d 	bl	800aa12 <SDMMC_GetResponse>
 8009918:	4602      	mov	r2, r0
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009930:	2300      	movs	r3, #0
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	2300      	movs	r3, #0
 8009936:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2100      	movs	r1, #0
 800993e:	4618      	mov	r0, r3
 8009940:	f001 f867 	bl	800aa12 <SDMMC_GetResponse>
 8009944:	4603      	mov	r3, r0
 8009946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800994a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800994e:	d102      	bne.n	8009956 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009950:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009954:	e02f      	b.n	80099b6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009956:	f107 030c 	add.w	r3, r7, #12
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f879 	bl	8009a54 <SD_FindSCR>
 8009962:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	e023      	b.n	80099b6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d01c      	beq.n	80099b2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009980:	041b      	lsls	r3, r3, #16
 8009982:	4619      	mov	r1, r3
 8009984:	4610      	mov	r0, r2
 8009986:	f001 f9d0 	bl	800ad2a <SDMMC_CmdAppCommand>
 800998a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	e00f      	b.n	80099b6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2102      	movs	r1, #2
 800999c:	4618      	mov	r0, r3
 800999e:	f001 fa07 	bl	800adb0 <SDMMC_CmdBusWidth>
 80099a2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	e003      	b.n	80099b6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80099ae:	2300      	movs	r3, #0
 80099b0:	e001      	b.n	80099b6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3718      	adds	r7, #24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b086      	sub	sp, #24
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80099c6:	2300      	movs	r3, #0
 80099c8:	60fb      	str	r3, [r7, #12]
 80099ca:	2300      	movs	r3, #0
 80099cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2100      	movs	r1, #0
 80099d4:	4618      	mov	r0, r3
 80099d6:	f001 f81c 	bl	800aa12 <SDMMC_GetResponse>
 80099da:	4603      	mov	r3, r0
 80099dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099e4:	d102      	bne.n	80099ec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80099e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80099ea:	e02f      	b.n	8009a4c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80099ec:	f107 030c 	add.w	r3, r7, #12
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f82e 	bl	8009a54 <SD_FindSCR>
 80099f8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	e023      	b.n	8009a4c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d01c      	beq.n	8009a48 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a16:	041b      	lsls	r3, r3, #16
 8009a18:	4619      	mov	r1, r3
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	f001 f985 	bl	800ad2a <SDMMC_CmdAppCommand>
 8009a20:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	e00f      	b.n	8009a4c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2100      	movs	r1, #0
 8009a32:	4618      	mov	r0, r3
 8009a34:	f001 f9bc 	bl	800adb0 <SDMMC_CmdBusWidth>
 8009a38:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	e003      	b.n	8009a4c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009a44:	2300      	movs	r3, #0
 8009a46:	e001      	b.n	8009a4c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009a48:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b08e      	sub	sp, #56	@ 0x38
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009a5e:	f7f7 fa51 	bl	8000f04 <HAL_GetTick>
 8009a62:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009a64:	2300      	movs	r3, #0
 8009a66:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009a68:	2300      	movs	r3, #0
 8009a6a:	60bb      	str	r3, [r7, #8]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2108      	movs	r1, #8
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 f808 	bl	800aa90 <SDMMC_CmdBlockLength>
 8009a80:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8a:	e0ad      	b.n	8009be8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a94:	041b      	lsls	r3, r3, #16
 8009a96:	4619      	mov	r1, r3
 8009a98:	4610      	mov	r0, r2
 8009a9a:	f001 f946 	bl	800ad2a <SDMMC_CmdAppCommand>
 8009a9e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <SD_FindSCR+0x56>
  {
    return errorstate;
 8009aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa8:	e09e      	b.n	8009be8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8009aae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009ab0:	2308      	movs	r3, #8
 8009ab2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009ab4:	2330      	movs	r3, #48	@ 0x30
 8009ab6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f107 0210 	add.w	r2, r7, #16
 8009acc:	4611      	mov	r1, r2
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 ffb2 	bl	800aa38 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f001 f98c 	bl	800adf6 <SDMMC_CmdSendSCR>
 8009ade:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d027      	beq.n	8009b36 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae8:	e07e      	b.n	8009be8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009af0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d113      	bne.n	8009b20 <SD_FindSCR+0xcc>
 8009af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d110      	bne.n	8009b20 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 ff10 	bl	800a928 <SDMMC_ReadFIFO>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 ff09 	bl	800a928 <SDMMC_ReadFIFO>
 8009b16:	4603      	mov	r3, r0
 8009b18:	60fb      	str	r3, [r7, #12]
      index++;
 8009b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009b20:	f7f7 f9f0 	bl	8000f04 <HAL_GetTick>
 8009b24:	4602      	mov	r2, r0
 8009b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2e:	d102      	bne.n	8009b36 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009b30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009b34:	e058      	b.n	8009be8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b3c:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009b40:	4013      	ands	r3, r2
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d0d1      	beq.n	8009aea <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b4c:	f003 0308 	and.w	r3, r3, #8
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d005      	beq.n	8009b60 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2208      	movs	r2, #8
 8009b5a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009b5c:	2308      	movs	r3, #8
 8009b5e:	e043      	b.n	8009be8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b66:	f003 0302 	and.w	r3, r3, #2
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d005      	beq.n	8009b7a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2202      	movs	r2, #2
 8009b74:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009b76:	2302      	movs	r3, #2
 8009b78:	e036      	b.n	8009be8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b80:	f003 0320 	and.w	r3, r3, #32
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d005      	beq.n	8009b94 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009b90:	2320      	movs	r3, #32
 8009b92:	e029      	b.n	8009be8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a15      	ldr	r2, [pc, #84]	@ (8009bf0 <SD_FindSCR+0x19c>)
 8009b9a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	061a      	lsls	r2, r3, #24
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	021b      	lsls	r3, r3, #8
 8009ba4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009ba8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	0a1b      	lsrs	r3, r3, #8
 8009bae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009bb2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	0e1b      	lsrs	r3, r3, #24
 8009bb8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bbc:	601a      	str	r2, [r3, #0]
    scr++;
 8009bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	061a      	lsls	r2, r3, #24
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	021b      	lsls	r3, r3, #8
 8009bcc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009bd0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	0a1b      	lsrs	r3, r3, #8
 8009bd6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009bda:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	0e1b      	lsrs	r3, r3, #24
 8009be0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3738      	adds	r7, #56	@ 0x38
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	18000f3a 	.word	0x18000f3a

08009bf4 <SD_SwitchSpeed>:
  * @param  hsd: SD handle
  * @param  SwitchSpeedMode: SD speed mode( SDMMC_SDR12_SWITCH_PATTERN, SDMMC_SDR25_SWITCH_PATTERN)
  * @retval SD Card error state
  */
uint32_t SD_SwitchSpeed(SD_HandleTypeDef *hsd, uint32_t SwitchSpeedMode)
{
 8009bf4:	b590      	push	{r4, r7, lr}
 8009bf6:	b09d      	sub	sp, #116	@ 0x74
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	66fb      	str	r3, [r7, #108]	@ 0x6c
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8009c02:	f107 0308 	add.w	r3, r7, #8
 8009c06:	2240      	movs	r2, #64	@ 0x40
 8009c08:	2100      	movs	r1, #0
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f007 f966 	bl	8010edc <memset>
  uint32_t count;
  uint32_t loop = 0 ;
 8009c10:	2300      	movs	r3, #0
 8009c12:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t Timeout = HAL_GetTick();
 8009c14:	f7f7 f976 	bl	8000f04 <HAL_GetTick>
 8009c18:	6638      	str	r0, [r7, #96]	@ 0x60

  if (hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d102      	bne.n	8009c28 <SD_SwitchSpeed+0x34>
  {
    /* Standard Speed Card <= 12.5Mhz  */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c22:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009c26:	e0ad      	b.n	8009d84 <SD_SwitchSpeed+0x190>
  }

  if (hsd->SdCard.CardSpeed >= CARD_HIGH_SPEED)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c2c:	2bff      	cmp	r3, #255	@ 0xff
 8009c2e:	f240 80a8 	bls.w	8009d82 <SD_SwitchSpeed+0x18e>
  {
    /* Initialize the Data control register */
    hsd->Instance->DCTRL = 0;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2200      	movs	r2, #0
 8009c38:	62da      	str	r2, [r3, #44]	@ 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2140      	movs	r1, #64	@ 0x40
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 ff25 	bl	800aa90 <SDMMC_CmdBlockLength>
 8009c46:	66f8      	str	r0, [r7, #108]	@ 0x6c

    if (errorstate != HAL_SD_ERROR_NONE)
 8009c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <SD_SwitchSpeed+0x5e>
    {
      return errorstate;
 8009c4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c50:	e098      	b.n	8009d84 <SD_SwitchSpeed+0x190>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c52:	f04f 33ff 	mov.w	r3, #4294967295
 8009c56:	64bb      	str	r3, [r7, #72]	@ 0x48
    sdmmc_datainitstructure.DataLength    = 64U;
 8009c58:	2340      	movs	r3, #64	@ 0x40
 8009c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8009c5c:	2360      	movs	r3, #96	@ 0x60
 8009c5e:	653b      	str	r3, [r7, #80]	@ 0x50
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c60:	2302      	movs	r3, #2
 8009c62:	657b      	str	r3, [r7, #84]	@ 0x54
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	65bb      	str	r3, [r7, #88]	@ 0x58
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	65fb      	str	r3, [r7, #92]	@ 0x5c

    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8009c74:	4611      	mov	r1, r2
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 fede 	bl	800aa38 <SDMMC_ConfigData>


    errorstate = SDMMC_CmdSwitch(hsd->Instance, SwitchSpeedMode);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f001 f97f 	bl	800af86 <SDMMC_CmdSwitch>
 8009c88:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d036      	beq.n	8009cfe <SD_SwitchSpeed+0x10a>
    {
      return errorstate;
 8009c90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c92:	e077      	b.n	8009d84 <SD_SwitchSpeed+0x190>
    }

    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d01a      	beq.n	8009cd8 <SD_SwitchSpeed+0xe4>
      {
        for (count = 0U; count < 8U; count++)
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ca6:	e011      	b.n	8009ccc <SD_SwitchSpeed+0xd8>
        {
          SD_hs[(8U * loop) + count]  = SDMMC_ReadFIFO(hsd->Instance);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6819      	ldr	r1, [r3, #0]
 8009cac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cae:	00da      	lsls	r2, r3, #3
 8009cb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cb2:	18d4      	adds	r4, r2, r3
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	f000 fe37 	bl	800a928 <SDMMC_ReadFIFO>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	00a3      	lsls	r3, r4, #2
 8009cbe:	3370      	adds	r3, #112	@ 0x70
 8009cc0:	443b      	add	r3, r7
 8009cc2:	f843 2c68 	str.w	r2, [r3, #-104]
        for (count = 0U; count < 8U; count++)
 8009cc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cc8:	3301      	adds	r3, #1
 8009cca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ccc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cce:	2b07      	cmp	r3, #7
 8009cd0:	d9ea      	bls.n	8009ca8 <SD_SwitchSpeed+0xb4>
        }
        loop ++;
 8009cd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	667b      	str	r3, [r7, #100]	@ 0x64
      }

      if ((HAL_GetTick() - Timeout) >=  SDMMC_DATATIMEOUT)
 8009cd8:	f7f7 f914 	bl	8000f04 <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce6:	d10a      	bne.n	8009cfe <SD_SwitchSpeed+0x10a>
      {
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009cee:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_SD_ERROR_TIMEOUT;
 8009cf8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009cfc:	e042      	b.n	8009d84 <SD_SwitchSpeed+0x190>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d04:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009d08:	4013      	ands	r3, r2
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0c2      	beq.n	8009c94 <SD_SwitchSpeed+0xa0>
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d14:	f003 0308 	and.w	r3, r3, #8
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d005      	beq.n	8009d28 <SD_SwitchSpeed+0x134>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2208      	movs	r2, #8
 8009d22:	639a      	str	r2, [r3, #56]	@ 0x38

      return errorstate;
 8009d24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d26:	e02d      	b.n	8009d84 <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d2e:	f003 0302 	and.w	r3, r3, #2
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d007      	beq.n	8009d46 <SD_SwitchSpeed+0x152>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2202      	movs	r2, #2
 8009d3c:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;
 8009d3e:	2302      	movs	r3, #2
 8009d40:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 8009d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d44:	e01e      	b.n	8009d84 <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d4c:	f003 0320 	and.w	r3, r3, #32
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d007      	beq.n	8009d64 <SD_SwitchSpeed+0x170>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_RX_OVERRUN;
 8009d5c:	2320      	movs	r3, #32
 8009d5e:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 8009d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d62:	e00f      	b.n	8009d84 <SD_SwitchSpeed+0x190>
    {
      /* No error flag set */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a08      	ldr	r2, [pc, #32]	@ (8009d8c <SD_SwitchSpeed+0x198>)
 8009d6a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Test if the switch mode HS is ok */
    if ((((uint8_t *)SD_hs)[13] & 2U) != 2U)
 8009d6c:	f107 0308 	add.w	r3, r7, #8
 8009d70:	330d      	adds	r3, #13
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	f003 0302 	and.w	r3, r3, #2
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d102      	bne.n	8009d82 <SD_SwitchSpeed+0x18e>
    {
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009d7c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009d80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }

  }

  return errorstate;
 8009d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3774      	adds	r7, #116	@ 0x74
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd90      	pop	{r4, r7, pc}
 8009d8c:	18000f3a 	.word	0x18000f3a

08009d90 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d101      	bne.n	8009da4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e02b      	b.n	8009dfc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d106      	bne.n	8009dbe <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f825 	bl	8009e08 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	3304      	adds	r3, #4
 8009dce:	4619      	mov	r1, r3
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	f000 fc7d 	bl	800a6d0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	461a      	mov	r2, r3
 8009de0:	6839      	ldr	r1, [r7, #0]
 8009de2:	f000 fcd1 	bl	800a788 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009de6:	4b07      	ldr	r3, [pc, #28]	@ (8009e04 <HAL_SDRAM_Init+0x74>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a06      	ldr	r2, [pc, #24]	@ (8009e04 <HAL_SDRAM_Init+0x74>)
 8009dec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009df0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	52004000 	.word	0x52004000

08009e08 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009e2e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d101      	bne.n	8009e3a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009e36:	2302      	movs	r3, #2
 8009e38:	e021      	b.n	8009e7e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009e3a:	7dfb      	ldrb	r3, [r7, #23]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d002      	beq.n	8009e46 <HAL_SDRAM_SendCommand+0x2a>
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
 8009e42:	2b05      	cmp	r3, #5
 8009e44:	d118      	bne.n	8009e78 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2202      	movs	r2, #2
 8009e4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	68b9      	ldr	r1, [r7, #8]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 fd00 	bl	800a85c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b02      	cmp	r3, #2
 8009e62:	d104      	bne.n	8009e6e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2205      	movs	r2, #5
 8009e68:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009e6c:	e006      	b.n	8009e7c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009e76:	e001      	b.n	8009e7c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e000      	b.n	8009e7e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b082      	sub	sp, #8
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d101      	bne.n	8009ea0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	e016      	b.n	8009ece <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d10f      	bne.n	8009ecc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 fcf2 	bl	800a8a4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	e000      	b.n	8009ece <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
	...

08009ed8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d101      	bne.n	8009eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	e10f      	b.n	800a10a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a87      	ldr	r2, [pc, #540]	@ (800a114 <HAL_SPI_Init+0x23c>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d00f      	beq.n	8009f1a <HAL_SPI_Init+0x42>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a86      	ldr	r2, [pc, #536]	@ (800a118 <HAL_SPI_Init+0x240>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d00a      	beq.n	8009f1a <HAL_SPI_Init+0x42>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a84      	ldr	r2, [pc, #528]	@ (800a11c <HAL_SPI_Init+0x244>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d005      	beq.n	8009f1a <HAL_SPI_Init+0x42>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	2b0f      	cmp	r3, #15
 8009f14:	d901      	bls.n	8009f1a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e0f7      	b.n	800a10a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fbbc 	bl	800a698 <SPI_GetPacketSize>
 8009f20:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a7b      	ldr	r2, [pc, #492]	@ (800a114 <HAL_SPI_Init+0x23c>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d00c      	beq.n	8009f46 <HAL_SPI_Init+0x6e>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a79      	ldr	r2, [pc, #484]	@ (800a118 <HAL_SPI_Init+0x240>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d007      	beq.n	8009f46 <HAL_SPI_Init+0x6e>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a78      	ldr	r2, [pc, #480]	@ (800a11c <HAL_SPI_Init+0x244>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d002      	beq.n	8009f46 <HAL_SPI_Init+0x6e>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2b08      	cmp	r3, #8
 8009f44:	d811      	bhi.n	8009f6a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009f4a:	4a72      	ldr	r2, [pc, #456]	@ (800a114 <HAL_SPI_Init+0x23c>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d009      	beq.n	8009f64 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a70      	ldr	r2, [pc, #448]	@ (800a118 <HAL_SPI_Init+0x240>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d004      	beq.n	8009f64 <HAL_SPI_Init+0x8c>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a6f      	ldr	r2, [pc, #444]	@ (800a11c <HAL_SPI_Init+0x244>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d104      	bne.n	8009f6e <HAL_SPI_Init+0x96>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b10      	cmp	r3, #16
 8009f68:	d901      	bls.n	8009f6e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e0cd      	b.n	800a10a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d106      	bne.n	8009f88 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f003 fcb2 	bl	800d8ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f022 0201 	bic.w	r2, r2, #1
 8009f9e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009faa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009fb4:	d119      	bne.n	8009fea <HAL_SPI_Init+0x112>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fbe:	d103      	bne.n	8009fc8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d008      	beq.n	8009fda <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10c      	bne.n	8009fea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009fd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fd8:	d107      	bne.n	8009fea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009fe8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d00f      	beq.n	800a016 <HAL_SPI_Init+0x13e>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	2b06      	cmp	r3, #6
 8009ffc:	d90b      	bls.n	800a016 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	430a      	orrs	r2, r1
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	e007      	b.n	800a026 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a024:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	69da      	ldr	r2, [r3, #28]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a02e:	431a      	orrs	r2, r3
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	431a      	orrs	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a038:	ea42 0103 	orr.w	r1, r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	68da      	ldr	r2, [r3, #12]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	430a      	orrs	r2, r1
 800a046:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a050:	431a      	orrs	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a056:	431a      	orrs	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	431a      	orrs	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	431a      	orrs	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	431a      	orrs	r2, r3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	431a      	orrs	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	431a      	orrs	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a07a:	431a      	orrs	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	431a      	orrs	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a086:	ea42 0103 	orr.w	r1, r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	430a      	orrs	r2, r1
 800a094:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d113      	bne.n	800a0c6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0b0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a0c4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f022 0201 	bic.w	r2, r2, #1
 800a0d4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00a      	beq.n	800a0f8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3710      	adds	r7, #16
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	40013000 	.word	0x40013000
 800a118:	40003800 	.word	0x40003800
 800a11c:	40003c00 	.word	0x40003c00

0800a120 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af02      	add	r7, sp, #8
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	603b      	str	r3, [r7, #0]
 800a12c:	4613      	mov	r3, r2
 800a12e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3320      	adds	r3, #32
 800a136:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a138:	f7f6 fee4 	bl	8000f04 <HAL_GetTick>
 800a13c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b01      	cmp	r3, #1
 800a148:	d001      	beq.n	800a14e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a14a:	2302      	movs	r3, #2
 800a14c:	e1d1      	b.n	800a4f2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <HAL_SPI_Transmit+0x3a>
 800a154:	88fb      	ldrh	r3, [r7, #6]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e1c9      	b.n	800a4f2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a164:	2b01      	cmp	r3, #1
 800a166:	d101      	bne.n	800a16c <HAL_SPI_Transmit+0x4c>
 800a168:	2302      	movs	r3, #2
 800a16a:	e1c2      	b.n	800a4f2 <HAL_SPI_Transmit+0x3d2>
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2203      	movs	r2, #3
 800a178:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	68ba      	ldr	r2, [r7, #8]
 800a188:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	88fa      	ldrh	r2, [r7, #6]
 800a18e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	88fa      	ldrh	r2, [r7, #6]
 800a196:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a1c4:	d108      	bne.n	800a1d8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1d4:	601a      	str	r2, [r3, #0]
 800a1d6:	e009      	b.n	800a1ec <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a1ea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	4b96      	ldr	r3, [pc, #600]	@ (800a44c <HAL_SPI_Transmit+0x32c>)
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	88f9      	ldrh	r1, [r7, #6]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	6812      	ldr	r2, [r2, #0]
 800a1fc:	430b      	orrs	r3, r1
 800a1fe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f042 0201 	orr.w	r2, r2, #1
 800a20e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a218:	d107      	bne.n	800a22a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a228:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	2b0f      	cmp	r3, #15
 800a230:	d947      	bls.n	800a2c2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a232:	e03f      	b.n	800a2b4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d114      	bne.n	800a26c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6812      	ldr	r2, [r2, #0]
 800a24c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a252:	1d1a      	adds	r2, r3, #4
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a25e:	b29b      	uxth	r3, r3
 800a260:	3b01      	subs	r3, #1
 800a262:	b29a      	uxth	r2, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a26a:	e023      	b.n	800a2b4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a26c:	f7f6 fe4a 	bl	8000f04 <HAL_GetTick>
 800a270:	4602      	mov	r2, r0
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d803      	bhi.n	800a284 <HAL_SPI_Transmit+0x164>
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a282:	d102      	bne.n	800a28a <HAL_SPI_Transmit+0x16a>
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d114      	bne.n	800a2b4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f000 f936 	bl	800a4fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a296:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	e11e      	b.n	800a4f2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1b9      	bne.n	800a234 <HAL_SPI_Transmit+0x114>
 800a2c0:	e0f1      	b.n	800a4a6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	2b07      	cmp	r3, #7
 800a2c8:	f240 80e6 	bls.w	800a498 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a2cc:	e05d      	b.n	800a38a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	f003 0302 	and.w	r3, r3, #2
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d132      	bne.n	800a342 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d918      	bls.n	800a31a <HAL_SPI_Transmit+0x1fa>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d014      	beq.n	800a31a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6812      	ldr	r2, [r2, #0]
 800a2fa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a300:	1d1a      	adds	r2, r3, #4
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	3b02      	subs	r3, #2
 800a310:	b29a      	uxth	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a318:	e037      	b.n	800a38a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a31e:	881a      	ldrh	r2, [r3, #0]
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a328:	1c9a      	adds	r2, r3, #2
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a334:	b29b      	uxth	r3, r3
 800a336:	3b01      	subs	r3, #1
 800a338:	b29a      	uxth	r2, r3
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a340:	e023      	b.n	800a38a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a342:	f7f6 fddf 	bl	8000f04 <HAL_GetTick>
 800a346:	4602      	mov	r2, r0
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	1ad3      	subs	r3, r2, r3
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d803      	bhi.n	800a35a <HAL_SPI_Transmit+0x23a>
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a358:	d102      	bne.n	800a360 <HAL_SPI_Transmit+0x240>
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d114      	bne.n	800a38a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f000 f8cb 	bl	800a4fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a36c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e0b3      	b.n	800a4f2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a390:	b29b      	uxth	r3, r3
 800a392:	2b00      	cmp	r3, #0
 800a394:	d19b      	bne.n	800a2ce <HAL_SPI_Transmit+0x1ae>
 800a396:	e086      	b.n	800a4a6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	f003 0302 	and.w	r3, r3, #2
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d154      	bne.n	800a450 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	2b03      	cmp	r3, #3
 800a3b0:	d918      	bls.n	800a3e4 <HAL_SPI_Transmit+0x2c4>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3b6:	2b40      	cmp	r3, #64	@ 0x40
 800a3b8:	d914      	bls.n	800a3e4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6812      	ldr	r2, [r2, #0]
 800a3c4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3ca:	1d1a      	adds	r2, r3, #4
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	3b04      	subs	r3, #4
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a3e2:	e059      	b.n	800a498 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d917      	bls.n	800a420 <HAL_SPI_Transmit+0x300>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d013      	beq.n	800a420 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3fc:	881a      	ldrh	r2, [r3, #0]
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a406:	1c9a      	adds	r2, r3, #2
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a412:	b29b      	uxth	r3, r3
 800a414:	3b02      	subs	r3, #2
 800a416:	b29a      	uxth	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a41e:	e03b      	b.n	800a498 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3320      	adds	r3, #32
 800a42a:	7812      	ldrb	r2, [r2, #0]
 800a42c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a43e:	b29b      	uxth	r3, r3
 800a440:	3b01      	subs	r3, #1
 800a442:	b29a      	uxth	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a44a:	e025      	b.n	800a498 <HAL_SPI_Transmit+0x378>
 800a44c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a450:	f7f6 fd58 	bl	8000f04 <HAL_GetTick>
 800a454:	4602      	mov	r2, r0
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d803      	bhi.n	800a468 <HAL_SPI_Transmit+0x348>
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a466:	d102      	bne.n	800a46e <HAL_SPI_Transmit+0x34e>
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d114      	bne.n	800a498 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f000 f844 	bl	800a4fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a47a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a494:	2303      	movs	r3, #3
 800a496:	e02c      	b.n	800a4f2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f47f af79 	bne.w	800a398 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2108      	movs	r1, #8
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f000 f8c3 	bl	800a63c <SPI_WaitOnFlagUntilTimeout>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d007      	beq.n	800a4cc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4c2:	f043 0220 	orr.w	r2, r3, #32
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f000 f815 	bl	800a4fc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	e000      	b.n	800a4f2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a4f0:	2300      	movs	r3, #0
  }
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop

0800a4fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	695b      	ldr	r3, [r3, #20]
 800a50a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	699a      	ldr	r2, [r3, #24]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f042 0208 	orr.w	r2, r2, #8
 800a51a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	699a      	ldr	r2, [r3, #24]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f042 0210 	orr.w	r2, r2, #16
 800a52a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f022 0201 	bic.w	r2, r2, #1
 800a53a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6919      	ldr	r1, [r3, #16]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	4b3c      	ldr	r3, [pc, #240]	@ (800a638 <SPI_CloseTransfer+0x13c>)
 800a548:	400b      	ands	r3, r1
 800a54a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	689a      	ldr	r2, [r3, #8]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a55a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b04      	cmp	r3, #4
 800a566:	d014      	beq.n	800a592 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f003 0320 	and.w	r3, r3, #32
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00f      	beq.n	800a592 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a578:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	699a      	ldr	r2, [r3, #24]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f042 0220 	orr.w	r2, r2, #32
 800a590:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	d014      	beq.n	800a5c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00f      	beq.n	800a5c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5ae:	f043 0204 	orr.w	r2, r3, #4
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	699a      	ldr	r2, [r3, #24]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a5c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00f      	beq.n	800a5f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5d8:	f043 0201 	orr.w	r2, r3, #1
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	699a      	ldr	r2, [r3, #24]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00f      	beq.n	800a61c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a602:	f043 0208 	orr.w	r2, r3, #8
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	699a      	ldr	r2, [r3, #24]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a61a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a62c:	bf00      	nop
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	fffffc90 	.word	0xfffffc90

0800a63c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	4613      	mov	r3, r2
 800a64a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a64c:	e010      	b.n	800a670 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a64e:	f7f6 fc59 	bl	8000f04 <HAL_GetTick>
 800a652:	4602      	mov	r2, r0
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	683a      	ldr	r2, [r7, #0]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d803      	bhi.n	800a666 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a664:	d102      	bne.n	800a66c <SPI_WaitOnFlagUntilTimeout+0x30>
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d101      	bne.n	800a670 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e00f      	b.n	800a690 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	695a      	ldr	r2, [r3, #20]
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	4013      	ands	r3, r2
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	bf0c      	ite	eq
 800a680:	2301      	moveq	r3, #1
 800a682:	2300      	movne	r3, #0
 800a684:	b2db      	uxtb	r3, r3
 800a686:	461a      	mov	r2, r3
 800a688:	79fb      	ldrb	r3, [r7, #7]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d0df      	beq.n	800a64e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6a4:	095b      	lsrs	r3, r3, #5
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	3307      	adds	r3, #7
 800a6b6:	08db      	lsrs	r3, r3, #3
 800a6b8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	fb02 f303 	mul.w	r3, r2, r3
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3714      	adds	r7, #20
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
	...

0800a6d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d121      	bne.n	800a726 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	4b27      	ldr	r3, [pc, #156]	@ (800a784 <FMC_SDRAM_Init+0xb4>)
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	6851      	ldr	r1, [r2, #4]
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	6892      	ldr	r2, [r2, #8]
 800a6f2:	4311      	orrs	r1, r2
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	68d2      	ldr	r2, [r2, #12]
 800a6f8:	4311      	orrs	r1, r2
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	6912      	ldr	r2, [r2, #16]
 800a6fe:	4311      	orrs	r1, r2
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	6952      	ldr	r2, [r2, #20]
 800a704:	4311      	orrs	r1, r2
 800a706:	683a      	ldr	r2, [r7, #0]
 800a708:	6992      	ldr	r2, [r2, #24]
 800a70a:	4311      	orrs	r1, r2
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	69d2      	ldr	r2, [r2, #28]
 800a710:	4311      	orrs	r1, r2
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	6a12      	ldr	r2, [r2, #32]
 800a716:	4311      	orrs	r1, r2
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a71c:	430a      	orrs	r2, r1
 800a71e:	431a      	orrs	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	e026      	b.n	800a774 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	69d9      	ldr	r1, [r3, #28]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	4319      	orrs	r1, r3
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73c:	430b      	orrs	r3, r1
 800a73e:	431a      	orrs	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685a      	ldr	r2, [r3, #4]
 800a748:	4b0e      	ldr	r3, [pc, #56]	@ (800a784 <FMC_SDRAM_Init+0xb4>)
 800a74a:	4013      	ands	r3, r2
 800a74c:	683a      	ldr	r2, [r7, #0]
 800a74e:	6851      	ldr	r1, [r2, #4]
 800a750:	683a      	ldr	r2, [r7, #0]
 800a752:	6892      	ldr	r2, [r2, #8]
 800a754:	4311      	orrs	r1, r2
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	68d2      	ldr	r2, [r2, #12]
 800a75a:	4311      	orrs	r1, r2
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	6912      	ldr	r2, [r2, #16]
 800a760:	4311      	orrs	r1, r2
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	6952      	ldr	r2, [r2, #20]
 800a766:	4311      	orrs	r1, r2
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	6992      	ldr	r2, [r2, #24]
 800a76c:	430a      	orrs	r2, r1
 800a76e:	431a      	orrs	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	ffff8000 	.word	0xffff8000

0800a788 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d128      	bne.n	800a7ec <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	1e59      	subs	r1, r3, #1
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	011b      	lsls	r3, r3, #4
 800a7b0:	4319      	orrs	r1, r3
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	021b      	lsls	r3, r3, #8
 800a7ba:	4319      	orrs	r1, r3
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	031b      	lsls	r3, r3, #12
 800a7c4:	4319      	orrs	r1, r3
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	041b      	lsls	r3, r3, #16
 800a7ce:	4319      	orrs	r1, r3
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	051b      	lsls	r3, r3, #20
 800a7d8:	4319      	orrs	r1, r3
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	061b      	lsls	r3, r3, #24
 800a7e2:	430b      	orrs	r3, r1
 800a7e4:	431a      	orrs	r2, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	609a      	str	r2, [r3, #8]
 800a7ea:	e02d      	b.n	800a848 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	689a      	ldr	r2, [r3, #8]
 800a7f0:	4b19      	ldr	r3, [pc, #100]	@ (800a858 <FMC_SDRAM_Timing_Init+0xd0>)
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	68d2      	ldr	r2, [r2, #12]
 800a7f8:	3a01      	subs	r2, #1
 800a7fa:	0311      	lsls	r1, r2, #12
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	6952      	ldr	r2, [r2, #20]
 800a800:	3a01      	subs	r2, #1
 800a802:	0512      	lsls	r2, r2, #20
 800a804:	430a      	orrs	r2, r1
 800a806:	431a      	orrs	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	1e59      	subs	r1, r3, #1
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	3b01      	subs	r3, #1
 800a820:	011b      	lsls	r3, r3, #4
 800a822:	4319      	orrs	r1, r3
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	3b01      	subs	r3, #1
 800a82a:	021b      	lsls	r3, r3, #8
 800a82c:	4319      	orrs	r1, r3
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	3b01      	subs	r3, #1
 800a834:	041b      	lsls	r3, r3, #16
 800a836:	4319      	orrs	r1, r3
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	3b01      	subs	r3, #1
 800a83e:	061b      	lsls	r3, r3, #24
 800a840:	430b      	orrs	r3, r1
 800a842:	431a      	orrs	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3714      	adds	r7, #20
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	ff0f0fff 	.word	0xff0f0fff

0800a85c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	691a      	ldr	r2, [r3, #16]
 800a86c:	4b0c      	ldr	r3, [pc, #48]	@ (800a8a0 <FMC_SDRAM_SendCommand+0x44>)
 800a86e:	4013      	ands	r3, r2
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	6811      	ldr	r1, [r2, #0]
 800a874:	68ba      	ldr	r2, [r7, #8]
 800a876:	6852      	ldr	r2, [r2, #4]
 800a878:	4311      	orrs	r1, r2
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	6892      	ldr	r2, [r2, #8]
 800a87e:	3a01      	subs	r2, #1
 800a880:	0152      	lsls	r2, r2, #5
 800a882:	4311      	orrs	r1, r2
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	68d2      	ldr	r2, [r2, #12]
 800a888:	0252      	lsls	r2, r2, #9
 800a88a:	430a      	orrs	r2, r1
 800a88c:	431a      	orrs	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr
 800a8a0:	ffc00000 	.word	0xffc00000

0800a8a4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	695a      	ldr	r2, [r3, #20]
 800a8b2:	4b07      	ldr	r3, [pc, #28]	@ (800a8d0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	683a      	ldr	r2, [r7, #0]
 800a8b8:	0052      	lsls	r2, r2, #1
 800a8ba:	431a      	orrs	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	ffffc001 	.word	0xffffc001

0800a8d4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	b480      	push	{r7}
 800a8d8:	b085      	sub	sp, #20
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	f107 001c 	add.w	r0, r7, #28
 800a8e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a8ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a8ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a8ee:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800a8f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800a8f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800a8fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	4b07      	ldr	r3, [pc, #28]	@ (800a924 <SDMMC_Init+0x50>)
 800a908:	4013      	ands	r3, r2
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	431a      	orrs	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	b004      	add	sp, #16
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	ffc02c00 	.word	0xffc02c00

0800a928 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a936:	4618      	mov	r0, r3
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr

0800a942 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a942:	b480      	push	{r7}
 800a944:	b083      	sub	sp, #12
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f043 0203 	orr.w	r2, r3, #3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a986:	b480      	push	{r7}
 800a988:	b083      	sub	sp, #12
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 0303 	and.w	r3, r3, #3
}
 800a996:	4618      	mov	r0, r3
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
	...

0800a9a4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a9c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a9c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a9ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	68da      	ldr	r2, [r3, #12]
 800a9da:	4b06      	ldr	r3, [pc, #24]	@ (800a9f4 <SDMMC_SendCommand+0x50>)
 800a9dc:	4013      	ands	r3, r2
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	431a      	orrs	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	fffee0c0 	.word	0xfffee0c0

0800a9f8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	b2db      	uxtb	r3, r3
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b085      	sub	sp, #20
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	3314      	adds	r3, #20
 800aa20:	461a      	mov	r2, r3
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	4413      	add	r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3714      	adds	r7, #20
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	685a      	ldr	r2, [r3, #4]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800aa5e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800aa64:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800aa6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	431a      	orrs	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800aa82:	2300      	movs	r3, #0

}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3714      	adds	r7, #20
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b088      	sub	sp, #32
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aa9e:	2310      	movs	r3, #16
 800aaa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aaa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aaa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aaac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aab0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aab2:	f107 0308 	add.w	r3, r7, #8
 800aab6:	4619      	mov	r1, r3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7ff ff73 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aabe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aac2:	2110      	movs	r1, #16
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fa81 	bl	800afcc <SDMMC_GetCmdResp1>
 800aaca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aacc:	69fb      	ldr	r3, [r7, #28]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3720      	adds	r7, #32
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b088      	sub	sp, #32
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aae4:	2311      	movs	r3, #17
 800aae6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aae8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aaec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aaf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aaf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aaf8:	f107 0308 	add.w	r3, r7, #8
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff ff50 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ab04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab08:	2111      	movs	r1, #17
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fa5e 	bl	800afcc <SDMMC_GetCmdResp1>
 800ab10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab12:	69fb      	ldr	r3, [r7, #28]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3720      	adds	r7, #32
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ab2a:	2312      	movs	r3, #18
 800ab2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab34:	2300      	movs	r3, #0
 800ab36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab3e:	f107 0308 	add.w	r3, r7, #8
 800ab42:	4619      	mov	r1, r3
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f7ff ff2d 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ab4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab4e:	2112      	movs	r1, #18
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fa3b 	bl	800afcc <SDMMC_GetCmdResp1>
 800ab56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab58:	69fb      	ldr	r3, [r7, #28]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3720      	adds	r7, #32
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b088      	sub	sp, #32
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ab70:	2318      	movs	r3, #24
 800ab72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab84:	f107 0308 	add.w	r3, r7, #8
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7ff ff0a 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ab90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab94:	2118      	movs	r1, #24
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 fa18 	bl	800afcc <SDMMC_GetCmdResp1>
 800ab9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab9e:	69fb      	ldr	r3, [r7, #28]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3720      	adds	r7, #32
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b088      	sub	sp, #32
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800abb6:	2319      	movs	r3, #25
 800abb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800abbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abc0:	2300      	movs	r3, #0
 800abc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abca:	f107 0308 	add.w	r3, r7, #8
 800abce:	4619      	mov	r1, r3
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7ff fee7 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800abd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abda:	2119      	movs	r1, #25
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 f9f5 	bl	800afcc <SDMMC_GetCmdResp1>
 800abe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abe4:	69fb      	ldr	r3, [r7, #28]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3720      	adds	r7, #32
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
	...

0800abf0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b088      	sub	sp, #32
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800abf8:	2300      	movs	r3, #0
 800abfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800abfc:	230c      	movs	r3, #12
 800abfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac06:	2300      	movs	r3, #0
 800ac08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac0e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac28:	f107 0308 	add.w	r3, r7, #8
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7ff feb8 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ac34:	4a0b      	ldr	r2, [pc, #44]	@ (800ac64 <SDMMC_CmdStopTransfer+0x74>)
 800ac36:	210c      	movs	r1, #12
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 f9c7 	bl	800afcc <SDMMC_GetCmdResp1>
 800ac3e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac52:	d101      	bne.n	800ac58 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ac54:	2300      	movs	r3, #0
 800ac56:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ac58:	69fb      	ldr	r3, [r7, #28]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3720      	adds	r7, #32
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	05f5e100 	.word	0x05f5e100

0800ac68 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b088      	sub	sp, #32
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ac76:	2307      	movs	r3, #7
 800ac78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac80:	2300      	movs	r3, #0
 800ac82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac8a:	f107 0308 	add.w	r3, r7, #8
 800ac8e:	4619      	mov	r1, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7ff fe87 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ac96:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac9a:	2107      	movs	r1, #7
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f995 	bl	800afcc <SDMMC_GetCmdResp1>
 800aca2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aca4:	69fb      	ldr	r3, [r7, #28]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3720      	adds	r7, #32
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b088      	sub	sp, #32
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800acb6:	2300      	movs	r3, #0
 800acb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800acba:	2300      	movs	r3, #0
 800acbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800acbe:	2300      	movs	r3, #0
 800acc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acc2:	2300      	movs	r3, #0
 800acc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800acca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800accc:	f107 0308 	add.w	r3, r7, #8
 800acd0:	4619      	mov	r1, r3
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7ff fe66 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fbb9 	bl	800b450 <SDMMC_GetCmdError>
 800acde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ace0:	69fb      	ldr	r3, [r7, #28]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3720      	adds	r7, #32
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b088      	sub	sp, #32
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800acf2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800acf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800acf8:	2308      	movs	r3, #8
 800acfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad02:	2300      	movs	r3, #0
 800ad04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad0c:	f107 0308 	add.w	r3, r7, #8
 800ad10:	4619      	mov	r1, r3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f7ff fe46 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fb4b 	bl	800b3b4 <SDMMC_GetCmdResp7>
 800ad1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad20:	69fb      	ldr	r3, [r7, #28]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3720      	adds	r7, #32
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b088      	sub	sp, #32
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ad38:	2337      	movs	r3, #55	@ 0x37
 800ad3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad42:	2300      	movs	r3, #0
 800ad44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad4c:	f107 0308 	add.w	r3, r7, #8
 800ad50:	4619      	mov	r1, r3
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7ff fe26 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ad58:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad5c:	2137      	movs	r1, #55	@ 0x37
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f934 	bl	800afcc <SDMMC_GetCmdResp1>
 800ad64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad66:	69fb      	ldr	r3, [r7, #28]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3720      	adds	r7, #32
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ad7e:	2329      	movs	r3, #41	@ 0x29
 800ad80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad92:	f107 0308 	add.w	r3, r7, #8
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7ff fe03 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fa50 	bl	800b244 <SDMMC_GetCmdResp3>
 800ada4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ada6:	69fb      	ldr	r3, [r7, #28]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3720      	adds	r7, #32
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800adbe:	2306      	movs	r3, #6
 800adc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adc8:	2300      	movs	r3, #0
 800adca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800add0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800add2:	f107 0308 	add.w	r3, r7, #8
 800add6:	4619      	mov	r1, r3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7ff fde3 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800adde:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ade2:	2106      	movs	r1, #6
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 f8f1 	bl	800afcc <SDMMC_GetCmdResp1>
 800adea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adec:	69fb      	ldr	r3, [r7, #28]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3720      	adds	r7, #32
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b088      	sub	sp, #32
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800adfe:	2300      	movs	r3, #0
 800ae00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ae02:	2333      	movs	r3, #51	@ 0x33
 800ae04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae16:	f107 0308 	add.w	r3, r7, #8
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f7ff fdc1 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ae22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae26:	2133      	movs	r1, #51	@ 0x33
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f8cf 	bl	800afcc <SDMMC_GetCmdResp1>
 800ae2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae30:	69fb      	ldr	r3, [r7, #28]
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3720      	adds	r7, #32
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b088      	sub	sp, #32
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ae42:	2300      	movs	r3, #0
 800ae44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ae46:	2302      	movs	r3, #2
 800ae48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ae4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ae4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae50:	2300      	movs	r3, #0
 800ae52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae5a:	f107 0308 	add.w	r3, r7, #8
 800ae5e:	4619      	mov	r1, r3
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff fd9f 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 f9a2 	bl	800b1b0 <SDMMC_GetCmdResp2>
 800ae6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae6e:	69fb      	ldr	r3, [r7, #28]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3720      	adds	r7, #32
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b088      	sub	sp, #32
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ae86:	2309      	movs	r3, #9
 800ae88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ae8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ae8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae90:	2300      	movs	r3, #0
 800ae92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae9a:	f107 0308 	add.w	r3, r7, #8
 800ae9e:	4619      	mov	r1, r3
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f7ff fd7f 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f982 	bl	800b1b0 <SDMMC_GetCmdResp2>
 800aeac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeae:	69fb      	ldr	r3, [r7, #28]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3720      	adds	r7, #32
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b088      	sub	sp, #32
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800aec2:	2300      	movs	r3, #0
 800aec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aec6:	2303      	movs	r3, #3
 800aec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aece:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aed0:	2300      	movs	r3, #0
 800aed2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aed4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aed8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeda:	f107 0308 	add.w	r3, r7, #8
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f7ff fd5f 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	2103      	movs	r1, #3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f9ea 	bl	800b2c4 <SDMMC_GetCmdResp6>
 800aef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aef2:	69fb      	ldr	r3, [r7, #28]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3720      	adds	r7, #32
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b088      	sub	sp, #32
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800af0a:	230d      	movs	r3, #13
 800af0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af14:	2300      	movs	r3, #0
 800af16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af1e:	f107 0308 	add.w	r3, r7, #8
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7ff fd3d 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800af2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af2e:	210d      	movs	r1, #13
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f84b 	bl	800afcc <SDMMC_GetCmdResp1>
 800af36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af38:	69fb      	ldr	r3, [r7, #28]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3720      	adds	r7, #32
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b088      	sub	sp, #32
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800af4e:	230d      	movs	r3, #13
 800af50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af58:	2300      	movs	r3, #0
 800af5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af62:	f107 0308 	add.w	r3, r7, #8
 800af66:	4619      	mov	r1, r3
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff fd1b 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800af6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af72:	210d      	movs	r1, #13
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f829 	bl	800afcc <SDMMC_GetCmdResp1>
 800af7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af7c:	69fb      	ldr	r3, [r7, #28]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3720      	adds	r7, #32
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b088      	sub	sp, #32
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800af94:	2306      	movs	r3, #6
 800af96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af9e:	2300      	movs	r3, #0
 800afa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800afa6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afa8:	f107 0308 	add.w	r3, r7, #8
 800afac:	4619      	mov	r1, r3
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f7ff fcf8 	bl	800a9a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800afb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afb8:	2106      	movs	r1, #6
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f806 	bl	800afcc <SDMMC_GetCmdResp1>
 800afc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afc2:	69fb      	ldr	r3, [r7, #28]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3720      	adds	r7, #32
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b088      	sub	sp, #32
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	460b      	mov	r3, r1
 800afd6:	607a      	str	r2, [r7, #4]
 800afd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800afda:	4b70      	ldr	r3, [pc, #448]	@ (800b19c <SDMMC_GetCmdResp1+0x1d0>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a70      	ldr	r2, [pc, #448]	@ (800b1a0 <SDMMC_GetCmdResp1+0x1d4>)
 800afe0:	fba2 2303 	umull	r2, r3, r2, r3
 800afe4:	0a5a      	lsrs	r2, r3, #9
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	fb02 f303 	mul.w	r3, r2, r3
 800afec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	1e5a      	subs	r2, r3, #1
 800aff2:	61fa      	str	r2, [r7, #28]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d102      	bne.n	800affe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aff8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800affc:	e0c9      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b002:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b004:	69ba      	ldr	r2, [r7, #24]
 800b006:	4b67      	ldr	r3, [pc, #412]	@ (800b1a4 <SDMMC_GetCmdResp1+0x1d8>)
 800b008:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d0ef      	beq.n	800afee <SDMMC_GetCmdResp1+0x22>
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1ea      	bne.n	800afee <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b01c:	f003 0304 	and.w	r3, r3, #4
 800b020:	2b00      	cmp	r3, #0
 800b022:	d004      	beq.n	800b02e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2204      	movs	r2, #4
 800b028:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b02a:	2304      	movs	r3, #4
 800b02c:	e0b1      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	2b00      	cmp	r3, #0
 800b038:	d004      	beq.n	800b044 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2201      	movs	r2, #1
 800b03e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b040:	2301      	movs	r3, #1
 800b042:	e0a6      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	4a58      	ldr	r2, [pc, #352]	@ (800b1a8 <SDMMC_GetCmdResp1+0x1dc>)
 800b048:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f7ff fcd4 	bl	800a9f8 <SDMMC_GetCommandResponse>
 800b050:	4603      	mov	r3, r0
 800b052:	461a      	mov	r2, r3
 800b054:	7afb      	ldrb	r3, [r7, #11]
 800b056:	4293      	cmp	r3, r2
 800b058:	d001      	beq.n	800b05e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e099      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b05e:	2100      	movs	r1, #0
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f7ff fcd6 	bl	800aa12 <SDMMC_GetResponse>
 800b066:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	4b50      	ldr	r3, [pc, #320]	@ (800b1ac <SDMMC_GetCmdResp1+0x1e0>)
 800b06c:	4013      	ands	r3, r2
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b072:	2300      	movs	r3, #0
 800b074:	e08d      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	da02      	bge.n	800b082 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b07c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b080:	e087      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b08c:	2340      	movs	r3, #64	@ 0x40
 800b08e:	e080      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b09a:	2380      	movs	r3, #128	@ 0x80
 800b09c:	e079      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b0a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0ac:	e071      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d002      	beq.n	800b0be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b0b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0bc:	e069      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b0c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0cc:	e061      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d002      	beq.n	800b0de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b0d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b0dc:	e059      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b0e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b0ec:	e051      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b0f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b0fc:	e049      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b104:	2b00      	cmp	r3, #0
 800b106:	d002      	beq.n	800b10e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b108:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b10c:	e041      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b118:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b11c:	e039      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b128:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b12c:	e031      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b138:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b13c:	e029      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d002      	beq.n	800b14e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b148:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b14c:	e021      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b158:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b15c:	e019      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b164:	2b00      	cmp	r3, #0
 800b166:	d002      	beq.n	800b16e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b168:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b16c:	e011      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b178:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b17c:	e009      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	f003 0308 	and.w	r3, r3, #8
 800b184:	2b00      	cmp	r3, #0
 800b186:	d002      	beq.n	800b18e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b188:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b18c:	e001      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b18e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b192:	4618      	mov	r0, r3
 800b194:	3720      	adds	r7, #32
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	20000000 	.word	0x20000000
 800b1a0:	10624dd3 	.word	0x10624dd3
 800b1a4:	00200045 	.word	0x00200045
 800b1a8:	002000c5 	.word	0x002000c5
 800b1ac:	fdffe008 	.word	0xfdffe008

0800b1b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b1b8:	4b1f      	ldr	r3, [pc, #124]	@ (800b238 <SDMMC_GetCmdResp2+0x88>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a1f      	ldr	r2, [pc, #124]	@ (800b23c <SDMMC_GetCmdResp2+0x8c>)
 800b1be:	fba2 2303 	umull	r2, r3, r2, r3
 800b1c2:	0a5b      	lsrs	r3, r3, #9
 800b1c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b1c8:	fb02 f303 	mul.w	r3, r2, r3
 800b1cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	1e5a      	subs	r2, r3, #1
 800b1d2:	60fa      	str	r2, [r7, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d102      	bne.n	800b1de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b1dc:	e026      	b.n	800b22c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1e2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d0ef      	beq.n	800b1ce <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1ea      	bne.n	800b1ce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1fc:	f003 0304 	and.w	r3, r3, #4
 800b200:	2b00      	cmp	r3, #0
 800b202:	d004      	beq.n	800b20e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2204      	movs	r2, #4
 800b208:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b20a:	2304      	movs	r3, #4
 800b20c:	e00e      	b.n	800b22c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	2b00      	cmp	r3, #0
 800b218:	d004      	beq.n	800b224 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b220:	2301      	movs	r3, #1
 800b222:	e003      	b.n	800b22c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a06      	ldr	r2, [pc, #24]	@ (800b240 <SDMMC_GetCmdResp2+0x90>)
 800b228:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	20000000 	.word	0x20000000
 800b23c:	10624dd3 	.word	0x10624dd3
 800b240:	002000c5 	.word	0x002000c5

0800b244 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b24c:	4b1a      	ldr	r3, [pc, #104]	@ (800b2b8 <SDMMC_GetCmdResp3+0x74>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a1a      	ldr	r2, [pc, #104]	@ (800b2bc <SDMMC_GetCmdResp3+0x78>)
 800b252:	fba2 2303 	umull	r2, r3, r2, r3
 800b256:	0a5b      	lsrs	r3, r3, #9
 800b258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b25c:	fb02 f303 	mul.w	r3, r2, r3
 800b260:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	1e5a      	subs	r2, r3, #1
 800b266:	60fa      	str	r2, [r7, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d102      	bne.n	800b272 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b26c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b270:	e01b      	b.n	800b2aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b276:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0ef      	beq.n	800b262 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1ea      	bne.n	800b262 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b290:	f003 0304 	and.w	r3, r3, #4
 800b294:	2b00      	cmp	r3, #0
 800b296:	d004      	beq.n	800b2a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2204      	movs	r2, #4
 800b29c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b29e:	2304      	movs	r3, #4
 800b2a0:	e003      	b.n	800b2aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a06      	ldr	r2, [pc, #24]	@ (800b2c0 <SDMMC_GetCmdResp3+0x7c>)
 800b2a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3714      	adds	r7, #20
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	20000000 	.word	0x20000000
 800b2bc:	10624dd3 	.word	0x10624dd3
 800b2c0:	002000c5 	.word	0x002000c5

0800b2c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b088      	sub	sp, #32
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	607a      	str	r2, [r7, #4]
 800b2d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b2d2:	4b35      	ldr	r3, [pc, #212]	@ (800b3a8 <SDMMC_GetCmdResp6+0xe4>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a35      	ldr	r2, [pc, #212]	@ (800b3ac <SDMMC_GetCmdResp6+0xe8>)
 800b2d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b2dc:	0a5b      	lsrs	r3, r3, #9
 800b2de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2e2:	fb02 f303 	mul.w	r3, r2, r3
 800b2e6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	1e5a      	subs	r2, r3, #1
 800b2ec:	61fa      	str	r2, [r7, #28]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d102      	bne.n	800b2f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b2f6:	e052      	b.n	800b39e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2fc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b304:	2b00      	cmp	r3, #0
 800b306:	d0ef      	beq.n	800b2e8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1ea      	bne.n	800b2e8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b316:	f003 0304 	and.w	r3, r3, #4
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d004      	beq.n	800b328 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2204      	movs	r2, #4
 800b322:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b324:	2304      	movs	r3, #4
 800b326:	e03a      	b.n	800b39e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b32c:	f003 0301 	and.w	r3, r3, #1
 800b330:	2b00      	cmp	r3, #0
 800b332:	d004      	beq.n	800b33e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2201      	movs	r2, #1
 800b338:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e02f      	b.n	800b39e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f7ff fb5a 	bl	800a9f8 <SDMMC_GetCommandResponse>
 800b344:	4603      	mov	r3, r0
 800b346:	461a      	mov	r2, r3
 800b348:	7afb      	ldrb	r3, [r7, #11]
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d001      	beq.n	800b352 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b34e:	2301      	movs	r3, #1
 800b350:	e025      	b.n	800b39e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	4a16      	ldr	r2, [pc, #88]	@ (800b3b0 <SDMMC_GetCmdResp6+0xec>)
 800b356:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b358:	2100      	movs	r1, #0
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f7ff fb59 	bl	800aa12 <SDMMC_GetResponse>
 800b360:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d106      	bne.n	800b37a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	0c1b      	lsrs	r3, r3, #16
 800b370:	b29a      	uxth	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b376:	2300      	movs	r3, #0
 800b378:	e011      	b.n	800b39e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b384:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b388:	e009      	b.n	800b39e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b394:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b398:	e001      	b.n	800b39e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b39a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3720      	adds	r7, #32
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	20000000 	.word	0x20000000
 800b3ac:	10624dd3 	.word	0x10624dd3
 800b3b0:	002000c5 	.word	0x002000c5

0800b3b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b3bc:	4b22      	ldr	r3, [pc, #136]	@ (800b448 <SDMMC_GetCmdResp7+0x94>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a22      	ldr	r2, [pc, #136]	@ (800b44c <SDMMC_GetCmdResp7+0x98>)
 800b3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3c6:	0a5b      	lsrs	r3, r3, #9
 800b3c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3cc:	fb02 f303 	mul.w	r3, r2, r3
 800b3d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	1e5a      	subs	r2, r3, #1
 800b3d6:	60fa      	str	r2, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d102      	bne.n	800b3e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b3e0:	e02c      	b.n	800b43c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3e6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d0ef      	beq.n	800b3d2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1ea      	bne.n	800b3d2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b400:	f003 0304 	and.w	r3, r3, #4
 800b404:	2b00      	cmp	r3, #0
 800b406:	d004      	beq.n	800b412 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2204      	movs	r2, #4
 800b40c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b40e:	2304      	movs	r3, #4
 800b410:	e014      	b.n	800b43c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b416:	f003 0301 	and.w	r3, r3, #1
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d004      	beq.n	800b428 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2201      	movs	r2, #1
 800b422:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b424:	2301      	movs	r3, #1
 800b426:	e009      	b.n	800b43c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b42c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b430:	2b00      	cmp	r3, #0
 800b432:	d002      	beq.n	800b43a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2240      	movs	r2, #64	@ 0x40
 800b438:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b43a:	2300      	movs	r3, #0

}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3714      	adds	r7, #20
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	20000000 	.word	0x20000000
 800b44c:	10624dd3 	.word	0x10624dd3

0800b450 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b458:	4b11      	ldr	r3, [pc, #68]	@ (800b4a0 <SDMMC_GetCmdError+0x50>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a11      	ldr	r2, [pc, #68]	@ (800b4a4 <SDMMC_GetCmdError+0x54>)
 800b45e:	fba2 2303 	umull	r2, r3, r2, r3
 800b462:	0a5b      	lsrs	r3, r3, #9
 800b464:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b468:	fb02 f303 	mul.w	r3, r2, r3
 800b46c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	1e5a      	subs	r2, r3, #1
 800b472:	60fa      	str	r2, [r7, #12]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d102      	bne.n	800b47e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b478:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b47c:	e009      	b.n	800b492 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b486:	2b00      	cmp	r3, #0
 800b488:	d0f1      	beq.n	800b46e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	4a06      	ldr	r2, [pc, #24]	@ (800b4a8 <SDMMC_GetCmdError+0x58>)
 800b48e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3714      	adds	r7, #20
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	20000000 	.word	0x20000000
 800b4a4:	10624dd3 	.word	0x10624dd3
 800b4a8:	002000c5 	.word	0x002000c5

0800b4ac <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b087      	sub	sp, #28
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	3b04      	subs	r3, #4
 800b4bc:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 800b4be:	2300      	movs	r3, #0
 800b4c0:	82fb      	strh	r3, [r7, #22]
 800b4c2:	e02a      	b.n	800b51a <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 800b4c4:	8afb      	ldrh	r3, [r7, #22]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	781a      	ldrb	r2, [r3, #0]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d11f      	bne.n	800b514 <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 800b4d4:	8afb      	ldrh	r3, [r7, #22]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4413      	add	r3, r2
 800b4dc:	781a      	ldrb	r2, [r3, #0]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d115      	bne.n	800b514 <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 800b4e8:	8afb      	ldrh	r3, [r7, #22]
 800b4ea:	3302      	adds	r3, #2
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	781a      	ldrb	r2, [r3, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	3302      	adds	r3, #2
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d10b      	bne.n	800b514 <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 800b4fc:	8afb      	ldrh	r3, [r7, #22]
 800b4fe:	3303      	adds	r3, #3
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	4413      	add	r3, r2
 800b504:	781a      	ldrb	r2, [r3, #0]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	3303      	adds	r3, #3
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d101      	bne.n	800b514 <__AVI_SearchID+0x68>
            return i;  
 800b510:	8afb      	ldrh	r3, [r7, #22]
 800b512:	e007      	b.n	800b524 <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 800b514:	8afb      	ldrh	r3, [r7, #22]
 800b516:	3301      	adds	r3, #1
 800b518:	82fb      	strh	r3, [r7, #22]
 800b51a:	8afb      	ldrh	r3, [r7, #22]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d8d0      	bhi.n	800b4c4 <__AVI_SearchID+0x18>
  }
  return 0;    
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	371c      	adds	r7, #28
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	3302      	adds	r3, #2
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	021b      	lsls	r3, r3, #8
 800b542:	b21a      	sxth	r2, r3
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	3303      	adds	r3, #3
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	b21b      	sxth	r3, r3
 800b54c:	4313      	orrs	r3, r2
 800b54e:	b21b      	sxth	r3, r3
 800b550:	b29a      	uxth	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	3304      	adds	r3, #4
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	461a      	mov	r2, r3
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	3305      	adds	r3, #5
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	021b      	lsls	r3, r3, #8
 800b566:	431a      	orrs	r2, r3
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	3306      	adds	r3, #6
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	041b      	lsls	r3, r3, #16
 800b570:	431a      	orrs	r2, r3
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	3307      	adds	r3, #7
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	061b      	lsls	r3, r3, #24
 800b57a:	4313      	orrs	r3, r2
 800b57c:	461a      	mov	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a1b      	ldr	r3, [r3, #32]
 800b586:	f003 0301 	and.w	r3, r3, #1
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d004      	beq.n	800b598 <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	1c5a      	adds	r2, r3, #1
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	8bdb      	ldrh	r3, [r3, #30]
 800b59c:	f246 4263 	movw	r2, #25699	@ 0x6463
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d005      	beq.n	800b5b0 <__AVI_GetStreamInfo+0x80>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	8bdb      	ldrh	r3, [r3, #30]
 800b5a8:	f247 7262 	movw	r2, #30562	@ 0x7762
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d101      	bne.n	800b5b4 <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	e000      	b.n	800b5b6 <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 800b5b4:	230b      	movs	r3, #11
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	370c      	adds	r7, #12
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr
	...

0800b5c4 <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b08e      	sub	sp, #56	@ 0x38
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 800b5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a87      	ldr	r2, [pc, #540]	@ (800b800 <__AVI_Init+0x23c>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d001      	beq.n	800b5ec <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e170      	b.n	800b8ce <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 800b5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	4a84      	ldr	r2, [pc, #528]	@ (800b804 <__AVI_Init+0x240>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d001      	beq.n	800b5fa <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 800b5f6:	2302      	movs	r3, #2
 800b5f8:	e169      	b.n	800b8ce <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	330c      	adds	r3, #12
 800b5fe:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800b604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a7f      	ldr	r2, [pc, #508]	@ (800b808 <__AVI_Init+0x244>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d001      	beq.n	800b612 <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 800b60e:	2303      	movs	r3, #3
 800b610:	e15d      	b.n	800b8ce <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 800b612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	4a7d      	ldr	r2, [pc, #500]	@ (800b80c <__AVI_Init+0x248>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d001      	beq.n	800b620 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 800b61c:	2304      	movs	r3, #4
 800b61e:	e156      	b.n	800b8ce <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	330c      	adds	r3, #12
 800b624:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 800b62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a78      	ldr	r2, [pc, #480]	@ (800b810 <__AVI_Init+0x24c>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d001      	beq.n	800b638 <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 800b634:	2305      	movs	r3, #5
 800b636:	e14a      	b.n	800b8ce <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 800b638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63a:	689a      	ldr	r2, [r3, #8]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 800b640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b642:	699a      	ldr	r2, [r3, #24]
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 800b648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64a:	685b      	ldr	r3, [r3, #4]
 800b64c:	3308      	adds	r3, #8
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	4413      	add	r3, r2
 800b652:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800b658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a6a      	ldr	r2, [pc, #424]	@ (800b808 <__AVI_Init+0x244>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d001      	beq.n	800b666 <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 800b662:	2303      	movs	r3, #3
 800b664:	e133      	b.n	800b8ce <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 800b666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	4a6a      	ldr	r2, [pc, #424]	@ (800b814 <__AVI_Init+0x250>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d001      	beq.n	800b674 <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 800b670:	2306      	movs	r3, #6
 800b672:	e12c      	b.n	800b8ce <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	330c      	adds	r3, #12
 800b678:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 800b67a:	6a3b      	ldr	r3, [r7, #32]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a66      	ldr	r2, [pc, #408]	@ (800b818 <__AVI_Init+0x254>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d001      	beq.n	800b688 <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 800b684:	2307      	movs	r3, #7
 800b686:	e122      	b.n	800b8ce <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 800b688:	6a3b      	ldr	r3, [r7, #32]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	4a63      	ldr	r2, [pc, #396]	@ (800b81c <__AVI_Init+0x258>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d16a      	bne.n	800b768 <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 800b692:	6a3b      	ldr	r3, [r7, #32]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	4a62      	ldr	r2, [pc, #392]	@ (800b820 <__AVI_Init+0x25c>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d001      	beq.n	800b6a0 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 800b69c:	230a      	movs	r3, #10
 800b69e:	e116      	b.n	800b8ce <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 800b6a0:	4a60      	ldr	r2, [pc, #384]	@ (800b824 <__AVI_Init+0x260>)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 800b6a6:	4a60      	ldr	r2, [pc, #384]	@ (800b828 <__AVI_Init+0x264>)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	3314      	adds	r3, #20
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a5b      	ldr	r2, [pc, #364]	@ (800b82c <__AVI_Init+0x268>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d001      	beq.n	800b6c6 <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 800b6c2:	2308      	movs	r3, #8
 800b6c4:	e103      	b.n	800b8ce <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	68da      	ldr	r2, [r3, #12]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	691a      	ldr	r2, [r3, #16]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 800b6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	3308      	adds	r3, #8
 800b6dc:	68ba      	ldr	r2, [r7, #8]
 800b6de:	4413      	add	r3, r2
 800b6e0:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800b6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a47      	ldr	r2, [pc, #284]	@ (800b808 <__AVI_Init+0x244>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d009      	beq.n	800b704 <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	839a      	strh	r2, [r3, #28]
 800b702:	e0b7      	b.n	800b874 <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 800b704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	4a42      	ldr	r2, [pc, #264]	@ (800b814 <__AVI_Init+0x250>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d001      	beq.n	800b712 <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 800b70e:	2306      	movs	r3, #6
 800b710:	e0dd      	b.n	800b8ce <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	330c      	adds	r3, #12
 800b716:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 800b718:	6a3b      	ldr	r3, [r7, #32]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a3e      	ldr	r2, [pc, #248]	@ (800b818 <__AVI_Init+0x254>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d001      	beq.n	800b726 <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 800b722:	2307      	movs	r3, #7
 800b724:	e0d3      	b.n	800b8ce <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	4a41      	ldr	r2, [pc, #260]	@ (800b830 <__AVI_Init+0x26c>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d001      	beq.n	800b734 <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 800b730:	230a      	movs	r3, #10
 800b732:	e0cc      	b.n	800b8ce <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	3314      	adds	r3, #20
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	4413      	add	r3, r2
 800b73e:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a39      	ldr	r2, [pc, #228]	@ (800b82c <__AVI_Init+0x268>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d001      	beq.n	800b74e <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 800b74a:	2308      	movs	r3, #8
 800b74c:	e0bf      	b.n	800b8ce <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	68da      	ldr	r2, [r3, #12]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	895a      	ldrh	r2, [r3, #10]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	891a      	ldrh	r2, [r3, #8]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	839a      	strh	r2, [r3, #28]
 800b766:	e085      	b.n	800b874 <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800b768:	6a3b      	ldr	r3, [r7, #32]
 800b76a:	689b      	ldr	r3, [r3, #8]
 800b76c:	4a30      	ldr	r2, [pc, #192]	@ (800b830 <__AVI_Init+0x26c>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	f040 8080 	bne.w	800b874 <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 800b774:	4a2f      	ldr	r2, [pc, #188]	@ (800b834 <__AVI_Init+0x270>)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 800b77a:	4a2f      	ldr	r2, [pc, #188]	@ (800b838 <__AVI_Init+0x274>)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800b780:	6a3b      	ldr	r3, [r7, #32]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	3314      	adds	r3, #20
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	4413      	add	r3, r2
 800b78a:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a26      	ldr	r2, [pc, #152]	@ (800b82c <__AVI_Init+0x268>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d001      	beq.n	800b79a <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 800b796:	2308      	movs	r3, #8
 800b798:	e099      	b.n	800b8ce <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	68da      	ldr	r2, [r3, #12]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	895a      	ldrh	r2, [r3, #10]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	891a      	ldrh	r2, [r3, #8]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 800b7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	3308      	adds	r3, #8
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800b7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a10      	ldr	r2, [pc, #64]	@ (800b808 <__AVI_Init+0x244>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d001      	beq.n	800b7d0 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	e07e      	b.n	800b8ce <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 800b7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	4a0f      	ldr	r2, [pc, #60]	@ (800b814 <__AVI_Init+0x250>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d001      	beq.n	800b7de <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 800b7da:	2306      	movs	r3, #6
 800b7dc:	e077      	b.n	800b8ce <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	330c      	adds	r3, #12
 800b7e2:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 800b7e4:	6a3b      	ldr	r3, [r7, #32]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a0b      	ldr	r2, [pc, #44]	@ (800b818 <__AVI_Init+0x254>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d001      	beq.n	800b7f2 <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 800b7ee:	2307      	movs	r3, #7
 800b7f0:	e06d      	b.n	800b8ce <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 800b7f2:	6a3b      	ldr	r3, [r7, #32]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	4a09      	ldr	r2, [pc, #36]	@ (800b81c <__AVI_Init+0x258>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d01f      	beq.n	800b83c <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 800b7fc:	230a      	movs	r3, #10
 800b7fe:	e066      	b.n	800b8ce <__AVI_Init+0x30a>
 800b800:	46464952 	.word	0x46464952
 800b804:	20495641 	.word	0x20495641
 800b808:	5453494c 	.word	0x5453494c
 800b80c:	6c726468 	.word	0x6c726468
 800b810:	68697661 	.word	0x68697661
 800b814:	6c727473 	.word	0x6c727473
 800b818:	68727473 	.word	0x68727473
 800b81c:	73646976 	.word	0x73646976
 800b820:	47504a4d 	.word	0x47504a4d
 800b824:	08011698 	.word	0x08011698
 800b828:	080116b0 	.word	0x080116b0
 800b82c:	66727473 	.word	0x66727473
 800b830:	73647561 	.word	0x73647561
 800b834:	080116a0 	.word	0x080116a0
 800b838:	080116a8 	.word	0x080116a8
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800b83c:	6a3b      	ldr	r3, [r7, #32]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	3314      	adds	r3, #20
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	4413      	add	r3, r2
 800b846:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a22      	ldr	r2, [pc, #136]	@ (800b8d8 <__AVI_Init+0x314>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d001      	beq.n	800b856 <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 800b852:	2308      	movs	r3, #8
 800b854:	e03b      	b.n	800b8ce <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	699b      	ldr	r3, [r3, #24]
 800b85a:	4a20      	ldr	r2, [pc, #128]	@ (800b8dc <__AVI_Init+0x318>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d001      	beq.n	800b864 <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 800b860:	230a      	movs	r3, #10
 800b862:	e034      	b.n	800b8ce <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	68da      	ldr	r2, [r3, #12]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	691a      	ldr	r2, [r3, #16]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 800b874:	4a1a      	ldr	r2, [pc, #104]	@ (800b8e0 <__AVI_Init+0x31c>)
 800b876:	6879      	ldr	r1, [r7, #4]
 800b878:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b87a:	f7ff fe17 	bl	800b4ac <__AVI_SearchID>
 800b87e:	4603      	mov	r3, r0
 800b880:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 800b882:	8afb      	ldrh	r3, [r7, #22]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d101      	bne.n	800b88c <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 800b888:	2309      	movs	r3, #9
 800b88a:	e020      	b.n	800b8ce <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	695b      	ldr	r3, [r3, #20]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d01a      	beq.n	800b8ca <__AVI_Init+0x306>
  {
    tbuf+=offset;
 800b894:	8afb      	ldrh	r3, [r7, #22]
 800b896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b898:	4413      	add	r3, r2
 800b89a:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	6879      	ldr	r1, [r7, #4]
 800b8a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b8a6:	f7ff fe01 	bl	800b4ac <__AVI_SearchID>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 800b8ae:	8afb      	ldrh	r3, [r7, #22]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d101      	bne.n	800b8b8 <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 800b8b4:	230b      	movs	r3, #11
 800b8b6:	e00a      	b.n	800b8ce <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 800b8b8:	8afb      	ldrh	r3, [r7, #22]
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8be:	4413      	add	r3, r2
 800b8c0:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c4:	881a      	ldrh	r2, [r3, #0]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 800b8ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3738      	adds	r7, #56	@ 0x38
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	66727473 	.word	0x66727473
 800b8dc:	47504a4d 	.word	0x47504a4d
 800b8e0:	080116b8 	.word	0x080116b8

0800b8e4 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
 800b8f0:	603b      	str	r3, [r7, #0]
  uint32_t readSize= 0;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	617b      	str	r3, [r7, #20]
  
  pavi->pVideoBuffer = pVideoBuffer;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	639a      	str	r2, [r3, #56]	@ 0x38

  pavi->pAudioBuffer = pAudioBuffer;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6a3a      	ldr	r2, [r7, #32]
 800b906:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b90c:	641a      	str	r2, [r3, #64]	@ 0x40
  
  f_lseek(file, 0 );
 800b90e:	2100      	movs	r1, #0
 800b910:	68b8      	ldr	r0, [r7, #8]
 800b912:	f004 feb0 	bl	8010676 <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b91a:	f107 0314 	add.w	r3, r7, #20
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	68b8      	ldr	r0, [r7, #8]
 800b922:	f004 fcc1 	bl	80102a8 <f_read>
  if(readSize != VideoBufferSize)
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d001      	beq.n	800b932 <AVI_ParserInit+0x4e>
  {
    return 1;
 800b92e:	2301      	movs	r3, #1
 800b930:	e013      	b.n	800b95a <AVI_ParserInit+0x76>
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	4619      	mov	r1, r3
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f7ff fe42 	bl	800b5c4 <__AVI_Init>
 800b940:	4603      	mov	r3, r0
 800b942:	2b00      	cmp	r3, #0
 800b944:	d001      	beq.n	800b94a <AVI_ParserInit+0x66>
  {
    return 1;    
 800b946:	2301      	movs	r3, #1
 800b948:	e007      	b.n	800b95a <AVI_ParserInit+0x76>
  }

  pavi->FileSize= f_size(file);
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	68da      	ldr	r2, [r3, #12]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3718      	adds	r7, #24
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
	...

0800b964 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file, uint8_t skipFlag)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b086      	sub	sp, #24
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	4613      	mov	r3, r2
 800b970:	71fb      	strb	r3, [r7, #7]
  uint32_t  offset ;
  uint32_t readSize = 0;
 800b972:	2300      	movs	r3, #0
 800b974:	613b      	str	r3, [r7, #16]
  
  if(pavi->CurrentImage== 0 )
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d124      	bne.n	800b9c8 <AVI_GetFrame+0x64>
  {
    
    f_lseek(file, 0 ); /* Go to the file start */
 800b97e:	2100      	movs	r1, #0
 800b980:	68b8      	ldr	r0, [r7, #8]
 800b982:	f004 fe78 	bl	8010676 <f_lseek>
    /* Read data*/
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b98e:	f107 0310 	add.w	r3, r7, #16
 800b992:	68b8      	ldr	r0, [r7, #8]
 800b994:	f004 fc88 	bl	80102a8 <f_read>
    
    /* Check for "movi" tag */
    offset = __AVI_SearchID(pavi->pVideoBuffer,pavi->VideoBufferSize,(uint8_t*)"movi");
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9a0:	4a49      	ldr	r2, [pc, #292]	@ (800bac8 <AVI_GetFrame+0x164>)
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	f7ff fd82 	bl	800b4ac <__AVI_SearchID>
 800b9a8:	6178      	str	r0, [r7, #20]
    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	3304      	adds	r3, #4
 800b9b2:	4413      	add	r3, r2
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f7ff fdba 	bl	800b530 <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	330c      	adds	r3, #12
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	68b8      	ldr	r0, [r7, #8]
 800b9c4:	f004 fe57 	bl	8010676 <f_lseek>
    
  }

  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	8bdb      	ldrh	r3, [r3, #30]
 800b9cc:	f246 4263 	movw	r2, #25699	@ 0x6463
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d158      	bne.n	800ba86 <AVI_GetFrame+0x122>
  {
    /* the Frame is a Video Frame */
       
	if(skipFlag == 1)
 800b9d4:	79fb      	ldrb	r3, [r7, #7]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d11b      	bne.n	800ba12 <AVI_GetFrame+0xae>
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6a1a      	ldr	r2, [r3, #32]
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	631a      	str	r2, [r3, #48]	@ 0x30

		f_lseek(file, f_tell(file) + pavi->FrameSize);
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	699a      	ldr	r2, [r3, #24]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ea:	4413      	add	r3, r2
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	68b8      	ldr	r0, [r7, #8]
 800b9f0:	f004 fe41 	bl	8010676 <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b9f8:	f107 0310 	add.w	r3, r7, #16
 800b9fc:	2208      	movs	r2, #8
 800b9fe:	68b8      	ldr	r0, [r7, #8]
 800ba00:	f004 fc52 	bl	80102a8 <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba08:	4619      	mov	r1, r3
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f7ff fd90 	bl	800b530 <__AVI_GetStreamInfo>
 800ba10:	e037      	b.n	800ba82 <AVI_GetFrame+0x11e>

	}
	else if(skipFlag == 2)
 800ba12:	79fb      	ldrb	r3, [r7, #7]
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d11c      	bne.n	800ba52 <AVI_GetFrame+0xee>
	{

		f_lseek(file, f_tell(file) - pavi->FrameSize - 8 - 8);
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	699a      	ldr	r2, [r3, #24]
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	3b10      	subs	r3, #16
 800ba24:	4619      	mov	r1, r3
 800ba26:	68b8      	ldr	r0, [r7, #8]
 800ba28:	f004 fe25 	bl	8010676 <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ba30:	f107 0310 	add.w	r3, r7, #16
 800ba34:	2208      	movs	r2, #8
 800ba36:	68b8      	ldr	r0, [r7, #8]
 800ba38:	f004 fc36 	bl	80102a8 <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba40:	4619      	mov	r1, r3
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f7ff fd74 	bl	800b530 <__AVI_GetStreamInfo>

		// Get the previous frame size
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6a1a      	ldr	r2, [r3, #32]
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba50:	e017      	b.n	800ba82 <AVI_GetFrame+0x11e>
	}
	else
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6a1a      	ldr	r2, [r3, #32]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Read The current frame + the header of the next frame (8 bytes) */
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba62:	f103 0208 	add.w	r2, r3, #8
 800ba66:	f107 0310 	add.w	r3, r7, #16
 800ba6a:	68b8      	ldr	r0, [r7, #8]
 800ba6c:	f004 fc1c 	bl	80102a8 <f_read>

		/* Get the info of the next frame */
		__AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6a1b      	ldr	r3, [r3, #32]
 800ba78:	4413      	add	r3, r2
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f7ff fd57 	bl	800b530 <__AVI_GetStreamInfo>
    	/* Return VIDEO frame */

	}
    
    return AVI_VIDEO_FRAME;
 800ba82:	2301      	movs	r3, #1
 800ba84:	e01c      	b.n	800bac0 <AVI_GetFrame+0x15c>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	8bdb      	ldrh	r3, [r3, #30]
 800ba8a:	f247 7262 	movw	r2, #30562	@ 0x7762
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d115      	bne.n	800babe <AVI_GetFrame+0x15a>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba9a:	f103 0208 	add.w	r2, r3, #8
 800ba9e:	f107 0310 	add.w	r3, r7, #16
 800baa2:	68b8      	ldr	r0, [r7, #8]
 800baa4:	f004 fc00 	bl	80102a8 <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6a1b      	ldr	r3, [r3, #32]
 800bab0:	4413      	add	r3, r2
 800bab2:	4619      	mov	r1, r3
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f7ff fd3b 	bl	800b530 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 800baba:	2302      	movs	r3, #2
 800babc:	e000      	b.n	800bac0 <AVI_GetFrame+0x15c>
    
  }
  
  return 0;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3718      	adds	r7, #24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	080116b8 	.word	0x080116b8

0800bacc <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	4603      	mov	r3, r0
 800bad4:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800bad6:	79fb      	ldrb	r3, [r7, #7]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d105      	bne.n	800bae8 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 800badc:	2200      	movs	r2, #0
 800bade:	2120      	movs	r1, #32
 800bae0:	4806      	ldr	r0, [pc, #24]	@ (800bafc <GC9A01_set_reset+0x30>)
 800bae2:	f7f6 f8dd 	bl	8001ca0 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800bae6:	e004      	b.n	800baf2 <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 800bae8:	2201      	movs	r2, #1
 800baea:	2120      	movs	r1, #32
 800baec:	4803      	ldr	r0, [pc, #12]	@ (800bafc <GC9A01_set_reset+0x30>)
 800baee:	f7f6 f8d7 	bl	8001ca0 <HAL_GPIO_WritePin>
}
 800baf2:	bf00      	nop
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	58022400 	.word	0x58022400

0800bb00 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	4603      	mov	r3, r0
 800bb08:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800bb0a:	79fb      	ldrb	r3, [r7, #7]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d105      	bne.n	800bb1c <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 800bb10:	2200      	movs	r2, #0
 800bb12:	2140      	movs	r1, #64	@ 0x40
 800bb14:	4806      	ldr	r0, [pc, #24]	@ (800bb30 <GC9A01_set_data_command+0x30>)
 800bb16:	f7f6 f8c3 	bl	8001ca0 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 800bb1a:	e004      	b.n	800bb26 <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	2140      	movs	r1, #64	@ 0x40
 800bb20:	4803      	ldr	r0, [pc, #12]	@ (800bb30 <GC9A01_set_data_command+0x30>)
 800bb22:	f7f6 f8bd 	bl	8001ca0 <HAL_GPIO_WritePin>
}
 800bb26:	bf00      	nop
 800bb28:	3708      	adds	r7, #8
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	58022400 	.word	0x58022400

0800bb34 <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800bb3e:	79fb      	ldrb	r3, [r7, #7]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d105      	bne.n	800bb50 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800bb44:	2200      	movs	r2, #0
 800bb46:	2102      	movs	r1, #2
 800bb48:	4806      	ldr	r0, [pc, #24]	@ (800bb64 <GC9A01_set_chip_select+0x30>)
 800bb4a:	f7f6 f8a9 	bl	8001ca0 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 800bb4e:	e004      	b.n	800bb5a <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800bb50:	2201      	movs	r2, #1
 800bb52:	2102      	movs	r1, #2
 800bb54:	4803      	ldr	r0, [pc, #12]	@ (800bb64 <GC9A01_set_chip_select+0x30>)
 800bb56:	f7f6 f8a3 	bl	8001ca0 <HAL_GPIO_WritePin>
}
 800bb5a:	bf00      	nop
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	58022800 	.word	0x58022800

0800bb68 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	4603      	mov	r3, r0
 800bb70:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 800bb72:	2000      	movs	r0, #0
 800bb74:	f7ff ffc4 	bl	800bb00 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 800bb78:	2000      	movs	r0, #0
 800bb7a:	f7ff ffdb 	bl	800bb34 <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 800bb7e:	1dfb      	adds	r3, r7, #7
 800bb80:	2101      	movs	r1, #1
 800bb82:	4618      	mov	r0, r3
 800bb84:	f000 fac4 	bl	800c110 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 800bb88:	2001      	movs	r0, #1
 800bb8a:	f7ff ffd3 	bl	800bb34 <GC9A01_set_chip_select>
}
 800bb8e:	bf00      	nop
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}

0800bb96 <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b082      	sub	sp, #8
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 800bba0:	2001      	movs	r0, #1
 800bba2:	f7ff ffad 	bl	800bb00 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 800bba6:	2000      	movs	r0, #0
 800bba8:	f7ff ffc4 	bl	800bb34 <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 faac 	bl	800c110 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 800bbb8:	2001      	movs	r0, #1
 800bbba:	f7ff ffbb 	bl	800bb34 <GC9A01_set_chip_select>
}
 800bbbe:	bf00      	nop
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b082      	sub	sp, #8
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	4603      	mov	r3, r0
 800bbce:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 800bbd0:	1dfb      	adds	r3, r7, #7
 800bbd2:	2101      	movs	r1, #1
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7ff ffde 	bl	800bb96 <GC9A01_write_data>
}
 800bbda:	bf00      	nop
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <GC9A01_init>:
void GC9A01_write_continue(uint8_t *data, size_t len) {
    GC9A01_write_command(MEM_WR_CONT);
    GC9A01_write_data(data, len);
}

void GC9A01_init(void) {
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800bbe6:	2001      	movs	r0, #1
 800bbe8:	f7ff ffa4 	bl	800bb34 <GC9A01_set_chip_select>
    HAL_Delay(5);
 800bbec:	2005      	movs	r0, #5
 800bbee:	f7f5 f995 	bl	8000f1c <HAL_Delay>
    GC9A01_set_reset(OFF);
 800bbf2:	2000      	movs	r0, #0
 800bbf4:	f7ff ff6a 	bl	800bacc <GC9A01_set_reset>
    HAL_Delay(10);
 800bbf8:	200a      	movs	r0, #10
 800bbfa:	f7f5 f98f 	bl	8000f1c <HAL_Delay>
    GC9A01_set_reset(ON);
 800bbfe:	2001      	movs	r0, #1
 800bc00:	f7ff ff64 	bl	800bacc <GC9A01_set_reset>
    HAL_Delay(120);
 800bc04:	2078      	movs	r0, #120	@ 0x78
 800bc06:	f7f5 f989 	bl	8000f1c <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 800bc0a:	20ef      	movs	r0, #239	@ 0xef
 800bc0c:	f7ff ffac 	bl	800bb68 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 800bc10:	20eb      	movs	r0, #235	@ 0xeb
 800bc12:	f7ff ffa9 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800bc16:	2014      	movs	r0, #20
 800bc18:	f7ff ffd5 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 800bc1c:	20fe      	movs	r0, #254	@ 0xfe
 800bc1e:	f7ff ffa3 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800bc22:	20ef      	movs	r0, #239	@ 0xef
 800bc24:	f7ff ffa0 	bl	800bb68 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 800bc28:	20eb      	movs	r0, #235	@ 0xeb
 800bc2a:	f7ff ff9d 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800bc2e:	2014      	movs	r0, #20
 800bc30:	f7ff ffc9 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 800bc34:	2084      	movs	r0, #132	@ 0x84
 800bc36:	f7ff ff97 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 800bc3a:	2040      	movs	r0, #64	@ 0x40
 800bc3c:	f7ff ffc3 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 800bc40:	2085      	movs	r0, #133	@ 0x85
 800bc42:	f7ff ff91 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bc46:	20ff      	movs	r0, #255	@ 0xff
 800bc48:	f7ff ffbd 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 800bc4c:	2086      	movs	r0, #134	@ 0x86
 800bc4e:	f7ff ff8b 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bc52:	20ff      	movs	r0, #255	@ 0xff
 800bc54:	f7ff ffb7 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 800bc58:	2087      	movs	r0, #135	@ 0x87
 800bc5a:	f7ff ff85 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bc5e:	20ff      	movs	r0, #255	@ 0xff
 800bc60:	f7ff ffb1 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 800bc64:	2088      	movs	r0, #136	@ 0x88
 800bc66:	f7ff ff7f 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 800bc6a:	200a      	movs	r0, #10
 800bc6c:	f7ff ffab 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 800bc70:	2089      	movs	r0, #137	@ 0x89
 800bc72:	f7ff ff79 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800bc76:	2021      	movs	r0, #33	@ 0x21
 800bc78:	f7ff ffa5 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 800bc7c:	208a      	movs	r0, #138	@ 0x8a
 800bc7e:	f7ff ff73 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bc82:	2000      	movs	r0, #0
 800bc84:	f7ff ff9f 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 800bc88:	208b      	movs	r0, #139	@ 0x8b
 800bc8a:	f7ff ff6d 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 800bc8e:	2080      	movs	r0, #128	@ 0x80
 800bc90:	f7ff ff99 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 800bc94:	208c      	movs	r0, #140	@ 0x8c
 800bc96:	f7ff ff67 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800bc9a:	2001      	movs	r0, #1
 800bc9c:	f7ff ff93 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 800bca0:	208d      	movs	r0, #141	@ 0x8d
 800bca2:	f7ff ff61 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800bca6:	2001      	movs	r0, #1
 800bca8:	f7ff ff8d 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 800bcac:	208e      	movs	r0, #142	@ 0x8e
 800bcae:	f7ff ff5b 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bcb2:	20ff      	movs	r0, #255	@ 0xff
 800bcb4:	f7ff ff87 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 800bcb8:	208f      	movs	r0, #143	@ 0x8f
 800bcba:	f7ff ff55 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bcbe:	20ff      	movs	r0, #255	@ 0xff
 800bcc0:	f7ff ff81 	bl	800bbc6 <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800bcc4:	20b6      	movs	r0, #182	@ 0xb6
 800bcc6:	f7ff ff4f 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bcca:	2000      	movs	r0, #0
 800bccc:	f7ff ff7b 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	f7ff ff78 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800bcd6:	2036      	movs	r0, #54	@ 0x36
 800bcd8:	f7ff ff46 	bl	800bb68 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 800bcdc:	2048      	movs	r0, #72	@ 0x48
 800bcde:	f7ff ff72 	bl	800bbc6 <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800bce2:	203a      	movs	r0, #58	@ 0x3a
 800bce4:	f7ff ff40 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 800bce8:	2005      	movs	r0, #5
 800bcea:	f7ff ff6c 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 800bcee:	2090      	movs	r0, #144	@ 0x90
 800bcf0:	f7ff ff3a 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800bcf4:	2008      	movs	r0, #8
 800bcf6:	f7ff ff66 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bcfa:	2008      	movs	r0, #8
 800bcfc:	f7ff ff63 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bd00:	2008      	movs	r0, #8
 800bd02:	f7ff ff60 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bd06:	2008      	movs	r0, #8
 800bd08:	f7ff ff5d 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 800bd0c:	20bd      	movs	r0, #189	@ 0xbd
 800bd0e:	f7ff ff2b 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800bd12:	2006      	movs	r0, #6
 800bd14:	f7ff ff57 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 800bd18:	20bc      	movs	r0, #188	@ 0xbc
 800bd1a:	f7ff ff25 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bd1e:	2000      	movs	r0, #0
 800bd20:	f7ff ff51 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800bd24:	20ff      	movs	r0, #255	@ 0xff
 800bd26:	f7ff ff1f 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 800bd2a:	2060      	movs	r0, #96	@ 0x60
 800bd2c:	f7ff ff4b 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800bd30:	2001      	movs	r0, #1
 800bd32:	f7ff ff48 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800bd36:	2004      	movs	r0, #4
 800bd38:	f7ff ff45 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 800bd3c:	20c3      	movs	r0, #195	@ 0xc3
 800bd3e:	f7ff ff13 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 800bd42:	2013      	movs	r0, #19
 800bd44:	f7ff ff3f 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 800bd48:	20c4      	movs	r0, #196	@ 0xc4
 800bd4a:	f7ff ff0d 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 800bd4e:	2013      	movs	r0, #19
 800bd50:	f7ff ff39 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 800bd54:	20c9      	movs	r0, #201	@ 0xc9
 800bd56:	f7ff ff07 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 800bd5a:	2022      	movs	r0, #34	@ 0x22
 800bd5c:	f7ff ff33 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 800bd60:	20be      	movs	r0, #190	@ 0xbe
 800bd62:	f7ff ff01 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 800bd66:	2011      	movs	r0, #17
 800bd68:	f7ff ff2d 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 800bd6c:	20e1      	movs	r0, #225	@ 0xe1
 800bd6e:	f7ff fefb 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800bd72:	2010      	movs	r0, #16
 800bd74:	f7ff ff27 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 800bd78:	200e      	movs	r0, #14
 800bd7a:	f7ff ff24 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 800bd7e:	20df      	movs	r0, #223	@ 0xdf
 800bd80:	f7ff fef2 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800bd84:	2021      	movs	r0, #33	@ 0x21
 800bd86:	f7ff ff1e 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 800bd8a:	200c      	movs	r0, #12
 800bd8c:	f7ff ff1b 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 800bd90:	2002      	movs	r0, #2
 800bd92:	f7ff ff18 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 800bd96:	20f0      	movs	r0, #240	@ 0xf0
 800bd98:	f7ff fee6 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 800bd9c:	2045      	movs	r0, #69	@ 0x45
 800bd9e:	f7ff ff12 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800bda2:	2009      	movs	r0, #9
 800bda4:	f7ff ff0f 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bda8:	2008      	movs	r0, #8
 800bdaa:	f7ff ff0c 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bdae:	2008      	movs	r0, #8
 800bdb0:	f7ff ff09 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800bdb4:	2026      	movs	r0, #38	@ 0x26
 800bdb6:	f7ff ff06 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 800bdba:	202a      	movs	r0, #42	@ 0x2a
 800bdbc:	f7ff ff03 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 800bdc0:	20f1      	movs	r0, #241	@ 0xf1
 800bdc2:	f7ff fed1 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800bdc6:	2043      	movs	r0, #67	@ 0x43
 800bdc8:	f7ff fefd 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bdcc:	2070      	movs	r0, #112	@ 0x70
 800bdce:	f7ff fefa 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800bdd2:	2072      	movs	r0, #114	@ 0x72
 800bdd4:	f7ff fef7 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 800bdd8:	2036      	movs	r0, #54	@ 0x36
 800bdda:	f7ff fef4 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800bdde:	2037      	movs	r0, #55	@ 0x37
 800bde0:	f7ff fef1 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800bde4:	206f      	movs	r0, #111	@ 0x6f
 800bde6:	f7ff feee 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 800bdea:	20f2      	movs	r0, #242	@ 0xf2
 800bdec:	f7ff febc 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 800bdf0:	2045      	movs	r0, #69	@ 0x45
 800bdf2:	f7ff fee8 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800bdf6:	2009      	movs	r0, #9
 800bdf8:	f7ff fee5 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bdfc:	2008      	movs	r0, #8
 800bdfe:	f7ff fee2 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800be02:	2008      	movs	r0, #8
 800be04:	f7ff fedf 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800be08:	2026      	movs	r0, #38	@ 0x26
 800be0a:	f7ff fedc 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 800be0e:	202a      	movs	r0, #42	@ 0x2a
 800be10:	f7ff fed9 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800be14:	20f3      	movs	r0, #243	@ 0xf3
 800be16:	f7ff fea7 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800be1a:	2043      	movs	r0, #67	@ 0x43
 800be1c:	f7ff fed3 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800be20:	2070      	movs	r0, #112	@ 0x70
 800be22:	f7ff fed0 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800be26:	2072      	movs	r0, #114	@ 0x72
 800be28:	f7ff fecd 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 800be2c:	2036      	movs	r0, #54	@ 0x36
 800be2e:	f7ff feca 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800be32:	2037      	movs	r0, #55	@ 0x37
 800be34:	f7ff fec7 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800be38:	206f      	movs	r0, #111	@ 0x6f
 800be3a:	f7ff fec4 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 800be3e:	20ed      	movs	r0, #237	@ 0xed
 800be40:	f7ff fe92 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 800be44:	201b      	movs	r0, #27
 800be46:	f7ff febe 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 800be4a:	200b      	movs	r0, #11
 800be4c:	f7ff febb 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 800be50:	20ae      	movs	r0, #174	@ 0xae
 800be52:	f7ff fe89 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 800be56:	2077      	movs	r0, #119	@ 0x77
 800be58:	f7ff feb5 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 800be5c:	20cd      	movs	r0, #205	@ 0xcd
 800be5e:	f7ff fe83 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 800be62:	2063      	movs	r0, #99	@ 0x63
 800be64:	f7ff feaf 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 800be68:	2070      	movs	r0, #112	@ 0x70
 800be6a:	f7ff fe7d 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 800be6e:	2007      	movs	r0, #7
 800be70:	f7ff fea9 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800be74:	2007      	movs	r0, #7
 800be76:	f7ff fea6 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800be7a:	2004      	movs	r0, #4
 800be7c:	f7ff fea3 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 800be80:	200e      	movs	r0, #14
 800be82:	f7ff fea0 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800be86:	200f      	movs	r0, #15
 800be88:	f7ff fe9d 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800be8c:	2009      	movs	r0, #9
 800be8e:	f7ff fe9a 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800be92:	2007      	movs	r0, #7
 800be94:	f7ff fe97 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800be98:	2008      	movs	r0, #8
 800be9a:	f7ff fe94 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 800be9e:	2003      	movs	r0, #3
 800bea0:	f7ff fe91 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 800bea4:	20e8      	movs	r0, #232	@ 0xe8
 800bea6:	f7ff fe5f 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 800beaa:	2034      	movs	r0, #52	@ 0x34
 800beac:	f7ff fe8b 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 800beb0:	2062      	movs	r0, #98	@ 0x62
 800beb2:	f7ff fe59 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800beb6:	2018      	movs	r0, #24
 800beb8:	f7ff fe85 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 800bebc:	200d      	movs	r0, #13
 800bebe:	f7ff fe82 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800bec2:	2071      	movs	r0, #113	@ 0x71
 800bec4:	f7ff fe7f 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 800bec8:	20ed      	movs	r0, #237	@ 0xed
 800beca:	f7ff fe7c 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bece:	2070      	movs	r0, #112	@ 0x70
 800bed0:	f7ff fe79 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bed4:	2070      	movs	r0, #112	@ 0x70
 800bed6:	f7ff fe76 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 800beda:	2018      	movs	r0, #24
 800bedc:	f7ff fe73 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800bee0:	200f      	movs	r0, #15
 800bee2:	f7ff fe70 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800bee6:	2071      	movs	r0, #113	@ 0x71
 800bee8:	f7ff fe6d 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 800beec:	20ef      	movs	r0, #239	@ 0xef
 800beee:	f7ff fe6a 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bef2:	2070      	movs	r0, #112	@ 0x70
 800bef4:	f7ff fe67 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bef8:	2070      	movs	r0, #112	@ 0x70
 800befa:	f7ff fe64 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 800befe:	2063      	movs	r0, #99	@ 0x63
 800bf00:	f7ff fe32 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800bf04:	2018      	movs	r0, #24
 800bf06:	f7ff fe5e 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 800bf0a:	2011      	movs	r0, #17
 800bf0c:	f7ff fe5b 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800bf10:	2071      	movs	r0, #113	@ 0x71
 800bf12:	f7ff fe58 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800bf16:	20f1      	movs	r0, #241	@ 0xf1
 800bf18:	f7ff fe55 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bf1c:	2070      	movs	r0, #112	@ 0x70
 800bf1e:	f7ff fe52 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bf22:	2070      	movs	r0, #112	@ 0x70
 800bf24:	f7ff fe4f 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 800bf28:	2018      	movs	r0, #24
 800bf2a:	f7ff fe4c 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 800bf2e:	2013      	movs	r0, #19
 800bf30:	f7ff fe49 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800bf34:	2071      	movs	r0, #113	@ 0x71
 800bf36:	f7ff fe46 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 800bf3a:	20f3      	movs	r0, #243	@ 0xf3
 800bf3c:	f7ff fe43 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bf40:	2070      	movs	r0, #112	@ 0x70
 800bf42:	f7ff fe40 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bf46:	2070      	movs	r0, #112	@ 0x70
 800bf48:	f7ff fe3d 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 800bf4c:	2064      	movs	r0, #100	@ 0x64
 800bf4e:	f7ff fe0b 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 800bf52:	2028      	movs	r0, #40	@ 0x28
 800bf54:	f7ff fe37 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 800bf58:	2029      	movs	r0, #41	@ 0x29
 800bf5a:	f7ff fe34 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800bf5e:	20f1      	movs	r0, #241	@ 0xf1
 800bf60:	f7ff fe31 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800bf64:	2001      	movs	r0, #1
 800bf66:	f7ff fe2e 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800bf6a:	20f1      	movs	r0, #241	@ 0xf1
 800bf6c:	f7ff fe2b 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bf70:	2000      	movs	r0, #0
 800bf72:	f7ff fe28 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800bf76:	2007      	movs	r0, #7
 800bf78:	f7ff fe25 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 800bf7c:	2066      	movs	r0, #102	@ 0x66
 800bf7e:	f7ff fdf3 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 800bf82:	203c      	movs	r0, #60	@ 0x3c
 800bf84:	f7ff fe1f 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bf88:	2000      	movs	r0, #0
 800bf8a:	f7ff fe1c 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 800bf8e:	20cd      	movs	r0, #205	@ 0xcd
 800bf90:	f7ff fe19 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800bf94:	2067      	movs	r0, #103	@ 0x67
 800bf96:	f7ff fe16 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 800bf9a:	2045      	movs	r0, #69	@ 0x45
 800bf9c:	f7ff fe13 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 800bfa0:	2045      	movs	r0, #69	@ 0x45
 800bfa2:	f7ff fe10 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800bfa6:	2010      	movs	r0, #16
 800bfa8:	f7ff fe0d 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfac:	2000      	movs	r0, #0
 800bfae:	f7ff fe0a 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfb2:	2000      	movs	r0, #0
 800bfb4:	f7ff fe07 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfb8:	2000      	movs	r0, #0
 800bfba:	f7ff fe04 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 800bfbe:	2067      	movs	r0, #103	@ 0x67
 800bfc0:	f7ff fdd2 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	f7ff fdfe 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 800bfca:	203c      	movs	r0, #60	@ 0x3c
 800bfcc:	f7ff fdfb 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	f7ff fdf8 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	f7ff fdf5 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfdc:	2000      	movs	r0, #0
 800bfde:	f7ff fdf2 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800bfe2:	2001      	movs	r0, #1
 800bfe4:	f7ff fdef 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 800bfe8:	2054      	movs	r0, #84	@ 0x54
 800bfea:	f7ff fdec 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800bfee:	2010      	movs	r0, #16
 800bff0:	f7ff fde9 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 800bff4:	2032      	movs	r0, #50	@ 0x32
 800bff6:	f7ff fde6 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 800bffa:	2098      	movs	r0, #152	@ 0x98
 800bffc:	f7ff fde3 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 800c000:	2074      	movs	r0, #116	@ 0x74
 800c002:	f7ff fdb1 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800c006:	2010      	movs	r0, #16
 800c008:	f7ff fddd 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 800c00c:	2085      	movs	r0, #133	@ 0x85
 800c00e:	f7ff fdda 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800c012:	2080      	movs	r0, #128	@ 0x80
 800c014:	f7ff fdd7 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c018:	2000      	movs	r0, #0
 800c01a:	f7ff fdd4 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c01e:	2000      	movs	r0, #0
 800c020:	f7ff fdd1 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800c024:	204e      	movs	r0, #78	@ 0x4e
 800c026:	f7ff fdce 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c02a:	2000      	movs	r0, #0
 800c02c:	f7ff fdcb 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 800c030:	2098      	movs	r0, #152	@ 0x98
 800c032:	f7ff fd99 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 800c036:	203e      	movs	r0, #62	@ 0x3e
 800c038:	f7ff fdc5 	bl	800bbc6 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800c03c:	2007      	movs	r0, #7
 800c03e:	f7ff fdc2 	bl	800bbc6 <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 800c042:	2035      	movs	r0, #53	@ 0x35
 800c044:	f7ff fd90 	bl	800bb68 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 800c048:	2021      	movs	r0, #33	@ 0x21
 800c04a:	f7ff fd8d 	bl	800bb68 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 800c04e:	2011      	movs	r0, #17
 800c050:	f7ff fd8a 	bl	800bb68 <GC9A01_write_command>
    HAL_Delay(120);
 800c054:	2078      	movs	r0, #120	@ 0x78
 800c056:	f7f4 ff61 	bl	8000f1c <HAL_Delay>
    GC9A01_write_command(0x29);
 800c05a:	2029      	movs	r0, #41	@ 0x29
 800c05c:	f7ff fd84 	bl	800bb68 <GC9A01_write_command>
    HAL_Delay(20);
 800c060:	2014      	movs	r0, #20
 800c062:	f7f4 ff5b 	bl	8000f1c <HAL_Delay>
    
}
 800c066:	bf00      	nop
 800c068:	bd80      	pop	{r7, pc}

0800c06a <GC9A01_set_frame>:

void GC9A01_set_frame(struct GC9A01_frame frame) {
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b084      	sub	sp, #16
 800c06e:	af00      	add	r7, sp, #0
 800c070:	463b      	mov	r3, r7
 800c072:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t data[4];
    
    GC9A01_write_command(COL_ADDR_SET);
 800c076:	202a      	movs	r0, #42	@ 0x2a
 800c078:	f7ff fd76 	bl	800bb68 <GC9A01_write_command>
    data[0] = (frame.start.X >> 8) & 0xFF;
 800c07c:	883b      	ldrh	r3, [r7, #0]
 800c07e:	0a1b      	lsrs	r3, r3, #8
 800c080:	b29b      	uxth	r3, r3
 800c082:	b2db      	uxtb	r3, r3
 800c084:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.X & 0xFF;
 800c086:	883b      	ldrh	r3, [r7, #0]
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.X >> 8) & 0xFF;
 800c08c:	88bb      	ldrh	r3, [r7, #4]
 800c08e:	0a1b      	lsrs	r3, r3, #8
 800c090:	b29b      	uxth	r3, r3
 800c092:	b2db      	uxtb	r3, r3
 800c094:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.X & 0xFF;
 800c096:	88bb      	ldrh	r3, [r7, #4]
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 800c09c:	f107 030c 	add.w	r3, r7, #12
 800c0a0:	2104      	movs	r1, #4
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7ff fd77 	bl	800bb96 <GC9A01_write_data>

    GC9A01_write_command(ROW_ADDR_SET);
 800c0a8:	202b      	movs	r0, #43	@ 0x2b
 800c0aa:	f7ff fd5d 	bl	800bb68 <GC9A01_write_command>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 800c0ae:	887b      	ldrh	r3, [r7, #2]
 800c0b0:	0a1b      	lsrs	r3, r3, #8
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.Y & 0xFF;
 800c0b8:	887b      	ldrh	r3, [r7, #2]
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.Y >> 8) & 0xFF;
 800c0be:	88fb      	ldrh	r3, [r7, #6]
 800c0c0:	0a1b      	lsrs	r3, r3, #8
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.Y & 0xFF;
 800c0c8:	88fb      	ldrh	r3, [r7, #6]
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 800c0ce:	f107 030c 	add.w	r3, r7, #12
 800c0d2:	2104      	movs	r1, #4
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7ff fd5e 	bl	800bb96 <GC9A01_write_data>
    
}
 800c0da:	bf00      	nop
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <GC9A01_sleep_mode>:


void GC9A01_sleep_mode(uint8_t command)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b082      	sub	sp, #8
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	71fb      	strb	r3, [r7, #7]

	if(command)
 800c0ec:	79fb      	ldrb	r3, [r7, #7]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d003      	beq.n	800c0fa <GC9A01_sleep_mode+0x18>
		GC9A01_write_command(SLEEP_MODE_ON);
 800c0f2:	2010      	movs	r0, #16
 800c0f4:	f7ff fd38 	bl	800bb68 <GC9A01_write_command>
 800c0f8:	e002      	b.n	800c100 <GC9A01_sleep_mode+0x1e>
	else
		GC9A01_write_command(SLEEP_MODE_OFF);
 800c0fa:	2011      	movs	r0, #17
 800c0fc:	f7ff fd34 	bl	800bb68 <GC9A01_write_command>

	HAL_Delay(120);
 800c100:	2078      	movs	r0, #120	@ 0x78
 800c102:	f7f4 ff0b 	bl	8000f1c <HAL_Delay>

}
 800c106:	bf00      	nop
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
	...

0800c110 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b082      	sub	sp, #8
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	460b      	mov	r3, r1
 800c11a:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 800c11c:	887a      	ldrh	r2, [r7, #2]
 800c11e:	f04f 33ff 	mov.w	r3, #4294967295
 800c122:	6879      	ldr	r1, [r7, #4]
 800c124:	4806      	ldr	r0, [pc, #24]	@ (800c140 <GC9A01_spi_tx+0x30>)
 800c126:	f7fd fffb 	bl	800a120 <HAL_SPI_Transmit>
 800c12a:	4603      	mov	r3, r0
 800c12c:	461a      	mov	r2, r3
 800c12e:	4b05      	ldr	r3, [pc, #20]	@ (800c144 <GC9A01_spi_tx+0x34>)
 800c130:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 800c132:	4b04      	ldr	r3, [pc, #16]	@ (800c144 <GC9A01_spi_tx+0x34>)
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
		return;

}
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	200002dc 	.word	0x200002dc
 800c144:	200001cc 	.word	0x200001cc

0800c148 <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af02      	add	r7, sp, #8
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	607a      	str	r2, [r7, #4]
 800c154:	603b      	str	r3, [r7, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 800c156:	4a11      	ldr	r2, [pc, #68]	@ (800c19c <JPEG_Decode_DMA+0x54>)
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 800c15c:	4a10      	ldr	r2, [pc, #64]	@ (800c1a0 <JPEG_Decode_DMA+0x58>)
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	6013      	str	r3, [r2, #0]
  Input_frameIndex=0;
 800c162:	4b10      	ldr	r3, [pc, #64]	@ (800c1a4 <JPEG_Decode_DMA+0x5c>)
 800c164:	2200      	movs	r2, #0
 800c166:	601a      	str	r2, [r3, #0]
  Input_frameSize = FrameSize;
 800c168:	4a0f      	ldr	r2, [pc, #60]	@ (800c1a8 <JPEG_Decode_DMA+0x60>)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6013      	str	r3, [r2, #0]
  
  Jpeg_HWDecodingEnd = 0;
 800c16e:	4b0f      	ldr	r3, [pc, #60]	@ (800c1ac <JPEG_Decode_DMA+0x64>)
 800c170:	2200      	movs	r2, #0
 800c172:	601a      	str	r2, [r3, #0]
  
  /* Start JPEG decoding with DMA method */
  HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT);
 800c174:	4b09      	ldr	r3, [pc, #36]	@ (800c19c <JPEG_Decode_DMA+0x54>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4619      	mov	r1, r3
 800c17a:	4b09      	ldr	r3, [pc, #36]	@ (800c1a0 <JPEG_Decode_DMA+0x58>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	461a      	mov	r2, r3
 800c180:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	4613      	mov	r3, r2
 800c188:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f7f5 fed2 	bl	8001f36 <HAL_JPEG_Decode_DMA>
  
  
  return 0;
 800c192:	2300      	movs	r3, #0
  
}
 800c194:	4618      	mov	r0, r3
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	200001d8 	.word	0x200001d8
 800c1a0:	200001d4 	.word	0x200001d4
 800c1a4:	200001e0 	.word	0x200001e0
 800c1a8:	200001dc 	.word	0x200001dc
 800c1ac:	200001d0 	.word	0x200001d0

0800c1b0 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
}
 800c1ba:	bf00      	nop
 800c1bc:	370c      	adds	r7, #12
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
	...

0800c1c8 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 800c1d2:	4b19      	ldr	r3, [pc, #100]	@ (800c238 <HAL_JPEG_GetDataCallback+0x70>)
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	4413      	add	r3, r2
 800c1da:	4a17      	ldr	r2, [pc, #92]	@ (800c238 <HAL_JPEG_GetDataCallback+0x70>)
 800c1dc:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 800c1de:	4b16      	ldr	r3, [pc, #88]	@ (800c238 <HAL_JPEG_GetDataCallback+0x70>)
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	4b16      	ldr	r3, [pc, #88]	@ (800c23c <HAL_JPEG_GetDataCallback+0x74>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d218      	bcs.n	800c21c <HAL_JPEG_GetDataCallback+0x54>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 800c1ea:	4b15      	ldr	r3, [pc, #84]	@ (800c240 <HAL_JPEG_GetDataCallback+0x78>)
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	4a13      	ldr	r2, [pc, #76]	@ (800c240 <HAL_JPEG_GetDataCallback+0x78>)
 800c1f4:	6013      	str	r3, [r2, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 800c1f6:	4b11      	ldr	r3, [pc, #68]	@ (800c23c <HAL_JPEG_GetDataCallback+0x74>)
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	4b0f      	ldr	r3, [pc, #60]	@ (800c238 <HAL_JPEG_GetDataCallback+0x70>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c204:	d303      	bcc.n	800c20e <HAL_JPEG_GetDataCallback+0x46>
    {
      inDataLength = CHUNK_SIZE_IN;
 800c206:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c20a:	60fb      	str	r3, [r7, #12]
 800c20c:	e008      	b.n	800c220 <HAL_JPEG_GetDataCallback+0x58>
    }
    else
    {
      inDataLength = Input_frameSize - Input_frameIndex;
 800c20e:	4b0b      	ldr	r3, [pc, #44]	@ (800c23c <HAL_JPEG_GetDataCallback+0x74>)
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	4b09      	ldr	r3, [pc, #36]	@ (800c238 <HAL_JPEG_GetDataCallback+0x70>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	1ad3      	subs	r3, r2, r3
 800c218:	60fb      	str	r3, [r7, #12]
 800c21a:	e001      	b.n	800c220 <HAL_JPEG_GetDataCallback+0x58>
    }    
  }
  else
  {
    inDataLength = 0; 
 800c21c:	2300      	movs	r3, #0
 800c21e:	60fb      	str	r3, [r7, #12]
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 800c220:	4b07      	ldr	r3, [pc, #28]	@ (800c240 <HAL_JPEG_GetDataCallback+0x78>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68fa      	ldr	r2, [r7, #12]
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7f5 ff3f 	bl	80020ac <HAL_JPEG_ConfigInputBuffer>
  
}
 800c22e:	bf00      	nop
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	200001e0 	.word	0x200001e0
 800c23c:	200001dc 	.word	0x200001dc
 800c240:	200001d8 	.word	0x200001d8

0800c244 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 800c250:	4b08      	ldr	r3, [pc, #32]	@ (800c274 <HAL_JPEG_DataReadyCallback+0x30>)
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4413      	add	r3, r2
 800c258:	4a06      	ldr	r2, [pc, #24]	@ (800c274 <HAL_JPEG_DataReadyCallback+0x30>)
 800c25a:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 800c25c:	4b05      	ldr	r3, [pc, #20]	@ (800c274 <HAL_JPEG_DataReadyCallback+0x30>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c264:	4619      	mov	r1, r3
 800c266:	68f8      	ldr	r0, [r7, #12]
 800c268:	f7f5 ff32 	bl	80020d0 <HAL_JPEG_ConfigOutputBuffer>
}
 800c26c:	bf00      	nop
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	200001d4 	.word	0x200001d4

0800c278 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  Error_Handler();
 800c280:	f000 f83a 	bl	800c2f8 <Error_Handler>
}
 800c284:	bf00      	nop
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1; 
 800c294:	4b04      	ldr	r3, [pc, #16]	@ (800c2a8 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 800c296:	2201      	movs	r2, #1
 800c298:	601a      	str	r2, [r3, #0]
}
 800c29a:	bf00      	nop
 800c29c:	370c      	adds	r7, #12
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	200001d0 	.word	0x200001d0

0800c2ac <main>:
RTC_HandleTypeDef hrtc;
SPI_HandleTypeDef hspi5;


int main(void)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	af00      	add	r7, sp, #0

  // System configurations
  MPU_Config();							// Parameters configuration for external SDRAM
 800c2b0:	f000 f8be 	bl	800c430 <MPU_Config>
  CPU_CACHE_Enable();
 800c2b4:	f000 f8fe 	bl	800c4b4 <CPU_CACHE_Enable>
  HAL_Init();
 800c2b8:	f7f4 fd9e 	bl	8000df8 <HAL_Init>
  SystemClock_Config(); 				// System-Clock; HSE 200MHz, RTC-Clock; LSE 32kHz
 800c2bc:	f000 f820 	bl	800c300 <SystemClock_Config>
  
  // Microcntroller's peripherals initialization
  MX_GPIO_Init(0);
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	f000 f9b9 	bl	800c638 <MX_GPIO_Init>
  MX_SPI5_Init();
 800c2c6:	f000 f963 	bl	800c590 <MX_SPI5_Init>
  MX_RTC_Init();
 800c2ca:	f000 fa93 	bl	800c7f4 <MX_RTC_Init>

  // External peripherals initialization
  GC9A01_init();
 800c2ce:	f7ff fc88 	bl	800bbe2 <GC9A01_init>
  BSP_SDRAM_Init(0);
 800c2d2:	2000      	movs	r0, #0
 800c2d4:	f7f4 fb60 	bl	8000998 <BSP_SDRAM_Init>

  // JPEG initialization
  JPEG_Handle.Instance = JPEG;
 800c2d8:	4b05      	ldr	r3, [pc, #20]	@ (800c2f0 <main+0x44>)
 800c2da:	4a06      	ldr	r2, [pc, #24]	@ (800c2f4 <main+0x48>)
 800c2dc:	601a      	str	r2, [r3, #0]
  HAL_JPEG_Init(&JPEG_Handle);    
 800c2de:	4804      	ldr	r0, [pc, #16]	@ (800c2f0 <main+0x44>)
 800c2e0:	f7f5 fd12 	bl	8001d08 <HAL_JPEG_Init>

////////////////////////////////////////////////	APPLICATION SECTION

  // Application initialization
  smart_watch_init();
 800c2e4:	f000 fbba 	bl	800ca5c <smart_watch_init>

  // Application process
  smart_watch_process();
 800c2e8:	f000 fbe6 	bl	800cab8 <smart_watch_process>

  while (1);
 800c2ec:	bf00      	nop
 800c2ee:	e7fd      	b.n	800c2ec <main+0x40>
 800c2f0:	200001e4 	.word	0x200001e4
 800c2f4:	52003000 	.word	0x52003000

0800c2f8 <Error_Handler>:

}


void Error_Handler(void)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	af00      	add	r7, sp, #0

  while(1);
 800c2fc:	bf00      	nop
 800c2fe:	e7fd      	b.n	800c2fc <Error_Handler+0x4>

0800c300 <SystemClock_Config>:
// PLL_Q                          = 4
// PLL_R                          = 2
// VDD(V)                         = 3.3
// Flash Latency(WS)              = 4
void SystemClock_Config(void)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b09e      	sub	sp, #120	@ 0x78
 800c304:	af00      	add	r7, sp, #0

  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800c306:	2300      	movs	r3, #0
 800c308:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800c30c:	2004      	movs	r0, #4
 800c30e:	f7f7 ff6f 	bl	80041f0 <HAL_PWREx_ConfigSupply>

  // The voltage scaling allows optimizing the power consumption when the device is
  // clocked below the maximum system frequency
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c312:	2300      	movs	r3, #0
 800c314:	607b      	str	r3, [r7, #4]
 800c316:	4b43      	ldr	r3, [pc, #268]	@ (800c424 <SystemClock_Config+0x124>)
 800c318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c31a:	4a42      	ldr	r2, [pc, #264]	@ (800c424 <SystemClock_Config+0x124>)
 800c31c:	f023 0301 	bic.w	r3, r3, #1
 800c320:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c322:	4b40      	ldr	r3, [pc, #256]	@ (800c424 <SystemClock_Config+0x124>)
 800c324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	607b      	str	r3, [r7, #4]
 800c32c:	4b3e      	ldr	r3, [pc, #248]	@ (800c428 <SystemClock_Config+0x128>)
 800c32e:	699b      	ldr	r3, [r3, #24]
 800c330:	4a3d      	ldr	r2, [pc, #244]	@ (800c428 <SystemClock_Config+0x128>)
 800c332:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c336:	6193      	str	r3, [r2, #24]
 800c338:	4b3b      	ldr	r3, [pc, #236]	@ (800c428 <SystemClock_Config+0x128>)
 800c33a:	699b      	ldr	r3, [r3, #24]
 800c33c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c340:	607b      	str	r3, [r7, #4]
 800c342:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800c344:	bf00      	nop
 800c346:	4b38      	ldr	r3, [pc, #224]	@ (800c428 <SystemClock_Config+0x128>)
 800c348:	699b      	ldr	r3, [r3, #24]
 800c34a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c34e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c352:	d1f8      	bne.n	800c346 <SystemClock_Config+0x46>

  // Clocks configurations
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 800c354:	2305      	movs	r3, #5
 800c356:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c358:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c35c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800c35e:	2301      	movs	r3, #1
 800c360:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800c362:	2300      	movs	r3, #0
 800c364:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800c366:	2300      	movs	r3, #0
 800c368:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c36a:	2302      	movs	r3, #2
 800c36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c36e:	2302      	movs	r3, #2
 800c370:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800c372:	2305      	movs	r3, #5
 800c374:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 70;
 800c376:	2346      	movs	r3, #70	@ 0x46
 800c378:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800c37a:	2300      	movs	r3, #0
 800c37c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800c37e:	2302      	movs	r3, #2
 800c380:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800c382:	2302      	movs	r3, #2
 800c384:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c386:	2304      	movs	r3, #4
 800c388:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800c38a:	2300      	movs	r3, #0
 800c38c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800c38e:	2308      	movs	r3, #8
 800c390:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800c392:	f107 0308 	add.w	r3, r7, #8
 800c396:	4618      	mov	r0, r3
 800c398:	f7f7 ff84 	bl	80042a4 <HAL_RCC_OscConfig>
 800c39c:	4603      	mov	r3, r0
 800c39e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 800c3a2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d001      	beq.n	800c3ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 800c3aa:	f7ff ffa5 	bl	800c2f8 <Error_Handler>
  }

  // CLocks assignment to peripheral buses
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800c3ae:	233f      	movs	r3, #63	@ 0x3f
 800c3b0:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c3b2:	2303      	movs	r3, #3
 800c3b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800c3ba:	2308      	movs	r3, #8
 800c3bc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800c3be:	2340      	movs	r3, #64	@ 0x40
 800c3c0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800c3c2:	2340      	movs	r3, #64	@ 0x40
 800c3c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800c3c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800c3cc:	2340      	movs	r3, #64	@ 0x40
 800c3ce:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800c3d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c3d4:	2104      	movs	r1, #4
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7f8 fbbe 	bl	8004b58 <HAL_RCC_ClockConfig>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 800c3e2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <SystemClock_Config+0xee>
  {
    Error_Handler();
 800c3ea:	f7ff ff85 	bl	800c2f8 <Error_Handler>
        - The activation of the CSI clock
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  __HAL_RCC_CSI_ENABLE() ;
 800c3ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c42c <SystemClock_Config+0x12c>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a0e      	ldr	r2, [pc, #56]	@ (800c42c <SystemClock_Config+0x12c>)
 800c3f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3f8:	6013      	str	r3, [r2, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800c3fa:	4b0c      	ldr	r3, [pc, #48]	@ (800c42c <SystemClock_Config+0x12c>)
 800c3fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c400:	4a0a      	ldr	r2, [pc, #40]	@ (800c42c <SystemClock_Config+0x12c>)
 800c402:	f043 0302 	orr.w	r3, r3, #2
 800c406:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800c40a:	4b08      	ldr	r3, [pc, #32]	@ (800c42c <SystemClock_Config+0x12c>)
 800c40c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c410:	f003 0302 	and.w	r3, r3, #2
 800c414:	603b      	str	r3, [r7, #0]
 800c416:	683b      	ldr	r3, [r7, #0]
  HAL_EnableCompensationCell();
 800c418:	f7f4 fdd0 	bl	8000fbc <HAL_EnableCompensationCell>

}
 800c41c:	bf00      	nop
 800c41e:	3778      	adds	r7, #120	@ 0x78
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	58000400 	.word	0x58000400
 800c428:	58024800 	.word	0x58024800
 800c42c:	58024400 	.word	0x58024400

0800c430 <MPU_Config>:

// Configure the MPU attributes as Write Through for External SDRAM.
// The Base Address is SDRAM_DEVICE_ADDR .
// The Configured Region Size is 32MB because same as SDRAM size.
void MPU_Config(void)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0

  MPU_Region_InitTypeDef MPU_InitStruct;
  

  HAL_MPU_Disable();
 800c436:	f7f4 ff13 	bl	8001260 <HAL_MPU_Disable>

  // Configure the MPU as Strongly ordered for not defined regions
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800c43a:	2301      	movs	r3, #1
 800c43c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 800c43e:	2300      	movs	r3, #0
 800c440:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800c442:	231f      	movs	r3, #31
 800c444:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800c446:	2300      	movs	r3, #0
 800c448:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800c44a:	2300      	movs	r3, #0
 800c44c:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800c44e:	2300      	movs	r3, #0
 800c450:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800c452:	2301      	movs	r3, #1
 800c454:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800c456:	2300      	movs	r3, #0
 800c458:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800c45e:	2387      	movs	r3, #135	@ 0x87
 800c460:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800c462:	2301      	movs	r3, #1
 800c464:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800c466:	463b      	mov	r3, r7
 800c468:	4618      	mov	r0, r3
 800c46a:	f7f4 ff31 	bl	80012d0 <HAL_MPU_ConfigRegion>

  // Configure the MPU attributes as WT for SDRAM
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800c46e:	2301      	movs	r3, #1
 800c470:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 800c472:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800c476:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800c478:	2318      	movs	r3, #24
 800c47a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800c47c:	2303      	movs	r3, #3
 800c47e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800c480:	2300      	movs	r3, #0
 800c482:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800c484:	2301      	movs	r3, #1
 800c486:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800c488:	2300      	movs	r3, #0
 800c48a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800c48c:	2301      	movs	r3, #1
 800c48e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800c490:	2300      	movs	r3, #0
 800c492:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800c494:	2300      	movs	r3, #0
 800c496:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800c498:	2300      	movs	r3, #0
 800c49a:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800c49c:	463b      	mov	r3, r7
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7f4 ff16 	bl	80012d0 <HAL_MPU_ConfigRegion>

  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800c4a4:	2004      	movs	r0, #4
 800c4a6:	f7f4 fef3 	bl	8001290 <HAL_MPU_Enable>

}
 800c4aa:	bf00      	nop
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
	...

0800c4b4 <CPU_CACHE_Enable>:


void CPU_CACHE_Enable(void)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b085      	sub	sp, #20
 800c4b8:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800c4ba:	4b34      	ldr	r3, [pc, #208]	@ (800c58c <CPU_CACHE_Enable+0xd8>)
 800c4bc:	695b      	ldr	r3, [r3, #20]
 800c4be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d11b      	bne.n	800c4fe <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800c4c6:	f3bf 8f4f 	dsb	sy
}
 800c4ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c4cc:	f3bf 8f6f 	isb	sy
}
 800c4d0:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800c4d2:	4b2e      	ldr	r3, [pc, #184]	@ (800c58c <CPU_CACHE_Enable+0xd8>)
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800c4da:	f3bf 8f4f 	dsb	sy
}
 800c4de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c4e0:	f3bf 8f6f 	isb	sy
}
 800c4e4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800c4e6:	4b29      	ldr	r3, [pc, #164]	@ (800c58c <CPU_CACHE_Enable+0xd8>)
 800c4e8:	695b      	ldr	r3, [r3, #20]
 800c4ea:	4a28      	ldr	r2, [pc, #160]	@ (800c58c <CPU_CACHE_Enable+0xd8>)
 800c4ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c4f2:	f3bf 8f4f 	dsb	sy
}
 800c4f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c4f8:	f3bf 8f6f 	isb	sy
}
 800c4fc:	e000      	b.n	800c500 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800c4fe:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800c500:	4b22      	ldr	r3, [pc, #136]	@ (800c58c <CPU_CACHE_Enable+0xd8>)
 800c502:	695b      	ldr	r3, [r3, #20]
 800c504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d138      	bne.n	800c57e <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800c50c:	4b1f      	ldr	r3, [pc, #124]	@ (800c58c <CPU_CACHE_Enable+0xd8>)
 800c50e:	2200      	movs	r2, #0
 800c510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800c514:	f3bf 8f4f 	dsb	sy
}
 800c518:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800c51a:	4b1c      	ldr	r3, [pc, #112]	@ (800c58c <CPU_CACHE_Enable+0xd8>)
 800c51c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c520:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	0b5b      	lsrs	r3, r3, #13
 800c526:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c52a:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	08db      	lsrs	r3, r3, #3
 800c530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c534:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	015a      	lsls	r2, r3, #5
 800c53a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800c53e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c544:	4911      	ldr	r1, [pc, #68]	@ (800c58c <CPU_CACHE_Enable+0xd8>)
 800c546:	4313      	orrs	r3, r2
 800c548:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	1e5a      	subs	r2, r3, #1
 800c550:	607a      	str	r2, [r7, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1ef      	bne.n	800c536 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	1e5a      	subs	r2, r3, #1
 800c55a:	60ba      	str	r2, [r7, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d1e5      	bne.n	800c52c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800c560:	f3bf 8f4f 	dsb	sy
}
 800c564:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800c566:	4b09      	ldr	r3, [pc, #36]	@ (800c58c <CPU_CACHE_Enable+0xd8>)
 800c568:	695b      	ldr	r3, [r3, #20]
 800c56a:	4a08      	ldr	r2, [pc, #32]	@ (800c58c <CPU_CACHE_Enable+0xd8>)
 800c56c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c570:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c572:	f3bf 8f4f 	dsb	sy
}
 800c576:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c578:	f3bf 8f6f 	isb	sy
}
 800c57c:	e000      	b.n	800c580 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800c57e:	bf00      	nop

  SCB_EnableICache();
  SCB_EnableDCache();

}
 800c580:	bf00      	nop
 800c582:	3714      	adds	r7, #20
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr
 800c58c:	e000ed00 	.word	0xe000ed00

0800c590 <MX_SPI5_Init>:


void MX_SPI5_Init(void)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800c594:	4b26      	ldr	r3, [pc, #152]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c596:	4a27      	ldr	r2, [pc, #156]	@ (800c634 <MX_SPI5_Init+0xa4>)
 800c598:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800c59a:	4b25      	ldr	r3, [pc, #148]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c59c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800c5a0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800c5a2:	4b23      	ldr	r3, [pc, #140]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800c5a8:	4b21      	ldr	r3, [pc, #132]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5aa:	2207      	movs	r2, #7
 800c5ac:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c5ae:	4b20      	ldr	r3, [pc, #128]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c5b4:	4b1e      	ldr	r3, [pc, #120]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800c5ba:	4b1d      	ldr	r3, [pc, #116]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5bc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800c5c0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c5c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c5c8:	4b19      	ldr	r3, [pc, #100]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800c5ce:	4b18      	ldr	r3, [pc, #96]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c5d4:	4b16      	ldr	r3, [pc, #88]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800c5da:	4b15      	ldr	r3, [pc, #84]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800c5e0:	4b13      	ldr	r3, [pc, #76]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800c5e6:	4b12      	ldr	r3, [pc, #72]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800c5ec:	4b10      	ldr	r3, [pc, #64]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c5f2:	4b0f      	ldr	r3, [pc, #60]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c5f8:	4b0d      	ldr	r3, [pc, #52]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800c5fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c600:	2200      	movs	r2, #0
 800c602:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800c604:	4b0a      	ldr	r3, [pc, #40]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c606:	2200      	movs	r2, #0
 800c608:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800c60a:	4b09      	ldr	r3, [pc, #36]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c60c:	2200      	movs	r2, #0
 800c60e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800c610:	4b07      	ldr	r3, [pc, #28]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c612:	2200      	movs	r2, #0
 800c614:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800c616:	4b06      	ldr	r3, [pc, #24]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c618:	2200      	movs	r2, #0
 800c61a:	659a      	str	r2, [r3, #88]	@ 0x58

  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800c61c:	4804      	ldr	r0, [pc, #16]	@ (800c630 <MX_SPI5_Init+0xa0>)
 800c61e:	f7fd fc5b 	bl	8009ed8 <HAL_SPI_Init>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d001      	beq.n	800c62c <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 800c628:	f7ff fe66 	bl	800c2f8 <Error_Handler>
  }


}
 800c62c:	bf00      	nop
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	200002dc 	.word	0x200002dc
 800c634:	40015000 	.word	0x40015000

0800c638 <MX_GPIO_Init>:


void MX_GPIO_Init(uint8_t it_en)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08e      	sub	sp, #56	@ 0x38
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	4603      	mov	r3, r0
 800c640:	71fb      	strb	r3, [r7, #7]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c646:	2200      	movs	r2, #0
 800c648:	601a      	str	r2, [r3, #0]
 800c64a:	605a      	str	r2, [r3, #4]
 800c64c:	609a      	str	r2, [r3, #8]
 800c64e:	60da      	str	r2, [r3, #12]
 800c650:	611a      	str	r2, [r3, #16]


  // GPIO Ports Clock Enable
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c652:	4b65      	ldr	r3, [pc, #404]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c658:	4a63      	ldr	r2, [pc, #396]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c65a:	f043 0304 	orr.w	r3, r3, #4
 800c65e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c662:	4b61      	ldr	r3, [pc, #388]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c668:	f003 0304 	and.w	r3, r3, #4
 800c66c:	623b      	str	r3, [r7, #32]
 800c66e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c670:	4b5d      	ldr	r3, [pc, #372]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c676:	4a5c      	ldr	r2, [pc, #368]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c678:	f043 0308 	orr.w	r3, r3, #8
 800c67c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c680:	4b59      	ldr	r3, [pc, #356]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c686:	f003 0308 	and.w	r3, r3, #8
 800c68a:	61fb      	str	r3, [r7, #28]
 800c68c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c68e:	4b56      	ldr	r3, [pc, #344]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c694:	4a54      	ldr	r2, [pc, #336]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c696:	f043 0301 	orr.w	r3, r3, #1
 800c69a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c69e:	4b52      	ldr	r3, [pc, #328]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c6a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6a4:	f003 0301 	and.w	r3, r3, #1
 800c6a8:	61bb      	str	r3, [r7, #24]
 800c6aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800c6ac:	4b4e      	ldr	r3, [pc, #312]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c6ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6b2:	4a4d      	ldr	r2, [pc, #308]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c6b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c6bc:	4b4a      	ldr	r3, [pc, #296]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c6be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6c6:	617b      	str	r3, [r7, #20]
 800c6c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c6ca:	4b47      	ldr	r3, [pc, #284]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c6cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6d0:	4a45      	ldr	r2, [pc, #276]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c6d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c6da:	4b43      	ldr	r3, [pc, #268]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c6dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6e4:	613b      	str	r3, [r7, #16]
 800c6e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800c6e8:	4b3f      	ldr	r3, [pc, #252]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c6ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6ee:	4a3e      	ldr	r2, [pc, #248]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c6f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c6f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c6f8:	4b3b      	ldr	r3, [pc, #236]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c6fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c702:	60fb      	str	r3, [r7, #12]
 800c704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c706:	4b38      	ldr	r3, [pc, #224]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c70c:	4a36      	ldr	r2, [pc, #216]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c70e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c712:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c716:	4b34      	ldr	r3, [pc, #208]	@ (800c7e8 <MX_GPIO_Init+0x1b0>)
 800c718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c71c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c720:	60bb      	str	r3, [r7, #8]
 800c722:	68bb      	ldr	r3, [r7, #8]


  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 800c724:	2200      	movs	r2, #0
 800c726:	2102      	movs	r1, #2
 800c728:	4830      	ldr	r0, [pc, #192]	@ (800c7ec <MX_GPIO_Init+0x1b4>)
 800c72a:	f7f5 fab9 	bl	8001ca0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 800c72e:	2200      	movs	r2, #0
 800c730:	2161      	movs	r1, #97	@ 0x61
 800c732:	482f      	ldr	r0, [pc, #188]	@ (800c7f0 <MX_GPIO_Init+0x1b8>)
 800c734:	f7f5 fab4 	bl	8001ca0 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOJ, BUTTON_MINUS_Pin|BUTTON_PLUS_Pin|BUTTON_SETTING_Pin, GPIO_PIN_SET);

  // Configure GPIO pin - GC9A01_CS_Pin
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 800c738:	2302      	movs	r3, #2
 800c73a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c73c:	2301      	movs	r3, #1
 800c73e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c740:	2300      	movs	r3, #0
 800c742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c744:	2300      	movs	r3, #0
 800c746:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 800c748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c74c:	4619      	mov	r1, r3
 800c74e:	4827      	ldr	r0, [pc, #156]	@ (800c7ec <MX_GPIO_Init+0x1b4>)
 800c750:	f7f5 f8de 	bl	8001910 <HAL_GPIO_Init>

  // Configure GPIO pins - GC9A01_BL_Pin ; GC9A01_DC_Pin ; GC9A01_RST_Pin
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 800c754:	2361      	movs	r3, #97	@ 0x61
 800c756:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c758:	2301      	movs	r3, #1
 800c75a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c75c:	2300      	movs	r3, #0
 800c75e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c760:	2300      	movs	r3, #0
 800c762:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c768:	4619      	mov	r1, r3
 800c76a:	4821      	ldr	r0, [pc, #132]	@ (800c7f0 <MX_GPIO_Init+0x1b8>)
 800c76c:	f7f5 f8d0 	bl	8001910 <HAL_GPIO_Init>

  if(it_en)
 800c770:	79fb      	ldrb	r3, [r7, #7]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d025      	beq.n	800c7c2 <MX_GPIO_Init+0x18a>
  {

	  GPIO_InitStruct.Pin = ( BUTTON_MINUS_Pin | BUTTON_PLUS_Pin | BUTTON_SETTING_Pin );
 800c776:	2389      	movs	r3, #137	@ 0x89
 800c778:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c77a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800c77e:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c780:	2301      	movs	r3, #1
 800c782:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c788:	4619      	mov	r1, r3
 800c78a:	4819      	ldr	r0, [pc, #100]	@ (800c7f0 <MX_GPIO_Init+0x1b8>)
 800c78c:	f7f5 f8c0 	bl	8001910 <HAL_GPIO_Init>

	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800c790:	2200      	movs	r2, #0
 800c792:	2100      	movs	r1, #0
 800c794:	2006      	movs	r0, #6
 800c796:	f7f4 fd20 	bl	80011da <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800c79a:	2006      	movs	r0, #6
 800c79c:	f7f4 fd37 	bl	800120e <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	2017      	movs	r0, #23
 800c7a6:	f7f4 fd18 	bl	80011da <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800c7aa:	2017      	movs	r0, #23
 800c7ac:	f7f4 fd2f 	bl	800120e <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	2009      	movs	r0, #9
 800c7b6:	f7f4 fd10 	bl	80011da <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800c7ba:	2009      	movs	r0, #9
 800c7bc:	f7f4 fd27 	bl	800120e <HAL_NVIC_EnableIRQ>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);

  }

}
 800c7c0:	e00d      	b.n	800c7de <MX_GPIO_Init+0x1a6>
	  GPIO_InitStruct.Pin =  BUTTON_MINUS_Pin|BUTTON_PLUS_Pin|BUTTON_SETTING_Pin;
 800c7c2:	2389      	movs	r3, #137	@ 0x89
 800c7c4:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	633b      	str	r3, [r7, #48]	@ 0x30
	  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c7d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4805      	ldr	r0, [pc, #20]	@ (800c7f0 <MX_GPIO_Init+0x1b8>)
 800c7da:	f7f5 f899 	bl	8001910 <HAL_GPIO_Init>
}
 800c7de:	bf00      	nop
 800c7e0:	3738      	adds	r7, #56	@ 0x38
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	58024400 	.word	0x58024400
 800c7ec:	58022800 	.word	0x58022800
 800c7f0:	58022400 	.word	0x58022400

0800c7f4 <MX_RTC_Init>:


void MX_RTC_Init(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0

  RTC_TimeTypeDef sTime = {0};
 800c7fa:	1d3b      	adds	r3, r7, #4
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	601a      	str	r2, [r3, #0]
 800c800:	605a      	str	r2, [r3, #4]
 800c802:	609a      	str	r2, [r3, #8]
 800c804:	60da      	str	r2, [r3, #12]
 800c806:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800c808:	2300      	movs	r3, #0
 800c80a:	603b      	str	r3, [r7, #0]


  hrtc.Instance = RTC;
 800c80c:	4b25      	ldr	r3, [pc, #148]	@ (800c8a4 <MX_RTC_Init+0xb0>)
 800c80e:	4a26      	ldr	r2, [pc, #152]	@ (800c8a8 <MX_RTC_Init+0xb4>)
 800c810:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c812:	4b24      	ldr	r3, [pc, #144]	@ (800c8a4 <MX_RTC_Init+0xb0>)
 800c814:	2200      	movs	r2, #0
 800c816:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800c818:	4b22      	ldr	r3, [pc, #136]	@ (800c8a4 <MX_RTC_Init+0xb0>)
 800c81a:	227f      	movs	r2, #127	@ 0x7f
 800c81c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800c81e:	4b21      	ldr	r3, [pc, #132]	@ (800c8a4 <MX_RTC_Init+0xb0>)
 800c820:	22ff      	movs	r2, #255	@ 0xff
 800c822:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c824:	4b1f      	ldr	r3, [pc, #124]	@ (800c8a4 <MX_RTC_Init+0xb0>)
 800c826:	2200      	movs	r2, #0
 800c828:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c82a:	4b1e      	ldr	r3, [pc, #120]	@ (800c8a4 <MX_RTC_Init+0xb0>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c830:	4b1c      	ldr	r3, [pc, #112]	@ (800c8a4 <MX_RTC_Init+0xb0>)
 800c832:	2200      	movs	r2, #0
 800c834:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800c836:	4b1b      	ldr	r3, [pc, #108]	@ (800c8a4 <MX_RTC_Init+0xb0>)
 800c838:	2200      	movs	r2, #0
 800c83a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c83c:	4819      	ldr	r0, [pc, #100]	@ (800c8a4 <MX_RTC_Init+0xb0>)
 800c83e:	f7fb fa3f 	bl	8007cc0 <HAL_RTC_Init>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800c848:	f7ff fd56 	bl	800c2f8 <Error_Handler>
  }


  sTime.Hours = 0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800c850:	2300      	movs	r3, #0
 800c852:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800c854:	2300      	movs	r3, #0
 800c856:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c858:	2300      	movs	r3, #0
 800c85a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c85c:	2300      	movs	r3, #0
 800c85e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800c860:	1d3b      	adds	r3, r7, #4
 800c862:	2200      	movs	r2, #0
 800c864:	4619      	mov	r1, r3
 800c866:	480f      	ldr	r0, [pc, #60]	@ (800c8a4 <MX_RTC_Init+0xb0>)
 800c868:	f7fb faac 	bl	8007dc4 <HAL_RTC_SetTime>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d001      	beq.n	800c876 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800c872:	f7ff fd41 	bl	800c2f8 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800c876:	2301      	movs	r3, #1
 800c878:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800c87a:	2301      	movs	r3, #1
 800c87c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800c87e:	2301      	movs	r3, #1
 800c880:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800c882:	2300      	movs	r3, #0
 800c884:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800c886:	463b      	mov	r3, r7
 800c888:	2200      	movs	r2, #0
 800c88a:	4619      	mov	r1, r3
 800c88c:	4805      	ldr	r0, [pc, #20]	@ (800c8a4 <MX_RTC_Init+0xb0>)
 800c88e:	f7fb fb93 	bl	8007fb8 <HAL_RTC_SetDate>
 800c892:	4603      	mov	r3, r0
 800c894:	2b00      	cmp	r3, #0
 800c896:	d001      	beq.n	800c89c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800c898:	f7ff fd2e 	bl	800c2f8 <Error_Handler>
  }

}
 800c89c:	bf00      	nop
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	200002b8 	.word	0x200002b8
 800c8a8:	58004000 	.word	0x58004000

0800c8ac <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c8b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c8e8 <SD_CheckStatus+0x3c>)
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState(0) == BSP_ERROR_NONE)
 800c8bc:	2000      	movs	r0, #0
 800c8be:	f7f3 ff93 	bl	80007e8 <BSP_SD_GetCardState>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d107      	bne.n	800c8d8 <SD_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 800c8c8:	4b07      	ldr	r3, [pc, #28]	@ (800c8e8 <SD_CheckStatus+0x3c>)
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	f023 0301 	bic.w	r3, r3, #1
 800c8d2:	b2da      	uxtb	r2, r3
 800c8d4:	4b04      	ldr	r3, [pc, #16]	@ (800c8e8 <SD_CheckStatus+0x3c>)
 800c8d6:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800c8d8:	4b03      	ldr	r3, [pc, #12]	@ (800c8e8 <SD_CheckStatus+0x3c>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	b2db      	uxtb	r3, r3
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	2000000d 	.word	0x2000000d

0800c8ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c8f6:	79fb      	ldrb	r3, [r7, #7]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7ff ffd7 	bl	800c8ac <SD_CheckStatus>
 800c8fe:	4603      	mov	r3, r0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3708      	adds	r7, #8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	4603      	mov	r3, r0
 800c910:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c912:	79fb      	ldrb	r3, [r7, #7]
 800c914:	4618      	mov	r0, r3
 800c916:	f7ff ffc9 	bl	800c8ac <SD_CheckStatus>
 800c91a:	4603      	mov	r3, r0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b086      	sub	sp, #24
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60b9      	str	r1, [r7, #8]
 800c92c:	607a      	str	r2, [r7, #4]
 800c92e:	603b      	str	r3, [r7, #0]
 800c930:	4603      	mov	r3, r0
 800c932:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c934:	2301      	movs	r3, #1
 800c936:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_ReadBlocks(0,(uint32_t*)buff, 
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	68b9      	ldr	r1, [r7, #8]
 800c93e:	2000      	movs	r0, #0
 800c940:	f7f3 fef2 	bl	8000728 <BSP_SD_ReadBlocks>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d108      	bne.n	800c95c <SD_read+0x38>
                       (uint32_t) (sector), 
                       count) == BSP_ERROR_NONE)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState(0)!= BSP_ERROR_NONE)
 800c94a:	bf00      	nop
 800c94c:	2000      	movs	r0, #0
 800c94e:	f7f3 ff4b 	bl	80007e8 <BSP_SD_GetCardState>
 800c952:	4603      	mov	r3, r0
 800c954:	2b00      	cmp	r3, #0
 800c956:	d1f9      	bne.n	800c94c <SD_read+0x28>
    {
    }
    res = RES_OK;
 800c958:	2300      	movs	r3, #0
 800c95a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c95c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3718      	adds	r7, #24
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b086      	sub	sp, #24
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
 800c970:	603b      	str	r3, [r7, #0]
 800c972:	4603      	mov	r3, r0
 800c974:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c976:	2301      	movs	r3, #1
 800c978:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_WriteBlocks(0,(uint32_t*)buff, 
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	68b9      	ldr	r1, [r7, #8]
 800c980:	2000      	movs	r0, #0
 800c982:	f7f3 ff01 	bl	8000788 <BSP_SD_WriteBlocks>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d108      	bne.n	800c99e <SD_write+0x38>
                        (uint32_t)(sector), 
                        count) == BSP_ERROR_NONE)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState(0) != BSP_ERROR_NONE)
 800c98c:	bf00      	nop
 800c98e:	2000      	movs	r0, #0
 800c990:	f7f3 ff2a 	bl	80007e8 <BSP_SD_GetCardState>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1f9      	bne.n	800c98e <SD_write+0x28>
    {
    }    
    res = RES_OK;
 800c99a:	2300      	movs	r3, #0
 800c99c:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c99e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3718      	adds	r7, #24
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08c      	sub	sp, #48	@ 0x30
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	603a      	str	r2, [r7, #0]
 800c9b2:	71fb      	strb	r3, [r7, #7]
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c9be:	4b26      	ldr	r3, [pc, #152]	@ (800ca58 <SD_ioctl+0xb0>)
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	f003 0301 	and.w	r3, r3, #1
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <SD_ioctl+0x28>
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	e03e      	b.n	800ca4e <SD_ioctl+0xa6>
  
  switch (cmd)
 800c9d0:	79bb      	ldrb	r3, [r7, #6]
 800c9d2:	2b03      	cmp	r3, #3
 800c9d4:	d836      	bhi.n	800ca44 <SD_ioctl+0x9c>
 800c9d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c9dc <SD_ioctl+0x34>)
 800c9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9dc:	0800c9ed 	.word	0x0800c9ed
 800c9e0:	0800c9f5 	.word	0x0800c9f5
 800c9e4:	0800ca0f 	.word	0x0800ca0f
 800c9e8:	0800ca2b 	.word	0x0800ca2b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c9f2:	e02a      	b.n	800ca4a <SD_ioctl+0xa2>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800c9f4:	f107 0308 	add.w	r3, r7, #8
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	f7f3 ff0e 	bl	800081c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ca00:	6a3a      	ldr	r2, [r7, #32]
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ca06:	2300      	movs	r3, #0
 800ca08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ca0c:	e01d      	b.n	800ca4a <SD_ioctl+0xa2>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800ca0e:	f107 0308 	add.w	r3, r7, #8
 800ca12:	4619      	mov	r1, r3
 800ca14:	2000      	movs	r0, #0
 800ca16:	f7f3 ff01 	bl	800081c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ca22:	2300      	movs	r3, #0
 800ca24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ca28:	e00f      	b.n	800ca4a <SD_ioctl+0xa2>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800ca2a:	f107 0308 	add.w	r3, r7, #8
 800ca2e:	4619      	mov	r1, r3
 800ca30:	2000      	movs	r0, #0
 800ca32:	f7f3 fef3 	bl	800081c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800ca36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	601a      	str	r2, [r3, #0]
  res = RES_OK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ca42:	e002      	b.n	800ca4a <SD_ioctl+0xa2>
  
  default:
    res = RES_PARERR;
 800ca44:	2304      	movs	r3, #4
 800ca46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 800ca4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3730      	adds	r7, #48	@ 0x30
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	2000000d 	.word	0x2000000d

0800ca5c <smart_watch_init>:

video_t video;													// Video data structure


void smart_watch_init(void)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	af00      	add	r7, sp, #0

	parameters_reset();
 800ca60:	f000 fc96 	bl	800d390 <parameters_reset>

	// First time setting
	video.video_mode = SETTING_MODE;
 800ca64:	4b10      	ldr	r3, [pc, #64]	@ (800caa8 <smart_watch_init+0x4c>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

	// SD card initialization
	// Link the micro SD disk I/O driver
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800ca6c:	490f      	ldr	r1, [pc, #60]	@ (800caac <smart_watch_init+0x50>)
 800ca6e:	4810      	ldr	r0, [pc, #64]	@ (800cab0 <smart_watch_init+0x54>)
 800ca70:	f004 f856 	bl	8010b20 <FATFS_LinkDriver>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d112      	bne.n	800caa0 <smart_watch_init+0x44>
	{

		// Init the SD Card
	    SD_Initialize();
 800ca7a:	f000 fe63 	bl	800d744 <SD_Initialize>

	    if(BSP_SD_IsDetected(0))
 800ca7e:	2000      	movs	r0, #0
 800ca80:	f7f3 fe2e 	bl	80006e0 <BSP_SD_IsDetected>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d009      	beq.n	800ca9e <smart_watch_init+0x42>
	    {

	      // Register the file system object to the FatFs module
	      if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	4907      	ldr	r1, [pc, #28]	@ (800caac <smart_watch_init+0x50>)
 800ca8e:	4809      	ldr	r0, [pc, #36]	@ (800cab4 <smart_watch_init+0x58>)
 800ca90:	f003 f9fa 	bl	800fe88 <f_mount>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d003      	beq.n	800caa2 <smart_watch_init+0x46>
	      {

	    	  while(1);
 800ca9a:	bf00      	nop
 800ca9c:	e7fd      	b.n	800ca9a <smart_watch_init+0x3e>

	    }
	    else
  		{

  			while(1);
 800ca9e:	e7fe      	b.n	800ca9e <smart_watch_init+0x42>

  	}
	else
	{

		while(1);
 800caa0:	e7fe      	b.n	800caa0 <smart_watch_init+0x44>

	}

}
 800caa2:	bf00      	nop
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	20018824 	.word	0x20018824
 800caac:	200185a8 	.word	0x200185a8
 800cab0:	08011990 	.word	0x08011990
 800cab4:	20018374 	.word	0x20018374

0800cab8 <smart_watch_process>:


void smart_watch_process(void)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	af00      	add	r7, sp, #0

	while(1)
	{

		// Check if new file needs to be open
		file_handler(0);
 800cabc:	2000      	movs	r0, #0
 800cabe:	f000 fb29 	bl	800d114 <file_handler>

		// Video processing unit
		mjpeg_video_processing();
 800cac2:	f000 f807 	bl	800cad4 <mjpeg_video_processing>

		// Check for user buttons pressed
		user_buttons_handler();
 800cac6:	f000 fba3 	bl	800d210 <user_buttons_handler>

		// Battery management
		battery_management();
 800caca:	f000 fbdf 	bl	800d28c <battery_management>
		file_handler(0);
 800cace:	bf00      	nop
 800cad0:	e7f4      	b.n	800cabc <smart_watch_process+0x4>
	...

0800cad4 <mjpeg_video_processing>:

////////////////////////////////////////////////////// PRIVATE FUNCTIONS


static void mjpeg_video_processing(void)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	af00      	add	r7, sp, #0

	switch(video.video_mode)
 800cad8:	4b06      	ldr	r3, [pc, #24]	@ (800caf4 <mjpeg_video_processing+0x20>)
 800cada:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800cade:	2b01      	cmp	r3, #1
 800cae0:	d002      	beq.n	800cae8 <mjpeg_video_processing+0x14>
	{

		default:
		case SETTING_MODE:

			clock_setting();
 800cae2:	f000 f809 	bl	800caf8 <clock_setting>

			break;
 800cae6:	e002      	b.n	800caee <mjpeg_video_processing+0x1a>

		case NORMAL_MODE:

			clock_normal();
 800cae8:	f000 f916 	bl	800cd18 <clock_normal>

			break;
 800caec:	bf00      	nop

	}

}
 800caee:	bf00      	nop
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	20018824 	.word	0x20018824

0800caf8 <clock_setting>:


static void clock_setting(void)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	af00      	add	r7, sp, #0

	switch(video.set)
 800cafc:	4b81      	ldr	r3, [pc, #516]	@ (800cd04 <clock_setting+0x20c>)
 800cafe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800cb02:	2b03      	cmp	r3, #3
 800cb04:	f000 80ed 	beq.w	800cce2 <clock_setting+0x1ea>
 800cb08:	2b03      	cmp	r3, #3
 800cb0a:	dc03      	bgt.n	800cb14 <clock_setting+0x1c>
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d00e      	beq.n	800cb2e <clock_setting+0x36>
 800cb10:	2b02      	cmp	r3, #2
 800cb12:	d06d      	beq.n	800cbf0 <clock_setting+0xf8>
	{

		default:
		case SET_IDLE:

			while(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin));
 800cb14:	bf00      	nop
 800cb16:	2108      	movs	r1, #8
 800cb18:	487b      	ldr	r0, [pc, #492]	@ (800cd08 <clock_setting+0x210>)
 800cb1a:	f7f5 f8a9 	bl	8001c70 <HAL_GPIO_ReadPin>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d0f8      	beq.n	800cb16 <clock_setting+0x1e>

			video.set = SET_HOURS;
 800cb24:	4b77      	ldr	r3, [pc, #476]	@ (800cd04 <clock_setting+0x20c>)
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			break;
 800cb2c:	e0e8      	b.n	800cd00 <clock_setting+0x208>

		case SET_HOURS:

			show_frame(0);
 800cb2e:	2000      	movs	r0, #0
 800cb30:	f000 fa1e 	bl	800cf70 <show_frame>

			// If button plus
			if(!HAL_GPIO_ReadPin(BUTTON_PLUS_GPIO_Port, BUTTON_PLUS_Pin))
 800cb34:	2180      	movs	r1, #128	@ 0x80
 800cb36:	4874      	ldr	r0, [pc, #464]	@ (800cd08 <clock_setting+0x210>)
 800cb38:	f7f5 f89a 	bl	8001c70 <HAL_GPIO_ReadPin>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d122      	bne.n	800cb88 <clock_setting+0x90>
			{

				HAL_Delay(200);
 800cb42:	20c8      	movs	r0, #200	@ 0xc8
 800cb44:	f7f4 f9ea 	bl	8000f1c <HAL_Delay>

				video.time.Hours++;
 800cb48:	4b6e      	ldr	r3, [pc, #440]	@ (800cd04 <clock_setting+0x20c>)
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	4b6c      	ldr	r3, [pc, #432]	@ (800cd04 <clock_setting+0x20c>)
 800cb52:	701a      	strb	r2, [r3, #0]
				video.time.Hours %= 12;
 800cb54:	4b6b      	ldr	r3, [pc, #428]	@ (800cd04 <clock_setting+0x20c>)
 800cb56:	781a      	ldrb	r2, [r3, #0]
 800cb58:	4b6c      	ldr	r3, [pc, #432]	@ (800cd0c <clock_setting+0x214>)
 800cb5a:	fba3 1302 	umull	r1, r3, r3, r2
 800cb5e:	08d9      	lsrs	r1, r3, #3
 800cb60:	460b      	mov	r3, r1
 800cb62:	005b      	lsls	r3, r3, #1
 800cb64:	440b      	add	r3, r1
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	b2da      	uxtb	r2, r3
 800cb6c:	4b65      	ldr	r3, [pc, #404]	@ (800cd04 <clock_setting+0x20c>)
 800cb6e:	701a      	strb	r2, [r3, #0]

				video.file_idx = ( video.time.Hours * 60 );
 800cb70:	4b64      	ldr	r3, [pc, #400]	@ (800cd04 <clock_setting+0x20c>)
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	461a      	mov	r2, r3
 800cb76:	0112      	lsls	r2, r2, #4
 800cb78:	1ad3      	subs	r3, r2, r3
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	4b61      	ldr	r3, [pc, #388]	@ (800cd04 <clock_setting+0x20c>)
 800cb80:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800cb82:	2001      	movs	r0, #1
 800cb84:	f000 fac6 	bl	800d114 <file_handler>

			}

			// If button minus
			if(!HAL_GPIO_ReadPin(BUTTON_MINUS_GPIO_Port, BUTTON_MINUS_Pin))
 800cb88:	2101      	movs	r1, #1
 800cb8a:	485f      	ldr	r0, [pc, #380]	@ (800cd08 <clock_setting+0x210>)
 800cb8c:	f7f5 f870 	bl	8001c70 <HAL_GPIO_ReadPin>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d11c      	bne.n	800cbd0 <clock_setting+0xd8>
			{

				HAL_Delay(200);
 800cb96:	20c8      	movs	r0, #200	@ 0xc8
 800cb98:	f7f4 f9c0 	bl	8000f1c <HAL_Delay>

				if(video.time.Hours > 0)
 800cb9c:	4b59      	ldr	r3, [pc, #356]	@ (800cd04 <clock_setting+0x20c>)
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d006      	beq.n	800cbb2 <clock_setting+0xba>
					video.time.Hours--;
 800cba4:	4b57      	ldr	r3, [pc, #348]	@ (800cd04 <clock_setting+0x20c>)
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	3b01      	subs	r3, #1
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	4b55      	ldr	r3, [pc, #340]	@ (800cd04 <clock_setting+0x20c>)
 800cbae:	701a      	strb	r2, [r3, #0]
 800cbb0:	e002      	b.n	800cbb8 <clock_setting+0xc0>
				else
					video.time.Hours = 11;
 800cbb2:	4b54      	ldr	r3, [pc, #336]	@ (800cd04 <clock_setting+0x20c>)
 800cbb4:	220b      	movs	r2, #11
 800cbb6:	701a      	strb	r2, [r3, #0]

				video.file_idx = ( video.time.Hours * 60 );
 800cbb8:	4b52      	ldr	r3, [pc, #328]	@ (800cd04 <clock_setting+0x20c>)
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	0112      	lsls	r2, r2, #4
 800cbc0:	1ad3      	subs	r3, r2, r3
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	b29a      	uxth	r2, r3
 800cbc6:	4b4f      	ldr	r3, [pc, #316]	@ (800cd04 <clock_setting+0x20c>)
 800cbc8:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800cbca:	2001      	movs	r0, #1
 800cbcc:	f000 faa2 	bl	800d114 <file_handler>

			}

			// If button settings
			if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800cbd0:	2108      	movs	r1, #8
 800cbd2:	484d      	ldr	r0, [pc, #308]	@ (800cd08 <clock_setting+0x210>)
 800cbd4:	f7f5 f84c 	bl	8001c70 <HAL_GPIO_ReadPin>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f040 808d 	bne.w	800ccfa <clock_setting+0x202>
			{

				HAL_Delay(200);
 800cbe0:	20c8      	movs	r0, #200	@ 0xc8
 800cbe2:	f7f4 f99b 	bl	8000f1c <HAL_Delay>

				video.set = SET_MINUTES;
 800cbe6:	4b47      	ldr	r3, [pc, #284]	@ (800cd04 <clock_setting+0x20c>)
 800cbe8:	2202      	movs	r2, #2
 800cbea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			}

			break;
 800cbee:	e084      	b.n	800ccfa <clock_setting+0x202>

		case SET_MINUTES:

			show_frame(0);
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	f000 f9bd 	bl	800cf70 <show_frame>

			// If button plus
			if(!HAL_GPIO_ReadPin(BUTTON_PLUS_GPIO_Port, BUTTON_PLUS_Pin))
 800cbf6:	2180      	movs	r1, #128	@ 0x80
 800cbf8:	4843      	ldr	r0, [pc, #268]	@ (800cd08 <clock_setting+0x210>)
 800cbfa:	f7f5 f839 	bl	8001c70 <HAL_GPIO_ReadPin>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d129      	bne.n	800cc58 <clock_setting+0x160>
			{

				HAL_Delay(200);
 800cc04:	20c8      	movs	r0, #200	@ 0xc8
 800cc06:	f7f4 f989 	bl	8000f1c <HAL_Delay>

				video.time.Minutes++;
 800cc0a:	4b3e      	ldr	r3, [pc, #248]	@ (800cd04 <clock_setting+0x20c>)
 800cc0c:	785b      	ldrb	r3, [r3, #1]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	b2da      	uxtb	r2, r3
 800cc12:	4b3c      	ldr	r3, [pc, #240]	@ (800cd04 <clock_setting+0x20c>)
 800cc14:	705a      	strb	r2, [r3, #1]
				video.time.Minutes %= 60;
 800cc16:	4b3b      	ldr	r3, [pc, #236]	@ (800cd04 <clock_setting+0x20c>)
 800cc18:	785a      	ldrb	r2, [r3, #1]
 800cc1a:	4b3d      	ldr	r3, [pc, #244]	@ (800cd10 <clock_setting+0x218>)
 800cc1c:	fba3 1302 	umull	r1, r3, r3, r2
 800cc20:	0959      	lsrs	r1, r3, #5
 800cc22:	460b      	mov	r3, r1
 800cc24:	011b      	lsls	r3, r3, #4
 800cc26:	1a5b      	subs	r3, r3, r1
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	1ad3      	subs	r3, r2, r3
 800cc2c:	b2da      	uxtb	r2, r3
 800cc2e:	4b35      	ldr	r3, [pc, #212]	@ (800cd04 <clock_setting+0x20c>)
 800cc30:	705a      	strb	r2, [r3, #1]

				video.file_idx += video.time.Minutes;
 800cc32:	4b34      	ldr	r3, [pc, #208]	@ (800cd04 <clock_setting+0x20c>)
 800cc34:	8a9b      	ldrh	r3, [r3, #20]
 800cc36:	4a33      	ldr	r2, [pc, #204]	@ (800cd04 <clock_setting+0x20c>)
 800cc38:	7852      	ldrb	r2, [r2, #1]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	4b31      	ldr	r3, [pc, #196]	@ (800cd04 <clock_setting+0x20c>)
 800cc40:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800cc42:	2001      	movs	r0, #1
 800cc44:	f000 fa66 	bl	800d114 <file_handler>

				video.file_idx -= video.time.Minutes;
 800cc48:	4b2e      	ldr	r3, [pc, #184]	@ (800cd04 <clock_setting+0x20c>)
 800cc4a:	8a9b      	ldrh	r3, [r3, #20]
 800cc4c:	4a2d      	ldr	r2, [pc, #180]	@ (800cd04 <clock_setting+0x20c>)
 800cc4e:	7852      	ldrb	r2, [r2, #1]
 800cc50:	1a9b      	subs	r3, r3, r2
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	4b2b      	ldr	r3, [pc, #172]	@ (800cd04 <clock_setting+0x20c>)
 800cc56:	829a      	strh	r2, [r3, #20]


			}

			// If button minus
			if(!HAL_GPIO_ReadPin(BUTTON_MINUS_GPIO_Port, BUTTON_MINUS_Pin))
 800cc58:	2101      	movs	r1, #1
 800cc5a:	482b      	ldr	r0, [pc, #172]	@ (800cd08 <clock_setting+0x210>)
 800cc5c:	f7f5 f808 	bl	8001c70 <HAL_GPIO_ReadPin>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d123      	bne.n	800ccae <clock_setting+0x1b6>
			{

				HAL_Delay(200);
 800cc66:	20c8      	movs	r0, #200	@ 0xc8
 800cc68:	f7f4 f958 	bl	8000f1c <HAL_Delay>

				if(video.time.Minutes > 0)
 800cc6c:	4b25      	ldr	r3, [pc, #148]	@ (800cd04 <clock_setting+0x20c>)
 800cc6e:	785b      	ldrb	r3, [r3, #1]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d006      	beq.n	800cc82 <clock_setting+0x18a>
					video.time.Minutes--;
 800cc74:	4b23      	ldr	r3, [pc, #140]	@ (800cd04 <clock_setting+0x20c>)
 800cc76:	785b      	ldrb	r3, [r3, #1]
 800cc78:	3b01      	subs	r3, #1
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	4b21      	ldr	r3, [pc, #132]	@ (800cd04 <clock_setting+0x20c>)
 800cc7e:	705a      	strb	r2, [r3, #1]
 800cc80:	e002      	b.n	800cc88 <clock_setting+0x190>
				else
					video.time.Minutes = 59;
 800cc82:	4b20      	ldr	r3, [pc, #128]	@ (800cd04 <clock_setting+0x20c>)
 800cc84:	223b      	movs	r2, #59	@ 0x3b
 800cc86:	705a      	strb	r2, [r3, #1]

				video.file_idx += video.time.Minutes;
 800cc88:	4b1e      	ldr	r3, [pc, #120]	@ (800cd04 <clock_setting+0x20c>)
 800cc8a:	8a9b      	ldrh	r3, [r3, #20]
 800cc8c:	4a1d      	ldr	r2, [pc, #116]	@ (800cd04 <clock_setting+0x20c>)
 800cc8e:	7852      	ldrb	r2, [r2, #1]
 800cc90:	4413      	add	r3, r2
 800cc92:	b29a      	uxth	r2, r3
 800cc94:	4b1b      	ldr	r3, [pc, #108]	@ (800cd04 <clock_setting+0x20c>)
 800cc96:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800cc98:	2001      	movs	r0, #1
 800cc9a:	f000 fa3b 	bl	800d114 <file_handler>

				video.file_idx -= video.time.Minutes;
 800cc9e:	4b19      	ldr	r3, [pc, #100]	@ (800cd04 <clock_setting+0x20c>)
 800cca0:	8a9b      	ldrh	r3, [r3, #20]
 800cca2:	4a18      	ldr	r2, [pc, #96]	@ (800cd04 <clock_setting+0x20c>)
 800cca4:	7852      	ldrb	r2, [r2, #1]
 800cca6:	1a9b      	subs	r3, r3, r2
 800cca8:	b29a      	uxth	r2, r3
 800ccaa:	4b16      	ldr	r3, [pc, #88]	@ (800cd04 <clock_setting+0x20c>)
 800ccac:	829a      	strh	r2, [r3, #20]

			}

			// If button settings
			if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800ccae:	2108      	movs	r1, #8
 800ccb0:	4815      	ldr	r0, [pc, #84]	@ (800cd08 <clock_setting+0x210>)
 800ccb2:	f7f4 ffdd 	bl	8001c70 <HAL_GPIO_ReadPin>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d120      	bne.n	800ccfe <clock_setting+0x206>
			{

				HAL_Delay(200);
 800ccbc:	20c8      	movs	r0, #200	@ 0xc8
 800ccbe:	f7f4 f92d 	bl	8000f1c <HAL_Delay>

				video.file_idx += video.time.Minutes;
 800ccc2:	4b10      	ldr	r3, [pc, #64]	@ (800cd04 <clock_setting+0x20c>)
 800ccc4:	8a9b      	ldrh	r3, [r3, #20]
 800ccc6:	4a0f      	ldr	r2, [pc, #60]	@ (800cd04 <clock_setting+0x20c>)
 800ccc8:	7852      	ldrb	r2, [r2, #1]
 800ccca:	4413      	add	r3, r2
 800cccc:	b29a      	uxth	r2, r3
 800ccce:	4b0d      	ldr	r3, [pc, #52]	@ (800cd04 <clock_setting+0x20c>)
 800ccd0:	829a      	strh	r2, [r3, #20]

				video.isfirstFrame = 1;
 800ccd2:	4b0c      	ldr	r3, [pc, #48]	@ (800cd04 <clock_setting+0x20c>)
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	759a      	strb	r2, [r3, #22]

				video.set = SET_START;
 800ccd8:	4b0a      	ldr	r3, [pc, #40]	@ (800cd04 <clock_setting+0x20c>)
 800ccda:	2203      	movs	r2, #3
 800ccdc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			}

			break;
 800cce0:	e00d      	b.n	800ccfe <clock_setting+0x206>

		case SET_START:

			file_handler(1);
 800cce2:	2001      	movs	r0, #1
 800cce4:	f000 fa16 	bl	800d114 <file_handler>

			video.set = SET_IDLE;
 800cce8:	4b06      	ldr	r3, [pc, #24]	@ (800cd04 <clock_setting+0x20c>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
			video.video_mode = NORMAL_MODE;
 800ccf0:	4b04      	ldr	r3, [pc, #16]	@ (800cd04 <clock_setting+0x20c>)
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

			break;
 800ccf8:	e002      	b.n	800cd00 <clock_setting+0x208>
			break;
 800ccfa:	bf00      	nop
 800ccfc:	e000      	b.n	800cd00 <clock_setting+0x208>
			break;
 800ccfe:	bf00      	nop

	}

}
 800cd00:	bf00      	nop
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	20018824 	.word	0x20018824
 800cd08:	58022400 	.word	0x58022400
 800cd0c:	aaaaaaab 	.word	0xaaaaaaab
 800cd10:	88888889 	.word	0x88888889
 800cd14:	00000000 	.word	0x00000000

0800cd18 <clock_normal>:


static void clock_normal(void)
{
 800cd18:	b590      	push	{r4, r7, lr}
 800cd1a:	b087      	sub	sp, #28
 800cd1c:	af02      	add	r7, sp, #8

	if(video.display_status == DISPLAY_OFF)
 800cd1e:	4b8a      	ldr	r3, [pc, #552]	@ (800cf48 <clock_normal+0x230>)
 800cd20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 8106 	beq.w	800cf36 <clock_normal+0x21e>
		return;

	// Save the frame into MJPEG_VideoBuffer
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	4987      	ldr	r1, [pc, #540]	@ (800cf4c <clock_normal+0x234>)
 800cd2e:	4888      	ldr	r0, [pc, #544]	@ (800cf50 <clock_normal+0x238>)
 800cd30:	f7fe fe18 	bl	800b964 <AVI_GetFrame>
 800cd34:	4603      	mov	r3, r0
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	4b83      	ldr	r3, [pc, #524]	@ (800cf48 <clock_normal+0x230>)
 800cd3a:	75da      	strb	r2, [r3, #23]


	if(video.frameToSkip > 0)
 800cd3c:	4b82      	ldr	r3, [pc, #520]	@ (800cf48 <clock_normal+0x230>)
 800cd3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	dd0f      	ble.n	800cd64 <clock_normal+0x4c>
	{

		// Skip frames until the the watch time is
		// synchronized with the actual time

		video.frameToSkip--;
 800cd44:	4b80      	ldr	r3, [pc, #512]	@ (800cf48 <clock_normal+0x230>)
 800cd46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	4a7f      	ldr	r2, [pc, #508]	@ (800cf48 <clock_normal+0x230>)
 800cd4c:	6253      	str	r3, [r2, #36]	@ 0x24
		AVI_Handel.CurrentImage++;
 800cd4e:	4b80      	ldr	r3, [pc, #512]	@ (800cf50 <clock_normal+0x238>)
 800cd50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd52:	3301      	adds	r3, #1
 800cd54:	4a7e      	ldr	r2, [pc, #504]	@ (800cf50 <clock_normal+0x238>)
 800cd56:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 800cd58:	4b7b      	ldr	r3, [pc, #492]	@ (800cf48 <clock_normal+0x230>)
 800cd5a:	6a1b      	ldr	r3, [r3, #32]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	4a7a      	ldr	r2, [pc, #488]	@ (800cf48 <clock_normal+0x230>)
 800cd60:	6213      	str	r3, [r2, #32]
 800cd62:	e096      	b.n	800ce92 <clock_normal+0x17a>

	}
	else if(video.FrameType == AVI_VIDEO_FRAME)
 800cd64:	4b78      	ldr	r3, [pc, #480]	@ (800cf48 <clock_normal+0x230>)
 800cd66:	7ddb      	ldrb	r3, [r3, #23]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	f040 8092 	bne.w	800ce92 <clock_normal+0x17a>
	{

		AVI_Handel.CurrentImage++;
 800cd6e:	4b78      	ldr	r3, [pc, #480]	@ (800cf50 <clock_normal+0x238>)
 800cd70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd72:	3301      	adds	r3, #1
 800cd74:	4a76      	ldr	r2, [pc, #472]	@ (800cf50 <clock_normal+0x238>)
 800cd76:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 800cd78:	4b73      	ldr	r3, [pc, #460]	@ (800cf48 <clock_normal+0x230>)
 800cd7a:	6a1b      	ldr	r3, [r3, #32]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	4a72      	ldr	r2, [pc, #456]	@ (800cf48 <clock_normal+0x230>)
 800cd80:	6213      	str	r3, [r2, #32]

		// Decode the frame inside MJPEG_VideoBuffer and put it into jpegOutDataAdreess in the format YCrCb
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 800cd82:	4974      	ldr	r1, [pc, #464]	@ (800cf54 <clock_normal+0x23c>)
 800cd84:	4b72      	ldr	r3, [pc, #456]	@ (800cf50 <clock_normal+0x238>)
 800cd86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd88:	4b6f      	ldr	r3, [pc, #444]	@ (800cf48 <clock_normal+0x230>)
 800cd8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd8c:	4872      	ldr	r0, [pc, #456]	@ (800cf58 <clock_normal+0x240>)
 800cd8e:	f7ff f9db 	bl	800c148 <JPEG_Decode_DMA>

		while(Jpeg_HWDecodingEnd == 0);
 800cd92:	bf00      	nop
 800cd94:	4b71      	ldr	r3, [pc, #452]	@ (800cf5c <clock_normal+0x244>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d0fb      	beq.n	800cd94 <clock_normal+0x7c>

		if(video.isfirstFrame == 1)
 800cd9c:	4b6a      	ldr	r3, [pc, #424]	@ (800cf48 <clock_normal+0x230>)
 800cd9e:	7d9b      	ldrb	r3, [r3, #22]
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d143      	bne.n	800ce2c <clock_normal+0x114>
		{

			video.isfirstFrame = 0;
 800cda4:	4b68      	ldr	r3, [pc, #416]	@ (800cf48 <clock_normal+0x230>)
 800cda6:	2200      	movs	r2, #0
 800cda8:	759a      	strb	r2, [r3, #22]

			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800cdaa:	496d      	ldr	r1, [pc, #436]	@ (800cf60 <clock_normal+0x248>)
 800cdac:	486a      	ldr	r0, [pc, #424]	@ (800cf58 <clock_normal+0x240>)
 800cdae:	f7f5 f82d 	bl	8001e0c <HAL_JPEG_GetInfo>

			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800cdb2:	4b6b      	ldr	r3, [pc, #428]	@ (800cf60 <clock_normal+0x248>)
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	4a69      	ldr	r2, [pc, #420]	@ (800cf60 <clock_normal+0x248>)
 800cdba:	6892      	ldr	r2, [r2, #8]
 800cdbc:	b291      	uxth	r1, r2
 800cdbe:	4a68      	ldr	r2, [pc, #416]	@ (800cf60 <clock_normal+0x248>)
 800cdc0:	6852      	ldr	r2, [r2, #4]
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f000 fc06 	bl	800d5d4 <DMA2D_Init>

			video.width = JPEG_Info.ImageWidth;
 800cdc8:	4b65      	ldr	r3, [pc, #404]	@ (800cf60 <clock_normal+0x248>)
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	4b5e      	ldr	r3, [pc, #376]	@ (800cf48 <clock_normal+0x230>)
 800cdd0:	831a      	strh	r2, [r3, #24]
			video.height = JPEG_Info.ImageHeight;
 800cdd2:	4b63      	ldr	r3, [pc, #396]	@ (800cf60 <clock_normal+0x248>)
 800cdd4:	689b      	ldr	r3, [r3, #8]
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	4b5b      	ldr	r3, [pc, #364]	@ (800cf48 <clock_normal+0x230>)
 800cdda:	835a      	strh	r2, [r3, #26]
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 800cddc:	4b5a      	ldr	r3, [pc, #360]	@ (800cf48 <clock_normal+0x230>)
 800cdde:	8b1b      	ldrh	r3, [r3, #24]
 800cde0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	da00      	bge.n	800cdea <clock_normal+0xd2>
 800cde8:	3301      	adds	r3, #1
 800cdea:	105b      	asrs	r3, r3, #1
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	4b56      	ldr	r3, [pc, #344]	@ (800cf48 <clock_normal+0x230>)
 800cdf0:	839a      	strh	r2, [r3, #28]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 800cdf2:	4b55      	ldr	r3, [pc, #340]	@ (800cf48 <clock_normal+0x230>)
 800cdf4:	8b5b      	ldrh	r3, [r3, #26]
 800cdf6:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	da00      	bge.n	800ce00 <clock_normal+0xe8>
 800cdfe:	3301      	adds	r3, #1
 800ce00:	105b      	asrs	r3, r3, #1
 800ce02:	b29a      	uxth	r2, r3
 800ce04:	4b50      	ldr	r3, [pc, #320]	@ (800cf48 <clock_normal+0x230>)
 800ce06:	83da      	strh	r2, [r3, #30]

			video.frame_time = AVI_Handel.aviInfo.SecPerFrame;
 800ce08:	4b51      	ldr	r3, [pc, #324]	@ (800cf50 <clock_normal+0x238>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	b29a      	uxth	r2, r3
 800ce0e:	4b4e      	ldr	r3, [pc, #312]	@ (800cf48 <clock_normal+0x230>)
 800ce10:	851a      	strh	r2, [r3, #40]	@ 0x28

			video.tick_offset = HAL_GetTick();
 800ce12:	f7f4 f877 	bl	8000f04 <HAL_GetTick>
 800ce16:	4603      	mov	r3, r0
 800ce18:	4a4b      	ldr	r2, [pc, #300]	@ (800cf48 <clock_normal+0x230>)
 800ce1a:	6313      	str	r3, [r2, #48]	@ 0x30
			video.frameCount = 1;
 800ce1c:	4b4a      	ldr	r3, [pc, #296]	@ (800cf48 <clock_normal+0x230>)
 800ce1e:	2201      	movs	r2, #1
 800ce20:	621a      	str	r2, [r3, #32]

			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800ce22:	2200      	movs	r2, #0
 800ce24:	4948      	ldr	r1, [pc, #288]	@ (800cf48 <clock_normal+0x230>)
 800ce26:	484f      	ldr	r0, [pc, #316]	@ (800cf64 <clock_normal+0x24c>)
 800ce28:	f7fa ffcc 	bl	8007dc4 <HAL_RTC_SetTime>

		}

		// Copies the output frame into LCD_FRAME_BUFFER and does the conversion from YCrCb to RGB888
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)LCD_FRAME_BUFFER, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800ce2c:	4b46      	ldr	r3, [pc, #280]	@ (800cf48 <clock_normal+0x230>)
 800ce2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce30:	4618      	mov	r0, r3
 800ce32:	4b4b      	ldr	r3, [pc, #300]	@ (800cf60 <clock_normal+0x248>)
 800ce34:	68db      	ldr	r3, [r3, #12]
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	4b49      	ldr	r3, [pc, #292]	@ (800cf60 <clock_normal+0x248>)
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 800ce42:	f000 fc45 	bl	800d6d0 <DMA2D_CopyBuffer>

		video.jpegOutDataAdreess = (video.jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;
 800ce46:	4b40      	ldr	r3, [pc, #256]	@ (800cf48 <clock_normal+0x230>)
 800ce48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce4a:	4a47      	ldr	r2, [pc, #284]	@ (800cf68 <clock_normal+0x250>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d101      	bne.n	800ce54 <clock_normal+0x13c>
 800ce50:	4b46      	ldr	r3, [pc, #280]	@ (800cf6c <clock_normal+0x254>)
 800ce52:	e000      	b.n	800ce56 <clock_normal+0x13e>
 800ce54:	4b44      	ldr	r3, [pc, #272]	@ (800cf68 <clock_normal+0x250>)
 800ce56:	4a3c      	ldr	r2, [pc, #240]	@ (800cf48 <clock_normal+0x230>)
 800ce58:	6353      	str	r3, [r2, #52]	@ 0x34

		// Implements the data conversion from RGB888 to RGB565
		doubleFormat pOut;
		pOut.u8Arr = (uint8_t *)LCD_FRAME_BUFFER;
 800ce5a:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800ce5e:	607b      	str	r3, [r7, #4]
		depth24To16(&pOut, ( video.width * video.height ), 3);
 800ce60:	4b39      	ldr	r3, [pc, #228]	@ (800cf48 <clock_normal+0x230>)
 800ce62:	8b1a      	ldrh	r2, [r3, #24]
 800ce64:	4b38      	ldr	r3, [pc, #224]	@ (800cf48 <clock_normal+0x230>)
 800ce66:	8b5b      	ldrh	r3, [r3, #26]
 800ce68:	fb12 f303 	smulbb	r3, r2, r3
 800ce6c:	b299      	uxth	r1, r3
 800ce6e:	1d3b      	adds	r3, r7, #4
 800ce70:	2203      	movs	r2, #3
 800ce72:	4618      	mov	r0, r3
 800ce74:	f000 fad2 	bl	800d41c <depth24To16>

		// Display the image
		lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 800ce78:	4b33      	ldr	r3, [pc, #204]	@ (800cf48 <clock_normal+0x230>)
 800ce7a:	8b98      	ldrh	r0, [r3, #28]
 800ce7c:	4b32      	ldr	r3, [pc, #200]	@ (800cf48 <clock_normal+0x230>)
 800ce7e:	8bd9      	ldrh	r1, [r3, #30]
 800ce80:	4b31      	ldr	r3, [pc, #196]	@ (800cf48 <clock_normal+0x230>)
 800ce82:	8b1a      	ldrh	r2, [r3, #24]
 800ce84:	4b30      	ldr	r3, [pc, #192]	@ (800cf48 <clock_normal+0x230>)
 800ce86:	8b5c      	ldrh	r4, [r3, #26]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	9300      	str	r3, [sp, #0]
 800ce8c:	4623      	mov	r3, r4
 800ce8e:	f000 fb4f 	bl	800d530 <lcd_draw>
	}

	// Synchronization

	// Obtain the number of frames to skip the next cycle
	video.actual_time = ( HAL_GetTick() - video.tick_offset );
 800ce92:	f7f4 f837 	bl	8000f04 <HAL_GetTick>
 800ce96:	4602      	mov	r2, r0
 800ce98:	4b2b      	ldr	r3, [pc, #172]	@ (800cf48 <clock_normal+0x230>)
 800ce9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	4a2a      	ldr	r2, [pc, #168]	@ (800cf48 <clock_normal+0x230>)
 800cea0:	62d3      	str	r3, [r2, #44]	@ 0x2c
	float watch_time = ( video.frameCount * ( video.frame_time / 1000.0 ) );
 800cea2:	4b29      	ldr	r3, [pc, #164]	@ (800cf48 <clock_normal+0x230>)
 800cea4:	6a1b      	ldr	r3, [r3, #32]
 800cea6:	ee07 3a90 	vmov	s15, r3
 800ceaa:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800ceae:	4b26      	ldr	r3, [pc, #152]	@ (800cf48 <clock_normal+0x230>)
 800ceb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ceb2:	ee07 3a90 	vmov	s15, r3
 800ceb6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ceba:	ed9f 4b21 	vldr	d4, [pc, #132]	@ 800cf40 <clock_normal+0x228>
 800cebe:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800cec2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cec6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ceca:	edc7 7a03 	vstr	s15, [r7, #12]
	video.frameToSkip = ( ( video.actual_time - watch_time ) / ( video.frame_time / 1000.0 ) );
 800cece:	4b1e      	ldr	r3, [pc, #120]	@ (800cf48 <clock_normal+0x230>)
 800ced0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ced2:	ee07 3a90 	vmov	s15, r3
 800ced6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ceda:	edd7 7a03 	vldr	s15, [r7, #12]
 800cede:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cee2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800cee6:	4b18      	ldr	r3, [pc, #96]	@ (800cf48 <clock_normal+0x230>)
 800cee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ceea:	ee07 3a90 	vmov	s15, r3
 800ceee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cef2:	ed9f 4b13 	vldr	d4, [pc, #76]	@ 800cf40 <clock_normal+0x228>
 800cef6:	ee87 6b04 	vdiv.f64	d6, d7, d4
 800cefa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800cefe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800cf02:	ee17 2a90 	vmov	r2, s15
 800cf06:	4b10      	ldr	r3, [pc, #64]	@ (800cf48 <clock_normal+0x230>)
 800cf08:	625a      	str	r2, [r3, #36]	@ 0x24

	if(video.frameToSkip < 0)
 800cf0a:	4b0f      	ldr	r3, [pc, #60]	@ (800cf48 <clock_normal+0x230>)
 800cf0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	da02      	bge.n	800cf18 <clock_normal+0x200>
		video.frameToSkip = 0;
 800cf12:	4b0d      	ldr	r3, [pc, #52]	@ (800cf48 <clock_normal+0x230>)
 800cf14:	2200      	movs	r2, #0
 800cf16:	625a      	str	r2, [r3, #36]	@ 0x24

	RTC_DateTypeDef sDate = {0};
 800cf18:	2300      	movs	r3, #0
 800cf1a:	60bb      	str	r3, [r7, #8]
	HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	490a      	ldr	r1, [pc, #40]	@ (800cf48 <clock_normal+0x230>)
 800cf20:	4810      	ldr	r0, [pc, #64]	@ (800cf64 <clock_normal+0x24c>)
 800cf22:	f7fa ffed 	bl	8007f00 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800cf26:	f107 0308 	add.w	r3, r7, #8
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	480d      	ldr	r0, [pc, #52]	@ (800cf64 <clock_normal+0x24c>)
 800cf30:	f7fb f8ca 	bl	80080c8 <HAL_RTC_GetDate>
 800cf34:	e000      	b.n	800cf38 <clock_normal+0x220>
		return;
 800cf36:	bf00      	nop

}
 800cf38:	3714      	adds	r7, #20
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd90      	pop	{r4, r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	00000000 	.word	0x00000000
 800cf44:	408f4000 	.word	0x408f4000
 800cf48:	20018824 	.word	0x20018824
 800cf4c:	200185ac 	.word	0x200185ac
 800cf50:	200187dc 	.word	0x200187dc
 800cf54:	20000374 	.word	0x20000374
 800cf58:	200001e4 	.word	0x200001e4
 800cf5c:	200001d0 	.word	0x200001d0
 800cf60:	200002a4 	.word	0x200002a4
 800cf64:	200002b8 	.word	0x200002b8
 800cf68:	d0600000 	.word	0xd0600000
 800cf6c:	d0800000 	.word	0xd0800000

0800cf70 <show_frame>:


static void show_frame(uint32_t frame_num)
{
 800cf70:	b590      	push	{r4, r7, lr}
 800cf72:	b089      	sub	sp, #36	@ 0x24
 800cf74:	af02      	add	r7, sp, #8
 800cf76:	6078      	str	r0, [r7, #4]

	for(int i = 0 ; i < frame_num ; i++)
 800cf78:	2300      	movs	r3, #0
 800cf7a:	617b      	str	r3, [r7, #20]
 800cf7c:	e011      	b.n	800cfa2 <show_frame+0x32>
	{

		AVI_GetFrame(&AVI_Handel, &MJPEG_File, 1);
 800cf7e:	2201      	movs	r2, #1
 800cf80:	495b      	ldr	r1, [pc, #364]	@ (800d0f0 <show_frame+0x180>)
 800cf82:	485c      	ldr	r0, [pc, #368]	@ (800d0f4 <show_frame+0x184>)
 800cf84:	f7fe fcee 	bl	800b964 <AVI_GetFrame>

		AVI_Handel.CurrentImage++;
 800cf88:	4b5a      	ldr	r3, [pc, #360]	@ (800d0f4 <show_frame+0x184>)
 800cf8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	4a59      	ldr	r2, [pc, #356]	@ (800d0f4 <show_frame+0x184>)
 800cf90:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 800cf92:	4b59      	ldr	r3, [pc, #356]	@ (800d0f8 <show_frame+0x188>)
 800cf94:	6a1b      	ldr	r3, [r3, #32]
 800cf96:	3301      	adds	r3, #1
 800cf98:	4a57      	ldr	r2, [pc, #348]	@ (800d0f8 <show_frame+0x188>)
 800cf9a:	6213      	str	r3, [r2, #32]
	for(int i = 0 ; i < frame_num ; i++)
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	617b      	str	r3, [r7, #20]
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d8e9      	bhi.n	800cf7e <show_frame+0xe>

	}

	for(int i = 0 ; i < 2 ; i++)
 800cfaa:	2300      	movs	r3, #0
 800cfac:	613b      	str	r3, [r7, #16]
 800cfae:	e096      	b.n	800d0de <show_frame+0x16e>
	{

		// Save the frame into MJPEG_VideoBuffer
		video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	494f      	ldr	r1, [pc, #316]	@ (800d0f0 <show_frame+0x180>)
 800cfb4:	484f      	ldr	r0, [pc, #316]	@ (800d0f4 <show_frame+0x184>)
 800cfb6:	f7fe fcd5 	bl	800b964 <AVI_GetFrame>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	4b4e      	ldr	r3, [pc, #312]	@ (800d0f8 <show_frame+0x188>)
 800cfc0:	75da      	strb	r2, [r3, #23]

		if(video.FrameType == AVI_VIDEO_FRAME)
 800cfc2:	4b4d      	ldr	r3, [pc, #308]	@ (800d0f8 <show_frame+0x188>)
 800cfc4:	7ddb      	ldrb	r3, [r3, #23]
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	f040 8086 	bne.w	800d0d8 <show_frame+0x168>
		{

			AVI_Handel.CurrentImage++;
 800cfcc:	4b49      	ldr	r3, [pc, #292]	@ (800d0f4 <show_frame+0x184>)
 800cfce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	4a48      	ldr	r2, [pc, #288]	@ (800d0f4 <show_frame+0x184>)
 800cfd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
			video.frameCount++;
 800cfd6:	4b48      	ldr	r3, [pc, #288]	@ (800d0f8 <show_frame+0x188>)
 800cfd8:	6a1b      	ldr	r3, [r3, #32]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	4a46      	ldr	r2, [pc, #280]	@ (800d0f8 <show_frame+0x188>)
 800cfde:	6213      	str	r3, [r2, #32]

			// Decode the frame inside MJPEG_VideoBuffer and put it into jpegOutDataAdreess in the format YCrCb
			JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 800cfe0:	4946      	ldr	r1, [pc, #280]	@ (800d0fc <show_frame+0x18c>)
 800cfe2:	4b44      	ldr	r3, [pc, #272]	@ (800d0f4 <show_frame+0x184>)
 800cfe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cfe6:	4b44      	ldr	r3, [pc, #272]	@ (800d0f8 <show_frame+0x188>)
 800cfe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfea:	4845      	ldr	r0, [pc, #276]	@ (800d100 <show_frame+0x190>)
 800cfec:	f7ff f8ac 	bl	800c148 <JPEG_Decode_DMA>

			while(Jpeg_HWDecodingEnd == 0);
 800cff0:	bf00      	nop
 800cff2:	4b44      	ldr	r3, [pc, #272]	@ (800d104 <show_frame+0x194>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d0fb      	beq.n	800cff2 <show_frame+0x82>

			if(video.isfirstFrame == 1)
 800cffa:	4b3f      	ldr	r3, [pc, #252]	@ (800d0f8 <show_frame+0x188>)
 800cffc:	7d9b      	ldrb	r3, [r3, #22]
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d136      	bne.n	800d070 <show_frame+0x100>
			{

				video.isfirstFrame = 0;
 800d002:	4b3d      	ldr	r3, [pc, #244]	@ (800d0f8 <show_frame+0x188>)
 800d004:	2200      	movs	r2, #0
 800d006:	759a      	strb	r2, [r3, #22]

				HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800d008:	493f      	ldr	r1, [pc, #252]	@ (800d108 <show_frame+0x198>)
 800d00a:	483d      	ldr	r0, [pc, #244]	@ (800d100 <show_frame+0x190>)
 800d00c:	f7f4 fefe 	bl	8001e0c <HAL_JPEG_GetInfo>

				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800d010:	4b3d      	ldr	r3, [pc, #244]	@ (800d108 <show_frame+0x198>)
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	b29b      	uxth	r3, r3
 800d016:	4a3c      	ldr	r2, [pc, #240]	@ (800d108 <show_frame+0x198>)
 800d018:	6892      	ldr	r2, [r2, #8]
 800d01a:	b291      	uxth	r1, r2
 800d01c:	4a3a      	ldr	r2, [pc, #232]	@ (800d108 <show_frame+0x198>)
 800d01e:	6852      	ldr	r2, [r2, #4]
 800d020:	4618      	mov	r0, r3
 800d022:	f000 fad7 	bl	800d5d4 <DMA2D_Init>

				video.width = JPEG_Info.ImageWidth;
 800d026:	4b38      	ldr	r3, [pc, #224]	@ (800d108 <show_frame+0x198>)
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	4b32      	ldr	r3, [pc, #200]	@ (800d0f8 <show_frame+0x188>)
 800d02e:	831a      	strh	r2, [r3, #24]
				video.height = JPEG_Info.ImageHeight;
 800d030:	4b35      	ldr	r3, [pc, #212]	@ (800d108 <show_frame+0x198>)
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	b29a      	uxth	r2, r3
 800d036:	4b30      	ldr	r3, [pc, #192]	@ (800d0f8 <show_frame+0x188>)
 800d038:	835a      	strh	r2, [r3, #26]
				video.xPos = ( ( LCD_X_SIZE - video.width ) / 2 );					// Center the image in x
 800d03a:	4b2f      	ldr	r3, [pc, #188]	@ (800d0f8 <show_frame+0x188>)
 800d03c:	8b1b      	ldrh	r3, [r3, #24]
 800d03e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d042:	2b00      	cmp	r3, #0
 800d044:	da00      	bge.n	800d048 <show_frame+0xd8>
 800d046:	3301      	adds	r3, #1
 800d048:	105b      	asrs	r3, r3, #1
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	4b2a      	ldr	r3, [pc, #168]	@ (800d0f8 <show_frame+0x188>)
 800d04e:	839a      	strh	r2, [r3, #28]
				video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 800d050:	4b29      	ldr	r3, [pc, #164]	@ (800d0f8 <show_frame+0x188>)
 800d052:	8b5b      	ldrh	r3, [r3, #26]
 800d054:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	da00      	bge.n	800d05e <show_frame+0xee>
 800d05c:	3301      	adds	r3, #1
 800d05e:	105b      	asrs	r3, r3, #1
 800d060:	b29a      	uxth	r2, r3
 800d062:	4b25      	ldr	r3, [pc, #148]	@ (800d0f8 <show_frame+0x188>)
 800d064:	83da      	strh	r2, [r3, #30]

				video.frame_time = AVI_Handel.aviInfo.SecPerFrame;
 800d066:	4b23      	ldr	r3, [pc, #140]	@ (800d0f4 <show_frame+0x184>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	4b22      	ldr	r3, [pc, #136]	@ (800d0f8 <show_frame+0x188>)
 800d06e:	851a      	strh	r2, [r3, #40]	@ 0x28

			}

			// Copies the output frame into LCD_FRAME_BUFFER and does the conversion from YCrCb to RGB888
			DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)LCD_FRAME_BUFFER, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800d070:	4b21      	ldr	r3, [pc, #132]	@ (800d0f8 <show_frame+0x188>)
 800d072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d074:	4618      	mov	r0, r3
 800d076:	4b24      	ldr	r3, [pc, #144]	@ (800d108 <show_frame+0x198>)
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	b29a      	uxth	r2, r3
 800d07c:	4b22      	ldr	r3, [pc, #136]	@ (800d108 <show_frame+0x198>)
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	b29b      	uxth	r3, r3
 800d082:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 800d086:	f000 fb23 	bl	800d6d0 <DMA2D_CopyBuffer>

			video.jpegOutDataAdreess = (video.jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;
 800d08a:	4b1b      	ldr	r3, [pc, #108]	@ (800d0f8 <show_frame+0x188>)
 800d08c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d08e:	4a1f      	ldr	r2, [pc, #124]	@ (800d10c <show_frame+0x19c>)
 800d090:	4293      	cmp	r3, r2
 800d092:	d101      	bne.n	800d098 <show_frame+0x128>
 800d094:	4b1e      	ldr	r3, [pc, #120]	@ (800d110 <show_frame+0x1a0>)
 800d096:	e000      	b.n	800d09a <show_frame+0x12a>
 800d098:	4b1c      	ldr	r3, [pc, #112]	@ (800d10c <show_frame+0x19c>)
 800d09a:	4a17      	ldr	r2, [pc, #92]	@ (800d0f8 <show_frame+0x188>)
 800d09c:	6353      	str	r3, [r2, #52]	@ 0x34

			// Implements the data conversion from RGB888 to RGB565
			doubleFormat pOut;
			pOut.u8Arr = (uint8_t *)LCD_FRAME_BUFFER;
 800d09e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800d0a2:	60fb      	str	r3, [r7, #12]
			depth24To16(&pOut, ( video.width * video.height ), 3);
 800d0a4:	4b14      	ldr	r3, [pc, #80]	@ (800d0f8 <show_frame+0x188>)
 800d0a6:	8b1a      	ldrh	r2, [r3, #24]
 800d0a8:	4b13      	ldr	r3, [pc, #76]	@ (800d0f8 <show_frame+0x188>)
 800d0aa:	8b5b      	ldrh	r3, [r3, #26]
 800d0ac:	fb12 f303 	smulbb	r3, r2, r3
 800d0b0:	b299      	uxth	r1, r3
 800d0b2:	f107 030c 	add.w	r3, r7, #12
 800d0b6:	2203      	movs	r2, #3
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f000 f9af 	bl	800d41c <depth24To16>

			lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 800d0be:	4b0e      	ldr	r3, [pc, #56]	@ (800d0f8 <show_frame+0x188>)
 800d0c0:	8b98      	ldrh	r0, [r3, #28]
 800d0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d0f8 <show_frame+0x188>)
 800d0c4:	8bd9      	ldrh	r1, [r3, #30]
 800d0c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d0f8 <show_frame+0x188>)
 800d0c8:	8b1a      	ldrh	r2, [r3, #24]
 800d0ca:	4b0b      	ldr	r3, [pc, #44]	@ (800d0f8 <show_frame+0x188>)
 800d0cc:	8b5c      	ldrh	r4, [r3, #26]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	9300      	str	r3, [sp, #0]
 800d0d2:	4623      	mov	r3, r4
 800d0d4:	f000 fa2c 	bl	800d530 <lcd_draw>
	for(int i = 0 ; i < 2 ; i++)
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	613b      	str	r3, [r7, #16]
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	f77f af65 	ble.w	800cfb0 <show_frame+0x40>

		}

	}

}
 800d0e6:	bf00      	nop
 800d0e8:	bf00      	nop
 800d0ea:	371c      	adds	r7, #28
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd90      	pop	{r4, r7, pc}
 800d0f0:	200185ac 	.word	0x200185ac
 800d0f4:	200187dc 	.word	0x200187dc
 800d0f8:	20018824 	.word	0x20018824
 800d0fc:	20000374 	.word	0x20000374
 800d100:	200001e4 	.word	0x200001e4
 800d104:	200001d0 	.word	0x200001d0
 800d108:	200002a4 	.word	0x200002a4
 800d10c:	d0600000 	.word	0xd0600000
 800d110:	d0800000 	.word	0xd0800000

0800d114 <file_handler>:


static void file_handler(uint8_t openFile)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b086      	sub	sp, #24
 800d118:	af02      	add	r7, sp, #8
 800d11a:	4603      	mov	r3, r0
 800d11c:	71fb      	strb	r3, [r7, #7]
	  // Each file takes 30m

     static uint8_t  new_file_flag = 1;


     if(new_file_flag || openFile)
 800d11e:	4b31      	ldr	r3, [pc, #196]	@ (800d1e4 <file_handler+0xd0>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d102      	bne.n	800d12c <file_handler+0x18>
 800d126:	79fb      	ldrb	r3, [r7, #7]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d033      	beq.n	800d194 <file_handler+0x80>
     {

    	 if(openFile)
 800d12c:	79fb      	ldrb	r3, [r7, #7]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d002      	beq.n	800d138 <file_handler+0x24>
    		 f_close(&MJPEG_File);
 800d132:	482d      	ldr	r0, [pc, #180]	@ (800d1e8 <file_handler+0xd4>)
 800d134:	f003 fa75 	bl	8010622 <f_close>

    	 new_file_flag = 0;
 800d138:	4b2a      	ldr	r3, [pc, #168]	@ (800d1e4 <file_handler+0xd0>)
 800d13a:	2200      	movs	r2, #0
 800d13c:	701a      	strb	r2, [r3, #0]

    	 char file_idx_str[4];
    	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 800d13e:	4b2b      	ldr	r3, [pc, #172]	@ (800d1ec <file_handler+0xd8>)
 800d140:	8a9b      	ldrh	r3, [r3, #20]
 800d142:	f107 000c 	add.w	r0, r7, #12
 800d146:	4a2a      	ldr	r2, [pc, #168]	@ (800d1f0 <file_handler+0xdc>)
 800d148:	2104      	movs	r1, #4
 800d14a:	f003 fe93 	bl	8010e74 <sniprintf>
    	 snprintf(name, sizeof(name), "video_%s.avi", file_idx_str);
 800d14e:	f107 030c 	add.w	r3, r7, #12
 800d152:	4a28      	ldr	r2, [pc, #160]	@ (800d1f4 <file_handler+0xe0>)
 800d154:	210e      	movs	r1, #14
 800d156:	4828      	ldr	r0, [pc, #160]	@ (800d1f8 <file_handler+0xe4>)
 800d158:	f003 fe8c 	bl	8010e74 <sniprintf>

    	 // Open the MJPEG avi file with read access
    	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 800d15c:	2201      	movs	r2, #1
 800d15e:	4926      	ldr	r1, [pc, #152]	@ (800d1f8 <file_handler+0xe4>)
 800d160:	4821      	ldr	r0, [pc, #132]	@ (800d1e8 <file_handler+0xd4>)
 800d162:	f002 fed7 	bl	800ff14 <f_open>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d112      	bne.n	800d192 <file_handler+0x7e>
    	 {

    		 video.isfirstFrame = 1;
 800d16c:	4b1f      	ldr	r3, [pc, #124]	@ (800d1ec <file_handler+0xd8>)
 800d16e:	2201      	movs	r2, #1
 800d170:	759a      	strb	r2, [r3, #22]

    		 // parse the AVI file Header
    		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 800d172:	2300      	movs	r3, #0
 800d174:	9301      	str	r3, [sp, #4]
 800d176:	4b21      	ldr	r3, [pc, #132]	@ (800d1fc <file_handler+0xe8>)
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 800d17e:	4a20      	ldr	r2, [pc, #128]	@ (800d200 <file_handler+0xec>)
 800d180:	4919      	ldr	r1, [pc, #100]	@ (800d1e8 <file_handler+0xd4>)
 800d182:	4820      	ldr	r0, [pc, #128]	@ (800d204 <file_handler+0xf0>)
 800d184:	f7fe fbae 	bl	800b8e4 <AVI_ParserInit>
 800d188:	4603      	mov	r3, r0
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <file_handler+0x80>
    			 while(1);
 800d18e:	bf00      	nop
 800d190:	e7fd      	b.n	800d18e <file_handler+0x7a>

    	 }
    	 else
    	 {

    		 while(1);
 800d192:	e7fe      	b.n	800d192 <file_handler+0x7e>
    	 }

     }

     // Check for the end of the video
     if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 800d194:	4b1b      	ldr	r3, [pc, #108]	@ (800d204 <file_handler+0xf0>)
 800d196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d198:	4b1a      	ldr	r3, [pc, #104]	@ (800d204 <file_handler+0xf0>)
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d31d      	bcc.n	800d1dc <file_handler+0xc8>
     {

    	 video.file_idx++;
 800d1a0:	4b12      	ldr	r3, [pc, #72]	@ (800d1ec <file_handler+0xd8>)
 800d1a2:	8a9b      	ldrh	r3, [r3, #20]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	4b10      	ldr	r3, [pc, #64]	@ (800d1ec <file_handler+0xd8>)
 800d1aa:	829a      	strh	r2, [r3, #20]
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 800d1ac:	4b0f      	ldr	r3, [pc, #60]	@ (800d1ec <file_handler+0xd8>)
 800d1ae:	8a9b      	ldrh	r3, [r3, #20]
 800d1b0:	091a      	lsrs	r2, r3, #4
 800d1b2:	4915      	ldr	r1, [pc, #84]	@ (800d208 <file_handler+0xf4>)
 800d1b4:	fba1 1202 	umull	r1, r2, r1, r2
 800d1b8:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 800d1bc:	fb01 f202 	mul.w	r2, r1, r2
 800d1c0:	1a9b      	subs	r3, r3, r2
 800d1c2:	b29a      	uxth	r2, r3
 800d1c4:	4b09      	ldr	r3, [pc, #36]	@ (800d1ec <file_handler+0xd8>)
 800d1c6:	829a      	strh	r2, [r3, #20]

		 //  wait for the Last DMA2D transfer to ends
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 800d1c8:	2132      	movs	r1, #50	@ 0x32
 800d1ca:	4810      	ldr	r0, [pc, #64]	@ (800d20c <file_handler+0xf8>)
 800d1cc:	f7f4 f963 	bl	8001496 <HAL_DMA2D_PollForTransfer>

		 f_close(&MJPEG_File);
 800d1d0:	4805      	ldr	r0, [pc, #20]	@ (800d1e8 <file_handler+0xd4>)
 800d1d2:	f003 fa26 	bl	8010622 <f_close>

		 new_file_flag = 1;
 800d1d6:	4b03      	ldr	r3, [pc, #12]	@ (800d1e4 <file_handler+0xd0>)
 800d1d8:	2201      	movs	r2, #1
 800d1da:	701a      	strb	r2, [r3, #0]

     }

}
 800d1dc:	bf00      	nop
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	2000000e 	.word	0x2000000e
 800d1e8:	200185ac 	.word	0x200185ac
 800d1ec:	20018824 	.word	0x20018824
 800d1f0:	080116c0 	.word	0x080116c0
 800d1f4:	080116c8 	.word	0x080116c8
 800d1f8:	20000364 	.word	0x20000364
 800d1fc:	20018374 	.word	0x20018374
 800d200:	20000374 	.word	0x20000374
 800d204:	200187dc 	.word	0x200187dc
 800d208:	05b05b06 	.word	0x05b05b06
 800d20c:	2000023c 	.word	0x2000023c

0800d210 <user_buttons_handler>:


static void user_buttons_handler(void)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	af00      	add	r7, sp, #0

	static uint8_t first = 1;
	static uint32_t button_timer = 0;


	if(video.video_mode == SETTING_MODE)
 800d214:	4b19      	ldr	r3, [pc, #100]	@ (800d27c <user_buttons_handler+0x6c>)
 800d216:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d02c      	beq.n	800d278 <user_buttons_handler+0x68>
		return;

	// Long press enters in setting mode
	if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800d21e:	2108      	movs	r1, #8
 800d220:	4817      	ldr	r0, [pc, #92]	@ (800d280 <user_buttons_handler+0x70>)
 800d222:	f7f4 fd25 	bl	8001c70 <HAL_GPIO_ReadPin>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d121      	bne.n	800d270 <user_buttons_handler+0x60>
	{

		if(first)
 800d22c:	4b15      	ldr	r3, [pc, #84]	@ (800d284 <user_buttons_handler+0x74>)
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d007      	beq.n	800d244 <user_buttons_handler+0x34>
		{

			first = 0;
 800d234:	4b13      	ldr	r3, [pc, #76]	@ (800d284 <user_buttons_handler+0x74>)
 800d236:	2200      	movs	r2, #0
 800d238:	701a      	strb	r2, [r3, #0]
			button_timer = HAL_GetTick();
 800d23a:	f7f3 fe63 	bl	8000f04 <HAL_GetTick>
 800d23e:	4603      	mov	r3, r0
 800d240:	4a11      	ldr	r2, [pc, #68]	@ (800d288 <user_buttons_handler+0x78>)
 800d242:	6013      	str	r3, [r2, #0]

		}

		if(abs( HAL_GetTick() - button_timer ) >= 3000)
 800d244:	f7f3 fe5e 	bl	8000f04 <HAL_GetTick>
 800d248:	4602      	mov	r2, r0
 800d24a:	4b0f      	ldr	r3, [pc, #60]	@ (800d288 <user_buttons_handler+0x78>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	1ad3      	subs	r3, r2, r3
 800d250:	2b00      	cmp	r3, #0
 800d252:	bfb8      	it	lt
 800d254:	425b      	neglt	r3, r3
 800d256:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800d25a:	4293      	cmp	r3, r2
 800d25c:	dd0d      	ble.n	800d27a <user_buttons_handler+0x6a>
		{

			video.video_mode = SETTING_MODE;
 800d25e:	4b07      	ldr	r3, [pc, #28]	@ (800d27c <user_buttons_handler+0x6c>)
 800d260:	2200      	movs	r2, #0
 800d262:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
			video.set = SET_IDLE;
 800d266:	4b05      	ldr	r3, [pc, #20]	@ (800d27c <user_buttons_handler+0x6c>)
 800d268:	2200      	movs	r2, #0
 800d26a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800d26e:	e004      	b.n	800d27a <user_buttons_handler+0x6a>

	}
	else
	{

		first = 1;
 800d270:	4b04      	ldr	r3, [pc, #16]	@ (800d284 <user_buttons_handler+0x74>)
 800d272:	2201      	movs	r2, #1
 800d274:	701a      	strb	r2, [r3, #0]
 800d276:	e000      	b.n	800d27a <user_buttons_handler+0x6a>
		return;
 800d278:	bf00      	nop

	}

}
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	20018824 	.word	0x20018824
 800d280:	58022400 	.word	0x58022400
 800d284:	2000000f 	.word	0x2000000f
 800d288:	20018868 	.word	0x20018868

0800d28c <battery_management>:


static void battery_management()
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0


	if(video.display_status == DISPLAY_ON)
 800d292:	4b3c      	ldr	r3, [pc, #240]	@ (800d384 <battery_management+0xf8>)
 800d294:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d16e      	bne.n	800d37a <battery_management+0xee>
	{

		if(TIME_ELAPSED(video.time.Seconds, video.display_ts) > DISPLAY_STANDBY_TIMER)
 800d29c:	4b39      	ldr	r3, [pc, #228]	@ (800d384 <battery_management+0xf8>)
 800d29e:	789b      	ldrb	r3, [r3, #2]
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	4b38      	ldr	r3, [pc, #224]	@ (800d384 <battery_management+0xf8>)
 800d2a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d00b      	beq.n	800d2c2 <battery_management+0x36>
 800d2aa:	4b36      	ldr	r3, [pc, #216]	@ (800d384 <battery_management+0xf8>)
 800d2ac:	789b      	ldrb	r3, [r3, #2]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	4b34      	ldr	r3, [pc, #208]	@ (800d384 <battery_management+0xf8>)
 800d2b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2b4:	1ad3      	subs	r3, r2, r3
 800d2b6:	2b1e      	cmp	r3, #30
 800d2b8:	bf8c      	ite	hi
 800d2ba:	2301      	movhi	r3, #1
 800d2bc:	2300      	movls	r3, #0
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	e009      	b.n	800d2d6 <battery_management+0x4a>
 800d2c2:	4b30      	ldr	r3, [pc, #192]	@ (800d384 <battery_management+0xf8>)
 800d2c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2c6:	4a2f      	ldr	r2, [pc, #188]	@ (800d384 <battery_management+0xf8>)
 800d2c8:	7892      	ldrb	r2, [r2, #2]
 800d2ca:	1a9b      	subs	r3, r3, r2
 800d2cc:	2b1e      	cmp	r3, #30
 800d2ce:	bf8c      	ite	hi
 800d2d0:	2301      	movhi	r3, #1
 800d2d2:	2300      	movls	r3, #0
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d04f      	beq.n	800d37a <battery_management+0xee>
		{

			// Enable interrupts for user buttons
			MX_GPIO_Init(1);
 800d2da:	2001      	movs	r0, #1
 800d2dc:	f7ff f9ac 	bl	800c638 <MX_GPIO_Init>

			parameters_reset();
 800d2e0:	f000 f856 	bl	800d390 <parameters_reset>

			GC9A01_sleep_mode(ON);
 800d2e4:	2001      	movs	r0, #1
 800d2e6:	f7fe fefc 	bl	800c0e2 <GC9A01_sleep_mode>
			video.display_status = DISPLAY_OFF;
 800d2ea:	4b26      	ldr	r3, [pc, #152]	@ (800d384 <battery_management+0xf8>)
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

			// Stop mode

			HAL_SuspendTick();
 800d2f2:	f7f3 fe37 	bl	8000f64 <HAL_SuspendTick>
  __ASM volatile ("cpsid i" : : : "memory");
 800d2f6:	b672      	cpsid	i
}
 800d2f8:	bf00      	nop

			__disable_irq();

			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800d2fa:	2101      	movs	r1, #1
 800d2fc:	2001      	movs	r0, #1
 800d2fe:	f7f6 ff37 	bl	8004170 <HAL_PWR_EnterSTOPMode>
  __ASM volatile ("cpsie i" : : : "memory");
 800d302:	b662      	cpsie	i
}
 800d304:	bf00      	nop

			// Wake up

			__enable_irq();

			HAL_ResumeTick();
 800d306:	f7f3 fe3d 	bl	8000f84 <HAL_ResumeTick>

			SystemClock_Config();
 800d30a:	f7fe fff9 	bl	800c300 <SystemClock_Config>

			GC9A01_init();
 800d30e:	f7fe fc68 	bl	800bbe2 <GC9A01_init>
			video.display_status = DISPLAY_ON;
 800d312:	4b1c      	ldr	r3, [pc, #112]	@ (800d384 <battery_management+0xf8>)
 800d314:	2201      	movs	r2, #1
 800d316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

			// Clock setting

			RTC_DateTypeDef sDate = {0};
 800d31a:	2300      	movs	r3, #0
 800d31c:	607b      	str	r3, [r7, #4]
			HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800d31e:	2200      	movs	r2, #0
 800d320:	4918      	ldr	r1, [pc, #96]	@ (800d384 <battery_management+0xf8>)
 800d322:	4819      	ldr	r0, [pc, #100]	@ (800d388 <battery_management+0xfc>)
 800d324:	f7fa fdec 	bl	8007f00 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800d328:	1d3b      	adds	r3, r7, #4
 800d32a:	2200      	movs	r2, #0
 800d32c:	4619      	mov	r1, r3
 800d32e:	4816      	ldr	r0, [pc, #88]	@ (800d388 <battery_management+0xfc>)
 800d330:	f7fa feca 	bl	80080c8 <HAL_RTC_GetDate>

			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 800d334:	4b13      	ldr	r3, [pc, #76]	@ (800d384 <battery_management+0xf8>)
 800d336:	781a      	ldrb	r2, [r3, #0]
 800d338:	4b14      	ldr	r3, [pc, #80]	@ (800d38c <battery_management+0x100>)
 800d33a:	fba3 1302 	umull	r1, r3, r3, r2
 800d33e:	08d9      	lsrs	r1, r3, #3
 800d340:	460b      	mov	r3, r1
 800d342:	005b      	lsls	r3, r3, #1
 800d344:	440b      	add	r3, r1
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	1ad3      	subs	r3, r2, r3
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	461a      	mov	r2, r3
 800d34e:	0112      	lsls	r2, r2, #4
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	009b      	lsls	r3, r3, #2
 800d354:	b29a      	uxth	r2, r3
 800d356:	4b0b      	ldr	r3, [pc, #44]	@ (800d384 <battery_management+0xf8>)
 800d358:	829a      	strh	r2, [r3, #20]
			video.file_idx += video.time.Minutes;
 800d35a:	4b0a      	ldr	r3, [pc, #40]	@ (800d384 <battery_management+0xf8>)
 800d35c:	8a9b      	ldrh	r3, [r3, #20]
 800d35e:	4a09      	ldr	r2, [pc, #36]	@ (800d384 <battery_management+0xf8>)
 800d360:	7852      	ldrb	r2, [r2, #1]
 800d362:	4413      	add	r3, r2
 800d364:	b29a      	uxth	r2, r3
 800d366:	4b07      	ldr	r3, [pc, #28]	@ (800d384 <battery_management+0xf8>)
 800d368:	829a      	strh	r2, [r3, #20]

			file_handler(1);
 800d36a:	2001      	movs	r0, #1
 800d36c:	f7ff fed2 	bl	800d114 <file_handler>

			video.display_ts = video.time.Seconds;
 800d370:	4b04      	ldr	r3, [pc, #16]	@ (800d384 <battery_management+0xf8>)
 800d372:	789b      	ldrb	r3, [r3, #2]
 800d374:	461a      	mov	r2, r3
 800d376:	4b03      	ldr	r3, [pc, #12]	@ (800d384 <battery_management+0xf8>)
 800d378:	63da      	str	r2, [r3, #60]	@ 0x3c

		}

	}

}
 800d37a:	bf00      	nop
 800d37c:	3708      	adds	r7, #8
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	20018824 	.word	0x20018824
 800d388:	200002b8 	.word	0x200002b8
 800d38c:	aaaaaaab 	.word	0xaaaaaaab

0800d390 <parameters_reset>:


static void parameters_reset(void)
{
 800d390:	b480      	push	{r7}
 800d392:	af00      	add	r7, sp, #0

	video.width = 0;
 800d394:	4b1f      	ldr	r3, [pc, #124]	@ (800d414 <parameters_reset+0x84>)
 800d396:	2200      	movs	r2, #0
 800d398:	831a      	strh	r2, [r3, #24]
	video.height = 0;
 800d39a:	4b1e      	ldr	r3, [pc, #120]	@ (800d414 <parameters_reset+0x84>)
 800d39c:	2200      	movs	r2, #0
 800d39e:	835a      	strh	r2, [r3, #26]
	video.xPos = 0;
 800d3a0:	4b1c      	ldr	r3, [pc, #112]	@ (800d414 <parameters_reset+0x84>)
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	839a      	strh	r2, [r3, #28]
	video.yPos = 0;
 800d3a6:	4b1b      	ldr	r3, [pc, #108]	@ (800d414 <parameters_reset+0x84>)
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	83da      	strh	r2, [r3, #30]

	video.time.Hours = 0;
 800d3ac:	4b19      	ldr	r3, [pc, #100]	@ (800d414 <parameters_reset+0x84>)
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	701a      	strb	r2, [r3, #0]
	video.time.Minutes = 0;
 800d3b2:	4b18      	ldr	r3, [pc, #96]	@ (800d414 <parameters_reset+0x84>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	705a      	strb	r2, [r3, #1]
	video.time.Seconds = 0;
 800d3b8:	4b16      	ldr	r3, [pc, #88]	@ (800d414 <parameters_reset+0x84>)
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	709a      	strb	r2, [r3, #2]

	video.file_idx = 0;
 800d3be:	4b15      	ldr	r3, [pc, #84]	@ (800d414 <parameters_reset+0x84>)
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	829a      	strh	r2, [r3, #20]
	video.FrameType = 0;
 800d3c4:	4b13      	ldr	r3, [pc, #76]	@ (800d414 <parameters_reset+0x84>)
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	75da      	strb	r2, [r3, #23]

	video.frameToSkip = 0;
 800d3ca:	4b12      	ldr	r3, [pc, #72]	@ (800d414 <parameters_reset+0x84>)
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	625a      	str	r2, [r3, #36]	@ 0x24
	video.frame_time = 0;
 800d3d0:	4b10      	ldr	r3, [pc, #64]	@ (800d414 <parameters_reset+0x84>)
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	851a      	strh	r2, [r3, #40]	@ 0x28
	video.actual_time = 0;
 800d3d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d414 <parameters_reset+0x84>)
 800d3d8:	2200      	movs	r2, #0
 800d3da:	62da      	str	r2, [r3, #44]	@ 0x2c
	video.tick_offset = 0;
 800d3dc:	4b0d      	ldr	r3, [pc, #52]	@ (800d414 <parameters_reset+0x84>)
 800d3de:	2200      	movs	r2, #0
 800d3e0:	631a      	str	r2, [r3, #48]	@ 0x30
	video.jpegOutDataAdreess = JPEG_OUTPUT_DATA_BUFFER0;
 800d3e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d414 <parameters_reset+0x84>)
 800d3e4:	4a0c      	ldr	r2, [pc, #48]	@ (800d418 <parameters_reset+0x88>)
 800d3e6:	635a      	str	r2, [r3, #52]	@ 0x34

	video.display_ts = video.time.Seconds;
 800d3e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d414 <parameters_reset+0x84>)
 800d3ea:	789b      	ldrb	r3, [r3, #2]
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	4b09      	ldr	r3, [pc, #36]	@ (800d414 <parameters_reset+0x84>)
 800d3f0:	63da      	str	r2, [r3, #60]	@ 0x3c

	video.display_status = DISPLAY_ON;
 800d3f2:	4b08      	ldr	r3, [pc, #32]	@ (800d414 <parameters_reset+0x84>)
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	video.frameCount = 0;
 800d3fa:	4b06      	ldr	r3, [pc, #24]	@ (800d414 <parameters_reset+0x84>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	621a      	str	r2, [r3, #32]

	//video.video_mode = NORMAL_MODE;
	video.set = SET_IDLE;
 800d400:	4b04      	ldr	r3, [pc, #16]	@ (800d414 <parameters_reset+0x84>)
 800d402:	2200      	movs	r2, #0
 800d404:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

}
 800d408:	bf00      	nop
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	20018824 	.word	0x20018824
 800d418:	d0600000 	.word	0xd0600000

0800d41c <depth24To16>:


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	460b      	mov	r3, r1
 800d426:	807b      	strh	r3, [r7, #2]
 800d428:	4613      	mov	r3, r2
 800d42a:	707b      	strb	r3, [r7, #1]

	uint8_t b;
	uint8_t g;
	uint8_t r;

	int i = 0;
 800d42c:	2300      	movs	r3, #0
 800d42e:	60fb      	str	r3, [r7, #12]


	// Only half of the frame is handled per time
	// Alternate the top and bottom half every cycle
    if(swap)
 800d430:	4b3d      	ldr	r3, [pc, #244]	@ (800d528 <depth24To16+0x10c>)
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d00c      	beq.n	800d452 <depth24To16+0x36>
    {

    	swap = 0;
 800d438:	4b3b      	ldr	r3, [pc, #236]	@ (800d528 <depth24To16+0x10c>)
 800d43a:	2200      	movs	r2, #0
 800d43c:	701a      	strb	r2, [r3, #0]

    	i = 0;
 800d43e:	2300      	movs	r3, #0
 800d440:	60fb      	str	r3, [r7, #12]
    	length /= 2;
 800d442:	887b      	ldrh	r3, [r7, #2]
 800d444:	085b      	lsrs	r3, r3, #1
 800d446:	807b      	strh	r3, [r7, #2]
    	length += 1000;
 800d448:	887b      	ldrh	r3, [r7, #2]
 800d44a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d44e:	807b      	strh	r3, [r7, #2]
 800d450:	e05e      	b.n	800d510 <depth24To16+0xf4>

    }
    else
    {

    	swap = 1;
 800d452:	4b35      	ldr	r3, [pc, #212]	@ (800d528 <depth24To16+0x10c>)
 800d454:	2201      	movs	r2, #1
 800d456:	701a      	strb	r2, [r3, #0]

    	i = ( length / 2 ) - 2000;
 800d458:	887b      	ldrh	r3, [r7, #2]
 800d45a:	085b      	lsrs	r3, r3, #1
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800d462:	60fb      	str	r3, [r7, #12]

    }

	for( ; i < length ; i++)
 800d464:	e054      	b.n	800d510 <depth24To16+0xf4>
	{

		b = pxArr->u8Arr[i*bpx];
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	787a      	ldrb	r2, [r7, #1]
 800d46c:	68f9      	ldr	r1, [r7, #12]
 800d46e:	fb01 f202 	mul.w	r2, r1, r2
 800d472:	4413      	add	r3, r2
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	787b      	ldrb	r3, [r7, #1]
 800d47e:	68f9      	ldr	r1, [r7, #12]
 800d480:	fb01 f303 	mul.w	r3, r1, r3
 800d484:	3301      	adds	r3, #1
 800d486:	4413      	add	r3, r2
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681a      	ldr	r2, [r3, #0]
 800d490:	787b      	ldrb	r3, [r7, #1]
 800d492:	68f9      	ldr	r1, [r7, #12]
 800d494:	fb01 f303 	mul.w	r3, r1, r3
 800d498:	3302      	adds	r3, #2
 800d49a:	4413      	add	r3, r2
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 800d4a0:	7a7b      	ldrb	r3, [r7, #9]
 800d4a2:	021b      	lsls	r3, r3, #8
 800d4a4:	b21a      	sxth	r2, r3
 800d4a6:	4b21      	ldr	r3, [pc, #132]	@ (800d52c <depth24To16+0x110>)
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	b21a      	sxth	r2, r3
 800d4ac:	7abb      	ldrb	r3, [r7, #10]
 800d4ae:	00db      	lsls	r3, r3, #3
 800d4b0:	b21b      	sxth	r3, r3
 800d4b2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800d4b6:	b21b      	sxth	r3, r3
 800d4b8:	4313      	orrs	r3, r2
 800d4ba:	b21a      	sxth	r2, r3
 800d4bc:	7afb      	ldrb	r3, [r7, #11]
 800d4be:	08db      	lsrs	r3, r3, #3
 800d4c0:	b2db      	uxtb	r3, r3
 800d4c2:	b21b      	sxth	r3, r3
 800d4c4:	4313      	orrs	r3, r2
 800d4c6:	b219      	sxth	r1, r3
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	005b      	lsls	r3, r3, #1
 800d4d0:	4413      	add	r3, r2
 800d4d2:	b28a      	uxth	r2, r1
 800d4d4:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	4413      	add	r3, r2
 800d4e0:	881b      	ldrh	r3, [r3, #0]
 800d4e2:	021b      	lsls	r3, r3, #8
 800d4e4:	b21a      	sxth	r2, r3
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6819      	ldr	r1, [r3, #0]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	005b      	lsls	r3, r3, #1
 800d4ee:	440b      	add	r3, r1
 800d4f0:	881b      	ldrh	r3, [r3, #0]
 800d4f2:	0a1b      	lsrs	r3, r3, #8
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	b21b      	sxth	r3, r3
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	b219      	sxth	r1, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	4413      	add	r3, r2
 800d506:	b28a      	uxth	r2, r1
 800d508:	801a      	strh	r2, [r3, #0]
	for( ; i < length ; i++)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	3301      	adds	r3, #1
 800d50e:	60fb      	str	r3, [r7, #12]
 800d510:	887b      	ldrh	r3, [r7, #2]
 800d512:	68fa      	ldr	r2, [r7, #12]
 800d514:	429a      	cmp	r2, r3
 800d516:	dba6      	blt.n	800d466 <depth24To16+0x4a>

	}

}
 800d518:	bf00      	nop
 800d51a:	bf00      	nop
 800d51c:	3714      	adds	r7, #20
 800d51e:	46bd      	mov	sp, r7
 800d520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	2001886c 	.word	0x2001886c
 800d52c:	fffff800 	.word	0xfffff800

0800d530 <lcd_draw>:


static void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 800d530:	b590      	push	{r4, r7, lr}
 800d532:	b087      	sub	sp, #28
 800d534:	af00      	add	r7, sp, #0
 800d536:	4604      	mov	r4, r0
 800d538:	4608      	mov	r0, r1
 800d53a:	4611      	mov	r1, r2
 800d53c:	461a      	mov	r2, r3
 800d53e:	4623      	mov	r3, r4
 800d540:	80fb      	strh	r3, [r7, #6]
 800d542:	4603      	mov	r3, r0
 800d544:	80bb      	strh	r3, [r7, #4]
 800d546:	460b      	mov	r3, r1
 800d548:	807b      	strh	r3, [r7, #2]
 800d54a:	4613      	mov	r3, r2
 800d54c:	803b      	strh	r3, [r7, #0]
	   struct GC9A01_frame frame;


		// Only half of the frame is handled per time
		// Alternate the top and bottom half every cycle
	   	if(swap)
 800d54e:	4b20      	ldr	r3, [pc, #128]	@ (800d5d0 <lcd_draw+0xa0>)
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00b      	beq.n	800d56e <lcd_draw+0x3e>
	   	{

	   		swap = 0;
 800d556:	4b1e      	ldr	r3, [pc, #120]	@ (800d5d0 <lcd_draw+0xa0>)
 800d558:	2200      	movs	r2, #0
 800d55a:	701a      	strb	r2, [r3, #0]

	        frame.start.X = 0;
 800d55c:	2300      	movs	r3, #0
 800d55e:	81bb      	strh	r3, [r7, #12]
	        frame.start.Y = 0;
 800d560:	2300      	movs	r3, #0
 800d562:	81fb      	strh	r3, [r7, #14]
	        frame.end.X = 239;
 800d564:	23ef      	movs	r3, #239	@ 0xef
 800d566:	823b      	strh	r3, [r7, #16]
	        frame.end.Y = 119;
 800d568:	2377      	movs	r3, #119	@ 0x77
 800d56a:	827b      	strh	r3, [r7, #18]
 800d56c:	e00e      	b.n	800d58c <lcd_draw+0x5c>

	   	}
	   	else
	   	{

	   		swap = 1;
 800d56e:	4b18      	ldr	r3, [pc, #96]	@ (800d5d0 <lcd_draw+0xa0>)
 800d570:	2201      	movs	r2, #1
 800d572:	701a      	strb	r2, [r3, #0]

	   		data += ( 240 * 240 );
 800d574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d576:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800d57a:	62bb      	str	r3, [r7, #40]	@ 0x28

	        frame.start.X = 0;
 800d57c:	2300      	movs	r3, #0
 800d57e:	81bb      	strh	r3, [r7, #12]
	        frame.start.Y = 120;
 800d580:	2378      	movs	r3, #120	@ 0x78
 800d582:	81fb      	strh	r3, [r7, #14]
	        frame.end.X = 239;
 800d584:	23ef      	movs	r3, #239	@ 0xef
 800d586:	823b      	strh	r3, [r7, #16]
	        frame.end.Y = 239;
 800d588:	23ef      	movs	r3, #239	@ 0xef
 800d58a:	827b      	strh	r3, [r7, #18]

	   	}

	   	// Sends the block of data in a single time

	    GC9A01_set_frame(frame);
 800d58c:	f107 030c 	add.w	r3, r7, #12
 800d590:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d594:	f7fe fd69 	bl	800c06a <GC9A01_set_frame>
	    GC9A01_write_command(MEM_WR);
 800d598:	202c      	movs	r0, #44	@ 0x2c
 800d59a:	f7fe fae5 	bl	800bb68 <GC9A01_write_command>

	    GC9A01_set_data_command(ON);
 800d59e:	2001      	movs	r0, #1
 800d5a0:	f7fe faae 	bl	800bb00 <GC9A01_set_data_command>
	    GC9A01_set_chip_select(OFF);
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	f7fe fac5 	bl	800bb34 <GC9A01_set_chip_select>

	    uint32_t total_bytes = wd * ht;		// 2 byte per pixel
 800d5aa:	887b      	ldrh	r3, [r7, #2]
 800d5ac:	883a      	ldrh	r2, [r7, #0]
 800d5ae:	fb02 f303 	mul.w	r3, r2, r3
 800d5b2:	617b      	str	r3, [r7, #20]
	    GC9A01_spi_tx(data, total_bytes);
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d5bc:	f7fe fda8 	bl	800c110 <GC9A01_spi_tx>

	    GC9A01_set_chip_select(ON);
 800d5c0:	2001      	movs	r0, #1
 800d5c2:	f7fe fab7 	bl	800bb34 <GC9A01_set_chip_select>

}
 800d5c6:	bf00      	nop
 800d5c8:	371c      	adds	r7, #28
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd90      	pop	{r4, r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	2001886d 	.word	0x2001886d

0800d5d4 <DMA2D_Init>:


static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	4603      	mov	r3, r0
 800d5dc:	603a      	str	r2, [r7, #0]
 800d5de:	80fb      	strh	r3, [r7, #6]
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	60fb      	str	r3, [r7, #12]
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	60bb      	str	r3, [r7, #8]


  HAL_DMA2D_MspInit(&DMA2D_Handle);
 800d5ec:	4836      	ldr	r0, [pc, #216]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d5ee:	f000 fa0d 	bl	800da0c <HAL_DMA2D_MspInit>

  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d10d      	bne.n	800d614 <DMA2D_Init+0x40>
  {

    cssMode = DMA2D_CSS_420;
 800d5f8:	2302      	movs	r3, #2
 800d5fa:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800d5fc:	88fb      	ldrh	r3, [r7, #6]
 800d5fe:	f003 030f 	and.w	r3, r3, #15
 800d602:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d025      	beq.n	800d656 <DMA2D_Init+0x82>
    {

      inputLineOffset = 16 - inputLineOffset;
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	f1c3 0310 	rsb	r3, r3, #16
 800d610:	60bb      	str	r3, [r7, #8]
 800d612:	e020      	b.n	800d656 <DMA2D_Init+0x82>

    }

  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d10d      	bne.n	800d636 <DMA2D_Init+0x62>
  {

    cssMode = DMA2D_NO_CSS;
 800d61a:	2300      	movs	r3, #0
 800d61c:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 8;
 800d61e:	88fb      	ldrh	r3, [r7, #6]
 800d620:	f003 0307 	and.w	r3, r3, #7
 800d624:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d014      	beq.n	800d656 <DMA2D_Init+0x82>
    {

      inputLineOffset = 8 - inputLineOffset;
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	f1c3 0308 	rsb	r3, r3, #8
 800d632:	60bb      	str	r3, [r7, #8]
 800d634:	e00f      	b.n	800d656 <DMA2D_Init+0x82>

    }

  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	2b02      	cmp	r3, #2
 800d63a:	d10c      	bne.n	800d656 <DMA2D_Init+0x82>
  {

    cssMode = DMA2D_CSS_422;
 800d63c:	2301      	movs	r3, #1
 800d63e:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800d640:	88fb      	ldrh	r3, [r7, #6]
 800d642:	f003 030f 	and.w	r3, r3, #15
 800d646:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d003      	beq.n	800d656 <DMA2D_Init+0x82>
    {

      inputLineOffset = 16 - inputLineOffset;
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	f1c3 0310 	rsb	r3, r3, #16
 800d654:	60bb      	str	r3, [r7, #8]
    }

  }

  // Configure the DMA2D Mode, Color Mode and output offset
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 800d656:	4b1c      	ldr	r3, [pc, #112]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d658:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d65c:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 800d65e:	4b1a      	ldr	r3, [pc, #104]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d660:	2201      	movs	r2, #1
 800d662:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 800d664:	88fb      	ldrh	r3, [r7, #6]
 800d666:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d66a:	461a      	mov	r2, r3
 800d66c:	4b16      	ldr	r3, [pc, #88]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d66e:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 800d670:	4b15      	ldr	r3, [pc, #84]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d672:	2200      	movs	r2, #0
 800d674:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 800d676:	4b14      	ldr	r3, [pc, #80]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d678:	2200      	movs	r2, #0
 800d67a:	615a      	str	r2, [r3, #20]

  // DMA2D Callbacks Configuration
  DMA2D_Handle.XferCpltCallback  = NULL;
 800d67c:	4b12      	ldr	r3, [pc, #72]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d67e:	2200      	movs	r2, #0
 800d680:	621a      	str	r2, [r3, #32]

  // Foreground Configuration
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800d682:	4b11      	ldr	r3, [pc, #68]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d684:	2201      	movs	r2, #1
 800d686:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 800d688:	4b0f      	ldr	r3, [pc, #60]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d68a:	22ff      	movs	r2, #255	@ 0xff
 800d68c:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 800d68e:	4b0e      	ldr	r3, [pc, #56]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d690:	220b      	movs	r2, #11
 800d692:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 800d694:	4a0c      	ldr	r2, [pc, #48]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 800d69a:	4a0b      	ldr	r2, [pc, #44]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; 		// No ForeGround Red/Blue swap
 800d6a0:	4b09      	ldr	r3, [pc, #36]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 800d6a6:	4b08      	ldr	r3, [pc, #32]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance = DMA2D;
 800d6ac:	4b06      	ldr	r3, [pc, #24]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d6ae:	4a07      	ldr	r2, [pc, #28]	@ (800d6cc <DMA2D_Init+0xf8>)
 800d6b0:	601a      	str	r2, [r3, #0]

  // DMA2D Initialization
  HAL_DMA2D_Init(&DMA2D_Handle);
 800d6b2:	4805      	ldr	r0, [pc, #20]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d6b4:	f7f3 fe60 	bl	8001378 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 800d6b8:	2101      	movs	r1, #1
 800d6ba:	4803      	ldr	r0, [pc, #12]	@ (800d6c8 <DMA2D_Init+0xf4>)
 800d6bc:	f7f3 ffd4 	bl	8001668 <HAL_DMA2D_ConfigLayer>

}
 800d6c0:	bf00      	nop
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	2000023c 	.word	0x2000023c
 800d6cc:	52001000 	.word	0x52001000

0800d6d0 <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t ImageWidth, uint16_t ImageHeight)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b08a      	sub	sp, #40	@ 0x28
 800d6d4:	af02      	add	r7, sp, #8
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	4611      	mov	r1, r2
 800d6dc:	461a      	mov	r2, r3
 800d6de:	460b      	mov	r3, r1
 800d6e0:	80fb      	strh	r3, [r7, #6]
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	80bb      	strh	r3, [r7, #4]

  uint32_t xPos, yPos, destination;


  // calculate the destination transfer address
  xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 800d6e6:	4b15      	ldr	r3, [pc, #84]	@ (800d73c <DMA2D_CopyBuffer+0x6c>)
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d6ee:	085b      	lsrs	r3, r3, #1
 800d6f0:	61fb      	str	r3, [r7, #28]
  yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 800d6f2:	4b12      	ldr	r3, [pc, #72]	@ (800d73c <DMA2D_CopyBuffer+0x6c>)
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d6fa:	085b      	lsrs	r3, r3, #1
 800d6fc:	61bb      	str	r3, [r7, #24]

  destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 800d6fe:	69ba      	ldr	r2, [r7, #24]
 800d700:	4613      	mov	r3, r2
 800d702:	011b      	lsls	r3, r3, #4
 800d704:	1a9b      	subs	r3, r3, r2
 800d706:	011b      	lsls	r3, r3, #4
 800d708:	461a      	mov	r2, r3
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	4413      	add	r3, r2
 800d70e:	009a      	lsls	r2, r3, #2
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	4413      	add	r3, r2
 800d714:	617b      	str	r3, [r7, #20]

  // wait for the DMA2D transfer to ends
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 800d716:	f04f 31ff 	mov.w	r1, #4294967295
 800d71a:	4809      	ldr	r0, [pc, #36]	@ (800d740 <DMA2D_CopyBuffer+0x70>)
 800d71c:	f7f3 febb 	bl	8001496 <HAL_DMA2D_PollForTransfer>
  // copy the new decoded frame to the LCD Frame buffer
  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 800d720:	68f9      	ldr	r1, [r7, #12]
 800d722:	88fa      	ldrh	r2, [r7, #6]
 800d724:	88bb      	ldrh	r3, [r7, #4]
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	4613      	mov	r3, r2
 800d72a:	697a      	ldr	r2, [r7, #20]
 800d72c:	4804      	ldr	r0, [pc, #16]	@ (800d740 <DMA2D_CopyBuffer+0x70>)
 800d72e:	f7f3 fe87 	bl	8001440 <HAL_DMA2D_Start>

}
 800d732:	bf00      	nop
 800d734:	3720      	adds	r7, #32
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	200002a4 	.word	0x200002a4
 800d740:	2000023c 	.word	0x2000023c

0800d744 <SD_Initialize>:


static void SD_Initialize(void)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	af00      	add	r7, sp, #0

  BSP_SD_Init(0);
 800d748:	2000      	movs	r0, #0
 800d74a:	f7f2 ff25 	bl	8000598 <BSP_SD_Init>

}
 800d74e:	bf00      	nop
 800d750:	bd80      	pop	{r7, pc}

0800d752 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d752:	b580      	push	{r7, lr}
 800d754:	b082      	sub	sp, #8
 800d756:	af00      	add	r7, sp, #0
 800d758:	4603      	mov	r3, r0
 800d75a:	80fb      	strh	r3, [r7, #6]

	// Wake up

	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800d75c:	2006      	movs	r0, #6
 800d75e:	f7f3 fd64 	bl	800122a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 800d762:	2009      	movs	r0, #9
 800d764:	f7f3 fd61 	bl	800122a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800d768:	2017      	movs	r0, #23
 800d76a:	f7f3 fd5e 	bl	800122a <HAL_NVIC_DisableIRQ>

	MX_GPIO_Init(0);
 800d76e:	2000      	movs	r0, #0
 800d770:	f7fe ff62 	bl	800c638 <MX_GPIO_Init>

}
 800d774:	bf00      	nop
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <HAL_JPEG_MspInit>:

#include "main.h"


void HAL_JPEG_MspInit(JPEG_HandleTypeDef *hjpeg)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]

  static MDMA_HandleTypeDef   hmdmaIn;
  static MDMA_HandleTypeDef   hmdmaOut;  
  

  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 800d784:	4b54      	ldr	r3, [pc, #336]	@ (800d8d8 <HAL_JPEG_MspInit+0x15c>)
 800d786:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d78a:	4a53      	ldr	r2, [pc, #332]	@ (800d8d8 <HAL_JPEG_MspInit+0x15c>)
 800d78c:	f043 0320 	orr.w	r3, r3, #32
 800d790:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d794:	4b50      	ldr	r3, [pc, #320]	@ (800d8d8 <HAL_JPEG_MspInit+0x15c>)
 800d796:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d79a:	f003 0320 	and.w	r3, r3, #32
 800d79e:	60fb      	str	r3, [r7, #12]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
  
  __HAL_RCC_MDMA_CLK_ENABLE();
 800d7a2:	4b4d      	ldr	r3, [pc, #308]	@ (800d8d8 <HAL_JPEG_MspInit+0x15c>)
 800d7a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d7a8:	4a4b      	ldr	r2, [pc, #300]	@ (800d8d8 <HAL_JPEG_MspInit+0x15c>)
 800d7aa:	f043 0301 	orr.w	r3, r3, #1
 800d7ae:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d7b2:	4b49      	ldr	r3, [pc, #292]	@ (800d8d8 <HAL_JPEG_MspInit+0x15c>)
 800d7b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d7b8:	f003 0301 	and.w	r3, r3, #1
 800d7bc:	60bb      	str	r3, [r7, #8]
 800d7be:	68bb      	ldr	r3, [r7, #8]
  
  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 800d7c0:	220f      	movs	r2, #15
 800d7c2:	2107      	movs	r1, #7
 800d7c4:	2079      	movs	r0, #121	@ 0x79
 800d7c6:	f7f3 fd08 	bl	80011da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(JPEG_IRQn);  
 800d7ca:	2079      	movs	r0, #121	@ 0x79
 800d7cc:	f7f3 fd1f 	bl	800120e <HAL_NVIC_EnableIRQ>
  
  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 800d7d0:	4b42      	ldr	r3, [pc, #264]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d7d2:	2280      	movs	r2, #128	@ 0x80
 800d7d4:	60da      	str	r2, [r3, #12]
  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800d7d6:	4b41      	ldr	r3, [pc, #260]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d7d8:	2200      	movs	r2, #0
 800d7da:	611a      	str	r2, [r3, #16]
  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 800d7dc:	4b3f      	ldr	r3, [pc, #252]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d7de:	2202      	movs	r2, #2
 800d7e0:	615a      	str	r2, [r3, #20]
  hmdmaIn.Init.DestinationInc     = MDMA_DEST_INC_DISABLE;
 800d7e2:	4b3e      	ldr	r3, [pc, #248]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	619a      	str	r2, [r3, #24]
  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 800d7e8:	4b3c      	ldr	r3, [pc, #240]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	61da      	str	r2, [r3, #28]
  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 800d7ee:	4b3b      	ldr	r3, [pc, #236]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d7f0:	2280      	movs	r2, #128	@ 0x80
 800d7f2:	621a      	str	r2, [r3, #32]
  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;   
 800d7f4:	4b39      	ldr	r3, [pc, #228]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d7f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800d7fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 800d7fc:	4b37      	ldr	r3, [pc, #220]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d7fe:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800d802:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS; 
 800d804:	4b35      	ldr	r3, [pc, #212]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d806:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800d80a:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 800d80c:	4b33      	ldr	r3, [pc, #204]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d80e:	2200      	movs	r2, #0
 800d810:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdmaIn.Init.DestBlockAddressOffset  = 0;
 800d812:	4b32      	ldr	r3, [pc, #200]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d814:	2200      	movs	r2, #0
 800d816:	639a      	str	r2, [r3, #56]	@ 0x38
  
  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800d818:	4b30      	ldr	r3, [pc, #192]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d81a:	2211      	movs	r2, #17
 800d81c:	605a      	str	r2, [r3, #4]
  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;  
 800d81e:	4b2f      	ldr	r3, [pc, #188]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d820:	2200      	movs	r2, #0
 800d822:	609a      	str	r2, [r3, #8]
  hmdmaIn.Init.BufferTransferLength = 32;
 800d824:	4b2d      	ldr	r3, [pc, #180]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d826:	2220      	movs	r2, #32
 800d828:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hmdmaIn.Instance = MDMA_Channel1;
 800d82a:	4b2c      	ldr	r3, [pc, #176]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d82c:	4a2c      	ldr	r2, [pc, #176]	@ (800d8e0 <HAL_JPEG_MspInit+0x164>)
 800d82e:	601a      	str	r2, [r3, #0]
  
  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	4a2a      	ldr	r2, [pc, #168]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d834:	631a      	str	r2, [r3, #48]	@ 0x30
 800d836:	4a29      	ldr	r2, [pc, #164]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6413      	str	r3, [r2, #64]	@ 0x40
  
  HAL_MDMA_DeInit(&hmdmaIn);  
 800d83c:	4827      	ldr	r0, [pc, #156]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d83e:	f7f6 f933 	bl	8003aa8 <HAL_MDMA_DeInit>

  HAL_MDMA_Init(&hmdmaIn);
 800d842:	4826      	ldr	r0, [pc, #152]	@ (800d8dc <HAL_JPEG_MspInit+0x160>)
 800d844:	f7f6 f8e4 	bl	8003a10 <HAL_MDMA_Init>
  
  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 800d848:	4b26      	ldr	r3, [pc, #152]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d84a:	22c0      	movs	r2, #192	@ 0xc0
 800d84c:	60da      	str	r2, [r3, #12]
  hmdmaOut.Init.Endianness      = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800d84e:	4b25      	ldr	r3, [pc, #148]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d850:	2200      	movs	r2, #0
 800d852:	611a      	str	r2, [r3, #16]
  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 800d854:	4b23      	ldr	r3, [pc, #140]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d856:	2200      	movs	r2, #0
 800d858:	615a      	str	r2, [r3, #20]
  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 800d85a:	4b22      	ldr	r3, [pc, #136]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d85c:	2208      	movs	r2, #8
 800d85e:	619a      	str	r2, [r3, #24]
  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
 800d860:	4b20      	ldr	r3, [pc, #128]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d862:	2220      	movs	r2, #32
 800d864:	61da      	str	r2, [r3, #28]
  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 800d866:	4b1f      	ldr	r3, [pc, #124]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d868:	2200      	movs	r2, #0
 800d86a:	621a      	str	r2, [r3, #32]
  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 800d86c:	4b1d      	ldr	r3, [pc, #116]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d86e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800d872:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 800d874:	4b1b      	ldr	r3, [pc, #108]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d876:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800d87a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;  
 800d87c:	4b19      	ldr	r3, [pc, #100]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d87e:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800d882:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 800d884:	4b17      	ldr	r3, [pc, #92]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d886:	2200      	movs	r2, #0
 800d888:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdmaOut.Init.DestBlockAddressOffset  = 0;
 800d88a:	4b16      	ldr	r3, [pc, #88]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d88c:	2200      	movs	r2, #0
 800d88e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800d890:	4b14      	ldr	r3, [pc, #80]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d892:	2213      	movs	r2, #19
 800d894:	605a      	str	r2, [r3, #4]
  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;    
 800d896:	4b13      	ldr	r3, [pc, #76]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d898:	2200      	movs	r2, #0
 800d89a:	609a      	str	r2, [r3, #8]
  hmdmaOut.Init.BufferTransferLength = 32;
 800d89c:	4b11      	ldr	r3, [pc, #68]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d89e:	2220      	movs	r2, #32
 800d8a0:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hmdmaOut.Instance = MDMA_Channel0;
 800d8a2:	4b10      	ldr	r3, [pc, #64]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d8a4:	4a10      	ldr	r2, [pc, #64]	@ (800d8e8 <HAL_JPEG_MspInit+0x16c>)
 800d8a6:	601a      	str	r2, [r3, #0]

  HAL_MDMA_DeInit(&hmdmaOut);  
 800d8a8:	480e      	ldr	r0, [pc, #56]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d8aa:	f7f6 f8fd 	bl	8003aa8 <HAL_MDMA_DeInit>

  HAL_MDMA_Init(&hmdmaOut);
 800d8ae:	480d      	ldr	r0, [pc, #52]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d8b0:	f7f6 f8ae 	bl	8003a10 <HAL_MDMA_Init>
  
  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	4a0b      	ldr	r2, [pc, #44]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d8b8:	635a      	str	r2, [r3, #52]	@ 0x34
 800d8ba:	4a0a      	ldr	r2, [pc, #40]	@ (800d8e4 <HAL_JPEG_MspInit+0x168>)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6413      	str	r3, [r2, #64]	@ 0x40
  
  
  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 800d8c0:	220f      	movs	r2, #15
 800d8c2:	2108      	movs	r1, #8
 800d8c4:	207a      	movs	r0, #122	@ 0x7a
 800d8c6:	f7f3 fc88 	bl	80011da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800d8ca:	207a      	movs	r0, #122	@ 0x7a
 800d8cc:	f7f3 fc9f 	bl	800120e <HAL_NVIC_EnableIRQ>
  
}
 800d8d0:	bf00      	nop
 800d8d2:	3710      	adds	r7, #16
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	58024400 	.word	0x58024400
 800d8dc:	20018870 	.word	0x20018870
 800d8e0:	52000080 	.word	0x52000080
 800d8e4:	200188dc 	.word	0x200188dc
 800d8e8:	52000040 	.word	0x52000040

0800d8ec <HAL_SPI_MspInit>:

}


void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b0be      	sub	sp, #248	@ 0xf8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d8f4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	601a      	str	r2, [r3, #0]
 800d8fc:	605a      	str	r2, [r3, #4]
 800d8fe:	609a      	str	r2, [r3, #8]
 800d900:	60da      	str	r2, [r3, #12]
 800d902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d904:	f107 0318 	add.w	r3, r7, #24
 800d908:	22c8      	movs	r2, #200	@ 0xc8
 800d90a:	2100      	movs	r1, #0
 800d90c:	4618      	mov	r0, r3
 800d90e:	f003 fae5 	bl	8010edc <memset>
  if(hspi->Instance==SPI5)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4a39      	ldr	r2, [pc, #228]	@ (800d9fc <HAL_SPI_MspInit+0x110>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d16a      	bne.n	800d9f2 <HAL_SPI_MspInit+0x106>
  {

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800d91c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d920:	f04f 0300 	mov.w	r3, #0
 800d924:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800d928:	2300      	movs	r3, #0
 800d92a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d92e:	f107 0318 	add.w	r3, r7, #24
 800d932:	4618      	mov	r0, r3
 800d934:	f7f7 fc86 	bl	8005244 <HAL_RCCEx_PeriphCLKConfig>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d001      	beq.n	800d942 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800d93e:	f7fe fcdb 	bl	800c2f8 <Error_Handler>
    }

    __HAL_RCC_SPI5_CLK_ENABLE();
 800d942:	4b2f      	ldr	r3, [pc, #188]	@ (800da00 <HAL_SPI_MspInit+0x114>)
 800d944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d948:	4a2d      	ldr	r2, [pc, #180]	@ (800da00 <HAL_SPI_MspInit+0x114>)
 800d94a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d94e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d952:	4b2b      	ldr	r3, [pc, #172]	@ (800da00 <HAL_SPI_MspInit+0x114>)
 800d954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d958:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d95c:	617b      	str	r3, [r7, #20]
 800d95e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800d960:	4b27      	ldr	r3, [pc, #156]	@ (800da00 <HAL_SPI_MspInit+0x114>)
 800d962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d966:	4a26      	ldr	r2, [pc, #152]	@ (800da00 <HAL_SPI_MspInit+0x114>)
 800d968:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d96c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d970:	4b23      	ldr	r3, [pc, #140]	@ (800da00 <HAL_SPI_MspInit+0x114>)
 800d972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d97a:	613b      	str	r3, [r7, #16]
 800d97c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800d97e:	4b20      	ldr	r3, [pc, #128]	@ (800da00 <HAL_SPI_MspInit+0x114>)
 800d980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d984:	4a1e      	ldr	r2, [pc, #120]	@ (800da00 <HAL_SPI_MspInit+0x114>)
 800d986:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d98a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d98e:	4b1c      	ldr	r3, [pc, #112]	@ (800da00 <HAL_SPI_MspInit+0x114>)
 800d990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d998:	60fb      	str	r3, [r7, #12]
 800d99a:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = ARD_D13_Pin;
 800d99c:	2301      	movs	r3, #1
 800d99e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9a2:	2302      	movs	r3, #2
 800d9a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800d9b4:	2305      	movs	r3, #5
 800d9b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 800d9ba:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d9be:	4619      	mov	r1, r3
 800d9c0:	4810      	ldr	r0, [pc, #64]	@ (800da04 <HAL_SPI_MspInit+0x118>)
 800d9c2:	f7f3 ffa5 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800d9c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800d9ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9ce:	2302      	movs	r3, #2
 800d9d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800d9e0:	2305      	movs	r3, #5
 800d9e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800d9e6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	4806      	ldr	r0, [pc, #24]	@ (800da08 <HAL_SPI_MspInit+0x11c>)
 800d9ee:	f7f3 ff8f 	bl	8001910 <HAL_GPIO_Init>

  }

}
 800d9f2:	bf00      	nop
 800d9f4:	37f8      	adds	r7, #248	@ 0xf8
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}
 800d9fa:	bf00      	nop
 800d9fc:	40015000 	.word	0x40015000
 800da00:	58024400 	.word	0x58024400
 800da04:	58022800 	.word	0x58022800
 800da08:	58022400 	.word	0x58022400

0800da0c <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b084      	sub	sp, #16
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a0e      	ldr	r2, [pc, #56]	@ (800da54 <HAL_DMA2D_MspInit+0x48>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d116      	bne.n	800da4c <HAL_DMA2D_MspInit+0x40>
  {

    __HAL_RCC_DMA2D_CLK_ENABLE();
 800da1e:	4b0e      	ldr	r3, [pc, #56]	@ (800da58 <HAL_DMA2D_MspInit+0x4c>)
 800da20:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800da24:	4a0c      	ldr	r2, [pc, #48]	@ (800da58 <HAL_DMA2D_MspInit+0x4c>)
 800da26:	f043 0310 	orr.w	r3, r3, #16
 800da2a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800da2e:	4b0a      	ldr	r3, [pc, #40]	@ (800da58 <HAL_DMA2D_MspInit+0x4c>)
 800da30:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800da34:	f003 0310 	and.w	r3, r3, #16
 800da38:	60fb      	str	r3, [r7, #12]
 800da3a:	68fb      	ldr	r3, [r7, #12]

    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800da3c:	2200      	movs	r2, #0
 800da3e:	2100      	movs	r1, #0
 800da40:	205a      	movs	r0, #90	@ 0x5a
 800da42:	f7f3 fbca 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800da46:	205a      	movs	r0, #90	@ 0x5a
 800da48:	f7f3 fbe1 	bl	800120e <HAL_NVIC_EnableIRQ>

  }

}
 800da4c:	bf00      	nop
 800da4e:	3710      	adds	r7, #16
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}
 800da54:	52001000 	.word	0x52001000
 800da58:	58024400 	.word	0x58024400

0800da5c <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b0b4      	sub	sp, #208	@ 0xd0
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800da64:	f107 0308 	add.w	r3, r7, #8
 800da68:	22c8      	movs	r2, #200	@ 0xc8
 800da6a:	2100      	movs	r1, #0
 800da6c:	4618      	mov	r0, r3
 800da6e:	f003 fa35 	bl	8010edc <memset>
  if(hrtc->Instance==RTC)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a10      	ldr	r2, [pc, #64]	@ (800dab8 <HAL_RTC_MspInit+0x5c>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d119      	bne.n	800dab0 <HAL_RTC_MspInit+0x54>
  {

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800da7c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800da80:	f04f 0300 	mov.w	r3, #0
 800da84:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800da88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800da8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800da90:	f107 0308 	add.w	r3, r7, #8
 800da94:	4618      	mov	r0, r3
 800da96:	f7f7 fbd5 	bl	8005244 <HAL_RCCEx_PeriphCLKConfig>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d001      	beq.n	800daa4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800daa0:	f7fe fc2a 	bl	800c2f8 <Error_Handler>
    }

    __HAL_RCC_RTC_ENABLE();
 800daa4:	4b05      	ldr	r3, [pc, #20]	@ (800dabc <HAL_RTC_MspInit+0x60>)
 800daa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800daa8:	4a04      	ldr	r2, [pc, #16]	@ (800dabc <HAL_RTC_MspInit+0x60>)
 800daaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800daae:	6713      	str	r3, [r2, #112]	@ 0x70

  }

}
 800dab0:	bf00      	nop
 800dab2:	37d0      	adds	r7, #208	@ 0xd0
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	58004000 	.word	0x58004000
 800dabc:	58024400 	.word	0x58024400

0800dac0 <NMI_Handler>:

extern JPEG_HandleTypeDef    JPEG_Handle;


void NMI_Handler(void)
{
 800dac0:	b480      	push	{r7}
 800dac2:	af00      	add	r7, sp, #0
}
 800dac4:	bf00      	nop
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr

0800dace <HardFault_Handler>:


void HardFault_Handler(void)
{
 800dace:	b480      	push	{r7}
 800dad0:	af00      	add	r7, sp, #0
  while (1)
 800dad2:	bf00      	nop
 800dad4:	e7fd      	b.n	800dad2 <HardFault_Handler+0x4>

0800dad6 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 800dad6:	b480      	push	{r7}
 800dad8:	af00      	add	r7, sp, #0
  while (1)
 800dada:	bf00      	nop
 800dadc:	e7fd      	b.n	800dada <MemManage_Handler+0x4>

0800dade <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 800dade:	b480      	push	{r7}
 800dae0:	af00      	add	r7, sp, #0
  while (1)
 800dae2:	bf00      	nop
 800dae4:	e7fd      	b.n	800dae2 <BusFault_Handler+0x4>

0800dae6 <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 800dae6:	b480      	push	{r7}
 800dae8:	af00      	add	r7, sp, #0
  while (1)
 800daea:	bf00      	nop
 800daec:	e7fd      	b.n	800daea <UsageFault_Handler+0x4>

0800daee <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 800daee:	b480      	push	{r7}
 800daf0:	af00      	add	r7, sp, #0
}
 800daf2:	bf00      	nop
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 800dafc:	b480      	push	{r7}
 800dafe:	af00      	add	r7, sp, #0
}
 800db00:	bf00      	nop
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr

0800db0a <PendSV_Handler>:


void PendSV_Handler(void)
{
 800db0a:	b480      	push	{r7}
 800db0c:	af00      	add	r7, sp, #0
}
 800db0e:	bf00      	nop
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <SysTick_Handler>:


void SysTick_Handler(void)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	af00      	add	r7, sp, #0

  HAL_IncTick();
 800db1c:	f7f3 f9de 	bl	8000edc <HAL_IncTick>

}
 800db20:	bf00      	nop
 800db22:	bd80      	pop	{r7, pc}

0800db24 <JPEG_IRQHandler>:


void JPEG_IRQHandler(void)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	af00      	add	r7, sp, #0
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 800db28:	4802      	ldr	r0, [pc, #8]	@ (800db34 <JPEG_IRQHandler+0x10>)
 800db2a:	f7f4 faed 	bl	8002108 <HAL_JPEG_IRQHandler>
}
 800db2e:	bf00      	nop
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	200001e4 	.word	0x200001e4

0800db38 <MDMA_IRQHandler>:


void MDMA_IRQHandler()
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	af00      	add	r7, sp, #0
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 800db3c:	4b05      	ldr	r3, [pc, #20]	@ (800db54 <MDMA_IRQHandler+0x1c>)
 800db3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db40:	4618      	mov	r0, r3
 800db42:	f7f6 f8b1 	bl	8003ca8 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);  
 800db46:	4b03      	ldr	r3, [pc, #12]	@ (800db54 <MDMA_IRQHandler+0x1c>)
 800db48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7f6 f8ac 	bl	8003ca8 <HAL_MDMA_IRQHandler>
}
 800db50:	bf00      	nop
 800db52:	bd80      	pop	{r7, pc}
 800db54:	200001e4 	.word	0x200001e4

0800db58 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(BUTTON_MINUS_Pin);
 800db5c:	2001      	movs	r0, #1
 800db5e:	f7f4 f8b8 	bl	8001cd2 <HAL_GPIO_EXTI_IRQHandler>

}
 800db62:	bf00      	nop
 800db64:	bd80      	pop	{r7, pc}

0800db66 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(BUTTON_SETTING_Pin);
 800db6a:	2008      	movs	r0, #8
 800db6c:	f7f4 f8b1 	bl	8001cd2 <HAL_GPIO_EXTI_IRQHandler>

}
 800db70:	bf00      	nop
 800db72:	bd80      	pop	{r7, pc}

0800db74 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(BUTTON_PLUS_Pin);
 800db78:	2080      	movs	r0, #128	@ 0x80
 800db7a:	f7f4 f8aa 	bl	8001cd2 <HAL_GPIO_EXTI_IRQHandler>

}
 800db7e:	bf00      	nop
 800db80:	bd80      	pop	{r7, pc}
	...

0800db84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b086      	sub	sp, #24
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800db8c:	4a14      	ldr	r2, [pc, #80]	@ (800dbe0 <_sbrk+0x5c>)
 800db8e:	4b15      	ldr	r3, [pc, #84]	@ (800dbe4 <_sbrk+0x60>)
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800db98:	4b13      	ldr	r3, [pc, #76]	@ (800dbe8 <_sbrk+0x64>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d102      	bne.n	800dba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800dba0:	4b11      	ldr	r3, [pc, #68]	@ (800dbe8 <_sbrk+0x64>)
 800dba2:	4a12      	ldr	r2, [pc, #72]	@ (800dbec <_sbrk+0x68>)
 800dba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800dba6:	4b10      	ldr	r3, [pc, #64]	@ (800dbe8 <_sbrk+0x64>)
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	4413      	add	r3, r2
 800dbae:	693a      	ldr	r2, [r7, #16]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d207      	bcs.n	800dbc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800dbb4:	f003 f9aa 	bl	8010f0c <__errno>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	220c      	movs	r2, #12
 800dbbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800dbbe:	f04f 33ff 	mov.w	r3, #4294967295
 800dbc2:	e009      	b.n	800dbd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800dbc4:	4b08      	ldr	r3, [pc, #32]	@ (800dbe8 <_sbrk+0x64>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800dbca:	4b07      	ldr	r3, [pc, #28]	@ (800dbe8 <_sbrk+0x64>)
 800dbcc:	681a      	ldr	r2, [r3, #0]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	4a05      	ldr	r2, [pc, #20]	@ (800dbe8 <_sbrk+0x64>)
 800dbd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3718      	adds	r7, #24
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	20020000 	.word	0x20020000
 800dbe4:	00002000 	.word	0x00002000
 800dbe8:	20018948 	.word	0x20018948
 800dbec:	20018ac8 	.word	0x20018ac8

0800dbf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800dbf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800dc28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800dbf4:	f7f3 f878 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800dbf8:	480c      	ldr	r0, [pc, #48]	@ (800dc2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800dbfa:	490d      	ldr	r1, [pc, #52]	@ (800dc30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800dbfc:	4a0d      	ldr	r2, [pc, #52]	@ (800dc34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800dbfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800dc00:	e002      	b.n	800dc08 <LoopCopyDataInit>

0800dc02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800dc02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800dc04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800dc06:	3304      	adds	r3, #4

0800dc08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800dc08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800dc0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800dc0c:	d3f9      	bcc.n	800dc02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800dc0e:	4a0a      	ldr	r2, [pc, #40]	@ (800dc38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800dc10:	4c0a      	ldr	r4, [pc, #40]	@ (800dc3c <LoopFillZerobss+0x22>)
  movs r3, #0
 800dc12:	2300      	movs	r3, #0
  b LoopFillZerobss
 800dc14:	e001      	b.n	800dc1a <LoopFillZerobss>

0800dc16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800dc16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800dc18:	3204      	adds	r2, #4

0800dc1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800dc1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800dc1c:	d3fb      	bcc.n	800dc16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800dc1e:	f003 f97b 	bl	8010f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dc22:	f7fe fb43 	bl	800c2ac <main>
  bx  lr
 800dc26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800dc28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800dc2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800dc30:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800dc34:	08011e28 	.word	0x08011e28
  ldr r2, =_sbss
 800dc38:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800dc3c:	20018ac8 	.word	0x20018ac8

0800dc40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dc40:	e7fe      	b.n	800dc40 <ADC3_IRQHandler>
	...

0800dc44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dc4e:	79fb      	ldrb	r3, [r7, #7]
 800dc50:	4a08      	ldr	r2, [pc, #32]	@ (800dc74 <disk_status+0x30>)
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	4413      	add	r3, r2
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	79fa      	ldrb	r2, [r7, #7]
 800dc5c:	4905      	ldr	r1, [pc, #20]	@ (800dc74 <disk_status+0x30>)
 800dc5e:	440a      	add	r2, r1
 800dc60:	7a12      	ldrb	r2, [r2, #8]
 800dc62:	4610      	mov	r0, r2
 800dc64:	4798      	blx	r3
 800dc66:	4603      	mov	r3, r0
 800dc68:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dc6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	20018974 	.word	0x20018974

0800dc78 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	4603      	mov	r3, r0
 800dc80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dc82:	2300      	movs	r3, #0
 800dc84:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dc86:	79fb      	ldrb	r3, [r7, #7]
 800dc88:	4a0e      	ldr	r2, [pc, #56]	@ (800dcc4 <disk_initialize+0x4c>)
 800dc8a:	5cd3      	ldrb	r3, [r2, r3]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d114      	bne.n	800dcba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dc90:	79fb      	ldrb	r3, [r7, #7]
 800dc92:	4a0c      	ldr	r2, [pc, #48]	@ (800dcc4 <disk_initialize+0x4c>)
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4413      	add	r3, r2
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	79fa      	ldrb	r2, [r7, #7]
 800dc9e:	4909      	ldr	r1, [pc, #36]	@ (800dcc4 <disk_initialize+0x4c>)
 800dca0:	440a      	add	r2, r1
 800dca2:	7a12      	ldrb	r2, [r2, #8]
 800dca4:	4610      	mov	r0, r2
 800dca6:	4798      	blx	r3
 800dca8:	4603      	mov	r3, r0
 800dcaa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800dcac:	7bfb      	ldrb	r3, [r7, #15]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d103      	bne.n	800dcba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800dcb2:	79fb      	ldrb	r3, [r7, #7]
 800dcb4:	4a03      	ldr	r2, [pc, #12]	@ (800dcc4 <disk_initialize+0x4c>)
 800dcb6:	2101      	movs	r1, #1
 800dcb8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800dcba:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	3710      	adds	r7, #16
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	20018974 	.word	0x20018974

0800dcc8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dcc8:	b590      	push	{r4, r7, lr}
 800dcca:	b087      	sub	sp, #28
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60b9      	str	r1, [r7, #8]
 800dcd0:	607a      	str	r2, [r7, #4]
 800dcd2:	603b      	str	r3, [r7, #0]
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dcd8:	7bfb      	ldrb	r3, [r7, #15]
 800dcda:	4a0a      	ldr	r2, [pc, #40]	@ (800dd04 <disk_read+0x3c>)
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	4413      	add	r3, r2
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	689c      	ldr	r4, [r3, #8]
 800dce4:	7bfb      	ldrb	r3, [r7, #15]
 800dce6:	4a07      	ldr	r2, [pc, #28]	@ (800dd04 <disk_read+0x3c>)
 800dce8:	4413      	add	r3, r2
 800dcea:	7a18      	ldrb	r0, [r3, #8]
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	68b9      	ldr	r1, [r7, #8]
 800dcf2:	47a0      	blx	r4
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	75fb      	strb	r3, [r7, #23]
  return res;
 800dcf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	371c      	adds	r7, #28
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd90      	pop	{r4, r7, pc}
 800dd02:	bf00      	nop
 800dd04:	20018974 	.word	0x20018974

0800dd08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dd08:	b590      	push	{r4, r7, lr}
 800dd0a:	b087      	sub	sp, #28
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60b9      	str	r1, [r7, #8]
 800dd10:	607a      	str	r2, [r7, #4]
 800dd12:	603b      	str	r3, [r7, #0]
 800dd14:	4603      	mov	r3, r0
 800dd16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dd18:	7bfb      	ldrb	r3, [r7, #15]
 800dd1a:	4a0a      	ldr	r2, [pc, #40]	@ (800dd44 <disk_write+0x3c>)
 800dd1c:	009b      	lsls	r3, r3, #2
 800dd1e:	4413      	add	r3, r2
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	68dc      	ldr	r4, [r3, #12]
 800dd24:	7bfb      	ldrb	r3, [r7, #15]
 800dd26:	4a07      	ldr	r2, [pc, #28]	@ (800dd44 <disk_write+0x3c>)
 800dd28:	4413      	add	r3, r2
 800dd2a:	7a18      	ldrb	r0, [r3, #8]
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	687a      	ldr	r2, [r7, #4]
 800dd30:	68b9      	ldr	r1, [r7, #8]
 800dd32:	47a0      	blx	r4
 800dd34:	4603      	mov	r3, r0
 800dd36:	75fb      	strb	r3, [r7, #23]
  return res;
 800dd38:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	371c      	adds	r7, #28
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd90      	pop	{r4, r7, pc}
 800dd42:	bf00      	nop
 800dd44:	20018974 	.word	0x20018974

0800dd48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	4603      	mov	r3, r0
 800dd50:	603a      	str	r2, [r7, #0]
 800dd52:	71fb      	strb	r3, [r7, #7]
 800dd54:	460b      	mov	r3, r1
 800dd56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800dd58:	79fb      	ldrb	r3, [r7, #7]
 800dd5a:	4a09      	ldr	r2, [pc, #36]	@ (800dd80 <disk_ioctl+0x38>)
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	4413      	add	r3, r2
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	691b      	ldr	r3, [r3, #16]
 800dd64:	79fa      	ldrb	r2, [r7, #7]
 800dd66:	4906      	ldr	r1, [pc, #24]	@ (800dd80 <disk_ioctl+0x38>)
 800dd68:	440a      	add	r2, r1
 800dd6a:	7a10      	ldrb	r0, [r2, #8]
 800dd6c:	79b9      	ldrb	r1, [r7, #6]
 800dd6e:	683a      	ldr	r2, [r7, #0]
 800dd70:	4798      	blx	r3
 800dd72:	4603      	mov	r3, r0
 800dd74:	73fb      	strb	r3, [r7, #15]
  return res;
 800dd76:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3710      	adds	r7, #16
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	20018974 	.word	0x20018974

0800dd84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800dd84:	b480      	push	{r7}
 800dd86:	af00      	add	r7, sp, #0
  return 0;
 800dd88:	2300      	movs	r3, #0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800dd94:	b480      	push	{r7}
 800dd96:	b085      	sub	sp, #20
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800dda4:	89fb      	ldrh	r3, [r7, #14]
 800dda6:	021b      	lsls	r3, r3, #8
 800dda8:	b21a      	sxth	r2, r3
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	b21b      	sxth	r3, r3
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	b21b      	sxth	r3, r3
 800ddb4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ddb6:	89fb      	ldrh	r3, [r7, #14]
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3714      	adds	r7, #20
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr

0800ddc4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b085      	sub	sp, #20
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	3303      	adds	r3, #3
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	021b      	lsls	r3, r3, #8
 800ddd8:	687a      	ldr	r2, [r7, #4]
 800ddda:	3202      	adds	r2, #2
 800dddc:	7812      	ldrb	r2, [r2, #0]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	021b      	lsls	r3, r3, #8
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	3201      	adds	r2, #1
 800ddea:	7812      	ldrb	r2, [r2, #0]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	021b      	lsls	r3, r3, #8
 800ddf4:	687a      	ldr	r2, [r7, #4]
 800ddf6:	7812      	ldrb	r2, [r2, #0]
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	60fb      	str	r3, [r7, #12]
	return rv;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3714      	adds	r7, #20
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr

0800de0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800de0a:	b480      	push	{r7}
 800de0c:	b083      	sub	sp, #12
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
 800de12:	460b      	mov	r3, r1
 800de14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	1c5a      	adds	r2, r3, #1
 800de1a:	607a      	str	r2, [r7, #4]
 800de1c:	887a      	ldrh	r2, [r7, #2]
 800de1e:	b2d2      	uxtb	r2, r2
 800de20:	701a      	strb	r2, [r3, #0]
 800de22:	887b      	ldrh	r3, [r7, #2]
 800de24:	0a1b      	lsrs	r3, r3, #8
 800de26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	1c5a      	adds	r2, r3, #1
 800de2c:	607a      	str	r2, [r7, #4]
 800de2e:	887a      	ldrh	r2, [r7, #2]
 800de30:	b2d2      	uxtb	r2, r2
 800de32:	701a      	strb	r2, [r3, #0]
}
 800de34:	bf00      	nop
 800de36:	370c      	adds	r7, #12
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	1c5a      	adds	r2, r3, #1
 800de4e:	607a      	str	r2, [r7, #4]
 800de50:	683a      	ldr	r2, [r7, #0]
 800de52:	b2d2      	uxtb	r2, r2
 800de54:	701a      	strb	r2, [r3, #0]
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	0a1b      	lsrs	r3, r3, #8
 800de5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	1c5a      	adds	r2, r3, #1
 800de60:	607a      	str	r2, [r7, #4]
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	b2d2      	uxtb	r2, r2
 800de66:	701a      	strb	r2, [r3, #0]
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	0a1b      	lsrs	r3, r3, #8
 800de6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	1c5a      	adds	r2, r3, #1
 800de72:	607a      	str	r2, [r7, #4]
 800de74:	683a      	ldr	r2, [r7, #0]
 800de76:	b2d2      	uxtb	r2, r2
 800de78:	701a      	strb	r2, [r3, #0]
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	0a1b      	lsrs	r3, r3, #8
 800de7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	1c5a      	adds	r2, r3, #1
 800de84:	607a      	str	r2, [r7, #4]
 800de86:	683a      	ldr	r2, [r7, #0]
 800de88:	b2d2      	uxtb	r2, r2
 800de8a:	701a      	strb	r2, [r3, #0]
}
 800de8c:	bf00      	nop
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800de98:	b480      	push	{r7}
 800de9a:	b087      	sub	sp, #28
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d00d      	beq.n	800dece <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800deb2:	693a      	ldr	r2, [r7, #16]
 800deb4:	1c53      	adds	r3, r2, #1
 800deb6:	613b      	str	r3, [r7, #16]
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	1c59      	adds	r1, r3, #1
 800debc:	6179      	str	r1, [r7, #20]
 800debe:	7812      	ldrb	r2, [r2, #0]
 800dec0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	3b01      	subs	r3, #1
 800dec6:	607b      	str	r3, [r7, #4]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1f1      	bne.n	800deb2 <mem_cpy+0x1a>
	}
}
 800dece:	bf00      	nop
 800ded0:	371c      	adds	r7, #28
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr

0800deda <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800deda:	b480      	push	{r7}
 800dedc:	b087      	sub	sp, #28
 800dede:	af00      	add	r7, sp, #0
 800dee0:	60f8      	str	r0, [r7, #12]
 800dee2:	60b9      	str	r1, [r7, #8]
 800dee4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	1c5a      	adds	r2, r3, #1
 800deee:	617a      	str	r2, [r7, #20]
 800def0:	68ba      	ldr	r2, [r7, #8]
 800def2:	b2d2      	uxtb	r2, r2
 800def4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	3b01      	subs	r3, #1
 800defa:	607b      	str	r3, [r7, #4]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d1f3      	bne.n	800deea <mem_set+0x10>
}
 800df02:	bf00      	nop
 800df04:	bf00      	nop
 800df06:	371c      	adds	r7, #28
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800df10:	b480      	push	{r7}
 800df12:	b089      	sub	sp, #36	@ 0x24
 800df14:	af00      	add	r7, sp, #0
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	61fb      	str	r3, [r7, #28]
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800df24:	2300      	movs	r3, #0
 800df26:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	1c5a      	adds	r2, r3, #1
 800df2c:	61fa      	str	r2, [r7, #28]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	4619      	mov	r1, r3
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	1c5a      	adds	r2, r3, #1
 800df36:	61ba      	str	r2, [r7, #24]
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	1acb      	subs	r3, r1, r3
 800df3c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	3b01      	subs	r3, #1
 800df42:	607b      	str	r3, [r7, #4]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d002      	beq.n	800df50 <mem_cmp+0x40>
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d0eb      	beq.n	800df28 <mem_cmp+0x18>

	return r;
 800df50:	697b      	ldr	r3, [r7, #20]
}
 800df52:	4618      	mov	r0, r3
 800df54:	3724      	adds	r7, #36	@ 0x24
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr

0800df5e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800df5e:	b480      	push	{r7}
 800df60:	b083      	sub	sp, #12
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
 800df66:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800df68:	e002      	b.n	800df70 <chk_chr+0x12>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	3301      	adds	r3, #1
 800df6e:	607b      	str	r3, [r7, #4]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d005      	beq.n	800df84 <chk_chr+0x26>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	461a      	mov	r2, r3
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	4293      	cmp	r3, r2
 800df82:	d1f2      	bne.n	800df6a <chk_chr+0xc>
	return *str;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	781b      	ldrb	r3, [r3, #0]
}
 800df88:	4618      	mov	r0, r3
 800df8a:	370c      	adds	r7, #12
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800df94:	b480      	push	{r7}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800df9e:	2300      	movs	r3, #0
 800dfa0:	60bb      	str	r3, [r7, #8]
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	60fb      	str	r3, [r7, #12]
 800dfa6:	e029      	b.n	800dffc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800dfa8:	4a27      	ldr	r2, [pc, #156]	@ (800e048 <chk_lock+0xb4>)
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	011b      	lsls	r3, r3, #4
 800dfae:	4413      	add	r3, r2
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d01d      	beq.n	800dff2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dfb6:	4a24      	ldr	r2, [pc, #144]	@ (800e048 <chk_lock+0xb4>)
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	011b      	lsls	r3, r3, #4
 800dfbc:	4413      	add	r3, r2
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d116      	bne.n	800dff6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800dfc8:	4a1f      	ldr	r2, [pc, #124]	@ (800e048 <chk_lock+0xb4>)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	011b      	lsls	r3, r3, #4
 800dfce:	4413      	add	r3, r2
 800dfd0:	3304      	adds	r3, #4
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d10c      	bne.n	800dff6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dfdc:	4a1a      	ldr	r2, [pc, #104]	@ (800e048 <chk_lock+0xb4>)
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	011b      	lsls	r3, r3, #4
 800dfe2:	4413      	add	r3, r2
 800dfe4:	3308      	adds	r3, #8
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d102      	bne.n	800dff6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dff0:	e007      	b.n	800e002 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800dff2:	2301      	movs	r3, #1
 800dff4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	3301      	adds	r3, #1
 800dffa:	60fb      	str	r3, [r7, #12]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d9d2      	bls.n	800dfa8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2b02      	cmp	r3, #2
 800e006:	d109      	bne.n	800e01c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d102      	bne.n	800e014 <chk_lock+0x80>
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	2b02      	cmp	r3, #2
 800e012:	d101      	bne.n	800e018 <chk_lock+0x84>
 800e014:	2300      	movs	r3, #0
 800e016:	e010      	b.n	800e03a <chk_lock+0xa6>
 800e018:	2312      	movs	r3, #18
 800e01a:	e00e      	b.n	800e03a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d108      	bne.n	800e034 <chk_lock+0xa0>
 800e022:	4a09      	ldr	r2, [pc, #36]	@ (800e048 <chk_lock+0xb4>)
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	011b      	lsls	r3, r3, #4
 800e028:	4413      	add	r3, r2
 800e02a:	330c      	adds	r3, #12
 800e02c:	881b      	ldrh	r3, [r3, #0]
 800e02e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e032:	d101      	bne.n	800e038 <chk_lock+0xa4>
 800e034:	2310      	movs	r3, #16
 800e036:	e000      	b.n	800e03a <chk_lock+0xa6>
 800e038:	2300      	movs	r3, #0
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3714      	adds	r7, #20
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	20018954 	.word	0x20018954

0800e04c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e052:	2300      	movs	r3, #0
 800e054:	607b      	str	r3, [r7, #4]
 800e056:	e002      	b.n	800e05e <enq_lock+0x12>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	3301      	adds	r3, #1
 800e05c:	607b      	str	r3, [r7, #4]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2b01      	cmp	r3, #1
 800e062:	d806      	bhi.n	800e072 <enq_lock+0x26>
 800e064:	4a09      	ldr	r2, [pc, #36]	@ (800e08c <enq_lock+0x40>)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	011b      	lsls	r3, r3, #4
 800e06a:	4413      	add	r3, r2
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d1f2      	bne.n	800e058 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2b02      	cmp	r3, #2
 800e076:	bf14      	ite	ne
 800e078:	2301      	movne	r3, #1
 800e07a:	2300      	moveq	r3, #0
 800e07c:	b2db      	uxtb	r3, r3
}
 800e07e:	4618      	mov	r0, r3
 800e080:	370c      	adds	r7, #12
 800e082:	46bd      	mov	sp, r7
 800e084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop
 800e08c:	20018954 	.word	0x20018954

0800e090 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e09a:	2300      	movs	r3, #0
 800e09c:	60fb      	str	r3, [r7, #12]
 800e09e:	e01f      	b.n	800e0e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e0a0:	4a41      	ldr	r2, [pc, #260]	@ (800e1a8 <inc_lock+0x118>)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	011b      	lsls	r3, r3, #4
 800e0a6:	4413      	add	r3, r2
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d113      	bne.n	800e0da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e0b2:	4a3d      	ldr	r2, [pc, #244]	@ (800e1a8 <inc_lock+0x118>)
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	011b      	lsls	r3, r3, #4
 800e0b8:	4413      	add	r3, r2
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d109      	bne.n	800e0da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e0c6:	4a38      	ldr	r2, [pc, #224]	@ (800e1a8 <inc_lock+0x118>)
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	011b      	lsls	r3, r3, #4
 800e0cc:	4413      	add	r3, r2
 800e0ce:	3308      	adds	r3, #8
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d006      	beq.n	800e0e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	3301      	adds	r3, #1
 800e0de:	60fb      	str	r3, [r7, #12]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d9dc      	bls.n	800e0a0 <inc_lock+0x10>
 800e0e6:	e000      	b.n	800e0ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e0e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2b02      	cmp	r3, #2
 800e0ee:	d132      	bne.n	800e156 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	60fb      	str	r3, [r7, #12]
 800e0f4:	e002      	b.n	800e0fc <inc_lock+0x6c>
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	60fb      	str	r3, [r7, #12]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d806      	bhi.n	800e110 <inc_lock+0x80>
 800e102:	4a29      	ldr	r2, [pc, #164]	@ (800e1a8 <inc_lock+0x118>)
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	011b      	lsls	r3, r3, #4
 800e108:	4413      	add	r3, r2
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d1f2      	bne.n	800e0f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2b02      	cmp	r3, #2
 800e114:	d101      	bne.n	800e11a <inc_lock+0x8a>
 800e116:	2300      	movs	r3, #0
 800e118:	e040      	b.n	800e19c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681a      	ldr	r2, [r3, #0]
 800e11e:	4922      	ldr	r1, [pc, #136]	@ (800e1a8 <inc_lock+0x118>)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	011b      	lsls	r3, r3, #4
 800e124:	440b      	add	r3, r1
 800e126:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	689a      	ldr	r2, [r3, #8]
 800e12c:	491e      	ldr	r1, [pc, #120]	@ (800e1a8 <inc_lock+0x118>)
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	011b      	lsls	r3, r3, #4
 800e132:	440b      	add	r3, r1
 800e134:	3304      	adds	r3, #4
 800e136:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	695a      	ldr	r2, [r3, #20]
 800e13c:	491a      	ldr	r1, [pc, #104]	@ (800e1a8 <inc_lock+0x118>)
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	011b      	lsls	r3, r3, #4
 800e142:	440b      	add	r3, r1
 800e144:	3308      	adds	r3, #8
 800e146:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e148:	4a17      	ldr	r2, [pc, #92]	@ (800e1a8 <inc_lock+0x118>)
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	011b      	lsls	r3, r3, #4
 800e14e:	4413      	add	r3, r2
 800e150:	330c      	adds	r3, #12
 800e152:	2200      	movs	r2, #0
 800e154:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d009      	beq.n	800e170 <inc_lock+0xe0>
 800e15c:	4a12      	ldr	r2, [pc, #72]	@ (800e1a8 <inc_lock+0x118>)
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	011b      	lsls	r3, r3, #4
 800e162:	4413      	add	r3, r2
 800e164:	330c      	adds	r3, #12
 800e166:	881b      	ldrh	r3, [r3, #0]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d001      	beq.n	800e170 <inc_lock+0xe0>
 800e16c:	2300      	movs	r3, #0
 800e16e:	e015      	b.n	800e19c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d108      	bne.n	800e188 <inc_lock+0xf8>
 800e176:	4a0c      	ldr	r2, [pc, #48]	@ (800e1a8 <inc_lock+0x118>)
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	011b      	lsls	r3, r3, #4
 800e17c:	4413      	add	r3, r2
 800e17e:	330c      	adds	r3, #12
 800e180:	881b      	ldrh	r3, [r3, #0]
 800e182:	3301      	adds	r3, #1
 800e184:	b29a      	uxth	r2, r3
 800e186:	e001      	b.n	800e18c <inc_lock+0xfc>
 800e188:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e18c:	4906      	ldr	r1, [pc, #24]	@ (800e1a8 <inc_lock+0x118>)
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	011b      	lsls	r3, r3, #4
 800e192:	440b      	add	r3, r1
 800e194:	330c      	adds	r3, #12
 800e196:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	3301      	adds	r3, #1
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3714      	adds	r7, #20
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr
 800e1a8:	20018954 	.word	0x20018954

0800e1ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b085      	sub	sp, #20
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	607b      	str	r3, [r7, #4]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d825      	bhi.n	800e20c <dec_lock+0x60>
		n = Files[i].ctr;
 800e1c0:	4a17      	ldr	r2, [pc, #92]	@ (800e220 <dec_lock+0x74>)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	011b      	lsls	r3, r3, #4
 800e1c6:	4413      	add	r3, r2
 800e1c8:	330c      	adds	r3, #12
 800e1ca:	881b      	ldrh	r3, [r3, #0]
 800e1cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e1ce:	89fb      	ldrh	r3, [r7, #14]
 800e1d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e1d4:	d101      	bne.n	800e1da <dec_lock+0x2e>
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e1da:	89fb      	ldrh	r3, [r7, #14]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d002      	beq.n	800e1e6 <dec_lock+0x3a>
 800e1e0:	89fb      	ldrh	r3, [r7, #14]
 800e1e2:	3b01      	subs	r3, #1
 800e1e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e1e6:	4a0e      	ldr	r2, [pc, #56]	@ (800e220 <dec_lock+0x74>)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	011b      	lsls	r3, r3, #4
 800e1ec:	4413      	add	r3, r2
 800e1ee:	330c      	adds	r3, #12
 800e1f0:	89fa      	ldrh	r2, [r7, #14]
 800e1f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e1f4:	89fb      	ldrh	r3, [r7, #14]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d105      	bne.n	800e206 <dec_lock+0x5a>
 800e1fa:	4a09      	ldr	r2, [pc, #36]	@ (800e220 <dec_lock+0x74>)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	011b      	lsls	r3, r3, #4
 800e200:	4413      	add	r3, r2
 800e202:	2200      	movs	r2, #0
 800e204:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e206:	2300      	movs	r3, #0
 800e208:	737b      	strb	r3, [r7, #13]
 800e20a:	e001      	b.n	800e210 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e20c:	2302      	movs	r3, #2
 800e20e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e210:	7b7b      	ldrb	r3, [r7, #13]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3714      	adds	r7, #20
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr
 800e21e:	bf00      	nop
 800e220:	20018954 	.word	0x20018954

0800e224 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e22c:	2300      	movs	r3, #0
 800e22e:	60fb      	str	r3, [r7, #12]
 800e230:	e010      	b.n	800e254 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e232:	4a0d      	ldr	r2, [pc, #52]	@ (800e268 <clear_lock+0x44>)
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	011b      	lsls	r3, r3, #4
 800e238:	4413      	add	r3, r2
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	687a      	ldr	r2, [r7, #4]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d105      	bne.n	800e24e <clear_lock+0x2a>
 800e242:	4a09      	ldr	r2, [pc, #36]	@ (800e268 <clear_lock+0x44>)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	011b      	lsls	r3, r3, #4
 800e248:	4413      	add	r3, r2
 800e24a:	2200      	movs	r2, #0
 800e24c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	3301      	adds	r3, #1
 800e252:	60fb      	str	r3, [r7, #12]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2b01      	cmp	r3, #1
 800e258:	d9eb      	bls.n	800e232 <clear_lock+0xe>
	}
}
 800e25a:	bf00      	nop
 800e25c:	bf00      	nop
 800e25e:	3714      	adds	r7, #20
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr
 800e268:	20018954 	.word	0x20018954

0800e26c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b086      	sub	sp, #24
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e274:	2300      	movs	r3, #0
 800e276:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	78db      	ldrb	r3, [r3, #3]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d034      	beq.n	800e2ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e284:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	7858      	ldrb	r0, [r3, #1]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e290:	2301      	movs	r3, #1
 800e292:	697a      	ldr	r2, [r7, #20]
 800e294:	f7ff fd38 	bl	800dd08 <disk_write>
 800e298:	4603      	mov	r3, r0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d002      	beq.n	800e2a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e29e:	2301      	movs	r3, #1
 800e2a0:	73fb      	strb	r3, [r7, #15]
 800e2a2:	e022      	b.n	800e2ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2ae:	697a      	ldr	r2, [r7, #20]
 800e2b0:	1ad2      	subs	r2, r2, r3
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	69db      	ldr	r3, [r3, #28]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d217      	bcs.n	800e2ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	789b      	ldrb	r3, [r3, #2]
 800e2be:	613b      	str	r3, [r7, #16]
 800e2c0:	e010      	b.n	800e2e4 <sync_window+0x78>
					wsect += fs->fsize;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	69db      	ldr	r3, [r3, #28]
 800e2c6:	697a      	ldr	r2, [r7, #20]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	7858      	ldrb	r0, [r3, #1]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	697a      	ldr	r2, [r7, #20]
 800e2da:	f7ff fd15 	bl	800dd08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	3b01      	subs	r3, #1
 800e2e2:	613b      	str	r3, [r7, #16]
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d8eb      	bhi.n	800e2c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3718      	adds	r7, #24
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e2fe:	2300      	movs	r3, #0
 800e300:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e306:	683a      	ldr	r2, [r7, #0]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d01b      	beq.n	800e344 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f7ff ffad 	bl	800e26c <sync_window>
 800e312:	4603      	mov	r3, r0
 800e314:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e316:	7bfb      	ldrb	r3, [r7, #15]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d113      	bne.n	800e344 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	7858      	ldrb	r0, [r3, #1]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e326:	2301      	movs	r3, #1
 800e328:	683a      	ldr	r2, [r7, #0]
 800e32a:	f7ff fccd 	bl	800dcc8 <disk_read>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d004      	beq.n	800e33e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e334:	f04f 33ff 	mov.w	r3, #4294967295
 800e338:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e33a:	2301      	movs	r3, #1
 800e33c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	683a      	ldr	r2, [r7, #0]
 800e342:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800e344:	7bfb      	ldrb	r3, [r7, #15]
}
 800e346:	4618      	mov	r0, r3
 800e348:	3710      	adds	r7, #16
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
	...

0800e350 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f7ff ff87 	bl	800e26c <sync_window>
 800e35e:	4603      	mov	r3, r0
 800e360:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e362:	7bfb      	ldrb	r3, [r7, #15]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d158      	bne.n	800e41a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	2b03      	cmp	r3, #3
 800e36e:	d148      	bne.n	800e402 <sync_fs+0xb2>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	791b      	ldrb	r3, [r3, #4]
 800e374:	2b01      	cmp	r3, #1
 800e376:	d144      	bne.n	800e402 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	3334      	adds	r3, #52	@ 0x34
 800e37c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e380:	2100      	movs	r1, #0
 800e382:	4618      	mov	r0, r3
 800e384:	f7ff fda9 	bl	800deda <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	3334      	adds	r3, #52	@ 0x34
 800e38c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e390:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e394:	4618      	mov	r0, r3
 800e396:	f7ff fd38 	bl	800de0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	3334      	adds	r3, #52	@ 0x34
 800e39e:	4921      	ldr	r1, [pc, #132]	@ (800e424 <sync_fs+0xd4>)
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7ff fd4d 	bl	800de40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	3334      	adds	r3, #52	@ 0x34
 800e3aa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e3ae:	491e      	ldr	r1, [pc, #120]	@ (800e428 <sync_fs+0xd8>)
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7ff fd45 	bl	800de40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	3334      	adds	r3, #52	@ 0x34
 800e3ba:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	695b      	ldr	r3, [r3, #20]
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	4610      	mov	r0, r2
 800e3c6:	f7ff fd3b 	bl	800de40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	3334      	adds	r3, #52	@ 0x34
 800e3ce:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	691b      	ldr	r3, [r3, #16]
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	4610      	mov	r0, r2
 800e3da:	f7ff fd31 	bl	800de40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6a1b      	ldr	r3, [r3, #32]
 800e3e2:	1c5a      	adds	r2, r3, #1
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	7858      	ldrb	r0, [r3, #1]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	f7ff fc86 	bl	800dd08 <disk_write>
			fs->fsi_flag = 0;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2200      	movs	r2, #0
 800e400:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	785b      	ldrb	r3, [r3, #1]
 800e406:	2200      	movs	r2, #0
 800e408:	2100      	movs	r1, #0
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7ff fc9c 	bl	800dd48 <disk_ioctl>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d001      	beq.n	800e41a <sync_fs+0xca>
 800e416:	2301      	movs	r3, #1
 800e418:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3710      	adds	r7, #16
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}
 800e424:	41615252 	.word	0x41615252
 800e428:	61417272 	.word	0x61417272

0800e42c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e42c:	b480      	push	{r7}
 800e42e:	b083      	sub	sp, #12
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	3b02      	subs	r3, #2
 800e43a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	699b      	ldr	r3, [r3, #24]
 800e440:	3b02      	subs	r3, #2
 800e442:	683a      	ldr	r2, [r7, #0]
 800e444:	429a      	cmp	r2, r3
 800e446:	d301      	bcc.n	800e44c <clust2sect+0x20>
 800e448:	2300      	movs	r3, #0
 800e44a:	e008      	b.n	800e45e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	895b      	ldrh	r3, [r3, #10]
 800e450:	461a      	mov	r2, r3
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	fb03 f202 	mul.w	r2, r3, r2
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e45c:	4413      	add	r3, r2
}
 800e45e:	4618      	mov	r0, r3
 800e460:	370c      	adds	r7, #12
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr

0800e46a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e46a:	b580      	push	{r7, lr}
 800e46c:	b086      	sub	sp, #24
 800e46e:	af00      	add	r7, sp, #0
 800e470:	6078      	str	r0, [r7, #4]
 800e472:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d904      	bls.n	800e48a <get_fat+0x20>
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	699b      	ldr	r3, [r3, #24]
 800e484:	683a      	ldr	r2, [r7, #0]
 800e486:	429a      	cmp	r2, r3
 800e488:	d302      	bcc.n	800e490 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e48a:	2301      	movs	r3, #1
 800e48c:	617b      	str	r3, [r7, #20]
 800e48e:	e08e      	b.n	800e5ae <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e490:	f04f 33ff 	mov.w	r3, #4294967295
 800e494:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	2b03      	cmp	r3, #3
 800e49c:	d061      	beq.n	800e562 <get_fat+0xf8>
 800e49e:	2b03      	cmp	r3, #3
 800e4a0:	dc7b      	bgt.n	800e59a <get_fat+0x130>
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d002      	beq.n	800e4ac <get_fat+0x42>
 800e4a6:	2b02      	cmp	r3, #2
 800e4a8:	d041      	beq.n	800e52e <get_fat+0xc4>
 800e4aa:	e076      	b.n	800e59a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	60fb      	str	r3, [r7, #12]
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	085b      	lsrs	r3, r3, #1
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	4413      	add	r3, r2
 800e4b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	0a5b      	lsrs	r3, r3, #9
 800e4c2:	4413      	add	r3, r2
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	6938      	ldr	r0, [r7, #16]
 800e4c8:	f7ff ff14 	bl	800e2f4 <move_window>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d166      	bne.n	800e5a0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	1c5a      	adds	r2, r3, #1
 800e4d6:	60fa      	str	r2, [r7, #12]
 800e4d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4dc:	693a      	ldr	r2, [r7, #16]
 800e4de:	4413      	add	r3, r2
 800e4e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e4e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	0a5b      	lsrs	r3, r3, #9
 800e4ee:	4413      	add	r3, r2
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	6938      	ldr	r0, [r7, #16]
 800e4f4:	f7ff fefe 	bl	800e2f4 <move_window>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d152      	bne.n	800e5a4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e504:	693a      	ldr	r2, [r7, #16]
 800e506:	4413      	add	r3, r2
 800e508:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e50c:	021b      	lsls	r3, r3, #8
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	4313      	orrs	r3, r2
 800e512:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	f003 0301 	and.w	r3, r3, #1
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d002      	beq.n	800e524 <get_fat+0xba>
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	091b      	lsrs	r3, r3, #4
 800e522:	e002      	b.n	800e52a <get_fat+0xc0>
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e52a:	617b      	str	r3, [r7, #20]
			break;
 800e52c:	e03f      	b.n	800e5ae <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	0a1b      	lsrs	r3, r3, #8
 800e536:	4413      	add	r3, r2
 800e538:	4619      	mov	r1, r3
 800e53a:	6938      	ldr	r0, [r7, #16]
 800e53c:	f7ff feda 	bl	800e2f4 <move_window>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d130      	bne.n	800e5a8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	005b      	lsls	r3, r3, #1
 800e550:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e554:	4413      	add	r3, r2
 800e556:	4618      	mov	r0, r3
 800e558:	f7ff fc1c 	bl	800dd94 <ld_word>
 800e55c:	4603      	mov	r3, r0
 800e55e:	617b      	str	r3, [r7, #20]
			break;
 800e560:	e025      	b.n	800e5ae <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	09db      	lsrs	r3, r3, #7
 800e56a:	4413      	add	r3, r2
 800e56c:	4619      	mov	r1, r3
 800e56e:	6938      	ldr	r0, [r7, #16]
 800e570:	f7ff fec0 	bl	800e2f4 <move_window>
 800e574:	4603      	mov	r3, r0
 800e576:	2b00      	cmp	r3, #0
 800e578:	d118      	bne.n	800e5ac <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e588:	4413      	add	r3, r2
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7ff fc1a 	bl	800ddc4 <ld_dword>
 800e590:	4603      	mov	r3, r0
 800e592:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e596:	617b      	str	r3, [r7, #20]
			break;
 800e598:	e009      	b.n	800e5ae <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e59a:	2301      	movs	r3, #1
 800e59c:	617b      	str	r3, [r7, #20]
 800e59e:	e006      	b.n	800e5ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5a0:	bf00      	nop
 800e5a2:	e004      	b.n	800e5ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5a4:	bf00      	nop
 800e5a6:	e002      	b.n	800e5ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e5a8:	bf00      	nop
 800e5aa:	e000      	b.n	800e5ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e5ac:	bf00      	nop
		}
	}

	return val;
 800e5ae:	697b      	ldr	r3, [r7, #20]
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3718      	adds	r7, #24
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e5b8:	b590      	push	{r4, r7, lr}
 800e5ba:	b089      	sub	sp, #36	@ 0x24
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e5c4:	2302      	movs	r3, #2
 800e5c6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	2b01      	cmp	r3, #1
 800e5cc:	f240 80d9 	bls.w	800e782 <put_fat+0x1ca>
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	699b      	ldr	r3, [r3, #24]
 800e5d4:	68ba      	ldr	r2, [r7, #8]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	f080 80d3 	bcs.w	800e782 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	2b03      	cmp	r3, #3
 800e5e2:	f000 8096 	beq.w	800e712 <put_fat+0x15a>
 800e5e6:	2b03      	cmp	r3, #3
 800e5e8:	f300 80cb 	bgt.w	800e782 <put_fat+0x1ca>
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d002      	beq.n	800e5f6 <put_fat+0x3e>
 800e5f0:	2b02      	cmp	r3, #2
 800e5f2:	d06e      	beq.n	800e6d2 <put_fat+0x11a>
 800e5f4:	e0c5      	b.n	800e782 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	61bb      	str	r3, [r7, #24]
 800e5fa:	69bb      	ldr	r3, [r7, #24]
 800e5fc:	085b      	lsrs	r3, r3, #1
 800e5fe:	69ba      	ldr	r2, [r7, #24]
 800e600:	4413      	add	r3, r2
 800e602:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e608:	69bb      	ldr	r3, [r7, #24]
 800e60a:	0a5b      	lsrs	r3, r3, #9
 800e60c:	4413      	add	r3, r2
 800e60e:	4619      	mov	r1, r3
 800e610:	68f8      	ldr	r0, [r7, #12]
 800e612:	f7ff fe6f 	bl	800e2f4 <move_window>
 800e616:	4603      	mov	r3, r0
 800e618:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e61a:	7ffb      	ldrb	r3, [r7, #31]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	f040 80a9 	bne.w	800e774 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	1c59      	adds	r1, r3, #1
 800e62c:	61b9      	str	r1, [r7, #24]
 800e62e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e632:	4413      	add	r3, r2
 800e634:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	f003 0301 	and.w	r3, r3, #1
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d00d      	beq.n	800e65c <put_fat+0xa4>
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	b25b      	sxtb	r3, r3
 800e646:	f003 030f 	and.w	r3, r3, #15
 800e64a:	b25a      	sxtb	r2, r3
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	011b      	lsls	r3, r3, #4
 800e652:	b25b      	sxtb	r3, r3
 800e654:	4313      	orrs	r3, r2
 800e656:	b25b      	sxtb	r3, r3
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	e001      	b.n	800e660 <put_fat+0xa8>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	697a      	ldr	r2, [r7, #20]
 800e662:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2201      	movs	r2, #1
 800e668:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e66e:	69bb      	ldr	r3, [r7, #24]
 800e670:	0a5b      	lsrs	r3, r3, #9
 800e672:	4413      	add	r3, r2
 800e674:	4619      	mov	r1, r3
 800e676:	68f8      	ldr	r0, [r7, #12]
 800e678:	f7ff fe3c 	bl	800e2f4 <move_window>
 800e67c:	4603      	mov	r3, r0
 800e67e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e680:	7ffb      	ldrb	r3, [r7, #31]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d178      	bne.n	800e778 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e692:	4413      	add	r3, r2
 800e694:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	f003 0301 	and.w	r3, r3, #1
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d003      	beq.n	800e6a8 <put_fat+0xf0>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	091b      	lsrs	r3, r3, #4
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	e00e      	b.n	800e6c6 <put_fat+0x10e>
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	781b      	ldrb	r3, [r3, #0]
 800e6ac:	b25b      	sxtb	r3, r3
 800e6ae:	f023 030f 	bic.w	r3, r3, #15
 800e6b2:	b25a      	sxtb	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	0a1b      	lsrs	r3, r3, #8
 800e6b8:	b25b      	sxtb	r3, r3
 800e6ba:	f003 030f 	and.w	r3, r3, #15
 800e6be:	b25b      	sxtb	r3, r3
 800e6c0:	4313      	orrs	r3, r2
 800e6c2:	b25b      	sxtb	r3, r3
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	697a      	ldr	r2, [r7, #20]
 800e6c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	70da      	strb	r2, [r3, #3]
			break;
 800e6d0:	e057      	b.n	800e782 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	0a1b      	lsrs	r3, r3, #8
 800e6da:	4413      	add	r3, r2
 800e6dc:	4619      	mov	r1, r3
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	f7ff fe08 	bl	800e2f4 <move_window>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e6e8:	7ffb      	ldrb	r3, [r7, #31]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d146      	bne.n	800e77c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	005b      	lsls	r3, r3, #1
 800e6f8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e6fc:	4413      	add	r3, r2
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	b292      	uxth	r2, r2
 800e702:	4611      	mov	r1, r2
 800e704:	4618      	mov	r0, r3
 800e706:	f7ff fb80 	bl	800de0a <st_word>
			fs->wflag = 1;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2201      	movs	r2, #1
 800e70e:	70da      	strb	r2, [r3, #3]
			break;
 800e710:	e037      	b.n	800e782 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	09db      	lsrs	r3, r3, #7
 800e71a:	4413      	add	r3, r2
 800e71c:	4619      	mov	r1, r3
 800e71e:	68f8      	ldr	r0, [r7, #12]
 800e720:	f7ff fde8 	bl	800e2f4 <move_window>
 800e724:	4603      	mov	r3, r0
 800e726:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e728:	7ffb      	ldrb	r3, [r7, #31]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d128      	bne.n	800e780 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e742:	4413      	add	r3, r2
 800e744:	4618      	mov	r0, r3
 800e746:	f7ff fb3d 	bl	800ddc4 <ld_dword>
 800e74a:	4603      	mov	r3, r0
 800e74c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e750:	4323      	orrs	r3, r4
 800e752:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e762:	4413      	add	r3, r2
 800e764:	6879      	ldr	r1, [r7, #4]
 800e766:	4618      	mov	r0, r3
 800e768:	f7ff fb6a 	bl	800de40 <st_dword>
			fs->wflag = 1;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2201      	movs	r2, #1
 800e770:	70da      	strb	r2, [r3, #3]
			break;
 800e772:	e006      	b.n	800e782 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e774:	bf00      	nop
 800e776:	e004      	b.n	800e782 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e778:	bf00      	nop
 800e77a:	e002      	b.n	800e782 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e77c:	bf00      	nop
 800e77e:	e000      	b.n	800e782 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e780:	bf00      	nop
		}
	}
	return res;
 800e782:	7ffb      	ldrb	r3, [r7, #31]
}
 800e784:	4618      	mov	r0, r3
 800e786:	3724      	adds	r7, #36	@ 0x24
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd90      	pop	{r4, r7, pc}

0800e78c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b088      	sub	sp, #32
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e798:	2300      	movs	r3, #0
 800e79a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d904      	bls.n	800e7b2 <remove_chain+0x26>
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	699b      	ldr	r3, [r3, #24]
 800e7ac:	68ba      	ldr	r2, [r7, #8]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d301      	bcc.n	800e7b6 <remove_chain+0x2a>
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	e04b      	b.n	800e84e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d00c      	beq.n	800e7d6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e7c0:	6879      	ldr	r1, [r7, #4]
 800e7c2:	69b8      	ldr	r0, [r7, #24]
 800e7c4:	f7ff fef8 	bl	800e5b8 <put_fat>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e7cc:	7ffb      	ldrb	r3, [r7, #31]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d001      	beq.n	800e7d6 <remove_chain+0x4a>
 800e7d2:	7ffb      	ldrb	r3, [r7, #31]
 800e7d4:	e03b      	b.n	800e84e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e7d6:	68b9      	ldr	r1, [r7, #8]
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f7ff fe46 	bl	800e46a <get_fat>
 800e7de:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d031      	beq.n	800e84a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d101      	bne.n	800e7f0 <remove_chain+0x64>
 800e7ec:	2302      	movs	r3, #2
 800e7ee:	e02e      	b.n	800e84e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f6:	d101      	bne.n	800e7fc <remove_chain+0x70>
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	e028      	b.n	800e84e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	68b9      	ldr	r1, [r7, #8]
 800e800:	69b8      	ldr	r0, [r7, #24]
 800e802:	f7ff fed9 	bl	800e5b8 <put_fat>
 800e806:	4603      	mov	r3, r0
 800e808:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e80a:	7ffb      	ldrb	r3, [r7, #31]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d001      	beq.n	800e814 <remove_chain+0x88>
 800e810:	7ffb      	ldrb	r3, [r7, #31]
 800e812:	e01c      	b.n	800e84e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	695a      	ldr	r2, [r3, #20]
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	699b      	ldr	r3, [r3, #24]
 800e81c:	3b02      	subs	r3, #2
 800e81e:	429a      	cmp	r2, r3
 800e820:	d20b      	bcs.n	800e83a <remove_chain+0xae>
			fs->free_clst++;
 800e822:	69bb      	ldr	r3, [r7, #24]
 800e824:	695b      	ldr	r3, [r3, #20]
 800e826:	1c5a      	adds	r2, r3, #1
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	791b      	ldrb	r3, [r3, #4]
 800e830:	f043 0301 	orr.w	r3, r3, #1
 800e834:	b2da      	uxtb	r2, r3
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e83e:	69bb      	ldr	r3, [r7, #24]
 800e840:	699b      	ldr	r3, [r3, #24]
 800e842:	68ba      	ldr	r2, [r7, #8]
 800e844:	429a      	cmp	r2, r3
 800e846:	d3c6      	bcc.n	800e7d6 <remove_chain+0x4a>
 800e848:	e000      	b.n	800e84c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e84a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3720      	adds	r7, #32
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b088      	sub	sp, #32
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
 800e85e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d10d      	bne.n	800e888 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	691b      	ldr	r3, [r3, #16]
 800e870:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d004      	beq.n	800e882 <create_chain+0x2c>
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	699b      	ldr	r3, [r3, #24]
 800e87c:	69ba      	ldr	r2, [r7, #24]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d31b      	bcc.n	800e8ba <create_chain+0x64>
 800e882:	2301      	movs	r3, #1
 800e884:	61bb      	str	r3, [r7, #24]
 800e886:	e018      	b.n	800e8ba <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e888:	6839      	ldr	r1, [r7, #0]
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f7ff fded 	bl	800e46a <get_fat>
 800e890:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2b01      	cmp	r3, #1
 800e896:	d801      	bhi.n	800e89c <create_chain+0x46>
 800e898:	2301      	movs	r3, #1
 800e89a:	e070      	b.n	800e97e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a2:	d101      	bne.n	800e8a8 <create_chain+0x52>
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	e06a      	b.n	800e97e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e8a8:	693b      	ldr	r3, [r7, #16]
 800e8aa:	699b      	ldr	r3, [r3, #24]
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d201      	bcs.n	800e8b6 <create_chain+0x60>
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	e063      	b.n	800e97e <create_chain+0x128>
		scl = clst;
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e8ba:	69bb      	ldr	r3, [r7, #24]
 800e8bc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	699b      	ldr	r3, [r3, #24]
 800e8c8:	69fa      	ldr	r2, [r7, #28]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d307      	bcc.n	800e8de <create_chain+0x88>
				ncl = 2;
 800e8ce:	2302      	movs	r3, #2
 800e8d0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e8d2:	69fa      	ldr	r2, [r7, #28]
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d901      	bls.n	800e8de <create_chain+0x88>
 800e8da:	2300      	movs	r3, #0
 800e8dc:	e04f      	b.n	800e97e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e8de:	69f9      	ldr	r1, [r7, #28]
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f7ff fdc2 	bl	800e46a <get_fat>
 800e8e6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d00e      	beq.n	800e90c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d003      	beq.n	800e8fc <create_chain+0xa6>
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8fa:	d101      	bne.n	800e900 <create_chain+0xaa>
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	e03e      	b.n	800e97e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e900:	69fa      	ldr	r2, [r7, #28]
 800e902:	69bb      	ldr	r3, [r7, #24]
 800e904:	429a      	cmp	r2, r3
 800e906:	d1da      	bne.n	800e8be <create_chain+0x68>
 800e908:	2300      	movs	r3, #0
 800e90a:	e038      	b.n	800e97e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e90c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e90e:	f04f 32ff 	mov.w	r2, #4294967295
 800e912:	69f9      	ldr	r1, [r7, #28]
 800e914:	6938      	ldr	r0, [r7, #16]
 800e916:	f7ff fe4f 	bl	800e5b8 <put_fat>
 800e91a:	4603      	mov	r3, r0
 800e91c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e91e:	7dfb      	ldrb	r3, [r7, #23]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d109      	bne.n	800e938 <create_chain+0xe2>
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d006      	beq.n	800e938 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e92a:	69fa      	ldr	r2, [r7, #28]
 800e92c:	6839      	ldr	r1, [r7, #0]
 800e92e:	6938      	ldr	r0, [r7, #16]
 800e930:	f7ff fe42 	bl	800e5b8 <put_fat>
 800e934:	4603      	mov	r3, r0
 800e936:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e938:	7dfb      	ldrb	r3, [r7, #23]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d116      	bne.n	800e96c <create_chain+0x116>
		fs->last_clst = ncl;
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	69fa      	ldr	r2, [r7, #28]
 800e942:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	695a      	ldr	r2, [r3, #20]
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	699b      	ldr	r3, [r3, #24]
 800e94c:	3b02      	subs	r3, #2
 800e94e:	429a      	cmp	r2, r3
 800e950:	d804      	bhi.n	800e95c <create_chain+0x106>
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	695b      	ldr	r3, [r3, #20]
 800e956:	1e5a      	subs	r2, r3, #1
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	791b      	ldrb	r3, [r3, #4]
 800e960:	f043 0301 	orr.w	r3, r3, #1
 800e964:	b2da      	uxtb	r2, r3
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	711a      	strb	r2, [r3, #4]
 800e96a:	e007      	b.n	800e97c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e96c:	7dfb      	ldrb	r3, [r7, #23]
 800e96e:	2b01      	cmp	r3, #1
 800e970:	d102      	bne.n	800e978 <create_chain+0x122>
 800e972:	f04f 33ff 	mov.w	r3, #4294967295
 800e976:	e000      	b.n	800e97a <create_chain+0x124>
 800e978:	2301      	movs	r3, #1
 800e97a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e97c:	69fb      	ldr	r3, [r7, #28]
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3720      	adds	r7, #32
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e986:	b480      	push	{r7}
 800e988:	b087      	sub	sp, #28
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
 800e98e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e99a:	3304      	adds	r3, #4
 800e99c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	0a5b      	lsrs	r3, r3, #9
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	8952      	ldrh	r2, [r2, #10]
 800e9a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9aa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	1d1a      	adds	r2, r3, #4
 800e9b0:	613a      	str	r2, [r7, #16]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d101      	bne.n	800e9c0 <clmt_clust+0x3a>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	e010      	b.n	800e9e2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e9c0:	697a      	ldr	r2, [r7, #20]
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d307      	bcc.n	800e9d8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e9c8:	697a      	ldr	r2, [r7, #20]
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	617b      	str	r3, [r7, #20]
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	3304      	adds	r3, #4
 800e9d4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e9d6:	e7e9      	b.n	800e9ac <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e9d8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	681a      	ldr	r2, [r3, #0]
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	4413      	add	r3, r2
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	371c      	adds	r7, #28
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr

0800e9ee <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b086      	sub	sp, #24
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ea04:	d204      	bcs.n	800ea10 <dir_sdi+0x22>
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	f003 031f 	and.w	r3, r3, #31
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d001      	beq.n	800ea14 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ea10:	2302      	movs	r3, #2
 800ea12:	e063      	b.n	800eadc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	683a      	ldr	r2, [r7, #0]
 800ea18:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d106      	bne.n	800ea34 <dir_sdi+0x46>
 800ea26:	693b      	ldr	r3, [r7, #16]
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	2b02      	cmp	r3, #2
 800ea2c:	d902      	bls.n	800ea34 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea32:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10c      	bne.n	800ea54 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	095b      	lsrs	r3, r3, #5
 800ea3e:	693a      	ldr	r2, [r7, #16]
 800ea40:	8912      	ldrh	r2, [r2, #8]
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d301      	bcc.n	800ea4a <dir_sdi+0x5c>
 800ea46:	2302      	movs	r3, #2
 800ea48:	e048      	b.n	800eadc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	61da      	str	r2, [r3, #28]
 800ea52:	e029      	b.n	800eaa8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	895b      	ldrh	r3, [r3, #10]
 800ea58:	025b      	lsls	r3, r3, #9
 800ea5a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ea5c:	e019      	b.n	800ea92 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6979      	ldr	r1, [r7, #20]
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7ff fd01 	bl	800e46a <get_fat>
 800ea68:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea70:	d101      	bne.n	800ea76 <dir_sdi+0x88>
 800ea72:	2301      	movs	r3, #1
 800ea74:	e032      	b.n	800eadc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d904      	bls.n	800ea86 <dir_sdi+0x98>
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	699b      	ldr	r3, [r3, #24]
 800ea80:	697a      	ldr	r2, [r7, #20]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d301      	bcc.n	800ea8a <dir_sdi+0x9c>
 800ea86:	2302      	movs	r3, #2
 800ea88:	e028      	b.n	800eadc <dir_sdi+0xee>
			ofs -= csz;
 800ea8a:	683a      	ldr	r2, [r7, #0]
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	1ad3      	subs	r3, r2, r3
 800ea90:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d2e1      	bcs.n	800ea5e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ea9a:	6979      	ldr	r1, [r7, #20]
 800ea9c:	6938      	ldr	r0, [r7, #16]
 800ea9e:	f7ff fcc5 	bl	800e42c <clust2sect>
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	697a      	ldr	r2, [r7, #20]
 800eaac:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	69db      	ldr	r3, [r3, #28]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d101      	bne.n	800eaba <dir_sdi+0xcc>
 800eab6:	2302      	movs	r3, #2
 800eab8:	e010      	b.n	800eadc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	69da      	ldr	r2, [r3, #28]
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	0a5b      	lsrs	r3, r3, #9
 800eac2:	441a      	add	r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ead4:	441a      	add	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eada:	2300      	movs	r3, #0
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3718      	adds	r7, #24
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b086      	sub	sp, #24
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	695b      	ldr	r3, [r3, #20]
 800eaf8:	3320      	adds	r3, #32
 800eafa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	69db      	ldr	r3, [r3, #28]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d003      	beq.n	800eb0c <dir_next+0x28>
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb0a:	d301      	bcc.n	800eb10 <dir_next+0x2c>
 800eb0c:	2304      	movs	r3, #4
 800eb0e:	e0aa      	b.n	800ec66 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	f040 8098 	bne.w	800ec4c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	69db      	ldr	r3, [r3, #28]
 800eb20:	1c5a      	adds	r2, r3, #1
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	699b      	ldr	r3, [r3, #24]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d10b      	bne.n	800eb46 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	095b      	lsrs	r3, r3, #5
 800eb32:	68fa      	ldr	r2, [r7, #12]
 800eb34:	8912      	ldrh	r2, [r2, #8]
 800eb36:	4293      	cmp	r3, r2
 800eb38:	f0c0 8088 	bcc.w	800ec4c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	61da      	str	r2, [r3, #28]
 800eb42:	2304      	movs	r3, #4
 800eb44:	e08f      	b.n	800ec66 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	0a5b      	lsrs	r3, r3, #9
 800eb4a:	68fa      	ldr	r2, [r7, #12]
 800eb4c:	8952      	ldrh	r2, [r2, #10]
 800eb4e:	3a01      	subs	r2, #1
 800eb50:	4013      	ands	r3, r2
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d17a      	bne.n	800ec4c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	699b      	ldr	r3, [r3, #24]
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	4610      	mov	r0, r2
 800eb60:	f7ff fc83 	bl	800e46a <get_fat>
 800eb64:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d801      	bhi.n	800eb70 <dir_next+0x8c>
 800eb6c:	2302      	movs	r3, #2
 800eb6e:	e07a      	b.n	800ec66 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb76:	d101      	bne.n	800eb7c <dir_next+0x98>
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e074      	b.n	800ec66 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	699b      	ldr	r3, [r3, #24]
 800eb80:	697a      	ldr	r2, [r7, #20]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d358      	bcc.n	800ec38 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d104      	bne.n	800eb96 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	61da      	str	r2, [r3, #28]
 800eb92:	2304      	movs	r3, #4
 800eb94:	e067      	b.n	800ec66 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800eb96:	687a      	ldr	r2, [r7, #4]
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	699b      	ldr	r3, [r3, #24]
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	4610      	mov	r0, r2
 800eba0:	f7ff fe59 	bl	800e856 <create_chain>
 800eba4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d101      	bne.n	800ebb0 <dir_next+0xcc>
 800ebac:	2307      	movs	r3, #7
 800ebae:	e05a      	b.n	800ec66 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d101      	bne.n	800ebba <dir_next+0xd6>
 800ebb6:	2302      	movs	r3, #2
 800ebb8:	e055      	b.n	800ec66 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebc0:	d101      	bne.n	800ebc6 <dir_next+0xe2>
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e04f      	b.n	800ec66 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	f7ff fb50 	bl	800e26c <sync_window>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d001      	beq.n	800ebd6 <dir_next+0xf2>
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	e047      	b.n	800ec66 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	3334      	adds	r3, #52	@ 0x34
 800ebda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ebde:	2100      	movs	r1, #0
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7ff f97a 	bl	800deda <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	613b      	str	r3, [r7, #16]
 800ebea:	6979      	ldr	r1, [r7, #20]
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f7ff fc1d 	bl	800e42c <clust2sect>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	631a      	str	r2, [r3, #48]	@ 0x30
 800ebf8:	e012      	b.n	800ec20 <dir_next+0x13c>
						fs->wflag = 1;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f7ff fb33 	bl	800e26c <sync_window>
 800ec06:	4603      	mov	r3, r0
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d001      	beq.n	800ec10 <dir_next+0x12c>
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	e02a      	b.n	800ec66 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	3301      	adds	r3, #1
 800ec14:	613b      	str	r3, [r7, #16]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec1a:	1c5a      	adds	r2, r3, #1
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	631a      	str	r2, [r3, #48]	@ 0x30
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	895b      	ldrh	r3, [r3, #10]
 800ec24:	461a      	mov	r2, r3
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d3e6      	bcc.n	800ebfa <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	1ad2      	subs	r2, r2, r3
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	697a      	ldr	r2, [r7, #20]
 800ec3c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ec3e:	6979      	ldr	r1, [r7, #20]
 800ec40:	68f8      	ldr	r0, [r7, #12]
 800ec42:	f7ff fbf3 	bl	800e42c <clust2sect>
 800ec46:	4602      	mov	r2, r0
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	68ba      	ldr	r2, [r7, #8]
 800ec50:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec5e:	441a      	add	r2, r3
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3718      	adds	r7, #24
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b086      	sub	sp, #24
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]
 800ec76:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ec7e:	2100      	movs	r1, #0
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7ff feb4 	bl	800e9ee <dir_sdi>
 800ec86:	4603      	mov	r3, r0
 800ec88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ec8a:	7dfb      	ldrb	r3, [r7, #23]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d12b      	bne.n	800ece8 <dir_alloc+0x7a>
		n = 0;
 800ec90:	2300      	movs	r3, #0
 800ec92:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	69db      	ldr	r3, [r3, #28]
 800ec98:	4619      	mov	r1, r3
 800ec9a:	68f8      	ldr	r0, [r7, #12]
 800ec9c:	f7ff fb2a 	bl	800e2f4 <move_window>
 800eca0:	4603      	mov	r3, r0
 800eca2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eca4:	7dfb      	ldrb	r3, [r7, #23]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d11d      	bne.n	800ece6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6a1b      	ldr	r3, [r3, #32]
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	2be5      	cmp	r3, #229	@ 0xe5
 800ecb2:	d004      	beq.n	800ecbe <dir_alloc+0x50>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6a1b      	ldr	r3, [r3, #32]
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d107      	bne.n	800ecce <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	613b      	str	r3, [r7, #16]
 800ecc4:	693a      	ldr	r2, [r7, #16]
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d102      	bne.n	800ecd2 <dir_alloc+0x64>
 800eccc:	e00c      	b.n	800ece8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ecce:	2300      	movs	r3, #0
 800ecd0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ecd2:	2101      	movs	r1, #1
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f7ff ff05 	bl	800eae4 <dir_next>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ecde:	7dfb      	ldrb	r3, [r7, #23]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d0d7      	beq.n	800ec94 <dir_alloc+0x26>
 800ece4:	e000      	b.n	800ece8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ece6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ece8:	7dfb      	ldrb	r3, [r7, #23]
 800ecea:	2b04      	cmp	r3, #4
 800ecec:	d101      	bne.n	800ecf2 <dir_alloc+0x84>
 800ecee:	2307      	movs	r3, #7
 800ecf0:	75fb      	strb	r3, [r7, #23]
	return res;
 800ecf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3718      	adds	r7, #24
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	331a      	adds	r3, #26
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7ff f842 	bl	800dd94 <ld_word>
 800ed10:	4603      	mov	r3, r0
 800ed12:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	2b03      	cmp	r3, #3
 800ed1a:	d109      	bne.n	800ed30 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	3314      	adds	r3, #20
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7ff f837 	bl	800dd94 <ld_word>
 800ed26:	4603      	mov	r3, r0
 800ed28:	041b      	lsls	r3, r3, #16
 800ed2a:	68fa      	ldr	r2, [r7, #12]
 800ed2c:	4313      	orrs	r3, r2
 800ed2e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ed30:	68fb      	ldr	r3, [r7, #12]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3710      	adds	r7, #16
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}

0800ed3a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ed3a:	b580      	push	{r7, lr}
 800ed3c:	b084      	sub	sp, #16
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	60f8      	str	r0, [r7, #12]
 800ed42:	60b9      	str	r1, [r7, #8]
 800ed44:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	331a      	adds	r3, #26
 800ed4a:	687a      	ldr	r2, [r7, #4]
 800ed4c:	b292      	uxth	r2, r2
 800ed4e:	4611      	mov	r1, r2
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7ff f85a 	bl	800de0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	2b03      	cmp	r3, #3
 800ed5c:	d109      	bne.n	800ed72 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	f103 0214 	add.w	r2, r3, #20
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	0c1b      	lsrs	r3, r3, #16
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	4619      	mov	r1, r3
 800ed6c:	4610      	mov	r0, r2
 800ed6e:	f7ff f84c 	bl	800de0a <st_word>
	}
}
 800ed72:	bf00      	nop
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
	...

0800ed7c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ed7c:	b590      	push	{r4, r7, lr}
 800ed7e:	b087      	sub	sp, #28
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	331a      	adds	r3, #26
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7ff f802 	bl	800dd94 <ld_word>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d001      	beq.n	800ed9a <cmp_lfn+0x1e>
 800ed96:	2300      	movs	r3, #0
 800ed98:	e059      	b.n	800ee4e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eda2:	1e5a      	subs	r2, r3, #1
 800eda4:	4613      	mov	r3, r2
 800eda6:	005b      	lsls	r3, r3, #1
 800eda8:	4413      	add	r3, r2
 800edaa:	009b      	lsls	r3, r3, #2
 800edac:	4413      	add	r3, r2
 800edae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800edb0:	2301      	movs	r3, #1
 800edb2:	81fb      	strh	r3, [r7, #14]
 800edb4:	2300      	movs	r3, #0
 800edb6:	613b      	str	r3, [r7, #16]
 800edb8:	e033      	b.n	800ee22 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800edba:	4a27      	ldr	r2, [pc, #156]	@ (800ee58 <cmp_lfn+0xdc>)
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	4413      	add	r3, r2
 800edc0:	781b      	ldrb	r3, [r3, #0]
 800edc2:	461a      	mov	r2, r3
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	4413      	add	r3, r2
 800edc8:	4618      	mov	r0, r3
 800edca:	f7fe ffe3 	bl	800dd94 <ld_word>
 800edce:	4603      	mov	r3, r0
 800edd0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800edd2:	89fb      	ldrh	r3, [r7, #14]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d01a      	beq.n	800ee0e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	2bfe      	cmp	r3, #254	@ 0xfe
 800eddc:	d812      	bhi.n	800ee04 <cmp_lfn+0x88>
 800edde:	89bb      	ldrh	r3, [r7, #12]
 800ede0:	4618      	mov	r0, r3
 800ede2:	f001 feff 	bl	8010be4 <ff_wtoupper>
 800ede6:	4603      	mov	r3, r0
 800ede8:	461c      	mov	r4, r3
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	1c5a      	adds	r2, r3, #1
 800edee:	617a      	str	r2, [r7, #20]
 800edf0:	005b      	lsls	r3, r3, #1
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	4413      	add	r3, r2
 800edf6:	881b      	ldrh	r3, [r3, #0]
 800edf8:	4618      	mov	r0, r3
 800edfa:	f001 fef3 	bl	8010be4 <ff_wtoupper>
 800edfe:	4603      	mov	r3, r0
 800ee00:	429c      	cmp	r4, r3
 800ee02:	d001      	beq.n	800ee08 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ee04:	2300      	movs	r3, #0
 800ee06:	e022      	b.n	800ee4e <cmp_lfn+0xd2>
			}
			wc = uc;
 800ee08:	89bb      	ldrh	r3, [r7, #12]
 800ee0a:	81fb      	strh	r3, [r7, #14]
 800ee0c:	e006      	b.n	800ee1c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ee0e:	89bb      	ldrh	r3, [r7, #12]
 800ee10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d001      	beq.n	800ee1c <cmp_lfn+0xa0>
 800ee18:	2300      	movs	r3, #0
 800ee1a:	e018      	b.n	800ee4e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	3301      	adds	r3, #1
 800ee20:	613b      	str	r3, [r7, #16]
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	2b0c      	cmp	r3, #12
 800ee26:	d9c8      	bls.n	800edba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d00b      	beq.n	800ee4c <cmp_lfn+0xd0>
 800ee34:	89fb      	ldrh	r3, [r7, #14]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d008      	beq.n	800ee4c <cmp_lfn+0xd0>
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	005b      	lsls	r3, r3, #1
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	4413      	add	r3, r2
 800ee42:	881b      	ldrh	r3, [r3, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d001      	beq.n	800ee4c <cmp_lfn+0xd0>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	e000      	b.n	800ee4e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ee4c:	2301      	movs	r3, #1
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	371c      	adds	r7, #28
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd90      	pop	{r4, r7, pc}
 800ee56:	bf00      	nop
 800ee58:	08011a24 	.word	0x08011a24

0800ee5c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b088      	sub	sp, #32
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	60f8      	str	r0, [r7, #12]
 800ee64:	60b9      	str	r1, [r7, #8]
 800ee66:	4611      	mov	r1, r2
 800ee68:	461a      	mov	r2, r3
 800ee6a:	460b      	mov	r3, r1
 800ee6c:	71fb      	strb	r3, [r7, #7]
 800ee6e:	4613      	mov	r3, r2
 800ee70:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	330d      	adds	r3, #13
 800ee76:	79ba      	ldrb	r2, [r7, #6]
 800ee78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	330b      	adds	r3, #11
 800ee7e:	220f      	movs	r2, #15
 800ee80:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	330c      	adds	r3, #12
 800ee86:	2200      	movs	r2, #0
 800ee88:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	331a      	adds	r3, #26
 800ee8e:	2100      	movs	r1, #0
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7fe ffba 	bl	800de0a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ee96:	79fb      	ldrb	r3, [r7, #7]
 800ee98:	1e5a      	subs	r2, r3, #1
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	005b      	lsls	r3, r3, #1
 800ee9e:	4413      	add	r3, r2
 800eea0:	009b      	lsls	r3, r3, #2
 800eea2:	4413      	add	r3, r2
 800eea4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800eea6:	2300      	movs	r3, #0
 800eea8:	82fb      	strh	r3, [r7, #22]
 800eeaa:	2300      	movs	r3, #0
 800eeac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eeae:	8afb      	ldrh	r3, [r7, #22]
 800eeb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d007      	beq.n	800eec8 <put_lfn+0x6c>
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	1c5a      	adds	r2, r3, #1
 800eebc:	61fa      	str	r2, [r7, #28]
 800eebe:	005b      	lsls	r3, r3, #1
 800eec0:	68fa      	ldr	r2, [r7, #12]
 800eec2:	4413      	add	r3, r2
 800eec4:	881b      	ldrh	r3, [r3, #0]
 800eec6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800eec8:	4a17      	ldr	r2, [pc, #92]	@ (800ef28 <put_lfn+0xcc>)
 800eeca:	69bb      	ldr	r3, [r7, #24]
 800eecc:	4413      	add	r3, r2
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	461a      	mov	r2, r3
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	4413      	add	r3, r2
 800eed6:	8afa      	ldrh	r2, [r7, #22]
 800eed8:	4611      	mov	r1, r2
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7fe ff95 	bl	800de0a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800eee0:	8afb      	ldrh	r3, [r7, #22]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d102      	bne.n	800eeec <put_lfn+0x90>
 800eee6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800eeea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800eeec:	69bb      	ldr	r3, [r7, #24]
 800eeee:	3301      	adds	r3, #1
 800eef0:	61bb      	str	r3, [r7, #24]
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	2b0c      	cmp	r3, #12
 800eef6:	d9da      	bls.n	800eeae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800eef8:	8afb      	ldrh	r3, [r7, #22]
 800eefa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d006      	beq.n	800ef10 <put_lfn+0xb4>
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	005b      	lsls	r3, r3, #1
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	4413      	add	r3, r2
 800ef0a:	881b      	ldrh	r3, [r3, #0]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d103      	bne.n	800ef18 <put_lfn+0xbc>
 800ef10:	79fb      	ldrb	r3, [r7, #7]
 800ef12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef16:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	79fa      	ldrb	r2, [r7, #7]
 800ef1c:	701a      	strb	r2, [r3, #0]
}
 800ef1e:	bf00      	nop
 800ef20:	3720      	adds	r7, #32
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	08011a24 	.word	0x08011a24

0800ef2c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b08c      	sub	sp, #48	@ 0x30
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	60f8      	str	r0, [r7, #12]
 800ef34:	60b9      	str	r1, [r7, #8]
 800ef36:	607a      	str	r2, [r7, #4]
 800ef38:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ef3a:	220b      	movs	r2, #11
 800ef3c:	68b9      	ldr	r1, [r7, #8]
 800ef3e:	68f8      	ldr	r0, [r7, #12]
 800ef40:	f7fe ffaa 	bl	800de98 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	2b05      	cmp	r3, #5
 800ef48:	d929      	bls.n	800ef9e <gen_numname+0x72>
		sr = seq;
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ef4e:	e020      	b.n	800ef92 <gen_numname+0x66>
			wc = *lfn++;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	1c9a      	adds	r2, r3, #2
 800ef54:	607a      	str	r2, [r7, #4]
 800ef56:	881b      	ldrh	r3, [r3, #0]
 800ef58:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef5e:	e015      	b.n	800ef8c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	005a      	lsls	r2, r3, #1
 800ef64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef66:	f003 0301 	and.w	r3, r3, #1
 800ef6a:	4413      	add	r3, r2
 800ef6c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ef6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef70:	085b      	lsrs	r3, r3, #1
 800ef72:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ef74:	69fb      	ldr	r3, [r7, #28]
 800ef76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d003      	beq.n	800ef86 <gen_numname+0x5a>
 800ef7e:	69fa      	ldr	r2, [r7, #28]
 800ef80:	4b30      	ldr	r3, [pc, #192]	@ (800f044 <gen_numname+0x118>)
 800ef82:	4053      	eors	r3, r2
 800ef84:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ef86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef88:	3301      	adds	r3, #1
 800ef8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef8e:	2b0f      	cmp	r3, #15
 800ef90:	d9e6      	bls.n	800ef60 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	881b      	ldrh	r3, [r3, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d1da      	bne.n	800ef50 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ef9e:	2307      	movs	r3, #7
 800efa0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	f003 030f 	and.w	r3, r3, #15
 800efaa:	b2db      	uxtb	r3, r3
 800efac:	3330      	adds	r3, #48	@ 0x30
 800efae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800efb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800efb6:	2b39      	cmp	r3, #57	@ 0x39
 800efb8:	d904      	bls.n	800efc4 <gen_numname+0x98>
 800efba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800efbe:	3307      	adds	r3, #7
 800efc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800efc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efc6:	1e5a      	subs	r2, r3, #1
 800efc8:	62ba      	str	r2, [r7, #40]	@ 0x28
 800efca:	3330      	adds	r3, #48	@ 0x30
 800efcc:	443b      	add	r3, r7
 800efce:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800efd2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	091b      	lsrs	r3, r3, #4
 800efda:	603b      	str	r3, [r7, #0]
	} while (seq);
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d1df      	bne.n	800efa2 <gen_numname+0x76>
	ns[i] = '~';
 800efe2:	f107 0214 	add.w	r2, r7, #20
 800efe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efe8:	4413      	add	r3, r2
 800efea:	227e      	movs	r2, #126	@ 0x7e
 800efec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800efee:	2300      	movs	r3, #0
 800eff0:	627b      	str	r3, [r7, #36]	@ 0x24
 800eff2:	e002      	b.n	800effa <gen_numname+0xce>
 800eff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eff6:	3301      	adds	r3, #1
 800eff8:	627b      	str	r3, [r7, #36]	@ 0x24
 800effa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800effc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800effe:	429a      	cmp	r2, r3
 800f000:	d205      	bcs.n	800f00e <gen_numname+0xe2>
 800f002:	68fa      	ldr	r2, [r7, #12]
 800f004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f006:	4413      	add	r3, r2
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	2b20      	cmp	r3, #32
 800f00c:	d1f2      	bne.n	800eff4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f010:	2b07      	cmp	r3, #7
 800f012:	d807      	bhi.n	800f024 <gen_numname+0xf8>
 800f014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f016:	1c5a      	adds	r2, r3, #1
 800f018:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f01a:	3330      	adds	r3, #48	@ 0x30
 800f01c:	443b      	add	r3, r7
 800f01e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f022:	e000      	b.n	800f026 <gen_numname+0xfa>
 800f024:	2120      	movs	r1, #32
 800f026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f028:	1c5a      	adds	r2, r3, #1
 800f02a:	627a      	str	r2, [r7, #36]	@ 0x24
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	4413      	add	r3, r2
 800f030:	460a      	mov	r2, r1
 800f032:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f036:	2b07      	cmp	r3, #7
 800f038:	d9e9      	bls.n	800f00e <gen_numname+0xe2>
}
 800f03a:	bf00      	nop
 800f03c:	bf00      	nop
 800f03e:	3730      	adds	r7, #48	@ 0x30
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	00011021 	.word	0x00011021

0800f048 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f048:	b480      	push	{r7}
 800f04a:	b085      	sub	sp, #20
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f050:	2300      	movs	r3, #0
 800f052:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f054:	230b      	movs	r3, #11
 800f056:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f058:	7bfb      	ldrb	r3, [r7, #15]
 800f05a:	b2da      	uxtb	r2, r3
 800f05c:	0852      	lsrs	r2, r2, #1
 800f05e:	01db      	lsls	r3, r3, #7
 800f060:	4313      	orrs	r3, r2
 800f062:	b2da      	uxtb	r2, r3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	1c59      	adds	r1, r3, #1
 800f068:	6079      	str	r1, [r7, #4]
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	4413      	add	r3, r2
 800f06e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	3b01      	subs	r3, #1
 800f074:	60bb      	str	r3, [r7, #8]
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d1ed      	bne.n	800f058 <sum_sfn+0x10>
	return sum;
 800f07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3714      	adds	r7, #20
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr

0800f08a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f08a:	b580      	push	{r7, lr}
 800f08c:	b086      	sub	sp, #24
 800f08e:	af00      	add	r7, sp, #0
 800f090:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f098:	2100      	movs	r1, #0
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f7ff fca7 	bl	800e9ee <dir_sdi>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f0a4:	7dfb      	ldrb	r3, [r7, #23]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d001      	beq.n	800f0ae <dir_find+0x24>
 800f0aa:	7dfb      	ldrb	r3, [r7, #23]
 800f0ac:	e0a9      	b.n	800f202 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f0ae:	23ff      	movs	r3, #255	@ 0xff
 800f0b0:	753b      	strb	r3, [r7, #20]
 800f0b2:	7d3b      	ldrb	r3, [r7, #20]
 800f0b4:	757b      	strb	r3, [r7, #21]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800f0bc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	69db      	ldr	r3, [r3, #28]
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	6938      	ldr	r0, [r7, #16]
 800f0c6:	f7ff f915 	bl	800e2f4 <move_window>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f0ce:	7dfb      	ldrb	r3, [r7, #23]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	f040 8090 	bne.w	800f1f6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6a1b      	ldr	r3, [r3, #32]
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f0de:	7dbb      	ldrb	r3, [r7, #22]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d102      	bne.n	800f0ea <dir_find+0x60>
 800f0e4:	2304      	movs	r3, #4
 800f0e6:	75fb      	strb	r3, [r7, #23]
 800f0e8:	e08a      	b.n	800f200 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6a1b      	ldr	r3, [r3, #32]
 800f0ee:	330b      	adds	r3, #11
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f0f6:	73fb      	strb	r3, [r7, #15]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	7bfa      	ldrb	r2, [r7, #15]
 800f0fc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f0fe:	7dbb      	ldrb	r3, [r7, #22]
 800f100:	2be5      	cmp	r3, #229	@ 0xe5
 800f102:	d007      	beq.n	800f114 <dir_find+0x8a>
 800f104:	7bfb      	ldrb	r3, [r7, #15]
 800f106:	f003 0308 	and.w	r3, r3, #8
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d009      	beq.n	800f122 <dir_find+0x98>
 800f10e:	7bfb      	ldrb	r3, [r7, #15]
 800f110:	2b0f      	cmp	r3, #15
 800f112:	d006      	beq.n	800f122 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f114:	23ff      	movs	r3, #255	@ 0xff
 800f116:	757b      	strb	r3, [r7, #21]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f04f 32ff 	mov.w	r2, #4294967295
 800f11e:	631a      	str	r2, [r3, #48]	@ 0x30
 800f120:	e05e      	b.n	800f1e0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f122:	7bfb      	ldrb	r3, [r7, #15]
 800f124:	2b0f      	cmp	r3, #15
 800f126:	d136      	bne.n	800f196 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f12e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f132:	2b00      	cmp	r3, #0
 800f134:	d154      	bne.n	800f1e0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f136:	7dbb      	ldrb	r3, [r7, #22]
 800f138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d00d      	beq.n	800f15c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6a1b      	ldr	r3, [r3, #32]
 800f144:	7b5b      	ldrb	r3, [r3, #13]
 800f146:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f148:	7dbb      	ldrb	r3, [r7, #22]
 800f14a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f14e:	75bb      	strb	r3, [r7, #22]
 800f150:	7dbb      	ldrb	r3, [r7, #22]
 800f152:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	695a      	ldr	r2, [r3, #20]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f15c:	7dba      	ldrb	r2, [r7, #22]
 800f15e:	7d7b      	ldrb	r3, [r7, #21]
 800f160:	429a      	cmp	r2, r3
 800f162:	d115      	bne.n	800f190 <dir_find+0x106>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6a1b      	ldr	r3, [r3, #32]
 800f168:	330d      	adds	r3, #13
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	7d3a      	ldrb	r2, [r7, #20]
 800f16e:	429a      	cmp	r2, r3
 800f170:	d10e      	bne.n	800f190 <dir_find+0x106>
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	68da      	ldr	r2, [r3, #12]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6a1b      	ldr	r3, [r3, #32]
 800f17a:	4619      	mov	r1, r3
 800f17c:	4610      	mov	r0, r2
 800f17e:	f7ff fdfd 	bl	800ed7c <cmp_lfn>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d003      	beq.n	800f190 <dir_find+0x106>
 800f188:	7d7b      	ldrb	r3, [r7, #21]
 800f18a:	3b01      	subs	r3, #1
 800f18c:	b2db      	uxtb	r3, r3
 800f18e:	e000      	b.n	800f192 <dir_find+0x108>
 800f190:	23ff      	movs	r3, #255	@ 0xff
 800f192:	757b      	strb	r3, [r7, #21]
 800f194:	e024      	b.n	800f1e0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f196:	7d7b      	ldrb	r3, [r7, #21]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d109      	bne.n	800f1b0 <dir_find+0x126>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6a1b      	ldr	r3, [r3, #32]
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7ff ff51 	bl	800f048 <sum_sfn>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	7d3b      	ldrb	r3, [r7, #20]
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d024      	beq.n	800f1fa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f1b6:	f003 0301 	and.w	r3, r3, #1
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d10a      	bne.n	800f1d4 <dir_find+0x14a>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6a18      	ldr	r0, [r3, #32]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	3324      	adds	r3, #36	@ 0x24
 800f1c6:	220b      	movs	r2, #11
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	f7fe fea1 	bl	800df10 <mem_cmp>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d014      	beq.n	800f1fe <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f1d4:	23ff      	movs	r3, #255	@ 0xff
 800f1d6:	757b      	strb	r3, [r7, #21]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f04f 32ff 	mov.w	r2, #4294967295
 800f1de:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f1e0:	2100      	movs	r1, #0
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f7ff fc7e 	bl	800eae4 <dir_next>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f1ec:	7dfb      	ldrb	r3, [r7, #23]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	f43f af65 	beq.w	800f0be <dir_find+0x34>
 800f1f4:	e004      	b.n	800f200 <dir_find+0x176>
		if (res != FR_OK) break;
 800f1f6:	bf00      	nop
 800f1f8:	e002      	b.n	800f200 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f1fa:	bf00      	nop
 800f1fc:	e000      	b.n	800f200 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f1fe:	bf00      	nop

	return res;
 800f200:	7dfb      	ldrb	r3, [r7, #23]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3718      	adds	r7, #24
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
	...

0800f20c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b08c      	sub	sp, #48	@ 0x30
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f220:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d001      	beq.n	800f22c <dir_register+0x20>
 800f228:	2306      	movs	r3, #6
 800f22a:	e0e0      	b.n	800f3ee <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f22c:	2300      	movs	r3, #0
 800f22e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f230:	e002      	b.n	800f238 <dir_register+0x2c>
 800f232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f234:	3301      	adds	r3, #1
 800f236:	627b      	str	r3, [r7, #36]	@ 0x24
 800f238:	69fb      	ldr	r3, [r7, #28]
 800f23a:	68da      	ldr	r2, [r3, #12]
 800f23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23e:	005b      	lsls	r3, r3, #1
 800f240:	4413      	add	r3, r2
 800f242:	881b      	ldrh	r3, [r3, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d1f4      	bne.n	800f232 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800f24e:	f107 030c 	add.w	r3, r7, #12
 800f252:	220c      	movs	r2, #12
 800f254:	4618      	mov	r0, r3
 800f256:	f7fe fe1f 	bl	800de98 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f25a:	7dfb      	ldrb	r3, [r7, #23]
 800f25c:	f003 0301 	and.w	r3, r3, #1
 800f260:	2b00      	cmp	r3, #0
 800f262:	d032      	beq.n	800f2ca <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2240      	movs	r2, #64	@ 0x40
 800f268:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800f26c:	2301      	movs	r3, #1
 800f26e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f270:	e016      	b.n	800f2a0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	68da      	ldr	r2, [r3, #12]
 800f27c:	f107 010c 	add.w	r1, r7, #12
 800f280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f282:	f7ff fe53 	bl	800ef2c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7ff feff 	bl	800f08a <dir_find>
 800f28c:	4603      	mov	r3, r0
 800f28e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800f292:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f296:	2b00      	cmp	r3, #0
 800f298:	d106      	bne.n	800f2a8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f29c:	3301      	adds	r3, #1
 800f29e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2a2:	2b63      	cmp	r3, #99	@ 0x63
 800f2a4:	d9e5      	bls.n	800f272 <dir_register+0x66>
 800f2a6:	e000      	b.n	800f2aa <dir_register+0x9e>
			if (res != FR_OK) break;
 800f2a8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ac:	2b64      	cmp	r3, #100	@ 0x64
 800f2ae:	d101      	bne.n	800f2b4 <dir_register+0xa8>
 800f2b0:	2307      	movs	r3, #7
 800f2b2:	e09c      	b.n	800f3ee <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f2b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f2b8:	2b04      	cmp	r3, #4
 800f2ba:	d002      	beq.n	800f2c2 <dir_register+0xb6>
 800f2bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f2c0:	e095      	b.n	800f3ee <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f2c2:	7dfa      	ldrb	r2, [r7, #23]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f2ca:	7dfb      	ldrb	r3, [r7, #23]
 800f2cc:	f003 0302 	and.w	r3, r3, #2
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d007      	beq.n	800f2e4 <dir_register+0xd8>
 800f2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d6:	330c      	adds	r3, #12
 800f2d8:	4a47      	ldr	r2, [pc, #284]	@ (800f3f8 <dir_register+0x1ec>)
 800f2da:	fba2 2303 	umull	r2, r3, r2, r3
 800f2de:	089b      	lsrs	r3, r3, #2
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	e000      	b.n	800f2e6 <dir_register+0xda>
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f2e8:	6a39      	ldr	r1, [r7, #32]
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f7ff fcbf 	bl	800ec6e <dir_alloc>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f2f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d148      	bne.n	800f390 <dir_register+0x184>
 800f2fe:	6a3b      	ldr	r3, [r7, #32]
 800f300:	3b01      	subs	r3, #1
 800f302:	623b      	str	r3, [r7, #32]
 800f304:	6a3b      	ldr	r3, [r7, #32]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d042      	beq.n	800f390 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	695a      	ldr	r2, [r3, #20]
 800f30e:	6a3b      	ldr	r3, [r7, #32]
 800f310:	015b      	lsls	r3, r3, #5
 800f312:	1ad3      	subs	r3, r2, r3
 800f314:	4619      	mov	r1, r3
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f7ff fb69 	bl	800e9ee <dir_sdi>
 800f31c:	4603      	mov	r3, r0
 800f31e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800f322:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f326:	2b00      	cmp	r3, #0
 800f328:	d132      	bne.n	800f390 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	3324      	adds	r3, #36	@ 0x24
 800f32e:	4618      	mov	r0, r3
 800f330:	f7ff fe8a 	bl	800f048 <sum_sfn>
 800f334:	4603      	mov	r3, r0
 800f336:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	69db      	ldr	r3, [r3, #28]
 800f33c:	4619      	mov	r1, r3
 800f33e:	69f8      	ldr	r0, [r7, #28]
 800f340:	f7fe ffd8 	bl	800e2f4 <move_window>
 800f344:	4603      	mov	r3, r0
 800f346:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800f34a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d11d      	bne.n	800f38e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f352:	69fb      	ldr	r3, [r7, #28]
 800f354:	68d8      	ldr	r0, [r3, #12]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6a19      	ldr	r1, [r3, #32]
 800f35a:	6a3b      	ldr	r3, [r7, #32]
 800f35c:	b2da      	uxtb	r2, r3
 800f35e:	7efb      	ldrb	r3, [r7, #27]
 800f360:	f7ff fd7c 	bl	800ee5c <put_lfn>
				fs->wflag = 1;
 800f364:	69fb      	ldr	r3, [r7, #28]
 800f366:	2201      	movs	r2, #1
 800f368:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f36a:	2100      	movs	r1, #0
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7ff fbb9 	bl	800eae4 <dir_next>
 800f372:	4603      	mov	r3, r0
 800f374:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800f378:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d107      	bne.n	800f390 <dir_register+0x184>
 800f380:	6a3b      	ldr	r3, [r7, #32]
 800f382:	3b01      	subs	r3, #1
 800f384:	623b      	str	r3, [r7, #32]
 800f386:	6a3b      	ldr	r3, [r7, #32]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d1d5      	bne.n	800f338 <dir_register+0x12c>
 800f38c:	e000      	b.n	800f390 <dir_register+0x184>
				if (res != FR_OK) break;
 800f38e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f390:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f394:	2b00      	cmp	r3, #0
 800f396:	d128      	bne.n	800f3ea <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	69db      	ldr	r3, [r3, #28]
 800f39c:	4619      	mov	r1, r3
 800f39e:	69f8      	ldr	r0, [r7, #28]
 800f3a0:	f7fe ffa8 	bl	800e2f4 <move_window>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800f3aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d11b      	bne.n	800f3ea <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6a1b      	ldr	r3, [r3, #32]
 800f3b6:	2220      	movs	r2, #32
 800f3b8:	2100      	movs	r1, #0
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7fe fd8d 	bl	800deda <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6a18      	ldr	r0, [r3, #32]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	3324      	adds	r3, #36	@ 0x24
 800f3c8:	220b      	movs	r2, #11
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	f7fe fd64 	bl	800de98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	6a1b      	ldr	r3, [r3, #32]
 800f3da:	330c      	adds	r3, #12
 800f3dc:	f002 0218 	and.w	r2, r2, #24
 800f3e0:	b2d2      	uxtb	r2, r2
 800f3e2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f3e4:	69fb      	ldr	r3, [r7, #28]
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f3ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3730      	adds	r7, #48	@ 0x30
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	4ec4ec4f 	.word	0x4ec4ec4f

0800f3fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b08a      	sub	sp, #40	@ 0x28
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	613b      	str	r3, [r7, #16]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	60fb      	str	r3, [r7, #12]
 800f414:	2300      	movs	r3, #0
 800f416:	617b      	str	r3, [r7, #20]
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	1c5a      	adds	r2, r3, #1
 800f420:	61ba      	str	r2, [r7, #24]
 800f422:	693a      	ldr	r2, [r7, #16]
 800f424:	4413      	add	r3, r2
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f42a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f42c:	2b1f      	cmp	r3, #31
 800f42e:	d940      	bls.n	800f4b2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f430:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f432:	2b2f      	cmp	r3, #47	@ 0x2f
 800f434:	d006      	beq.n	800f444 <create_name+0x48>
 800f436:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f438:	2b5c      	cmp	r3, #92	@ 0x5c
 800f43a:	d110      	bne.n	800f45e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f43c:	e002      	b.n	800f444 <create_name+0x48>
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	3301      	adds	r3, #1
 800f442:	61bb      	str	r3, [r7, #24]
 800f444:	693a      	ldr	r2, [r7, #16]
 800f446:	69bb      	ldr	r3, [r7, #24]
 800f448:	4413      	add	r3, r2
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f44e:	d0f6      	beq.n	800f43e <create_name+0x42>
 800f450:	693a      	ldr	r2, [r7, #16]
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	4413      	add	r3, r2
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	2b5c      	cmp	r3, #92	@ 0x5c
 800f45a:	d0f0      	beq.n	800f43e <create_name+0x42>
			break;
 800f45c:	e02a      	b.n	800f4b4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	2bfe      	cmp	r3, #254	@ 0xfe
 800f462:	d901      	bls.n	800f468 <create_name+0x6c>
 800f464:	2306      	movs	r3, #6
 800f466:	e17d      	b.n	800f764 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f468:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f46e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f470:	2101      	movs	r1, #1
 800f472:	4618      	mov	r0, r3
 800f474:	f001 fb7a 	bl	8010b6c <ff_convert>
 800f478:	4603      	mov	r3, r0
 800f47a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f47c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d101      	bne.n	800f486 <create_name+0x8a>
 800f482:	2306      	movs	r3, #6
 800f484:	e16e      	b.n	800f764 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f486:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f488:	2b7f      	cmp	r3, #127	@ 0x7f
 800f48a:	d809      	bhi.n	800f4a0 <create_name+0xa4>
 800f48c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f48e:	4619      	mov	r1, r3
 800f490:	488d      	ldr	r0, [pc, #564]	@ (800f6c8 <create_name+0x2cc>)
 800f492:	f7fe fd64 	bl	800df5e <chk_chr>
 800f496:	4603      	mov	r3, r0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d001      	beq.n	800f4a0 <create_name+0xa4>
 800f49c:	2306      	movs	r3, #6
 800f49e:	e161      	b.n	800f764 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	1c5a      	adds	r2, r3, #1
 800f4a4:	617a      	str	r2, [r7, #20]
 800f4a6:	005b      	lsls	r3, r3, #1
 800f4a8:	68fa      	ldr	r2, [r7, #12]
 800f4aa:	4413      	add	r3, r2
 800f4ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f4ae:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f4b0:	e7b4      	b.n	800f41c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f4b2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f4b4:	693a      	ldr	r2, [r7, #16]
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	441a      	add	r2, r3
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f4be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f4c0:	2b1f      	cmp	r3, #31
 800f4c2:	d801      	bhi.n	800f4c8 <create_name+0xcc>
 800f4c4:	2304      	movs	r3, #4
 800f4c6:	e000      	b.n	800f4ca <create_name+0xce>
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f4ce:	e011      	b.n	800f4f4 <create_name+0xf8>
		w = lfn[di - 1];
 800f4d0:	697a      	ldr	r2, [r7, #20]
 800f4d2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f4d6:	4413      	add	r3, r2
 800f4d8:	005b      	lsls	r3, r3, #1
 800f4da:	68fa      	ldr	r2, [r7, #12]
 800f4dc:	4413      	add	r3, r2
 800f4de:	881b      	ldrh	r3, [r3, #0]
 800f4e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800f4e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f4e4:	2b20      	cmp	r3, #32
 800f4e6:	d002      	beq.n	800f4ee <create_name+0xf2>
 800f4e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f4ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4ec:	d106      	bne.n	800f4fc <create_name+0x100>
		di--;
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	3b01      	subs	r3, #1
 800f4f2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d1ea      	bne.n	800f4d0 <create_name+0xd4>
 800f4fa:	e000      	b.n	800f4fe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f4fc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	005b      	lsls	r3, r3, #1
 800f502:	68fa      	ldr	r2, [r7, #12]
 800f504:	4413      	add	r3, r2
 800f506:	2200      	movs	r2, #0
 800f508:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d101      	bne.n	800f514 <create_name+0x118>
 800f510:	2306      	movs	r3, #6
 800f512:	e127      	b.n	800f764 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	3324      	adds	r3, #36	@ 0x24
 800f518:	220b      	movs	r2, #11
 800f51a:	2120      	movs	r1, #32
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7fe fcdc 	bl	800deda <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f522:	2300      	movs	r3, #0
 800f524:	61bb      	str	r3, [r7, #24]
 800f526:	e002      	b.n	800f52e <create_name+0x132>
 800f528:	69bb      	ldr	r3, [r7, #24]
 800f52a:	3301      	adds	r3, #1
 800f52c:	61bb      	str	r3, [r7, #24]
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	005b      	lsls	r3, r3, #1
 800f532:	68fa      	ldr	r2, [r7, #12]
 800f534:	4413      	add	r3, r2
 800f536:	881b      	ldrh	r3, [r3, #0]
 800f538:	2b20      	cmp	r3, #32
 800f53a:	d0f5      	beq.n	800f528 <create_name+0x12c>
 800f53c:	69bb      	ldr	r3, [r7, #24]
 800f53e:	005b      	lsls	r3, r3, #1
 800f540:	68fa      	ldr	r2, [r7, #12]
 800f542:	4413      	add	r3, r2
 800f544:	881b      	ldrh	r3, [r3, #0]
 800f546:	2b2e      	cmp	r3, #46	@ 0x2e
 800f548:	d0ee      	beq.n	800f528 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f54a:	69bb      	ldr	r3, [r7, #24]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d009      	beq.n	800f564 <create_name+0x168>
 800f550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f554:	f043 0303 	orr.w	r3, r3, #3
 800f558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f55c:	e002      	b.n	800f564 <create_name+0x168>
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	3b01      	subs	r3, #1
 800f562:	617b      	str	r3, [r7, #20]
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d009      	beq.n	800f57e <create_name+0x182>
 800f56a:	697a      	ldr	r2, [r7, #20]
 800f56c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f570:	4413      	add	r3, r2
 800f572:	005b      	lsls	r3, r3, #1
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	4413      	add	r3, r2
 800f578:	881b      	ldrh	r3, [r3, #0]
 800f57a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f57c:	d1ef      	bne.n	800f55e <create_name+0x162>

	i = b = 0; ni = 8;
 800f57e:	2300      	movs	r3, #0
 800f580:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f584:	2300      	movs	r3, #0
 800f586:	623b      	str	r3, [r7, #32]
 800f588:	2308      	movs	r3, #8
 800f58a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	1c5a      	adds	r2, r3, #1
 800f590:	61ba      	str	r2, [r7, #24]
 800f592:	005b      	lsls	r3, r3, #1
 800f594:	68fa      	ldr	r2, [r7, #12]
 800f596:	4413      	add	r3, r2
 800f598:	881b      	ldrh	r3, [r3, #0]
 800f59a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f59c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	f000 8090 	beq.w	800f6c4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f5a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f5a6:	2b20      	cmp	r3, #32
 800f5a8:	d006      	beq.n	800f5b8 <create_name+0x1bc>
 800f5aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f5ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800f5ae:	d10a      	bne.n	800f5c6 <create_name+0x1ca>
 800f5b0:	69ba      	ldr	r2, [r7, #24]
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d006      	beq.n	800f5c6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f5b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f5bc:	f043 0303 	orr.w	r3, r3, #3
 800f5c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f5c4:	e07d      	b.n	800f6c2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f5c6:	6a3a      	ldr	r2, [r7, #32]
 800f5c8:	69fb      	ldr	r3, [r7, #28]
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d203      	bcs.n	800f5d6 <create_name+0x1da>
 800f5ce:	69ba      	ldr	r2, [r7, #24]
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d123      	bne.n	800f61e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f5d6:	69fb      	ldr	r3, [r7, #28]
 800f5d8:	2b0b      	cmp	r3, #11
 800f5da:	d106      	bne.n	800f5ea <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f5e0:	f043 0303 	orr.w	r3, r3, #3
 800f5e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f5e8:	e075      	b.n	800f6d6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f5ea:	69ba      	ldr	r2, [r7, #24]
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d005      	beq.n	800f5fe <create_name+0x202>
 800f5f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f5f6:	f043 0303 	orr.w	r3, r3, #3
 800f5fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800f5fe:	69ba      	ldr	r2, [r7, #24]
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	429a      	cmp	r2, r3
 800f604:	d866      	bhi.n	800f6d4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	61bb      	str	r3, [r7, #24]
 800f60a:	2308      	movs	r3, #8
 800f60c:	623b      	str	r3, [r7, #32]
 800f60e:	230b      	movs	r3, #11
 800f610:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f612:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f616:	009b      	lsls	r3, r3, #2
 800f618:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f61c:	e051      	b.n	800f6c2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f61e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f620:	2b7f      	cmp	r3, #127	@ 0x7f
 800f622:	d914      	bls.n	800f64e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f624:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f626:	2100      	movs	r1, #0
 800f628:	4618      	mov	r0, r3
 800f62a:	f001 fa9f 	bl	8010b6c <ff_convert>
 800f62e:	4603      	mov	r3, r0
 800f630:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f632:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f634:	2b00      	cmp	r3, #0
 800f636:	d004      	beq.n	800f642 <create_name+0x246>
 800f638:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f63a:	3b80      	subs	r3, #128	@ 0x80
 800f63c:	4a23      	ldr	r2, [pc, #140]	@ (800f6cc <create_name+0x2d0>)
 800f63e:	5cd3      	ldrb	r3, [r2, r3]
 800f640:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f642:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f646:	f043 0302 	orr.w	r3, r3, #2
 800f64a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f64e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f650:	2b00      	cmp	r3, #0
 800f652:	d007      	beq.n	800f664 <create_name+0x268>
 800f654:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f656:	4619      	mov	r1, r3
 800f658:	481d      	ldr	r0, [pc, #116]	@ (800f6d0 <create_name+0x2d4>)
 800f65a:	f7fe fc80 	bl	800df5e <chk_chr>
 800f65e:	4603      	mov	r3, r0
 800f660:	2b00      	cmp	r3, #0
 800f662:	d008      	beq.n	800f676 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f664:	235f      	movs	r3, #95	@ 0x5f
 800f666:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800f668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f66c:	f043 0303 	orr.w	r3, r3, #3
 800f670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f674:	e01b      	b.n	800f6ae <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f676:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f678:	2b40      	cmp	r3, #64	@ 0x40
 800f67a:	d909      	bls.n	800f690 <create_name+0x294>
 800f67c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f67e:	2b5a      	cmp	r3, #90	@ 0x5a
 800f680:	d806      	bhi.n	800f690 <create_name+0x294>
					b |= 2;
 800f682:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f686:	f043 0302 	orr.w	r3, r3, #2
 800f68a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f68e:	e00e      	b.n	800f6ae <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f690:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f692:	2b60      	cmp	r3, #96	@ 0x60
 800f694:	d90b      	bls.n	800f6ae <create_name+0x2b2>
 800f696:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f698:	2b7a      	cmp	r3, #122	@ 0x7a
 800f69a:	d808      	bhi.n	800f6ae <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f69c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f6a0:	f043 0301 	orr.w	r3, r3, #1
 800f6a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f6a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f6aa:	3b20      	subs	r3, #32
 800f6ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f6ae:	6a3b      	ldr	r3, [r7, #32]
 800f6b0:	1c5a      	adds	r2, r3, #1
 800f6b2:	623a      	str	r2, [r7, #32]
 800f6b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f6b6:	b2d1      	uxtb	r1, r2
 800f6b8:	687a      	ldr	r2, [r7, #4]
 800f6ba:	4413      	add	r3, r2
 800f6bc:	460a      	mov	r2, r1
 800f6be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f6c2:	e763      	b.n	800f58c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f6c4:	bf00      	nop
 800f6c6:	e006      	b.n	800f6d6 <create_name+0x2da>
 800f6c8:	080116d8 	.word	0x080116d8
 800f6cc:	080119a4 	.word	0x080119a4
 800f6d0:	080116e4 	.word	0x080116e4
			if (si > di) break;			/* No extension */
 800f6d4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f6dc:	2be5      	cmp	r3, #229	@ 0xe5
 800f6de:	d103      	bne.n	800f6e8 <create_name+0x2ec>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2205      	movs	r2, #5
 800f6e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	2b08      	cmp	r3, #8
 800f6ec:	d104      	bne.n	800f6f8 <create_name+0x2fc>
 800f6ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f6f2:	009b      	lsls	r3, r3, #2
 800f6f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f6f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f6fc:	f003 030c 	and.w	r3, r3, #12
 800f700:	2b0c      	cmp	r3, #12
 800f702:	d005      	beq.n	800f710 <create_name+0x314>
 800f704:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f708:	f003 0303 	and.w	r3, r3, #3
 800f70c:	2b03      	cmp	r3, #3
 800f70e:	d105      	bne.n	800f71c <create_name+0x320>
 800f710:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f714:	f043 0302 	orr.w	r3, r3, #2
 800f718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f71c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f720:	f003 0302 	and.w	r3, r3, #2
 800f724:	2b00      	cmp	r3, #0
 800f726:	d117      	bne.n	800f758 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f728:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f72c:	f003 0303 	and.w	r3, r3, #3
 800f730:	2b01      	cmp	r3, #1
 800f732:	d105      	bne.n	800f740 <create_name+0x344>
 800f734:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f738:	f043 0310 	orr.w	r3, r3, #16
 800f73c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f740:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f744:	f003 030c 	and.w	r3, r3, #12
 800f748:	2b04      	cmp	r3, #4
 800f74a:	d105      	bne.n	800f758 <create_name+0x35c>
 800f74c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f750:	f043 0308 	orr.w	r3, r3, #8
 800f754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800f75e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800f762:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f764:	4618      	mov	r0, r3
 800f766:	3728      	adds	r7, #40	@ 0x28
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}

0800f76c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b086      	sub	sp, #24
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f77a:	693b      	ldr	r3, [r7, #16]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f780:	e002      	b.n	800f788 <follow_path+0x1c>
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	3301      	adds	r3, #1
 800f786:	603b      	str	r3, [r7, #0]
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f78e:	d0f8      	beq.n	800f782 <follow_path+0x16>
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	2b5c      	cmp	r3, #92	@ 0x5c
 800f796:	d0f4      	beq.n	800f782 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	2200      	movs	r2, #0
 800f79c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	2b1f      	cmp	r3, #31
 800f7a4:	d80a      	bhi.n	800f7bc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2280      	movs	r2, #128	@ 0x80
 800f7aa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f7ae:	2100      	movs	r1, #0
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f7ff f91c 	bl	800e9ee <dir_sdi>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	75fb      	strb	r3, [r7, #23]
 800f7ba:	e043      	b.n	800f844 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f7bc:	463b      	mov	r3, r7
 800f7be:	4619      	mov	r1, r3
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f7ff fe1b 	bl	800f3fc <create_name>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f7ca:	7dfb      	ldrb	r3, [r7, #23]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d134      	bne.n	800f83a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f7ff fc5a 	bl	800f08a <dir_find>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f7e0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f7e2:	7dfb      	ldrb	r3, [r7, #23]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00a      	beq.n	800f7fe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f7e8:	7dfb      	ldrb	r3, [r7, #23]
 800f7ea:	2b04      	cmp	r3, #4
 800f7ec:	d127      	bne.n	800f83e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f7ee:	7afb      	ldrb	r3, [r7, #11]
 800f7f0:	f003 0304 	and.w	r3, r3, #4
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d122      	bne.n	800f83e <follow_path+0xd2>
 800f7f8:	2305      	movs	r3, #5
 800f7fa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f7fc:	e01f      	b.n	800f83e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f7fe:	7afb      	ldrb	r3, [r7, #11]
 800f800:	f003 0304 	and.w	r3, r3, #4
 800f804:	2b00      	cmp	r3, #0
 800f806:	d11c      	bne.n	800f842 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	799b      	ldrb	r3, [r3, #6]
 800f80c:	f003 0310 	and.w	r3, r3, #16
 800f810:	2b00      	cmp	r3, #0
 800f812:	d102      	bne.n	800f81a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f814:	2305      	movs	r3, #5
 800f816:	75fb      	strb	r3, [r7, #23]
 800f818:	e014      	b.n	800f844 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	695b      	ldr	r3, [r3, #20]
 800f824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f828:	4413      	add	r3, r2
 800f82a:	4619      	mov	r1, r3
 800f82c:	68f8      	ldr	r0, [r7, #12]
 800f82e:	f7ff fa65 	bl	800ecfc <ld_clust>
 800f832:	4602      	mov	r2, r0
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f838:	e7c0      	b.n	800f7bc <follow_path+0x50>
			if (res != FR_OK) break;
 800f83a:	bf00      	nop
 800f83c:	e002      	b.n	800f844 <follow_path+0xd8>
				break;
 800f83e:	bf00      	nop
 800f840:	e000      	b.n	800f844 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f842:	bf00      	nop
			}
		}
	}

	return res;
 800f844:	7dfb      	ldrb	r3, [r7, #23]
}
 800f846:	4618      	mov	r0, r3
 800f848:	3718      	adds	r7, #24
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}

0800f84e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f84e:	b480      	push	{r7}
 800f850:	b087      	sub	sp, #28
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f856:	f04f 33ff 	mov.w	r3, #4294967295
 800f85a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d031      	beq.n	800f8c8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	617b      	str	r3, [r7, #20]
 800f86a:	e002      	b.n	800f872 <get_ldnumber+0x24>
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	3301      	adds	r3, #1
 800f870:	617b      	str	r3, [r7, #20]
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	2b1f      	cmp	r3, #31
 800f878:	d903      	bls.n	800f882 <get_ldnumber+0x34>
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	2b3a      	cmp	r3, #58	@ 0x3a
 800f880:	d1f4      	bne.n	800f86c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	2b3a      	cmp	r3, #58	@ 0x3a
 800f888:	d11c      	bne.n	800f8c4 <get_ldnumber+0x76>
			tp = *path;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	1c5a      	adds	r2, r3, #1
 800f894:	60fa      	str	r2, [r7, #12]
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	3b30      	subs	r3, #48	@ 0x30
 800f89a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	2b09      	cmp	r3, #9
 800f8a0:	d80e      	bhi.n	800f8c0 <get_ldnumber+0x72>
 800f8a2:	68fa      	ldr	r2, [r7, #12]
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d10a      	bne.n	800f8c0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d107      	bne.n	800f8c0 <get_ldnumber+0x72>
					vol = (int)i;
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	3301      	adds	r3, #1
 800f8b8:	617b      	str	r3, [r7, #20]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	697a      	ldr	r2, [r7, #20]
 800f8be:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	e002      	b.n	800f8ca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f8c8:	693b      	ldr	r3, [r7, #16]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	371c      	adds	r7, #28
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d4:	4770      	bx	lr
	...

0800f8d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	70da      	strb	r2, [r3, #3]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ee:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f8f0:	6839      	ldr	r1, [r7, #0]
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f7fe fcfe 	bl	800e2f4 <move_window>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d001      	beq.n	800f902 <check_fs+0x2a>
 800f8fe:	2304      	movs	r3, #4
 800f900:	e038      	b.n	800f974 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	3334      	adds	r3, #52	@ 0x34
 800f906:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fe fa42 	bl	800dd94 <ld_word>
 800f910:	4603      	mov	r3, r0
 800f912:	461a      	mov	r2, r3
 800f914:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f918:	429a      	cmp	r2, r3
 800f91a:	d001      	beq.n	800f920 <check_fs+0x48>
 800f91c:	2303      	movs	r3, #3
 800f91e:	e029      	b.n	800f974 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f926:	2be9      	cmp	r3, #233	@ 0xe9
 800f928:	d009      	beq.n	800f93e <check_fs+0x66>
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f930:	2beb      	cmp	r3, #235	@ 0xeb
 800f932:	d11e      	bne.n	800f972 <check_fs+0x9a>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800f93a:	2b90      	cmp	r3, #144	@ 0x90
 800f93c:	d119      	bne.n	800f972 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	3334      	adds	r3, #52	@ 0x34
 800f942:	3336      	adds	r3, #54	@ 0x36
 800f944:	4618      	mov	r0, r3
 800f946:	f7fe fa3d 	bl	800ddc4 <ld_dword>
 800f94a:	4603      	mov	r3, r0
 800f94c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f950:	4a0a      	ldr	r2, [pc, #40]	@ (800f97c <check_fs+0xa4>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d101      	bne.n	800f95a <check_fs+0x82>
 800f956:	2300      	movs	r3, #0
 800f958:	e00c      	b.n	800f974 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	3334      	adds	r3, #52	@ 0x34
 800f95e:	3352      	adds	r3, #82	@ 0x52
 800f960:	4618      	mov	r0, r3
 800f962:	f7fe fa2f 	bl	800ddc4 <ld_dword>
 800f966:	4603      	mov	r3, r0
 800f968:	4a05      	ldr	r2, [pc, #20]	@ (800f980 <check_fs+0xa8>)
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d101      	bne.n	800f972 <check_fs+0x9a>
 800f96e:	2300      	movs	r3, #0
 800f970:	e000      	b.n	800f974 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f972:	2302      	movs	r3, #2
}
 800f974:	4618      	mov	r0, r3
 800f976:	3708      	adds	r7, #8
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	00544146 	.word	0x00544146
 800f980:	33544146 	.word	0x33544146

0800f984 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b096      	sub	sp, #88	@ 0x58
 800f988:	af00      	add	r7, sp, #0
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	60b9      	str	r1, [r7, #8]
 800f98e:	4613      	mov	r3, r2
 800f990:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	2200      	movs	r2, #0
 800f996:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f7ff ff58 	bl	800f84e <get_ldnumber>
 800f99e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f9a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	da01      	bge.n	800f9aa <find_volume+0x26>
 800f9a6:	230b      	movs	r3, #11
 800f9a8:	e22d      	b.n	800fe06 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f9aa:	4aa1      	ldr	r2, [pc, #644]	@ (800fc30 <find_volume+0x2ac>)
 800f9ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d101      	bne.n	800f9be <find_volume+0x3a>
 800f9ba:	230c      	movs	r3, #12
 800f9bc:	e223      	b.n	800fe06 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f9c4:	79fb      	ldrb	r3, [r7, #7]
 800f9c6:	f023 0301 	bic.w	r3, r3, #1
 800f9ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d01a      	beq.n	800fa0a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9d6:	785b      	ldrb	r3, [r3, #1]
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7fe f933 	bl	800dc44 <disk_status>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f9e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f9e8:	f003 0301 	and.w	r3, r3, #1
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d10c      	bne.n	800fa0a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f9f0:	79fb      	ldrb	r3, [r7, #7]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d007      	beq.n	800fa06 <find_volume+0x82>
 800f9f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f9fa:	f003 0304 	and.w	r3, r3, #4
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d001      	beq.n	800fa06 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fa02:	230a      	movs	r3, #10
 800fa04:	e1ff      	b.n	800fe06 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800fa06:	2300      	movs	r3, #0
 800fa08:	e1fd      	b.n	800fe06 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fa0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fa10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa12:	b2da      	uxtb	r2, r3
 800fa14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa16:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fa18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa1a:	785b      	ldrb	r3, [r3, #1]
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7fe f92b 	bl	800dc78 <disk_initialize>
 800fa22:	4603      	mov	r3, r0
 800fa24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fa28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fa2c:	f003 0301 	and.w	r3, r3, #1
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d001      	beq.n	800fa38 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fa34:	2303      	movs	r3, #3
 800fa36:	e1e6      	b.n	800fe06 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fa38:	79fb      	ldrb	r3, [r7, #7]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d007      	beq.n	800fa4e <find_volume+0xca>
 800fa3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fa42:	f003 0304 	and.w	r3, r3, #4
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d001      	beq.n	800fa4e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fa4a:	230a      	movs	r3, #10
 800fa4c:	e1db      	b.n	800fe06 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fa52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fa54:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fa56:	f7ff ff3f 	bl	800f8d8 <check_fs>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fa60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fa64:	2b02      	cmp	r3, #2
 800fa66:	d149      	bne.n	800fafc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fa68:	2300      	movs	r3, #0
 800fa6a:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa6c:	e01e      	b.n	800faac <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa70:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800fa74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa76:	011b      	lsls	r3, r3, #4
 800fa78:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800fa7c:	4413      	add	r3, r2
 800fa7e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa82:	3304      	adds	r3, #4
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d006      	beq.n	800fa98 <find_volume+0x114>
 800fa8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa8c:	3308      	adds	r3, #8
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7fe f998 	bl	800ddc4 <ld_dword>
 800fa94:	4602      	mov	r2, r0
 800fa96:	e000      	b.n	800fa9a <find_volume+0x116>
 800fa98:	2200      	movs	r2, #0
 800fa9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	3358      	adds	r3, #88	@ 0x58
 800faa0:	443b      	add	r3, r7
 800faa2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800faa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800faa8:	3301      	adds	r3, #1
 800faaa:	643b      	str	r3, [r7, #64]	@ 0x40
 800faac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800faae:	2b03      	cmp	r3, #3
 800fab0:	d9dd      	bls.n	800fa6e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fab2:	2300      	movs	r3, #0
 800fab4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800fab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d002      	beq.n	800fac2 <find_volume+0x13e>
 800fabc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fabe:	3b01      	subs	r3, #1
 800fac0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	3358      	adds	r3, #88	@ 0x58
 800fac8:	443b      	add	r3, r7
 800faca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800face:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fad0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d005      	beq.n	800fae2 <find_volume+0x15e>
 800fad6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fad8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fada:	f7ff fefd 	bl	800f8d8 <check_fs>
 800fade:	4603      	mov	r3, r0
 800fae0:	e000      	b.n	800fae4 <find_volume+0x160>
 800fae2:	2303      	movs	r3, #3
 800fae4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fae8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800faec:	2b01      	cmp	r3, #1
 800faee:	d905      	bls.n	800fafc <find_volume+0x178>
 800faf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800faf2:	3301      	adds	r3, #1
 800faf4:	643b      	str	r3, [r7, #64]	@ 0x40
 800faf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800faf8:	2b03      	cmp	r3, #3
 800fafa:	d9e2      	bls.n	800fac2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fafc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fb00:	2b04      	cmp	r3, #4
 800fb02:	d101      	bne.n	800fb08 <find_volume+0x184>
 800fb04:	2301      	movs	r3, #1
 800fb06:	e17e      	b.n	800fe06 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fb08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fb0c:	2b01      	cmp	r3, #1
 800fb0e:	d901      	bls.n	800fb14 <find_volume+0x190>
 800fb10:	230d      	movs	r3, #13
 800fb12:	e178      	b.n	800fe06 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb16:	3334      	adds	r3, #52	@ 0x34
 800fb18:	330b      	adds	r3, #11
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fe f93a 	bl	800dd94 <ld_word>
 800fb20:	4603      	mov	r3, r0
 800fb22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb26:	d001      	beq.n	800fb2c <find_volume+0x1a8>
 800fb28:	230d      	movs	r3, #13
 800fb2a:	e16c      	b.n	800fe06 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb2e:	3334      	adds	r3, #52	@ 0x34
 800fb30:	3316      	adds	r3, #22
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fe f92e 	bl	800dd94 <ld_word>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fb3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d106      	bne.n	800fb50 <find_volume+0x1cc>
 800fb42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb44:	3334      	adds	r3, #52	@ 0x34
 800fb46:	3324      	adds	r3, #36	@ 0x24
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7fe f93b 	bl	800ddc4 <ld_dword>
 800fb4e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800fb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fb54:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fb56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb58:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800fb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb5e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fb60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb62:	789b      	ldrb	r3, [r3, #2]
 800fb64:	2b01      	cmp	r3, #1
 800fb66:	d005      	beq.n	800fb74 <find_volume+0x1f0>
 800fb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb6a:	789b      	ldrb	r3, [r3, #2]
 800fb6c:	2b02      	cmp	r3, #2
 800fb6e:	d001      	beq.n	800fb74 <find_volume+0x1f0>
 800fb70:	230d      	movs	r3, #13
 800fb72:	e148      	b.n	800fe06 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb76:	789b      	ldrb	r3, [r3, #2]
 800fb78:	461a      	mov	r2, r3
 800fb7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb7c:	fb02 f303 	mul.w	r3, r2, r3
 800fb80:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fb88:	461a      	mov	r2, r3
 800fb8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb8c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fb8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb90:	895b      	ldrh	r3, [r3, #10]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d008      	beq.n	800fba8 <find_volume+0x224>
 800fb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb98:	895b      	ldrh	r3, [r3, #10]
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb9e:	895b      	ldrh	r3, [r3, #10]
 800fba0:	3b01      	subs	r3, #1
 800fba2:	4013      	ands	r3, r2
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d001      	beq.n	800fbac <find_volume+0x228>
 800fba8:	230d      	movs	r3, #13
 800fbaa:	e12c      	b.n	800fe06 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbae:	3334      	adds	r3, #52	@ 0x34
 800fbb0:	3311      	adds	r3, #17
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fe f8ee 	bl	800dd94 <ld_word>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	461a      	mov	r2, r3
 800fbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbbe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbc2:	891b      	ldrh	r3, [r3, #8]
 800fbc4:	f003 030f 	and.w	r3, r3, #15
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d001      	beq.n	800fbd2 <find_volume+0x24e>
 800fbce:	230d      	movs	r3, #13
 800fbd0:	e119      	b.n	800fe06 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fbd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbd4:	3334      	adds	r3, #52	@ 0x34
 800fbd6:	3313      	adds	r3, #19
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fe f8db 	bl	800dd94 <ld_word>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fbe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d106      	bne.n	800fbf6 <find_volume+0x272>
 800fbe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbea:	3334      	adds	r3, #52	@ 0x34
 800fbec:	3320      	adds	r3, #32
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7fe f8e8 	bl	800ddc4 <ld_dword>
 800fbf4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbf8:	3334      	adds	r3, #52	@ 0x34
 800fbfa:	330e      	adds	r3, #14
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7fe f8c9 	bl	800dd94 <ld_word>
 800fc02:	4603      	mov	r3, r0
 800fc04:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fc06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d101      	bne.n	800fc10 <find_volume+0x28c>
 800fc0c:	230d      	movs	r3, #13
 800fc0e:	e0fa      	b.n	800fe06 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fc10:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fc12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc14:	4413      	add	r3, r2
 800fc16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc18:	8912      	ldrh	r2, [r2, #8]
 800fc1a:	0912      	lsrs	r2, r2, #4
 800fc1c:	b292      	uxth	r2, r2
 800fc1e:	4413      	add	r3, r2
 800fc20:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fc22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d204      	bcs.n	800fc34 <find_volume+0x2b0>
 800fc2a:	230d      	movs	r3, #13
 800fc2c:	e0eb      	b.n	800fe06 <find_volume+0x482>
 800fc2e:	bf00      	nop
 800fc30:	2001894c 	.word	0x2001894c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fc34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc38:	1ad3      	subs	r3, r2, r3
 800fc3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc3c:	8952      	ldrh	r2, [r2, #10]
 800fc3e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc42:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fc44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d101      	bne.n	800fc4e <find_volume+0x2ca>
 800fc4a:	230d      	movs	r3, #13
 800fc4c:	e0db      	b.n	800fe06 <find_volume+0x482>
		fmt = FS_FAT32;
 800fc4e:	2303      	movs	r3, #3
 800fc50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc56:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d802      	bhi.n	800fc64 <find_volume+0x2e0>
 800fc5e:	2302      	movs	r3, #2
 800fc60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc66:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800fc6a:	4293      	cmp	r3, r2
 800fc6c:	d802      	bhi.n	800fc74 <find_volume+0x2f0>
 800fc6e:	2301      	movs	r3, #1
 800fc70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc76:	1c9a      	adds	r2, r3, #2
 800fc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc7a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800fc7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fc80:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fc82:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fc84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc86:	441a      	add	r2, r3
 800fc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc8a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800fc8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fc8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc90:	441a      	add	r2, r3
 800fc92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc94:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800fc96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fc9a:	2b03      	cmp	r3, #3
 800fc9c:	d11e      	bne.n	800fcdc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fca0:	3334      	adds	r3, #52	@ 0x34
 800fca2:	332a      	adds	r3, #42	@ 0x2a
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7fe f875 	bl	800dd94 <ld_word>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d001      	beq.n	800fcb4 <find_volume+0x330>
 800fcb0:	230d      	movs	r3, #13
 800fcb2:	e0a8      	b.n	800fe06 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcb6:	891b      	ldrh	r3, [r3, #8]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d001      	beq.n	800fcc0 <find_volume+0x33c>
 800fcbc:	230d      	movs	r3, #13
 800fcbe:	e0a2      	b.n	800fe06 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcc2:	3334      	adds	r3, #52	@ 0x34
 800fcc4:	332c      	adds	r3, #44	@ 0x2c
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fe f87c 	bl	800ddc4 <ld_dword>
 800fccc:	4602      	mov	r2, r0
 800fcce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcd0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcd4:	699b      	ldr	r3, [r3, #24]
 800fcd6:	009b      	lsls	r3, r3, #2
 800fcd8:	647b      	str	r3, [r7, #68]	@ 0x44
 800fcda:	e01f      	b.n	800fd1c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcde:	891b      	ldrh	r3, [r3, #8]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d101      	bne.n	800fce8 <find_volume+0x364>
 800fce4:	230d      	movs	r3, #13
 800fce6:	e08e      	b.n	800fe06 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fcec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcee:	441a      	add	r2, r3
 800fcf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcf2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fcf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fcf8:	2b02      	cmp	r3, #2
 800fcfa:	d103      	bne.n	800fd04 <find_volume+0x380>
 800fcfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcfe:	699b      	ldr	r3, [r3, #24]
 800fd00:	005b      	lsls	r3, r3, #1
 800fd02:	e00a      	b.n	800fd1a <find_volume+0x396>
 800fd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd06:	699a      	ldr	r2, [r3, #24]
 800fd08:	4613      	mov	r3, r2
 800fd0a:	005b      	lsls	r3, r3, #1
 800fd0c:	4413      	add	r3, r2
 800fd0e:	085a      	lsrs	r2, r3, #1
 800fd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd12:	699b      	ldr	r3, [r3, #24]
 800fd14:	f003 0301 	and.w	r3, r3, #1
 800fd18:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fd1a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd1e:	69da      	ldr	r2, [r3, #28]
 800fd20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd22:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800fd26:	0a5b      	lsrs	r3, r3, #9
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d201      	bcs.n	800fd30 <find_volume+0x3ac>
 800fd2c:	230d      	movs	r3, #13
 800fd2e:	e06a      	b.n	800fe06 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd32:	f04f 32ff 	mov.w	r2, #4294967295
 800fd36:	615a      	str	r2, [r3, #20]
 800fd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd3a:	695a      	ldr	r2, [r3, #20]
 800fd3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd3e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800fd40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd42:	2280      	movs	r2, #128	@ 0x80
 800fd44:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fd46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fd4a:	2b03      	cmp	r3, #3
 800fd4c:	d149      	bne.n	800fde2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd50:	3334      	adds	r3, #52	@ 0x34
 800fd52:	3330      	adds	r3, #48	@ 0x30
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fe f81d 	bl	800dd94 <ld_word>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d140      	bne.n	800fde2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fd60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd62:	3301      	adds	r3, #1
 800fd64:	4619      	mov	r1, r3
 800fd66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fd68:	f7fe fac4 	bl	800e2f4 <move_window>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d137      	bne.n	800fde2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd74:	2200      	movs	r2, #0
 800fd76:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd7a:	3334      	adds	r3, #52	@ 0x34
 800fd7c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7fe f807 	bl	800dd94 <ld_word>
 800fd86:	4603      	mov	r3, r0
 800fd88:	461a      	mov	r2, r3
 800fd8a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d127      	bne.n	800fde2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fd92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd94:	3334      	adds	r3, #52	@ 0x34
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7fe f814 	bl	800ddc4 <ld_dword>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	4a1c      	ldr	r2, [pc, #112]	@ (800fe10 <find_volume+0x48c>)
 800fda0:	4293      	cmp	r3, r2
 800fda2:	d11e      	bne.n	800fde2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fda6:	3334      	adds	r3, #52	@ 0x34
 800fda8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7fe f809 	bl	800ddc4 <ld_dword>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	4a17      	ldr	r2, [pc, #92]	@ (800fe14 <find_volume+0x490>)
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d113      	bne.n	800fde2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fdba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdbc:	3334      	adds	r3, #52	@ 0x34
 800fdbe:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7fd fffe 	bl	800ddc4 <ld_dword>
 800fdc8:	4602      	mov	r2, r0
 800fdca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdcc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fdce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdd0:	3334      	adds	r3, #52	@ 0x34
 800fdd2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7fd fff4 	bl	800ddc4 <ld_dword>
 800fddc:	4602      	mov	r2, r0
 800fdde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fde0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fde2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fde4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800fde8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fdea:	4b0b      	ldr	r3, [pc, #44]	@ (800fe18 <find_volume+0x494>)
 800fdec:	881b      	ldrh	r3, [r3, #0]
 800fdee:	3301      	adds	r3, #1
 800fdf0:	b29a      	uxth	r2, r3
 800fdf2:	4b09      	ldr	r3, [pc, #36]	@ (800fe18 <find_volume+0x494>)
 800fdf4:	801a      	strh	r2, [r3, #0]
 800fdf6:	4b08      	ldr	r3, [pc, #32]	@ (800fe18 <find_volume+0x494>)
 800fdf8:	881a      	ldrh	r2, [r3, #0]
 800fdfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdfc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fdfe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fe00:	f7fe fa10 	bl	800e224 <clear_lock>
#endif
	return FR_OK;
 800fe04:	2300      	movs	r3, #0
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3758      	adds	r7, #88	@ 0x58
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	41615252 	.word	0x41615252
 800fe14:	61417272 	.word	0x61417272
 800fe18:	20018950 	.word	0x20018950

0800fe1c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b084      	sub	sp, #16
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fe26:	2309      	movs	r3, #9
 800fe28:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d01c      	beq.n	800fe6a <validate+0x4e>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d018      	beq.n	800fe6a <validate+0x4e>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	781b      	ldrb	r3, [r3, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d013      	beq.n	800fe6a <validate+0x4e>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	889a      	ldrh	r2, [r3, #4]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	88db      	ldrh	r3, [r3, #6]
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d10c      	bne.n	800fe6a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	785b      	ldrb	r3, [r3, #1]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7fd fef4 	bl	800dc44 <disk_status>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	f003 0301 	and.w	r3, r3, #1
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d101      	bne.n	800fe6a <validate+0x4e>
			res = FR_OK;
 800fe66:	2300      	movs	r3, #0
 800fe68:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fe6a:	7bfb      	ldrb	r3, [r7, #15]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d102      	bne.n	800fe76 <validate+0x5a>
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	e000      	b.n	800fe78 <validate+0x5c>
 800fe76:	2300      	movs	r3, #0
 800fe78:	683a      	ldr	r2, [r7, #0]
 800fe7a:	6013      	str	r3, [r2, #0]
	return res;
 800fe7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3710      	adds	r7, #16
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
	...

0800fe88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b088      	sub	sp, #32
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	4613      	mov	r3, r2
 800fe94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fe96:	68bb      	ldr	r3, [r7, #8]
 800fe98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fe9a:	f107 0310 	add.w	r3, r7, #16
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7ff fcd5 	bl	800f84e <get_ldnumber>
 800fea4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fea6:	69fb      	ldr	r3, [r7, #28]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	da01      	bge.n	800feb0 <f_mount+0x28>
 800feac:	230b      	movs	r3, #11
 800feae:	e02b      	b.n	800ff08 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800feb0:	4a17      	ldr	r2, [pc, #92]	@ (800ff10 <f_mount+0x88>)
 800feb2:	69fb      	ldr	r3, [r7, #28]
 800feb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feb8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800feba:	69bb      	ldr	r3, [r7, #24]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d005      	beq.n	800fecc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fec0:	69b8      	ldr	r0, [r7, #24]
 800fec2:	f7fe f9af 	bl	800e224 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fec6:	69bb      	ldr	r3, [r7, #24]
 800fec8:	2200      	movs	r2, #0
 800feca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d002      	beq.n	800fed8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	2200      	movs	r2, #0
 800fed6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fed8:	68fa      	ldr	r2, [r7, #12]
 800feda:	490d      	ldr	r1, [pc, #52]	@ (800ff10 <f_mount+0x88>)
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d002      	beq.n	800feee <f_mount+0x66>
 800fee8:	79fb      	ldrb	r3, [r7, #7]
 800feea:	2b01      	cmp	r3, #1
 800feec:	d001      	beq.n	800fef2 <f_mount+0x6a>
 800feee:	2300      	movs	r3, #0
 800fef0:	e00a      	b.n	800ff08 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fef2:	f107 010c 	add.w	r1, r7, #12
 800fef6:	f107 0308 	add.w	r3, r7, #8
 800fefa:	2200      	movs	r2, #0
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7ff fd41 	bl	800f984 <find_volume>
 800ff02:	4603      	mov	r3, r0
 800ff04:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ff06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3720      	adds	r7, #32
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}
 800ff10:	2001894c 	.word	0x2001894c

0800ff14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b09a      	sub	sp, #104	@ 0x68
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	60f8      	str	r0, [r7, #12]
 800ff1c:	60b9      	str	r1, [r7, #8]
 800ff1e:	4613      	mov	r3, r2
 800ff20:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d101      	bne.n	800ff2c <f_open+0x18>
 800ff28:	2309      	movs	r3, #9
 800ff2a:	e1b9      	b.n	80102a0 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ff2c:	79fb      	ldrb	r3, [r7, #7]
 800ff2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ff32:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ff34:	79fa      	ldrb	r2, [r7, #7]
 800ff36:	f107 0110 	add.w	r1, r7, #16
 800ff3a:	f107 0308 	add.w	r3, r7, #8
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7ff fd20 	bl	800f984 <find_volume>
 800ff44:	4603      	mov	r3, r0
 800ff46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800ff4a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	f040 819d 	bne.w	801028e <f_open+0x37a>
		dj.obj.fs = fs;
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800ff58:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800ff5c:	f000 fdef 	bl	8010b3e <ff_memalloc>
 800ff60:	65b8      	str	r0, [r7, #88]	@ 0x58
 800ff62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d101      	bne.n	800ff6c <f_open+0x58>
 800ff68:	2311      	movs	r3, #17
 800ff6a:	e199      	b.n	80102a0 <f_open+0x38c>
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ff70:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800ff72:	68ba      	ldr	r2, [r7, #8]
 800ff74:	f107 0314 	add.w	r3, r7, #20
 800ff78:	4611      	mov	r1, r2
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7ff fbf6 	bl	800f76c <follow_path>
 800ff80:	4603      	mov	r3, r0
 800ff82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ff86:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d118      	bne.n	800ffc0 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ff8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ff92:	b25b      	sxtb	r3, r3
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	da03      	bge.n	800ffa0 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800ff98:	2306      	movs	r3, #6
 800ff9a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ff9e:	e00f      	b.n	800ffc0 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ffa0:	79fb      	ldrb	r3, [r7, #7]
 800ffa2:	2b01      	cmp	r3, #1
 800ffa4:	bf8c      	ite	hi
 800ffa6:	2301      	movhi	r3, #1
 800ffa8:	2300      	movls	r3, #0
 800ffaa:	b2db      	uxtb	r3, r3
 800ffac:	461a      	mov	r2, r3
 800ffae:	f107 0314 	add.w	r3, r7, #20
 800ffb2:	4611      	mov	r1, r2
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7fd ffed 	bl	800df94 <chk_lock>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ffc0:	79fb      	ldrb	r3, [r7, #7]
 800ffc2:	f003 031c 	and.w	r3, r3, #28
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d07f      	beq.n	80100ca <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 800ffca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d017      	beq.n	8010002 <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ffd2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ffd6:	2b04      	cmp	r3, #4
 800ffd8:	d10e      	bne.n	800fff8 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ffda:	f7fe f837 	bl	800e04c <enq_lock>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d006      	beq.n	800fff2 <f_open+0xde>
 800ffe4:	f107 0314 	add.w	r3, r7, #20
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7ff f90f 	bl	800f20c <dir_register>
 800ffee:	4603      	mov	r3, r0
 800fff0:	e000      	b.n	800fff4 <f_open+0xe0>
 800fff2:	2312      	movs	r3, #18
 800fff4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fff8:	79fb      	ldrb	r3, [r7, #7]
 800fffa:	f043 0308 	orr.w	r3, r3, #8
 800fffe:	71fb      	strb	r3, [r7, #7]
 8010000:	e010      	b.n	8010024 <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010002:	7ebb      	ldrb	r3, [r7, #26]
 8010004:	f003 0311 	and.w	r3, r3, #17
 8010008:	2b00      	cmp	r3, #0
 801000a:	d003      	beq.n	8010014 <f_open+0x100>
					res = FR_DENIED;
 801000c:	2307      	movs	r3, #7
 801000e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010012:	e007      	b.n	8010024 <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010014:	79fb      	ldrb	r3, [r7, #7]
 8010016:	f003 0304 	and.w	r3, r3, #4
 801001a:	2b00      	cmp	r3, #0
 801001c:	d002      	beq.n	8010024 <f_open+0x110>
 801001e:	2308      	movs	r3, #8
 8010020:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010024:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010028:	2b00      	cmp	r3, #0
 801002a:	d168      	bne.n	80100fe <f_open+0x1ea>
 801002c:	79fb      	ldrb	r3, [r7, #7]
 801002e:	f003 0308 	and.w	r3, r3, #8
 8010032:	2b00      	cmp	r3, #0
 8010034:	d063      	beq.n	80100fe <f_open+0x1ea>
				dw = GET_FATTIME();
 8010036:	f7fd fea5 	bl	800dd84 <get_fattime>
 801003a:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801003c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801003e:	330e      	adds	r3, #14
 8010040:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010042:	4618      	mov	r0, r3
 8010044:	f7fd fefc 	bl	800de40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801004a:	3316      	adds	r3, #22
 801004c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801004e:	4618      	mov	r0, r3
 8010050:	f7fd fef6 	bl	800de40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010056:	330b      	adds	r3, #11
 8010058:	2220      	movs	r2, #32
 801005a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010060:	4611      	mov	r1, r2
 8010062:	4618      	mov	r0, r3
 8010064:	f7fe fe4a 	bl	800ecfc <ld_clust>
 8010068:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801006e:	2200      	movs	r2, #0
 8010070:	4618      	mov	r0, r3
 8010072:	f7fe fe62 	bl	800ed3a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010078:	331c      	adds	r3, #28
 801007a:	2100      	movs	r1, #0
 801007c:	4618      	mov	r0, r3
 801007e:	f7fd fedf 	bl	800de40 <st_dword>
					fs->wflag = 1;
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	2201      	movs	r2, #1
 8010086:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801008a:	2b00      	cmp	r3, #0
 801008c:	d037      	beq.n	80100fe <f_open+0x1ea>
						dw = fs->winsect;
 801008e:	693b      	ldr	r3, [r7, #16]
 8010090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010092:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8010094:	f107 0314 	add.w	r3, r7, #20
 8010098:	2200      	movs	r2, #0
 801009a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801009c:	4618      	mov	r0, r3
 801009e:	f7fe fb75 	bl	800e78c <remove_chain>
 80100a2:	4603      	mov	r3, r0
 80100a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80100a8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d126      	bne.n	80100fe <f_open+0x1ea>
							res = move_window(fs, dw);
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7fe f91d 	bl	800e2f4 <move_window>
 80100ba:	4603      	mov	r3, r0
 80100bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80100c4:	3a01      	subs	r2, #1
 80100c6:	611a      	str	r2, [r3, #16]
 80100c8:	e019      	b.n	80100fe <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80100ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d115      	bne.n	80100fe <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80100d2:	7ebb      	ldrb	r3, [r7, #26]
 80100d4:	f003 0310 	and.w	r3, r3, #16
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d003      	beq.n	80100e4 <f_open+0x1d0>
					res = FR_NO_FILE;
 80100dc:	2304      	movs	r3, #4
 80100de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80100e2:	e00c      	b.n	80100fe <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80100e4:	79fb      	ldrb	r3, [r7, #7]
 80100e6:	f003 0302 	and.w	r3, r3, #2
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d007      	beq.n	80100fe <f_open+0x1ea>
 80100ee:	7ebb      	ldrb	r3, [r7, #26]
 80100f0:	f003 0301 	and.w	r3, r3, #1
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d002      	beq.n	80100fe <f_open+0x1ea>
						res = FR_DENIED;
 80100f8:	2307      	movs	r3, #7
 80100fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80100fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010102:	2b00      	cmp	r3, #0
 8010104:	d126      	bne.n	8010154 <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010106:	79fb      	ldrb	r3, [r7, #7]
 8010108:	f003 0308 	and.w	r3, r3, #8
 801010c:	2b00      	cmp	r3, #0
 801010e:	d003      	beq.n	8010118 <f_open+0x204>
				mode |= FA_MODIFIED;
 8010110:	79fb      	ldrb	r3, [r7, #7]
 8010112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010116:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8010120:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010126:	79fb      	ldrb	r3, [r7, #7]
 8010128:	2b01      	cmp	r3, #1
 801012a:	bf8c      	ite	hi
 801012c:	2301      	movhi	r3, #1
 801012e:	2300      	movls	r3, #0
 8010130:	b2db      	uxtb	r3, r3
 8010132:	461a      	mov	r2, r3
 8010134:	f107 0314 	add.w	r3, r7, #20
 8010138:	4611      	mov	r1, r2
 801013a:	4618      	mov	r0, r3
 801013c:	f7fd ffa8 	bl	800e090 <inc_lock>
 8010140:	4602      	mov	r2, r0
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	691b      	ldr	r3, [r3, #16]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d102      	bne.n	8010154 <f_open+0x240>
 801014e:	2302      	movs	r3, #2
 8010150:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010154:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010158:	2b00      	cmp	r3, #0
 801015a:	f040 8095 	bne.w	8010288 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010162:	4611      	mov	r1, r2
 8010164:	4618      	mov	r0, r3
 8010166:	f7fe fdc9 	bl	800ecfc <ld_clust>
 801016a:	4602      	mov	r2, r0
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010172:	331c      	adds	r3, #28
 8010174:	4618      	mov	r0, r3
 8010176:	f7fd fe25 	bl	800ddc4 <ld_dword>
 801017a:	4602      	mov	r2, r0
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2200      	movs	r2, #0
 8010184:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010186:	693a      	ldr	r2, [r7, #16]
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	88da      	ldrh	r2, [r3, #6]
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	79fa      	ldrb	r2, [r7, #7]
 8010198:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	2200      	movs	r2, #0
 801019e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2200      	movs	r2, #0
 80101a4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	2200      	movs	r2, #0
 80101aa:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	3330      	adds	r3, #48	@ 0x30
 80101b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80101b4:	2100      	movs	r1, #0
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fd fe8f 	bl	800deda <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80101bc:	79fb      	ldrb	r3, [r7, #7]
 80101be:	f003 0320 	and.w	r3, r3, #32
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d060      	beq.n	8010288 <f_open+0x374>
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	68db      	ldr	r3, [r3, #12]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d05c      	beq.n	8010288 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	68da      	ldr	r2, [r3, #12]
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80101d6:	693b      	ldr	r3, [r7, #16]
 80101d8:	895b      	ldrh	r3, [r3, #10]
 80101da:	025b      	lsls	r3, r3, #9
 80101dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	689b      	ldr	r3, [r3, #8]
 80101e2:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80101ea:	e016      	b.n	801021a <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7fe f93a 	bl	800e46a <get_fat>
 80101f6:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80101f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d802      	bhi.n	8010204 <f_open+0x2f0>
 80101fe:	2302      	movs	r3, #2
 8010200:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010206:	f1b3 3fff 	cmp.w	r3, #4294967295
 801020a:	d102      	bne.n	8010212 <f_open+0x2fe>
 801020c:	2301      	movs	r3, #1
 801020e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010212:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010216:	1ad3      	subs	r3, r2, r3
 8010218:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801021a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801021e:	2b00      	cmp	r3, #0
 8010220:	d103      	bne.n	801022a <f_open+0x316>
 8010222:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010226:	429a      	cmp	r2, r3
 8010228:	d8e0      	bhi.n	80101ec <f_open+0x2d8>
				}
				fp->clust = clst;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801022e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010230:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010234:	2b00      	cmp	r3, #0
 8010236:	d127      	bne.n	8010288 <f_open+0x374>
 8010238:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801023a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801023e:	2b00      	cmp	r3, #0
 8010240:	d022      	beq.n	8010288 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010246:	4618      	mov	r0, r3
 8010248:	f7fe f8f0 	bl	800e42c <clust2sect>
 801024c:	64b8      	str	r0, [r7, #72]	@ 0x48
 801024e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010250:	2b00      	cmp	r3, #0
 8010252:	d103      	bne.n	801025c <f_open+0x348>
						res = FR_INT_ERR;
 8010254:	2302      	movs	r3, #2
 8010256:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801025a:	e015      	b.n	8010288 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801025c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801025e:	0a5a      	lsrs	r2, r3, #9
 8010260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010262:	441a      	add	r2, r3
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	7858      	ldrb	r0, [r3, #1]
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	6a1a      	ldr	r2, [r3, #32]
 8010276:	2301      	movs	r3, #1
 8010278:	f7fd fd26 	bl	800dcc8 <disk_read>
 801027c:	4603      	mov	r3, r0
 801027e:	2b00      	cmp	r3, #0
 8010280:	d002      	beq.n	8010288 <f_open+0x374>
 8010282:	2301      	movs	r3, #1
 8010284:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8010288:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801028a:	f000 fc64 	bl	8010b56 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801028e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010292:	2b00      	cmp	r3, #0
 8010294:	d002      	beq.n	801029c <f_open+0x388>
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2200      	movs	r2, #0
 801029a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801029c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3768      	adds	r7, #104	@ 0x68
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b08e      	sub	sp, #56	@ 0x38
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
 80102b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	2200      	movs	r2, #0
 80102be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	f107 0214 	add.w	r2, r7, #20
 80102c6:	4611      	mov	r1, r2
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7ff fda7 	bl	800fe1c <validate>
 80102ce:	4603      	mov	r3, r0
 80102d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80102d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d107      	bne.n	80102ec <f_read+0x44>
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	7d5b      	ldrb	r3, [r3, #21]
 80102e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80102e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d002      	beq.n	80102f2 <f_read+0x4a>
 80102ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80102f0:	e115      	b.n	801051e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	7d1b      	ldrb	r3, [r3, #20]
 80102f6:	f003 0301 	and.w	r3, r3, #1
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d101      	bne.n	8010302 <f_read+0x5a>
 80102fe:	2307      	movs	r3, #7
 8010300:	e10d      	b.n	801051e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	68da      	ldr	r2, [r3, #12]
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	699b      	ldr	r3, [r3, #24]
 801030a:	1ad3      	subs	r3, r2, r3
 801030c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801030e:	687a      	ldr	r2, [r7, #4]
 8010310:	6a3b      	ldr	r3, [r7, #32]
 8010312:	429a      	cmp	r2, r3
 8010314:	f240 80fe 	bls.w	8010514 <f_read+0x26c>
 8010318:	6a3b      	ldr	r3, [r7, #32]
 801031a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801031c:	e0fa      	b.n	8010514 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	699b      	ldr	r3, [r3, #24]
 8010322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010326:	2b00      	cmp	r3, #0
 8010328:	f040 80c6 	bne.w	80104b8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	699b      	ldr	r3, [r3, #24]
 8010330:	0a5b      	lsrs	r3, r3, #9
 8010332:	697a      	ldr	r2, [r7, #20]
 8010334:	8952      	ldrh	r2, [r2, #10]
 8010336:	3a01      	subs	r2, #1
 8010338:	4013      	ands	r3, r2
 801033a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801033c:	69fb      	ldr	r3, [r7, #28]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d12f      	bne.n	80103a2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	699b      	ldr	r3, [r3, #24]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d103      	bne.n	8010352 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	689b      	ldr	r3, [r3, #8]
 801034e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010350:	e013      	b.n	801037a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010356:	2b00      	cmp	r3, #0
 8010358:	d007      	beq.n	801036a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	699b      	ldr	r3, [r3, #24]
 801035e:	4619      	mov	r1, r3
 8010360:	68f8      	ldr	r0, [r7, #12]
 8010362:	f7fe fb10 	bl	800e986 <clmt_clust>
 8010366:	6338      	str	r0, [r7, #48]	@ 0x30
 8010368:	e007      	b.n	801037a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801036a:	68fa      	ldr	r2, [r7, #12]
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	69db      	ldr	r3, [r3, #28]
 8010370:	4619      	mov	r1, r3
 8010372:	4610      	mov	r0, r2
 8010374:	f7fe f879 	bl	800e46a <get_fat>
 8010378:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801037a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801037c:	2b01      	cmp	r3, #1
 801037e:	d804      	bhi.n	801038a <f_read+0xe2>
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	2202      	movs	r2, #2
 8010384:	755a      	strb	r2, [r3, #21]
 8010386:	2302      	movs	r3, #2
 8010388:	e0c9      	b.n	801051e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801038a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801038c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010390:	d104      	bne.n	801039c <f_read+0xf4>
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	2201      	movs	r2, #1
 8010396:	755a      	strb	r2, [r3, #21]
 8010398:	2301      	movs	r3, #1
 801039a:	e0c0      	b.n	801051e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103a0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80103a2:	697a      	ldr	r2, [r7, #20]
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	69db      	ldr	r3, [r3, #28]
 80103a8:	4619      	mov	r1, r3
 80103aa:	4610      	mov	r0, r2
 80103ac:	f7fe f83e 	bl	800e42c <clust2sect>
 80103b0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80103b2:	69bb      	ldr	r3, [r7, #24]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d104      	bne.n	80103c2 <f_read+0x11a>
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2202      	movs	r2, #2
 80103bc:	755a      	strb	r2, [r3, #21]
 80103be:	2302      	movs	r3, #2
 80103c0:	e0ad      	b.n	801051e <f_read+0x276>
			sect += csect;
 80103c2:	69ba      	ldr	r2, [r7, #24]
 80103c4:	69fb      	ldr	r3, [r7, #28]
 80103c6:	4413      	add	r3, r2
 80103c8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	0a5b      	lsrs	r3, r3, #9
 80103ce:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80103d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d039      	beq.n	801044a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80103d6:	69fa      	ldr	r2, [r7, #28]
 80103d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103da:	4413      	add	r3, r2
 80103dc:	697a      	ldr	r2, [r7, #20]
 80103de:	8952      	ldrh	r2, [r2, #10]
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d905      	bls.n	80103f0 <f_read+0x148>
					cc = fs->csize - csect;
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	895b      	ldrh	r3, [r3, #10]
 80103e8:	461a      	mov	r2, r3
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	1ad3      	subs	r3, r2, r3
 80103ee:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	7858      	ldrb	r0, [r3, #1]
 80103f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103f6:	69ba      	ldr	r2, [r7, #24]
 80103f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80103fa:	f7fd fc65 	bl	800dcc8 <disk_read>
 80103fe:	4603      	mov	r3, r0
 8010400:	2b00      	cmp	r3, #0
 8010402:	d004      	beq.n	801040e <f_read+0x166>
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2201      	movs	r2, #1
 8010408:	755a      	strb	r2, [r3, #21]
 801040a:	2301      	movs	r3, #1
 801040c:	e087      	b.n	801051e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	7d1b      	ldrb	r3, [r3, #20]
 8010412:	b25b      	sxtb	r3, r3
 8010414:	2b00      	cmp	r3, #0
 8010416:	da14      	bge.n	8010442 <f_read+0x19a>
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	6a1a      	ldr	r2, [r3, #32]
 801041c:	69bb      	ldr	r3, [r7, #24]
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010422:	429a      	cmp	r2, r3
 8010424:	d90d      	bls.n	8010442 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	6a1a      	ldr	r2, [r3, #32]
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	1ad3      	subs	r3, r2, r3
 801042e:	025b      	lsls	r3, r3, #9
 8010430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010432:	18d0      	adds	r0, r2, r3
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	3330      	adds	r3, #48	@ 0x30
 8010438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801043c:	4619      	mov	r1, r3
 801043e:	f7fd fd2b 	bl	800de98 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010444:	025b      	lsls	r3, r3, #9
 8010446:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8010448:	e050      	b.n	80104ec <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	6a1b      	ldr	r3, [r3, #32]
 801044e:	69ba      	ldr	r2, [r7, #24]
 8010450:	429a      	cmp	r2, r3
 8010452:	d02e      	beq.n	80104b2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	7d1b      	ldrb	r3, [r3, #20]
 8010458:	b25b      	sxtb	r3, r3
 801045a:	2b00      	cmp	r3, #0
 801045c:	da18      	bge.n	8010490 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	7858      	ldrb	r0, [r3, #1]
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	6a1a      	ldr	r2, [r3, #32]
 801046c:	2301      	movs	r3, #1
 801046e:	f7fd fc4b 	bl	800dd08 <disk_write>
 8010472:	4603      	mov	r3, r0
 8010474:	2b00      	cmp	r3, #0
 8010476:	d004      	beq.n	8010482 <f_read+0x1da>
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	2201      	movs	r2, #1
 801047c:	755a      	strb	r2, [r3, #21]
 801047e:	2301      	movs	r3, #1
 8010480:	e04d      	b.n	801051e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	7d1b      	ldrb	r3, [r3, #20]
 8010486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801048a:	b2da      	uxtb	r2, r3
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	7858      	ldrb	r0, [r3, #1]
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801049a:	2301      	movs	r3, #1
 801049c:	69ba      	ldr	r2, [r7, #24]
 801049e:	f7fd fc13 	bl	800dcc8 <disk_read>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d004      	beq.n	80104b2 <f_read+0x20a>
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	2201      	movs	r2, #1
 80104ac:	755a      	strb	r2, [r3, #21]
 80104ae:	2301      	movs	r3, #1
 80104b0:	e035      	b.n	801051e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	69ba      	ldr	r2, [r7, #24]
 80104b6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	699b      	ldr	r3, [r3, #24]
 80104bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104c0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80104c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80104c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d901      	bls.n	80104d2 <f_read+0x22a>
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	699b      	ldr	r3, [r3, #24]
 80104dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104e0:	4413      	add	r3, r2
 80104e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80104e4:	4619      	mov	r1, r3
 80104e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80104e8:	f7fd fcd6 	bl	800de98 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80104ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104f0:	4413      	add	r3, r2
 80104f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	699a      	ldr	r2, [r3, #24]
 80104f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104fa:	441a      	add	r2, r3
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	619a      	str	r2, [r3, #24]
 8010500:	683b      	ldr	r3, [r7, #0]
 8010502:	681a      	ldr	r2, [r3, #0]
 8010504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010506:	441a      	add	r2, r3
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	601a      	str	r2, [r3, #0]
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010510:	1ad3      	subs	r3, r2, r3
 8010512:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2b00      	cmp	r3, #0
 8010518:	f47f af01 	bne.w	801031e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801051c:	2300      	movs	r3, #0
}
 801051e:	4618      	mov	r0, r3
 8010520:	3738      	adds	r7, #56	@ 0x38
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b086      	sub	sp, #24
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f107 0208 	add.w	r2, r7, #8
 8010534:	4611      	mov	r1, r2
 8010536:	4618      	mov	r0, r3
 8010538:	f7ff fc70 	bl	800fe1c <validate>
 801053c:	4603      	mov	r3, r0
 801053e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010540:	7dfb      	ldrb	r3, [r7, #23]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d168      	bne.n	8010618 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	7d1b      	ldrb	r3, [r3, #20]
 801054a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801054e:	2b00      	cmp	r3, #0
 8010550:	d062      	beq.n	8010618 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	7d1b      	ldrb	r3, [r3, #20]
 8010556:	b25b      	sxtb	r3, r3
 8010558:	2b00      	cmp	r3, #0
 801055a:	da15      	bge.n	8010588 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	7858      	ldrb	r0, [r3, #1]
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6a1a      	ldr	r2, [r3, #32]
 801056a:	2301      	movs	r3, #1
 801056c:	f7fd fbcc 	bl	800dd08 <disk_write>
 8010570:	4603      	mov	r3, r0
 8010572:	2b00      	cmp	r3, #0
 8010574:	d001      	beq.n	801057a <f_sync+0x54>
 8010576:	2301      	movs	r3, #1
 8010578:	e04f      	b.n	801061a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	7d1b      	ldrb	r3, [r3, #20]
 801057e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010582:	b2da      	uxtb	r2, r3
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010588:	f7fd fbfc 	bl	800dd84 <get_fattime>
 801058c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801058e:	68ba      	ldr	r2, [r7, #8]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010594:	4619      	mov	r1, r3
 8010596:	4610      	mov	r0, r2
 8010598:	f7fd feac 	bl	800e2f4 <move_window>
 801059c:	4603      	mov	r3, r0
 801059e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80105a0:	7dfb      	ldrb	r3, [r7, #23]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d138      	bne.n	8010618 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105aa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	330b      	adds	r3, #11
 80105b0:	781a      	ldrb	r2, [r3, #0]
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	330b      	adds	r3, #11
 80105b6:	f042 0220 	orr.w	r2, r2, #32
 80105ba:	b2d2      	uxtb	r2, r2
 80105bc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6818      	ldr	r0, [r3, #0]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	689b      	ldr	r3, [r3, #8]
 80105c6:	461a      	mov	r2, r3
 80105c8:	68f9      	ldr	r1, [r7, #12]
 80105ca:	f7fe fbb6 	bl	800ed3a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	f103 021c 	add.w	r2, r3, #28
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	68db      	ldr	r3, [r3, #12]
 80105d8:	4619      	mov	r1, r3
 80105da:	4610      	mov	r0, r2
 80105dc:	f7fd fc30 	bl	800de40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	3316      	adds	r3, #22
 80105e4:	6939      	ldr	r1, [r7, #16]
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fd fc2a 	bl	800de40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	3312      	adds	r3, #18
 80105f0:	2100      	movs	r1, #0
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fd fc09 	bl	800de0a <st_word>
					fs->wflag = 1;
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	2201      	movs	r2, #1
 80105fc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	4618      	mov	r0, r3
 8010602:	f7fd fea5 	bl	800e350 <sync_fs>
 8010606:	4603      	mov	r3, r0
 8010608:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	7d1b      	ldrb	r3, [r3, #20]
 801060e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010612:	b2da      	uxtb	r2, r3
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010618:	7dfb      	ldrb	r3, [r7, #23]
}
 801061a:	4618      	mov	r0, r3
 801061c:	3718      	adds	r7, #24
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010622:	b580      	push	{r7, lr}
 8010624:	b084      	sub	sp, #16
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f7ff ff7b 	bl	8010526 <f_sync>
 8010630:	4603      	mov	r3, r0
 8010632:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010634:	7bfb      	ldrb	r3, [r7, #15]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d118      	bne.n	801066c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f107 0208 	add.w	r2, r7, #8
 8010640:	4611      	mov	r1, r2
 8010642:	4618      	mov	r0, r3
 8010644:	f7ff fbea 	bl	800fe1c <validate>
 8010648:	4603      	mov	r3, r0
 801064a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801064c:	7bfb      	ldrb	r3, [r7, #15]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d10c      	bne.n	801066c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	691b      	ldr	r3, [r3, #16]
 8010656:	4618      	mov	r0, r3
 8010658:	f7fd fda8 	bl	800e1ac <dec_lock>
 801065c:	4603      	mov	r3, r0
 801065e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010660:	7bfb      	ldrb	r3, [r7, #15]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d102      	bne.n	801066c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2200      	movs	r2, #0
 801066a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801066c:	7bfb      	ldrb	r3, [r7, #15]
}
 801066e:	4618      	mov	r0, r3
 8010670:	3710      	adds	r7, #16
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}

08010676 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010676:	b580      	push	{r7, lr}
 8010678:	b090      	sub	sp, #64	@ 0x40
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
 801067e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f107 0208 	add.w	r2, r7, #8
 8010686:	4611      	mov	r1, r2
 8010688:	4618      	mov	r0, r3
 801068a:	f7ff fbc7 	bl	800fe1c <validate>
 801068e:	4603      	mov	r3, r0
 8010690:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010694:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010698:	2b00      	cmp	r3, #0
 801069a:	d103      	bne.n	80106a4 <f_lseek+0x2e>
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	7d5b      	ldrb	r3, [r3, #21]
 80106a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80106a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d002      	beq.n	80106b2 <f_lseek+0x3c>
 80106ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80106b0:	e1e6      	b.n	8010a80 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	f000 80d1 	beq.w	801085e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80106bc:	683b      	ldr	r3, [r7, #0]
 80106be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106c2:	d15a      	bne.n	801077a <f_lseek+0x104>
			tbl = fp->cltbl;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106c8:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80106ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106cc:	1d1a      	adds	r2, r3, #4
 80106ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	617b      	str	r3, [r7, #20]
 80106d4:	2302      	movs	r3, #2
 80106d6:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	689b      	ldr	r3, [r3, #8]
 80106dc:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80106de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d03a      	beq.n	801075a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80106e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106e6:	613b      	str	r3, [r7, #16]
 80106e8:	2300      	movs	r3, #0
 80106ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80106ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106ee:	3302      	adds	r3, #2
 80106f0:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80106f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106f4:	60fb      	str	r3, [r7, #12]
 80106f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106f8:	3301      	adds	r3, #1
 80106fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010700:	4618      	mov	r0, r3
 8010702:	f7fd feb2 	bl	800e46a <get_fat>
 8010706:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801070a:	2b01      	cmp	r3, #1
 801070c:	d804      	bhi.n	8010718 <f_lseek+0xa2>
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2202      	movs	r2, #2
 8010712:	755a      	strb	r2, [r3, #21]
 8010714:	2302      	movs	r3, #2
 8010716:	e1b3      	b.n	8010a80 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801071a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801071e:	d104      	bne.n	801072a <f_lseek+0xb4>
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2201      	movs	r2, #1
 8010724:	755a      	strb	r2, [r3, #21]
 8010726:	2301      	movs	r3, #1
 8010728:	e1aa      	b.n	8010a80 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	3301      	adds	r3, #1
 801072e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010730:	429a      	cmp	r2, r3
 8010732:	d0de      	beq.n	80106f2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010734:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	429a      	cmp	r2, r3
 801073a:	d809      	bhi.n	8010750 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801073c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801073e:	1d1a      	adds	r2, r3, #4
 8010740:	627a      	str	r2, [r7, #36]	@ 0x24
 8010742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010744:	601a      	str	r2, [r3, #0]
 8010746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010748:	1d1a      	adds	r2, r3, #4
 801074a:	627a      	str	r2, [r7, #36]	@ 0x24
 801074c:	693a      	ldr	r2, [r7, #16]
 801074e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	699b      	ldr	r3, [r3, #24]
 8010754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010756:	429a      	cmp	r2, r3
 8010758:	d3c4      	bcc.n	80106e4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801075e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010760:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010762:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	429a      	cmp	r2, r3
 8010768:	d803      	bhi.n	8010772 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801076a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801076c:	2200      	movs	r2, #0
 801076e:	601a      	str	r2, [r3, #0]
 8010770:	e184      	b.n	8010a7c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010772:	2311      	movs	r3, #17
 8010774:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8010778:	e180      	b.n	8010a7c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	68db      	ldr	r3, [r3, #12]
 801077e:	683a      	ldr	r2, [r7, #0]
 8010780:	429a      	cmp	r2, r3
 8010782:	d902      	bls.n	801078a <f_lseek+0x114>
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	683a      	ldr	r2, [r7, #0]
 801078e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	2b00      	cmp	r3, #0
 8010794:	f000 8172 	beq.w	8010a7c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	3b01      	subs	r3, #1
 801079c:	4619      	mov	r1, r3
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f7fe f8f1 	bl	800e986 <clmt_clust>
 80107a4:	4602      	mov	r2, r0
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80107aa:	68ba      	ldr	r2, [r7, #8]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	69db      	ldr	r3, [r3, #28]
 80107b0:	4619      	mov	r1, r3
 80107b2:	4610      	mov	r0, r2
 80107b4:	f7fd fe3a 	bl	800e42c <clust2sect>
 80107b8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80107ba:	69bb      	ldr	r3, [r7, #24]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d104      	bne.n	80107ca <f_lseek+0x154>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2202      	movs	r2, #2
 80107c4:	755a      	strb	r2, [r3, #21]
 80107c6:	2302      	movs	r3, #2
 80107c8:	e15a      	b.n	8010a80 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	3b01      	subs	r3, #1
 80107ce:	0a5b      	lsrs	r3, r3, #9
 80107d0:	68ba      	ldr	r2, [r7, #8]
 80107d2:	8952      	ldrh	r2, [r2, #10]
 80107d4:	3a01      	subs	r2, #1
 80107d6:	4013      	ands	r3, r2
 80107d8:	69ba      	ldr	r2, [r7, #24]
 80107da:	4413      	add	r3, r2
 80107dc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	699b      	ldr	r3, [r3, #24]
 80107e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	f000 8148 	beq.w	8010a7c <f_lseek+0x406>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	6a1b      	ldr	r3, [r3, #32]
 80107f0:	69ba      	ldr	r2, [r7, #24]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	f000 8142 	beq.w	8010a7c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	7d1b      	ldrb	r3, [r3, #20]
 80107fc:	b25b      	sxtb	r3, r3
 80107fe:	2b00      	cmp	r3, #0
 8010800:	da18      	bge.n	8010834 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	7858      	ldrb	r0, [r3, #1]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6a1a      	ldr	r2, [r3, #32]
 8010810:	2301      	movs	r3, #1
 8010812:	f7fd fa79 	bl	800dd08 <disk_write>
 8010816:	4603      	mov	r3, r0
 8010818:	2b00      	cmp	r3, #0
 801081a:	d004      	beq.n	8010826 <f_lseek+0x1b0>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2201      	movs	r2, #1
 8010820:	755a      	strb	r2, [r3, #21]
 8010822:	2301      	movs	r3, #1
 8010824:	e12c      	b.n	8010a80 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	7d1b      	ldrb	r3, [r3, #20]
 801082a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801082e:	b2da      	uxtb	r2, r3
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	7858      	ldrb	r0, [r3, #1]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801083e:	2301      	movs	r3, #1
 8010840:	69ba      	ldr	r2, [r7, #24]
 8010842:	f7fd fa41 	bl	800dcc8 <disk_read>
 8010846:	4603      	mov	r3, r0
 8010848:	2b00      	cmp	r3, #0
 801084a:	d004      	beq.n	8010856 <f_lseek+0x1e0>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2201      	movs	r2, #1
 8010850:	755a      	strb	r2, [r3, #21]
 8010852:	2301      	movs	r3, #1
 8010854:	e114      	b.n	8010a80 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	69ba      	ldr	r2, [r7, #24]
 801085a:	621a      	str	r2, [r3, #32]
 801085c:	e10e      	b.n	8010a7c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	68db      	ldr	r3, [r3, #12]
 8010862:	683a      	ldr	r2, [r7, #0]
 8010864:	429a      	cmp	r2, r3
 8010866:	d908      	bls.n	801087a <f_lseek+0x204>
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	7d1b      	ldrb	r3, [r3, #20]
 801086c:	f003 0302 	and.w	r3, r3, #2
 8010870:	2b00      	cmp	r3, #0
 8010872:	d102      	bne.n	801087a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	68db      	ldr	r3, [r3, #12]
 8010878:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	699b      	ldr	r3, [r3, #24]
 801087e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010880:	2300      	movs	r3, #0
 8010882:	637b      	str	r3, [r7, #52]	@ 0x34
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010888:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	f000 80a7 	beq.w	80109e0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	895b      	ldrh	r3, [r3, #10]
 8010896:	025b      	lsls	r3, r3, #9
 8010898:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801089a:	6a3b      	ldr	r3, [r7, #32]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d01b      	beq.n	80108d8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	1e5a      	subs	r2, r3, #1
 80108a4:	69fb      	ldr	r3, [r7, #28]
 80108a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80108aa:	6a3b      	ldr	r3, [r7, #32]
 80108ac:	1e59      	subs	r1, r3, #1
 80108ae:	69fb      	ldr	r3, [r7, #28]
 80108b0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d30f      	bcc.n	80108d8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80108b8:	6a3b      	ldr	r3, [r7, #32]
 80108ba:	1e5a      	subs	r2, r3, #1
 80108bc:	69fb      	ldr	r3, [r7, #28]
 80108be:	425b      	negs	r3, r3
 80108c0:	401a      	ands	r2, r3
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	699b      	ldr	r3, [r3, #24]
 80108ca:	683a      	ldr	r2, [r7, #0]
 80108cc:	1ad3      	subs	r3, r2, r3
 80108ce:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	69db      	ldr	r3, [r3, #28]
 80108d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80108d6:	e022      	b.n	801091e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	689b      	ldr	r3, [r3, #8]
 80108dc:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80108de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d119      	bne.n	8010918 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2100      	movs	r1, #0
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7fd ffb4 	bl	800e856 <create_chain>
 80108ee:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80108f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108f2:	2b01      	cmp	r3, #1
 80108f4:	d104      	bne.n	8010900 <f_lseek+0x28a>
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2202      	movs	r2, #2
 80108fa:	755a      	strb	r2, [r3, #21]
 80108fc:	2302      	movs	r3, #2
 80108fe:	e0bf      	b.n	8010a80 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010906:	d104      	bne.n	8010912 <f_lseek+0x29c>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2201      	movs	r2, #1
 801090c:	755a      	strb	r2, [r3, #21]
 801090e:	2301      	movs	r3, #1
 8010910:	e0b6      	b.n	8010a80 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010916:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801091c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801091e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010920:	2b00      	cmp	r3, #0
 8010922:	d05d      	beq.n	80109e0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010924:	e03a      	b.n	801099c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8010926:	683a      	ldr	r2, [r7, #0]
 8010928:	69fb      	ldr	r3, [r7, #28]
 801092a:	1ad3      	subs	r3, r2, r3
 801092c:	603b      	str	r3, [r7, #0]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	699a      	ldr	r2, [r3, #24]
 8010932:	69fb      	ldr	r3, [r7, #28]
 8010934:	441a      	add	r2, r3
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	7d1b      	ldrb	r3, [r3, #20]
 801093e:	f003 0302 	and.w	r3, r3, #2
 8010942:	2b00      	cmp	r3, #0
 8010944:	d00b      	beq.n	801095e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801094a:	4618      	mov	r0, r3
 801094c:	f7fd ff83 	bl	800e856 <create_chain>
 8010950:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010954:	2b00      	cmp	r3, #0
 8010956:	d108      	bne.n	801096a <f_lseek+0x2f4>
							ofs = 0; break;
 8010958:	2300      	movs	r3, #0
 801095a:	603b      	str	r3, [r7, #0]
 801095c:	e022      	b.n	80109a4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010962:	4618      	mov	r0, r3
 8010964:	f7fd fd81 	bl	800e46a <get_fat>
 8010968:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801096a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801096c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010970:	d104      	bne.n	801097c <f_lseek+0x306>
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2201      	movs	r2, #1
 8010976:	755a      	strb	r2, [r3, #21]
 8010978:	2301      	movs	r3, #1
 801097a:	e081      	b.n	8010a80 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801097c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801097e:	2b01      	cmp	r3, #1
 8010980:	d904      	bls.n	801098c <f_lseek+0x316>
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	699b      	ldr	r3, [r3, #24]
 8010986:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010988:	429a      	cmp	r2, r3
 801098a:	d304      	bcc.n	8010996 <f_lseek+0x320>
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2202      	movs	r2, #2
 8010990:	755a      	strb	r2, [r3, #21]
 8010992:	2302      	movs	r3, #2
 8010994:	e074      	b.n	8010a80 <f_lseek+0x40a>
					fp->clust = clst;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801099a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801099c:	683a      	ldr	r2, [r7, #0]
 801099e:	69fb      	ldr	r3, [r7, #28]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d8c0      	bhi.n	8010926 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	699a      	ldr	r2, [r3, #24]
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	441a      	add	r2, r3
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d012      	beq.n	80109e0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80109be:	4618      	mov	r0, r3
 80109c0:	f7fd fd34 	bl	800e42c <clust2sect>
 80109c4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80109c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d104      	bne.n	80109d6 <f_lseek+0x360>
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2202      	movs	r2, #2
 80109d0:	755a      	strb	r2, [r3, #21]
 80109d2:	2302      	movs	r3, #2
 80109d4:	e054      	b.n	8010a80 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	0a5b      	lsrs	r3, r3, #9
 80109da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80109dc:	4413      	add	r3, r2
 80109de:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	699a      	ldr	r2, [r3, #24]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	68db      	ldr	r3, [r3, #12]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d90a      	bls.n	8010a02 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	699a      	ldr	r2, [r3, #24]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	7d1b      	ldrb	r3, [r3, #20]
 80109f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109fc:	b2da      	uxtb	r2, r3
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	699b      	ldr	r3, [r3, #24]
 8010a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d036      	beq.n	8010a7c <f_lseek+0x406>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6a1b      	ldr	r3, [r3, #32]
 8010a12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d031      	beq.n	8010a7c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	7d1b      	ldrb	r3, [r3, #20]
 8010a1c:	b25b      	sxtb	r3, r3
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	da18      	bge.n	8010a54 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	7858      	ldrb	r0, [r3, #1]
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6a1a      	ldr	r2, [r3, #32]
 8010a30:	2301      	movs	r3, #1
 8010a32:	f7fd f969 	bl	800dd08 <disk_write>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d004      	beq.n	8010a46 <f_lseek+0x3d0>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2201      	movs	r2, #1
 8010a40:	755a      	strb	r2, [r3, #21]
 8010a42:	2301      	movs	r3, #1
 8010a44:	e01c      	b.n	8010a80 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	7d1b      	ldrb	r3, [r3, #20]
 8010a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a4e:	b2da      	uxtb	r2, r3
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	7858      	ldrb	r0, [r3, #1]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010a5e:	2301      	movs	r3, #1
 8010a60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a62:	f7fd f931 	bl	800dcc8 <disk_read>
 8010a66:	4603      	mov	r3, r0
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d004      	beq.n	8010a76 <f_lseek+0x400>
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2201      	movs	r2, #1
 8010a70:	755a      	strb	r2, [r3, #21]
 8010a72:	2301      	movs	r3, #1
 8010a74:	e004      	b.n	8010a80 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a7a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010a7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3740      	adds	r7, #64	@ 0x40
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b087      	sub	sp, #28
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	60b9      	str	r1, [r7, #8]
 8010a92:	4613      	mov	r3, r2
 8010a94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010a96:	2301      	movs	r3, #1
 8010a98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8010b1c <FATFS_LinkDriverEx+0x94>)
 8010aa0:	7a5b      	ldrb	r3, [r3, #9]
 8010aa2:	b2db      	uxtb	r3, r3
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d131      	bne.n	8010b0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8010b1c <FATFS_LinkDriverEx+0x94>)
 8010aaa:	7a5b      	ldrb	r3, [r3, #9]
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	461a      	mov	r2, r3
 8010ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8010b1c <FATFS_LinkDriverEx+0x94>)
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010ab6:	4b19      	ldr	r3, [pc, #100]	@ (8010b1c <FATFS_LinkDriverEx+0x94>)
 8010ab8:	7a5b      	ldrb	r3, [r3, #9]
 8010aba:	b2db      	uxtb	r3, r3
 8010abc:	4a17      	ldr	r2, [pc, #92]	@ (8010b1c <FATFS_LinkDriverEx+0x94>)
 8010abe:	009b      	lsls	r3, r3, #2
 8010ac0:	4413      	add	r3, r2
 8010ac2:	68fa      	ldr	r2, [r7, #12]
 8010ac4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010ac6:	4b15      	ldr	r3, [pc, #84]	@ (8010b1c <FATFS_LinkDriverEx+0x94>)
 8010ac8:	7a5b      	ldrb	r3, [r3, #9]
 8010aca:	b2db      	uxtb	r3, r3
 8010acc:	461a      	mov	r2, r3
 8010ace:	4b13      	ldr	r3, [pc, #76]	@ (8010b1c <FATFS_LinkDriverEx+0x94>)
 8010ad0:	4413      	add	r3, r2
 8010ad2:	79fa      	ldrb	r2, [r7, #7]
 8010ad4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010ad6:	4b11      	ldr	r3, [pc, #68]	@ (8010b1c <FATFS_LinkDriverEx+0x94>)
 8010ad8:	7a5b      	ldrb	r3, [r3, #9]
 8010ada:	b2db      	uxtb	r3, r3
 8010adc:	1c5a      	adds	r2, r3, #1
 8010ade:	b2d1      	uxtb	r1, r2
 8010ae0:	4a0e      	ldr	r2, [pc, #56]	@ (8010b1c <FATFS_LinkDriverEx+0x94>)
 8010ae2:	7251      	strb	r1, [r2, #9]
 8010ae4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010ae6:	7dbb      	ldrb	r3, [r7, #22]
 8010ae8:	3330      	adds	r3, #48	@ 0x30
 8010aea:	b2da      	uxtb	r2, r3
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	3301      	adds	r3, #1
 8010af4:	223a      	movs	r2, #58	@ 0x3a
 8010af6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	3302      	adds	r3, #2
 8010afc:	222f      	movs	r2, #47	@ 0x2f
 8010afe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	3303      	adds	r3, #3
 8010b04:	2200      	movs	r2, #0
 8010b06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	371c      	adds	r7, #28
 8010b12:	46bd      	mov	sp, r7
 8010b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b18:	4770      	bx	lr
 8010b1a:	bf00      	nop
 8010b1c:	20018974 	.word	0x20018974

08010b20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
 8010b28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	6839      	ldr	r1, [r7, #0]
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f7ff ffaa 	bl	8010a88 <FATFS_LinkDriverEx>
 8010b34:	4603      	mov	r3, r0
}
 8010b36:	4618      	mov	r0, r3
 8010b38:	3708      	adds	r7, #8
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	bd80      	pop	{r7, pc}

08010b3e <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8010b3e:	b580      	push	{r7, lr}
 8010b40:	b082      	sub	sp, #8
 8010b42:	af00      	add	r7, sp, #0
 8010b44:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f000 f8d6 	bl	8010cf8 <malloc>
 8010b4c:	4603      	mov	r3, r0
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3708      	adds	r7, #8
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}

08010b56 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8010b56:	b580      	push	{r7, lr}
 8010b58:	b082      	sub	sp, #8
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f000 f8d2 	bl	8010d08 <free>
}
 8010b64:	bf00      	nop
 8010b66:	3708      	adds	r7, #8
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010b6c:	b480      	push	{r7}
 8010b6e:	b085      	sub	sp, #20
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	4603      	mov	r3, r0
 8010b74:	6039      	str	r1, [r7, #0]
 8010b76:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010b78:	88fb      	ldrh	r3, [r7, #6]
 8010b7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8010b7c:	d802      	bhi.n	8010b84 <ff_convert+0x18>
		c = chr;
 8010b7e:	88fb      	ldrh	r3, [r7, #6]
 8010b80:	81fb      	strh	r3, [r7, #14]
 8010b82:	e025      	b.n	8010bd0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d00b      	beq.n	8010ba2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010b8a:	88fb      	ldrh	r3, [r7, #6]
 8010b8c:	2bff      	cmp	r3, #255	@ 0xff
 8010b8e:	d805      	bhi.n	8010b9c <ff_convert+0x30>
 8010b90:	88fb      	ldrh	r3, [r7, #6]
 8010b92:	3b80      	subs	r3, #128	@ 0x80
 8010b94:	4a12      	ldr	r2, [pc, #72]	@ (8010be0 <ff_convert+0x74>)
 8010b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b9a:	e000      	b.n	8010b9e <ff_convert+0x32>
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	81fb      	strh	r3, [r7, #14]
 8010ba0:	e016      	b.n	8010bd0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	81fb      	strh	r3, [r7, #14]
 8010ba6:	e009      	b.n	8010bbc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010ba8:	89fb      	ldrh	r3, [r7, #14]
 8010baa:	4a0d      	ldr	r2, [pc, #52]	@ (8010be0 <ff_convert+0x74>)
 8010bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bb0:	88fa      	ldrh	r2, [r7, #6]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d006      	beq.n	8010bc4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010bb6:	89fb      	ldrh	r3, [r7, #14]
 8010bb8:	3301      	adds	r3, #1
 8010bba:	81fb      	strh	r3, [r7, #14]
 8010bbc:	89fb      	ldrh	r3, [r7, #14]
 8010bbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8010bc0:	d9f2      	bls.n	8010ba8 <ff_convert+0x3c>
 8010bc2:	e000      	b.n	8010bc6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010bc4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010bc6:	89fb      	ldrh	r3, [r7, #14]
 8010bc8:	3380      	adds	r3, #128	@ 0x80
 8010bca:	b29b      	uxth	r3, r3
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010bd0:	89fb      	ldrh	r3, [r7, #14]
}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	3714      	adds	r7, #20
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bdc:	4770      	bx	lr
 8010bde:	bf00      	nop
 8010be0:	08011a34 	.word	0x08011a34

08010be4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b087      	sub	sp, #28
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	4603      	mov	r3, r0
 8010bec:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010bee:	88fb      	ldrh	r3, [r7, #6]
 8010bf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010bf4:	d201      	bcs.n	8010bfa <ff_wtoupper+0x16>
 8010bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8010cf0 <ff_wtoupper+0x10c>)
 8010bf8:	e000      	b.n	8010bfc <ff_wtoupper+0x18>
 8010bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8010cf4 <ff_wtoupper+0x110>)
 8010bfc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	1c9a      	adds	r2, r3, #2
 8010c02:	617a      	str	r2, [r7, #20]
 8010c04:	881b      	ldrh	r3, [r3, #0]
 8010c06:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010c08:	8a7b      	ldrh	r3, [r7, #18]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d068      	beq.n	8010ce0 <ff_wtoupper+0xfc>
 8010c0e:	88fa      	ldrh	r2, [r7, #6]
 8010c10:	8a7b      	ldrh	r3, [r7, #18]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d364      	bcc.n	8010ce0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	1c9a      	adds	r2, r3, #2
 8010c1a:	617a      	str	r2, [r7, #20]
 8010c1c:	881b      	ldrh	r3, [r3, #0]
 8010c1e:	823b      	strh	r3, [r7, #16]
 8010c20:	8a3b      	ldrh	r3, [r7, #16]
 8010c22:	0a1b      	lsrs	r3, r3, #8
 8010c24:	81fb      	strh	r3, [r7, #14]
 8010c26:	8a3b      	ldrh	r3, [r7, #16]
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010c2c:	88fa      	ldrh	r2, [r7, #6]
 8010c2e:	8a79      	ldrh	r1, [r7, #18]
 8010c30:	8a3b      	ldrh	r3, [r7, #16]
 8010c32:	440b      	add	r3, r1
 8010c34:	429a      	cmp	r2, r3
 8010c36:	da49      	bge.n	8010ccc <ff_wtoupper+0xe8>
			switch (cmd) {
 8010c38:	89fb      	ldrh	r3, [r7, #14]
 8010c3a:	2b08      	cmp	r3, #8
 8010c3c:	d84f      	bhi.n	8010cde <ff_wtoupper+0xfa>
 8010c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8010c44 <ff_wtoupper+0x60>)
 8010c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c44:	08010c69 	.word	0x08010c69
 8010c48:	08010c7b 	.word	0x08010c7b
 8010c4c:	08010c91 	.word	0x08010c91
 8010c50:	08010c99 	.word	0x08010c99
 8010c54:	08010ca1 	.word	0x08010ca1
 8010c58:	08010ca9 	.word	0x08010ca9
 8010c5c:	08010cb1 	.word	0x08010cb1
 8010c60:	08010cb9 	.word	0x08010cb9
 8010c64:	08010cc1 	.word	0x08010cc1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010c68:	88fa      	ldrh	r2, [r7, #6]
 8010c6a:	8a7b      	ldrh	r3, [r7, #18]
 8010c6c:	1ad3      	subs	r3, r2, r3
 8010c6e:	005b      	lsls	r3, r3, #1
 8010c70:	697a      	ldr	r2, [r7, #20]
 8010c72:	4413      	add	r3, r2
 8010c74:	881b      	ldrh	r3, [r3, #0]
 8010c76:	80fb      	strh	r3, [r7, #6]
 8010c78:	e027      	b.n	8010cca <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010c7a:	88fa      	ldrh	r2, [r7, #6]
 8010c7c:	8a7b      	ldrh	r3, [r7, #18]
 8010c7e:	1ad3      	subs	r3, r2, r3
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	f003 0301 	and.w	r3, r3, #1
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	88fa      	ldrh	r2, [r7, #6]
 8010c8a:	1ad3      	subs	r3, r2, r3
 8010c8c:	80fb      	strh	r3, [r7, #6]
 8010c8e:	e01c      	b.n	8010cca <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010c90:	88fb      	ldrh	r3, [r7, #6]
 8010c92:	3b10      	subs	r3, #16
 8010c94:	80fb      	strh	r3, [r7, #6]
 8010c96:	e018      	b.n	8010cca <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010c98:	88fb      	ldrh	r3, [r7, #6]
 8010c9a:	3b20      	subs	r3, #32
 8010c9c:	80fb      	strh	r3, [r7, #6]
 8010c9e:	e014      	b.n	8010cca <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010ca0:	88fb      	ldrh	r3, [r7, #6]
 8010ca2:	3b30      	subs	r3, #48	@ 0x30
 8010ca4:	80fb      	strh	r3, [r7, #6]
 8010ca6:	e010      	b.n	8010cca <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010ca8:	88fb      	ldrh	r3, [r7, #6]
 8010caa:	3b1a      	subs	r3, #26
 8010cac:	80fb      	strh	r3, [r7, #6]
 8010cae:	e00c      	b.n	8010cca <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010cb0:	88fb      	ldrh	r3, [r7, #6]
 8010cb2:	3308      	adds	r3, #8
 8010cb4:	80fb      	strh	r3, [r7, #6]
 8010cb6:	e008      	b.n	8010cca <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010cb8:	88fb      	ldrh	r3, [r7, #6]
 8010cba:	3b50      	subs	r3, #80	@ 0x50
 8010cbc:	80fb      	strh	r3, [r7, #6]
 8010cbe:	e004      	b.n	8010cca <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010cc0:	88fb      	ldrh	r3, [r7, #6]
 8010cc2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8010cc6:	80fb      	strh	r3, [r7, #6]
 8010cc8:	bf00      	nop
			}
			break;
 8010cca:	e008      	b.n	8010cde <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010ccc:	89fb      	ldrh	r3, [r7, #14]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d195      	bne.n	8010bfe <ff_wtoupper+0x1a>
 8010cd2:	8a3b      	ldrh	r3, [r7, #16]
 8010cd4:	005b      	lsls	r3, r3, #1
 8010cd6:	697a      	ldr	r2, [r7, #20]
 8010cd8:	4413      	add	r3, r2
 8010cda:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010cdc:	e78f      	b.n	8010bfe <ff_wtoupper+0x1a>
			break;
 8010cde:	bf00      	nop
	}

	return chr;
 8010ce0:	88fb      	ldrh	r3, [r7, #6]
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	371c      	adds	r7, #28
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cec:	4770      	bx	lr
 8010cee:	bf00      	nop
 8010cf0:	08011b34 	.word	0x08011b34
 8010cf4:	08011d28 	.word	0x08011d28

08010cf8 <malloc>:
 8010cf8:	4b02      	ldr	r3, [pc, #8]	@ (8010d04 <malloc+0xc>)
 8010cfa:	4601      	mov	r1, r0
 8010cfc:	6818      	ldr	r0, [r3, #0]
 8010cfe:	f000 b82d 	b.w	8010d5c <_malloc_r>
 8010d02:	bf00      	nop
 8010d04:	20000010 	.word	0x20000010

08010d08 <free>:
 8010d08:	4b02      	ldr	r3, [pc, #8]	@ (8010d14 <free+0xc>)
 8010d0a:	4601      	mov	r1, r0
 8010d0c:	6818      	ldr	r0, [r3, #0]
 8010d0e:	f000 b929 	b.w	8010f64 <_free_r>
 8010d12:	bf00      	nop
 8010d14:	20000010 	.word	0x20000010

08010d18 <sbrk_aligned>:
 8010d18:	b570      	push	{r4, r5, r6, lr}
 8010d1a:	4e0f      	ldr	r6, [pc, #60]	@ (8010d58 <sbrk_aligned+0x40>)
 8010d1c:	460c      	mov	r4, r1
 8010d1e:	6831      	ldr	r1, [r6, #0]
 8010d20:	4605      	mov	r5, r0
 8010d22:	b911      	cbnz	r1, 8010d2a <sbrk_aligned+0x12>
 8010d24:	f000 f8e2 	bl	8010eec <_sbrk_r>
 8010d28:	6030      	str	r0, [r6, #0]
 8010d2a:	4621      	mov	r1, r4
 8010d2c:	4628      	mov	r0, r5
 8010d2e:	f000 f8dd 	bl	8010eec <_sbrk_r>
 8010d32:	1c43      	adds	r3, r0, #1
 8010d34:	d103      	bne.n	8010d3e <sbrk_aligned+0x26>
 8010d36:	f04f 34ff 	mov.w	r4, #4294967295
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	bd70      	pop	{r4, r5, r6, pc}
 8010d3e:	1cc4      	adds	r4, r0, #3
 8010d40:	f024 0403 	bic.w	r4, r4, #3
 8010d44:	42a0      	cmp	r0, r4
 8010d46:	d0f8      	beq.n	8010d3a <sbrk_aligned+0x22>
 8010d48:	1a21      	subs	r1, r4, r0
 8010d4a:	4628      	mov	r0, r5
 8010d4c:	f000 f8ce 	bl	8010eec <_sbrk_r>
 8010d50:	3001      	adds	r0, #1
 8010d52:	d1f2      	bne.n	8010d3a <sbrk_aligned+0x22>
 8010d54:	e7ef      	b.n	8010d36 <sbrk_aligned+0x1e>
 8010d56:	bf00      	nop
 8010d58:	20018980 	.word	0x20018980

08010d5c <_malloc_r>:
 8010d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d60:	1ccd      	adds	r5, r1, #3
 8010d62:	f025 0503 	bic.w	r5, r5, #3
 8010d66:	3508      	adds	r5, #8
 8010d68:	2d0c      	cmp	r5, #12
 8010d6a:	bf38      	it	cc
 8010d6c:	250c      	movcc	r5, #12
 8010d6e:	2d00      	cmp	r5, #0
 8010d70:	4606      	mov	r6, r0
 8010d72:	db01      	blt.n	8010d78 <_malloc_r+0x1c>
 8010d74:	42a9      	cmp	r1, r5
 8010d76:	d904      	bls.n	8010d82 <_malloc_r+0x26>
 8010d78:	230c      	movs	r3, #12
 8010d7a:	6033      	str	r3, [r6, #0]
 8010d7c:	2000      	movs	r0, #0
 8010d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010e58 <_malloc_r+0xfc>
 8010d86:	f000 f869 	bl	8010e5c <__malloc_lock>
 8010d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8010d8e:	461c      	mov	r4, r3
 8010d90:	bb44      	cbnz	r4, 8010de4 <_malloc_r+0x88>
 8010d92:	4629      	mov	r1, r5
 8010d94:	4630      	mov	r0, r6
 8010d96:	f7ff ffbf 	bl	8010d18 <sbrk_aligned>
 8010d9a:	1c43      	adds	r3, r0, #1
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	d158      	bne.n	8010e52 <_malloc_r+0xf6>
 8010da0:	f8d8 4000 	ldr.w	r4, [r8]
 8010da4:	4627      	mov	r7, r4
 8010da6:	2f00      	cmp	r7, #0
 8010da8:	d143      	bne.n	8010e32 <_malloc_r+0xd6>
 8010daa:	2c00      	cmp	r4, #0
 8010dac:	d04b      	beq.n	8010e46 <_malloc_r+0xea>
 8010dae:	6823      	ldr	r3, [r4, #0]
 8010db0:	4639      	mov	r1, r7
 8010db2:	4630      	mov	r0, r6
 8010db4:	eb04 0903 	add.w	r9, r4, r3
 8010db8:	f000 f898 	bl	8010eec <_sbrk_r>
 8010dbc:	4581      	cmp	r9, r0
 8010dbe:	d142      	bne.n	8010e46 <_malloc_r+0xea>
 8010dc0:	6821      	ldr	r1, [r4, #0]
 8010dc2:	1a6d      	subs	r5, r5, r1
 8010dc4:	4629      	mov	r1, r5
 8010dc6:	4630      	mov	r0, r6
 8010dc8:	f7ff ffa6 	bl	8010d18 <sbrk_aligned>
 8010dcc:	3001      	adds	r0, #1
 8010dce:	d03a      	beq.n	8010e46 <_malloc_r+0xea>
 8010dd0:	6823      	ldr	r3, [r4, #0]
 8010dd2:	442b      	add	r3, r5
 8010dd4:	6023      	str	r3, [r4, #0]
 8010dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8010dda:	685a      	ldr	r2, [r3, #4]
 8010ddc:	bb62      	cbnz	r2, 8010e38 <_malloc_r+0xdc>
 8010dde:	f8c8 7000 	str.w	r7, [r8]
 8010de2:	e00f      	b.n	8010e04 <_malloc_r+0xa8>
 8010de4:	6822      	ldr	r2, [r4, #0]
 8010de6:	1b52      	subs	r2, r2, r5
 8010de8:	d420      	bmi.n	8010e2c <_malloc_r+0xd0>
 8010dea:	2a0b      	cmp	r2, #11
 8010dec:	d917      	bls.n	8010e1e <_malloc_r+0xc2>
 8010dee:	1961      	adds	r1, r4, r5
 8010df0:	42a3      	cmp	r3, r4
 8010df2:	6025      	str	r5, [r4, #0]
 8010df4:	bf18      	it	ne
 8010df6:	6059      	strne	r1, [r3, #4]
 8010df8:	6863      	ldr	r3, [r4, #4]
 8010dfa:	bf08      	it	eq
 8010dfc:	f8c8 1000 	streq.w	r1, [r8]
 8010e00:	5162      	str	r2, [r4, r5]
 8010e02:	604b      	str	r3, [r1, #4]
 8010e04:	4630      	mov	r0, r6
 8010e06:	f000 f82f 	bl	8010e68 <__malloc_unlock>
 8010e0a:	f104 000b 	add.w	r0, r4, #11
 8010e0e:	1d23      	adds	r3, r4, #4
 8010e10:	f020 0007 	bic.w	r0, r0, #7
 8010e14:	1ac2      	subs	r2, r0, r3
 8010e16:	bf1c      	itt	ne
 8010e18:	1a1b      	subne	r3, r3, r0
 8010e1a:	50a3      	strne	r3, [r4, r2]
 8010e1c:	e7af      	b.n	8010d7e <_malloc_r+0x22>
 8010e1e:	6862      	ldr	r2, [r4, #4]
 8010e20:	42a3      	cmp	r3, r4
 8010e22:	bf0c      	ite	eq
 8010e24:	f8c8 2000 	streq.w	r2, [r8]
 8010e28:	605a      	strne	r2, [r3, #4]
 8010e2a:	e7eb      	b.n	8010e04 <_malloc_r+0xa8>
 8010e2c:	4623      	mov	r3, r4
 8010e2e:	6864      	ldr	r4, [r4, #4]
 8010e30:	e7ae      	b.n	8010d90 <_malloc_r+0x34>
 8010e32:	463c      	mov	r4, r7
 8010e34:	687f      	ldr	r7, [r7, #4]
 8010e36:	e7b6      	b.n	8010da6 <_malloc_r+0x4a>
 8010e38:	461a      	mov	r2, r3
 8010e3a:	685b      	ldr	r3, [r3, #4]
 8010e3c:	42a3      	cmp	r3, r4
 8010e3e:	d1fb      	bne.n	8010e38 <_malloc_r+0xdc>
 8010e40:	2300      	movs	r3, #0
 8010e42:	6053      	str	r3, [r2, #4]
 8010e44:	e7de      	b.n	8010e04 <_malloc_r+0xa8>
 8010e46:	230c      	movs	r3, #12
 8010e48:	6033      	str	r3, [r6, #0]
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	f000 f80c 	bl	8010e68 <__malloc_unlock>
 8010e50:	e794      	b.n	8010d7c <_malloc_r+0x20>
 8010e52:	6005      	str	r5, [r0, #0]
 8010e54:	e7d6      	b.n	8010e04 <_malloc_r+0xa8>
 8010e56:	bf00      	nop
 8010e58:	20018984 	.word	0x20018984

08010e5c <__malloc_lock>:
 8010e5c:	4801      	ldr	r0, [pc, #4]	@ (8010e64 <__malloc_lock+0x8>)
 8010e5e:	f000 b87f 	b.w	8010f60 <__retarget_lock_acquire_recursive>
 8010e62:	bf00      	nop
 8010e64:	20018ac4 	.word	0x20018ac4

08010e68 <__malloc_unlock>:
 8010e68:	4801      	ldr	r0, [pc, #4]	@ (8010e70 <__malloc_unlock+0x8>)
 8010e6a:	f000 b87a 	b.w	8010f62 <__retarget_lock_release_recursive>
 8010e6e:	bf00      	nop
 8010e70:	20018ac4 	.word	0x20018ac4

08010e74 <sniprintf>:
 8010e74:	b40c      	push	{r2, r3}
 8010e76:	b530      	push	{r4, r5, lr}
 8010e78:	4b17      	ldr	r3, [pc, #92]	@ (8010ed8 <sniprintf+0x64>)
 8010e7a:	1e0c      	subs	r4, r1, #0
 8010e7c:	681d      	ldr	r5, [r3, #0]
 8010e7e:	b09d      	sub	sp, #116	@ 0x74
 8010e80:	da08      	bge.n	8010e94 <sniprintf+0x20>
 8010e82:	238b      	movs	r3, #139	@ 0x8b
 8010e84:	602b      	str	r3, [r5, #0]
 8010e86:	f04f 30ff 	mov.w	r0, #4294967295
 8010e8a:	b01d      	add	sp, #116	@ 0x74
 8010e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e90:	b002      	add	sp, #8
 8010e92:	4770      	bx	lr
 8010e94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010e98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010e9c:	bf14      	ite	ne
 8010e9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010ea2:	4623      	moveq	r3, r4
 8010ea4:	9304      	str	r3, [sp, #16]
 8010ea6:	9307      	str	r3, [sp, #28]
 8010ea8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010eac:	9002      	str	r0, [sp, #8]
 8010eae:	9006      	str	r0, [sp, #24]
 8010eb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010eb4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010eb6:	ab21      	add	r3, sp, #132	@ 0x84
 8010eb8:	a902      	add	r1, sp, #8
 8010eba:	4628      	mov	r0, r5
 8010ebc:	9301      	str	r3, [sp, #4]
 8010ebe:	f000 f8f7 	bl	80110b0 <_svfiprintf_r>
 8010ec2:	1c43      	adds	r3, r0, #1
 8010ec4:	bfbc      	itt	lt
 8010ec6:	238b      	movlt	r3, #139	@ 0x8b
 8010ec8:	602b      	strlt	r3, [r5, #0]
 8010eca:	2c00      	cmp	r4, #0
 8010ecc:	d0dd      	beq.n	8010e8a <sniprintf+0x16>
 8010ece:	9b02      	ldr	r3, [sp, #8]
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	701a      	strb	r2, [r3, #0]
 8010ed4:	e7d9      	b.n	8010e8a <sniprintf+0x16>
 8010ed6:	bf00      	nop
 8010ed8:	20000010 	.word	0x20000010

08010edc <memset>:
 8010edc:	4402      	add	r2, r0
 8010ede:	4603      	mov	r3, r0
 8010ee0:	4293      	cmp	r3, r2
 8010ee2:	d100      	bne.n	8010ee6 <memset+0xa>
 8010ee4:	4770      	bx	lr
 8010ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8010eea:	e7f9      	b.n	8010ee0 <memset+0x4>

08010eec <_sbrk_r>:
 8010eec:	b538      	push	{r3, r4, r5, lr}
 8010eee:	4d06      	ldr	r5, [pc, #24]	@ (8010f08 <_sbrk_r+0x1c>)
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	4608      	mov	r0, r1
 8010ef6:	602b      	str	r3, [r5, #0]
 8010ef8:	f7fc fe44 	bl	800db84 <_sbrk>
 8010efc:	1c43      	adds	r3, r0, #1
 8010efe:	d102      	bne.n	8010f06 <_sbrk_r+0x1a>
 8010f00:	682b      	ldr	r3, [r5, #0]
 8010f02:	b103      	cbz	r3, 8010f06 <_sbrk_r+0x1a>
 8010f04:	6023      	str	r3, [r4, #0]
 8010f06:	bd38      	pop	{r3, r4, r5, pc}
 8010f08:	20018ac0 	.word	0x20018ac0

08010f0c <__errno>:
 8010f0c:	4b01      	ldr	r3, [pc, #4]	@ (8010f14 <__errno+0x8>)
 8010f0e:	6818      	ldr	r0, [r3, #0]
 8010f10:	4770      	bx	lr
 8010f12:	bf00      	nop
 8010f14:	20000010 	.word	0x20000010

08010f18 <__libc_init_array>:
 8010f18:	b570      	push	{r4, r5, r6, lr}
 8010f1a:	4d0d      	ldr	r5, [pc, #52]	@ (8010f50 <__libc_init_array+0x38>)
 8010f1c:	4c0d      	ldr	r4, [pc, #52]	@ (8010f54 <__libc_init_array+0x3c>)
 8010f1e:	1b64      	subs	r4, r4, r5
 8010f20:	10a4      	asrs	r4, r4, #2
 8010f22:	2600      	movs	r6, #0
 8010f24:	42a6      	cmp	r6, r4
 8010f26:	d109      	bne.n	8010f3c <__libc_init_array+0x24>
 8010f28:	4d0b      	ldr	r5, [pc, #44]	@ (8010f58 <__libc_init_array+0x40>)
 8010f2a:	4c0c      	ldr	r4, [pc, #48]	@ (8010f5c <__libc_init_array+0x44>)
 8010f2c:	f000 fba8 	bl	8011680 <_init>
 8010f30:	1b64      	subs	r4, r4, r5
 8010f32:	10a4      	asrs	r4, r4, #2
 8010f34:	2600      	movs	r6, #0
 8010f36:	42a6      	cmp	r6, r4
 8010f38:	d105      	bne.n	8010f46 <__libc_init_array+0x2e>
 8010f3a:	bd70      	pop	{r4, r5, r6, pc}
 8010f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f40:	4798      	blx	r3
 8010f42:	3601      	adds	r6, #1
 8010f44:	e7ee      	b.n	8010f24 <__libc_init_array+0xc>
 8010f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f4a:	4798      	blx	r3
 8010f4c:	3601      	adds	r6, #1
 8010f4e:	e7f2      	b.n	8010f36 <__libc_init_array+0x1e>
 8010f50:	08011e20 	.word	0x08011e20
 8010f54:	08011e20 	.word	0x08011e20
 8010f58:	08011e20 	.word	0x08011e20
 8010f5c:	08011e24 	.word	0x08011e24

08010f60 <__retarget_lock_acquire_recursive>:
 8010f60:	4770      	bx	lr

08010f62 <__retarget_lock_release_recursive>:
 8010f62:	4770      	bx	lr

08010f64 <_free_r>:
 8010f64:	b538      	push	{r3, r4, r5, lr}
 8010f66:	4605      	mov	r5, r0
 8010f68:	2900      	cmp	r1, #0
 8010f6a:	d041      	beq.n	8010ff0 <_free_r+0x8c>
 8010f6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f70:	1f0c      	subs	r4, r1, #4
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	bfb8      	it	lt
 8010f76:	18e4      	addlt	r4, r4, r3
 8010f78:	f7ff ff70 	bl	8010e5c <__malloc_lock>
 8010f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8010ff4 <_free_r+0x90>)
 8010f7e:	6813      	ldr	r3, [r2, #0]
 8010f80:	b933      	cbnz	r3, 8010f90 <_free_r+0x2c>
 8010f82:	6063      	str	r3, [r4, #4]
 8010f84:	6014      	str	r4, [r2, #0]
 8010f86:	4628      	mov	r0, r5
 8010f88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f8c:	f7ff bf6c 	b.w	8010e68 <__malloc_unlock>
 8010f90:	42a3      	cmp	r3, r4
 8010f92:	d908      	bls.n	8010fa6 <_free_r+0x42>
 8010f94:	6820      	ldr	r0, [r4, #0]
 8010f96:	1821      	adds	r1, r4, r0
 8010f98:	428b      	cmp	r3, r1
 8010f9a:	bf01      	itttt	eq
 8010f9c:	6819      	ldreq	r1, [r3, #0]
 8010f9e:	685b      	ldreq	r3, [r3, #4]
 8010fa0:	1809      	addeq	r1, r1, r0
 8010fa2:	6021      	streq	r1, [r4, #0]
 8010fa4:	e7ed      	b.n	8010f82 <_free_r+0x1e>
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	b10b      	cbz	r3, 8010fb0 <_free_r+0x4c>
 8010fac:	42a3      	cmp	r3, r4
 8010fae:	d9fa      	bls.n	8010fa6 <_free_r+0x42>
 8010fb0:	6811      	ldr	r1, [r2, #0]
 8010fb2:	1850      	adds	r0, r2, r1
 8010fb4:	42a0      	cmp	r0, r4
 8010fb6:	d10b      	bne.n	8010fd0 <_free_r+0x6c>
 8010fb8:	6820      	ldr	r0, [r4, #0]
 8010fba:	4401      	add	r1, r0
 8010fbc:	1850      	adds	r0, r2, r1
 8010fbe:	4283      	cmp	r3, r0
 8010fc0:	6011      	str	r1, [r2, #0]
 8010fc2:	d1e0      	bne.n	8010f86 <_free_r+0x22>
 8010fc4:	6818      	ldr	r0, [r3, #0]
 8010fc6:	685b      	ldr	r3, [r3, #4]
 8010fc8:	6053      	str	r3, [r2, #4]
 8010fca:	4408      	add	r0, r1
 8010fcc:	6010      	str	r0, [r2, #0]
 8010fce:	e7da      	b.n	8010f86 <_free_r+0x22>
 8010fd0:	d902      	bls.n	8010fd8 <_free_r+0x74>
 8010fd2:	230c      	movs	r3, #12
 8010fd4:	602b      	str	r3, [r5, #0]
 8010fd6:	e7d6      	b.n	8010f86 <_free_r+0x22>
 8010fd8:	6820      	ldr	r0, [r4, #0]
 8010fda:	1821      	adds	r1, r4, r0
 8010fdc:	428b      	cmp	r3, r1
 8010fde:	bf04      	itt	eq
 8010fe0:	6819      	ldreq	r1, [r3, #0]
 8010fe2:	685b      	ldreq	r3, [r3, #4]
 8010fe4:	6063      	str	r3, [r4, #4]
 8010fe6:	bf04      	itt	eq
 8010fe8:	1809      	addeq	r1, r1, r0
 8010fea:	6021      	streq	r1, [r4, #0]
 8010fec:	6054      	str	r4, [r2, #4]
 8010fee:	e7ca      	b.n	8010f86 <_free_r+0x22>
 8010ff0:	bd38      	pop	{r3, r4, r5, pc}
 8010ff2:	bf00      	nop
 8010ff4:	20018984 	.word	0x20018984

08010ff8 <__ssputs_r>:
 8010ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ffc:	688e      	ldr	r6, [r1, #8]
 8010ffe:	461f      	mov	r7, r3
 8011000:	42be      	cmp	r6, r7
 8011002:	680b      	ldr	r3, [r1, #0]
 8011004:	4682      	mov	sl, r0
 8011006:	460c      	mov	r4, r1
 8011008:	4690      	mov	r8, r2
 801100a:	d82d      	bhi.n	8011068 <__ssputs_r+0x70>
 801100c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011010:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011014:	d026      	beq.n	8011064 <__ssputs_r+0x6c>
 8011016:	6965      	ldr	r5, [r4, #20]
 8011018:	6909      	ldr	r1, [r1, #16]
 801101a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801101e:	eba3 0901 	sub.w	r9, r3, r1
 8011022:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011026:	1c7b      	adds	r3, r7, #1
 8011028:	444b      	add	r3, r9
 801102a:	106d      	asrs	r5, r5, #1
 801102c:	429d      	cmp	r5, r3
 801102e:	bf38      	it	cc
 8011030:	461d      	movcc	r5, r3
 8011032:	0553      	lsls	r3, r2, #21
 8011034:	d527      	bpl.n	8011086 <__ssputs_r+0x8e>
 8011036:	4629      	mov	r1, r5
 8011038:	f7ff fe90 	bl	8010d5c <_malloc_r>
 801103c:	4606      	mov	r6, r0
 801103e:	b360      	cbz	r0, 801109a <__ssputs_r+0xa2>
 8011040:	6921      	ldr	r1, [r4, #16]
 8011042:	464a      	mov	r2, r9
 8011044:	f000 fad8 	bl	80115f8 <memcpy>
 8011048:	89a3      	ldrh	r3, [r4, #12]
 801104a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801104e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011052:	81a3      	strh	r3, [r4, #12]
 8011054:	6126      	str	r6, [r4, #16]
 8011056:	6165      	str	r5, [r4, #20]
 8011058:	444e      	add	r6, r9
 801105a:	eba5 0509 	sub.w	r5, r5, r9
 801105e:	6026      	str	r6, [r4, #0]
 8011060:	60a5      	str	r5, [r4, #8]
 8011062:	463e      	mov	r6, r7
 8011064:	42be      	cmp	r6, r7
 8011066:	d900      	bls.n	801106a <__ssputs_r+0x72>
 8011068:	463e      	mov	r6, r7
 801106a:	6820      	ldr	r0, [r4, #0]
 801106c:	4632      	mov	r2, r6
 801106e:	4641      	mov	r1, r8
 8011070:	f000 faa8 	bl	80115c4 <memmove>
 8011074:	68a3      	ldr	r3, [r4, #8]
 8011076:	1b9b      	subs	r3, r3, r6
 8011078:	60a3      	str	r3, [r4, #8]
 801107a:	6823      	ldr	r3, [r4, #0]
 801107c:	4433      	add	r3, r6
 801107e:	6023      	str	r3, [r4, #0]
 8011080:	2000      	movs	r0, #0
 8011082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011086:	462a      	mov	r2, r5
 8011088:	f000 fac4 	bl	8011614 <_realloc_r>
 801108c:	4606      	mov	r6, r0
 801108e:	2800      	cmp	r0, #0
 8011090:	d1e0      	bne.n	8011054 <__ssputs_r+0x5c>
 8011092:	6921      	ldr	r1, [r4, #16]
 8011094:	4650      	mov	r0, sl
 8011096:	f7ff ff65 	bl	8010f64 <_free_r>
 801109a:	230c      	movs	r3, #12
 801109c:	f8ca 3000 	str.w	r3, [sl]
 80110a0:	89a3      	ldrh	r3, [r4, #12]
 80110a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110a6:	81a3      	strh	r3, [r4, #12]
 80110a8:	f04f 30ff 	mov.w	r0, #4294967295
 80110ac:	e7e9      	b.n	8011082 <__ssputs_r+0x8a>
	...

080110b0 <_svfiprintf_r>:
 80110b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b4:	4698      	mov	r8, r3
 80110b6:	898b      	ldrh	r3, [r1, #12]
 80110b8:	061b      	lsls	r3, r3, #24
 80110ba:	b09d      	sub	sp, #116	@ 0x74
 80110bc:	4607      	mov	r7, r0
 80110be:	460d      	mov	r5, r1
 80110c0:	4614      	mov	r4, r2
 80110c2:	d510      	bpl.n	80110e6 <_svfiprintf_r+0x36>
 80110c4:	690b      	ldr	r3, [r1, #16]
 80110c6:	b973      	cbnz	r3, 80110e6 <_svfiprintf_r+0x36>
 80110c8:	2140      	movs	r1, #64	@ 0x40
 80110ca:	f7ff fe47 	bl	8010d5c <_malloc_r>
 80110ce:	6028      	str	r0, [r5, #0]
 80110d0:	6128      	str	r0, [r5, #16]
 80110d2:	b930      	cbnz	r0, 80110e2 <_svfiprintf_r+0x32>
 80110d4:	230c      	movs	r3, #12
 80110d6:	603b      	str	r3, [r7, #0]
 80110d8:	f04f 30ff 	mov.w	r0, #4294967295
 80110dc:	b01d      	add	sp, #116	@ 0x74
 80110de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e2:	2340      	movs	r3, #64	@ 0x40
 80110e4:	616b      	str	r3, [r5, #20]
 80110e6:	2300      	movs	r3, #0
 80110e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80110ea:	2320      	movs	r3, #32
 80110ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80110f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80110f4:	2330      	movs	r3, #48	@ 0x30
 80110f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011294 <_svfiprintf_r+0x1e4>
 80110fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80110fe:	f04f 0901 	mov.w	r9, #1
 8011102:	4623      	mov	r3, r4
 8011104:	469a      	mov	sl, r3
 8011106:	f813 2b01 	ldrb.w	r2, [r3], #1
 801110a:	b10a      	cbz	r2, 8011110 <_svfiprintf_r+0x60>
 801110c:	2a25      	cmp	r2, #37	@ 0x25
 801110e:	d1f9      	bne.n	8011104 <_svfiprintf_r+0x54>
 8011110:	ebba 0b04 	subs.w	fp, sl, r4
 8011114:	d00b      	beq.n	801112e <_svfiprintf_r+0x7e>
 8011116:	465b      	mov	r3, fp
 8011118:	4622      	mov	r2, r4
 801111a:	4629      	mov	r1, r5
 801111c:	4638      	mov	r0, r7
 801111e:	f7ff ff6b 	bl	8010ff8 <__ssputs_r>
 8011122:	3001      	adds	r0, #1
 8011124:	f000 80a7 	beq.w	8011276 <_svfiprintf_r+0x1c6>
 8011128:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801112a:	445a      	add	r2, fp
 801112c:	9209      	str	r2, [sp, #36]	@ 0x24
 801112e:	f89a 3000 	ldrb.w	r3, [sl]
 8011132:	2b00      	cmp	r3, #0
 8011134:	f000 809f 	beq.w	8011276 <_svfiprintf_r+0x1c6>
 8011138:	2300      	movs	r3, #0
 801113a:	f04f 32ff 	mov.w	r2, #4294967295
 801113e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011142:	f10a 0a01 	add.w	sl, sl, #1
 8011146:	9304      	str	r3, [sp, #16]
 8011148:	9307      	str	r3, [sp, #28]
 801114a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801114e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011150:	4654      	mov	r4, sl
 8011152:	2205      	movs	r2, #5
 8011154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011158:	484e      	ldr	r0, [pc, #312]	@ (8011294 <_svfiprintf_r+0x1e4>)
 801115a:	f7ef f8c1 	bl	80002e0 <memchr>
 801115e:	9a04      	ldr	r2, [sp, #16]
 8011160:	b9d8      	cbnz	r0, 801119a <_svfiprintf_r+0xea>
 8011162:	06d0      	lsls	r0, r2, #27
 8011164:	bf44      	itt	mi
 8011166:	2320      	movmi	r3, #32
 8011168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801116c:	0711      	lsls	r1, r2, #28
 801116e:	bf44      	itt	mi
 8011170:	232b      	movmi	r3, #43	@ 0x2b
 8011172:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011176:	f89a 3000 	ldrb.w	r3, [sl]
 801117a:	2b2a      	cmp	r3, #42	@ 0x2a
 801117c:	d015      	beq.n	80111aa <_svfiprintf_r+0xfa>
 801117e:	9a07      	ldr	r2, [sp, #28]
 8011180:	4654      	mov	r4, sl
 8011182:	2000      	movs	r0, #0
 8011184:	f04f 0c0a 	mov.w	ip, #10
 8011188:	4621      	mov	r1, r4
 801118a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801118e:	3b30      	subs	r3, #48	@ 0x30
 8011190:	2b09      	cmp	r3, #9
 8011192:	d94b      	bls.n	801122c <_svfiprintf_r+0x17c>
 8011194:	b1b0      	cbz	r0, 80111c4 <_svfiprintf_r+0x114>
 8011196:	9207      	str	r2, [sp, #28]
 8011198:	e014      	b.n	80111c4 <_svfiprintf_r+0x114>
 801119a:	eba0 0308 	sub.w	r3, r0, r8
 801119e:	fa09 f303 	lsl.w	r3, r9, r3
 80111a2:	4313      	orrs	r3, r2
 80111a4:	9304      	str	r3, [sp, #16]
 80111a6:	46a2      	mov	sl, r4
 80111a8:	e7d2      	b.n	8011150 <_svfiprintf_r+0xa0>
 80111aa:	9b03      	ldr	r3, [sp, #12]
 80111ac:	1d19      	adds	r1, r3, #4
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	9103      	str	r1, [sp, #12]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	bfbb      	ittet	lt
 80111b6:	425b      	neglt	r3, r3
 80111b8:	f042 0202 	orrlt.w	r2, r2, #2
 80111bc:	9307      	strge	r3, [sp, #28]
 80111be:	9307      	strlt	r3, [sp, #28]
 80111c0:	bfb8      	it	lt
 80111c2:	9204      	strlt	r2, [sp, #16]
 80111c4:	7823      	ldrb	r3, [r4, #0]
 80111c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80111c8:	d10a      	bne.n	80111e0 <_svfiprintf_r+0x130>
 80111ca:	7863      	ldrb	r3, [r4, #1]
 80111cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80111ce:	d132      	bne.n	8011236 <_svfiprintf_r+0x186>
 80111d0:	9b03      	ldr	r3, [sp, #12]
 80111d2:	1d1a      	adds	r2, r3, #4
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	9203      	str	r2, [sp, #12]
 80111d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80111dc:	3402      	adds	r4, #2
 80111de:	9305      	str	r3, [sp, #20]
 80111e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80112a4 <_svfiprintf_r+0x1f4>
 80111e4:	7821      	ldrb	r1, [r4, #0]
 80111e6:	2203      	movs	r2, #3
 80111e8:	4650      	mov	r0, sl
 80111ea:	f7ef f879 	bl	80002e0 <memchr>
 80111ee:	b138      	cbz	r0, 8011200 <_svfiprintf_r+0x150>
 80111f0:	9b04      	ldr	r3, [sp, #16]
 80111f2:	eba0 000a 	sub.w	r0, r0, sl
 80111f6:	2240      	movs	r2, #64	@ 0x40
 80111f8:	4082      	lsls	r2, r0
 80111fa:	4313      	orrs	r3, r2
 80111fc:	3401      	adds	r4, #1
 80111fe:	9304      	str	r3, [sp, #16]
 8011200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011204:	4824      	ldr	r0, [pc, #144]	@ (8011298 <_svfiprintf_r+0x1e8>)
 8011206:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801120a:	2206      	movs	r2, #6
 801120c:	f7ef f868 	bl	80002e0 <memchr>
 8011210:	2800      	cmp	r0, #0
 8011212:	d036      	beq.n	8011282 <_svfiprintf_r+0x1d2>
 8011214:	4b21      	ldr	r3, [pc, #132]	@ (801129c <_svfiprintf_r+0x1ec>)
 8011216:	bb1b      	cbnz	r3, 8011260 <_svfiprintf_r+0x1b0>
 8011218:	9b03      	ldr	r3, [sp, #12]
 801121a:	3307      	adds	r3, #7
 801121c:	f023 0307 	bic.w	r3, r3, #7
 8011220:	3308      	adds	r3, #8
 8011222:	9303      	str	r3, [sp, #12]
 8011224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011226:	4433      	add	r3, r6
 8011228:	9309      	str	r3, [sp, #36]	@ 0x24
 801122a:	e76a      	b.n	8011102 <_svfiprintf_r+0x52>
 801122c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011230:	460c      	mov	r4, r1
 8011232:	2001      	movs	r0, #1
 8011234:	e7a8      	b.n	8011188 <_svfiprintf_r+0xd8>
 8011236:	2300      	movs	r3, #0
 8011238:	3401      	adds	r4, #1
 801123a:	9305      	str	r3, [sp, #20]
 801123c:	4619      	mov	r1, r3
 801123e:	f04f 0c0a 	mov.w	ip, #10
 8011242:	4620      	mov	r0, r4
 8011244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011248:	3a30      	subs	r2, #48	@ 0x30
 801124a:	2a09      	cmp	r2, #9
 801124c:	d903      	bls.n	8011256 <_svfiprintf_r+0x1a6>
 801124e:	2b00      	cmp	r3, #0
 8011250:	d0c6      	beq.n	80111e0 <_svfiprintf_r+0x130>
 8011252:	9105      	str	r1, [sp, #20]
 8011254:	e7c4      	b.n	80111e0 <_svfiprintf_r+0x130>
 8011256:	fb0c 2101 	mla	r1, ip, r1, r2
 801125a:	4604      	mov	r4, r0
 801125c:	2301      	movs	r3, #1
 801125e:	e7f0      	b.n	8011242 <_svfiprintf_r+0x192>
 8011260:	ab03      	add	r3, sp, #12
 8011262:	9300      	str	r3, [sp, #0]
 8011264:	462a      	mov	r2, r5
 8011266:	4b0e      	ldr	r3, [pc, #56]	@ (80112a0 <_svfiprintf_r+0x1f0>)
 8011268:	a904      	add	r1, sp, #16
 801126a:	4638      	mov	r0, r7
 801126c:	f3af 8000 	nop.w
 8011270:	1c42      	adds	r2, r0, #1
 8011272:	4606      	mov	r6, r0
 8011274:	d1d6      	bne.n	8011224 <_svfiprintf_r+0x174>
 8011276:	89ab      	ldrh	r3, [r5, #12]
 8011278:	065b      	lsls	r3, r3, #25
 801127a:	f53f af2d 	bmi.w	80110d8 <_svfiprintf_r+0x28>
 801127e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011280:	e72c      	b.n	80110dc <_svfiprintf_r+0x2c>
 8011282:	ab03      	add	r3, sp, #12
 8011284:	9300      	str	r3, [sp, #0]
 8011286:	462a      	mov	r2, r5
 8011288:	4b05      	ldr	r3, [pc, #20]	@ (80112a0 <_svfiprintf_r+0x1f0>)
 801128a:	a904      	add	r1, sp, #16
 801128c:	4638      	mov	r0, r7
 801128e:	f000 f879 	bl	8011384 <_printf_i>
 8011292:	e7ed      	b.n	8011270 <_svfiprintf_r+0x1c0>
 8011294:	08011de4 	.word	0x08011de4
 8011298:	08011dee 	.word	0x08011dee
 801129c:	00000000 	.word	0x00000000
 80112a0:	08010ff9 	.word	0x08010ff9
 80112a4:	08011dea 	.word	0x08011dea

080112a8 <_printf_common>:
 80112a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112ac:	4616      	mov	r6, r2
 80112ae:	4698      	mov	r8, r3
 80112b0:	688a      	ldr	r2, [r1, #8]
 80112b2:	690b      	ldr	r3, [r1, #16]
 80112b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80112b8:	4293      	cmp	r3, r2
 80112ba:	bfb8      	it	lt
 80112bc:	4613      	movlt	r3, r2
 80112be:	6033      	str	r3, [r6, #0]
 80112c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80112c4:	4607      	mov	r7, r0
 80112c6:	460c      	mov	r4, r1
 80112c8:	b10a      	cbz	r2, 80112ce <_printf_common+0x26>
 80112ca:	3301      	adds	r3, #1
 80112cc:	6033      	str	r3, [r6, #0]
 80112ce:	6823      	ldr	r3, [r4, #0]
 80112d0:	0699      	lsls	r1, r3, #26
 80112d2:	bf42      	ittt	mi
 80112d4:	6833      	ldrmi	r3, [r6, #0]
 80112d6:	3302      	addmi	r3, #2
 80112d8:	6033      	strmi	r3, [r6, #0]
 80112da:	6825      	ldr	r5, [r4, #0]
 80112dc:	f015 0506 	ands.w	r5, r5, #6
 80112e0:	d106      	bne.n	80112f0 <_printf_common+0x48>
 80112e2:	f104 0a19 	add.w	sl, r4, #25
 80112e6:	68e3      	ldr	r3, [r4, #12]
 80112e8:	6832      	ldr	r2, [r6, #0]
 80112ea:	1a9b      	subs	r3, r3, r2
 80112ec:	42ab      	cmp	r3, r5
 80112ee:	dc26      	bgt.n	801133e <_printf_common+0x96>
 80112f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80112f4:	6822      	ldr	r2, [r4, #0]
 80112f6:	3b00      	subs	r3, #0
 80112f8:	bf18      	it	ne
 80112fa:	2301      	movne	r3, #1
 80112fc:	0692      	lsls	r2, r2, #26
 80112fe:	d42b      	bmi.n	8011358 <_printf_common+0xb0>
 8011300:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011304:	4641      	mov	r1, r8
 8011306:	4638      	mov	r0, r7
 8011308:	47c8      	blx	r9
 801130a:	3001      	adds	r0, #1
 801130c:	d01e      	beq.n	801134c <_printf_common+0xa4>
 801130e:	6823      	ldr	r3, [r4, #0]
 8011310:	6922      	ldr	r2, [r4, #16]
 8011312:	f003 0306 	and.w	r3, r3, #6
 8011316:	2b04      	cmp	r3, #4
 8011318:	bf02      	ittt	eq
 801131a:	68e5      	ldreq	r5, [r4, #12]
 801131c:	6833      	ldreq	r3, [r6, #0]
 801131e:	1aed      	subeq	r5, r5, r3
 8011320:	68a3      	ldr	r3, [r4, #8]
 8011322:	bf0c      	ite	eq
 8011324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011328:	2500      	movne	r5, #0
 801132a:	4293      	cmp	r3, r2
 801132c:	bfc4      	itt	gt
 801132e:	1a9b      	subgt	r3, r3, r2
 8011330:	18ed      	addgt	r5, r5, r3
 8011332:	2600      	movs	r6, #0
 8011334:	341a      	adds	r4, #26
 8011336:	42b5      	cmp	r5, r6
 8011338:	d11a      	bne.n	8011370 <_printf_common+0xc8>
 801133a:	2000      	movs	r0, #0
 801133c:	e008      	b.n	8011350 <_printf_common+0xa8>
 801133e:	2301      	movs	r3, #1
 8011340:	4652      	mov	r2, sl
 8011342:	4641      	mov	r1, r8
 8011344:	4638      	mov	r0, r7
 8011346:	47c8      	blx	r9
 8011348:	3001      	adds	r0, #1
 801134a:	d103      	bne.n	8011354 <_printf_common+0xac>
 801134c:	f04f 30ff 	mov.w	r0, #4294967295
 8011350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011354:	3501      	adds	r5, #1
 8011356:	e7c6      	b.n	80112e6 <_printf_common+0x3e>
 8011358:	18e1      	adds	r1, r4, r3
 801135a:	1c5a      	adds	r2, r3, #1
 801135c:	2030      	movs	r0, #48	@ 0x30
 801135e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011362:	4422      	add	r2, r4
 8011364:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011368:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801136c:	3302      	adds	r3, #2
 801136e:	e7c7      	b.n	8011300 <_printf_common+0x58>
 8011370:	2301      	movs	r3, #1
 8011372:	4622      	mov	r2, r4
 8011374:	4641      	mov	r1, r8
 8011376:	4638      	mov	r0, r7
 8011378:	47c8      	blx	r9
 801137a:	3001      	adds	r0, #1
 801137c:	d0e6      	beq.n	801134c <_printf_common+0xa4>
 801137e:	3601      	adds	r6, #1
 8011380:	e7d9      	b.n	8011336 <_printf_common+0x8e>
	...

08011384 <_printf_i>:
 8011384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011388:	7e0f      	ldrb	r7, [r1, #24]
 801138a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801138c:	2f78      	cmp	r7, #120	@ 0x78
 801138e:	4691      	mov	r9, r2
 8011390:	4680      	mov	r8, r0
 8011392:	460c      	mov	r4, r1
 8011394:	469a      	mov	sl, r3
 8011396:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801139a:	d807      	bhi.n	80113ac <_printf_i+0x28>
 801139c:	2f62      	cmp	r7, #98	@ 0x62
 801139e:	d80a      	bhi.n	80113b6 <_printf_i+0x32>
 80113a0:	2f00      	cmp	r7, #0
 80113a2:	f000 80d2 	beq.w	801154a <_printf_i+0x1c6>
 80113a6:	2f58      	cmp	r7, #88	@ 0x58
 80113a8:	f000 80b9 	beq.w	801151e <_printf_i+0x19a>
 80113ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80113b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80113b4:	e03a      	b.n	801142c <_printf_i+0xa8>
 80113b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80113ba:	2b15      	cmp	r3, #21
 80113bc:	d8f6      	bhi.n	80113ac <_printf_i+0x28>
 80113be:	a101      	add	r1, pc, #4	@ (adr r1, 80113c4 <_printf_i+0x40>)
 80113c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80113c4:	0801141d 	.word	0x0801141d
 80113c8:	08011431 	.word	0x08011431
 80113cc:	080113ad 	.word	0x080113ad
 80113d0:	080113ad 	.word	0x080113ad
 80113d4:	080113ad 	.word	0x080113ad
 80113d8:	080113ad 	.word	0x080113ad
 80113dc:	08011431 	.word	0x08011431
 80113e0:	080113ad 	.word	0x080113ad
 80113e4:	080113ad 	.word	0x080113ad
 80113e8:	080113ad 	.word	0x080113ad
 80113ec:	080113ad 	.word	0x080113ad
 80113f0:	08011531 	.word	0x08011531
 80113f4:	0801145b 	.word	0x0801145b
 80113f8:	080114eb 	.word	0x080114eb
 80113fc:	080113ad 	.word	0x080113ad
 8011400:	080113ad 	.word	0x080113ad
 8011404:	08011553 	.word	0x08011553
 8011408:	080113ad 	.word	0x080113ad
 801140c:	0801145b 	.word	0x0801145b
 8011410:	080113ad 	.word	0x080113ad
 8011414:	080113ad 	.word	0x080113ad
 8011418:	080114f3 	.word	0x080114f3
 801141c:	6833      	ldr	r3, [r6, #0]
 801141e:	1d1a      	adds	r2, r3, #4
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	6032      	str	r2, [r6, #0]
 8011424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011428:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801142c:	2301      	movs	r3, #1
 801142e:	e09d      	b.n	801156c <_printf_i+0x1e8>
 8011430:	6833      	ldr	r3, [r6, #0]
 8011432:	6820      	ldr	r0, [r4, #0]
 8011434:	1d19      	adds	r1, r3, #4
 8011436:	6031      	str	r1, [r6, #0]
 8011438:	0606      	lsls	r6, r0, #24
 801143a:	d501      	bpl.n	8011440 <_printf_i+0xbc>
 801143c:	681d      	ldr	r5, [r3, #0]
 801143e:	e003      	b.n	8011448 <_printf_i+0xc4>
 8011440:	0645      	lsls	r5, r0, #25
 8011442:	d5fb      	bpl.n	801143c <_printf_i+0xb8>
 8011444:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011448:	2d00      	cmp	r5, #0
 801144a:	da03      	bge.n	8011454 <_printf_i+0xd0>
 801144c:	232d      	movs	r3, #45	@ 0x2d
 801144e:	426d      	negs	r5, r5
 8011450:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011454:	4859      	ldr	r0, [pc, #356]	@ (80115bc <_printf_i+0x238>)
 8011456:	230a      	movs	r3, #10
 8011458:	e011      	b.n	801147e <_printf_i+0xfa>
 801145a:	6821      	ldr	r1, [r4, #0]
 801145c:	6833      	ldr	r3, [r6, #0]
 801145e:	0608      	lsls	r0, r1, #24
 8011460:	f853 5b04 	ldr.w	r5, [r3], #4
 8011464:	d402      	bmi.n	801146c <_printf_i+0xe8>
 8011466:	0649      	lsls	r1, r1, #25
 8011468:	bf48      	it	mi
 801146a:	b2ad      	uxthmi	r5, r5
 801146c:	2f6f      	cmp	r7, #111	@ 0x6f
 801146e:	4853      	ldr	r0, [pc, #332]	@ (80115bc <_printf_i+0x238>)
 8011470:	6033      	str	r3, [r6, #0]
 8011472:	bf14      	ite	ne
 8011474:	230a      	movne	r3, #10
 8011476:	2308      	moveq	r3, #8
 8011478:	2100      	movs	r1, #0
 801147a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801147e:	6866      	ldr	r6, [r4, #4]
 8011480:	60a6      	str	r6, [r4, #8]
 8011482:	2e00      	cmp	r6, #0
 8011484:	bfa2      	ittt	ge
 8011486:	6821      	ldrge	r1, [r4, #0]
 8011488:	f021 0104 	bicge.w	r1, r1, #4
 801148c:	6021      	strge	r1, [r4, #0]
 801148e:	b90d      	cbnz	r5, 8011494 <_printf_i+0x110>
 8011490:	2e00      	cmp	r6, #0
 8011492:	d04b      	beq.n	801152c <_printf_i+0x1a8>
 8011494:	4616      	mov	r6, r2
 8011496:	fbb5 f1f3 	udiv	r1, r5, r3
 801149a:	fb03 5711 	mls	r7, r3, r1, r5
 801149e:	5dc7      	ldrb	r7, [r0, r7]
 80114a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80114a4:	462f      	mov	r7, r5
 80114a6:	42bb      	cmp	r3, r7
 80114a8:	460d      	mov	r5, r1
 80114aa:	d9f4      	bls.n	8011496 <_printf_i+0x112>
 80114ac:	2b08      	cmp	r3, #8
 80114ae:	d10b      	bne.n	80114c8 <_printf_i+0x144>
 80114b0:	6823      	ldr	r3, [r4, #0]
 80114b2:	07df      	lsls	r7, r3, #31
 80114b4:	d508      	bpl.n	80114c8 <_printf_i+0x144>
 80114b6:	6923      	ldr	r3, [r4, #16]
 80114b8:	6861      	ldr	r1, [r4, #4]
 80114ba:	4299      	cmp	r1, r3
 80114bc:	bfde      	ittt	le
 80114be:	2330      	movle	r3, #48	@ 0x30
 80114c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80114c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80114c8:	1b92      	subs	r2, r2, r6
 80114ca:	6122      	str	r2, [r4, #16]
 80114cc:	f8cd a000 	str.w	sl, [sp]
 80114d0:	464b      	mov	r3, r9
 80114d2:	aa03      	add	r2, sp, #12
 80114d4:	4621      	mov	r1, r4
 80114d6:	4640      	mov	r0, r8
 80114d8:	f7ff fee6 	bl	80112a8 <_printf_common>
 80114dc:	3001      	adds	r0, #1
 80114de:	d14a      	bne.n	8011576 <_printf_i+0x1f2>
 80114e0:	f04f 30ff 	mov.w	r0, #4294967295
 80114e4:	b004      	add	sp, #16
 80114e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114ea:	6823      	ldr	r3, [r4, #0]
 80114ec:	f043 0320 	orr.w	r3, r3, #32
 80114f0:	6023      	str	r3, [r4, #0]
 80114f2:	4833      	ldr	r0, [pc, #204]	@ (80115c0 <_printf_i+0x23c>)
 80114f4:	2778      	movs	r7, #120	@ 0x78
 80114f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80114fa:	6823      	ldr	r3, [r4, #0]
 80114fc:	6831      	ldr	r1, [r6, #0]
 80114fe:	061f      	lsls	r7, r3, #24
 8011500:	f851 5b04 	ldr.w	r5, [r1], #4
 8011504:	d402      	bmi.n	801150c <_printf_i+0x188>
 8011506:	065f      	lsls	r7, r3, #25
 8011508:	bf48      	it	mi
 801150a:	b2ad      	uxthmi	r5, r5
 801150c:	6031      	str	r1, [r6, #0]
 801150e:	07d9      	lsls	r1, r3, #31
 8011510:	bf44      	itt	mi
 8011512:	f043 0320 	orrmi.w	r3, r3, #32
 8011516:	6023      	strmi	r3, [r4, #0]
 8011518:	b11d      	cbz	r5, 8011522 <_printf_i+0x19e>
 801151a:	2310      	movs	r3, #16
 801151c:	e7ac      	b.n	8011478 <_printf_i+0xf4>
 801151e:	4827      	ldr	r0, [pc, #156]	@ (80115bc <_printf_i+0x238>)
 8011520:	e7e9      	b.n	80114f6 <_printf_i+0x172>
 8011522:	6823      	ldr	r3, [r4, #0]
 8011524:	f023 0320 	bic.w	r3, r3, #32
 8011528:	6023      	str	r3, [r4, #0]
 801152a:	e7f6      	b.n	801151a <_printf_i+0x196>
 801152c:	4616      	mov	r6, r2
 801152e:	e7bd      	b.n	80114ac <_printf_i+0x128>
 8011530:	6833      	ldr	r3, [r6, #0]
 8011532:	6825      	ldr	r5, [r4, #0]
 8011534:	6961      	ldr	r1, [r4, #20]
 8011536:	1d18      	adds	r0, r3, #4
 8011538:	6030      	str	r0, [r6, #0]
 801153a:	062e      	lsls	r6, r5, #24
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	d501      	bpl.n	8011544 <_printf_i+0x1c0>
 8011540:	6019      	str	r1, [r3, #0]
 8011542:	e002      	b.n	801154a <_printf_i+0x1c6>
 8011544:	0668      	lsls	r0, r5, #25
 8011546:	d5fb      	bpl.n	8011540 <_printf_i+0x1bc>
 8011548:	8019      	strh	r1, [r3, #0]
 801154a:	2300      	movs	r3, #0
 801154c:	6123      	str	r3, [r4, #16]
 801154e:	4616      	mov	r6, r2
 8011550:	e7bc      	b.n	80114cc <_printf_i+0x148>
 8011552:	6833      	ldr	r3, [r6, #0]
 8011554:	1d1a      	adds	r2, r3, #4
 8011556:	6032      	str	r2, [r6, #0]
 8011558:	681e      	ldr	r6, [r3, #0]
 801155a:	6862      	ldr	r2, [r4, #4]
 801155c:	2100      	movs	r1, #0
 801155e:	4630      	mov	r0, r6
 8011560:	f7ee febe 	bl	80002e0 <memchr>
 8011564:	b108      	cbz	r0, 801156a <_printf_i+0x1e6>
 8011566:	1b80      	subs	r0, r0, r6
 8011568:	6060      	str	r0, [r4, #4]
 801156a:	6863      	ldr	r3, [r4, #4]
 801156c:	6123      	str	r3, [r4, #16]
 801156e:	2300      	movs	r3, #0
 8011570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011574:	e7aa      	b.n	80114cc <_printf_i+0x148>
 8011576:	6923      	ldr	r3, [r4, #16]
 8011578:	4632      	mov	r2, r6
 801157a:	4649      	mov	r1, r9
 801157c:	4640      	mov	r0, r8
 801157e:	47d0      	blx	sl
 8011580:	3001      	adds	r0, #1
 8011582:	d0ad      	beq.n	80114e0 <_printf_i+0x15c>
 8011584:	6823      	ldr	r3, [r4, #0]
 8011586:	079b      	lsls	r3, r3, #30
 8011588:	d413      	bmi.n	80115b2 <_printf_i+0x22e>
 801158a:	68e0      	ldr	r0, [r4, #12]
 801158c:	9b03      	ldr	r3, [sp, #12]
 801158e:	4298      	cmp	r0, r3
 8011590:	bfb8      	it	lt
 8011592:	4618      	movlt	r0, r3
 8011594:	e7a6      	b.n	80114e4 <_printf_i+0x160>
 8011596:	2301      	movs	r3, #1
 8011598:	4632      	mov	r2, r6
 801159a:	4649      	mov	r1, r9
 801159c:	4640      	mov	r0, r8
 801159e:	47d0      	blx	sl
 80115a0:	3001      	adds	r0, #1
 80115a2:	d09d      	beq.n	80114e0 <_printf_i+0x15c>
 80115a4:	3501      	adds	r5, #1
 80115a6:	68e3      	ldr	r3, [r4, #12]
 80115a8:	9903      	ldr	r1, [sp, #12]
 80115aa:	1a5b      	subs	r3, r3, r1
 80115ac:	42ab      	cmp	r3, r5
 80115ae:	dcf2      	bgt.n	8011596 <_printf_i+0x212>
 80115b0:	e7eb      	b.n	801158a <_printf_i+0x206>
 80115b2:	2500      	movs	r5, #0
 80115b4:	f104 0619 	add.w	r6, r4, #25
 80115b8:	e7f5      	b.n	80115a6 <_printf_i+0x222>
 80115ba:	bf00      	nop
 80115bc:	08011df5 	.word	0x08011df5
 80115c0:	08011e06 	.word	0x08011e06

080115c4 <memmove>:
 80115c4:	4288      	cmp	r0, r1
 80115c6:	b510      	push	{r4, lr}
 80115c8:	eb01 0402 	add.w	r4, r1, r2
 80115cc:	d902      	bls.n	80115d4 <memmove+0x10>
 80115ce:	4284      	cmp	r4, r0
 80115d0:	4623      	mov	r3, r4
 80115d2:	d807      	bhi.n	80115e4 <memmove+0x20>
 80115d4:	1e43      	subs	r3, r0, #1
 80115d6:	42a1      	cmp	r1, r4
 80115d8:	d008      	beq.n	80115ec <memmove+0x28>
 80115da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80115e2:	e7f8      	b.n	80115d6 <memmove+0x12>
 80115e4:	4402      	add	r2, r0
 80115e6:	4601      	mov	r1, r0
 80115e8:	428a      	cmp	r2, r1
 80115ea:	d100      	bne.n	80115ee <memmove+0x2a>
 80115ec:	bd10      	pop	{r4, pc}
 80115ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80115f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80115f6:	e7f7      	b.n	80115e8 <memmove+0x24>

080115f8 <memcpy>:
 80115f8:	440a      	add	r2, r1
 80115fa:	4291      	cmp	r1, r2
 80115fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8011600:	d100      	bne.n	8011604 <memcpy+0xc>
 8011602:	4770      	bx	lr
 8011604:	b510      	push	{r4, lr}
 8011606:	f811 4b01 	ldrb.w	r4, [r1], #1
 801160a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801160e:	4291      	cmp	r1, r2
 8011610:	d1f9      	bne.n	8011606 <memcpy+0xe>
 8011612:	bd10      	pop	{r4, pc}

08011614 <_realloc_r>:
 8011614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011618:	4680      	mov	r8, r0
 801161a:	4615      	mov	r5, r2
 801161c:	460c      	mov	r4, r1
 801161e:	b921      	cbnz	r1, 801162a <_realloc_r+0x16>
 8011620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011624:	4611      	mov	r1, r2
 8011626:	f7ff bb99 	b.w	8010d5c <_malloc_r>
 801162a:	b92a      	cbnz	r2, 8011638 <_realloc_r+0x24>
 801162c:	f7ff fc9a 	bl	8010f64 <_free_r>
 8011630:	2400      	movs	r4, #0
 8011632:	4620      	mov	r0, r4
 8011634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011638:	f000 f81a 	bl	8011670 <_malloc_usable_size_r>
 801163c:	4285      	cmp	r5, r0
 801163e:	4606      	mov	r6, r0
 8011640:	d802      	bhi.n	8011648 <_realloc_r+0x34>
 8011642:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011646:	d8f4      	bhi.n	8011632 <_realloc_r+0x1e>
 8011648:	4629      	mov	r1, r5
 801164a:	4640      	mov	r0, r8
 801164c:	f7ff fb86 	bl	8010d5c <_malloc_r>
 8011650:	4607      	mov	r7, r0
 8011652:	2800      	cmp	r0, #0
 8011654:	d0ec      	beq.n	8011630 <_realloc_r+0x1c>
 8011656:	42b5      	cmp	r5, r6
 8011658:	462a      	mov	r2, r5
 801165a:	4621      	mov	r1, r4
 801165c:	bf28      	it	cs
 801165e:	4632      	movcs	r2, r6
 8011660:	f7ff ffca 	bl	80115f8 <memcpy>
 8011664:	4621      	mov	r1, r4
 8011666:	4640      	mov	r0, r8
 8011668:	f7ff fc7c 	bl	8010f64 <_free_r>
 801166c:	463c      	mov	r4, r7
 801166e:	e7e0      	b.n	8011632 <_realloc_r+0x1e>

08011670 <_malloc_usable_size_r>:
 8011670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011674:	1f18      	subs	r0, r3, #4
 8011676:	2b00      	cmp	r3, #0
 8011678:	bfbc      	itt	lt
 801167a:	580b      	ldrlt	r3, [r1, r0]
 801167c:	18c0      	addlt	r0, r0, r3
 801167e:	4770      	bx	lr

08011680 <_init>:
 8011680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011682:	bf00      	nop
 8011684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011686:	bc08      	pop	{r3}
 8011688:	469e      	mov	lr, r3
 801168a:	4770      	bx	lr

0801168c <_fini>:
 801168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801168e:	bf00      	nop
 8011690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011692:	bc08      	pop	{r3}
 8011694:	469e      	mov	lr, r3
 8011696:	4770      	bx	lr
