
JPEG_MJPEG_VideoDecoding_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010920  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  08010bc0  08010bc0  00011bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011340  08011340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011348  08011348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801134c  0801134c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  20000000  08011350  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00018998  20000060  20000060  00013060  2**2
                  ALLOC
  8 ._user_heap_stack 00002400  200189f8  200189f8  00013060  2**0
                  ALLOC
  9 .d1           0004b000  24000000  24000000  00014000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00013060  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001f3d4  00000000  00000000  0001308e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000407e  00000000  00000000  00032462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001798  00000000  00000000  000364e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000011f7  00000000  00000000  00037c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00007b3a  00000000  00000000  00038e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024ca7  00000000  00000000  000409a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001d22e6  00000000  00000000  00065650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00237936  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006608  00000000  00000000  0023797c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000000a3  00000000  00000000  0023df84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000060 	.word	0x20000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010ba8 	.word	0x08010ba8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000064 	.word	0x20000064
 80002dc:	08010ba8 	.word	0x08010ba8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t BSP_SD_Init(uint32_t Instance)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	@ 0x28
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000388:	2300      	movs	r3, #0
 800038a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;

  if(Instance >= SD_INSTANCES_NBR)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d003      	beq.n	800039a <BSP_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000392:	f06f 0301 	mvn.w	r3, #1
 8000396:	627b      	str	r3, [r7, #36]	@ 0x24
 8000398:	e063      	b.n	8000462 <BSP_SD_Init+0xe2>
  }
  else
  {
    /* Configure Input mode for SD detection pin */
    SD_DETECT_GPIO_CLK_ENABLE();
 800039a:	4b34      	ldr	r3, [pc, #208]	@ (800046c <BSP_SD_Init+0xec>)
 800039c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003a0:	4a32      	ldr	r2, [pc, #200]	@ (800046c <BSP_SD_Init+0xec>)
 80003a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003aa:	4b30      	ldr	r3, [pc, #192]	@ (800046c <BSP_SD_Init+0xec>)
 80003ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	68fb      	ldr	r3, [r7, #12]
    gpio_init_structure.Pin = SD_DETECT_PIN;
 80003b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003bc:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 80003be:	2301      	movs	r3, #1
 80003c0:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c2:	2302      	movs	r3, #2
 80003c4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	4827      	ldr	r0, [pc, #156]	@ (8000470 <BSP_SD_Init+0xf0>)
 80003d2:	f000 ff3f 	bl	8001254 <HAL_GPIO_Init>

    if(BSP_SD_IsDetected(Instance) != SD_PRESENT)
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f000 f876 	bl	80004c8 <BSP_SD_IsDetected>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d003      	beq.n	80003ea <BSP_SD_Init+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80003e2:	f06f 0306 	mvn.w	r3, #6
 80003e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80003e8:	e03b      	b.n	8000462 <BSP_SD_Init+0xe2>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SD initialization */
      SD_MspInit(&hsd_sdmmc[Instance]);
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	4613      	mov	r3, r2
 80003ee:	015b      	lsls	r3, r3, #5
 80003f0:	1a9b      	subs	r3, r3, r2
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	4a1f      	ldr	r2, [pc, #124]	@ (8000474 <BSP_SD_Init+0xf4>)
 80003f6:	4413      	add	r3, r2
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 f929 	bl	8000650 <SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS   */

      if(ret == BSP_ERROR_NONE)
 80003fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000400:	2b00      	cmp	r3, #0
 8000402:	d12e      	bne.n	8000462 <BSP_SD_Init+0xe2>
      {
        /* HAL SD initialization and Enable wide operation   */
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	4613      	mov	r3, r2
 8000408:	015b      	lsls	r3, r3, #5
 800040a:	1a9b      	subs	r3, r3, r2
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	4a19      	ldr	r2, [pc, #100]	@ (8000474 <BSP_SD_Init+0xf4>)
 8000410:	4413      	add	r3, r2
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f830 	bl	8000478 <MX_SDMMC1_SD_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d003      	beq.n	8000426 <BSP_SD_Init+0xa6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800041e:	f06f 0303 	mvn.w	r3, #3
 8000422:	627b      	str	r3, [r7, #36]	@ 0x24
 8000424:	e01d      	b.n	8000462 <BSP_SD_Init+0xe2>
        }
#if (USE_SD_BUS_WIDE_4B > 0)
        else if(HAL_SD_ConfigWideBusOperation(&hsd_sdmmc[Instance], SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	4613      	mov	r3, r2
 800042a:	015b      	lsls	r3, r3, #5
 800042c:	1a9b      	subs	r3, r3, r2
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	4a10      	ldr	r2, [pc, #64]	@ (8000474 <BSP_SD_Init+0xf4>)
 8000432:	4413      	add	r3, r2
 8000434:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000438:	4618      	mov	r0, r3
 800043a:	f008 fad5 	bl	80089e8 <HAL_SD_ConfigWideBusOperation>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d003      	beq.n	800044c <BSP_SD_Init+0xcc>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8000444:	f06f 0303 	mvn.w	r3, #3
 8000448:	627b      	str	r3, [r7, #36]	@ 0x24
 800044a:	e00a      	b.n	8000462 <BSP_SD_Init+0xe2>
        }
#endif
        else
        {
          /* Switch to High Speed mode if the card support this mode */
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	4613      	mov	r3, r2
 8000450:	015b      	lsls	r3, r3, #5
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4a07      	ldr	r2, [pc, #28]	@ (8000474 <BSP_SD_Init+0xf4>)
 8000458:	4413      	add	r3, r2
 800045a:	2102      	movs	r1, #2
 800045c:	4618      	mov	r0, r3
 800045e:	f008 fbd5 	bl	8008c0c <HAL_SD_ConfigSpeedBusOperation>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }
    }
  }
  return ret;
 8000462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000464:	4618      	mov	r0, r3
 8000466:	3728      	adds	r7, #40	@ 0x28
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	58024400 	.word	0x58024400
 8000470:	58022000 	.word	0x58022000
 8000474:	2000007c 	.word	0x2000007c

08000478 <MX_SDMMC1_SD_Init>:
  * @brief  Initializes the SDMMC1 peripheral.
  * @param  hsd SD handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDMMC1_SD_Init(SD_HandleTypeDef *hsd)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000480:	2300      	movs	r3, #0
 8000482:	73fb      	strb	r3, [r7, #15]
  /* uSD device interface configuration */
  hsd->Instance                 = SDMMC1;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a0f      	ldr	r2, [pc, #60]	@ (80004c4 <MX_SDMMC1_SD_Init+0x4c>)
 8000488:	601a      	str	r2, [r3, #0]
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2200      	movs	r2, #0
 800048e:	605a      	str	r2, [r3, #4]
  hsd->Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
#if (USE_SD_BUS_WIDE_4B > 0)
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_4B;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800049c:	60da      	str	r2, [r3, #12]
#else
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_1B;
#endif
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
#endif /*USE_SD_TRANSCEIVER*/
#if ( USE_SD_HIGH_PERFORMANCE > 0 )
  hsd->Init.ClockDiv            = SDMMC_HSpeed_CLK_DIV;
#else
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2204      	movs	r2, #4
 80004a8:	615a      	str	r2, [r3, #20]
#endif /*USE_SD_HIGH_PERFORMANCE*/

  /* HAL SD initialization   */
  if(HAL_SD_Init(hsd) != HAL_OK)
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	f007 fbcc 	bl	8007c48 <HAL_SD_Init>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <MX_SDMMC1_SD_Init+0x42>
  {
    ret = HAL_ERROR;
 80004b6:	2301      	movs	r3, #1
 80004b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	52007000 	.word	0x52007000

080004c8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t BSP_SD_IsDetected(uint32_t Instance)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80004d0:	f06f 0305 	mvn.w	r3, #5
 80004d4:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d002      	beq.n	80004e2 <BSP_SD_IsDetected+0x1a>
  {
    return BSP_ERROR_WRONG_PARAM;
 80004dc:	f06f 0301 	mvn.w	r3, #1
 80004e0:	e00f      	b.n	8000502 <BSP_SD_IsDetected+0x3a>
  }
  else
  {
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 80004e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004e6:	4809      	ldr	r0, [pc, #36]	@ (800050c <BSP_SD_IsDetected+0x44>)
 80004e8:	f001 f864 	bl	80015b4 <HAL_GPIO_ReadPin>
 80004ec:	4603      	mov	r3, r0
 80004ee:	60fb      	str	r3, [r7, #12]
    /* Check SD card detect pin */
    if(ret != GPIO_PIN_RESET)
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d002      	beq.n	80004fc <BSP_SD_IsDetected+0x34>
    {
      ret = (int32_t)SD_NOT_PRESENT;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	e001      	b.n	8000500 <BSP_SD_IsDetected+0x38>
    }
    else
    {
      ret = (int32_t)SD_PRESENT;
 80004fc:	2301      	movs	r3, #1
 80004fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000500:	68fb      	ldr	r3, [r7, #12]
}
 8000502:	4618      	mov	r0, r3
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	58022000 	.word	0x58022000

08000510 <BSP_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t BSP_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af02      	add	r7, sp, #8
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
 800051c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2264      	movs	r2, #100	@ 0x64
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d003      	beq.n	800053a <BSP_SD_ReadBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000532:	f06f 0301 	mvn.w	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	e013      	b.n	8000562 <BSP_SD_ReadBlocks+0x52>
  }
  else
  {
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	4613      	mov	r3, r2
 800053e:	015b      	lsls	r3, r3, #5
 8000540:	1a9b      	subs	r3, r3, r2
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	4a09      	ldr	r2, [pc, #36]	@ (800056c <BSP_SD_ReadBlocks+0x5c>)
 8000546:	1898      	adds	r0, r3, r2
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	68b9      	ldr	r1, [r7, #8]
 8000552:	f007 fca3 	bl	8007e9c <HAL_SD_ReadBlocks>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d002      	beq.n	8000562 <BSP_SD_ReadBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800055c:	f06f 0303 	mvn.w	r3, #3
 8000560:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 8000562:	697b      	ldr	r3, [r7, #20]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000007c 	.word	0x2000007c

08000570 <BSP_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t BSP_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af02      	add	r7, sp, #8
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	2264      	movs	r2, #100	@ 0x64
 8000586:	fb02 f303 	mul.w	r3, r2, r3
 800058a:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d003      	beq.n	800059a <BSP_SD_WriteBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000592:	f06f 0301 	mvn.w	r3, #1
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	e013      	b.n	80005c2 <BSP_SD_WriteBlocks+0x52>
  }
  else
  {
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	4613      	mov	r3, r2
 800059e:	015b      	lsls	r3, r3, #5
 80005a0:	1a9b      	subs	r3, r3, r2
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	4a09      	ldr	r2, [pc, #36]	@ (80005cc <BSP_SD_WriteBlocks+0x5c>)
 80005a6:	1898      	adds	r0, r3, r2
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	68b9      	ldr	r1, [r7, #8]
 80005b2:	f007 fdfd 	bl	80081b0 <HAL_SD_WriteBlocks>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <BSP_SD_WriteBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80005bc:	f06f 0303 	mvn.w	r3, #3
 80005c0:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 80005c2:	697b      	ldr	r3, [r7, #20]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000007c 	.word	0x2000007c

080005d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t BSP_SD_GetCardState(uint32_t Instance)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	4613      	mov	r3, r2
 80005dc:	015b      	lsls	r3, r3, #5
 80005de:	1a9b      	subs	r3, r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4a07      	ldr	r2, [pc, #28]	@ (8000600 <BSP_SD_GetCardState+0x30>)
 80005e4:	4413      	add	r3, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f008 fbcc 	bl	8008d84 <HAL_SD_GetCardState>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	bf14      	ite	ne
 80005f2:	2301      	movne	r3, #1
 80005f4:	2300      	moveq	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000007c 	.word	0x2000007c

08000604 <BSP_SD_GetCardInfo>:
  * @param  Instance  SD Instance
  * @param  CardInfo  Pointer to HAL_SD_CardInfoTypedef structure
  * @retval BSP status
  */
int32_t BSP_SD_GetCardInfo(uint32_t Instance, BSP_SD_CardInfo *CardInfo)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d003      	beq.n	8000620 <BSP_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000618:	f06f 0301 	mvn.w	r3, #1
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	e010      	b.n	8000642 <BSP_SD_GetCardInfo+0x3e>
  }
  else
  {
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	4613      	mov	r3, r2
 8000624:	015b      	lsls	r3, r3, #5
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4a08      	ldr	r2, [pc, #32]	@ (800064c <BSP_SD_GetCardInfo+0x48>)
 800062c:	4413      	add	r3, r2
 800062e:	6839      	ldr	r1, [r7, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f008 f9ad 	bl	8008990 <HAL_SD_GetCardInfo>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d002      	beq.n	8000642 <BSP_SD_GetCardInfo+0x3e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800063c:	f06f 0303 	mvn.w	r3, #3
 8000640:	60fb      	str	r3, [r7, #12]
    }
  }
  /* Return BSP status */
  return ret;
 8000642:	68fb      	ldr	r3, [r7, #12]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000007c 	.word	0x2000007c

08000650 <SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd  SD handle
  * @retval None
  */
static void SD_MspInit(SD_HandleTypeDef *hsd)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	@ 0x30
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a44      	ldr	r2, [pc, #272]	@ (800076c <SD_MspInit+0x11c>)
 800065c:	4293      	cmp	r3, r2
 800065e:	f040 8081 	bne.w	8000764 <SD_MspInit+0x114>
    therefore Camera must be power down before using the BSP SD
    To power down the camera , Set GPIOJ pin 14 to high
    */

    /* Enable GPIO J clock */
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000662:	4b43      	ldr	r3, [pc, #268]	@ (8000770 <SD_MspInit+0x120>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000668:	4a41      	ldr	r2, [pc, #260]	@ (8000770 <SD_MspInit+0x120>)
 800066a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800066e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000672:	4b3f      	ldr	r3, [pc, #252]	@ (8000770 <SD_MspInit+0x120>)
 8000674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800067c:	61bb      	str	r3, [r7, #24]
 800067e:	69bb      	ldr	r3, [r7, #24]

    gpio_init_structure.Pin       = GPIO_PIN_14;
 8000680:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000684:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	4836      	ldr	r0, [pc, #216]	@ (8000774 <SD_MspInit+0x124>)
 800069a:	f000 fddb 	bl	8001254 <HAL_GPIO_Init>

    /* Set the camera POWER_DOWN pin (active high) */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a4:	4833      	ldr	r0, [pc, #204]	@ (8000774 <SD_MspInit+0x124>)
 80006a6:	f000 ff9d 	bl	80015e4 <HAL_GPIO_WritePin>
#endif

    /* Enable SDIO clock */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <SD_MspInit+0x120>)
 80006ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006b0:	4a2f      	ldr	r2, [pc, #188]	@ (8000770 <SD_MspInit+0x120>)
 80006b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006b6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80006ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000770 <SD_MspInit+0x120>)
 80006bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006c4:	617b      	str	r3, [r7, #20]
 80006c6:	697b      	ldr	r3, [r7, #20]


    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c8:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SD_MspInit+0x120>)
 80006ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ce:	4a28      	ldr	r2, [pc, #160]	@ (8000770 <SD_MspInit+0x120>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d8:	4b25      	ldr	r3, [pc, #148]	@ (8000770 <SD_MspInit+0x120>)
 80006da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	4b22      	ldr	r3, [pc, #136]	@ (8000770 <SD_MspInit+0x120>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ec:	4a20      	ldr	r2, [pc, #128]	@ (8000770 <SD_MspInit+0x120>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000770 <SD_MspInit+0x120>)
 80006f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <SD_MspInit+0x120>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070a:	4a19      	ldr	r2, [pc, #100]	@ (8000770 <SD_MspInit+0x120>)
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000714:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <SD_MspInit+0x120>)
 8000716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]


    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8000726:	2301      	movs	r3, #1
 8000728:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800072a:	2303      	movs	r3, #3
 800072c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800072e:	230c      	movs	r3, #12
 8000730:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SD_BUS_WIDE_4B > 0)
    /* SDMMC GPIO CLKIN PB8, D0 PC8, D1 PC9, D2 PC10, D3 PC11, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8000732:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000736:	61fb      	str	r3, [r7, #28]
    /* SDMMC GPIO CLKIN PB8, D0 PC8, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif

    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	480e      	ldr	r0, [pc, #56]	@ (8000778 <SD_MspInit+0x128>)
 8000740:	f000 fd88 	bl	8001254 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
 8000744:	2304      	movs	r3, #4
 8000746:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	480b      	ldr	r0, [pc, #44]	@ (800077c <SD_MspInit+0x12c>)
 8000750:	f000 fd80 	bl	8001254 <HAL_GPIO_Init>

    /* NVIC configuration for SDIO interrupts */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	210e      	movs	r1, #14
 8000758:	2031      	movs	r0, #49	@ 0x31
 800075a:	f000 fa66 	bl	8000c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800075e:	2031      	movs	r0, #49	@ 0x31
 8000760:	f000 fa7d 	bl	8000c5e <HAL_NVIC_EnableIRQ>
  }
}
 8000764:	bf00      	nop
 8000766:	3730      	adds	r7, #48	@ 0x30
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000007c 	.word	0x2000007c
 8000770:	58024400 	.word	0x58024400
 8000774:	58022400 	.word	0x58022400
 8000778:	58020800 	.word	0x58020800
 800077c:	58020c00 	.word	0x58020c00

08000780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000784:	4b37      	ldr	r3, [pc, #220]	@ (8000864 <SystemInit+0xe4>)
 8000786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800078a:	4a36      	ldr	r2, [pc, #216]	@ (8000864 <SystemInit+0xe4>)
 800078c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000790:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000794:	4b34      	ldr	r3, [pc, #208]	@ (8000868 <SystemInit+0xe8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	2b06      	cmp	r3, #6
 800079e:	d807      	bhi.n	80007b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007a0:	4b31      	ldr	r3, [pc, #196]	@ (8000868 <SystemInit+0xe8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f023 030f 	bic.w	r3, r3, #15
 80007a8:	4a2f      	ldr	r2, [pc, #188]	@ (8000868 <SystemInit+0xe8>)
 80007aa:	f043 0307 	orr.w	r3, r3, #7
 80007ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007b0:	4b2e      	ldr	r3, [pc, #184]	@ (800086c <SystemInit+0xec>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a2d      	ldr	r2, [pc, #180]	@ (800086c <SystemInit+0xec>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007bc:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <SystemInit+0xec>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007c2:	4b2a      	ldr	r3, [pc, #168]	@ (800086c <SystemInit+0xec>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	4929      	ldr	r1, [pc, #164]	@ (800086c <SystemInit+0xec>)
 80007c8:	4b29      	ldr	r3, [pc, #164]	@ (8000870 <SystemInit+0xf0>)
 80007ca:	4013      	ands	r3, r2
 80007cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007ce:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <SystemInit+0xe8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d007      	beq.n	80007ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007da:	4b23      	ldr	r3, [pc, #140]	@ (8000868 <SystemInit+0xe8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f023 030f 	bic.w	r3, r3, #15
 80007e2:	4a21      	ldr	r2, [pc, #132]	@ (8000868 <SystemInit+0xe8>)
 80007e4:	f043 0307 	orr.w	r3, r3, #7
 80007e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007ea:	4b20      	ldr	r3, [pc, #128]	@ (800086c <SystemInit+0xec>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007f0:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <SystemInit+0xec>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <SystemInit+0xec>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <SystemInit+0xec>)
 80007fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000874 <SystemInit+0xf4>)
 8000800:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <SystemInit+0xec>)
 8000804:	4a1c      	ldr	r2, [pc, #112]	@ (8000878 <SystemInit+0xf8>)
 8000806:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <SystemInit+0xec>)
 800080a:	4a1c      	ldr	r2, [pc, #112]	@ (800087c <SystemInit+0xfc>)
 800080c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <SystemInit+0xec>)
 8000810:	2200      	movs	r2, #0
 8000812:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <SystemInit+0xec>)
 8000816:	4a19      	ldr	r2, [pc, #100]	@ (800087c <SystemInit+0xfc>)
 8000818:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <SystemInit+0xec>)
 800081c:	2200      	movs	r2, #0
 800081e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <SystemInit+0xec>)
 8000822:	4a16      	ldr	r2, [pc, #88]	@ (800087c <SystemInit+0xfc>)
 8000824:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <SystemInit+0xec>)
 8000828:	2200      	movs	r2, #0
 800082a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <SystemInit+0xec>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <SystemInit+0xec>)
 8000832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000836:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <SystemInit+0xec>)
 800083a:	2200      	movs	r2, #0
 800083c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <SystemInit+0x100>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <SystemInit+0x104>)
 8000844:	4013      	ands	r3, r2
 8000846:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800084a:	d202      	bcs.n	8000852 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800084c:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <SystemInit+0x108>)
 800084e:	2201      	movs	r2, #1
 8000850:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <SystemInit+0x10c>)
 8000854:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000858:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00
 8000868:	52002000 	.word	0x52002000
 800086c:	58024400 	.word	0x58024400
 8000870:	eaf6ed7f 	.word	0xeaf6ed7f
 8000874:	02020200 	.word	0x02020200
 8000878:	01ff0000 	.word	0x01ff0000
 800087c:	01010280 	.word	0x01010280
 8000880:	5c001000 	.word	0x5c001000
 8000884:	ffff0000 	.word	0xffff0000
 8000888:	51008108 	.word	0x51008108
 800088c:	52004000 	.word	0x52004000

08000890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000896:	2003      	movs	r0, #3
 8000898:	f000 f9bc 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800089c:	f003 ffb4 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 80008a0:	4602      	mov	r2, r0
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <HAL_Init+0x68>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	0a1b      	lsrs	r3, r3, #8
 80008a8:	f003 030f 	and.w	r3, r3, #15
 80008ac:	4913      	ldr	r1, [pc, #76]	@ (80008fc <HAL_Init+0x6c>)
 80008ae:	5ccb      	ldrb	r3, [r1, r3]
 80008b0:	f003 031f 	and.w	r3, r3, #31
 80008b4:	fa22 f303 	lsr.w	r3, r2, r3
 80008b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_Init+0x68>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <HAL_Init+0x6c>)
 80008c4:	5cd3      	ldrb	r3, [r2, r3]
 80008c6:	f003 031f 	and.w	r3, r3, #31
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	fa22 f303 	lsr.w	r3, r2, r3
 80008d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000900 <HAL_Init+0x70>)
 80008d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000904 <HAL_Init+0x74>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008da:	200f      	movs	r0, #15
 80008dc:	f000 f814 	bl	8000908 <HAL_InitTick>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e002      	b.n	80008f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008ea:	f003 f8db 	bl	8003aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	58024400 	.word	0x58024400
 80008fc:	08010c48 	.word	0x08010c48
 8000900:	20000004 	.word	0x20000004
 8000904:	20000000 	.word	0x20000000

08000908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <HAL_InitTick+0x60>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d101      	bne.n	800091c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	e021      	b.n	8000960 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800091c:	4b13      	ldr	r3, [pc, #76]	@ (800096c <HAL_InitTick+0x64>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <HAL_InitTick+0x60>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092a:	fbb3 f3f1 	udiv	r3, r3, r1
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f9a1 	bl	8000c7a <HAL_SYSTICK_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e00e      	b.n	8000960 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d80a      	bhi.n	800095e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000948:	2200      	movs	r2, #0
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f000 f96b 	bl	8000c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000954:	4a06      	ldr	r2, [pc, #24]	@ (8000970 <HAL_InitTick+0x68>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	e000      	b.n	8000960 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000000c 	.word	0x2000000c
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008

08000974 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_IncTick+0x20>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_IncTick+0x24>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <HAL_IncTick+0x24>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	2000000c 	.word	0x2000000c
 8000998:	200000f8 	.word	0x200000f8

0800099c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <HAL_GetTick+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	200000f8 	.word	0x200000f8

080009b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009bc:	f7ff ffee 	bl	800099c <HAL_GetTick>
 80009c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009cc:	d005      	beq.n	80009da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ce:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <HAL_Delay+0x44>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4413      	add	r3, r2
 80009d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009da:	bf00      	nop
 80009dc:	f7ff ffde 	bl	800099c <HAL_GetTick>
 80009e0:	4602      	mov	r2, r0
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d8f7      	bhi.n	80009dc <HAL_Delay+0x28>
  {
  }
}
 80009ec:	bf00      	nop
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000000c 	.word	0x2000000c

080009fc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000a00:	4b05      	ldr	r3, [pc, #20]	@ (8000a18 <HAL_SuspendTick+0x1c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <HAL_SuspendTick+0x1c>)
 8000a06:	f023 0302 	bic.w	r3, r3, #2
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e010 	.word	0xe000e010

08000a1c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <HAL_ResumeTick+0x1c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <HAL_ResumeTick+0x1c>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e010 	.word	0xe000e010

08000a3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a40:	4b03      	ldr	r3, [pc, #12]	@ (8000a50 <HAL_GetREVID+0x14>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	0c1b      	lsrs	r3, r3, #16
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	5c001000 	.word	0x5c001000

08000a54 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <HAL_EnableCompensationCell+0x1c>)
 8000a5a:	6a1b      	ldr	r3, [r3, #32]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <HAL_EnableCompensationCell+0x1c>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6213      	str	r3, [r2, #32]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	58000400 	.word	0x58000400

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <__NVIC_SetPriorityGrouping+0x40>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	@ (8000ab4 <__NVIC_SetPriorityGrouping+0x40>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00
 8000ab8:	05fa0000 	.word	0x05fa0000

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	db0b      	blt.n	8000b02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	f003 021f 	and.w	r2, r3, #31
 8000af0:	4907      	ldr	r1, [pc, #28]	@ (8000b10 <__NVIC_EnableIRQ+0x38>)
 8000af2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af6:	095b      	lsrs	r3, r3, #5
 8000af8:	2001      	movs	r0, #1
 8000afa:	fa00 f202 	lsl.w	r2, r0, r2
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	@ (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	@ (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	@ 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	@ 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000be0:	d301      	bcc.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00f      	b.n	8000c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <SysTick_Config+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f7ff ff8e 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <SysTick_Config+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <SysTick_Config+0x40>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff29 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c38:	f7ff ff40 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000c3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff90 	bl	8000b68 <NVIC_EncodePriority>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff5f 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff33 	bl	8000ad8 <__NVIC_EnableIRQ>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ffa4 	bl	8000bd0 <SysTick_Config>
 8000c88:	4603      	mov	r3, r0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8000c98:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <HAL_GetCurrentCPUID+0x24>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	091b      	lsrs	r3, r3, #4
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	2b07      	cmp	r3, #7
 8000ca4:	d101      	bne.n	8000caa <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e000      	b.n	8000cac <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8000caa:	2301      	movs	r3, #1
  }
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e04f      	b.n	8000d6e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d106      	bne.n	8000ce8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f00c f91c 	bl	800cf20 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2202      	movs	r2, #2
 8000cec:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <HAL_DMA2D_Init+0xbc>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6851      	ldr	r1, [r2, #4]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	69d2      	ldr	r2, [r2, #28]
 8000d02:	4311      	orrs	r1, r2
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	6812      	ldr	r2, [r2, #0]
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d12:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <HAL_DMA2D_Init+0xc0>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	6891      	ldr	r1, [r2, #8]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	6992      	ldr	r2, [r2, #24]
 8000d1e:	4311      	orrs	r1, r2
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d2e:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <HAL_DMA2D_Init+0xc4>)
 8000d30:	4013      	ands	r3, r2
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68d1      	ldr	r1, [r2, #12]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	6812      	ldr	r2, [r2, #0]
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d44:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	051a      	lsls	r2, r3, #20
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	055b      	lsls	r3, r3, #21
 8000d54:	431a      	orrs	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	fff8ffbf 	.word	0xfff8ffbf
 8000d7c:	fffffef8 	.word	0xfffffef8
 8000d80:	ffff0000 	.word	0xffff0000

08000d84 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d101      	bne.n	8000da0 <HAL_DMA2D_Start+0x1c>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e018      	b.n	8000dd2 <HAL_DMA2D_Start+0x4e>
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2201      	movs	r2, #1
 8000da4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2202      	movs	r2, #2
 8000dac:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	68b9      	ldr	r1, [r7, #8]
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f000 f9a4 	bl	8001108 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0201 	orr.w	r2, r2, #1
 8000dce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d056      	beq.n	8000ea4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000df6:	f7ff fdd1 	bl	800099c <HAL_GetTick>
 8000dfa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8000dfc:	e04b      	b.n	8000e96 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d023      	beq.n	8000e58 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0320 	and.w	r3, r3, #32
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d005      	beq.n	8000e26 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000e1e:	f043 0202 	orr.w	r2, r3, #2
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d005      	beq.n	8000e3c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000e34:	f043 0201 	orr.w	r2, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2221      	movs	r2, #33	@ 0x21
 8000e42:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2204      	movs	r2, #4
 8000e48:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e0a5      	b.n	8000fa4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5e:	d01a      	beq.n	8000e96 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000e60:	f7ff fd9c 	bl	800099c <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	683a      	ldr	r2, [r7, #0]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d302      	bcc.n	8000e76 <HAL_DMA2D_PollForTransfer+0x9c>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10f      	bne.n	8000e96 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000e7a:	f043 0220 	orr.w	r2, r3, #32
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2203      	movs	r2, #3
 8000e86:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e086      	b.n	8000fa4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0ac      	beq.n	8000dfe <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 0320 	and.w	r3, r3, #32
 8000eae:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb6:	f003 0320 	and.w	r3, r3, #32
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d061      	beq.n	8000f8a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000ec6:	f7ff fd69 	bl	800099c <HAL_GetTick>
 8000eca:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8000ecc:	e056      	b.n	8000f7c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d02e      	beq.n	8000f3e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d005      	beq.n	8000ef6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000eee:	f043 0204 	orr.w	r2, r3, #4
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f003 0320 	and.w	r3, r3, #32
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000f04:	f043 0202 	orr.w	r2, r3, #2
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d005      	beq.n	8000f22 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000f1a:	f043 0201 	orr.w	r2, r3, #1
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2229      	movs	r2, #41	@ 0x29
 8000f28:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e032      	b.n	8000fa4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f44:	d01a      	beq.n	8000f7c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000f46:	f7ff fd29 	bl	800099c <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d302      	bcc.n	8000f5c <HAL_DMA2D_PollForTransfer+0x182>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d10f      	bne.n	8000f7c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8000f60:	f043 0220 	orr.w	r2, r3, #32
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e013      	b.n	8000fa4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0a1      	beq.n	8000ece <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2212      	movs	r2, #18
 8000f90:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d101      	bne.n	8000fd0 <HAL_DMA2D_ConfigLayer+0x24>
 8000fcc:	2302      	movs	r3, #2
 8000fce:	e092      	b.n	80010f6 <HAL_DMA2D_ConfigLayer+0x14a>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2202      	movs	r2, #2
 8000fdc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	3328      	adds	r3, #40	@ 0x28
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	041b      	lsls	r3, r3, #16
 8000ffc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001004:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8001010:	4b3c      	ldr	r3, [pc, #240]	@ (8001104 <HAL_DMA2D_ConfigLayer+0x158>)
 8001012:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b0a      	cmp	r3, #10
 800101a:	d003      	beq.n	8001024 <HAL_DMA2D_ConfigLayer+0x78>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b09      	cmp	r3, #9
 8001022:	d107      	bne.n	8001034 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	e005      	b.n	8001040 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	061b      	lsls	r3, r3, #24
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d120      	bne.n	8001088 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	43db      	mvns	r3, r3
 8001050:	ea02 0103 	and.w	r1, r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	430a      	orrs	r2, r1
 800105c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	6812      	ldr	r2, [r2, #0]
 8001066:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b0a      	cmp	r3, #10
 800106e:	d003      	beq.n	8001078 <HAL_DMA2D_ConfigLayer+0xcc>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b09      	cmp	r3, #9
 8001076:	d135      	bne.n	80010e4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001084:	629a      	str	r2, [r3, #40]	@ 0x28
 8001086:	e02d      	b.n	80010e4 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b0b      	cmp	r3, #11
 800108e:	d109      	bne.n	80010a4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	049b      	lsls	r3, r3, #18
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80010a2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	69da      	ldr	r2, [r3, #28]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	ea02 0103 	and.w	r1, r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	430a      	orrs	r2, r1
 80010ba:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b0a      	cmp	r3, #10
 80010cc:	d003      	beq.n	80010d6 <HAL_DMA2D_ConfigLayer+0x12a>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b09      	cmp	r3, #9
 80010d4:	d106      	bne.n	80010e4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80010e2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	ff33000f 	.word	0xff33000f

08001108 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001108:	b480      	push	{r7}
 800110a:	b08b      	sub	sp, #44	@ 0x2c
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	041a      	lsls	r2, r3, #16
 8001124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001126:	431a      	orrs	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	430a      	orrs	r2, r1
 800112e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001140:	d174      	bne.n	800122c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001148:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001150:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001158:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d108      	bne.n	800117a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	431a      	orrs	r2, r3
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	4313      	orrs	r3, r2
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	4313      	orrs	r3, r2
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
 8001178:	e053      	b.n	8001222 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d106      	bne.n	8001190 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	4313      	orrs	r3, r2
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	4313      	orrs	r3, r2
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
 800118e:	e048      	b.n	8001222 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d111      	bne.n	80011bc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	0cdb      	lsrs	r3, r3, #19
 800119c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	0a9b      	lsrs	r3, r3, #10
 80011a2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	08db      	lsrs	r3, r3, #3
 80011a8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	015a      	lsls	r2, r3, #5
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	02db      	lsls	r3, r3, #11
 80011b2:	4313      	orrs	r3, r2
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ba:	e032      	b.n	8001222 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d117      	bne.n	80011f4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80011c4:	6a3b      	ldr	r3, [r7, #32]
 80011c6:	0fdb      	lsrs	r3, r3, #31
 80011c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	0cdb      	lsrs	r3, r3, #19
 80011ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	0adb      	lsrs	r3, r3, #11
 80011d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	08db      	lsrs	r3, r3, #3
 80011da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	015a      	lsls	r2, r3, #5
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	029b      	lsls	r3, r3, #10
 80011e4:	431a      	orrs	r2, r3
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	03db      	lsls	r3, r3, #15
 80011ea:	4313      	orrs	r3, r2
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f2:	e016      	b.n	8001222 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	0f1b      	lsrs	r3, r3, #28
 80011f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	0d1b      	lsrs	r3, r3, #20
 80011fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	0b1b      	lsrs	r3, r3, #12
 8001204:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	011a      	lsls	r2, r3, #4
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	431a      	orrs	r2, r3
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	031b      	lsls	r3, r3, #12
 800121a:	4313      	orrs	r3, r2
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	4313      	orrs	r3, r2
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001228:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800122a:	e00d      	b.n	8001248 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001234:	d104      	bne.n	8001240 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	615a      	str	r2, [r3, #20]
}
 800123e:	e003      	b.n	8001248 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	60da      	str	r2, [r3, #12]
}
 8001248:	bf00      	nop
 800124a:	372c      	adds	r7, #44	@ 0x2c
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	@ 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001262:	4b89      	ldr	r3, [pc, #548]	@ (8001488 <HAL_GPIO_Init+0x234>)
 8001264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001266:	e194      	b.n	8001592 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	2101      	movs	r1, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8186 	beq.w	800158c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d005      	beq.n	8001298 <HAL_GPIO_Init+0x44>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d130      	bne.n	80012fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68da      	ldr	r2, [r3, #12]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ce:	2201      	movs	r2, #1
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	f003 0201 	and.w	r2, r3, #1
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	2b03      	cmp	r3, #3
 8001304:	d017      	beq.n	8001336 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0303 	and.w	r3, r3, #3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d123      	bne.n	800138a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	220f      	movs	r2, #15
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	69b9      	ldr	r1, [r7, #24]
 8001386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0203 	and.w	r2, r3, #3
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 80e0 	beq.w	800158c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013cc:	4b2f      	ldr	r3, [pc, #188]	@ (800148c <HAL_GPIO_Init+0x238>)
 80013ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013d2:	4a2e      	ldr	r2, [pc, #184]	@ (800148c <HAL_GPIO_Init+0x238>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013dc:	4b2b      	ldr	r3, [pc, #172]	@ (800148c <HAL_GPIO_Init+0x238>)
 80013de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ea:	4a29      	ldr	r2, [pc, #164]	@ (8001490 <HAL_GPIO_Init+0x23c>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a20      	ldr	r2, [pc, #128]	@ (8001494 <HAL_GPIO_Init+0x240>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d052      	beq.n	80014bc <HAL_GPIO_Init+0x268>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a1f      	ldr	r2, [pc, #124]	@ (8001498 <HAL_GPIO_Init+0x244>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d031      	beq.n	8001482 <HAL_GPIO_Init+0x22e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a1e      	ldr	r2, [pc, #120]	@ (800149c <HAL_GPIO_Init+0x248>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d02b      	beq.n	800147e <HAL_GPIO_Init+0x22a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a1d      	ldr	r2, [pc, #116]	@ (80014a0 <HAL_GPIO_Init+0x24c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d025      	beq.n	800147a <HAL_GPIO_Init+0x226>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a1c      	ldr	r2, [pc, #112]	@ (80014a4 <HAL_GPIO_Init+0x250>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d01f      	beq.n	8001476 <HAL_GPIO_Init+0x222>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <HAL_GPIO_Init+0x254>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d019      	beq.n	8001472 <HAL_GPIO_Init+0x21e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a1a      	ldr	r2, [pc, #104]	@ (80014ac <HAL_GPIO_Init+0x258>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x21a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a19      	ldr	r2, [pc, #100]	@ (80014b0 <HAL_GPIO_Init+0x25c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x216>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a18      	ldr	r2, [pc, #96]	@ (80014b4 <HAL_GPIO_Init+0x260>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x212>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a17      	ldr	r2, [pc, #92]	@ (80014b8 <HAL_GPIO_Init+0x264>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x20e>
 800145e:	2309      	movs	r3, #9
 8001460:	e02d      	b.n	80014be <HAL_GPIO_Init+0x26a>
 8001462:	230a      	movs	r3, #10
 8001464:	e02b      	b.n	80014be <HAL_GPIO_Init+0x26a>
 8001466:	2308      	movs	r3, #8
 8001468:	e029      	b.n	80014be <HAL_GPIO_Init+0x26a>
 800146a:	2307      	movs	r3, #7
 800146c:	e027      	b.n	80014be <HAL_GPIO_Init+0x26a>
 800146e:	2306      	movs	r3, #6
 8001470:	e025      	b.n	80014be <HAL_GPIO_Init+0x26a>
 8001472:	2305      	movs	r3, #5
 8001474:	e023      	b.n	80014be <HAL_GPIO_Init+0x26a>
 8001476:	2304      	movs	r3, #4
 8001478:	e021      	b.n	80014be <HAL_GPIO_Init+0x26a>
 800147a:	2303      	movs	r3, #3
 800147c:	e01f      	b.n	80014be <HAL_GPIO_Init+0x26a>
 800147e:	2302      	movs	r3, #2
 8001480:	e01d      	b.n	80014be <HAL_GPIO_Init+0x26a>
 8001482:	2301      	movs	r3, #1
 8001484:	e01b      	b.n	80014be <HAL_GPIO_Init+0x26a>
 8001486:	bf00      	nop
 8001488:	58000080 	.word	0x58000080
 800148c:	58024400 	.word	0x58024400
 8001490:	58000400 	.word	0x58000400
 8001494:	58020000 	.word	0x58020000
 8001498:	58020400 	.word	0x58020400
 800149c:	58020800 	.word	0x58020800
 80014a0:	58020c00 	.word	0x58020c00
 80014a4:	58021000 	.word	0x58021000
 80014a8:	58021400 	.word	0x58021400
 80014ac:	58021800 	.word	0x58021800
 80014b0:	58021c00 	.word	0x58021c00
 80014b4:	58022000 	.word	0x58022000
 80014b8:	58022400 	.word	0x58022400
 80014bc:	2300      	movs	r3, #0
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	f002 0203 	and.w	r2, r2, #3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4093      	lsls	r3, r2
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ce:	4938      	ldr	r1, [pc, #224]	@ (80015b0 <HAL_GPIO_Init+0x35c>)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001502:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001530:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	3301      	adds	r3, #1
 8001590:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	f47f ae63 	bne.w	8001268 <HAL_GPIO_Init+0x14>
  }
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	3724      	adds	r7, #36	@ 0x24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	58000400 	.word	0x58000400

080015b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	887b      	ldrh	r3, [r7, #2]
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e001      	b.n	80015d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
 80015f0:	4613      	mov	r3, r2
 80015f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f4:	787b      	ldrb	r3, [r7, #1]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001600:	e003      	b.n	800160a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001602:	887b      	ldrh	r3, [r7, #2]
 8001604:	041a      	lsls	r2, r3, #16
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	619a      	str	r2, [r3, #24]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001624:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001630:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	4618      	mov	r0, r3
 800163e:	f00b fb1c 	bl	800cc7a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e070      	b.n	8001740 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d106      	bne.n	8001678 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f00b fb0c 	bl	800cc90 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2202      	movs	r2, #2
 800167c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0201 	bic.w	r2, r2, #1
 800169e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80016ae:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80016be:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016ce:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80016de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a19      	ldr	r2, [pc, #100]	@ (8001748 <HAL_JPEG_Init+0xfc>)
 80016e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a18      	ldr	r2, [pc, #96]	@ (800174c <HAL_JPEG_Init+0x100>)
 80016ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 fcdb 	bl	80020b4 <JPEG_Set_HuffEnc_Mem>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e018      	b.n	8001740 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800171c:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	08010e38 	.word	0x08010e38
 800174c:	08010e78 	.word	0x08010e78

08001750 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <HAL_JPEG_GetInfo+0x16>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e083      	b.n	8001872 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d103      	bne.n	8001780 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2210      	movs	r2, #16
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	e017      	b.n	80017b0 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d103      	bne.n	8001796 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	e00c      	b.n	80017b0 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d103      	bne.n	80017ac <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	2230      	movs	r2, #48	@ 0x30
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e001      	b.n	80017b0 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e060      	b.n	8001872 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	0c1b      	lsrs	r3, r3, #16
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0c1b      	lsrs	r3, r3, #16
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b10      	cmp	r3, #16
 80017d2:	d003      	beq.n	80017dc <HAL_JPEG_GetInfo+0x8c>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b30      	cmp	r3, #48	@ 0x30
 80017da:	d140      	bne.n	800185e <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	f003 030f 	and.w	r3, r3, #15
 8001804:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d109      	bne.n	8001820 <HAL_JPEG_GetInfo+0xd0>
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <HAL_JPEG_GetInfo+0xd0>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d103      	bne.n	8001820 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2202      	movs	r2, #2
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	e01d      	b.n	800185c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_JPEG_GetInfo+0xea>
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d106      	bne.n	800183a <HAL_JPEG_GetInfo+0xea>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d103      	bne.n	800183a <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2200      	movs	r2, #0
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	e010      	b.n	800185c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b03      	cmp	r3, #3
 800183e:	d109      	bne.n	8001854 <HAL_JPEG_GetInfo+0x104>
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d106      	bne.n	8001854 <HAL_JPEG_GetInfo+0x104>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d103      	bne.n	8001854 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2201      	movs	r2, #1
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	e003      	b.n	800185c <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	2200      	movs	r2, #0
 8001858:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800185a:	e003      	b.n	8001864 <HAL_JPEG_GetInfo+0x114>
 800185c:	e002      	b.n	8001864 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2200      	movs	r2, #0
 8001862:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f001 fd17 	bl	8003298 <JPEG_GetQuality>
 800186a:	4602      	mov	r2, r0
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_JPEG_Decode_DMA+0x20>
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <HAL_JPEG_Decode_DMA+0x20>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e04c      	b.n	8001938 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_JPEG_Decode_DMA+0x32>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e045      	b.n	8001938 <HAL_JPEG_Decode_DMA+0xbe>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d134      	bne.n	800192a <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2204      	movs	r2, #4
 80018c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018cc:	f023 020f 	bic.w	r2, r3, #15
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d8:	f043 020e 	orr.w	r2, r3, #14
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 fe57 	bl	80025b8 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f001 f978 	bl	8002c00 <JPEG_DMA_StartProcess>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00f      	beq.n	8001936 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2206      	movs	r2, #6
 800191a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e006      	b.n	8001938 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8001932:	2302      	movs	r3, #2
 8001934:	e000      	b.n	8001938 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d116      	bne.n	8001988 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001968:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d033      	beq.n	80019e2 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800197e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	655a      	str	r2, [r3, #84]	@ 0x54
 8001986:	e02c      	b.n	80019e2 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800198c:	f003 030c 	and.w	r3, r3, #12
 8001990:	2b08      	cmp	r3, #8
 8001992:	d126      	bne.n	80019e2 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f043 0306 	orr.w	r3, r3, #6
 80019b0:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d009      	beq.n	80019d0 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80019ce:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43da      	mvns	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	400a      	ands	r2, r1
 80019e0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d813      	bhi.n	8001a8a <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d103      	bne.n	8001a76 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 fe16 	bl	80026a0 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8001a74:	e00b      	b.n	8001a8e <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	d105      	bne.n	8001a8e <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f001 f956 	bl	8002d34 <JPEG_DMA_ContinueProcess>
      break;
 8001a88:	e001      	b.n	8001a8e <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8001a8a:	bf00      	nop
 8001a8c:	e000      	b.n	8001a90 <HAL_JPEG_IRQHandler+0x44>
      break;
 8001a8e:	bf00      	nop
  }
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b08b      	sub	sp, #44	@ 0x2c
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e020      	b.n	8001af2 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8001aba:	6a3a      	ldr	r2, [r7, #32]
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	4413      	add	r3, r2
 8001ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ac4:	d90f      	bls.n	8001ae6 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e055      	b.n	8001b76 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	68b9      	ldr	r1, [r7, #8]
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3201      	adds	r2, #1
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]
      p++;
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	3301      	adds	r3, #1
 8001ade:	623b      	str	r3, [r7, #32]
      i--;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1ee      	bne.n	8001aca <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	3301      	adds	r3, #1
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	2b0f      	cmp	r3, #15
 8001af6:	d9db      	bls.n	8001ab0 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	4413      	add	r3, r2
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6a3a      	ldr	r2, [r7, #32]
 8001b06:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	617b      	str	r3, [r7, #20]
  p = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8001b16:	e027      	b.n	8001b68 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8001b18:	6a3b      	ldr	r3, [r7, #32]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	601a      	str	r2, [r3, #0]
      p++;
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	3301      	adds	r3, #1
 8001b28:	623b      	str	r3, [r7, #32]
      code++;
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	4413      	add	r3, r2
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d0eb      	beq.n	8001b18 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b1f      	cmp	r3, #31
 8001b44:	d901      	bls.n	8001b4a <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e015      	b.n	8001b76 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d301      	bcc.n	8001b5c <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e00c      	b.n	8001b76 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	61bb      	str	r3, [r7, #24]
    si++;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	6a3b      	ldr	r3, [r7, #32]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1dd      	bne.n	8001b30 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	372c      	adds	r7, #44	@ 0x2c
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b8e:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001b92:	6018      	str	r0, [r3, #0]
 8001b94:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b98:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8001b9c:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8001b9e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001ba2:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	f107 0308 	add.w	r3, r7, #8
 8001bac:	f107 020c 	add.w	r2, r7, #12
 8001bb0:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8001bb4:	f7ff ff70 	bl	8001a98 <JPEG_Bits_To_SizeCodes>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8001bbe:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8001bc6:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8001bca:	e075      	b.n	8001cb8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 8001bd2:	e067      	b.n	8001ca4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8001bd4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001bd8:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001be2:	4413      	add	r3, r2
 8001be4:	3310      	adds	r3, #16
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8001bec:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d103      	bne.n	8001bfc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8001bf4:	23a0      	movs	r3, #160	@ 0xa0
 8001bf6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8001bfa:	e021      	b.n	8001c40 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8001bfc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8001c00:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c02:	d103      	bne.n	8001c0c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8001c04:	23a1      	movs	r3, #161	@ 0xa1
 8001c06:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8001c0a:	e019      	b.n	8001c40 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8001c0c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8001c1a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8001c26:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	461a      	mov	r2, r3
 8001c34:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8001c38:	4413      	add	r3, r2
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8001c40:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8001c44:	2ba1      	cmp	r3, #161	@ 0xa1
 8001c46:	d901      	bls.n	8001c4c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e035      	b.n	8001cb8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8001c4c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001c50:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8001c54:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8001c58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001c5c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001c60:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8001c6a:	3328      	adds	r3, #40	@ 0x28
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8001c72:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001c76:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8001c7a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001c7e:	4413      	add	r3, r2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b2d9      	uxtb	r1, r3
 8001c86:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001c8a:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8001c94:	4413      	add	r3, r2
 8001c96:	460a      	mov	r2, r1
 8001c98:	701a      	strb	r2, [r3, #0]
      k++;
 8001c9a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 8001ca4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001ca8:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d38e      	bcc.n	8001bd4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001cce:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8001cd2:	6018      	str	r0, [r3, #0]
 8001cd4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001cd8:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8001cdc:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8001cde:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001ce2:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8001cec:	f107 0208 	add.w	r2, r7, #8
 8001cf0:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8001cf4:	f7ff fed0 	bl	8001a98 <JPEG_Bits_To_SizeCodes>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8001cfe:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8001d06:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8001d0a:	e048      	b.n	8001d9e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8001d12:	e03d      	b.n	8001d90 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8001d14:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001d18:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8001d22:	4413      	add	r3, r2
 8001d24:	3310      	adds	r3, #16
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8001d2c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8001d30:	2b0b      	cmp	r3, #11
 8001d32:	d901      	bls.n	8001d38 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8001d34:	2301      	movs	r3, #1
 8001d36:	e032      	b.n	8001d9e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8001d38:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001d3c:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8001d40:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8001d44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d48:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001d4c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8001d50:	6819      	ldr	r1, [r3, #0]
 8001d52:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8001d56:	3302      	adds	r3, #2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8001d5e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001d62:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8001d66:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8001d6a:	4413      	add	r3, r2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b2d9      	uxtb	r1, r3
 8001d72:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8001d76:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8001d80:	4413      	add	r3, r2
 8001d82:	460a      	mov	r2, r1
 8001d84:	701a      	strb	r2, [r3, #0]
      k++;
 8001d86:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 8001d90:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8001d94:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d3bb      	bcc.n	8001d14 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b09a      	sub	sp, #104	@ 0x68
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d106      	bne.n	8001dd0 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8001dca:	3318      	adds	r3, #24
 8001dcc:	663b      	str	r3, [r7, #96]	@ 0x60
 8001dce:	e00f      	b.n	8001df0 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d106      	bne.n	8001dec <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8001de6:	3318      	adds	r3, #24
 8001de8:	663b      	str	r3, [r7, #96]	@ 0x60
 8001dea:	e001      	b.n	8001df0 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e059      	b.n	8001ea4 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d055      	beq.n	8001ea2 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	68b8      	ldr	r0, [r7, #8]
 8001dfe:	f7ff ff60 	bl	8001cc2 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8001e08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8001e10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001e14:	e046      	b.n	8001ea4 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8001e16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e18:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8001e1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e1c:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8001e20:	601a      	str	r2, [r3, #0]
    addressDef++;
 8001e22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e24:	3304      	adds	r3, #4
 8001e26:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8001e28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e2a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8001e2e:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8001e30:	230c      	movs	r3, #12
 8001e32:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8001e34:	e032      	b.n	8001e9c <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8001e36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8001e3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e3e:	3b04      	subs	r3, #4
 8001e40:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8001e42:	f107 0214 	add.w	r2, r7, #20
 8001e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e48:	4413      	add	r3, r2
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8001e52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e54:	3302      	adds	r3, #2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	3368      	adds	r3, #104	@ 0x68
 8001e5a:	443b      	add	r3, r7
 8001e5c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	4313      	orrs	r3, r2
 8001e64:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 8001e66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8001e6c:	f107 0214 	add.w	r2, r7, #20
 8001e70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e72:	4413      	add	r3, r2
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8001e7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e7e:	3302      	adds	r3, #2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	3368      	adds	r3, #104	@ 0x68
 8001e84:	443b      	add	r3, r7
 8001e86:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8001e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e92:	041a      	lsls	r2, r3, #16
 8001e94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e96:	431a      	orrs	r2, r3
 8001e98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e9a:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8001e9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d8c9      	bhi.n	8001e36 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3768      	adds	r7, #104	@ 0x68
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001eb8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8001ebc:	6018      	str	r0, [r3, #0]
 8001ebe:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001ec2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8001ec6:	6019      	str	r1, [r3, #0]
 8001ec8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001ecc:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8001ed0:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8001ed2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001ed6:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ee2:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8001ee6:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d10c      	bne.n	8001f0a <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8001ef0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001ef4:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f00:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001f04:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8001f08:	e01d      	b.n	8001f46 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8001f0a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001f0e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8001f1a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8001f1e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d10c      	bne.n	8001f42 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8001f28:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001f2c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8001f38:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001f3c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8001f40:	e001      	b.n	8001f46 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0a8      	b.n	8002098 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8001f46:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001f4a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a0 	beq.w	8002096 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8001f56:	f107 0214 	add.w	r2, r7, #20
 8001f5a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8001f5e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8001f62:	4611      	mov	r1, r2
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	f7ff fe0c 	bl	8001b82 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8001f70:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8001f78:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8001f7c:	e08c      	b.n	8002098 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8001f7e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001f82:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8001f8c:	e00e      	b.n	8001fac <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8001f8e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001f92:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8001f96:	601a      	str	r2, [r3, #0]
      addressDef++;
 8001f98:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 8001fa2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8001fac:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d9ec      	bls.n	8001f8e <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8001fb4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001fb8:	4a3a      	ldr	r2, [pc, #232]	@ (80020a4 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8001fba:	601a      	str	r2, [r3, #0]
    addressDef++;
 8001fbc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 8001fc6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001fca:	4a37      	ldr	r2, [pc, #220]	@ (80020a8 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8001fcc:	601a      	str	r2, [r3, #0]
    addressDef++;
 8001fce:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8001fd8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001fdc:	4a33      	ldr	r2, [pc, #204]	@ (80020ac <JPEG_Set_HuffAC_Mem+0x200>)
 8001fde:	601a      	str	r2, [r3, #0]
    addressDef++;
 8001fe0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8001fea:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001fee:	4a30      	ldr	r2, [pc, #192]	@ (80020b0 <JPEG_Set_HuffAC_Mem+0x204>)
 8001ff0:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8001ff2:	23a2      	movs	r3, #162	@ 0xa2
 8001ff4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8001ff8:	e049      	b.n	800208e <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8001ffa:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001ffe:	3b01      	subs	r3, #1
 8002000:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8002004:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002008:	3b04      	subs	r3, #4
 800200a:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800200e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002012:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8002016:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800201a:	4413      	add	r3, r2
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002024:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002028:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800202c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002030:	3328      	adds	r3, #40	@ 0x28
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8002040:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002044:	3b01      	subs	r3, #1
 8002046:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800204a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800204e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8002052:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002060:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002064:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8002068:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800206c:	3328      	adds	r3, #40	@ 0x28
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800207c:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8002080:	041a      	lsls	r2, r3, #16
 8002082:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8002086:	431a      	orrs	r2, r3
 8002088:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800208c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800208e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002092:	2b01      	cmp	r3, #1
 8002094:	d8b1      	bhi.n	8001ffa <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	0fd10fd0 	.word	0x0fd10fd0
 80020a8:	0fd30fd2 	.word	0x0fd30fd2
 80020ac:	0fd50fd4 	.word	0x0fd50fd4
 80020b0:	0fd70fd6 	.word	0x0fd70fd6

080020b4 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f84d 	bl	800215c <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80020ca:	461a      	mov	r2, r3
 80020cc:	491f      	ldr	r1, [pc, #124]	@ (800214c <JPEG_Set_HuffEnc_Mem+0x98>)
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff feec 	bl	8001eac <JPEG_Set_HuffAC_Mem>
 80020d4:	4603      	mov	r3, r0
 80020d6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	e030      	b.n	8002144 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80020ea:	461a      	mov	r2, r3
 80020ec:	4918      	ldr	r1, [pc, #96]	@ (8002150 <JPEG_Set_HuffEnc_Mem+0x9c>)
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff fedc 	bl	8001eac <JPEG_Set_HuffAC_Mem>
 80020f4:	4603      	mov	r3, r0
 80020f6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	e020      	b.n	8002144 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800210a:	461a      	mov	r2, r3
 800210c:	4911      	ldr	r1, [pc, #68]	@ (8002154 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fe4a 	bl	8001da8 <JPEG_Set_HuffDC_Mem>
 8002114:	4603      	mov	r3, r0
 8002116:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	e010      	b.n	8002144 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800212a:	461a      	mov	r2, r3
 800212c:	490a      	ldr	r1, [pc, #40]	@ (8002158 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fe3a 	bl	8001da8 <JPEG_Set_HuffDC_Mem>
 8002134:	4603      	mov	r3, r0
 8002136:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	e000      	b.n	8002144 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	08010c90 	.word	0x08010c90
 8002150:	08010d44 	.word	0x08010d44
 8002154:	08010c58 	.word	0x08010c58
 8002158:	08010c74 	.word	0x08010c74

0800215c <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800215c:	b480      	push	{r7}
 800215e:	b08b      	sub	sp, #44	@ 0x2c
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8002164:	4b80      	ldr	r3, [pc, #512]	@ (8002368 <JPEG_Set_Huff_DHTMem+0x20c>)
 8002166:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8002168:	4b80      	ldr	r3, [pc, #512]	@ (800236c <JPEG_Set_Huff_DHTMem+0x210>)
 800216a:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800216c:	4b80      	ldr	r3, [pc, #512]	@ (8002370 <JPEG_Set_Huff_DHTMem+0x214>)
 800216e:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8002170:	4b80      	ldr	r3, [pc, #512]	@ (8002374 <JPEG_Set_Huff_DHTMem+0x218>)
 8002172:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800217c:	330c      	adds	r3, #12
 800217e:	623b      	str	r3, [r7, #32]
  index = 16;
 8002180:	2310      	movs	r3, #16
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002184:	e01d      	b.n	80021c2 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	3b01      	subs	r3, #1
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	3b02      	subs	r3, #2
 8002194:	6979      	ldr	r1, [r7, #20]
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800219a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800219c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219e:	3b03      	subs	r3, #3
 80021a0:	6979      	ldr	r1, [r7, #20]
 80021a2:	5ccb      	ldrb	r3, [r1, r3]
 80021a4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80021a6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80021a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021aa:	3a04      	subs	r2, #4
 80021ac:	6979      	ldr	r1, [r7, #20]
 80021ae:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80021b0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	601a      	str	r2, [r3, #0]
    address--;
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	3b04      	subs	r3, #4
 80021ba:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	3b04      	subs	r3, #4
 80021c0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d8de      	bhi.n	8002186 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80021d0:	3318      	adds	r3, #24
 80021d2:	623b      	str	r3, [r7, #32]
  index = 12;
 80021d4:	230c      	movs	r3, #12
 80021d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80021d8:	e021      	b.n	800221e <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	3b01      	subs	r3, #1
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4413      	add	r3, r2
 80021e2:	7c1b      	ldrb	r3, [r3, #16]
 80021e4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	3b02      	subs	r3, #2
 80021ea:	6979      	ldr	r1, [r7, #20]
 80021ec:	440b      	add	r3, r1
 80021ee:	7c1b      	ldrb	r3, [r3, #16]
 80021f0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80021f2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80021f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f6:	3b03      	subs	r3, #3
 80021f8:	6979      	ldr	r1, [r7, #20]
 80021fa:	440b      	add	r3, r1
 80021fc:	7c1b      	ldrb	r3, [r3, #16]
 80021fe:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002200:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8002202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002204:	3a04      	subs	r2, #4
 8002206:	6979      	ldr	r1, [r7, #20]
 8002208:	440a      	add	r2, r1
 800220a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800220c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	601a      	str	r2, [r3, #0]
    address--;
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	3b04      	subs	r3, #4
 8002216:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	3b04      	subs	r3, #4
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	2b03      	cmp	r3, #3
 8002222:	d8da      	bhi.n	80021da <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800222c:	3328      	adds	r3, #40	@ 0x28
 800222e:	623b      	str	r3, [r7, #32]
  index = 16;
 8002230:	2310      	movs	r3, #16
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002234:	e01d      	b.n	8002272 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	3b01      	subs	r3, #1
 800223a:	69fa      	ldr	r2, [r7, #28]
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002242:	3b02      	subs	r3, #2
 8002244:	69f9      	ldr	r1, [r7, #28]
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800224a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	3b03      	subs	r3, #3
 8002250:	69f9      	ldr	r1, [r7, #28]
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002256:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8002258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800225a:	3a04      	subs	r2, #4
 800225c:	69f9      	ldr	r1, [r7, #28]
 800225e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002260:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	601a      	str	r2, [r3, #0]
    address--;
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	3b04      	subs	r3, #4
 800226a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	3b04      	subs	r3, #4
 8002270:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	2b03      	cmp	r3, #3
 8002276:	d8de      	bhi.n	8002236 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002280:	33cc      	adds	r3, #204	@ 0xcc
 8002282:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b3b      	ldr	r3, [pc, #236]	@ (8002378 <JPEG_Set_Huff_DHTMem+0x21c>)
 800228a:	4013      	ands	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 8002294:	021a      	lsls	r2, r3, #8
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
  *address = value;
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	3b04      	subs	r3, #4
 80022ae:	623b      	str	r3, [r7, #32]
  index = 160;
 80022b0:	23a0      	movs	r3, #160	@ 0xa0
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80022b4:	e021      	b.n	80022fa <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	3b01      	subs	r3, #1
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	4413      	add	r3, r2
 80022be:	7c1b      	ldrb	r3, [r3, #16]
 80022c0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	3b02      	subs	r3, #2
 80022c6:	69f9      	ldr	r1, [r7, #28]
 80022c8:	440b      	add	r3, r1
 80022ca:	7c1b      	ldrb	r3, [r3, #16]
 80022cc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80022ce:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	3b03      	subs	r3, #3
 80022d4:	69f9      	ldr	r1, [r7, #28]
 80022d6:	440b      	add	r3, r1
 80022d8:	7c1b      	ldrb	r3, [r3, #16]
 80022da:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80022dc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80022de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e0:	3a04      	subs	r2, #4
 80022e2:	69f9      	ldr	r1, [r7, #28]
 80022e4:	440a      	add	r2, r1
 80022e6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80022e8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	601a      	str	r2, [r3, #0]
    address--;
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	3b04      	subs	r3, #4
 80022f2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	3b04      	subs	r3, #4
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d8da      	bhi.n	80022b6 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002308:	33cc      	adds	r3, #204	@ 0xcc
 800230a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	b29b      	uxth	r3, r3
 8002312:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	785b      	ldrb	r3, [r3, #1]
 8002318:	061a      	lsls	r2, r3, #24
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	431a      	orrs	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	041b      	lsls	r3, r3, #16
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002336:	33dc      	adds	r3, #220	@ 0xdc
 8002338:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <JPEG_Set_Huff_DHTMem+0x21c>)
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	7bdb      	ldrb	r3, [r3, #15]
 8002348:	021a      	lsls	r2, r3, #8
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	7b92      	ldrb	r2, [r2, #14]
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	3b04      	subs	r3, #4
 8002360:	623b      	str	r3, [r7, #32]
  index = 12;
 8002362:	230c      	movs	r3, #12
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002366:	e027      	b.n	80023b8 <JPEG_Set_Huff_DHTMem+0x25c>
 8002368:	08010c90 	.word	0x08010c90
 800236c:	08010d44 	.word	0x08010d44
 8002370:	08010c58 	.word	0x08010c58
 8002374:	08010c74 	.word	0x08010c74
 8002378:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800237c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237e:	3301      	adds	r3, #1
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8002386:	6939      	ldr	r1, [r7, #16]
 8002388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238a:	440b      	add	r3, r1
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002390:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	3b01      	subs	r3, #1
 8002396:	6939      	ldr	r1, [r7, #16]
 8002398:	5ccb      	ldrb	r3, [r1, r3]
 800239a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800239c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800239e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023a0:	3a02      	subs	r2, #2
 80023a2:	6939      	ldr	r1, [r7, #16]
 80023a4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80023a6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	601a      	str	r2, [r3, #0]
    address--;
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	3b04      	subs	r3, #4
 80023b0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	3b04      	subs	r3, #4
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80023b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d8de      	bhi.n	800237c <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80023c6:	33dc      	adds	r3, #220	@ 0xdc
 80023c8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	7c5b      	ldrb	r3, [r3, #17]
 80023d6:	061a      	lsls	r2, r3, #24
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	431a      	orrs	r2, r3
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	7c1b      	ldrb	r3, [r3, #16]
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80023f4:	33e8      	adds	r3, #232	@ 0xe8
 80023f6:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b6d      	ldr	r3, [pc, #436]	@ (80025b4 <JPEG_Set_Huff_DHTMem+0x458>)
 80023fe:	4013      	ands	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	7edb      	ldrb	r3, [r3, #27]
 8002406:	021a      	lsls	r2, r3, #8
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	7e92      	ldrb	r2, [r2, #26]
 8002410:	4313      	orrs	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	3b04      	subs	r3, #4
 800241e:	623b      	str	r3, [r7, #32]
  index = 8;
 8002420:	2308      	movs	r3, #8
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002424:	e021      	b.n	800246a <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	3301      	adds	r3, #1
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4413      	add	r3, r2
 800242e:	7c1b      	ldrb	r3, [r3, #16]
 8002430:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002432:	6939      	ldr	r1, [r7, #16]
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	440b      	add	r3, r1
 8002438:	3310      	adds	r3, #16
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800243e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	3b01      	subs	r3, #1
 8002444:	6939      	ldr	r1, [r7, #16]
 8002446:	440b      	add	r3, r1
 8002448:	7c1b      	ldrb	r3, [r3, #16]
 800244a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800244c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800244e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002450:	3a02      	subs	r2, #2
 8002452:	6939      	ldr	r1, [r7, #16]
 8002454:	440a      	add	r2, r1
 8002456:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002458:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	601a      	str	r2, [r3, #0]
    address--;
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	3b04      	subs	r3, #4
 8002462:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002466:	3b04      	subs	r3, #4
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	2b03      	cmp	r3, #3
 800246e:	d8da      	bhi.n	8002426 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002478:	33e8      	adds	r3, #232	@ 0xe8
 800247a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b29b      	uxth	r3, r3
 8002482:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	785b      	ldrb	r3, [r3, #1]
 8002488:	061a      	lsls	r2, r3, #24
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	431a      	orrs	r2, r3
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	041b      	lsls	r3, r3, #16
 8002494:	4313      	orrs	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80024a6:	33f8      	adds	r3, #248	@ 0xf8
 80024a8:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4b41      	ldr	r3, [pc, #260]	@ (80025b4 <JPEG_Set_Huff_DHTMem+0x458>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	7bdb      	ldrb	r3, [r3, #15]
 80024b8:	021a      	lsls	r2, r3, #8
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	7b92      	ldrb	r2, [r2, #14]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  *address = value;
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	3b04      	subs	r3, #4
 80024d0:	623b      	str	r3, [r7, #32]
  index = 12;
 80024d2:	230c      	movs	r3, #12
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80024d6:	e01d      	b.n	8002514 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80024d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024da:	3301      	adds	r3, #1
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	5cd3      	ldrb	r3, [r2, r3]
 80024e0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80024e2:	69b9      	ldr	r1, [r7, #24]
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	440b      	add	r3, r1
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80024ec:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	3b01      	subs	r3, #1
 80024f2:	69b9      	ldr	r1, [r7, #24]
 80024f4:	5ccb      	ldrb	r3, [r1, r3]
 80024f6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80024f8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 80024fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fc:	3a02      	subs	r2, #2
 80024fe:	69b9      	ldr	r1, [r7, #24]
 8002500:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002502:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	601a      	str	r2, [r3, #0]
    address--;
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	3b04      	subs	r3, #4
 800250c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	3b04      	subs	r3, #4
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	2b03      	cmp	r3, #3
 8002518:	d8de      	bhi.n	80024d8 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002522:	33f8      	adds	r3, #248	@ 0xf8
 8002524:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	7c5b      	ldrb	r3, [r3, #17]
 8002532:	061a      	lsls	r2, r3, #24
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	431a      	orrs	r2, r3
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	7c1b      	ldrb	r3, [r3, #16]
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002550:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002554:	623b      	str	r3, [r7, #32]
  index = 160;
 8002556:	23a0      	movs	r3, #160	@ 0xa0
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800255a:	e021      	b.n	80025a0 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	3301      	adds	r3, #1
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4413      	add	r3, r2
 8002564:	7c1b      	ldrb	r3, [r3, #16]
 8002566:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002568:	69b9      	ldr	r1, [r7, #24]
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	440b      	add	r3, r1
 800256e:	3310      	adds	r3, #16
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002574:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	3b01      	subs	r3, #1
 800257a:	69b9      	ldr	r1, [r7, #24]
 800257c:	440b      	add	r3, r1
 800257e:	7c1b      	ldrb	r3, [r3, #16]
 8002580:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002582:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8002584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002586:	3a02      	subs	r2, #2
 8002588:	69b9      	ldr	r1, [r7, #24]
 800258a:	440a      	add	r2, r1
 800258c:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800258e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	601a      	str	r2, [r3, #0]
    address--;
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	3b04      	subs	r3, #4
 8002598:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	3b04      	subs	r3, #4
 800259e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d8da      	bhi.n	800255c <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 80025a6:	bf00      	nop
 80025a8:	bf00      	nop
 80025aa:	372c      	adds	r7, #44	@ 0x2c
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	ffff0000 	.word	0xffff0000

080025b8 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d108      	bne.n	80025ea <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0208 	orr.w	r2, r2, #8
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	e007      	b.n	80025fa <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0208 	bic.w	r2, r2, #8
 80025f8:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002618:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002628:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002638:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002648:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b08      	cmp	r3, #8
 8002664:	d108      	bne.n	8002678 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8002674:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8002676:	e00d      	b.n	8002694 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b0c      	cmp	r3, #12
 8002682:	d107      	bne.n	8002694 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d125      	bne.n	8002700 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01e      	beq.n	8002700 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3304      	adds	r3, #4
 80026c6:	4619      	mov	r1, r3
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff f841 	bl	8001750 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3304      	adds	r3, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f009 f864 	bl	800b7a8 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026fe:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002704:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d116      	bne.n	800273a <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800271a:	2108      	movs	r1, #8
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f988 	bl	8002a32 <JPEG_ReadInputData>
 8002722:	e00a      	b.n	800273a <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8002732:	2101      	movs	r1, #1
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f97c 	bl	8002a32 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d116      	bne.n	8002774 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d004      	beq.n	800275e <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002754:	2108      	movs	r1, #8
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f864 	bl	8002824 <JPEG_StoreOutputData>
 800275c:	e00a      	b.n	8002774 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800276c:	2101      	movs	r1, #1
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f858 	bl	8002824 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800277e:	2b20      	cmp	r3, #32
 8002780:	d14b      	bne.n	800281a <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	d107      	bne.n	80027ae <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80027ac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80027bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69d9      	ldr	r1, [r3, #28]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	461a      	mov	r2, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f009 f833 	bl	800b83c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e0:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e6:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0303 	and.w	r3, r3, #3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d103      	bne.n	8002810 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f009 f83b 	bl	800b884 <HAL_JPEG_DecodeCpltCallback>
 800280e:	e002      	b.n	8002816 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff f911 	bl	8001a38 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	429a      	cmp	r2, r3
 800283e:	d34b      	bcc.n	80028d8 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	e031      	b.n	80028aa <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	4413      	add	r3, r2
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	0a19      	lsrs	r1, r3, #8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	3301      	adds	r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	b2ca      	uxtb	r2, r1
 8002870:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	0c19      	lsrs	r1, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	3302      	adds	r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	b2ca      	uxtb	r2, r1
 8002884:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	0e19      	lsrs	r1, r3, #24
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	3303      	adds	r3, #3
 8002894:	4413      	add	r3, r2
 8002896:	b2ca      	uxtb	r2, r1
 8002898:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	1d1a      	adds	r2, r3, #4
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d3c9      	bcc.n	8002846 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	429a      	cmp	r2, r3
 80028bc:	f040 80b5 	bne.w	8002a2a <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69d9      	ldr	r1, [r3, #28]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	461a      	mov	r2, r3
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f008 ffb6 	bl	800b83c <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 80028d6:	e0a8      	b.n	8002a2a <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	429a      	cmp	r2, r3
 80028e2:	f240 80a2 	bls.w	8002a2a <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	e031      	b.n	800295e <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002900:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69da      	ldr	r2, [r3, #28]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290a:	4413      	add	r3, r2
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	0a19      	lsrs	r1, r3, #8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69da      	ldr	r2, [r3, #28]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	3301      	adds	r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	b2ca      	uxtb	r2, r1
 8002924:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	0c19      	lsrs	r1, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	3302      	adds	r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	b2ca      	uxtb	r2, r1
 8002938:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	0e19      	lsrs	r1, r3, #24
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69da      	ldr	r2, [r3, #28]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	3303      	adds	r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	b2ca      	uxtb	r2, r1
 800294c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	1d1a      	adds	r2, r3, #4
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	3301      	adds	r3, #1
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	429a      	cmp	r2, r3
 8002964:	d3c9      	bcc.n	80028fa <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	429a      	cmp	r2, r3
 8002970:	d10b      	bne.n	800298a <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69d9      	ldr	r1, [r3, #28]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	461a      	mov	r2, r3
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f008 ff5d 	bl	800b83c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002988:	e04f      	b.n	8002a2a <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299c:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	e015      	b.n	80029d0 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	fa22 f103 	lsr.w	r1, r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	4413      	add	r3, r2
 80029bc:	b2ca      	uxtb	r2, r1
 80029be:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	3301      	adds	r3, #1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d3e5      	bcc.n	80029a4 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69d9      	ldr	r1, [r3, #28]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	461a      	mov	r2, r3
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f008 ff2a 	bl	800b83c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f1c3 0304 	rsb	r3, r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	e013      	b.n	8002a24 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	fa22 f103 	lsr.w	r1, r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	4413      	add	r3, r2
 8002a10:	b2ca      	uxtb	r2, r1
 8002a12:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d9e8      	bls.n	80029fc <JPEG_StoreOutputData+0x1d8>
}
 8002a2a:	bf00      	nop
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b088      	sub	sp, #32
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <JPEG_ReadInputData+0x1c>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d104      	bne.n	8002a58 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8002a4e:	2101      	movs	r1, #1
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7fe ff75 	bl	8001940 <HAL_JPEG_Pause>
 8002a56:	e028      	b.n	8002aaa <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d906      	bls.n	8002a72 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	e01b      	b.n	8002aaa <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d115      	bne.n	8002aaa <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4619      	mov	r1, r3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f008 fe9b 	bl	800b7c0 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d905      	bls.n	8002a9e <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	f023 0203 	bic.w	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa8:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 809f 	bne.w	8002bf6 <JPEG_ReadInputData+0x1c4>
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 809b 	beq.w	8002bf6 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	089b      	lsrs	r3, r3, #2
 8002ac4:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d335      	bcc.n	8002b3a <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	e02d      	b.n	8002b30 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3301      	adds	r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002af4:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6999      	ldr	r1, [r3, #24]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	3302      	adds	r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8002b06:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3303      	adds	r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8002b1c:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002b1e:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	1d1a      	adds	r2, r3, #4
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d3cd      	bcc.n	8002ad4 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8002b38:	e05d      	b.n	8002bf6 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d035      	beq.n	8002bac <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8002b40:	2300      	movs	r3, #0
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	e02d      	b.n	8002ba2 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699a      	ldr	r2, [r3, #24]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4413      	add	r3, r2
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002b66:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6999      	ldr	r1, [r3, #24]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3302      	adds	r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8002b78:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699a      	ldr	r2, [r3, #24]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3303      	adds	r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8002b8e:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002b90:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	1d1a      	adds	r2, r3, #4
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d3cd      	bcc.n	8002b46 <JPEG_ReadInputData+0x114>
}
 8002baa:	e024      	b.n	8002bf6 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61bb      	str	r3, [r7, #24]
 8002bb4:	e017      	b.n	8002be6 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	3301      	adds	r3, #1
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d3e3      	bcc.n	8002bb6 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002bf6:	bf00      	nop
 8002bf8:	3720      	adds	r7, #32
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0e:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c16:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d804      	bhi.n	8002c2c <JPEG_DMA_StartProcess+0x2c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d901      	bls.n	8002c30 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e074      	b.n	8002d1a <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	4a3b      	ldr	r2, [pc, #236]	@ (8002d24 <JPEG_DMA_StartProcess+0x124>)
 8002c36:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d28 <JPEG_DMA_StartProcess+0x128>)
 8002c3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c44:	4a39      	ldr	r2, [pc, #228]	@ (8002d2c <JPEG_DMA_StartProcess+0x12c>)
 8002c46:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c4c:	4a36      	ldr	r2, [pc, #216]	@ (8002d28 <JPEG_DMA_StartProcess+0x128>)
 8002c4e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c54:	4a36      	ldr	r2, [pc, #216]	@ (8002d30 <JPEG_DMA_StartProcess+0x130>)
 8002c56:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <JPEG_DMA_StartProcess+0x64>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d107      	bne.n	8002c74 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c68:	f043 0204 	orr.w	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e052      	b.n	8002d1a <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7c:	68f9      	ldr	r1, [r7, #12]
 8002c7e:	fbb3 f1f1 	udiv	r1, r3, r1
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	fb00 f101 	mul.w	r1, r0, r1
 8002c88:	1a5b      	subs	r3, r3, r1
 8002c8a:	1ad2      	subs	r2, r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	fbb3 f1f1 	udiv	r1, r3, r1
 8002c9e:	68b8      	ldr	r0, [r7, #8]
 8002ca0:	fb00 f101 	mul.w	r1, r0, r1
 8002ca4:	1a5b      	subs	r3, r3, r1
 8002ca6:	1ad2      	subs	r2, r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	3344      	adds	r3, #68	@ 0x44
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	461c      	mov	r4, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	9200      	str	r2, [sp, #0]
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	f000 fbe8 	bl	800349c <HAL_MDMA_Start_IT>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd6:	f043 0204 	orr.w	r2, r3, #4
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e01b      	b.n	8002d1a <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	4619      	mov	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3340      	adds	r3, #64	@ 0x40
 8002cf2:	461c      	mov	r4, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	9200      	str	r2, [sp, #0]
 8002cfc:	4622      	mov	r2, r4
 8002cfe:	f000 fbcd 	bl	800349c <HAL_MDMA_Start_IT>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d0c:	f043 0204 	orr.w	r2, r3, #4
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd90      	pop	{r4, r7, pc}
 8002d22:	bf00      	nop
 8002d24:	08003033 	.word	0x08003033
 8002d28:	08003221 	.word	0x08003221
 8002d2c:	0800315f 	.word	0x0800315f
 8002d30:	08003271 	.word	0x08003271

08002d34 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d125      	bne.n	8002d94 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d01e      	beq.n	8002d94 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7fe fcf7 	bl	8001750 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f008 fd1a 	bl	800b7a8 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d82:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d92:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d039      	beq.n	8002e16 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002dcc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002ddc:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d104      	bne.n	8002df6 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fbd4 	bl	800359e <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d105      	bne.n	8002e10 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fbc8 	bl	800359e <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8002e0e:	e002      	b.n	8002e16 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f804 	bl	8002e1e <JPEG_DMA_EndProcess>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8002e36:	1ad2      	subs	r2, r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d10a      	bne.n	8002e5e <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69d9      	ldr	r1, [r3, #28]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	461a      	mov	r2, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f008 fcf2 	bl	800b83c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d134      	bne.n	8002ed6 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69d9      	ldr	r1, [r3, #28]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f008 fcdc 	bl	800b83c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0201 	bic.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9e:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d103      	bne.n	8002ece <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f008 fcdc 	bl	800b884 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8002ecc:	e00c      	b.n	8002ee8 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7fe fdb2 	bl	8001a38 <HAL_JPEG_EncodeCpltCallback>
}
 8002ed4:	e008      	b.n	8002ee8 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f804 	bl	8002ef0 <JPEG_DMA_PollResidualData>
}
 8002ee8:	bf00      	nop
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8002ef8:	2310      	movs	r3, #16
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	e04f      	b.n	8002f9e <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d146      	bne.n	8002f98 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d03f      	beq.n	8002f98 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	4413      	add	r3, r2
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	0a19      	lsrs	r1, r3, #8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	b2ca      	uxtb	r2, r1
 8002f42:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	0c19      	lsrs	r1, r3, #16
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69da      	ldr	r2, [r3, #28]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	3302      	adds	r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	b2ca      	uxtb	r2, r1
 8002f56:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	0e19      	lsrs	r1, r3, #24
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f64:	3303      	adds	r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	b2ca      	uxtb	r2, r1
 8002f6a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	1d1a      	adds	r2, r3, #4
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d10a      	bne.n	8002f98 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69d9      	ldr	r1, [r3, #28]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f008 fc55 	bl	800b83c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ac      	bne.n	8002efe <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa8:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d004      	beq.n	8002fc2 <JPEG_DMA_PollResidualData+0xd2>
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d133      	bne.n	800302a <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0201 	bic.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69d9      	ldr	r1, [r3, #28]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f008 fc29 	bl	800b83c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff4:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffa:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d103      	bne.n	8003024 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f008 fc31 	bl	800b884 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8003022:	e002      	b.n	800302a <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7fe fd07 	bl	8001a38 <HAL_JPEG_EncodeCpltCallback>
}
 800302a:	bf00      	nop
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8003032:	b590      	push	{r4, r7, lr}
 8003034:	b087      	sub	sp, #28
 8003036:	af02      	add	r7, sp, #8
 8003038:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800304e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003054:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003058:	4013      	ands	r3, r2
 800305a:	2b0c      	cmp	r3, #12
 800305c:	d17c      	bne.n	8003158 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003064:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8003074:	1ad2      	subs	r2, r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4619      	mov	r1, r3
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f008 fb9d 	bl	800b7c0 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	429a      	cmp	r2, r3
 800308e:	d81f      	bhi.n	80030d0 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10d      	bne.n	80030b2 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800309a:	f043 0204 	orr.w	r2, r3, #4
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2206      	movs	r2, #6
 80030a6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f008 fbe0 	bl	800b870 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 80030b0:	e052      	b.n	8003158 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	fbb3 f1f1 	udiv	r1, r3, r1
 80030c0:	68b8      	ldr	r0, [r7, #8]
 80030c2:	fb00 f101 	mul.w	r1, r0, r1
 80030c6:	1a5b      	subs	r3, r3, r1
 80030c8:	1ad2      	subs	r2, r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80030ce:	e010      	b.n	80030f2 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00c      	beq.n	80030f2 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e8:	089b      	lsrs	r3, r3, #2
 80030ea:	3301      	adds	r3, #1
 80030ec:	009a      	lsls	r2, r3, #2
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d124      	bne.n	8003148 <JPEG_MDMAInCpltCallback+0x116>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003102:	2b00      	cmp	r3, #0
 8003104:	d020      	beq.n	8003148 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	4619      	mov	r1, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3340      	adds	r3, #64	@ 0x40
 8003116:	461c      	mov	r4, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311c:	2201      	movs	r2, #1
 800311e:	9200      	str	r2, [sp, #0]
 8003120:	4622      	mov	r2, r4
 8003122:	f000 f9bb 	bl	800349c <HAL_MDMA_Start_IT>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00d      	beq.n	8003148 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003130:	f043 0204 	orr.w	r2, r3, #4
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2206      	movs	r2, #6
 800313c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f008 fb95 	bl	800b870 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 8003146:	e007      	b.n	8003158 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	bd90      	pop	{r4, r7, pc}

0800315e <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800315e:	b590      	push	{r4, r7, lr}
 8003160:	b087      	sub	sp, #28
 8003162:	af02      	add	r7, sp, #8
 8003164:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800317a:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003180:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003184:	4013      	ands	r3, r2
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d147      	bne.n	800321a <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b00      	cmp	r3, #0
 8003196:	d138      	bne.n	800320a <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80031a6:	1ad2      	subs	r2, r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	69d9      	ldr	r1, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	461a      	mov	r2, r3
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f008 fb40 	bl	800b83c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d120      	bne.n	800320a <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3344      	adds	r3, #68	@ 0x44
 80031d2:	4619      	mov	r1, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	461c      	mov	r4, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031de:	2201      	movs	r2, #1
 80031e0:	9200      	str	r2, [sp, #0]
 80031e2:	4622      	mov	r2, r4
 80031e4:	f000 f95a 	bl	800349c <HAL_MDMA_Start_IT>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00d      	beq.n	800320a <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f2:	f043 0204 	orr.w	r2, r3, #4
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2206      	movs	r2, #6
 80031fe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f008 fb34 	bl	800b870 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8003208:	e007      	b.n	800321a <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	bd90      	pop	{r4, r7, pc}

08003220 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800325a:	f043 0204 	orr.w	r2, r3, #4
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f008 fb04 	bl	800b870 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 8003268:	bf00      	nop
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003282:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f7ff fdc7 	bl	8002e1e <JPEG_DMA_EndProcess>
  }
}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 8003298:	b480      	push	{r7}
 800329a:	b08b      	sub	sp, #44	@ 0x2c
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3350      	adds	r3, #80	@ 0x50
 80032aa:	61bb      	str	r3, [r7, #24]

  i = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80032b0:	e042      	b.n	8003338 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	e033      	b.n	8003326 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d103      	bne.n	80032da <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	3364      	adds	r3, #100	@ 0x64
 80032d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d8:	e022      	b.n	8003320 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2264      	movs	r2, #100	@ 0x64
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032e6:	6a38      	ldr	r0, [r7, #32]
 80032e8:	69f9      	ldr	r1, [r7, #28]
 80032ea:	4401      	add	r1, r0
 80032ec:	4818      	ldr	r0, [pc, #96]	@ (8003350 <JPEG_GetQuality+0xb8>)
 80032ee:	5c41      	ldrb	r1, [r0, r1]
 80032f0:	440a      	add	r2, r1
 80032f2:	7812      	ldrb	r2, [r2, #0]
 80032f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b64      	cmp	r3, #100	@ 0x64
 80032fe:	d807      	bhi.n	8003310 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 8003306:	085b      	lsrs	r3, r3, #1
 8003308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800330a:	4413      	add	r3, r2
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
 800330e:	e007      	b.n	8003320 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8003310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	fbb2 f3f3 	udiv	r3, r2, r3
 800331a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800331c:	4413      	add	r3, r2
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	3301      	adds	r3, #1
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d9c8      	bls.n	80032be <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	3304      	adds	r3, #4
 8003330:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	3304      	adds	r3, #4
 8003336:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	2b3c      	cmp	r3, #60	@ 0x3c
 800333c:	d9b9      	bls.n	80032b2 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	099b      	lsrs	r3, r3, #6
}
 8003342:	4618      	mov	r0, r3
 8003344:	372c      	adds	r7, #44	@ 0x2c
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	08010df8 	.word	0x08010df8

08003354 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800335c:	f7fd fb1e 	bl	800099c <HAL_GetTick>
 8003360:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e03b      	b.n	80033e4 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800338c:	e00f      	b.n	80033ae <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800338e:	f7fd fb05 	bl	800099c <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b05      	cmp	r3, #5
 800339a:	d908      	bls.n	80033ae <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2240      	movs	r2, #64	@ 0x40
 80033a0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2203      	movs	r2, #3
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e01a      	b.n	80033e4 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e8      	bne.n	800338e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fad9 	bl	8003974 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e048      	b.n	8003490 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2200      	movs	r2, #0
 8003414:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2200      	movs	r2, #0
 800341c:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2200      	movs	r2, #0
 8003424:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2200      	movs	r2, #0
 800342c:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2200      	movs	r2, #0
 800343c:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2200      	movs	r2, #0
 8003444:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2200      	movs	r2, #0
 800344c:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2200      	movs	r2, #0
 8003454:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2200      	movs	r2, #0
 800345c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	221f      	movs	r2, #31
 8003464:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e070      	b.n	8003596 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_MDMA_Start_IT+0x26>
 80034be:	2302      	movs	r3, #2
 80034c0:	e069      	b.n	8003596 <HAL_MDMA_Start_IT+0xfa>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d158      	bne.n	8003588 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f9c8 	bl	8003894 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0206 	orr.w	r2, r2, #6
 8003512:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d007      	beq.n	800352c <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0210 	orr.w	r2, r2, #16
 800352a:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003530:	2b00      	cmp	r3, #0
 8003532:	d007      	beq.n	8003544 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0208 	orr.w	r2, r2, #8
 8003542:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0220 	orr.w	r2, r2, #32
 800355a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003574:	d10e      	bne.n	8003594 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	e005      	b.n	8003594 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8003590:	2302      	movs	r3, #2
 8003592:	e000      	b.n	8003596 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e017      	b.n	80035e0 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d004      	beq.n	80035c6 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2280      	movs	r2, #128	@ 0x80
 80035c0:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e00c      	b.n	80035e0 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2204      	movs	r2, #4
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035f8:	4b91      	ldr	r3, [pc, #580]	@ (8003840 <HAL_MDMA_IRQHandler+0x254>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a91      	ldr	r2, [pc, #580]	@ (8003844 <HAL_MDMA_IRQHandler+0x258>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	0a9b      	lsrs	r3, r3, #10
 8003604:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	4b8e      	ldr	r3, [pc, #568]	@ (8003848 <HAL_MDMA_IRQHandler+0x25c>)
 800360e:	4413      	add	r3, r2
 8003610:	099b      	lsrs	r3, r3, #6
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2201      	movs	r2, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800361e:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 812d 	beq.w	8003888 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d054      	beq.n	80036e6 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d04d      	beq.n	80036e6 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0202 	bic.w	r2, r2, #2
 8003658:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003668:	2b00      	cmp	r3, #0
 800366a:	d106      	bne.n	800367a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003670:	f043 0201 	orr.w	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	669a      	str	r2, [r3, #104]	@ 0x68
 8003678:	e005      	b.n	8003686 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800367e:	f043 0202 	orr.w	r2, r3, #2
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003694:	f043 0204 	orr.w	r2, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036aa:	f043 0208 	orr.w	r2, r3, #8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036c0:	f043 0210 	orr.w	r2, r3, #16
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036d6:	f043 0220 	orr.w	r2, r3, #32
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2201      	movs	r2, #1
 80036e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d012      	beq.n	800371a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2210      	movs	r2, #16
 8003708:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d012      	beq.n	800374e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2208      	movs	r2, #8
 800373c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d012      	beq.n	8003782 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2204      	movs	r2, #4
 8003770:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d039      	beq.n	8003804 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d032      	beq.n	8003804 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80037ac:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d110      	bne.n	80037dc <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d05c      	beq.n	800388c <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
        }
        return;
 80037da:	e057      	b.n	800388c <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2202      	movs	r2, #2
 80037e2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003808:	2b00      	cmp	r3, #0
 800380a:	d040      	beq.n	800388e <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2204      	movs	r2, #4
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	3301      	adds	r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	429a      	cmp	r2, r3
 800382e:	d30d      	bcc.n	800384c <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f2      	bne.n	8003824 <HAL_MDMA_IRQHandler+0x238>
 800383e:	e006      	b.n	800384e <HAL_MDMA_IRQHandler+0x262>
 8003840:	20000000 	.word	0x20000000
 8003844:	1b4e81b5 	.word	0x1b4e81b5
 8003848:	adffffc0 	.word	0xadffffc0
        break;
 800384c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d004      	beq.n	800386e <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2203      	movs	r2, #3
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800386c:	e003      	b.n	8003876 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
 8003886:	e002      	b.n	800388e <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8003888:	bf00      	nop
 800388a:	e000      	b.n	800388e <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800388c:	bf00      	nop
    }
  }
}
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8003894:	b480      	push	{r7}
 8003896:	b087      	sub	sp, #28
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	4b31      	ldr	r3, [pc, #196]	@ (8003970 <MDMA_SetConfig+0xdc>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	f3c2 0110 	ubfx	r1, r2, #0, #17
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	430b      	orrs	r3, r1
 80038b8:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	051a      	lsls	r2, r3, #20
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	221f      	movs	r2, #31
 80038d8:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80038f0:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038f8:	d002      	beq.n	8003900 <MDMA_SetConfig+0x6c>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d108      	bne.n	8003912 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800390e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003910:	e007      	b.n	8003922 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003920:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003928:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003930:	d002      	beq.n	8003938 <MDMA_SetConfig+0xa4>
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d108      	bne.n	800394a <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003946:	629a      	str	r2, [r3, #40]	@ 0x28
 8003948:	e007      	b.n	800395a <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003958:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003964:	bf00      	nop
 8003966:	371c      	adds	r7, #28
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	fffe0000 	.word	0xfffe0000

08003974 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68d9      	ldr	r1, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	695a      	ldr	r2, [r3, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800399a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80039a6:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ac:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80039b2:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b8:	3b01      	subs	r3, #1
 80039ba:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80039bc:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80039c8:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80039ca:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d4:	d107      	bne.n	80039e6 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80039e4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	da11      	bge.n	8003a1a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003a04:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0a:	425b      	negs	r3, r3
 8003a0c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	b292      	uxth	r2, r2
 8003a16:	621a      	str	r2, [r3, #32]
 8003a18:	e006      	b.n	8003a28 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a1e:	461a      	mov	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	b292      	uxth	r2, r2
 8003a26:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	da15      	bge.n	8003a5c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003a3e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a44:	425b      	negs	r3, r3
 8003a46:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6a19      	ldr	r1, [r3, #32]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	041a      	lsls	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	621a      	str	r2, [r3, #32]
 8003a5a:	e009      	b.n	8003a70 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6a19      	ldr	r1, [r3, #32]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a66:	041a      	lsls	r2, r3, #16
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a78:	d006      	beq.n	8003a88 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a86:	e003      	b.n	8003a90 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2200      	movs	r2, #0
 8003a96:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0

}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b2c <HAL_PWR_EnterSTOPMode+0x78>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f023 0201 	bic.w	r2, r3, #1
 8003ac8:	4918      	ldr	r1, [pc, #96]	@ (8003b2c <HAL_PWR_EnterSTOPMode+0x78>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	600b      	str	r3, [r1, #0]

  /* Configure the PWR mode for the different Domains */
#if defined (DUAL_CORE)
  /* Check CPU ID */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8003ad0:	f7fd f8e0 	bl	8000c94 <HAL_GetCurrentCPUID>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d106      	bne.n	8003ae8 <HAL_PWR_EnterSTOPMode+0x34>
  {
    /* Keep DSTOP mode when Cortex-M7 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8003ada:	4b14      	ldr	r3, [pc, #80]	@ (8003b2c <HAL_PWR_EnterSTOPMode+0x78>)
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	4a13      	ldr	r2, [pc, #76]	@ (8003b2c <HAL_PWR_EnterSTOPMode+0x78>)
 8003ae0:	f023 0305 	bic.w	r3, r3, #5
 8003ae4:	6113      	str	r3, [r2, #16]
 8003ae6:	e005      	b.n	8003af4 <HAL_PWR_EnterSTOPMode+0x40>
  }
  else
  {
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
 8003ae8:	4b10      	ldr	r3, [pc, #64]	@ (8003b2c <HAL_PWR_EnterSTOPMode+0x78>)
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	4a0f      	ldr	r2, [pc, #60]	@ (8003b2c <HAL_PWR_EnterSTOPMode+0x78>)
 8003aee:	f023 0306 	bic.w	r3, r3, #6
 8003af2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003af4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b30 <HAL_PWR_EnterSTOPMode+0x7c>)
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	4a0d      	ldr	r2, [pc, #52]	@ (8003b30 <HAL_PWR_EnterSTOPMode+0x7c>)
 8003afa:	f043 0304 	orr.w	r3, r3, #4
 8003afe:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003b00:	f3bf 8f4f 	dsb	sy
}
 8003b04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b06:	f3bf 8f6f 	isb	sy
}
 8003b0a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_PWR_EnterSTOPMode+0x62>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8003b12:	bf30      	wfi
 8003b14:	e000      	b.n	8003b18 <HAL_PWR_EnterSTOPMode+0x64>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8003b16:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003b18:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_PWR_EnterSTOPMode+0x7c>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	4a04      	ldr	r2, [pc, #16]	@ (8003b30 <HAL_PWR_EnterSTOPMode+0x7c>)
 8003b1e:	f023 0304 	bic.w	r3, r3, #4
 8003b22:	6113      	str	r3, [r2, #16]
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	58024800 	.word	0x58024800
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003b3c:	4b29      	ldr	r3, [pc, #164]	@ (8003be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	2b06      	cmp	r3, #6
 8003b46:	d00a      	beq.n	8003b5e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b48:	4b26      	ldr	r3, [pc, #152]	@ (8003be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d001      	beq.n	8003b5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e040      	b.n	8003bdc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e03e      	b.n	8003bdc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b5e:	4b21      	ldr	r3, [pc, #132]	@ (8003be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003b66:	491f      	ldr	r1, [pc, #124]	@ (8003be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003b6e:	f7fc ff15 	bl	800099c <HAL_GetTick>
 8003b72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b74:	e009      	b.n	8003b8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003b76:	f7fc ff11 	bl	800099c <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b84:	d901      	bls.n	8003b8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e028      	b.n	8003bdc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003b8a:	4b16      	ldr	r3, [pc, #88]	@ (8003be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b96:	d1ee      	bne.n	8003b76 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b1e      	cmp	r3, #30
 8003b9c:	d008      	beq.n	8003bb0 <HAL_PWREx_ConfigSupply+0x7c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ba2:	d005      	beq.n	8003bb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b1d      	cmp	r3, #29
 8003ba8:	d002      	beq.n	8003bb0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b2d      	cmp	r3, #45	@ 0x2d
 8003bae:	d114      	bne.n	8003bda <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003bb0:	f7fc fef4 	bl	800099c <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003bb6:	e009      	b.n	8003bcc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bb8:	f7fc fef0 	bl	800099c <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003bc6:	d901      	bls.n	8003bcc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e007      	b.n	8003bdc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd8:	d1ee      	bne.n	8003bb8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	58024800 	.word	0x58024800

08003be8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08c      	sub	sp, #48	@ 0x30
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d102      	bne.n	8003bfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f000 bc48 	b.w	800448c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8088 	beq.w	8003d1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c0a:	4b99      	ldr	r3, [pc, #612]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c14:	4b96      	ldr	r3, [pc, #600]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d007      	beq.n	8003c30 <HAL_RCC_OscConfig+0x48>
 8003c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c22:	2b18      	cmp	r3, #24
 8003c24:	d111      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62>
 8003c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d10c      	bne.n	8003c4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	4b8f      	ldr	r3, [pc, #572]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d06d      	beq.n	8003d18 <HAL_RCC_OscConfig+0x130>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d169      	bne.n	8003d18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f000 bc21 	b.w	800448c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x7a>
 8003c54:	4b86      	ldr	r3, [pc, #536]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a85      	ldr	r2, [pc, #532]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	e02e      	b.n	8003cc0 <HAL_RCC_OscConfig+0xd8>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x9c>
 8003c6a:	4b81      	ldr	r3, [pc, #516]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a80      	ldr	r2, [pc, #512]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	4b7e      	ldr	r3, [pc, #504]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003c7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e01d      	b.n	8003cc0 <HAL_RCC_OscConfig+0xd8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0xc0>
 8003c8e:	4b78      	ldr	r3, [pc, #480]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a77      	ldr	r2, [pc, #476]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b75      	ldr	r3, [pc, #468]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a74      	ldr	r2, [pc, #464]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0xd8>
 8003ca8:	4b71      	ldr	r3, [pc, #452]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a70      	ldr	r2, [pc, #448]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	4b6e      	ldr	r3, [pc, #440]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6d      	ldr	r2, [pc, #436]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d013      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fc fe68 	bl	800099c <HAL_GetTick>
 8003ccc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7fc fe64 	bl	800099c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	@ 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e3d4      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ce2:	4b63      	ldr	r3, [pc, #396]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0xe8>
 8003cee:	e014      	b.n	8003d1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fc fe54 	bl	800099c <HAL_GetTick>
 8003cf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fc fe50 	bl	800099c <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	@ 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e3c0      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d0a:	4b59      	ldr	r3, [pc, #356]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x110>
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80ca 	beq.w	8003ebc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d28:	4b51      	ldr	r3, [pc, #324]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d32:	4b4f      	ldr	r3, [pc, #316]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d36:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <HAL_RCC_OscConfig+0x166>
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	2b18      	cmp	r3, #24
 8003d42:	d156      	bne.n	8003df2 <HAL_RCC_OscConfig+0x20a>
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d151      	bne.n	8003df2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d4e:	4b48      	ldr	r3, [pc, #288]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <HAL_RCC_OscConfig+0x17e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e392      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d66:	4b42      	ldr	r3, [pc, #264]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 0219 	bic.w	r2, r3, #25
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	493f      	ldr	r1, [pc, #252]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d78:	f7fc fe10 	bl	800099c <HAL_GetTick>
 8003d7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d80:	f7fc fe0c 	bl	800099c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e37c      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d92:	4b37      	ldr	r3, [pc, #220]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0304 	and.w	r3, r3, #4
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9e:	f7fc fe4d 	bl	8000a3c <HAL_GetREVID>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d817      	bhi.n	8003ddc <HAL_RCC_OscConfig+0x1f4>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b40      	cmp	r3, #64	@ 0x40
 8003db2:	d108      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x1de>
 8003db4:	4b2e      	ldr	r3, [pc, #184]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003dbc:	4a2c      	ldr	r2, [pc, #176]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003dbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dc2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc4:	e07a      	b.n	8003ebc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	031b      	lsls	r3, r3, #12
 8003dd4:	4926      	ldr	r1, [pc, #152]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dda:	e06f      	b.n	8003ebc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ddc:	4b24      	ldr	r3, [pc, #144]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	061b      	lsls	r3, r3, #24
 8003dea:	4921      	ldr	r1, [pc, #132]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003df0:	e064      	b.n	8003ebc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d047      	beq.n	8003e8a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 0219 	bic.w	r2, r3, #25
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	491a      	ldr	r1, [pc, #104]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fc fdc6 	bl	800099c <HAL_GetTick>
 8003e10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e14:	f7fc fdc2 	bl	800099c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e332      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e26:	4b12      	ldr	r3, [pc, #72]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e32:	f7fc fe03 	bl	8000a3c <HAL_GetREVID>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d819      	bhi.n	8003e74 <HAL_RCC_OscConfig+0x28c>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b40      	cmp	r3, #64	@ 0x40
 8003e46:	d108      	bne.n	8003e5a <HAL_RCC_OscConfig+0x272>
 8003e48:	4b09      	ldr	r3, [pc, #36]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003e50:	4a07      	ldr	r2, [pc, #28]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e56:	6053      	str	r3, [r2, #4]
 8003e58:	e030      	b.n	8003ebc <HAL_RCC_OscConfig+0x2d4>
 8003e5a:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	031b      	lsls	r3, r3, #12
 8003e68:	4901      	ldr	r1, [pc, #4]	@ (8003e70 <HAL_RCC_OscConfig+0x288>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	604b      	str	r3, [r1, #4]
 8003e6e:	e025      	b.n	8003ebc <HAL_RCC_OscConfig+0x2d4>
 8003e70:	58024400 	.word	0x58024400
 8003e74:	4b9a      	ldr	r3, [pc, #616]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	061b      	lsls	r3, r3, #24
 8003e82:	4997      	ldr	r1, [pc, #604]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]
 8003e88:	e018      	b.n	8003ebc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8a:	4b95      	ldr	r3, [pc, #596]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a94      	ldr	r2, [pc, #592]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e96:	f7fc fd81 	bl	800099c <HAL_GetTick>
 8003e9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e9e:	f7fc fd7d 	bl	800099c <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e2ed      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003eb0:	4b8b      	ldr	r3, [pc, #556]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80a9 	beq.w	800401c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eca:	4b85      	ldr	r3, [pc, #532]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ed2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ed4:	4b82      	ldr	r3, [pc, #520]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d007      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x308>
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b18      	cmp	r3, #24
 8003ee4:	d13a      	bne.n	8003f5c <HAL_RCC_OscConfig+0x374>
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d135      	bne.n	8003f5c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ef0:	4b7b      	ldr	r3, [pc, #492]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_OscConfig+0x320>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	2b80      	cmp	r3, #128	@ 0x80
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e2c1      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f08:	f7fc fd98 	bl	8000a3c <HAL_GetREVID>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d817      	bhi.n	8003f46 <HAL_RCC_OscConfig+0x35e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d108      	bne.n	8003f30 <HAL_RCC_OscConfig+0x348>
 8003f1e:	4b70      	ldr	r3, [pc, #448]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003f26:	4a6e      	ldr	r2, [pc, #440]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003f28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f2c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f2e:	e075      	b.n	800401c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f30:	4b6b      	ldr	r3, [pc, #428]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	069b      	lsls	r3, r3, #26
 8003f3e:	4968      	ldr	r1, [pc, #416]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f44:	e06a      	b.n	800401c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f46:	4b66      	ldr	r3, [pc, #408]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	061b      	lsls	r3, r3, #24
 8003f54:	4962      	ldr	r1, [pc, #392]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f5a:	e05f      	b.n	800401c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d042      	beq.n	8003fea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003f64:	4b5e      	ldr	r3, [pc, #376]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a5d      	ldr	r2, [pc, #372]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f70:	f7fc fd14 	bl	800099c <HAL_GetTick>
 8003f74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003f78:	f7fc fd10 	bl	800099c <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e280      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f8a:	4b55      	ldr	r3, [pc, #340]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f96:	f7fc fd51 	bl	8000a3c <HAL_GetREVID>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d817      	bhi.n	8003fd4 <HAL_RCC_OscConfig+0x3ec>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	d108      	bne.n	8003fbe <HAL_RCC_OscConfig+0x3d6>
 8003fac:	4b4c      	ldr	r3, [pc, #304]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003fb4:	4a4a      	ldr	r2, [pc, #296]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003fb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fba:	6053      	str	r3, [r2, #4]
 8003fbc:	e02e      	b.n	800401c <HAL_RCC_OscConfig+0x434>
 8003fbe:	4b48      	ldr	r3, [pc, #288]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	069b      	lsls	r3, r3, #26
 8003fcc:	4944      	ldr	r1, [pc, #272]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	604b      	str	r3, [r1, #4]
 8003fd2:	e023      	b.n	800401c <HAL_RCC_OscConfig+0x434>
 8003fd4:	4b42      	ldr	r3, [pc, #264]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	061b      	lsls	r3, r3, #24
 8003fe2:	493f      	ldr	r1, [pc, #252]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60cb      	str	r3, [r1, #12]
 8003fe8:	e018      	b.n	800401c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003fea:	4b3d      	ldr	r3, [pc, #244]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a3c      	ldr	r2, [pc, #240]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8003ff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff6:	f7fc fcd1 	bl	800099c <HAL_GetTick>
 8003ffa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ffe:	f7fc fccd 	bl	800099c <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e23d      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004010:	4b33      	ldr	r3, [pc, #204]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d036      	beq.n	8004096 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d019      	beq.n	8004064 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004030:	4b2b      	ldr	r3, [pc, #172]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8004032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004034:	4a2a      	ldr	r2, [pc, #168]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403c:	f7fc fcae 	bl	800099c <HAL_GetTick>
 8004040:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004044:	f7fc fcaa 	bl	800099c <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e21a      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004056:	4b22      	ldr	r3, [pc, #136]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8004058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x45c>
 8004062:	e018      	b.n	8004096 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004064:	4b1e      	ldr	r3, [pc, #120]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 8004066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004068:	4a1d      	ldr	r2, [pc, #116]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 800406a:	f023 0301 	bic.w	r3, r3, #1
 800406e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004070:	f7fc fc94 	bl	800099c <HAL_GetTick>
 8004074:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004078:	f7fc fc90 	bl	800099c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e200      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800408a:	4b15      	ldr	r3, [pc, #84]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 800408c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d039      	beq.n	8004116 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d01c      	beq.n	80040e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040aa:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a0c      	ldr	r2, [pc, #48]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 80040b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040b6:	f7fc fc71 	bl	800099c <HAL_GetTick>
 80040ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040be:	f7fc fc6d 	bl	800099c <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e1dd      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040d0:	4b03      	ldr	r3, [pc, #12]	@ (80040e0 <HAL_RCC_OscConfig+0x4f8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <HAL_RCC_OscConfig+0x4d6>
 80040dc:	e01b      	b.n	8004116 <HAL_RCC_OscConfig+0x52e>
 80040de:	bf00      	nop
 80040e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040e4:	4b9b      	ldr	r3, [pc, #620]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a9a      	ldr	r2, [pc, #616]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80040ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040f0:	f7fc fc54 	bl	800099c <HAL_GetTick>
 80040f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040f8:	f7fc fc50 	bl	800099c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e1c0      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800410a:	4b92      	ldr	r3, [pc, #584]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8081 	beq.w	8004226 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004124:	4b8c      	ldr	r3, [pc, #560]	@ (8004358 <HAL_RCC_OscConfig+0x770>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a8b      	ldr	r2, [pc, #556]	@ (8004358 <HAL_RCC_OscConfig+0x770>)
 800412a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800412e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004130:	f7fc fc34 	bl	800099c <HAL_GetTick>
 8004134:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004138:	f7fc fc30 	bl	800099c <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	@ 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e1a0      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800414a:	4b83      	ldr	r3, [pc, #524]	@ (8004358 <HAL_RCC_OscConfig+0x770>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d106      	bne.n	800416c <HAL_RCC_OscConfig+0x584>
 800415e:	4b7d      	ldr	r3, [pc, #500]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004162:	4a7c      	ldr	r2, [pc, #496]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	6713      	str	r3, [r2, #112]	@ 0x70
 800416a:	e02d      	b.n	80041c8 <HAL_RCC_OscConfig+0x5e0>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10c      	bne.n	800418e <HAL_RCC_OscConfig+0x5a6>
 8004174:	4b77      	ldr	r3, [pc, #476]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004178:	4a76      	ldr	r2, [pc, #472]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 800417a:	f023 0301 	bic.w	r3, r3, #1
 800417e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004180:	4b74      	ldr	r3, [pc, #464]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004184:	4a73      	ldr	r2, [pc, #460]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004186:	f023 0304 	bic.w	r3, r3, #4
 800418a:	6713      	str	r3, [r2, #112]	@ 0x70
 800418c:	e01c      	b.n	80041c8 <HAL_RCC_OscConfig+0x5e0>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b05      	cmp	r3, #5
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x5c8>
 8004196:	4b6f      	ldr	r3, [pc, #444]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419a:	4a6e      	ldr	r2, [pc, #440]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 800419c:	f043 0304 	orr.w	r3, r3, #4
 80041a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a2:	4b6c      	ldr	r3, [pc, #432]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a6:	4a6b      	ldr	r2, [pc, #428]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0x5e0>
 80041b0:	4b68      	ldr	r3, [pc, #416]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b4:	4a67      	ldr	r2, [pc, #412]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80041bc:	4b65      	ldr	r3, [pc, #404]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c0:	4a64      	ldr	r2, [pc, #400]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80041c2:	f023 0304 	bic.w	r3, r3, #4
 80041c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d015      	beq.n	80041fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d0:	f7fc fbe4 	bl	800099c <HAL_GetTick>
 80041d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041d6:	e00a      	b.n	80041ee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d8:	f7fc fbe0 	bl	800099c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e14e      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ee:	4b59      	ldr	r3, [pc, #356]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0ee      	beq.n	80041d8 <HAL_RCC_OscConfig+0x5f0>
 80041fa:	e014      	b.n	8004226 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fc fbce 	bl	800099c <HAL_GetTick>
 8004200:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004202:	e00a      	b.n	800421a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7fc fbca 	bl	800099c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e138      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800421a:	4b4e      	ldr	r3, [pc, #312]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1ee      	bne.n	8004204 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 812d 	beq.w	800448a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004230:	4b48      	ldr	r3, [pc, #288]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004238:	2b18      	cmp	r3, #24
 800423a:	f000 80bd 	beq.w	80043b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	2b02      	cmp	r3, #2
 8004244:	f040 809e 	bne.w	8004384 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004248:	4b42      	ldr	r3, [pc, #264]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a41      	ldr	r2, [pc, #260]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 800424e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fc fba2 	bl	800099c <HAL_GetTick>
 8004258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425c:	f7fc fb9e 	bl	800099c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e10e      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800426e:	4b39      	ldr	r3, [pc, #228]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800427a:	4b36      	ldr	r3, [pc, #216]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 800427c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800427e:	4b37      	ldr	r3, [pc, #220]	@ (800435c <HAL_RCC_OscConfig+0x774>)
 8004280:	4013      	ands	r3, r2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800428a:	0112      	lsls	r2, r2, #4
 800428c:	430a      	orrs	r2, r1
 800428e:	4931      	ldr	r1, [pc, #196]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004290:	4313      	orrs	r3, r2
 8004292:	628b      	str	r3, [r1, #40]	@ 0x28
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004298:	3b01      	subs	r3, #1
 800429a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a2:	3b01      	subs	r3, #1
 80042a4:	025b      	lsls	r3, r3, #9
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	3b01      	subs	r3, #1
 80042b0:	041b      	lsls	r3, r3, #16
 80042b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042bc:	3b01      	subs	r3, #1
 80042be:	061b      	lsls	r3, r3, #24
 80042c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80042c4:	4923      	ldr	r1, [pc, #140]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80042ca:	4b22      	ldr	r3, [pc, #136]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	4a21      	ldr	r2, [pc, #132]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80042d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042da:	4b21      	ldr	r3, [pc, #132]	@ (8004360 <HAL_RCC_OscConfig+0x778>)
 80042dc:	4013      	ands	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80042e2:	00d2      	lsls	r2, r2, #3
 80042e4:	491b      	ldr	r1, [pc, #108]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80042ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80042ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ee:	f023 020c 	bic.w	r2, r3, #12
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	4917      	ldr	r1, [pc, #92]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80042fc:	4b15      	ldr	r3, [pc, #84]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 80042fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004300:	f023 0202 	bic.w	r2, r3, #2
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004308:	4912      	ldr	r1, [pc, #72]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800430e:	4b11      	ldr	r3, [pc, #68]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004312:	4a10      	ldr	r2, [pc, #64]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004318:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800431a:	4b0e      	ldr	r3, [pc, #56]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 800431c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431e:	4a0d      	ldr	r2, [pc, #52]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004324:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004326:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432a:	4a0a      	ldr	r2, [pc, #40]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 800432c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004330:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004332:	4b08      	ldr	r3, [pc, #32]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004336:	4a07      	ldr	r2, [pc, #28]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800433e:	4b05      	ldr	r3, [pc, #20]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a04      	ldr	r2, [pc, #16]	@ (8004354 <HAL_RCC_OscConfig+0x76c>)
 8004344:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434a:	f7fc fb27 	bl	800099c <HAL_GetTick>
 800434e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004350:	e011      	b.n	8004376 <HAL_RCC_OscConfig+0x78e>
 8004352:	bf00      	nop
 8004354:	58024400 	.word	0x58024400
 8004358:	58024800 	.word	0x58024800
 800435c:	fffffc0c 	.word	0xfffffc0c
 8004360:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004364:	f7fc fb1a 	bl	800099c <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e08a      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004376:	4b47      	ldr	r3, [pc, #284]	@ (8004494 <HAL_RCC_OscConfig+0x8ac>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x77c>
 8004382:	e082      	b.n	800448a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004384:	4b43      	ldr	r3, [pc, #268]	@ (8004494 <HAL_RCC_OscConfig+0x8ac>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a42      	ldr	r2, [pc, #264]	@ (8004494 <HAL_RCC_OscConfig+0x8ac>)
 800438a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800438e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fc fb04 	bl	800099c <HAL_GetTick>
 8004394:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004398:	f7fc fb00 	bl	800099c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e070      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004494 <HAL_RCC_OscConfig+0x8ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x7b0>
 80043b6:	e068      	b.n	800448a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80043b8:	4b36      	ldr	r3, [pc, #216]	@ (8004494 <HAL_RCC_OscConfig+0x8ac>)
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043be:	4b35      	ldr	r3, [pc, #212]	@ (8004494 <HAL_RCC_OscConfig+0x8ac>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d031      	beq.n	8004430 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f003 0203 	and.w	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d12a      	bne.n	8004430 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d122      	bne.n	8004430 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d11a      	bne.n	8004430 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	0a5b      	lsrs	r3, r3, #9
 80043fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004406:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d111      	bne.n	8004430 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	0c1b      	lsrs	r3, r3, #16
 8004410:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004418:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d108      	bne.n	8004430 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	0e1b      	lsrs	r3, r3, #24
 8004422:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e02b      	b.n	800448c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004434:	4b17      	ldr	r3, [pc, #92]	@ (8004494 <HAL_RCC_OscConfig+0x8ac>)
 8004436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004438:	08db      	lsrs	r3, r3, #3
 800443a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800443e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	429a      	cmp	r2, r3
 8004448:	d01f      	beq.n	800448a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800444a:	4b12      	ldr	r3, [pc, #72]	@ (8004494 <HAL_RCC_OscConfig+0x8ac>)
 800444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444e:	4a11      	ldr	r2, [pc, #68]	@ (8004494 <HAL_RCC_OscConfig+0x8ac>)
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004456:	f7fc faa1 	bl	800099c <HAL_GetTick>
 800445a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800445c:	bf00      	nop
 800445e:	f7fc fa9d 	bl	800099c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004466:	4293      	cmp	r3, r2
 8004468:	d0f9      	beq.n	800445e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800446a:	4b0a      	ldr	r3, [pc, #40]	@ (8004494 <HAL_RCC_OscConfig+0x8ac>)
 800446c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800446e:	4b0a      	ldr	r3, [pc, #40]	@ (8004498 <HAL_RCC_OscConfig+0x8b0>)
 8004470:	4013      	ands	r3, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004476:	00d2      	lsls	r2, r2, #3
 8004478:	4906      	ldr	r1, [pc, #24]	@ (8004494 <HAL_RCC_OscConfig+0x8ac>)
 800447a:	4313      	orrs	r3, r2
 800447c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800447e:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <HAL_RCC_OscConfig+0x8ac>)
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	4a04      	ldr	r2, [pc, #16]	@ (8004494 <HAL_RCC_OscConfig+0x8ac>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3730      	adds	r7, #48	@ 0x30
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	58024400 	.word	0x58024400
 8004498:	ffff0007 	.word	0xffff0007

0800449c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e19c      	b.n	80047ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044b0:	4b8a      	ldr	r3, [pc, #552]	@ (80046dc <HAL_RCC_ClockConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d910      	bls.n	80044e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4b87      	ldr	r3, [pc, #540]	@ (80046dc <HAL_RCC_ClockConfig+0x240>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 020f 	bic.w	r2, r3, #15
 80044c6:	4985      	ldr	r1, [pc, #532]	@ (80046dc <HAL_RCC_ClockConfig+0x240>)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ce:	4b83      	ldr	r3, [pc, #524]	@ (80046dc <HAL_RCC_ClockConfig+0x240>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e184      	b.n	80047ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d010      	beq.n	800450e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691a      	ldr	r2, [r3, #16]
 80044f0:	4b7b      	ldr	r3, [pc, #492]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d908      	bls.n	800450e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044fc:	4b78      	ldr	r3, [pc, #480]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	4975      	ldr	r1, [pc, #468]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 800450a:	4313      	orrs	r3, r2
 800450c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d010      	beq.n	800453c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695a      	ldr	r2, [r3, #20]
 800451e:	4b70      	ldr	r3, [pc, #448]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004526:	429a      	cmp	r2, r3
 8004528:	d908      	bls.n	800453c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800452a:	4b6d      	ldr	r3, [pc, #436]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	496a      	ldr	r1, [pc, #424]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 8004538:	4313      	orrs	r3, r2
 800453a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d010      	beq.n	800456a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699a      	ldr	r2, [r3, #24]
 800454c:	4b64      	ldr	r3, [pc, #400]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004554:	429a      	cmp	r2, r3
 8004556:	d908      	bls.n	800456a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004558:	4b61      	ldr	r3, [pc, #388]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	495e      	ldr	r1, [pc, #376]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 8004566:	4313      	orrs	r3, r2
 8004568:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d010      	beq.n	8004598 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69da      	ldr	r2, [r3, #28]
 800457a:	4b59      	ldr	r3, [pc, #356]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004582:	429a      	cmp	r2, r3
 8004584:	d908      	bls.n	8004598 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004586:	4b56      	ldr	r3, [pc, #344]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	4953      	ldr	r1, [pc, #332]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 8004594:	4313      	orrs	r3, r2
 8004596:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d010      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	4b4d      	ldr	r3, [pc, #308]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d908      	bls.n	80045c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b4:	4b4a      	ldr	r3, [pc, #296]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	f023 020f 	bic.w	r2, r3, #15
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4947      	ldr	r1, [pc, #284]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d055      	beq.n	800467e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80045d2:	4b43      	ldr	r3, [pc, #268]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	4940      	ldr	r1, [pc, #256]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d107      	bne.n	80045fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ec:	4b3c      	ldr	r3, [pc, #240]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d121      	bne.n	800463c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0f6      	b.n	80047ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b03      	cmp	r3, #3
 8004602:	d107      	bne.n	8004614 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004604:	4b36      	ldr	r3, [pc, #216]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d115      	bne.n	800463c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0ea      	b.n	80047ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d107      	bne.n	800462c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800461c:	4b30      	ldr	r3, [pc, #192]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0de      	b.n	80047ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800462c:	4b2c      	ldr	r3, [pc, #176]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e0d6      	b.n	80047ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800463c:	4b28      	ldr	r3, [pc, #160]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f023 0207 	bic.w	r2, r3, #7
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	4925      	ldr	r1, [pc, #148]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 800464a:	4313      	orrs	r3, r2
 800464c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800464e:	f7fc f9a5 	bl	800099c <HAL_GetTick>
 8004652:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004654:	e00a      	b.n	800466c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004656:	f7fc f9a1 	bl	800099c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e0be      	b.n	80047ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466c:	4b1c      	ldr	r3, [pc, #112]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	429a      	cmp	r2, r3
 800467c:	d1eb      	bne.n	8004656 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d010      	beq.n	80046ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	4b14      	ldr	r3, [pc, #80]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	429a      	cmp	r2, r3
 8004698:	d208      	bcs.n	80046ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800469a:	4b11      	ldr	r3, [pc, #68]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f023 020f 	bic.w	r2, r3, #15
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	490e      	ldr	r1, [pc, #56]	@ (80046e0 <HAL_RCC_ClockConfig+0x244>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046ac:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <HAL_RCC_ClockConfig+0x240>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 030f 	and.w	r3, r3, #15
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d214      	bcs.n	80046e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ba:	4b08      	ldr	r3, [pc, #32]	@ (80046dc <HAL_RCC_ClockConfig+0x240>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f023 020f 	bic.w	r2, r3, #15
 80046c2:	4906      	ldr	r1, [pc, #24]	@ (80046dc <HAL_RCC_ClockConfig+0x240>)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ca:	4b04      	ldr	r3, [pc, #16]	@ (80046dc <HAL_RCC_ClockConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d005      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e086      	b.n	80047ea <HAL_RCC_ClockConfig+0x34e>
 80046dc:	52002000 	.word	0x52002000
 80046e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d010      	beq.n	8004712 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	4b3f      	ldr	r3, [pc, #252]	@ (80047f4 <HAL_RCC_ClockConfig+0x358>)
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d208      	bcs.n	8004712 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004700:	4b3c      	ldr	r3, [pc, #240]	@ (80047f4 <HAL_RCC_ClockConfig+0x358>)
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	4939      	ldr	r1, [pc, #228]	@ (80047f4 <HAL_RCC_ClockConfig+0x358>)
 800470e:	4313      	orrs	r3, r2
 8004710:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d010      	beq.n	8004740 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695a      	ldr	r2, [r3, #20]
 8004722:	4b34      	ldr	r3, [pc, #208]	@ (80047f4 <HAL_RCC_ClockConfig+0x358>)
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800472a:	429a      	cmp	r2, r3
 800472c:	d208      	bcs.n	8004740 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800472e:	4b31      	ldr	r3, [pc, #196]	@ (80047f4 <HAL_RCC_ClockConfig+0x358>)
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	492e      	ldr	r1, [pc, #184]	@ (80047f4 <HAL_RCC_ClockConfig+0x358>)
 800473c:	4313      	orrs	r3, r2
 800473e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b00      	cmp	r3, #0
 800474a:	d010      	beq.n	800476e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699a      	ldr	r2, [r3, #24]
 8004750:	4b28      	ldr	r3, [pc, #160]	@ (80047f4 <HAL_RCC_ClockConfig+0x358>)
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004758:	429a      	cmp	r2, r3
 800475a:	d208      	bcs.n	800476e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800475c:	4b25      	ldr	r3, [pc, #148]	@ (80047f4 <HAL_RCC_ClockConfig+0x358>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	4922      	ldr	r1, [pc, #136]	@ (80047f4 <HAL_RCC_ClockConfig+0x358>)
 800476a:	4313      	orrs	r3, r2
 800476c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d010      	beq.n	800479c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69da      	ldr	r2, [r3, #28]
 800477e:	4b1d      	ldr	r3, [pc, #116]	@ (80047f4 <HAL_RCC_ClockConfig+0x358>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004786:	429a      	cmp	r2, r3
 8004788:	d208      	bcs.n	800479c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800478a:	4b1a      	ldr	r3, [pc, #104]	@ (80047f4 <HAL_RCC_ClockConfig+0x358>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	4917      	ldr	r1, [pc, #92]	@ (80047f4 <HAL_RCC_ClockConfig+0x358>)
 8004798:	4313      	orrs	r3, r2
 800479a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800479c:	f000 f834 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4b14      	ldr	r3, [pc, #80]	@ (80047f4 <HAL_RCC_ClockConfig+0x358>)
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	0a1b      	lsrs	r3, r3, #8
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	4912      	ldr	r1, [pc, #72]	@ (80047f8 <HAL_RCC_ClockConfig+0x35c>)
 80047ae:	5ccb      	ldrb	r3, [r1, r3]
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
 80047b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047ba:	4b0e      	ldr	r3, [pc, #56]	@ (80047f4 <HAL_RCC_ClockConfig+0x358>)
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	4a0d      	ldr	r2, [pc, #52]	@ (80047f8 <HAL_RCC_ClockConfig+0x35c>)
 80047c4:	5cd3      	ldrb	r3, [r2, r3]
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
 80047d0:	4a0a      	ldr	r2, [pc, #40]	@ (80047fc <HAL_RCC_ClockConfig+0x360>)
 80047d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004800 <HAL_RCC_ClockConfig+0x364>)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80047da:	4b0a      	ldr	r3, [pc, #40]	@ (8004804 <HAL_RCC_ClockConfig+0x368>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fc f892 	bl	8000908 <HAL_InitTick>
 80047e4:	4603      	mov	r3, r0
 80047e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	58024400 	.word	0x58024400
 80047f8:	08010c48 	.word	0x08010c48
 80047fc:	20000004 	.word	0x20000004
 8004800:	20000000 	.word	0x20000000
 8004804:	20000008 	.word	0x20000008

08004808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004808:	b480      	push	{r7}
 800480a:	b089      	sub	sp, #36	@ 0x24
 800480c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800480e:	4bb3      	ldr	r3, [pc, #716]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004816:	2b18      	cmp	r3, #24
 8004818:	f200 8155 	bhi.w	8004ac6 <HAL_RCC_GetSysClockFreq+0x2be>
 800481c:	a201      	add	r2, pc, #4	@ (adr r2, 8004824 <HAL_RCC_GetSysClockFreq+0x1c>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004889 	.word	0x08004889
 8004828:	08004ac7 	.word	0x08004ac7
 800482c:	08004ac7 	.word	0x08004ac7
 8004830:	08004ac7 	.word	0x08004ac7
 8004834:	08004ac7 	.word	0x08004ac7
 8004838:	08004ac7 	.word	0x08004ac7
 800483c:	08004ac7 	.word	0x08004ac7
 8004840:	08004ac7 	.word	0x08004ac7
 8004844:	080048af 	.word	0x080048af
 8004848:	08004ac7 	.word	0x08004ac7
 800484c:	08004ac7 	.word	0x08004ac7
 8004850:	08004ac7 	.word	0x08004ac7
 8004854:	08004ac7 	.word	0x08004ac7
 8004858:	08004ac7 	.word	0x08004ac7
 800485c:	08004ac7 	.word	0x08004ac7
 8004860:	08004ac7 	.word	0x08004ac7
 8004864:	080048b5 	.word	0x080048b5
 8004868:	08004ac7 	.word	0x08004ac7
 800486c:	08004ac7 	.word	0x08004ac7
 8004870:	08004ac7 	.word	0x08004ac7
 8004874:	08004ac7 	.word	0x08004ac7
 8004878:	08004ac7 	.word	0x08004ac7
 800487c:	08004ac7 	.word	0x08004ac7
 8004880:	08004ac7 	.word	0x08004ac7
 8004884:	080048bb 	.word	0x080048bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004888:	4b94      	ldr	r3, [pc, #592]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d009      	beq.n	80048a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004894:	4b91      	ldr	r3, [pc, #580]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	08db      	lsrs	r3, r3, #3
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	4a90      	ldr	r2, [pc, #576]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
 80048a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80048a6:	e111      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80048a8:	4b8d      	ldr	r3, [pc, #564]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048aa:	61bb      	str	r3, [r7, #24]
      break;
 80048ac:	e10e      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80048ae:	4b8d      	ldr	r3, [pc, #564]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80048b0:	61bb      	str	r3, [r7, #24]
      break;
 80048b2:	e10b      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80048b4:	4b8c      	ldr	r3, [pc, #560]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80048b6:	61bb      	str	r3, [r7, #24]
      break;
 80048b8:	e108      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048ba:	4b88      	ldr	r3, [pc, #544]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80048c4:	4b85      	ldr	r3, [pc, #532]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80048d0:	4b82      	ldr	r3, [pc, #520]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80048da:	4b80      	ldr	r3, [pc, #512]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048de:	08db      	lsrs	r3, r3, #3
 80048e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80e1 	beq.w	8004ac0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b02      	cmp	r3, #2
 8004902:	f000 8083 	beq.w	8004a0c <HAL_RCC_GetSysClockFreq+0x204>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b02      	cmp	r3, #2
 800490a:	f200 80a1 	bhi.w	8004a50 <HAL_RCC_GetSysClockFreq+0x248>
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x114>
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d056      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800491a:	e099      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800491c:	4b6f      	ldr	r3, [pc, #444]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d02d      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004928:	4b6c      	ldr	r3, [pc, #432]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	08db      	lsrs	r3, r3, #3
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	4a6b      	ldr	r2, [pc, #428]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
 8004938:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004952:	4b62      	ldr	r3, [pc, #392]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004962:	ed97 6a02 	vldr	s12, [r7, #8]
 8004966:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004aec <HAL_RCC_GetSysClockFreq+0x2e4>
 800496a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800496e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800497a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004982:	e087      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004af0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004996:	4b51      	ldr	r3, [pc, #324]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80049aa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004aec <HAL_RCC_GetSysClockFreq+0x2e4>
 80049ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049c6:	e065      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004af4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80049d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049da:	4b40      	ldr	r3, [pc, #256]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80049ee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004aec <HAL_RCC_GetSysClockFreq+0x2e4>
 80049f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a0a:	e043      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004af8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1e:	4b2f      	ldr	r3, [pc, #188]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a32:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004aec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a4e:	e021      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004af4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a62:	4b1e      	ldr	r3, [pc, #120]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a76:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004aec <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a92:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004a94:	4b11      	ldr	r3, [pc, #68]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a98:	0a5b      	lsrs	r3, r3, #9
 8004a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	ee07 3a90 	vmov	s15, r3
 8004aa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004aac:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ab8:	ee17 3a90 	vmov	r3, s15
 8004abc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004abe:	e005      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61bb      	str	r3, [r7, #24]
      break;
 8004ac4:	e002      	b.n	8004acc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004ac6:	4b07      	ldr	r3, [pc, #28]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ac8:	61bb      	str	r3, [r7, #24]
      break;
 8004aca:	bf00      	nop
  }

  return sysclockfreq;
 8004acc:	69bb      	ldr	r3, [r7, #24]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3724      	adds	r7, #36	@ 0x24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	03d09000 	.word	0x03d09000
 8004ae4:	003d0900 	.word	0x003d0900
 8004ae8:	017d7840 	.word	0x017d7840
 8004aec:	46000000 	.word	0x46000000
 8004af0:	4c742400 	.word	0x4c742400
 8004af4:	4a742400 	.word	0x4a742400
 8004af8:	4bbebc20 	.word	0x4bbebc20

08004afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b02:	f7ff fe81 	bl	8004808 <HAL_RCC_GetSysClockFreq>
 8004b06:	4602      	mov	r2, r0
 8004b08:	4b10      	ldr	r3, [pc, #64]	@ (8004b4c <HAL_RCC_GetHCLKFreq+0x50>)
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	0a1b      	lsrs	r3, r3, #8
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	490f      	ldr	r1, [pc, #60]	@ (8004b50 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b14:	5ccb      	ldrb	r3, [r1, r3]
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b20:	4b0a      	ldr	r3, [pc, #40]	@ (8004b4c <HAL_RCC_GetHCLKFreq+0x50>)
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	4a09      	ldr	r2, [pc, #36]	@ (8004b50 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b2a:	5cd3      	ldrb	r3, [r2, r3]
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	fa22 f303 	lsr.w	r3, r2, r3
 8004b36:	4a07      	ldr	r2, [pc, #28]	@ (8004b54 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b3a:	4a07      	ldr	r2, [pc, #28]	@ (8004b58 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004b40:	4b04      	ldr	r3, [pc, #16]	@ (8004b54 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b42:	681b      	ldr	r3, [r3, #0]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	58024400 	.word	0x58024400
 8004b50:	08010c48 	.word	0x08010c48
 8004b54:	20000004 	.word	0x20000004
 8004b58:	20000000 	.word	0x20000000

08004b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004b60:	f7ff ffcc 	bl	8004afc <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	091b      	lsrs	r3, r3, #4
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4904      	ldr	r1, [pc, #16]	@ (8004b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	58024400 	.word	0x58024400
 8004b84:	08010c48 	.word	0x08010c48

08004b88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b8c:	b0cc      	sub	sp, #304	@ 0x130
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ba0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004bac:	2500      	movs	r5, #0
 8004bae:	ea54 0305 	orrs.w	r3, r4, r5
 8004bb2:	d049      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004bb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bbe:	d02f      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004bc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bc4:	d828      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004bc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bca:	d01a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004bcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bd0:	d822      	bhi.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004bd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bda:	d007      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004bdc:	e01c      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bde:	4bb8      	ldr	r3, [pc, #736]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be2:	4ab7      	ldr	r2, [pc, #732]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004bea:	e01a      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f002 fba1 	bl	800733c <RCCEx_PLL2_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c00:	e00f      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c06:	3328      	adds	r3, #40	@ 0x28
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f002 fc48 	bl	80074a0 <RCCEx_PLL3_Config>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004c16:	e004      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004c1e:	e000      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c2a:	4ba5      	ldr	r3, [pc, #660]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c38:	4aa1      	ldr	r2, [pc, #644]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c3e:	e003      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004c44:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004c54:	f04f 0900 	mov.w	r9, #0
 8004c58:	ea58 0309 	orrs.w	r3, r8, r9
 8004c5c:	d047      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d82a      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004c68:	a201      	add	r2, pc, #4	@ (adr r2, 8004c70 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6e:	bf00      	nop
 8004c70:	08004c85 	.word	0x08004c85
 8004c74:	08004c93 	.word	0x08004c93
 8004c78:	08004ca9 	.word	0x08004ca9
 8004c7c:	08004cc7 	.word	0x08004cc7
 8004c80:	08004cc7 	.word	0x08004cc7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c84:	4b8e      	ldr	r3, [pc, #568]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c88:	4a8d      	ldr	r2, [pc, #564]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c90:	e01a      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004c96:	3308      	adds	r3, #8
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f002 fb4e 	bl	800733c <RCCEx_PLL2_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ca6:	e00f      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ca8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cac:	3328      	adds	r3, #40	@ 0x28
 8004cae:	2100      	movs	r1, #0
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f002 fbf5 	bl	80074a0 <RCCEx_PLL3_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cbc:	e004      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004cc4:	e000      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10a      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cd0:	4b7b      	ldr	r3, [pc, #492]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd4:	f023 0107 	bic.w	r1, r3, #7
 8004cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cde:	4a78      	ldr	r2, [pc, #480]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ce4:	e003      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004cea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004cee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004cfa:	f04f 0b00 	mov.w	fp, #0
 8004cfe:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d02:	d04c      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004d04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d0e:	d030      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d14:	d829      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d16:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d18:	d02d      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004d1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d1c:	d825      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d1e:	2b80      	cmp	r3, #128	@ 0x80
 8004d20:	d018      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004d22:	2b80      	cmp	r3, #128	@ 0x80
 8004d24:	d821      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004d2a:	2b40      	cmp	r3, #64	@ 0x40
 8004d2c:	d007      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004d2e:	e01c      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d30:	4b63      	ldr	r3, [pc, #396]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	4a62      	ldr	r2, [pc, #392]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d3c:	e01c      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d42:	3308      	adds	r3, #8
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f002 faf8 	bl	800733c <RCCEx_PLL2_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d52:	e011      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d58:	3328      	adds	r3, #40	@ 0x28
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f002 fb9f 	bl	80074a0 <RCCEx_PLL3_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d68:	e006      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004d70:	e002      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004d72:	bf00      	nop
 8004d74:	e000      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004d80:	4b4f      	ldr	r3, [pc, #316]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d84:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004d88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d8e:	4a4c      	ldr	r2, [pc, #304]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d94:	e003      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004d9a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004daa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004dae:	2300      	movs	r3, #0
 8004db0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004db4:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8004db8:	460b      	mov	r3, r1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	d053      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004dbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004dc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004dc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dca:	d035      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004dcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dd0:	d82e      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004dd2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004dd6:	d031      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004dd8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ddc:	d828      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004dde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004de2:	d01a      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004de4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004de8:	d822      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004dee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004df2:	d007      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004df4:	e01c      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df6:	4b32      	ldr	r3, [pc, #200]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	4a31      	ldr	r2, [pc, #196]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e02:	e01c      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e08:	3308      	adds	r3, #8
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f002 fa95 	bl	800733c <RCCEx_PLL2_Config>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004e18:	e011      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e1e:	3328      	adds	r3, #40	@ 0x28
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f002 fb3c 	bl	80074a0 <RCCEx_PLL3_Config>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e2e:	e006      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004e36:	e002      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e38:	bf00      	nop
 8004e3a:	e000      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10b      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e46:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004e4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e56:	4a1a      	ldr	r2, [pc, #104]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e5c:	e003      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004e62:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004e72:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004e76:	2300      	movs	r3, #0
 8004e78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004e7c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004e80:	460b      	mov	r3, r1
 8004e82:	4313      	orrs	r3, r2
 8004e84:	d056      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004e86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004e8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e92:	d038      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004e94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e98:	d831      	bhi.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e9e:	d034      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004ea0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ea4:	d82b      	bhi.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ea6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004eaa:	d01d      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004eac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004eb0:	d825      	bhi.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d006      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004eb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004eba:	d00a      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004ebc:	e01f      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ebe:	bf00      	nop
 8004ec0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec4:	4ba2      	ldr	r3, [pc, #648]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec8:	4aa1      	ldr	r2, [pc, #644]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ece:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ed0:	e01c      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4618      	mov	r0, r3
 8004edc:	f002 fa2e 	bl	800733c <RCCEx_PLL2_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ee6:	e011      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ee8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004eec:	3328      	adds	r3, #40	@ 0x28
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f002 fad5 	bl	80074a0 <RCCEx_PLL3_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004efc:	e006      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004f04:	e002      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004f06:	bf00      	nop
 8004f08:	e000      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f0c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10b      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f14:	4b8e      	ldr	r3, [pc, #568]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f18:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f24:	4a8a      	ldr	r2, [pc, #552]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f26:	430b      	orrs	r3, r1
 8004f28:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f2a:	e003      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004f30:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004f40:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f44:	2300      	movs	r3, #0
 8004f46:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004f4a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4313      	orrs	r3, r2
 8004f52:	d03a      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004f54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f5a:	2b30      	cmp	r3, #48	@ 0x30
 8004f5c:	d01f      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004f5e:	2b30      	cmp	r3, #48	@ 0x30
 8004f60:	d819      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d00c      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	d815      	bhi.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d019      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d111      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f72:	4b77      	ldr	r3, [pc, #476]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	4a76      	ldr	r2, [pc, #472]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004f7e:	e011      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004f84:	3308      	adds	r3, #8
 8004f86:	2102      	movs	r1, #2
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f002 f9d7 	bl	800733c <RCCEx_PLL2_Config>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004f94:	e006      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8004f9c:	e002      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004f9e:	bf00      	nop
 8004fa0:	e000      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004fac:	4b68      	ldr	r3, [pc, #416]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fb0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004fb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fba:	4a65      	ldr	r2, [pc, #404]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fc0:	e003      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8004fc6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004fca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004fd6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004fe0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	d051      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ff0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ff4:	d035      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004ff6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ffa:	d82e      	bhi.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ffc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005000:	d031      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005002:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005006:	d828      	bhi.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800500c:	d01a      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800500e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005012:	d822      	bhi.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800501c:	d007      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800501e:	e01c      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005020:	4b4b      	ldr	r3, [pc, #300]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	4a4a      	ldr	r2, [pc, #296]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005026:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800502a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800502c:	e01c      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800502e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005032:	3308      	adds	r3, #8
 8005034:	2100      	movs	r1, #0
 8005036:	4618      	mov	r0, r3
 8005038:	f002 f980 	bl	800733c <RCCEx_PLL2_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005042:	e011      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005044:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005048:	3328      	adds	r3, #40	@ 0x28
 800504a:	2100      	movs	r1, #0
 800504c:	4618      	mov	r0, r3
 800504e:	f002 fa27 	bl	80074a0 <RCCEx_PLL3_Config>
 8005052:	4603      	mov	r3, r0
 8005054:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005058:	e006      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005060:	e002      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005062:	bf00      	nop
 8005064:	e000      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005068:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10a      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005070:	4b37      	ldr	r3, [pc, #220]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005074:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005078:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800507c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800507e:	4a34      	ldr	r2, [pc, #208]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005080:	430b      	orrs	r3, r1
 8005082:	6513      	str	r3, [r2, #80]	@ 0x50
 8005084:	e003      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005086:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800508a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800508e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005096:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800509a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800509e:	2300      	movs	r3, #0
 80050a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80050a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4313      	orrs	r3, r2
 80050ac:	d056      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80050ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050b8:	d033      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80050ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050be:	d82c      	bhi.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050c4:	d02f      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80050c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050ca:	d826      	bhi.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050d0:	d02b      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80050d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050d6:	d820      	bhi.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050dc:	d012      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80050de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050e2:	d81a      	bhi.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d022      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80050e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ec:	d115      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050f2:	3308      	adds	r3, #8
 80050f4:	2101      	movs	r1, #1
 80050f6:	4618      	mov	r0, r3
 80050f8:	f002 f920 	bl	800733c <RCCEx_PLL2_Config>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005102:	e015      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005104:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005108:	3328      	adds	r3, #40	@ 0x28
 800510a:	2101      	movs	r1, #1
 800510c:	4618      	mov	r0, r3
 800510e:	f002 f9c7 	bl	80074a0 <RCCEx_PLL3_Config>
 8005112:	4603      	mov	r3, r0
 8005114:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005118:	e00a      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005120:	e006      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005122:	bf00      	nop
 8005124:	e004      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005126:	bf00      	nop
 8005128:	e002      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800512a:	bf00      	nop
 800512c:	e000      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800512e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005130:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10d      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005138:	4b05      	ldr	r3, [pc, #20]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800513a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800513c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005140:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005144:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005146:	4a02      	ldr	r2, [pc, #8]	@ (8005150 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005148:	430b      	orrs	r3, r1
 800514a:	6513      	str	r3, [r2, #80]	@ 0x50
 800514c:	e006      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800514e:	bf00      	nop
 8005150:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005154:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005158:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800515c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005168:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800516c:	2300      	movs	r3, #0
 800516e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005172:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005176:	460b      	mov	r3, r1
 8005178:	4313      	orrs	r3, r2
 800517a:	d055      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800517c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005180:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005184:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005188:	d033      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800518a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800518e:	d82c      	bhi.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005194:	d02f      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800519a:	d826      	bhi.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800519c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051a0:	d02b      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x672>
 80051a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051a6:	d820      	bhi.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ac:	d012      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80051ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051b2:	d81a      	bhi.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x662>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d022      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x676>
 80051b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051bc:	d115      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051c2:	3308      	adds	r3, #8
 80051c4:	2101      	movs	r1, #1
 80051c6:	4618      	mov	r0, r3
 80051c8:	f002 f8b8 	bl	800733c <RCCEx_PLL2_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80051d2:	e015      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051d8:	3328      	adds	r3, #40	@ 0x28
 80051da:	2101      	movs	r1, #1
 80051dc:	4618      	mov	r0, r3
 80051de:	f002 f95f 	bl	80074a0 <RCCEx_PLL3_Config>
 80051e2:	4603      	mov	r3, r0
 80051e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80051e8:	e00a      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80051f0:	e006      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051f2:	bf00      	nop
 80051f4:	e004      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051f6:	bf00      	nop
 80051f8:	e002      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051fa:	bf00      	nop
 80051fc:	e000      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005200:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005208:	4bb6      	ldr	r3, [pc, #728]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800520a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005210:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005214:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005218:	4ab2      	ldr	r2, [pc, #712]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800521a:	430b      	orrs	r3, r1
 800521c:	6593      	str	r3, [r2, #88]	@ 0x58
 800521e:	e003      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005220:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005224:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005228:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005234:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005238:	2300      	movs	r3, #0
 800523a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800523e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005242:	460b      	mov	r3, r1
 8005244:	4313      	orrs	r3, r2
 8005246:	d02a      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005248:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800524c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800524e:	2b00      	cmp	r3, #0
 8005250:	d011      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005256:	d10a      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005258:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800525c:	3308      	adds	r3, #8
 800525e:	2101      	movs	r1, #1
 8005260:	4618      	mov	r0, r3
 8005262:	f002 f86b 	bl	800733c <RCCEx_PLL2_Config>
 8005266:	4603      	mov	r3, r0
 8005268:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 800526c:	e004      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005274:	e000      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005278:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005280:	4b98      	ldr	r3, [pc, #608]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005284:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800528c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800528e:	4a95      	ldr	r2, [pc, #596]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005290:	430b      	orrs	r3, r1
 8005292:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005294:	e003      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005296:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800529a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800529e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80052aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052ae:	2300      	movs	r3, #0
 80052b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80052b4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052b8:	460b      	mov	r3, r1
 80052ba:	4313      	orrs	r3, r2
 80052bc:	d037      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80052be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052c8:	d00e      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80052ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052ce:	d816      	bhi.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x776>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d018      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80052d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052d8:	d111      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052da:	4b82      	ldr	r3, [pc, #520]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80052dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052de:	4a81      	ldr	r2, [pc, #516]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80052e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052e6:	e00f      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052ec:	3308      	adds	r3, #8
 80052ee:	2101      	movs	r1, #1
 80052f0:	4618      	mov	r0, r3
 80052f2:	f002 f823 	bl	800733c <RCCEx_PLL2_Config>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80052fc:	e004      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005304:	e000      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005308:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10a      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005310:	4b74      	ldr	r3, [pc, #464]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005314:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005318:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800531c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800531e:	4a71      	ldr	r2, [pc, #452]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005320:	430b      	orrs	r3, r1
 8005322:	6513      	str	r3, [r2, #80]	@ 0x50
 8005324:	e003      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005326:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800532a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800532e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800533a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800533e:	2300      	movs	r3, #0
 8005340:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005344:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005348:	460b      	mov	r3, r1
 800534a:	4313      	orrs	r3, r2
 800534c:	d03a      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800534e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005354:	2b03      	cmp	r3, #3
 8005356:	d81d      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005358:	a201      	add	r2, pc, #4	@ (adr r2, 8005360 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800535a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535e:	bf00      	nop
 8005360:	0800539d 	.word	0x0800539d
 8005364:	08005371 	.word	0x08005371
 8005368:	0800537f 	.word	0x0800537f
 800536c:	0800539d 	.word	0x0800539d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005370:	4b5c      	ldr	r3, [pc, #368]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005374:	4a5b      	ldr	r2, [pc, #364]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800537a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800537c:	e00f      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800537e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005382:	3308      	adds	r3, #8
 8005384:	2102      	movs	r1, #2
 8005386:	4618      	mov	r0, r3
 8005388:	f001 ffd8 	bl	800733c <RCCEx_PLL2_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005392:	e004      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800539a:	e000      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 800539c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80053a6:	4b4f      	ldr	r3, [pc, #316]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80053a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053aa:	f023 0103 	bic.w	r1, r3, #3
 80053ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053b4:	4a4b      	ldr	r2, [pc, #300]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80053b6:	430b      	orrs	r3, r1
 80053b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053ba:	e003      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80053d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053d4:	2300      	movs	r3, #0
 80053d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80053de:	460b      	mov	r3, r1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f000 80a0 	beq.w	8005526 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053e6:	4b40      	ldr	r3, [pc, #256]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a3f      	ldr	r2, [pc, #252]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80053ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053f2:	f7fb fad3 	bl	800099c <HAL_GetTick>
 80053f6:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053fa:	e00b      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fc:	f7fb face 	bl	800099c <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b64      	cmp	r3, #100	@ 0x64
 800540a:	d903      	bls.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005412:	e005      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005414:	4b34      	ldr	r3, [pc, #208]	@ (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0ed      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005420:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005424:	2b00      	cmp	r3, #0
 8005426:	d17a      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005428:	4b2e      	ldr	r3, [pc, #184]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800542a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800542c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005430:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005434:	4053      	eors	r3, r2
 8005436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800543a:	2b00      	cmp	r3, #0
 800543c:	d015      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800543e:	4b29      	ldr	r3, [pc, #164]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005446:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800544a:	4b26      	ldr	r3, [pc, #152]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544e:	4a25      	ldr	r2, [pc, #148]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005454:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005456:	4b23      	ldr	r3, [pc, #140]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800545a:	4a22      	ldr	r2, [pc, #136]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800545c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005460:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005462:	4a20      	ldr	r2, [pc, #128]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005464:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005468:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800546a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800546e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005476:	d118      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005478:	f7fb fa90 	bl	800099c <HAL_GetTick>
 800547c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005480:	e00d      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005482:	f7fb fa8b 	bl	800099c <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800548c:	1ad2      	subs	r2, r2, r3
 800548e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005492:	429a      	cmp	r2, r3
 8005494:	d903      	bls.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 800549c:	e005      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800549e:	4b11      	ldr	r3, [pc, #68]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0eb      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80054aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d130      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054b6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80054ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054c2:	d115      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80054c4:	4b07      	ldr	r3, [pc, #28]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80054cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80054d4:	091a      	lsrs	r2, r3, #4
 80054d6:	4b05      	ldr	r3, [pc, #20]	@ (80054ec <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80054d8:	4013      	ands	r3, r2
 80054da:	4a02      	ldr	r2, [pc, #8]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	6113      	str	r3, [r2, #16]
 80054e0:	e00c      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x974>
 80054e2:	bf00      	nop
 80054e4:	58024400 	.word	0x58024400
 80054e8:	58024800 	.word	0x58024800
 80054ec:	00ffffcf 	.word	0x00ffffcf
 80054f0:	4bd4      	ldr	r3, [pc, #848]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	4ad3      	ldr	r2, [pc, #844]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80054f6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80054fa:	6113      	str	r3, [r2, #16]
 80054fc:	4bd1      	ldr	r3, [pc, #836]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80054fe:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005500:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005504:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800550c:	4acd      	ldr	r2, [pc, #820]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800550e:	430b      	orrs	r3, r1
 8005510:	6713      	str	r3, [r2, #112]	@ 0x70
 8005512:	e008      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005514:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005518:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 800551c:	e003      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005522:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005526:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	f002 0301 	and.w	r3, r2, #1
 8005532:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005536:	2300      	movs	r3, #0
 8005538:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800553c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005540:	460b      	mov	r3, r1
 8005542:	4313      	orrs	r3, r2
 8005544:	f000 808b 	beq.w	800565e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005548:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800554c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005550:	2b28      	cmp	r3, #40	@ 0x28
 8005552:	d86b      	bhi.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005554:	a201      	add	r2, pc, #4	@ (adr r2, 800555c <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005635 	.word	0x08005635
 8005560:	0800562d 	.word	0x0800562d
 8005564:	0800562d 	.word	0x0800562d
 8005568:	0800562d 	.word	0x0800562d
 800556c:	0800562d 	.word	0x0800562d
 8005570:	0800562d 	.word	0x0800562d
 8005574:	0800562d 	.word	0x0800562d
 8005578:	0800562d 	.word	0x0800562d
 800557c:	08005601 	.word	0x08005601
 8005580:	0800562d 	.word	0x0800562d
 8005584:	0800562d 	.word	0x0800562d
 8005588:	0800562d 	.word	0x0800562d
 800558c:	0800562d 	.word	0x0800562d
 8005590:	0800562d 	.word	0x0800562d
 8005594:	0800562d 	.word	0x0800562d
 8005598:	0800562d 	.word	0x0800562d
 800559c:	08005617 	.word	0x08005617
 80055a0:	0800562d 	.word	0x0800562d
 80055a4:	0800562d 	.word	0x0800562d
 80055a8:	0800562d 	.word	0x0800562d
 80055ac:	0800562d 	.word	0x0800562d
 80055b0:	0800562d 	.word	0x0800562d
 80055b4:	0800562d 	.word	0x0800562d
 80055b8:	0800562d 	.word	0x0800562d
 80055bc:	08005635 	.word	0x08005635
 80055c0:	0800562d 	.word	0x0800562d
 80055c4:	0800562d 	.word	0x0800562d
 80055c8:	0800562d 	.word	0x0800562d
 80055cc:	0800562d 	.word	0x0800562d
 80055d0:	0800562d 	.word	0x0800562d
 80055d4:	0800562d 	.word	0x0800562d
 80055d8:	0800562d 	.word	0x0800562d
 80055dc:	08005635 	.word	0x08005635
 80055e0:	0800562d 	.word	0x0800562d
 80055e4:	0800562d 	.word	0x0800562d
 80055e8:	0800562d 	.word	0x0800562d
 80055ec:	0800562d 	.word	0x0800562d
 80055f0:	0800562d 	.word	0x0800562d
 80055f4:	0800562d 	.word	0x0800562d
 80055f8:	0800562d 	.word	0x0800562d
 80055fc:	08005635 	.word	0x08005635
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005600:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005604:	3308      	adds	r3, #8
 8005606:	2101      	movs	r1, #1
 8005608:	4618      	mov	r0, r3
 800560a:	f001 fe97 	bl	800733c <RCCEx_PLL2_Config>
 800560e:	4603      	mov	r3, r0
 8005610:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005614:	e00f      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005616:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800561a:	3328      	adds	r3, #40	@ 0x28
 800561c:	2101      	movs	r1, #1
 800561e:	4618      	mov	r0, r3
 8005620:	f001 ff3e 	bl	80074a0 <RCCEx_PLL3_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800562a:	e004      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005632:	e000      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005636:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800563e:	4b81      	ldr	r3, [pc, #516]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005642:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005646:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800564a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800564e:	4a7d      	ldr	r2, [pc, #500]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005650:	430b      	orrs	r3, r1
 8005652:	6553      	str	r3, [r2, #84]	@ 0x54
 8005654:	e003      	b.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005656:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800565a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800565e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f002 0302 	and.w	r3, r2, #2
 800566a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800566e:	2300      	movs	r3, #0
 8005670:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005674:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005678:	460b      	mov	r3, r1
 800567a:	4313      	orrs	r3, r2
 800567c:	d042      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800567e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005682:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005684:	2b05      	cmp	r3, #5
 8005686:	d825      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005688:	a201      	add	r2, pc, #4	@ (adr r2, 8005690 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056dd 	.word	0x080056dd
 8005694:	080056a9 	.word	0x080056a9
 8005698:	080056bf 	.word	0x080056bf
 800569c:	080056dd 	.word	0x080056dd
 80056a0:	080056dd 	.word	0x080056dd
 80056a4:	080056dd 	.word	0x080056dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056ac:	3308      	adds	r3, #8
 80056ae:	2101      	movs	r1, #1
 80056b0:	4618      	mov	r0, r3
 80056b2:	f001 fe43 	bl	800733c <RCCEx_PLL2_Config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056bc:	e00f      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056c2:	3328      	adds	r3, #40	@ 0x28
 80056c4:	2101      	movs	r1, #1
 80056c6:	4618      	mov	r0, r3
 80056c8:	f001 feea 	bl	80074a0 <RCCEx_PLL3_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80056d2:	e004      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80056da:	e000      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80056dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10a      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056e6:	4b57      	ldr	r3, [pc, #348]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80056e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ea:	f023 0107 	bic.w	r1, r3, #7
 80056ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056f4:	4a53      	ldr	r2, [pc, #332]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80056f6:	430b      	orrs	r3, r1
 80056f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80056fa:	e003      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005700:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005704:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570c:	f002 0304 	and.w	r3, r2, #4
 8005710:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005714:	2300      	movs	r3, #0
 8005716:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800571a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800571e:	460b      	mov	r3, r1
 8005720:	4313      	orrs	r3, r2
 8005722:	d044      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005724:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005728:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800572c:	2b05      	cmp	r3, #5
 800572e:	d825      	bhi.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005730:	a201      	add	r2, pc, #4	@ (adr r2, 8005738 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005736:	bf00      	nop
 8005738:	08005785 	.word	0x08005785
 800573c:	08005751 	.word	0x08005751
 8005740:	08005767 	.word	0x08005767
 8005744:	08005785 	.word	0x08005785
 8005748:	08005785 	.word	0x08005785
 800574c:	08005785 	.word	0x08005785
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005750:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005754:	3308      	adds	r3, #8
 8005756:	2101      	movs	r1, #1
 8005758:	4618      	mov	r0, r3
 800575a:	f001 fdef 	bl	800733c <RCCEx_PLL2_Config>
 800575e:	4603      	mov	r3, r0
 8005760:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005764:	e00f      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005766:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800576a:	3328      	adds	r3, #40	@ 0x28
 800576c:	2101      	movs	r1, #1
 800576e:	4618      	mov	r0, r3
 8005770:	f001 fe96 	bl	80074a0 <RCCEx_PLL3_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800577a:	e004      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005782:	e000      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005786:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10b      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800578e:	4b2d      	ldr	r3, [pc, #180]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005792:	f023 0107 	bic.w	r1, r3, #7
 8005796:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800579a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800579e:	4a29      	ldr	r2, [pc, #164]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80057a0:	430b      	orrs	r3, r1
 80057a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80057a4:	e003      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f002 0320 	and.w	r3, r2, #32
 80057ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057be:	2300      	movs	r3, #0
 80057c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80057c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057c8:	460b      	mov	r3, r1
 80057ca:	4313      	orrs	r3, r2
 80057cc:	d057      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80057ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057da:	d035      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80057dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057e0:	d82c      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80057e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e6:	d031      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80057e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ec:	d826      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80057ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057f2:	d02d      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80057f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80057f8:	d820      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80057fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057fe:	d012      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005804:	d81a      	bhi.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005806:	2b00      	cmp	r3, #0
 8005808:	d024      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800580a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800580e:	d115      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005810:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005814:	3308      	adds	r3, #8
 8005816:	2100      	movs	r1, #0
 8005818:	4618      	mov	r0, r3
 800581a:	f001 fd8f 	bl	800733c <RCCEx_PLL2_Config>
 800581e:	4603      	mov	r3, r0
 8005820:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005824:	e017      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005826:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800582a:	3328      	adds	r3, #40	@ 0x28
 800582c:	2102      	movs	r1, #2
 800582e:	4618      	mov	r0, r3
 8005830:	f001 fe36 	bl	80074a0 <RCCEx_PLL3_Config>
 8005834:	4603      	mov	r3, r0
 8005836:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800583a:	e00c      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005842:	e008      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005844:	58024400 	.word	0x58024400
        break;
 8005848:	bf00      	nop
 800584a:	e004      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800584c:	bf00      	nop
 800584e:	e002      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005850:	bf00      	nop
 8005852:	e000      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005856:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10b      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800585e:	4bc2      	ldr	r3, [pc, #776]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005862:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005866:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800586a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800586e:	4abe      	ldr	r2, [pc, #760]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005870:	430b      	orrs	r3, r1
 8005872:	6553      	str	r3, [r2, #84]	@ 0x54
 8005874:	e003      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005876:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800587a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800587e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800588a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800588e:	2300      	movs	r3, #0
 8005890:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005894:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005898:	460b      	mov	r3, r1
 800589a:	4313      	orrs	r3, r2
 800589c:	d055      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800589e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80058a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80058aa:	d033      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80058ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80058b0:	d82c      	bhi.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80058b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b6:	d02f      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80058b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058bc:	d826      	bhi.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80058be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058c2:	d02b      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80058c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058c8:	d820      	bhi.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80058ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058ce:	d012      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80058d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058d4:	d81a      	bhi.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d022      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80058da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058de:	d115      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058e4:	3308      	adds	r3, #8
 80058e6:	2100      	movs	r1, #0
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 fd27 	bl	800733c <RCCEx_PLL2_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80058f4:	e015      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058fa:	3328      	adds	r3, #40	@ 0x28
 80058fc:	2102      	movs	r1, #2
 80058fe:	4618      	mov	r0, r3
 8005900:	f001 fdce 	bl	80074a0 <RCCEx_PLL3_Config>
 8005904:	4603      	mov	r3, r0
 8005906:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800590a:	e00a      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005912:	e006      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005914:	bf00      	nop
 8005916:	e004      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005918:	bf00      	nop
 800591a:	e002      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800591c:	bf00      	nop
 800591e:	e000      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005922:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10b      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800592a:	4b8f      	ldr	r3, [pc, #572]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800592c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800592e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005936:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800593a:	4a8b      	ldr	r2, [pc, #556]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800593c:	430b      	orrs	r3, r1
 800593e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005940:	e003      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005942:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005946:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800594a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005956:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800595a:	2300      	movs	r3, #0
 800595c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005960:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005964:	460b      	mov	r3, r1
 8005966:	4313      	orrs	r3, r2
 8005968:	d055      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800596a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800596e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005972:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005976:	d033      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005978:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800597c:	d82c      	bhi.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800597e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005982:	d02f      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005988:	d826      	bhi.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800598a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800598e:	d02b      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005990:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005994:	d820      	bhi.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005996:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800599a:	d012      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 800599c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059a0:	d81a      	bhi.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d022      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80059a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059aa:	d115      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059b0:	3308      	adds	r3, #8
 80059b2:	2100      	movs	r1, #0
 80059b4:	4618      	mov	r0, r3
 80059b6:	f001 fcc1 	bl	800733c <RCCEx_PLL2_Config>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059c0:	e015      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80059c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059c6:	3328      	adds	r3, #40	@ 0x28
 80059c8:	2102      	movs	r1, #2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 fd68 	bl	80074a0 <RCCEx_PLL3_Config>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80059d6:	e00a      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80059de:	e006      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80059e0:	bf00      	nop
 80059e2:	e004      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80059e4:	bf00      	nop
 80059e6:	e002      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80059e8:	bf00      	nop
 80059ea:	e000      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80059ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80059f6:	4b5c      	ldr	r3, [pc, #368]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80059f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059fa:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80059fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a06:	4a58      	ldr	r2, [pc, #352]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a0c:	e003      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a12:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f002 0308 	and.w	r3, r2, #8
 8005a22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a26:	2300      	movs	r3, #0
 8005a28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a2c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005a30:	460b      	mov	r3, r1
 8005a32:	4313      	orrs	r3, r2
 8005a34:	d01e      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005a36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a42:	d10c      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005a44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a48:	3328      	adds	r3, #40	@ 0x28
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f001 fd27 	bl	80074a0 <RCCEx_PLL3_Config>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005a5e:	4b42      	ldr	r3, [pc, #264]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a6e:	4a3e      	ldr	r2, [pc, #248]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005a70:	430b      	orrs	r3, r1
 8005a72:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f002 0310 	and.w	r3, r2, #16
 8005a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a84:	2300      	movs	r3, #0
 8005a86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a8a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4313      	orrs	r3, r2
 8005a92:	d01e      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aa0:	d10c      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005aa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aa6:	3328      	adds	r3, #40	@ 0x28
 8005aa8:	2102      	movs	r1, #2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f001 fcf8 	bl	80074a0 <RCCEx_PLL3_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005abc:	4b2a      	ldr	r3, [pc, #168]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ac4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005acc:	4a26      	ldr	r2, [pc, #152]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ace:	430b      	orrs	r3, r1
 8005ad0:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ad2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005ade:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ae8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005aec:	460b      	mov	r3, r1
 8005aee:	4313      	orrs	r3, r2
 8005af0:	d040      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005af2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005af6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005afa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005afe:	d022      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8005b00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b04:	d81b      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b0e:	d00b      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8005b10:	e015      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b16:	3308      	adds	r3, #8
 8005b18:	2100      	movs	r1, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f001 fc0e 	bl	800733c <RCCEx_PLL2_Config>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b26:	e00f      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b2c:	3328      	adds	r3, #40	@ 0x28
 8005b2e:	2102      	movs	r1, #2
 8005b30:	4618      	mov	r0, r3
 8005b32:	f001 fcb5 	bl	80074a0 <RCCEx_PLL3_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b3c:	e004      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b44:	e000      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8005b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b48:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10d      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b50:	4b05      	ldr	r3, [pc, #20]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b54:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005b58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b60:	4a01      	ldr	r2, [pc, #4]	@ (8005b68 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005b62:	430b      	orrs	r3, r1
 8005b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b66:	e005      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005b68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b70:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005b80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b82:	2300      	movs	r3, #0
 8005b84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b86:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	d03b      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b9c:	d01f      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8005b9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ba2:	d818      	bhi.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8005ba4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ba8:	d003      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005baa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bae:	d007      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8005bb0:	e011      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bb2:	4b64      	ldr	r3, [pc, #400]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb6:	4a63      	ldr	r2, [pc, #396]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005bbe:	e00f      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bc4:	3328      	adds	r3, #40	@ 0x28
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f001 fc69 	bl	80074a0 <RCCEx_PLL3_Config>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005bd4:	e004      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005bdc:	e000      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8005bde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10b      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005be8:	4b56      	ldr	r3, [pc, #344]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bec:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005bf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bf8:	4a52      	ldr	r2, [pc, #328]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	6553      	str	r3, [r2, #84]	@ 0x54
 8005bfe:	e003      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c04:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005c14:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c16:	2300      	movs	r3, #0
 8005c18:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c1a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4313      	orrs	r3, r2
 8005c22:	d031      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005c24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8005c2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c32:	d007      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005c34:	e011      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c36:	4b43      	ldr	r3, [pc, #268]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c3a:	4a42      	ldr	r2, [pc, #264]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c42:	e00e      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c48:	3308      	adds	r3, #8
 8005c4a:	2102      	movs	r1, #2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f001 fb75 	bl	800733c <RCCEx_PLL2_Config>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005c58:	e003      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d10a      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005c6a:	4b36      	ldr	r3, [pc, #216]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c78:	4a32      	ldr	r2, [pc, #200]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005c7a:	430b      	orrs	r3, r1
 8005c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c7e:	e003      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c80:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c84:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c90:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005c94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c96:	2300      	movs	r3, #0
 8005c98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c9a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	d00c      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ca4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ca8:	3328      	adds	r3, #40	@ 0x28
 8005caa:	2102      	movs	r1, #2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 fbf7 	bl	80074a0 <RCCEx_PLL3_Config>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005cbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005cca:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ccc:	2300      	movs	r3, #0
 8005cce:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cd0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	d03a      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ce2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ce6:	d018      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8005ce8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cec:	d811      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cf2:	d014      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8005cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cf8:	d80b      	bhi.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d011      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8005cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d02:	d106      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d04:	4b0f      	ldr	r3, [pc, #60]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d08:	4a0e      	ldr	r2, [pc, #56]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005d10:	e008      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d18:	e004      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005d1a:	bf00      	nop
 8005d1c:	e002      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005d1e:	bf00      	nop
 8005d20:	e000      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8005d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d24:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10d      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d2c:	4b05      	ldr	r3, [pc, #20]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d30:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d3c:	4a01      	ldr	r2, [pc, #4]	@ (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005d3e:	430b      	orrs	r3, r1
 8005d40:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d42:	e005      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8005d44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d48:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d4c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005d5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d5e:	2300      	movs	r3, #0
 8005d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d62:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005d66:	460b      	mov	r3, r1
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	d009      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d6c:	4baa      	ldr	r3, [pc, #680]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d78:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d7a:	4aa7      	ldr	r2, [pc, #668]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005d8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d8e:	2300      	movs	r3, #0
 8005d90:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005d96:	460b      	mov	r3, r1
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	d00a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005d9c:	4b9e      	ldr	r3, [pc, #632]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005da4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005da8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005dac:	4a9a      	ldr	r2, [pc, #616]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005dae:	430b      	orrs	r3, r1
 8005db0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005db2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dc4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	d009      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dce:	4b92      	ldr	r3, [pc, #584]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005dd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ddc:	4a8e      	ldr	r2, [pc, #568]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005dde:	430b      	orrs	r3, r1
 8005de0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005de2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005dee:	643b      	str	r3, [r7, #64]	@ 0x40
 8005df0:	2300      	movs	r3, #0
 8005df2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005df4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	d00e      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005dfe:	4b86      	ldr	r3, [pc, #536]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	4a85      	ldr	r2, [pc, #532]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005e04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e08:	6113      	str	r3, [r2, #16]
 8005e0a:	4b83      	ldr	r3, [pc, #524]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005e0c:	6919      	ldr	r1, [r3, #16]
 8005e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e16:	4a80      	ldr	r2, [pc, #512]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005e28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005e32:	460b      	mov	r3, r1
 8005e34:	4313      	orrs	r3, r2
 8005e36:	d009      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005e38:	4b77      	ldr	r3, [pc, #476]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e3c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e46:	4a74      	ldr	r2, [pc, #464]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005e58:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005e62:	460b      	mov	r3, r1
 8005e64:	4313      	orrs	r3, r2
 8005e66:	d00a      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e68:	4b6b      	ldr	r3, [pc, #428]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e78:	4a67      	ldr	r2, [pc, #412]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005e7a:	430b      	orrs	r3, r1
 8005e7c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005e7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	2100      	movs	r1, #0
 8005e88:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005e94:	460b      	mov	r3, r1
 8005e96:	4313      	orrs	r3, r2
 8005e98:	d011      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e9e:	3308      	adds	r3, #8
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f001 fa4a 	bl	800733c <RCCEx_PLL2_Config>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005eae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005eba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	6239      	str	r1, [r7, #32]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ed0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	d011      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ede:	3308      	adds	r3, #8
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 fa2a 	bl	800733c <RCCEx_PLL2_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005eee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005efa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005efe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	2100      	movs	r1, #0
 8005f08:	61b9      	str	r1, [r7, #24]
 8005f0a:	f003 0304 	and.w	r3, r3, #4
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005f14:	460b      	mov	r3, r1
 8005f16:	4313      	orrs	r3, r2
 8005f18:	d011      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f1e:	3308      	adds	r3, #8
 8005f20:	2102      	movs	r1, #2
 8005f22:	4618      	mov	r0, r3
 8005f24:	f001 fa0a 	bl	800733c <RCCEx_PLL2_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005f2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005f3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f46:	2100      	movs	r1, #0
 8005f48:	6139      	str	r1, [r7, #16]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005f54:	460b      	mov	r3, r1
 8005f56:	4313      	orrs	r3, r2
 8005f58:	d011      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f5e:	3328      	adds	r3, #40	@ 0x28
 8005f60:	2100      	movs	r1, #0
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 fa9c 	bl	80074a0 <RCCEx_PLL3_Config>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8005f6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f7a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005f7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	2100      	movs	r1, #0
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f94:	460b      	mov	r3, r1
 8005f96:	4313      	orrs	r3, r2
 8005f98:	d011      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f9e:	3328      	adds	r3, #40	@ 0x28
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f001 fa7c 	bl	80074a0 <RCCEx_PLL3_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005fae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005fbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	6039      	str	r1, [r7, #0]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	607b      	str	r3, [r7, #4]
 8005fd0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	d011      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fde:	3328      	adds	r3, #40	@ 0x28
 8005fe0:	2102      	movs	r1, #2
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f001 fa5c 	bl	80074a0 <RCCEx_PLL3_Config>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8005fee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ffa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8005ffe:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	e000      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
}
 800600c:	4618      	mov	r0, r3
 800600e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006012:	46bd      	mov	sp, r7
 8006014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006018:	58024400 	.word	0x58024400

0800601c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b090      	sub	sp, #64	@ 0x40
 8006020:	af00      	add	r7, sp, #0
 8006022:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800602a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800602e:	430b      	orrs	r3, r1
 8006030:	f040 8094 	bne.w	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006034:	4b9e      	ldr	r3, [pc, #632]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006040:	2b04      	cmp	r3, #4
 8006042:	f200 8087 	bhi.w	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006046:	a201      	add	r2, pc, #4	@ (adr r2, 800604c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604c:	08006061 	.word	0x08006061
 8006050:	08006089 	.word	0x08006089
 8006054:	080060b1 	.word	0x080060b1
 8006058:	0800614d 	.word	0x0800614d
 800605c:	080060d9 	.word	0x080060d9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006060:	4b93      	ldr	r3, [pc, #588]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006068:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800606c:	d108      	bne.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800606e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006072:	4618      	mov	r0, r3
 8006074:	f001 f810 	bl	8007098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800607c:	f000 bd45 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006080:	2300      	movs	r3, #0
 8006082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006084:	f000 bd41 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006088:	4b89      	ldr	r3, [pc, #548]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006090:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006094:	d108      	bne.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006096:	f107 0318 	add.w	r3, r7, #24
 800609a:	4618      	mov	r0, r3
 800609c:	f000 fd54 	bl	8006b48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060a4:	f000 bd31 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ac:	f000 bd2d 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060b0:	4b7f      	ldr	r3, [pc, #508]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060bc:	d108      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060be:	f107 030c 	add.w	r3, r7, #12
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fe94 	bl	8006df0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060cc:	f000 bd1d 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060d4:	f000 bd19 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80060d8:	4b75      	ldr	r3, [pc, #468]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80060e0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060e2:	4b73      	ldr	r3, [pc, #460]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0304 	and.w	r3, r3, #4
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d10c      	bne.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80060ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060f4:	4b6e      	ldr	r3, [pc, #440]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	08db      	lsrs	r3, r3, #3
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	4a6d      	ldr	r2, [pc, #436]	@ (80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006100:	fa22 f303 	lsr.w	r3, r2, r3
 8006104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006106:	e01f      	b.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006108:	4b69      	ldr	r3, [pc, #420]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006110:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006114:	d106      	bne.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006118:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800611c:	d102      	bne.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800611e:	4b66      	ldr	r3, [pc, #408]	@ (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006120:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006122:	e011      	b.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006124:	4b62      	ldr	r3, [pc, #392]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800612c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006130:	d106      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006138:	d102      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800613a:	4b60      	ldr	r3, [pc, #384]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800613c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800613e:	e003      	b.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006144:	f000 bce1 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006148:	f000 bcdf 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800614c:	4b5c      	ldr	r3, [pc, #368]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800614e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006150:	f000 bcdb 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006158:	f000 bcd7 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800615c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006160:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006164:	430b      	orrs	r3, r1
 8006166:	f040 80ad 	bne.w	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800616a:	4b51      	ldr	r3, [pc, #324]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800616c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800616e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006172:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800617a:	d056      	beq.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800617c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006182:	f200 8090 	bhi.w	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006188:	2bc0      	cmp	r3, #192	@ 0xc0
 800618a:	f000 8088 	beq.w	800629e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006190:	2bc0      	cmp	r3, #192	@ 0xc0
 8006192:	f200 8088 	bhi.w	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	2b80      	cmp	r3, #128	@ 0x80
 800619a:	d032      	beq.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	2b80      	cmp	r3, #128	@ 0x80
 80061a0:	f200 8081 	bhi.w	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80061a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	2b40      	cmp	r3, #64	@ 0x40
 80061ae:	d014      	beq.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80061b0:	e079      	b.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061b2:	4b3f      	ldr	r3, [pc, #252]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061be:	d108      	bne.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 ff67 	bl	8007098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061ce:	f000 bc9c 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d6:	f000 bc98 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061da:	4b35      	ldr	r3, [pc, #212]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061e6:	d108      	bne.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061e8:	f107 0318 	add.w	r3, r7, #24
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fcab 	bl	8006b48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80061f6:	f000 bc88 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061fe:	f000 bc84 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006202:	4b2b      	ldr	r3, [pc, #172]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800620a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800620e:	d108      	bne.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006210:	f107 030c 	add.w	r3, r7, #12
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fdeb 	bl	8006df0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800621e:	f000 bc74 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006226:	f000 bc70 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800622a:	4b21      	ldr	r3, [pc, #132]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800622c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800622e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006232:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006234:	4b1e      	ldr	r3, [pc, #120]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b04      	cmp	r3, #4
 800623e:	d10c      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006242:	2b00      	cmp	r3, #0
 8006244:	d109      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006246:	4b1a      	ldr	r3, [pc, #104]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	08db      	lsrs	r3, r3, #3
 800624c:	f003 0303 	and.w	r3, r3, #3
 8006250:	4a18      	ldr	r2, [pc, #96]	@ (80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006252:	fa22 f303 	lsr.w	r3, r2, r3
 8006256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006258:	e01f      	b.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800625a:	4b15      	ldr	r3, [pc, #84]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006266:	d106      	bne.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800626e:	d102      	bne.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006270:	4b11      	ldr	r3, [pc, #68]	@ (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006274:	e011      	b.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006276:	4b0e      	ldr	r3, [pc, #56]	@ (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800627e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006282:	d106      	bne.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006286:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800628a:	d102      	bne.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800628c:	4b0b      	ldr	r3, [pc, #44]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800628e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006290:	e003      	b.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006292:	2300      	movs	r3, #0
 8006294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006296:	f000 bc38 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800629a:	f000 bc36 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800629e:	4b08      	ldr	r3, [pc, #32]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80062a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a2:	f000 bc32 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062aa:	f000 bc2e 	b.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80062ae:	bf00      	nop
 80062b0:	58024400 	.word	0x58024400
 80062b4:	03d09000 	.word	0x03d09000
 80062b8:	003d0900 	.word	0x003d0900
 80062bc:	017d7840 	.word	0x017d7840
 80062c0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80062c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062c8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80062cc:	430b      	orrs	r3, r1
 80062ce:	f040 809c 	bne.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80062d2:	4b9e      	ldr	r3, [pc, #632]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80062d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80062da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80062dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062e2:	d054      	beq.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80062e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062ea:	f200 808b 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80062ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062f4:	f000 8083 	beq.w	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062fe:	f200 8081 	bhi.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006308:	d02f      	beq.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006310:	d878      	bhi.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800631e:	d012      	beq.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006320:	e070      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006322:	4b8a      	ldr	r3, [pc, #552]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800632a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800632e:	d107      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006330:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006334:	4618      	mov	r0, r3
 8006336:	f000 feaf 	bl	8007098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800633a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800633e:	e3e4      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006340:	2300      	movs	r3, #0
 8006342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006344:	e3e1      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006346:	4b81      	ldr	r3, [pc, #516]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800634e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006352:	d107      	bne.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006354:	f107 0318 	add.w	r3, r7, #24
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fbf5 	bl	8006b48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006362:	e3d2      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006368:	e3cf      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800636a:	4b78      	ldr	r3, [pc, #480]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006372:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006376:	d107      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006378:	f107 030c 	add.w	r3, r7, #12
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fd37 	bl	8006df0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006386:	e3c0      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006388:	2300      	movs	r3, #0
 800638a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800638c:	e3bd      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800638e:	4b6f      	ldr	r3, [pc, #444]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006392:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006396:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006398:	4b6c      	ldr	r3, [pc, #432]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d10c      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80063a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d109      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063aa:	4b68      	ldr	r3, [pc, #416]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	08db      	lsrs	r3, r3, #3
 80063b0:	f003 0303 	and.w	r3, r3, #3
 80063b4:	4a66      	ldr	r2, [pc, #408]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80063b6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063bc:	e01e      	b.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063be:	4b63      	ldr	r3, [pc, #396]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ca:	d106      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80063cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063d2:	d102      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80063d4:	4b5f      	ldr	r3, [pc, #380]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80063d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063d8:	e010      	b.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063da:	4b5c      	ldr	r3, [pc, #368]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063e6:	d106      	bne.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80063e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063ee:	d102      	bne.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80063f0:	4b59      	ldr	r3, [pc, #356]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80063f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063f4:	e002      	b.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80063fa:	e386      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80063fc:	e385      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80063fe:	4b57      	ldr	r3, [pc, #348]	@ (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006402:	e382      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006408:	e37f      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800640a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800640e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006412:	430b      	orrs	r3, r1
 8006414:	f040 80a7 	bne.w	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006418:	4b4c      	ldr	r3, [pc, #304]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800641a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800641c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006420:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006424:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006428:	d055      	beq.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800642a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006430:	f200 8096 	bhi.w	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006436:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800643a:	f000 8084 	beq.w	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006444:	f200 808c 	bhi.w	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800644e:	d030      	beq.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006452:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006456:	f200 8083 	bhi.w	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006466:	d012      	beq.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006468:	e07a      	b.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800646a:	4b38      	ldr	r3, [pc, #224]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006472:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006476:	d107      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800647c:	4618      	mov	r0, r3
 800647e:	f000 fe0b 	bl	8007098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006486:	e340      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800648c:	e33d      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800648e:	4b2f      	ldr	r3, [pc, #188]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800649a:	d107      	bne.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800649c:	f107 0318 	add.w	r3, r7, #24
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fb51 	bl	8006b48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064aa:	e32e      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064b0:	e32b      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064b2:	4b26      	ldr	r3, [pc, #152]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80064be:	d107      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c0:	f107 030c 	add.w	r3, r7, #12
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fc93 	bl	8006df0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064ce:	e31c      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064d4:	e319      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064d6:	4b1d      	ldr	r3, [pc, #116]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064e0:	4b1a      	ldr	r3, [pc, #104]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d10c      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80064ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d109      	bne.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064f2:	4b16      	ldr	r3, [pc, #88]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	08db      	lsrs	r3, r3, #3
 80064f8:	f003 0303 	and.w	r3, r3, #3
 80064fc:	4a14      	ldr	r2, [pc, #80]	@ (8006550 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80064fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006504:	e01e      	b.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006506:	4b11      	ldr	r3, [pc, #68]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800650e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006512:	d106      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006516:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800651a:	d102      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800651c:	4b0d      	ldr	r3, [pc, #52]	@ (8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800651e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006520:	e010      	b.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006522:	4b0a      	ldr	r3, [pc, #40]	@ (800654c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800652a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800652e:	d106      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006532:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006536:	d102      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006538:	4b07      	ldr	r3, [pc, #28]	@ (8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800653a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800653c:	e002      	b.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800653e:	2300      	movs	r3, #0
 8006540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006542:	e2e2      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006544:	e2e1      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006546:	4b05      	ldr	r3, [pc, #20]	@ (800655c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800654a:	e2de      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800654c:	58024400 	.word	0x58024400
 8006550:	03d09000 	.word	0x03d09000
 8006554:	003d0900 	.word	0x003d0900
 8006558:	017d7840 	.word	0x017d7840
 800655c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006564:	e2d1      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800656a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800656e:	430b      	orrs	r3, r1
 8006570:	f040 809c 	bne.w	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006574:	4b93      	ldr	r3, [pc, #588]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006578:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800657c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800657e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006580:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006584:	d054      	beq.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006588:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800658c:	f200 808b 	bhi.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006592:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006596:	f000 8083 	beq.w	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800659a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065a0:	f200 8081 	bhi.w	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80065a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065aa:	d02f      	beq.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80065ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065b2:	d878      	bhi.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80065b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d004      	beq.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c0:	d012      	beq.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80065c2:	e070      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065c4:	4b7f      	ldr	r3, [pc, #508]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065d0:	d107      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065d6:	4618      	mov	r0, r3
 80065d8:	f000 fd5e 	bl	8007098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065e0:	e293      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065e2:	2300      	movs	r3, #0
 80065e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065e6:	e290      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065e8:	4b76      	ldr	r3, [pc, #472]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065f4:	d107      	bne.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065f6:	f107 0318 	add.w	r3, r7, #24
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 faa4 	bl	8006b48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006604:	e281      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800660a:	e27e      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800660c:	4b6d      	ldr	r3, [pc, #436]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006614:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006618:	d107      	bne.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800661a:	f107 030c 	add.w	r3, r7, #12
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fbe6 	bl	8006df0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006628:	e26f      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800662e:	e26c      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006630:	4b64      	ldr	r3, [pc, #400]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006634:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006638:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800663a:	4b62      	ldr	r3, [pc, #392]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b04      	cmp	r3, #4
 8006644:	d10c      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006648:	2b00      	cmp	r3, #0
 800664a:	d109      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800664c:	4b5d      	ldr	r3, [pc, #372]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	08db      	lsrs	r3, r3, #3
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	4a5c      	ldr	r2, [pc, #368]	@ (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
 800665c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800665e:	e01e      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006660:	4b58      	ldr	r3, [pc, #352]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800666c:	d106      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800666e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006670:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006674:	d102      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006676:	4b55      	ldr	r3, [pc, #340]	@ (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800667a:	e010      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800667c:	4b51      	ldr	r3, [pc, #324]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006684:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006688:	d106      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800668a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006690:	d102      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006692:	4b4f      	ldr	r3, [pc, #316]	@ (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006696:	e002      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800669c:	e235      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800669e:	e234      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066a0:	4b4c      	ldr	r3, [pc, #304]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80066a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066a4:	e231      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066aa:	e22e      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80066ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80066b4:	430b      	orrs	r3, r1
 80066b6:	f040 808f 	bne.w	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80066ba:	4b42      	ldr	r3, [pc, #264]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80066bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066be:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80066c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80066c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066ca:	d06b      	beq.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80066cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066d2:	d874      	bhi.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80066d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066da:	d056      	beq.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80066dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066e2:	d86c      	bhi.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80066e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066ea:	d03b      	beq.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80066ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80066f2:	d864      	bhi.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80066f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80066fa:	d021      	beq.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80066fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006702:	d85c      	bhi.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006706:	2b00      	cmp	r3, #0
 8006708:	d004      	beq.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800670a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006710:	d004      	beq.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006712:	e054      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006714:	f7fe fa22 	bl	8004b5c <HAL_RCC_GetPCLK1Freq>
 8006718:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800671a:	e1f6      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800671c:	4b29      	ldr	r3, [pc, #164]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006724:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006728:	d107      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800672a:	f107 0318 	add.w	r3, r7, #24
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fa0a 	bl	8006b48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006738:	e1e7      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800673e:	e1e4      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006740:	4b20      	ldr	r3, [pc, #128]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800674c:	d107      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800674e:	f107 030c 	add.w	r3, r7, #12
 8006752:	4618      	mov	r0, r3
 8006754:	f000 fb4c 	bl	8006df0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800675c:	e1d5      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006762:	e1d2      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006764:	4b17      	ldr	r3, [pc, #92]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b04      	cmp	r3, #4
 800676e:	d109      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006770:	4b14      	ldr	r3, [pc, #80]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	08db      	lsrs	r3, r3, #3
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	4a13      	ldr	r2, [pc, #76]	@ (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800677c:	fa22 f303 	lsr.w	r3, r2, r3
 8006780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006782:	e1c2      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006784:	2300      	movs	r3, #0
 8006786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006788:	e1bf      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800678a:	4b0e      	ldr	r3, [pc, #56]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006796:	d102      	bne.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006798:	4b0c      	ldr	r3, [pc, #48]	@ (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800679a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800679c:	e1b5      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067a2:	e1b2      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80067a4:	4b07      	ldr	r3, [pc, #28]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067b0:	d102      	bne.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80067b2:	4b07      	ldr	r3, [pc, #28]	@ (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80067b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067b6:	e1a8      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067bc:	e1a5      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067c2:	e1a2      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067c4:	58024400 	.word	0x58024400
 80067c8:	03d09000 	.word	0x03d09000
 80067cc:	003d0900 	.word	0x003d0900
 80067d0:	017d7840 	.word	0x017d7840
 80067d4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80067d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067dc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80067e0:	430b      	orrs	r3, r1
 80067e2:	d173      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80067e4:	4b9c      	ldr	r3, [pc, #624]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80067e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067ec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80067ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067f4:	d02f      	beq.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80067f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067fc:	d863      	bhi.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80067fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006800:	2b00      	cmp	r3, #0
 8006802:	d004      	beq.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800680a:	d012      	beq.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800680c:	e05b      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800680e:	4b92      	ldr	r3, [pc, #584]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006816:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800681a:	d107      	bne.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800681c:	f107 0318 	add.w	r3, r7, #24
 8006820:	4618      	mov	r0, r3
 8006822:	f000 f991 	bl	8006b48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800682a:	e16e      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006830:	e16b      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006832:	4b89      	ldr	r3, [pc, #548]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800683a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800683e:	d107      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006840:	f107 030c 	add.w	r3, r7, #12
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fad3 	bl	8006df0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800684e:	e15c      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006854:	e159      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006856:	4b80      	ldr	r3, [pc, #512]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800685a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800685e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006860:	4b7d      	ldr	r3, [pc, #500]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b04      	cmp	r3, #4
 800686a:	d10c      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800686c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006872:	4b79      	ldr	r3, [pc, #484]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	08db      	lsrs	r3, r3, #3
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	4a77      	ldr	r2, [pc, #476]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800687e:	fa22 f303 	lsr.w	r3, r2, r3
 8006882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006884:	e01e      	b.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006886:	4b74      	ldr	r3, [pc, #464]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800688e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006892:	d106      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800689a:	d102      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800689c:	4b70      	ldr	r3, [pc, #448]	@ (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800689e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068a0:	e010      	b.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068a2:	4b6d      	ldr	r3, [pc, #436]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068ae:	d106      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80068b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068b6:	d102      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068b8:	4b6a      	ldr	r3, [pc, #424]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80068ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068bc:	e002      	b.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80068c2:	e122      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068c4:	e121      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ca:	e11e      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80068cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068d0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80068d4:	430b      	orrs	r3, r1
 80068d6:	d133      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80068d8:	4b5f      	ldr	r3, [pc, #380]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80068e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d004      	beq.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80068e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068ee:	d012      	beq.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80068f0:	e023      	b.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068f2:	4b59      	ldr	r3, [pc, #356]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068fe:	d107      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006904:	4618      	mov	r0, r3
 8006906:	f000 fbc7 	bl	8007098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800690a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800690e:	e0fc      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006914:	e0f9      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006916:	4b50      	ldr	r3, [pc, #320]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800691e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006922:	d107      	bne.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006924:	f107 0318 	add.w	r3, r7, #24
 8006928:	4618      	mov	r0, r3
 800692a:	f000 f90d 	bl	8006b48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006932:	e0ea      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006938:	e0e7      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800693e:	e0e4      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006944:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006948:	430b      	orrs	r3, r1
 800694a:	f040 808d 	bne.w	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800694e:	4b42      	ldr	r3, [pc, #264]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006952:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006956:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800695e:	d06b      	beq.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006962:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006966:	d874      	bhi.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800696e:	d056      	beq.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006976:	d86c      	bhi.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800697e:	d03b      	beq.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006982:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006986:	d864      	bhi.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800698e:	d021      	beq.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006992:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006996:	d85c      	bhi.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699a:	2b00      	cmp	r3, #0
 800699c:	d004      	beq.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800699e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069a4:	d004      	beq.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80069a6:	e054      	b.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80069a8:	f000 f8b8 	bl	8006b1c <HAL_RCCEx_GetD3PCLK1Freq>
 80069ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80069ae:	e0ac      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069b0:	4b29      	ldr	r3, [pc, #164]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069bc:	d107      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069be:	f107 0318 	add.w	r3, r7, #24
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 f8c0 	bl	8006b48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069cc:	e09d      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069d2:	e09a      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069d4:	4b20      	ldr	r3, [pc, #128]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069e0:	d107      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069e2:	f107 030c 	add.w	r3, r7, #12
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fa02 	bl	8006df0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069f0:	e08b      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069f6:	e088      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069f8:	4b17      	ldr	r3, [pc, #92]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d109      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a04:	4b14      	ldr	r3, [pc, #80]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	08db      	lsrs	r3, r3, #3
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	4a13      	ldr	r2, [pc, #76]	@ (8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006a10:	fa22 f303 	lsr.w	r3, r2, r3
 8006a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a16:	e078      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a1c:	e075      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a2a:	d102      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a30:	e06b      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a36:	e068      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a38:	4b07      	ldr	r3, [pc, #28]	@ (8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a44:	d102      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006a46:	4b07      	ldr	r3, [pc, #28]	@ (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a4a:	e05e      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a50:	e05b      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a56:	e058      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	03d09000 	.word	0x03d09000
 8006a60:	003d0900 	.word	0x003d0900
 8006a64:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a6c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006a70:	430b      	orrs	r3, r1
 8006a72:	d148      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006a74:	4b27      	ldr	r3, [pc, #156]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006a7c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a84:	d02a      	beq.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a8c:	d838      	bhi.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d004      	beq.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a9a:	d00d      	beq.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006a9c:	e030      	b.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006aaa:	d102      	bne.n	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006aac:	4b1a      	ldr	r3, [pc, #104]	@ (8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ab0:	e02b      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ab6:	e028      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ab8:	4b16      	ldr	r3, [pc, #88]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ac0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ac4:	d107      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 fae4 	bl	8007098 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ad4:	e019      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ada:	e016      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006adc:	4b0d      	ldr	r3, [pc, #52]	@ (8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ae4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ae8:	d107      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aea:	f107 0318 	add.w	r3, r7, #24
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 f82a 	bl	8006b48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006af8:	e007      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006afe:	e004      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b04:	e001      	b.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3740      	adds	r7, #64	@ 0x40
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	58024400 	.word	0x58024400
 8006b18:	017d7840 	.word	0x017d7840

08006b1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b20:	f7fd ffec 	bl	8004afc <HAL_RCC_GetHCLKFreq>
 8006b24:	4602      	mov	r2, r0
 8006b26:	4b06      	ldr	r3, [pc, #24]	@ (8006b40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	091b      	lsrs	r3, r3, #4
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	4904      	ldr	r1, [pc, #16]	@ (8006b44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b32:	5ccb      	ldrb	r3, [r1, r3]
 8006b34:	f003 031f 	and.w	r3, r3, #31
 8006b38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	58024400 	.word	0x58024400
 8006b44:	08010c48 	.word	0x08010c48

08006b48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b089      	sub	sp, #36	@ 0x24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b50:	4ba1      	ldr	r3, [pc, #644]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b54:	f003 0303 	and.w	r3, r3, #3
 8006b58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006b5a:	4b9f      	ldr	r3, [pc, #636]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5e:	0b1b      	lsrs	r3, r3, #12
 8006b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b66:	4b9c      	ldr	r3, [pc, #624]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6a:	091b      	lsrs	r3, r3, #4
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006b72:	4b99      	ldr	r3, [pc, #612]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b76:	08db      	lsrs	r3, r3, #3
 8006b78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	fb02 f303 	mul.w	r3, r2, r3
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 8111 	beq.w	8006db8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	f000 8083 	beq.w	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	f200 80a1 	bhi.w	8006ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d056      	beq.n	8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006bb2:	e099      	b.n	8006ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bb4:	4b88      	ldr	r3, [pc, #544]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0320 	and.w	r3, r3, #32
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d02d      	beq.n	8006c1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bc0:	4b85      	ldr	r3, [pc, #532]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	08db      	lsrs	r3, r3, #3
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	4a84      	ldr	r2, [pc, #528]	@ (8006ddc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	ee07 3a90 	vmov	s15, r3
 8006bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	ee07 3a90 	vmov	s15, r3
 8006be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bea:	4b7b      	ldr	r3, [pc, #492]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bfe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c1a:	e087      	b.n	8006d2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006de4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c5e:	e065      	b.n	8006d2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006de8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c72:	4b59      	ldr	r3, [pc, #356]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ca2:	e043      	b.n	8006d2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006dec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cb6:	4b48      	ldr	r3, [pc, #288]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ce6:	e021      	b.n	8006d2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006de8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cfa:	4b37      	ldr	r3, [pc, #220]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d02:	ee07 3a90 	vmov	s15, r3
 8006d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d30:	0a5b      	lsrs	r3, r3, #9
 8006d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d46:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d52:	ee17 2a90 	vmov	r2, s15
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5e:	0c1b      	lsrs	r3, r3, #16
 8006d60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d64:	ee07 3a90 	vmov	s15, r3
 8006d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d74:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d80:	ee17 2a90 	vmov	r2, s15
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d88:	4b13      	ldr	r3, [pc, #76]	@ (8006dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8c:	0e1b      	lsrs	r3, r3, #24
 8006d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dae:	ee17 2a90 	vmov	r2, s15
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006db6:	e008      	b.n	8006dca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	609a      	str	r2, [r3, #8]
}
 8006dca:	bf00      	nop
 8006dcc:	3724      	adds	r7, #36	@ 0x24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	58024400 	.word	0x58024400
 8006ddc:	03d09000 	.word	0x03d09000
 8006de0:	46000000 	.word	0x46000000
 8006de4:	4c742400 	.word	0x4c742400
 8006de8:	4a742400 	.word	0x4a742400
 8006dec:	4bbebc20 	.word	0x4bbebc20

08006df0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b089      	sub	sp, #36	@ 0x24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006df8:	4ba1      	ldr	r3, [pc, #644]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	f003 0303 	and.w	r3, r3, #3
 8006e00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006e02:	4b9f      	ldr	r3, [pc, #636]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e06:	0d1b      	lsrs	r3, r3, #20
 8006e08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e0e:	4b9c      	ldr	r3, [pc, #624]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e12:	0a1b      	lsrs	r3, r3, #8
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e1a:	4b99      	ldr	r3, [pc, #612]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e1e:	08db      	lsrs	r3, r3, #3
 8006e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	fb02 f303 	mul.w	r3, r2, r3
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 8111 	beq.w	8007060 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	f000 8083 	beq.w	8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	f200 80a1 	bhi.w	8006f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d056      	beq.n	8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e5a:	e099      	b.n	8006f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e5c:	4b88      	ldr	r3, [pc, #544]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d02d      	beq.n	8006ec4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e68:	4b85      	ldr	r3, [pc, #532]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	08db      	lsrs	r3, r3, #3
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	4a84      	ldr	r2, [pc, #528]	@ (8007084 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e74:	fa22 f303 	lsr.w	r3, r2, r3
 8006e78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	ee07 3a90 	vmov	s15, r3
 8006e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e92:	4b7b      	ldr	r3, [pc, #492]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ea6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006ec2:	e087      	b.n	8006fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ece:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800708c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f06:	e065      	b.n	8006fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007090 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1a:	4b59      	ldr	r3, [pc, #356]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f4a:	e043      	b.n	8006fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007094 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f5e:	4b48      	ldr	r3, [pc, #288]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f8e:	e021      	b.n	8006fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007090 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa2:	4b37      	ldr	r3, [pc, #220]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fb6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007088 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fd2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006fd4:	4b2a      	ldr	r3, [pc, #168]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd8:	0a5b      	lsrs	r3, r3, #9
 8006fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fde:	ee07 3a90 	vmov	s15, r3
 8006fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ffa:	ee17 2a90 	vmov	r2, s15
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007002:	4b1f      	ldr	r3, [pc, #124]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007006:	0c1b      	lsrs	r3, r3, #16
 8007008:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800700c:	ee07 3a90 	vmov	s15, r3
 8007010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007014:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007018:	ee37 7a87 	vadd.f32	s14, s15, s14
 800701c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007028:	ee17 2a90 	vmov	r2, s15
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007030:	4b13      	ldr	r3, [pc, #76]	@ (8007080 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007034:	0e1b      	lsrs	r3, r3, #24
 8007036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007042:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800704a:	edd7 6a07 	vldr	s13, [r7, #28]
 800704e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007056:	ee17 2a90 	vmov	r2, s15
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800705e:	e008      	b.n	8007072 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	609a      	str	r2, [r3, #8]
}
 8007072:	bf00      	nop
 8007074:	3724      	adds	r7, #36	@ 0x24
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	58024400 	.word	0x58024400
 8007084:	03d09000 	.word	0x03d09000
 8007088:	46000000 	.word	0x46000000
 800708c:	4c742400 	.word	0x4c742400
 8007090:	4a742400 	.word	0x4a742400
 8007094:	4bbebc20 	.word	0x4bbebc20

08007098 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007098:	b480      	push	{r7}
 800709a:	b089      	sub	sp, #36	@ 0x24
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070a0:	4ba0      	ldr	r3, [pc, #640]	@ (8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a4:	f003 0303 	and.w	r3, r3, #3
 80070a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80070aa:	4b9e      	ldr	r3, [pc, #632]	@ (8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ae:	091b      	lsrs	r3, r3, #4
 80070b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80070b6:	4b9b      	ldr	r3, [pc, #620]	@ (8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80070c0:	4b98      	ldr	r3, [pc, #608]	@ (8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070c4:	08db      	lsrs	r3, r3, #3
 80070c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	fb02 f303 	mul.w	r3, r2, r3
 80070d0:	ee07 3a90 	vmov	s15, r3
 80070d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 8111 	beq.w	8007306 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	f000 8083 	beq.w	80071f2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	f200 80a1 	bhi.w	8007236 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d056      	beq.n	80071ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007100:	e099      	b.n	8007236 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007102:	4b88      	ldr	r3, [pc, #544]	@ (8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b00      	cmp	r3, #0
 800710c:	d02d      	beq.n	800716a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800710e:	4b85      	ldr	r3, [pc, #532]	@ (8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	08db      	lsrs	r3, r3, #3
 8007114:	f003 0303 	and.w	r3, r3, #3
 8007118:	4a83      	ldr	r2, [pc, #524]	@ (8007328 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800711a:	fa22 f303 	lsr.w	r3, r2, r3
 800711e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	ee07 3a90 	vmov	s15, r3
 8007126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	ee07 3a90 	vmov	s15, r3
 8007130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007138:	4b7a      	ldr	r3, [pc, #488]	@ (8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800713a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007148:	ed97 6a03 	vldr	s12, [r7, #12]
 800714c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800732c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007150:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007154:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007158:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800715c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007164:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007168:	e087      	b.n	800727a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	ee07 3a90 	vmov	s15, r3
 8007170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007174:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007330 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717c:	4b69      	ldr	r3, [pc, #420]	@ (8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800717e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007190:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800732c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007194:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ac:	e065      	b.n	800727a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	ee07 3a90 	vmov	s15, r3
 80071b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007334 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80071bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c0:	4b58      	ldr	r3, [pc, #352]	@ (8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c8:	ee07 3a90 	vmov	s15, r3
 80071cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800732c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071f0:	e043      	b.n	800727a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	ee07 3a90 	vmov	s15, r3
 80071f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071fc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007338 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007204:	4b47      	ldr	r3, [pc, #284]	@ (8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720c:	ee07 3a90 	vmov	s15, r3
 8007210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007214:	ed97 6a03 	vldr	s12, [r7, #12]
 8007218:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800732c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800721c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007224:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800722c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007230:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007234:	e021      	b.n	800727a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	ee07 3a90 	vmov	s15, r3
 800723c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007240:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007330 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007248:	4b36      	ldr	r3, [pc, #216]	@ (8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800724a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800724c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007250:	ee07 3a90 	vmov	s15, r3
 8007254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007258:	ed97 6a03 	vldr	s12, [r7, #12]
 800725c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800732c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007260:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007268:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800726c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007274:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007278:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800727a:	4b2a      	ldr	r3, [pc, #168]	@ (8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800727c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727e:	0a5b      	lsrs	r3, r3, #9
 8007280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007284:	ee07 3a90 	vmov	s15, r3
 8007288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007290:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007294:	edd7 6a07 	vldr	s13, [r7, #28]
 8007298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800729c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072a0:	ee17 2a90 	vmov	r2, s15
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80072a8:	4b1e      	ldr	r3, [pc, #120]	@ (8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ac:	0c1b      	lsrs	r3, r3, #16
 80072ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80072c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ce:	ee17 2a90 	vmov	r2, s15
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80072d6:	4b13      	ldr	r3, [pc, #76]	@ (8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072da:	0e1b      	lsrs	r3, r3, #24
 80072dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072e0:	ee07 3a90 	vmov	s15, r3
 80072e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fc:	ee17 2a90 	vmov	r2, s15
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007304:	e008      	b.n	8007318 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	609a      	str	r2, [r3, #8]
}
 8007318:	bf00      	nop
 800731a:	3724      	adds	r7, #36	@ 0x24
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	58024400 	.word	0x58024400
 8007328:	03d09000 	.word	0x03d09000
 800732c:	46000000 	.word	0x46000000
 8007330:	4c742400 	.word	0x4c742400
 8007334:	4a742400 	.word	0x4a742400
 8007338:	4bbebc20 	.word	0x4bbebc20

0800733c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800734a:	4b53      	ldr	r3, [pc, #332]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 800734c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	2b03      	cmp	r3, #3
 8007354:	d101      	bne.n	800735a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e099      	b.n	800748e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800735a:	4b4f      	ldr	r3, [pc, #316]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a4e      	ldr	r2, [pc, #312]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007360:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007366:	f7f9 fb19 	bl	800099c <HAL_GetTick>
 800736a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800736c:	e008      	b.n	8007380 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800736e:	f7f9 fb15 	bl	800099c <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d901      	bls.n	8007380 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e086      	b.n	800748e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007380:	4b45      	ldr	r3, [pc, #276]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f0      	bne.n	800736e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800738c:	4b42      	ldr	r3, [pc, #264]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 800738e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007390:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	031b      	lsls	r3, r3, #12
 800739a:	493f      	ldr	r1, [pc, #252]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 800739c:	4313      	orrs	r3, r2
 800739e:	628b      	str	r3, [r1, #40]	@ 0x28
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	025b      	lsls	r3, r3, #9
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	431a      	orrs	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	041b      	lsls	r3, r3, #16
 80073be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	061b      	lsls	r3, r3, #24
 80073cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073d0:	4931      	ldr	r1, [pc, #196]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80073d6:	4b30      	ldr	r3, [pc, #192]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 80073d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	492d      	ldr	r1, [pc, #180]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80073e8:	4b2b      	ldr	r3, [pc, #172]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 80073ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ec:	f023 0220 	bic.w	r2, r3, #32
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	4928      	ldr	r1, [pc, #160]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80073fa:	4b27      	ldr	r3, [pc, #156]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 80073fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fe:	4a26      	ldr	r2, [pc, #152]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007400:	f023 0310 	bic.w	r3, r3, #16
 8007404:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007406:	4b24      	ldr	r3, [pc, #144]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007408:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800740a:	4b24      	ldr	r3, [pc, #144]	@ (800749c <RCCEx_PLL2_Config+0x160>)
 800740c:	4013      	ands	r3, r2
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	69d2      	ldr	r2, [r2, #28]
 8007412:	00d2      	lsls	r2, r2, #3
 8007414:	4920      	ldr	r1, [pc, #128]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007416:	4313      	orrs	r3, r2
 8007418:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800741a:	4b1f      	ldr	r3, [pc, #124]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 800741c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741e:	4a1e      	ldr	r2, [pc, #120]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007420:	f043 0310 	orr.w	r3, r3, #16
 8007424:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d106      	bne.n	800743a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800742c:	4b1a      	ldr	r3, [pc, #104]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 800742e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007430:	4a19      	ldr	r2, [pc, #100]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007432:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007436:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007438:	e00f      	b.n	800745a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d106      	bne.n	800744e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007440:	4b15      	ldr	r3, [pc, #84]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007444:	4a14      	ldr	r2, [pc, #80]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800744a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800744c:	e005      	b.n	800745a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800744e:	4b12      	ldr	r3, [pc, #72]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007452:	4a11      	ldr	r2, [pc, #68]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007454:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007458:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800745a:	4b0f      	ldr	r3, [pc, #60]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a0e      	ldr	r2, [pc, #56]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007460:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007466:	f7f9 fa99 	bl	800099c <HAL_GetTick>
 800746a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800746c:	e008      	b.n	8007480 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800746e:	f7f9 fa95 	bl	800099c <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d901      	bls.n	8007480 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e006      	b.n	800748e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007480:	4b05      	ldr	r3, [pc, #20]	@ (8007498 <RCCEx_PLL2_Config+0x15c>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0f0      	beq.n	800746e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	58024400 	.word	0x58024400
 800749c:	ffff0007 	.word	0xffff0007

080074a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074ae:	4b53      	ldr	r3, [pc, #332]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 80074b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d101      	bne.n	80074be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e099      	b.n	80075f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80074be:	4b4f      	ldr	r3, [pc, #316]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a4e      	ldr	r2, [pc, #312]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 80074c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ca:	f7f9 fa67 	bl	800099c <HAL_GetTick>
 80074ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074d0:	e008      	b.n	80074e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80074d2:	f7f9 fa63 	bl	800099c <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d901      	bls.n	80074e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e086      	b.n	80075f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80074e4:	4b45      	ldr	r3, [pc, #276]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1f0      	bne.n	80074d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80074f0:	4b42      	ldr	r3, [pc, #264]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 80074f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	051b      	lsls	r3, r3, #20
 80074fe:	493f      	ldr	r1, [pc, #252]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007500:	4313      	orrs	r3, r2
 8007502:	628b      	str	r3, [r1, #40]	@ 0x28
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	3b01      	subs	r3, #1
 800750a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	3b01      	subs	r3, #1
 8007514:	025b      	lsls	r3, r3, #9
 8007516:	b29b      	uxth	r3, r3
 8007518:	431a      	orrs	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	3b01      	subs	r3, #1
 8007520:	041b      	lsls	r3, r3, #16
 8007522:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007526:	431a      	orrs	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	3b01      	subs	r3, #1
 800752e:	061b      	lsls	r3, r3, #24
 8007530:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007534:	4931      	ldr	r1, [pc, #196]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007536:	4313      	orrs	r3, r2
 8007538:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800753a:	4b30      	ldr	r3, [pc, #192]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 800753c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	492d      	ldr	r1, [pc, #180]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007548:	4313      	orrs	r3, r2
 800754a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800754c:	4b2b      	ldr	r3, [pc, #172]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 800754e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007550:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	4928      	ldr	r1, [pc, #160]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 800755a:	4313      	orrs	r3, r2
 800755c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800755e:	4b27      	ldr	r3, [pc, #156]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007562:	4a26      	ldr	r2, [pc, #152]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007568:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800756a:	4b24      	ldr	r3, [pc, #144]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 800756c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800756e:	4b24      	ldr	r3, [pc, #144]	@ (8007600 <RCCEx_PLL3_Config+0x160>)
 8007570:	4013      	ands	r3, r2
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	69d2      	ldr	r2, [r2, #28]
 8007576:	00d2      	lsls	r2, r2, #3
 8007578:	4920      	ldr	r1, [pc, #128]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 800757a:	4313      	orrs	r3, r2
 800757c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800757e:	4b1f      	ldr	r3, [pc, #124]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007582:	4a1e      	ldr	r2, [pc, #120]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007588:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d106      	bne.n	800759e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007590:	4b1a      	ldr	r3, [pc, #104]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007594:	4a19      	ldr	r2, [pc, #100]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 8007596:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800759a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800759c:	e00f      	b.n	80075be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d106      	bne.n	80075b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075a4:	4b15      	ldr	r3, [pc, #84]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 80075a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a8:	4a14      	ldr	r2, [pc, #80]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 80075aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80075ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80075b0:	e005      	b.n	80075be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80075b2:	4b12      	ldr	r3, [pc, #72]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 80075b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b6:	4a11      	ldr	r2, [pc, #68]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 80075b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80075be:	4b0f      	ldr	r3, [pc, #60]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a0e      	ldr	r2, [pc, #56]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 80075c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ca:	f7f9 f9e7 	bl	800099c <HAL_GetTick>
 80075ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075d0:	e008      	b.n	80075e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075d2:	f7f9 f9e3 	bl	800099c <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d901      	bls.n	80075e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e006      	b.n	80075f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80075e4:	4b05      	ldr	r3, [pc, #20]	@ (80075fc <RCCEx_PLL3_Config+0x15c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0f0      	beq.n	80075d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	58024400 	.word	0x58024400
 8007600:	ffff0007 	.word	0xffff0007

08007604 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d071      	beq.n	80076fa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d106      	bne.n	8007630 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f005 fca0 	bl	800cf70 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2202      	movs	r2, #2
 8007634:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f003 0310 	and.w	r3, r3, #16
 8007642:	2b10      	cmp	r3, #16
 8007644:	d050      	beq.n	80076e8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	22ca      	movs	r2, #202	@ 0xca
 800764c:	625a      	str	r2, [r3, #36]	@ 0x24
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2253      	movs	r2, #83	@ 0x53
 8007654:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fa4a 	bl	8007af0 <RTC_EnterInitMode>
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d124      	bne.n	80076b0 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6899      	ldr	r1, [r3, #8]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	4b24      	ldr	r3, [pc, #144]	@ (8007704 <HAL_RTC_Init+0x100>)
 8007672:	400b      	ands	r3, r1
 8007674:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6899      	ldr	r1, [r3, #8]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	0419      	lsls	r1, r3, #16
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fa56 	bl	8007b58 <RTC_ExitInitMode>
 80076ac:	4603      	mov	r3, r0
 80076ae:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d113      	bne.n	80076de <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 0203 	bic.w	r2, r2, #3
 80076c4:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	69da      	ldr	r2, [r3, #28]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	431a      	orrs	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	22ff      	movs	r2, #255	@ 0xff
 80076e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80076e6:	e001      	b.n	80076ec <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	ff8fffbf 	.word	0xff8fffbf

08007708 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007708:	b590      	push	{r4, r7, lr}
 800770a:	b087      	sub	sp, #28
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 3020 	ldrb.w	r3, [r3, #32]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_RTC_SetTime+0x1a>
 800771e:	2302      	movs	r3, #2
 8007720:	e089      	b.n	8007836 <HAL_RTC_SetTime+0x12e>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2202      	movs	r2, #2
 800772e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	22ca      	movs	r2, #202	@ 0xca
 8007738:	625a      	str	r2, [r3, #36]	@ 0x24
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2253      	movs	r2, #83	@ 0x53
 8007740:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f9d4 	bl	8007af0 <RTC_EnterInitMode>
 8007748:	4603      	mov	r3, r0
 800774a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800774c:	7cfb      	ldrb	r3, [r7, #19]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d161      	bne.n	8007816 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d126      	bne.n	80077a6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2200      	movs	r2, #0
 800776a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	4618      	mov	r0, r3
 8007772:	f000 fa2f 	bl	8007bd4 <RTC_ByteToBcd2>
 8007776:	4603      	mov	r3, r0
 8007778:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	785b      	ldrb	r3, [r3, #1]
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fa28 	bl	8007bd4 <RTC_ByteToBcd2>
 8007784:	4603      	mov	r3, r0
 8007786:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007788:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	789b      	ldrb	r3, [r3, #2]
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fa20 	bl	8007bd4 <RTC_ByteToBcd2>
 8007794:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007796:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	78db      	ldrb	r3, [r3, #3]
 800779e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077a0:	4313      	orrs	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	e018      	b.n	80077d8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d102      	bne.n	80077ba <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2200      	movs	r2, #0
 80077b8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077c6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077cc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	78db      	ldrb	r3, [r3, #3]
 80077d2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80077d4:	4313      	orrs	r3, r2
 80077d6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	6979      	ldr	r1, [r7, #20]
 80077de:	4b18      	ldr	r3, [pc, #96]	@ (8007840 <HAL_RTC_SetTime+0x138>)
 80077e0:	400b      	ands	r3, r1
 80077e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80077f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6899      	ldr	r1, [r3, #8]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	68da      	ldr	r2, [r3, #12]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	431a      	orrs	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 f9a3 	bl	8007b58 <RTC_ExitInitMode>
 8007812:	4603      	mov	r3, r0
 8007814:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	22ff      	movs	r2, #255	@ 0xff
 800781c:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800781e:	7cfb      	ldrb	r3, [r7, #19]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d103      	bne.n	800782c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007834:	7cfb      	ldrb	r3, [r7, #19]
}
 8007836:	4618      	mov	r0, r3
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	bd90      	pop	{r4, r7, pc}
 800783e:	bf00      	nop
 8007840:	007f7f7f 	.word	0x007f7f7f

08007844 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	4b22      	ldr	r3, [pc, #136]	@ (80078f8 <HAL_RTC_GetTime+0xb4>)
 8007870:	4013      	ands	r3, r2
 8007872:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	0c1b      	lsrs	r3, r3, #16
 8007878:	b2db      	uxtb	r3, r3
 800787a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800787e:	b2da      	uxtb	r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	0a1b      	lsrs	r3, r3, #8
 8007888:	b2db      	uxtb	r3, r3
 800788a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800788e:	b2da      	uxtb	r2, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	b2db      	uxtb	r3, r3
 8007898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800789c:	b2da      	uxtb	r2, r3
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	0d9b      	lsrs	r3, r3, #22
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d11a      	bne.n	80078ee <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 f9a9 	bl	8007c14 <RTC_Bcd2ToByte>
 80078c2:	4603      	mov	r3, r0
 80078c4:	461a      	mov	r2, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	785b      	ldrb	r3, [r3, #1]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 f9a0 	bl	8007c14 <RTC_Bcd2ToByte>
 80078d4:	4603      	mov	r3, r0
 80078d6:	461a      	mov	r2, r3
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	789b      	ldrb	r3, [r3, #2]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 f997 	bl	8007c14 <RTC_Bcd2ToByte>
 80078e6:	4603      	mov	r3, r0
 80078e8:	461a      	mov	r2, r3
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	007f7f7f 	.word	0x007f7f7f

080078fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078fc:	b590      	push	{r4, r7, lr}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d101      	bne.n	8007916 <HAL_RTC_SetDate+0x1a>
 8007912:	2302      	movs	r3, #2
 8007914:	e073      	b.n	80079fe <HAL_RTC_SetDate+0x102>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2202      	movs	r2, #2
 8007922:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10e      	bne.n	800794a <HAL_RTC_SetDate+0x4e>
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	785b      	ldrb	r3, [r3, #1]
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b00      	cmp	r3, #0
 8007936:	d008      	beq.n	800794a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	f023 0310 	bic.w	r3, r3, #16
 8007940:	b2db      	uxtb	r3, r3
 8007942:	330a      	adds	r3, #10
 8007944:	b2da      	uxtb	r2, r3
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d11c      	bne.n	800798a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	78db      	ldrb	r3, [r3, #3]
 8007954:	4618      	mov	r0, r3
 8007956:	f000 f93d 	bl	8007bd4 <RTC_ByteToBcd2>
 800795a:	4603      	mov	r3, r0
 800795c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	785b      	ldrb	r3, [r3, #1]
 8007962:	4618      	mov	r0, r3
 8007964:	f000 f936 	bl	8007bd4 <RTC_ByteToBcd2>
 8007968:	4603      	mov	r3, r0
 800796a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800796c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	789b      	ldrb	r3, [r3, #2]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 f92e 	bl	8007bd4 <RTC_ByteToBcd2>
 8007978:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800797a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007984:	4313      	orrs	r3, r2
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	e00e      	b.n	80079a8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	78db      	ldrb	r3, [r3, #3]
 800798e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007996:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800799c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80079a4:	4313      	orrs	r3, r2
 80079a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	22ca      	movs	r2, #202	@ 0xca
 80079ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2253      	movs	r2, #83	@ 0x53
 80079b6:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f000 f899 	bl	8007af0 <RTC_EnterInitMode>
 80079be:	4603      	mov	r3, r0
 80079c0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80079c2:	7cfb      	ldrb	r3, [r7, #19]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	6979      	ldr	r1, [r7, #20]
 80079ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007a08 <HAL_RTC_SetDate+0x10c>)
 80079d0:	400b      	ands	r3, r1
 80079d2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 f8bf 	bl	8007b58 <RTC_ExitInitMode>
 80079da:	4603      	mov	r3, r0
 80079dc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	22ff      	movs	r2, #255	@ 0xff
 80079e4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80079e6:	7cfb      	ldrb	r3, [r7, #19]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d103      	bne.n	80079f4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80079fc:	7cfb      	ldrb	r3, [r7, #19]


}
 80079fe:	4618      	mov	r0, r3
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd90      	pop	{r4, r7, pc}
 8007a06:	bf00      	nop
 8007a08:	00ffff3f 	.word	0x00ffff3f

08007a0c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b086      	sub	sp, #24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	4b21      	ldr	r3, [pc, #132]	@ (8007aa4 <HAL_RTC_GetDate+0x98>)
 8007a20:	4013      	ands	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	0c1b      	lsrs	r3, r3, #16
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	0a1b      	lsrs	r3, r3, #8
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f003 031f 	and.w	r3, r3, #31
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	0b5b      	lsrs	r3, r3, #13
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	f003 0307 	and.w	r3, r3, #7
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d11a      	bne.n	8007a98 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	78db      	ldrb	r3, [r3, #3]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 f8d4 	bl	8007c14 <RTC_Bcd2ToByte>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	461a      	mov	r2, r3
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	785b      	ldrb	r3, [r3, #1]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 f8cb 	bl	8007c14 <RTC_Bcd2ToByte>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	461a      	mov	r2, r3
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	789b      	ldrb	r3, [r3, #2]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 f8c2 	bl	8007c14 <RTC_Bcd2ToByte>
 8007a90:	4603      	mov	r3, r0
 8007a92:	461a      	mov	r2, r3
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3718      	adds	r7, #24
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	00ffff3f 	.word	0x00ffff3f

08007aa8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8007aec <HAL_RTC_WaitForSynchro+0x44>)
 8007ab6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8007ab8:	f7f8 ff70 	bl	800099c <HAL_GetTick>
 8007abc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007abe:	e009      	b.n	8007ad4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ac0:	f7f8 ff6c 	bl	800099c <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ace:	d901      	bls.n	8007ad4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e007      	b.n	8007ae4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0ee      	beq.n	8007ac0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	0003ff5f 	.word	0x0003ff5f

08007af0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d120      	bne.n	8007b4c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b12:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007b14:	f7f8 ff42 	bl	800099c <HAL_GetTick>
 8007b18:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007b1a:	e00d      	b.n	8007b38 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007b1c:	f7f8 ff3e 	bl	800099c <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b2a:	d905      	bls.n	8007b38 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2203      	movs	r2, #3
 8007b34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d102      	bne.n	8007b4c <RTC_EnterInitMode+0x5c>
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d1e7      	bne.n	8007b1c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007b64:	4b1a      	ldr	r3, [pc, #104]	@ (8007bd0 <RTC_ExitInitMode+0x78>)
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	4a19      	ldr	r2, [pc, #100]	@ (8007bd0 <RTC_ExitInitMode+0x78>)
 8007b6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b6e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007b70:	4b17      	ldr	r3, [pc, #92]	@ (8007bd0 <RTC_ExitInitMode+0x78>)
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10c      	bne.n	8007b96 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff ff93 	bl	8007aa8 <HAL_RTC_WaitForSynchro>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01e      	beq.n	8007bc6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	73fb      	strb	r3, [r7, #15]
 8007b94:	e017      	b.n	8007bc6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007b96:	4b0e      	ldr	r3, [pc, #56]	@ (8007bd0 <RTC_ExitInitMode+0x78>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	4a0d      	ldr	r2, [pc, #52]	@ (8007bd0 <RTC_ExitInitMode+0x78>)
 8007b9c:	f023 0320 	bic.w	r3, r3, #32
 8007ba0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7ff ff80 	bl	8007aa8 <HAL_RTC_WaitForSynchro>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2203      	movs	r2, #3
 8007bb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007bba:	4b05      	ldr	r3, [pc, #20]	@ (8007bd0 <RTC_ExitInitMode+0x78>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	4a04      	ldr	r2, [pc, #16]	@ (8007bd0 <RTC_ExitInitMode+0x78>)
 8007bc0:	f043 0320 	orr.w	r3, r3, #32
 8007bc4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	58004000 	.word	0x58004000

08007bd4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8007be6:	e005      	b.n	8007bf4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8007bee:	7afb      	ldrb	r3, [r7, #11]
 8007bf0:	3b0a      	subs	r3, #10
 8007bf2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8007bf4:	7afb      	ldrb	r3, [r7, #11]
 8007bf6:	2b09      	cmp	r3, #9
 8007bf8:	d8f6      	bhi.n	8007be8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	011b      	lsls	r3, r3, #4
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	7afb      	ldrb	r3, [r7, #11]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	b2db      	uxtb	r3, r3
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	091b      	lsrs	r3, r3, #4
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	0092      	lsls	r2, r2, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	f003 030f 	and.w	r3, r3, #15
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	4413      	add	r3, r2
 8007c3a:	b2db      	uxtb	r3, r3
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08a      	sub	sp, #40	@ 0x28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e075      	b.n	8007d46 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d105      	bne.n	8007c72 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f90b 	bl	8007e88 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2204      	movs	r2, #4
 8007c76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f868 	bl	8007d50 <HAL_SD_InitCard>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e05d      	b.n	8007d46 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007c8a:	f107 0308 	add.w	r3, r7, #8
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fdbf 	bl	8008814 <HAL_SD_GetCardStatus>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e052      	b.n	8007d46 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007ca0:	7e3b      	ldrb	r3, [r7, #24]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007ca6:	7e7b      	ldrb	r3, [r7, #25]
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d10a      	bne.n	8007cca <HAL_SD_Init+0x82>
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d102      	bne.n	8007cc0 <HAL_SD_Init+0x78>
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d004      	beq.n	8007cca <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007cc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8007cc8:	e00b      	b.n	8007ce2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d104      	bne.n	8007cdc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cd8:	659a      	str	r2, [r3, #88]	@ 0x58
 8007cda:	e002      	b.n	8007ce2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fe7d 	bl	80089e8 <HAL_SD_ConfigWideBusOperation>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e026      	b.n	8007d46 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007cf8:	f7f8 fe50 	bl	800099c <HAL_GetTick>
 8007cfc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007cfe:	e011      	b.n	8007d24 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d00:	f7f8 fe4c 	bl	800099c <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0e:	d109      	bne.n	8007d24 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007d16:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e010      	b.n	8007d46 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 f82d 	bl	8008d84 <HAL_SD_GetCardState>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b04      	cmp	r3, #4
 8007d2e:	d1e7      	bne.n	8007d00 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3728      	adds	r7, #40	@ 0x28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d50:	b590      	push	{r4, r7, lr}
 8007d52:	b08d      	sub	sp, #52	@ 0x34
 8007d54:	af02      	add	r7, sp, #8
 8007d56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007d60:	2300      	movs	r3, #0
 8007d62:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d64:	2300      	movs	r3, #0
 8007d66:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007d68:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007d6c:	f04f 0100 	mov.w	r1, #0
 8007d70:	f7fe f954 	bl	800601c <HAL_RCCEx_GetPeriphCLKFreq>
 8007d74:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d109      	bne.n	8007d90 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007d8a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e070      	b.n	8007e72 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	0a1b      	lsrs	r3, r3, #8
 8007d94:	4a39      	ldr	r2, [pc, #228]	@ (8007e7c <HAL_SD_InitCard+0x12c>)
 8007d96:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9a:	091b      	lsrs	r3, r3, #4
 8007d9c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681c      	ldr	r4, [r3, #0]
 8007da2:	466a      	mov	r2, sp
 8007da4:	f107 0318 	add.w	r3, r7, #24
 8007da8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007dac:	e882 0003 	stmia.w	r2, {r0, r1}
 8007db0:	f107 030c 	add.w	r3, r7, #12
 8007db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007db6:	4620      	mov	r0, r4
 8007db8:	f002 f888 	bl	8009ecc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f002 f8cb 	bl	8009f5c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d005      	beq.n	8007dd8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8007dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d007      	beq.n	8007dee <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007dde:	4a28      	ldr	r2, [pc, #160]	@ (8007e80 <HAL_SD_InitCard+0x130>)
 8007de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de6:	3301      	adds	r3, #1
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7f8 fde3 	bl	80009b4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 f8b6 	bl	8008f60 <SD_PowerON>
 8007df4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	431a      	orrs	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e02e      	b.n	8007e72 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 ffd5 	bl	8008dc4 <SD_InitCard>
 8007e1a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00b      	beq.n	8007e3a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	431a      	orrs	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e01b      	b.n	8007e72 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007e42:	4618      	mov	r0, r3
 8007e44:	f002 f920 	bl	800a088 <SDMMC_CmdBlockLength>
 8007e48:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00f      	beq.n	8007e70 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a0b      	ldr	r2, [pc, #44]	@ (8007e84 <HAL_SD_InitCard+0x134>)
 8007e56:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	372c      	adds	r7, #44	@ 0x2c
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd90      	pop	{r4, r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	014f8b59 	.word	0x014f8b59
 8007e80:	00012110 	.word	0x00012110
 8007e84:	1fe00fff 	.word	0x1fe00fff

08007e88 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b092      	sub	sp, #72	@ 0x48
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007eaa:	f7f8 fd77 	bl	800099c <HAL_GetTick>
 8007eae:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d107      	bne.n	8007ece <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ec2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e167      	b.n	800819e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	f040 815a 	bne.w	8008190 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007ee2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	441a      	add	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d907      	bls.n	8007f00 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ef4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e14e      	b.n	800819e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2203      	movs	r2, #3
 8007f04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d002      	beq.n	8007f1e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1a:	025b      	lsls	r3, r3, #9
 8007f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f22:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	025b      	lsls	r3, r3, #9
 8007f28:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007f2a:	2390      	movs	r3, #144	@ 0x90
 8007f2c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f2e:	2302      	movs	r3, #2
 8007f30:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007f36:	2300      	movs	r3, #0
 8007f38:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f107 0214 	add.w	r2, r7, #20
 8007f42:	4611      	mov	r1, r2
 8007f44:	4618      	mov	r0, r3
 8007f46:	f002 f873 	bl	800a030 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	68da      	ldr	r2, [r3, #12]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f58:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d90a      	bls.n	8007f76 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2202      	movs	r2, #2
 8007f64:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f002 f8d1 	bl	800a114 <SDMMC_CmdReadMultiBlock>
 8007f72:	6478      	str	r0, [r7, #68]	@ 0x44
 8007f74:	e009      	b.n	8007f8a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007f82:	4618      	mov	r0, r3
 8007f84:	f002 f8a3 	bl	800a0ce <SDMMC_CmdReadSingleBlock>
 8007f88:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d012      	beq.n	8007fb6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a84      	ldr	r2, [pc, #528]	@ (80081a8 <HAL_SD_ReadBlocks+0x30c>)
 8007f96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e0f3      	b.n	800819e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007fba:	e058      	b.n	800806e <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d033      	beq.n	8008032 <HAL_SD_ReadBlocks+0x196>
 8007fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fcc:	2b1f      	cmp	r3, #31
 8007fce:	d930      	bls.n	8008032 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fd4:	e027      	b.n	8008026 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 ffa0 	bl	8009f20 <SDMMC_ReadFIFO>
 8007fe0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fec:	3301      	adds	r3, #1
 8007fee:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff2:	0a1b      	lsrs	r3, r3, #8
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008002:	0c1b      	lsrs	r3, r3, #16
 8008004:	b2da      	uxtb	r2, r3
 8008006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008008:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800800a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800800c:	3301      	adds	r3, #1
 800800e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008012:	0e1b      	lsrs	r3, r3, #24
 8008014:	b2da      	uxtb	r2, r3
 8008016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008018:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800801a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800801c:	3301      	adds	r3, #1
 800801e:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8008020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008022:	3301      	adds	r3, #1
 8008024:	643b      	str	r3, [r7, #64]	@ 0x40
 8008026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008028:	2b07      	cmp	r3, #7
 800802a:	d9d4      	bls.n	8007fd6 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800802c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800802e:	3b20      	subs	r3, #32
 8008030:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008032:	f7f8 fcb3 	bl	800099c <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800803e:	429a      	cmp	r2, r3
 8008040:	d902      	bls.n	8008048 <HAL_SD_ReadBlocks+0x1ac>
 8008042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008044:	2b00      	cmp	r3, #0
 8008046:	d112      	bne.n	800806e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a56      	ldr	r2, [pc, #344]	@ (80081a8 <HAL_SD_ReadBlocks+0x30c>)
 800804e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008054:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e097      	b.n	800819e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008074:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008078:	2b00      	cmp	r3, #0
 800807a:	d09f      	beq.n	8007fbc <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68da      	ldr	r2, [r3, #12]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800808a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008096:	2b00      	cmp	r3, #0
 8008098:	d022      	beq.n	80080e0 <HAL_SD_ReadBlocks+0x244>
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d91f      	bls.n	80080e0 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d01b      	beq.n	80080e0 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f002 f89b 	bl	800a1e8 <SDMMC_CmdStopTransfer>
 80080b2:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80080b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d012      	beq.n	80080e0 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a3a      	ldr	r2, [pc, #232]	@ (80081a8 <HAL_SD_ReadBlocks+0x30c>)
 80080c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080c8:	431a      	orrs	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e05e      	b.n	800819e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080e6:	f003 0308 	and.w	r3, r3, #8
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d012      	beq.n	8008114 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a2d      	ldr	r2, [pc, #180]	@ (80081a8 <HAL_SD_ReadBlocks+0x30c>)
 80080f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080fa:	f043 0208 	orr.w	r2, r3, #8
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e044      	b.n	800819e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d012      	beq.n	8008148 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a20      	ldr	r2, [pc, #128]	@ (80081a8 <HAL_SD_ReadBlocks+0x30c>)
 8008128:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800812e:	f043 0202 	orr.w	r2, r3, #2
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e02a      	b.n	800819e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d012      	beq.n	800817c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a13      	ldr	r2, [pc, #76]	@ (80081a8 <HAL_SD_ReadBlocks+0x30c>)
 800815c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008162:	f043 0220 	orr.w	r2, r3, #32
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e010      	b.n	800819e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a0a      	ldr	r2, [pc, #40]	@ (80081ac <HAL_SD_ReadBlocks+0x310>)
 8008182:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	e006      	b.n	800819e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008194:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
  }
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3748      	adds	r7, #72	@ 0x48
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	1fe00fff 	.word	0x1fe00fff
 80081ac:	18000f3a 	.word	0x18000f3a

080081b0 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b092      	sub	sp, #72	@ 0x48
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80081be:	f7f8 fbed 	bl	800099c <HAL_GetTick>
 80081c2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d107      	bne.n	80081e2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e16b      	b.n	80084ba <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	f040 815e 	bne.w	80084ac <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80081f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	441a      	add	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008200:	429a      	cmp	r2, r3
 8008202:	d907      	bls.n	8008214 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008208:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e152      	b.n	80084ba <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2203      	movs	r2, #3
 8008218:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2200      	movs	r2, #0
 8008222:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008228:	2b01      	cmp	r3, #1
 800822a:	d002      	beq.n	8008232 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800822c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822e:	025b      	lsls	r3, r3, #9
 8008230:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008232:	f04f 33ff 	mov.w	r3, #4294967295
 8008236:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	025b      	lsls	r3, r3, #9
 800823c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800823e:	2390      	movs	r3, #144	@ 0x90
 8008240:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008242:	2300      	movs	r3, #0
 8008244:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008246:	2300      	movs	r3, #0
 8008248:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800824a:	2300      	movs	r3, #0
 800824c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f107 0218 	add.w	r2, r7, #24
 8008256:	4611      	mov	r1, r2
 8008258:	4618      	mov	r0, r3
 800825a:	f001 fee9 	bl	800a030 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68da      	ldr	r2, [r3, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800826c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d90a      	bls.n	800828a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2220      	movs	r2, #32
 8008278:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008280:	4618      	mov	r0, r3
 8008282:	f001 ff8d 	bl	800a1a0 <SDMMC_CmdWriteMultiBlock>
 8008286:	6478      	str	r0, [r7, #68]	@ 0x44
 8008288:	e009      	b.n	800829e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2210      	movs	r2, #16
 800828e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008296:	4618      	mov	r0, r3
 8008298:	f001 ff5f 	bl	800a15a <SDMMC_CmdWriteSingleBlock>
 800829c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800829e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d012      	beq.n	80082ca <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a86      	ldr	r2, [pc, #536]	@ (80084c4 <HAL_SD_WriteBlocks+0x314>)
 80082aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b2:	431a      	orrs	r2, r3
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e0f7      	b.n	80084ba <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80082ce:	e05c      	b.n	800838a <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d037      	beq.n	800834e <HAL_SD_WriteBlocks+0x19e>
 80082de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e0:	2b1f      	cmp	r3, #31
 80082e2:	d934      	bls.n	800834e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80082e4:	2300      	movs	r3, #0
 80082e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80082e8:	e02b      	b.n	8008342 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80082ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80082f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f2:	3301      	adds	r3, #1
 80082f4:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80082f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	021a      	lsls	r2, r3, #8
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008304:	3301      	adds	r3, #1
 8008306:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	041a      	lsls	r2, r3, #16
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	4313      	orrs	r3, r2
 8008312:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008316:	3301      	adds	r3, #1
 8008318:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800831a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	061a      	lsls	r2, r3, #24
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	4313      	orrs	r3, r2
 8008324:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008328:	3301      	adds	r3, #1
 800832a:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f107 0214 	add.w	r2, r7, #20
 8008334:	4611      	mov	r1, r2
 8008336:	4618      	mov	r0, r3
 8008338:	f001 fdff 	bl	8009f3a <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800833c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800833e:	3301      	adds	r3, #1
 8008340:	643b      	str	r3, [r7, #64]	@ 0x40
 8008342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008344:	2b07      	cmp	r3, #7
 8008346:	d9d0      	bls.n	80082ea <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800834a:	3b20      	subs	r3, #32
 800834c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800834e:	f7f8 fb25 	bl	800099c <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800835a:	429a      	cmp	r2, r3
 800835c:	d902      	bls.n	8008364 <HAL_SD_WriteBlocks+0x1b4>
 800835e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008360:	2b00      	cmp	r3, #0
 8008362:	d112      	bne.n	800838a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a56      	ldr	r2, [pc, #344]	@ (80084c4 <HAL_SD_WriteBlocks+0x314>)
 800836a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008372:	431a      	orrs	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e097      	b.n	80084ba <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008390:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8008394:	2b00      	cmp	r3, #0
 8008396:	d09b      	beq.n	80082d0 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083a6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d022      	beq.n	80083fc <HAL_SD_WriteBlocks+0x24c>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d91f      	bls.n	80083fc <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d01b      	beq.n	80083fc <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 ff0d 	bl	800a1e8 <SDMMC_CmdStopTransfer>
 80083ce:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80083d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d012      	beq.n	80083fc <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a3a      	ldr	r2, [pc, #232]	@ (80084c4 <HAL_SD_WriteBlocks+0x314>)
 80083dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083e4:	431a      	orrs	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e05e      	b.n	80084ba <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008402:	f003 0308 	and.w	r3, r3, #8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d012      	beq.n	8008430 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a2d      	ldr	r2, [pc, #180]	@ (80084c4 <HAL_SD_WriteBlocks+0x314>)
 8008410:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008416:	f043 0208 	orr.w	r2, r3, #8
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e044      	b.n	80084ba <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008436:	f003 0302 	and.w	r3, r3, #2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d012      	beq.n	8008464 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a20      	ldr	r2, [pc, #128]	@ (80084c4 <HAL_SD_WriteBlocks+0x314>)
 8008444:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800844a:	f043 0202 	orr.w	r2, r3, #2
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e02a      	b.n	80084ba <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800846a:	f003 0310 	and.w	r3, r3, #16
 800846e:	2b00      	cmp	r3, #0
 8008470:	d012      	beq.n	8008498 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a13      	ldr	r2, [pc, #76]	@ (80084c4 <HAL_SD_WriteBlocks+0x314>)
 8008478:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800847e:	f043 0210 	orr.w	r2, r3, #16
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e010      	b.n	80084ba <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a0a      	ldr	r2, [pc, #40]	@ (80084c8 <HAL_SD_WriteBlocks+0x318>)
 800849e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	e006      	b.n	80084ba <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
  }
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3748      	adds	r7, #72	@ 0x48
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	1fe00fff 	.word	0x1fe00fff
 80084c8:	18000f3a 	.word	0x18000f3a

080084cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084da:	0f9b      	lsrs	r3, r3, #30
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084e6:	0e9b      	lsrs	r3, r3, #26
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	f003 030f 	and.w	r3, r3, #15
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084f8:	0e1b      	lsrs	r3, r3, #24
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	f003 0303 	and.w	r3, r3, #3
 8008500:	b2da      	uxtb	r2, r3
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800850a:	0c1b      	lsrs	r3, r3, #16
 800850c:	b2da      	uxtb	r2, r3
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008516:	0a1b      	lsrs	r3, r3, #8
 8008518:	b2da      	uxtb	r2, r3
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008522:	b2da      	uxtb	r2, r3
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800852c:	0d1b      	lsrs	r3, r3, #20
 800852e:	b29a      	uxth	r2, r3
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008538:	0c1b      	lsrs	r3, r3, #16
 800853a:	b2db      	uxtb	r3, r3
 800853c:	f003 030f 	and.w	r3, r3, #15
 8008540:	b2da      	uxtb	r2, r3
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800854a:	0bdb      	lsrs	r3, r3, #15
 800854c:	b2db      	uxtb	r3, r3
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	b2da      	uxtb	r2, r3
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800855c:	0b9b      	lsrs	r3, r3, #14
 800855e:	b2db      	uxtb	r3, r3
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	b2da      	uxtb	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800856e:	0b5b      	lsrs	r3, r3, #13
 8008570:	b2db      	uxtb	r3, r3
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	b2da      	uxtb	r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008580:	0b1b      	lsrs	r3, r3, #12
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	b2da      	uxtb	r2, r3
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2200      	movs	r2, #0
 8008592:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008598:	2b00      	cmp	r3, #0
 800859a:	d163      	bne.n	8008664 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085a0:	009a      	lsls	r2, r3, #2
 80085a2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80085a6:	4013      	ands	r3, r2
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80085ac:	0f92      	lsrs	r2, r2, #30
 80085ae:	431a      	orrs	r2, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085b8:	0edb      	lsrs	r3, r3, #27
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	f003 0307 	and.w	r3, r3, #7
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085ca:	0e1b      	lsrs	r3, r3, #24
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085dc:	0d5b      	lsrs	r3, r3, #21
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	f003 0307 	and.w	r3, r3, #7
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085ee:	0c9b      	lsrs	r3, r3, #18
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	f003 0307 	and.w	r3, r3, #7
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008600:	0bdb      	lsrs	r3, r3, #15
 8008602:	b2db      	uxtb	r3, r3
 8008604:	f003 0307 	and.w	r3, r3, #7
 8008608:	b2da      	uxtb	r2, r3
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	1c5a      	adds	r2, r3, #1
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	7e1b      	ldrb	r3, [r3, #24]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	3302      	adds	r3, #2
 8008624:	2201      	movs	r2, #1
 8008626:	fa02 f303 	lsl.w	r3, r2, r3
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800862e:	fb03 f202 	mul.w	r2, r3, r2
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	7a1b      	ldrb	r3, [r3, #8]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	f003 030f 	and.w	r3, r3, #15
 8008640:	2201      	movs	r2, #1
 8008642:	409a      	lsls	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008650:	0a52      	lsrs	r2, r2, #9
 8008652:	fb03 f202 	mul.w	r2, r3, r2
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008660:	655a      	str	r2, [r3, #84]	@ 0x54
 8008662:	e031      	b.n	80086c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008668:	2b01      	cmp	r3, #1
 800866a:	d11d      	bne.n	80086a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008670:	041b      	lsls	r3, r3, #16
 8008672:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800867a:	0c1b      	lsrs	r3, r3, #16
 800867c:	431a      	orrs	r2, r3
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	3301      	adds	r3, #1
 8008688:	029a      	lsls	r2, r3, #10
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800869c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	655a      	str	r2, [r3, #84]	@ 0x54
 80086a6:	e00f      	b.n	80086c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a58      	ldr	r2, [pc, #352]	@ (8008810 <HAL_SD_GetCardCSD+0x344>)
 80086ae:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e09d      	b.n	8008804 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086cc:	0b9b      	lsrs	r3, r3, #14
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086de:	09db      	lsrs	r3, r3, #7
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086f6:	b2da      	uxtb	r2, r3
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008700:	0fdb      	lsrs	r3, r3, #31
 8008702:	b2da      	uxtb	r2, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800870c:	0f5b      	lsrs	r3, r3, #29
 800870e:	b2db      	uxtb	r3, r3
 8008710:	f003 0303 	and.w	r3, r3, #3
 8008714:	b2da      	uxtb	r2, r3
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800871e:	0e9b      	lsrs	r3, r3, #26
 8008720:	b2db      	uxtb	r3, r3
 8008722:	f003 0307 	and.w	r3, r3, #7
 8008726:	b2da      	uxtb	r2, r3
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008730:	0d9b      	lsrs	r3, r3, #22
 8008732:	b2db      	uxtb	r3, r3
 8008734:	f003 030f 	and.w	r3, r3, #15
 8008738:	b2da      	uxtb	r2, r3
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008742:	0d5b      	lsrs	r3, r3, #21
 8008744:	b2db      	uxtb	r3, r3
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	b2da      	uxtb	r2, r3
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800875e:	0c1b      	lsrs	r3, r3, #16
 8008760:	b2db      	uxtb	r3, r3
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	b2da      	uxtb	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008772:	0bdb      	lsrs	r3, r3, #15
 8008774:	b2db      	uxtb	r3, r3
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	b2da      	uxtb	r2, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008786:	0b9b      	lsrs	r3, r3, #14
 8008788:	b2db      	uxtb	r3, r3
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	b2da      	uxtb	r2, r3
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800879a:	0b5b      	lsrs	r3, r3, #13
 800879c:	b2db      	uxtb	r3, r3
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087ae:	0b1b      	lsrs	r3, r3, #12
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087c2:	0a9b      	lsrs	r3, r3, #10
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087d6:	0a1b      	lsrs	r3, r3, #8
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f003 0303 	and.w	r3, r3, #3
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087ea:	085b      	lsrs	r3, r3, #1
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	1fe00fff 	.word	0x1fe00fff

08008814 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b094      	sub	sp, #80	@ 0x50
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b03      	cmp	r3, #3
 800882e:	d101      	bne.n	8008834 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e0a7      	b.n	8008984 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008834:	f107 0308 	add.w	r3, r7, #8
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fc1e 	bl	800907c <SD_SendSDStatus>
 8008840:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008844:	2b00      	cmp	r3, #0
 8008846:	d011      	beq.n	800886c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a4f      	ldr	r2, [pc, #316]	@ (800898c <HAL_SD_GetCardStatus+0x178>)
 800884e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800886a:	e070      	b.n	800894e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	099b      	lsrs	r3, r3, #6
 8008870:	b2db      	uxtb	r3, r3
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	b2da      	uxtb	r2, r3
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	095b      	lsrs	r3, r3, #5
 8008880:	b2db      	uxtb	r3, r3
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	b2da      	uxtb	r2, r3
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	0a1b      	lsrs	r3, r3, #8
 8008890:	b29b      	uxth	r3, r3
 8008892:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008896:	b29a      	uxth	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	0e1b      	lsrs	r3, r3, #24
 800889c:	b29b      	uxth	r3, r3
 800889e:	4313      	orrs	r3, r2
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	061a      	lsls	r2, r3, #24
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	021b      	lsls	r3, r3, #8
 80088ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80088b2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	0a1b      	lsrs	r3, r3, #8
 80088b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80088bc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	0e1b      	lsrs	r3, r3, #24
 80088c2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	0d1b      	lsrs	r3, r3, #20
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	f003 030f 	and.w	r3, r3, #15
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	0c1b      	lsrs	r3, r3, #16
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	4313      	orrs	r3, r2
 8008900:	b29a      	uxth	r2, r3
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	0a9b      	lsrs	r3, r3, #10
 800890a:	b2db      	uxtb	r3, r3
 800890c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008910:	b2da      	uxtb	r2, r3
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	0a1b      	lsrs	r3, r3, #8
 800891a:	b2db      	uxtb	r3, r3
 800891c:	f003 0303 	and.w	r3, r3, #3
 8008920:	b2da      	uxtb	r2, r3
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	091b      	lsrs	r3, r3, #4
 800892a:	b2db      	uxtb	r3, r3
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	b2da      	uxtb	r2, r3
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	b2db      	uxtb	r3, r3
 800893a:	f003 030f 	and.w	r3, r3, #15
 800893e:	b2da      	uxtb	r2, r3
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	0e1b      	lsrs	r3, r3, #24
 8008948:	b2da      	uxtb	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008956:	4618      	mov	r0, r3
 8008958:	f001 fb96 	bl	800a088 <SDMMC_CmdBlockLength>
 800895c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800895e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00d      	beq.n	8008980 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a08      	ldr	r2, [pc, #32]	@ (800898c <HAL_SD_GetCardStatus+0x178>)
 800896a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008970:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8008980:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8008984:	4618      	mov	r0, r3
 8008986:	3750      	adds	r7, #80	@ 0x50
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	1fe00fff 	.word	0x1fe00fff

08008990 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80089e8:	b590      	push	{r4, r7, lr}
 80089ea:	b08d      	sub	sp, #52	@ 0x34
 80089ec:	af02      	add	r7, sp, #8
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2203      	movs	r2, #3
 80089fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	d02e      	beq.n	8008a66 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a0e:	d106      	bne.n	8008a1e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a1c:	e029      	b.n	8008a72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a24:	d10a      	bne.n	8008a3c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fc20 	bl	800926c <SD_WideBus_Enable>
 8008a2c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	431a      	orrs	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a3a:	e01a      	b.n	8008a72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10a      	bne.n	8008a58 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fc5d 	bl	8009302 <SD_WideBus_Disable>
 8008a48:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a56:	e00c      	b.n	8008a72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a5c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	635a      	str	r2, [r3, #52]	@ 0x34
 8008a64:	e005      	b.n	8008a72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a6a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d007      	beq.n	8008a8a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a5f      	ldr	r2, [pc, #380]	@ (8008bfc <HAL_SD_ConfigWideBusOperation+0x214>)
 8008a80:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a88:	e096      	b.n	8008bb8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008a8a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008a8e:	f04f 0100 	mov.w	r1, #0
 8008a92:	f7fd fac3 	bl	800601c <HAL_RCCEx_GetPeriphCLKFreq>
 8008a96:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 8083 	beq.w	8008ba6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	695a      	ldr	r2, [r3, #20]
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	4950      	ldr	r1, [pc, #320]	@ (8008c00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008abe:	fba1 1303 	umull	r1, r3, r1, r3
 8008ac2:	0e1b      	lsrs	r3, r3, #24
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d303      	bcc.n	8008ad0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	695b      	ldr	r3, [r3, #20]
 8008acc:	61bb      	str	r3, [r7, #24]
 8008ace:	e05a      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ad8:	d103      	bne.n	8008ae2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	61bb      	str	r3, [r7, #24]
 8008ae0:	e051      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aea:	d126      	bne.n	8008b3a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10e      	bne.n	8008b12 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	4a43      	ldr	r2, [pc, #268]	@ (8008c04 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d906      	bls.n	8008b0a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	4a40      	ldr	r2, [pc, #256]	@ (8008c00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b00:	fba2 2303 	umull	r2, r3, r2, r3
 8008b04:	0e5b      	lsrs	r3, r3, #25
 8008b06:	61bb      	str	r3, [r7, #24]
 8008b08:	e03d      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	61bb      	str	r3, [r7, #24]
 8008b10:	e039      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	69fa      	ldr	r2, [r7, #28]
 8008b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b1e:	4a39      	ldr	r2, [pc, #228]	@ (8008c04 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d906      	bls.n	8008b32 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	4a36      	ldr	r2, [pc, #216]	@ (8008c00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b28:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2c:	0e5b      	lsrs	r3, r3, #25
 8008b2e:	61bb      	str	r3, [r7, #24]
 8008b30:	e029      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	61bb      	str	r3, [r7, #24]
 8008b38:	e025      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10e      	bne.n	8008b60 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	4a30      	ldr	r2, [pc, #192]	@ (8008c08 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d906      	bls.n	8008b58 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8008c00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b52:	0e1b      	lsrs	r3, r3, #24
 8008b54:	61bb      	str	r3, [r7, #24]
 8008b56:	e016      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	61bb      	str	r3, [r7, #24]
 8008b5e:	e012      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	69fa      	ldr	r2, [r7, #28]
 8008b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b6c:	4a26      	ldr	r2, [pc, #152]	@ (8008c08 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d906      	bls.n	8008b80 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4a22      	ldr	r2, [pc, #136]	@ (8008c00 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008b76:	fba2 2303 	umull	r2, r3, r2, r3
 8008b7a:	0e1b      	lsrs	r3, r3, #24
 8008b7c:	61bb      	str	r3, [r7, #24]
 8008b7e:	e002      	b.n	8008b86 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681c      	ldr	r4, [r3, #0]
 8008b8a:	466a      	mov	r2, sp
 8008b8c:	f107 0314 	add.w	r3, r7, #20
 8008b90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b94:	e882 0003 	stmia.w	r2, {r0, r1}
 8008b98:	f107 0308 	add.w	r3, r7, #8
 8008b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f001 f994 	bl	8009ecc <SDMMC_Init>
 8008ba4:	e008      	b.n	8008bb8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008baa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f001 fa61 	bl	800a088 <SDMMC_CmdBlockLength>
 8008bc6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bc8:	6a3b      	ldr	r3, [r7, #32]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00c      	beq.n	8008be8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8008bfc <HAL_SD_ConfigWideBusOperation+0x214>)
 8008bd4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	431a      	orrs	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	372c      	adds	r7, #44	@ 0x2c
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd90      	pop	{r4, r7, pc}
 8008bfc:	1fe00fff 	.word	0x1fe00fff
 8008c00:	55e63b89 	.word	0x55e63b89
 8008c04:	02faf080 	.word	0x02faf080
 8008c08:	017d7840 	.word	0x017d7840

08008c0c <HAL_SD_ConfigSpeedBusOperation>:
  *            @arg SDMMC_SPEED_MODE_ULTRA: Ultra high speed mode
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_SD_ConfigSpeedBusOperation(SD_HandleTypeDef *hsd, uint32_t SpeedMode)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SDMMC_SPEED_MODE(SpeedMode));
  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2203      	movs	r2, #3
 8008c1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        status = HAL_ERROR;
        break;
    }
  }
#else
  switch (SpeedMode)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d027      	beq.n	8008c78 <HAL_SD_ConfigSpeedBusOperation+0x6c>
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d85c      	bhi.n	8008ce8 <HAL_SD_ConfigSpeedBusOperation+0xdc>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d003      	beq.n	8008c3c <HAL_SD_ConfigSpeedBusOperation+0x30>
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d046      	beq.n	8008cc8 <HAL_SD_ConfigSpeedBusOperation+0xbc>
 8008c3a:	e055      	b.n	8008ce8 <HAL_SD_ConfigSpeedBusOperation+0xdc>
  {
    case SDMMC_SPEED_MODE_AUTO:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c44:	d008      	beq.n	8008c58 <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008c4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c4e:	d003      	beq.n	8008c58 <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d150      	bne.n	8008cfa <HAL_SD_ConfigSpeedBusOperation+0xee>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008c58:	4947      	ldr	r1, [pc, #284]	@ (8008d78 <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fc6c 	bl	8009538 <SD_SwitchSpeed>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d049      	beq.n	8008cfa <HAL_SD_ConfigSpeedBusOperation+0xee>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c6a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	75fb      	strb	r3, [r7, #23]
      }
      else
      {
        /*Nothing to do, Use defaultSpeed */
      }
      break;
 8008c76:	e040      	b.n	8008cfa <HAL_SD_ConfigSpeedBusOperation+0xee>
    }
    case SDMMC_SPEED_MODE_HIGH:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c80:	d008      	beq.n	8008c94 <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c8a:	d003      	beq.n	8008c94 <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d10f      	bne.n	8008cb4 <HAL_SD_ConfigSpeedBusOperation+0xa8>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008c94:	4938      	ldr	r1, [pc, #224]	@ (8008d78 <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fc4e 	bl	8009538 <SD_SwitchSpeed>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d011      	beq.n	8008cc6 <HAL_SD_ConfigSpeedBusOperation+0xba>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ca6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	75fb      	strb	r3, [r7, #23]
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008cb2:	e008      	b.n	8008cc6 <HAL_SD_ConfigSpeedBusOperation+0xba>
        }
      }
      else
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008cc4:	e01c      	b.n	8008d00 <HAL_SD_ConfigSpeedBusOperation+0xf4>
 8008cc6:	e01b      	b.n	8008d00 <HAL_SD_ConfigSpeedBusOperation+0xf4>
    }
    case SDMMC_SPEED_MODE_DEFAULT:
    {
      /* Switch to default Speed */
      if (SD_SwitchSpeed(hsd, SDMMC_SDR12_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008cc8:	492c      	ldr	r1, [pc, #176]	@ (8008d7c <HAL_SD_ConfigSpeedBusOperation+0x170>)
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fc34 	bl	8009538 <SD_SwitchSpeed>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d013      	beq.n	8008cfe <HAL_SD_ConfigSpeedBusOperation+0xf2>
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cda:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	75fb      	strb	r3, [r7, #23]
      }

      break;
 8008ce6:	e00a      	b.n	8008cfe <HAL_SD_ConfigSpeedBusOperation+0xf2>
    }
    case SDMMC_SPEED_MODE_ULTRA: /*not valid without transceiver*/
    default:
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8008cf8:	e002      	b.n	8008d00 <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 8008cfa:	bf00      	nop
 8008cfc:	e000      	b.n	8008d00 <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 8008cfe:	bf00      	nop
  }
#endif /* USE_SD_TRANSCEIVER */

  /* Verify that SD card is ready to use after Speed mode switch*/
  tickstart = HAL_GetTick();
 8008d00:	f7f7 fe4c 	bl	800099c <HAL_GetTick>
 8008d04:	6138      	str	r0, [r7, #16]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008d06:	e011      	b.n	8008d2c <HAL_SD_ConfigSpeedBusOperation+0x120>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d08:	f7f7 fe48 	bl	800099c <HAL_GetTick>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d16:	d109      	bne.n	8008d2c <HAL_SD_ConfigSpeedBusOperation+0x120>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008d1e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e021      	b.n	8008d70 <HAL_SD_ConfigSpeedBusOperation+0x164>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f829 	bl	8008d84 <HAL_SD_GetCardState>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b04      	cmp	r3, #4
 8008d36:	d1e7      	bne.n	8008d08 <HAL_SD_ConfigSpeedBusOperation+0xfc>
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 f9a1 	bl	800a088 <SDMMC_CmdBlockLength>
 8008d46:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00b      	beq.n	8008d66 <HAL_SD_ConfigSpeedBusOperation+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a0b      	ldr	r2, [pc, #44]	@ (8008d80 <HAL_SD_ConfigSpeedBusOperation+0x174>)
 8008d54:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	75fb      	strb	r3, [r7, #23]
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  return status;
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	80ffff01 	.word	0x80ffff01
 8008d7c:	80ffff00 	.word	0x80ffff00
 8008d80:	1fe00fff 	.word	0x1fe00fff

08008d84 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008d90:	f107 030c 	add.w	r3, r7, #12
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fa40 	bl	800921c <SD_SendStatus>
 8008d9c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	0a5b      	lsrs	r3, r3, #9
 8008db4:	f003 030f 	and.w	r3, r3, #15
 8008db8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008dba:	693b      	ldr	r3, [r7, #16]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b090      	sub	sp, #64	@ 0x40
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008dd0:	f7f7 fde4 	bl	800099c <HAL_GetTick>
 8008dd4:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f001 f8cf 	bl	8009f7e <SDMMC_GetPowerState>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008de6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008dea:	e0b5      	b.n	8008f58 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df0:	2b03      	cmp	r3, #3
 8008df2:	d02e      	beq.n	8008e52 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f001 fb1a 	bl	800a432 <SDMMC_CmdSendCID>
 8008dfe:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <SD_InitCard+0x46>
    {
      return errorstate;
 8008e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e08:	e0a6      	b.n	8008f58 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2100      	movs	r1, #0
 8008e10:	4618      	mov	r0, r3
 8008e12:	f001 f8fa 	bl	800a00a <SDMMC_GetResponse>
 8008e16:	4602      	mov	r2, r0
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2104      	movs	r1, #4
 8008e22:	4618      	mov	r0, r3
 8008e24:	f001 f8f1 	bl	800a00a <SDMMC_GetResponse>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2108      	movs	r1, #8
 8008e34:	4618      	mov	r0, r3
 8008e36:	f001 f8e8 	bl	800a00a <SDMMC_GetResponse>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	210c      	movs	r1, #12
 8008e46:	4618      	mov	r0, r3
 8008e48:	f001 f8df 	bl	800a00a <SDMMC_GetResponse>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d01d      	beq.n	8008e96 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008e5a:	e019      	b.n	8008e90 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f107 020a 	add.w	r2, r7, #10
 8008e64:	4611      	mov	r1, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f001 fb22 	bl	800a4b0 <SDMMC_CmdSetRelAdd>
 8008e6c:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e76:	e06f      	b.n	8008f58 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008e78:	f7f7 fd90 	bl	800099c <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	f241 3287 	movw	r2, #4999	@ 0x1387
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d902      	bls.n	8008e90 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008e8a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008e8e:	e063      	b.n	8008f58 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008e90:	897b      	ldrh	r3, [r7, #10]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0e2      	beq.n	8008e5c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d036      	beq.n	8008f0c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008e9e:	897b      	ldrh	r3, [r7, #10]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eae:	041b      	lsls	r3, r3, #16
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	4610      	mov	r0, r2
 8008eb4:	f001 fadc 	bl	800a470 <SDMMC_CmdSendCSD>
 8008eb8:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <SD_InitCard+0x100>
    {
      return errorstate;
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec2:	e049      	b.n	8008f58 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f001 f89d 	bl	800a00a <SDMMC_GetResponse>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2104      	movs	r1, #4
 8008edc:	4618      	mov	r0, r3
 8008ede:	f001 f894 	bl	800a00a <SDMMC_GetResponse>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2108      	movs	r1, #8
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f001 f88b 	bl	800a00a <SDMMC_GetResponse>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	210c      	movs	r1, #12
 8008f00:	4618      	mov	r0, r3
 8008f02:	f001 f882 	bl	800a00a <SDMMC_GetResponse>
 8008f06:	4602      	mov	r2, r0
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2104      	movs	r1, #4
 8008f12:	4618      	mov	r0, r3
 8008f14:	f001 f879 	bl	800a00a <SDMMC_GetResponse>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	0d1a      	lsrs	r2, r3, #20
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008f20:	f107 030c 	add.w	r3, r7, #12
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7ff fad0 	bl	80084cc <HAL_SD_GetCardCSD>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d002      	beq.n	8008f38 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f32:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008f36:	e00f      	b.n	8008f58 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f40:	041b      	lsls	r3, r3, #16
 8008f42:	4619      	mov	r1, r3
 8008f44:	4610      	mov	r0, r2
 8008f46:	f001 f98b 	bl	800a260 <SDMMC_CmdSelDesel>
 8008f4a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <SD_InitCard+0x192>
  {
    return errorstate;
 8008f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f54:	e000      	b.n	8008f58 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3740      	adds	r7, #64	@ 0x40
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f001 f994 	bl	800a2a6 <SDMMC_CmdGoIdleState>
 8008f7e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	e072      	b.n	8009070 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f001 f9a7 	bl	800a2e2 <SDMMC_CmdOperCond>
 8008f94:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f9c:	d10d      	bne.n	8008fba <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f001 f97c 	bl	800a2a6 <SDMMC_CmdGoIdleState>
 8008fae:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d004      	beq.n	8008fc0 <SD_PowerON+0x60>
    {
      return errorstate;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	e05a      	b.n	8009070 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d137      	bne.n	8009038 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2100      	movs	r1, #0
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 f9a7 	bl	800a322 <SDMMC_CmdAppCommand>
 8008fd4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d02d      	beq.n	8009038 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fdc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008fe0:	e046      	b.n	8009070 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f001 f99a 	bl	800a322 <SDMMC_CmdAppCommand>
 8008fee:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d001      	beq.n	8008ffa <SD_PowerON+0x9a>
    {
      return errorstate;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	e03a      	b.n	8009070 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	491e      	ldr	r1, [pc, #120]	@ (8009078 <SD_PowerON+0x118>)
 8009000:	4618      	mov	r0, r3
 8009002:	f001 f9b1 	bl	800a368 <SDMMC_CmdAppOperCommand>
 8009006:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d002      	beq.n	8009014 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800900e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009012:	e02d      	b.n	8009070 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2100      	movs	r1, #0
 800901a:	4618      	mov	r0, r3
 800901c:	f000 fff5 	bl	800a00a <SDMMC_GetResponse>
 8009020:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	0fdb      	lsrs	r3, r3, #31
 8009026:	2b01      	cmp	r3, #1
 8009028:	d101      	bne.n	800902e <SD_PowerON+0xce>
 800902a:	2301      	movs	r3, #1
 800902c:	e000      	b.n	8009030 <SD_PowerON+0xd0>
 800902e:	2300      	movs	r3, #0
 8009030:	613b      	str	r3, [r7, #16]

    count++;
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	3301      	adds	r3, #1
 8009036:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800903e:	4293      	cmp	r3, r2
 8009040:	d802      	bhi.n	8009048 <SD_PowerON+0xe8>
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d0cc      	beq.n	8008fe2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800904e:	4293      	cmp	r3, r2
 8009050:	d902      	bls.n	8009058 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009052:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009056:	e00b      	b.n	8009070 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d002      	beq.n	800906e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	c1100000 	.word	0xc1100000

0800907c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08c      	sub	sp, #48	@ 0x30
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009086:	f7f7 fc89 	bl	800099c <HAL_GetTick>
 800908a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2100      	movs	r1, #0
 8009096:	4618      	mov	r0, r3
 8009098:	f000 ffb7 	bl	800a00a <SDMMC_GetResponse>
 800909c:	4603      	mov	r3, r0
 800909e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090a6:	d102      	bne.n	80090ae <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80090ac:	e0b0      	b.n	8009210 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2140      	movs	r1, #64	@ 0x40
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 ffe7 	bl	800a088 <SDMMC_CmdBlockLength>
 80090ba:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d005      	beq.n	80090ce <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80090ca:	6a3b      	ldr	r3, [r7, #32]
 80090cc:	e0a0      	b.n	8009210 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090d6:	041b      	lsls	r3, r3, #16
 80090d8:	4619      	mov	r1, r3
 80090da:	4610      	mov	r0, r2
 80090dc:	f001 f921 	bl	800a322 <SDMMC_CmdAppCommand>
 80090e0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d005      	beq.n	80090f4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	e08d      	b.n	8009210 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090f4:	f04f 33ff 	mov.w	r3, #4294967295
 80090f8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80090fa:	2340      	movs	r3, #64	@ 0x40
 80090fc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80090fe:	2360      	movs	r3, #96	@ 0x60
 8009100:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009102:	2302      	movs	r3, #2
 8009104:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009106:	2300      	movs	r3, #0
 8009108:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800910a:	2301      	movs	r3, #1
 800910c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f107 0208 	add.w	r2, r7, #8
 8009116:	4611      	mov	r1, r2
 8009118:	4618      	mov	r0, r3
 800911a:	f000 ff89 	bl	800a030 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4618      	mov	r0, r3
 8009124:	f001 fa09 	bl	800a53a <SDMMC_CmdStatusRegister>
 8009128:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d02b      	beq.n	8009188 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	e069      	b.n	8009210 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009142:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d013      	beq.n	8009172 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800914a:	2300      	movs	r3, #0
 800914c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800914e:	e00d      	b.n	800916c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4618      	mov	r0, r3
 8009156:	f000 fee3 	bl	8009f20 <SDMMC_ReadFIFO>
 800915a:	4602      	mov	r2, r0
 800915c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915e:	601a      	str	r2, [r3, #0]
        pData++;
 8009160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009162:	3304      	adds	r3, #4
 8009164:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009168:	3301      	adds	r3, #1
 800916a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800916c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800916e:	2b07      	cmp	r3, #7
 8009170:	d9ee      	bls.n	8009150 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009172:	f7f7 fc13 	bl	800099c <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009180:	d102      	bne.n	8009188 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009182:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009186:	e043      	b.n	8009210 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800918e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0d2      	beq.n	800913c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800919c:	f003 0308 	and.w	r3, r3, #8
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80091a4:	2308      	movs	r3, #8
 80091a6:	e033      	b.n	8009210 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80091b6:	2302      	movs	r3, #2
 80091b8:	e02a      	b.n	8009210 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091c0:	f003 0320 	and.w	r3, r3, #32
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d017      	beq.n	80091f8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80091c8:	2320      	movs	r3, #32
 80091ca:	e021      	b.n	8009210 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fea5 	bl	8009f20 <SDMMC_ReadFIFO>
 80091d6:	4602      	mov	r2, r0
 80091d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091da:	601a      	str	r2, [r3, #0]
    pData++;
 80091dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091de:	3304      	adds	r3, #4
 80091e0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80091e2:	f7f7 fbdb 	bl	800099c <HAL_GetTick>
 80091e6:	4602      	mov	r2, r0
 80091e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f0:	d102      	bne.n	80091f8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80091f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80091f6:	e00b      	b.n	8009210 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e2      	bne.n	80091cc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a03      	ldr	r2, [pc, #12]	@ (8009218 <SD_SendSDStatus+0x19c>)
 800920c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3730      	adds	r7, #48	@ 0x30
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	18000f3a 	.word	0x18000f3a

0800921c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d102      	bne.n	8009232 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800922c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009230:	e018      	b.n	8009264 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800923a:	041b      	lsls	r3, r3, #16
 800923c:	4619      	mov	r1, r3
 800923e:	4610      	mov	r0, r2
 8009240:	f001 f958 	bl	800a4f4 <SDMMC_CmdSendStatus>
 8009244:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <SD_SendStatus+0x34>
  {
    return errorstate;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	e009      	b.n	8009264 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2100      	movs	r1, #0
 8009256:	4618      	mov	r0, r3
 8009258:	f000 fed7 	bl	800a00a <SDMMC_GetResponse>
 800925c:	4602      	mov	r2, r0
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009274:	2300      	movs	r3, #0
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	2300      	movs	r3, #0
 800927a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2100      	movs	r1, #0
 8009282:	4618      	mov	r0, r3
 8009284:	f000 fec1 	bl	800a00a <SDMMC_GetResponse>
 8009288:	4603      	mov	r3, r0
 800928a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800928e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009292:	d102      	bne.n	800929a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009294:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009298:	e02f      	b.n	80092fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800929a:	f107 030c 	add.w	r3, r7, #12
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f879 	bl	8009398 <SD_FindSCR>
 80092a6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	e023      	b.n	80092fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d01c      	beq.n	80092f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092c4:	041b      	lsls	r3, r3, #16
 80092c6:	4619      	mov	r1, r3
 80092c8:	4610      	mov	r0, r2
 80092ca:	f001 f82a 	bl	800a322 <SDMMC_CmdAppCommand>
 80092ce:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	e00f      	b.n	80092fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2102      	movs	r1, #2
 80092e0:	4618      	mov	r0, r3
 80092e2:	f001 f861 	bl	800a3a8 <SDMMC_CmdBusWidth>
 80092e6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	e003      	b.n	80092fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80092f2:	2300      	movs	r3, #0
 80092f4:	e001      	b.n	80092fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80092f6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b086      	sub	sp, #24
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800930a:	2300      	movs	r3, #0
 800930c:	60fb      	str	r3, [r7, #12]
 800930e:	2300      	movs	r3, #0
 8009310:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2100      	movs	r1, #0
 8009318:	4618      	mov	r0, r3
 800931a:	f000 fe76 	bl	800a00a <SDMMC_GetResponse>
 800931e:	4603      	mov	r3, r0
 8009320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009324:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009328:	d102      	bne.n	8009330 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800932a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800932e:	e02f      	b.n	8009390 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009330:	f107 030c 	add.w	r3, r7, #12
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f82e 	bl	8009398 <SD_FindSCR>
 800933c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	e023      	b.n	8009390 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d01c      	beq.n	800938c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800935a:	041b      	lsls	r3, r3, #16
 800935c:	4619      	mov	r1, r3
 800935e:	4610      	mov	r0, r2
 8009360:	f000 ffdf 	bl	800a322 <SDMMC_CmdAppCommand>
 8009364:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d001      	beq.n	8009370 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	e00f      	b.n	8009390 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2100      	movs	r1, #0
 8009376:	4618      	mov	r0, r3
 8009378:	f001 f816 	bl	800a3a8 <SDMMC_CmdBusWidth>
 800937c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	e003      	b.n	8009390 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009388:	2300      	movs	r3, #0
 800938a:	e001      	b.n	8009390 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800938c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08e      	sub	sp, #56	@ 0x38
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80093a2:	f7f7 fafb 	bl	800099c <HAL_GetTick>
 80093a6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80093a8:	2300      	movs	r3, #0
 80093aa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80093ac:	2300      	movs	r3, #0
 80093ae:	60bb      	str	r3, [r7, #8]
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2108      	movs	r1, #8
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 fe62 	bl	800a088 <SDMMC_CmdBlockLength>
 80093c4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80093c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d001      	beq.n	80093d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80093cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ce:	e0ad      	b.n	800952c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093d8:	041b      	lsls	r3, r3, #16
 80093da:	4619      	mov	r1, r3
 80093dc:	4610      	mov	r0, r2
 80093de:	f000 ffa0 	bl	800a322 <SDMMC_CmdAppCommand>
 80093e2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80093e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <SD_FindSCR+0x56>
  {
    return errorstate;
 80093ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ec:	e09e      	b.n	800952c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093ee:	f04f 33ff 	mov.w	r3, #4294967295
 80093f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80093f4:	2308      	movs	r3, #8
 80093f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80093f8:	2330      	movs	r3, #48	@ 0x30
 80093fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80093fc:	2302      	movs	r3, #2
 80093fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009400:	2300      	movs	r3, #0
 8009402:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009404:	2301      	movs	r3, #1
 8009406:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f107 0210 	add.w	r2, r7, #16
 8009410:	4611      	mov	r1, r2
 8009412:	4618      	mov	r0, r3
 8009414:	f000 fe0c 	bl	800a030 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4618      	mov	r0, r3
 800941e:	f000 ffe6 	bl	800a3ee <SDMMC_CmdSendSCR>
 8009422:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009426:	2b00      	cmp	r3, #0
 8009428:	d027      	beq.n	800947a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800942a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942c:	e07e      	b.n	800952c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009434:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009438:	2b00      	cmp	r3, #0
 800943a:	d113      	bne.n	8009464 <SD_FindSCR+0xcc>
 800943c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800943e:	2b00      	cmp	r3, #0
 8009440:	d110      	bne.n	8009464 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fd6a 	bl	8009f20 <SDMMC_ReadFIFO>
 800944c:	4603      	mov	r3, r0
 800944e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4618      	mov	r0, r3
 8009456:	f000 fd63 	bl	8009f20 <SDMMC_ReadFIFO>
 800945a:	4603      	mov	r3, r0
 800945c:	60fb      	str	r3, [r7, #12]
      index++;
 800945e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009460:	3301      	adds	r3, #1
 8009462:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009464:	f7f7 fa9a 	bl	800099c <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009472:	d102      	bne.n	800947a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009474:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009478:	e058      	b.n	800952c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009480:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009484:	4013      	ands	r3, r2
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0d1      	beq.n	800942e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009490:	f003 0308 	and.w	r3, r3, #8
 8009494:	2b00      	cmp	r3, #0
 8009496:	d005      	beq.n	80094a4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2208      	movs	r2, #8
 800949e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094a0:	2308      	movs	r3, #8
 80094a2:	e043      	b.n	800952c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094aa:	f003 0302 	and.w	r3, r3, #2
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2202      	movs	r2, #2
 80094b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094ba:	2302      	movs	r3, #2
 80094bc:	e036      	b.n	800952c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094c4:	f003 0320 	and.w	r3, r3, #32
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d005      	beq.n	80094d8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2220      	movs	r2, #32
 80094d2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80094d4:	2320      	movs	r3, #32
 80094d6:	e029      	b.n	800952c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a15      	ldr	r2, [pc, #84]	@ (8009534 <SD_FindSCR+0x19c>)
 80094de:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	061a      	lsls	r2, r3, #24
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	021b      	lsls	r3, r3, #8
 80094e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80094ec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	0a1b      	lsrs	r3, r3, #8
 80094f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80094f6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	0e1b      	lsrs	r3, r3, #24
 80094fc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80094fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009500:	601a      	str	r2, [r3, #0]
    scr++;
 8009502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009504:	3304      	adds	r3, #4
 8009506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	061a      	lsls	r2, r3, #24
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	021b      	lsls	r3, r3, #8
 8009510:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009514:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	0a1b      	lsrs	r3, r3, #8
 800951a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800951e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	0e1b      	lsrs	r3, r3, #24
 8009524:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009528:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3738      	adds	r7, #56	@ 0x38
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	18000f3a 	.word	0x18000f3a

08009538 <SD_SwitchSpeed>:
  * @param  hsd: SD handle
  * @param  SwitchSpeedMode: SD speed mode( SDMMC_SDR12_SWITCH_PATTERN, SDMMC_SDR25_SWITCH_PATTERN)
  * @retval SD Card error state
  */
uint32_t SD_SwitchSpeed(SD_HandleTypeDef *hsd, uint32_t SwitchSpeedMode)
{
 8009538:	b590      	push	{r4, r7, lr}
 800953a:	b09d      	sub	sp, #116	@ 0x74
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009542:	2300      	movs	r3, #0
 8009544:	66fb      	str	r3, [r7, #108]	@ 0x6c
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8009546:	f107 0308 	add.w	r3, r7, #8
 800954a:	2240      	movs	r2, #64	@ 0x40
 800954c:	2100      	movs	r1, #0
 800954e:	4618      	mov	r0, r3
 8009550:	f006 ff58 	bl	8010404 <memset>
  uint32_t count;
  uint32_t loop = 0 ;
 8009554:	2300      	movs	r3, #0
 8009556:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t Timeout = HAL_GetTick();
 8009558:	f7f7 fa20 	bl	800099c <HAL_GetTick>
 800955c:	6638      	str	r0, [r7, #96]	@ 0x60

  if (hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009562:	2b00      	cmp	r3, #0
 8009564:	d102      	bne.n	800956c <SD_SwitchSpeed+0x34>
  {
    /* Standard Speed Card <= 12.5Mhz  */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009566:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800956a:	e0ad      	b.n	80096c8 <SD_SwitchSpeed+0x190>
  }

  if (hsd->SdCard.CardSpeed >= CARD_HIGH_SPEED)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009570:	2bff      	cmp	r3, #255	@ 0xff
 8009572:	f240 80a8 	bls.w	80096c6 <SD_SwitchSpeed+0x18e>
  {
    /* Initialize the Data control register */
    hsd->Instance->DCTRL = 0;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2200      	movs	r2, #0
 800957c:	62da      	str	r2, [r3, #44]	@ 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2140      	movs	r1, #64	@ 0x40
 8009584:	4618      	mov	r0, r3
 8009586:	f000 fd7f 	bl	800a088 <SDMMC_CmdBlockLength>
 800958a:	66f8      	str	r0, [r7, #108]	@ 0x6c

    if (errorstate != HAL_SD_ERROR_NONE)
 800958c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <SD_SwitchSpeed+0x5e>
    {
      return errorstate;
 8009592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009594:	e098      	b.n	80096c8 <SD_SwitchSpeed+0x190>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009596:	f04f 33ff 	mov.w	r3, #4294967295
 800959a:	64bb      	str	r3, [r7, #72]	@ 0x48
    sdmmc_datainitstructure.DataLength    = 64U;
 800959c:	2340      	movs	r3, #64	@ 0x40
 800959e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 80095a0:	2360      	movs	r3, #96	@ 0x60
 80095a2:	653b      	str	r3, [r7, #80]	@ 0x50
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80095a4:	2302      	movs	r3, #2
 80095a6:	657b      	str	r3, [r7, #84]	@ 0x54
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 80095ac:	2301      	movs	r3, #1
 80095ae:	65fb      	str	r3, [r7, #92]	@ 0x5c

    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80095b8:	4611      	mov	r1, r2
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 fd38 	bl	800a030 <SDMMC_ConfigData>


    errorstate = SDMMC_CmdSwitch(hsd->Instance, SwitchSpeedMode);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 ffd9 	bl	800a57e <SDMMC_CmdSwitch>
 80095cc:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (errorstate != HAL_SD_ERROR_NONE)
 80095ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d036      	beq.n	8009642 <SD_SwitchSpeed+0x10a>
    {
      return errorstate;
 80095d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095d6:	e077      	b.n	80096c8 <SD_SwitchSpeed+0x190>
    }

    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d01a      	beq.n	800961c <SD_SwitchSpeed+0xe4>
      {
        for (count = 0U; count < 8U; count++)
 80095e6:	2300      	movs	r3, #0
 80095e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095ea:	e011      	b.n	8009610 <SD_SwitchSpeed+0xd8>
        {
          SD_hs[(8U * loop) + count]  = SDMMC_ReadFIFO(hsd->Instance);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6819      	ldr	r1, [r3, #0]
 80095f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095f2:	00da      	lsls	r2, r3, #3
 80095f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80095f6:	18d4      	adds	r4, r2, r3
 80095f8:	4608      	mov	r0, r1
 80095fa:	f000 fc91 	bl	8009f20 <SDMMC_ReadFIFO>
 80095fe:	4602      	mov	r2, r0
 8009600:	00a3      	lsls	r3, r4, #2
 8009602:	3370      	adds	r3, #112	@ 0x70
 8009604:	443b      	add	r3, r7
 8009606:	f843 2c68 	str.w	r2, [r3, #-104]
        for (count = 0U; count < 8U; count++)
 800960a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800960c:	3301      	adds	r3, #1
 800960e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009610:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009612:	2b07      	cmp	r3, #7
 8009614:	d9ea      	bls.n	80095ec <SD_SwitchSpeed+0xb4>
        }
        loop ++;
 8009616:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009618:	3301      	adds	r3, #1
 800961a:	667b      	str	r3, [r7, #100]	@ 0x64
      }

      if ((HAL_GetTick() - Timeout) >=  SDMMC_DATATIMEOUT)
 800961c:	f7f7 f9be 	bl	800099c <HAL_GetTick>
 8009620:	4602      	mov	r2, r0
 8009622:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962a:	d10a      	bne.n	8009642 <SD_SwitchSpeed+0x10a>
      {
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009632:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_SD_ERROR_TIMEOUT;
 800963c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009640:	e042      	b.n	80096c8 <SD_SwitchSpeed+0x190>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009648:	f240 532a 	movw	r3, #1322	@ 0x52a
 800964c:	4013      	ands	r3, r2
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0c2      	beq.n	80095d8 <SD_SwitchSpeed+0xa0>
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009658:	f003 0308 	and.w	r3, r3, #8
 800965c:	2b00      	cmp	r3, #0
 800965e:	d005      	beq.n	800966c <SD_SwitchSpeed+0x134>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2208      	movs	r2, #8
 8009666:	639a      	str	r2, [r3, #56]	@ 0x38

      return errorstate;
 8009668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800966a:	e02d      	b.n	80096c8 <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009672:	f003 0302 	and.w	r3, r3, #2
 8009676:	2b00      	cmp	r3, #0
 8009678:	d007      	beq.n	800968a <SD_SwitchSpeed+0x152>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2202      	movs	r2, #2
 8009680:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;
 8009682:	2302      	movs	r3, #2
 8009684:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 8009686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009688:	e01e      	b.n	80096c8 <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009690:	f003 0320 	and.w	r3, r3, #32
 8009694:	2b00      	cmp	r3, #0
 8009696:	d007      	beq.n	80096a8 <SD_SwitchSpeed+0x170>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2220      	movs	r2, #32
 800969e:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_RX_OVERRUN;
 80096a0:	2320      	movs	r3, #32
 80096a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 80096a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096a6:	e00f      	b.n	80096c8 <SD_SwitchSpeed+0x190>
    {
      /* No error flag set */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a08      	ldr	r2, [pc, #32]	@ (80096d0 <SD_SwitchSpeed+0x198>)
 80096ae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Test if the switch mode HS is ok */
    if ((((uint8_t *)SD_hs)[13] & 2U) != 2U)
 80096b0:	f107 0308 	add.w	r3, r7, #8
 80096b4:	330d      	adds	r3, #13
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 0302 	and.w	r3, r3, #2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d102      	bne.n	80096c6 <SD_SwitchSpeed+0x18e>
    {
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80096c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80096c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }

  }

  return errorstate;
 80096c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3774      	adds	r7, #116	@ 0x74
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd90      	pop	{r4, r7, pc}
 80096d0:	18000f3a 	.word	0x18000f3a

080096d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e10f      	b.n	8009906 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a87      	ldr	r2, [pc, #540]	@ (8009910 <HAL_SPI_Init+0x23c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d00f      	beq.n	8009716 <HAL_SPI_Init+0x42>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a86      	ldr	r2, [pc, #536]	@ (8009914 <HAL_SPI_Init+0x240>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d00a      	beq.n	8009716 <HAL_SPI_Init+0x42>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a84      	ldr	r2, [pc, #528]	@ (8009918 <HAL_SPI_Init+0x244>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d005      	beq.n	8009716 <HAL_SPI_Init+0x42>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	2b0f      	cmp	r3, #15
 8009710:	d901      	bls.n	8009716 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e0f7      	b.n	8009906 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fbbc 	bl	8009e94 <SPI_GetPacketSize>
 800971c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a7b      	ldr	r2, [pc, #492]	@ (8009910 <HAL_SPI_Init+0x23c>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d00c      	beq.n	8009742 <HAL_SPI_Init+0x6e>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a79      	ldr	r2, [pc, #484]	@ (8009914 <HAL_SPI_Init+0x240>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d007      	beq.n	8009742 <HAL_SPI_Init+0x6e>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a78      	ldr	r2, [pc, #480]	@ (8009918 <HAL_SPI_Init+0x244>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d002      	beq.n	8009742 <HAL_SPI_Init+0x6e>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2b08      	cmp	r3, #8
 8009740:	d811      	bhi.n	8009766 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009746:	4a72      	ldr	r2, [pc, #456]	@ (8009910 <HAL_SPI_Init+0x23c>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d009      	beq.n	8009760 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a70      	ldr	r2, [pc, #448]	@ (8009914 <HAL_SPI_Init+0x240>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d004      	beq.n	8009760 <HAL_SPI_Init+0x8c>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a6f      	ldr	r2, [pc, #444]	@ (8009918 <HAL_SPI_Init+0x244>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d104      	bne.n	800976a <HAL_SPI_Init+0x96>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2b10      	cmp	r3, #16
 8009764:	d901      	bls.n	800976a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e0cd      	b.n	8009906 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d106      	bne.n	8009784 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f003 fb3e 	bl	800ce00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2202      	movs	r2, #2
 8009788:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f022 0201 	bic.w	r2, r2, #1
 800979a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80097a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097b0:	d119      	bne.n	80097e6 <HAL_SPI_Init+0x112>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097ba:	d103      	bne.n	80097c4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d008      	beq.n	80097d6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10c      	bne.n	80097e6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80097d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097d4:	d107      	bne.n	80097e6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80097e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00f      	beq.n	8009812 <HAL_SPI_Init+0x13e>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	2b06      	cmp	r3, #6
 80097f8:	d90b      	bls.n	8009812 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	430a      	orrs	r2, r1
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	e007      	b.n	8009822 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009820:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	69da      	ldr	r2, [r3, #28]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800982a:	431a      	orrs	r2, r3
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	431a      	orrs	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009834:	ea42 0103 	orr.w	r1, r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	430a      	orrs	r2, r1
 8009842:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800984c:	431a      	orrs	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009852:	431a      	orrs	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	431a      	orrs	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	431a      	orrs	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	431a      	orrs	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	431a      	orrs	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	431a      	orrs	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009876:	431a      	orrs	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	431a      	orrs	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009882:	ea42 0103 	orr.w	r1, r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	430a      	orrs	r2, r1
 8009890:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d113      	bne.n	80098c2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80098c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f022 0201 	bic.w	r2, r2, #1
 80098d0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	430a      	orrs	r2, r1
 80098f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	40013000 	.word	0x40013000
 8009914:	40003800 	.word	0x40003800
 8009918:	40003c00 	.word	0x40003c00

0800991c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b088      	sub	sp, #32
 8009920:	af02      	add	r7, sp, #8
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	603b      	str	r3, [r7, #0]
 8009928:	4613      	mov	r3, r2
 800992a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3320      	adds	r3, #32
 8009932:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009934:	f7f7 f832 	bl	800099c <HAL_GetTick>
 8009938:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b01      	cmp	r3, #1
 8009944:	d001      	beq.n	800994a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009946:	2302      	movs	r3, #2
 8009948:	e1d1      	b.n	8009cee <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <HAL_SPI_Transmit+0x3a>
 8009950:	88fb      	ldrh	r3, [r7, #6]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e1c9      	b.n	8009cee <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009960:	2b01      	cmp	r3, #1
 8009962:	d101      	bne.n	8009968 <HAL_SPI_Transmit+0x4c>
 8009964:	2302      	movs	r3, #2
 8009966:	e1c2      	b.n	8009cee <HAL_SPI_Transmit+0x3d2>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2203      	movs	r2, #3
 8009974:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	68ba      	ldr	r2, [r7, #8]
 8009984:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	88fa      	ldrh	r2, [r7, #6]
 800998a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	88fa      	ldrh	r2, [r7, #6]
 8009992:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80099c0:	d108      	bne.n	80099d4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099d0:	601a      	str	r2, [r3, #0]
 80099d2:	e009      	b.n	80099e8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80099e6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	4b96      	ldr	r3, [pc, #600]	@ (8009c48 <HAL_SPI_Transmit+0x32c>)
 80099f0:	4013      	ands	r3, r2
 80099f2:	88f9      	ldrh	r1, [r7, #6]
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	6812      	ldr	r2, [r2, #0]
 80099f8:	430b      	orrs	r3, r1
 80099fa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f042 0201 	orr.w	r2, r2, #1
 8009a0a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a14:	d107      	bne.n	8009a26 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	2b0f      	cmp	r3, #15
 8009a2c:	d947      	bls.n	8009abe <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009a2e:	e03f      	b.n	8009ab0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	f003 0302 	and.w	r3, r3, #2
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d114      	bne.n	8009a68 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	6812      	ldr	r2, [r2, #0]
 8009a48:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a4e:	1d1a      	adds	r2, r3, #4
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009a66:	e023      	b.n	8009ab0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a68:	f7f6 ff98 	bl	800099c <HAL_GetTick>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d803      	bhi.n	8009a80 <HAL_SPI_Transmit+0x164>
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a7e:	d102      	bne.n	8009a86 <HAL_SPI_Transmit+0x16a>
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d114      	bne.n	8009ab0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f000 f936 	bl	8009cf8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009aac:	2303      	movs	r3, #3
 8009aae:	e11e      	b.n	8009cee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1b9      	bne.n	8009a30 <HAL_SPI_Transmit+0x114>
 8009abc:	e0f1      	b.n	8009ca2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	2b07      	cmp	r3, #7
 8009ac4:	f240 80e6 	bls.w	8009c94 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009ac8:	e05d      	b.n	8009b86 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	f003 0302 	and.w	r3, r3, #2
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d132      	bne.n	8009b3e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d918      	bls.n	8009b16 <HAL_SPI_Transmit+0x1fa>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d014      	beq.n	8009b16 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6812      	ldr	r2, [r2, #0]
 8009af6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009afc:	1d1a      	adds	r2, r3, #4
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	3b02      	subs	r3, #2
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009b14:	e037      	b.n	8009b86 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b1a:	881a      	ldrh	r2, [r3, #0]
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b24:	1c9a      	adds	r2, r3, #2
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	3b01      	subs	r3, #1
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009b3c:	e023      	b.n	8009b86 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b3e:	f7f6 ff2d 	bl	800099c <HAL_GetTick>
 8009b42:	4602      	mov	r2, r0
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d803      	bhi.n	8009b56 <HAL_SPI_Transmit+0x23a>
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b54:	d102      	bne.n	8009b5c <HAL_SPI_Transmit+0x240>
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d114      	bne.n	8009b86 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f000 f8cb 	bl	8009cf8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009b82:	2303      	movs	r3, #3
 8009b84:	e0b3      	b.n	8009cee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d19b      	bne.n	8009aca <HAL_SPI_Transmit+0x1ae>
 8009b92:	e086      	b.n	8009ca2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	695b      	ldr	r3, [r3, #20]
 8009b9a:	f003 0302 	and.w	r3, r3, #2
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d154      	bne.n	8009c4c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d918      	bls.n	8009be0 <HAL_SPI_Transmit+0x2c4>
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bb2:	2b40      	cmp	r3, #64	@ 0x40
 8009bb4:	d914      	bls.n	8009be0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6812      	ldr	r2, [r2, #0]
 8009bc0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bc6:	1d1a      	adds	r2, r3, #4
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	3b04      	subs	r3, #4
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009bde:	e059      	b.n	8009c94 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d917      	bls.n	8009c1c <HAL_SPI_Transmit+0x300>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d013      	beq.n	8009c1c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bf8:	881a      	ldrh	r2, [r3, #0]
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c02:	1c9a      	adds	r2, r3, #2
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	3b02      	subs	r3, #2
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c1a:	e03b      	b.n	8009c94 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3320      	adds	r3, #32
 8009c26:	7812      	ldrb	r2, [r2, #0]
 8009c28:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	b29a      	uxth	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c46:	e025      	b.n	8009c94 <HAL_SPI_Transmit+0x378>
 8009c48:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c4c:	f7f6 fea6 	bl	800099c <HAL_GetTick>
 8009c50:	4602      	mov	r2, r0
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d803      	bhi.n	8009c64 <HAL_SPI_Transmit+0x348>
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c62:	d102      	bne.n	8009c6a <HAL_SPI_Transmit+0x34e>
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d114      	bne.n	8009c94 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f000 f844 	bl	8009cf8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e02c      	b.n	8009cee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f47f af79 	bne.w	8009b94 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2108      	movs	r1, #8
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 f8c3 	bl	8009e38 <SPI_WaitOnFlagUntilTimeout>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d007      	beq.n	8009cc8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cbe:	f043 0220 	orr.w	r2, r3, #32
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f000 f815 	bl	8009cf8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e000      	b.n	8009cee <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009cec:	2300      	movs	r3, #0
  }
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3718      	adds	r7, #24
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop

08009cf8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	699a      	ldr	r2, [r3, #24]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f042 0208 	orr.w	r2, r2, #8
 8009d16:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	699a      	ldr	r2, [r3, #24]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f042 0210 	orr.w	r2, r2, #16
 8009d26:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f022 0201 	bic.w	r2, r2, #1
 8009d36:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	6919      	ldr	r1, [r3, #16]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	4b3c      	ldr	r3, [pc, #240]	@ (8009e34 <SPI_CloseTransfer+0x13c>)
 8009d44:	400b      	ands	r3, r1
 8009d46:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	689a      	ldr	r2, [r3, #8]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009d56:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	2b04      	cmp	r3, #4
 8009d62:	d014      	beq.n	8009d8e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f003 0320 	and.w	r3, r3, #32
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00f      	beq.n	8009d8e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	699a      	ldr	r2, [r3, #24]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f042 0220 	orr.w	r2, r2, #32
 8009d8c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b03      	cmp	r3, #3
 8009d98:	d014      	beq.n	8009dc4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00f      	beq.n	8009dc4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009daa:	f043 0204 	orr.w	r2, r3, #4
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	699a      	ldr	r2, [r3, #24]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dc2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00f      	beq.n	8009dee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dd4:	f043 0201 	orr.w	r2, r3, #1
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	699a      	ldr	r2, [r3, #24]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009dec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00f      	beq.n	8009e18 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dfe:	f043 0208 	orr.w	r2, r3, #8
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	699a      	ldr	r2, [r3, #24]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009e16:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009e28:	bf00      	nop
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	fffffc90 	.word	0xfffffc90

08009e38 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	603b      	str	r3, [r7, #0]
 8009e44:	4613      	mov	r3, r2
 8009e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e48:	e010      	b.n	8009e6c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e4a:	f7f6 fda7 	bl	800099c <HAL_GetTick>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	683a      	ldr	r2, [r7, #0]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d803      	bhi.n	8009e62 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e60:	d102      	bne.n	8009e68 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d101      	bne.n	8009e6c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	e00f      	b.n	8009e8c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	695a      	ldr	r2, [r3, #20]
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	4013      	ands	r3, r2
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	bf0c      	ite	eq
 8009e7c:	2301      	moveq	r3, #1
 8009e7e:	2300      	movne	r3, #0
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	461a      	mov	r2, r3
 8009e84:	79fb      	ldrb	r3, [r7, #7]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d0df      	beq.n	8009e4a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ea0:	095b      	lsrs	r3, r3, #5
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	3307      	adds	r3, #7
 8009eb2:	08db      	lsrs	r3, r3, #3
 8009eb4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	fb02 f303 	mul.w	r3, r2, r3
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
	...

08009ecc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009ecc:	b084      	sub	sp, #16
 8009ece:	b480      	push	{r7}
 8009ed0:	b085      	sub	sp, #20
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	f107 001c 	add.w	r0, r7, #28
 8009eda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009ee2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009ee6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8009eea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8009eee:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8009ef2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	4b07      	ldr	r3, [pc, #28]	@ (8009f1c <SDMMC_Init+0x50>)
 8009f00:	4013      	ands	r3, r2
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	431a      	orrs	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	b004      	add	sp, #16
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	ffc02c00 	.word	0xffc02c00

08009f20 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f043 0203 	orr.w	r2, r3, #3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0303 	and.w	r3, r3, #3
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
	...

08009f9c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009fba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009fc0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009fc6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68da      	ldr	r2, [r3, #12]
 8009fd2:	4b06      	ldr	r3, [pc, #24]	@ (8009fec <SDMMC_SendCommand+0x50>)
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	431a      	orrs	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3714      	adds	r7, #20
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	fffee0c0 	.word	0xfffee0c0

08009ff0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	b2db      	uxtb	r3, r3
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b085      	sub	sp, #20
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3314      	adds	r3, #20
 800a018:	461a      	mov	r2, r3
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	4413      	add	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a056:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a05c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a062:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	4313      	orrs	r3, r2
 800a068:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	431a      	orrs	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a07a:	2300      	movs	r3, #0

}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b088      	sub	sp, #32
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a096:	2310      	movs	r3, #16
 800a098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a09a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a09e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0aa:	f107 0308 	add.w	r3, r7, #8
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f7ff ff73 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a0b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0ba:	2110      	movs	r1, #16
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fa81 	bl	800a5c4 <SDMMC_GetCmdResp1>
 800a0c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0c4:	69fb      	ldr	r3, [r7, #28]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3720      	adds	r7, #32
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b088      	sub	sp, #32
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a0dc:	2311      	movs	r3, #17
 800a0de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a0e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0f0:	f107 0308 	add.w	r3, r7, #8
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f7ff ff50 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a0fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a100:	2111      	movs	r1, #17
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 fa5e 	bl	800a5c4 <SDMMC_GetCmdResp1>
 800a108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a10a:	69fb      	ldr	r3, [r7, #28]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3720      	adds	r7, #32
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b088      	sub	sp, #32
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a122:	2312      	movs	r3, #18
 800a124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a126:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a12a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a12c:	2300      	movs	r3, #0
 800a12e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a134:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a136:	f107 0308 	add.w	r3, r7, #8
 800a13a:	4619      	mov	r1, r3
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7ff ff2d 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a142:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a146:	2112      	movs	r1, #18
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 fa3b 	bl	800a5c4 <SDMMC_GetCmdResp1>
 800a14e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a150:	69fb      	ldr	r3, [r7, #28]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3720      	adds	r7, #32
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b088      	sub	sp, #32
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a168:	2318      	movs	r3, #24
 800a16a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a16c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a172:	2300      	movs	r3, #0
 800a174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a176:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a17a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a17c:	f107 0308 	add.w	r3, r7, #8
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7ff ff0a 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a18c:	2118      	movs	r1, #24
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fa18 	bl	800a5c4 <SDMMC_GetCmdResp1>
 800a194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a196:	69fb      	ldr	r3, [r7, #28]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3720      	adds	r7, #32
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a1ae:	2319      	movs	r3, #25
 800a1b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1c2:	f107 0308 	add.w	r3, r7, #8
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff fee7 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a1ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1d2:	2119      	movs	r1, #25
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f9f5 	bl	800a5c4 <SDMMC_GetCmdResp1>
 800a1da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1dc:	69fb      	ldr	r3, [r7, #28]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3720      	adds	r7, #32
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b088      	sub	sp, #32
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a1f4:	230c      	movs	r3, #12
 800a1f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1fe:	2300      	movs	r3, #0
 800a200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a202:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a206:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a220:	f107 0308 	add.w	r3, r7, #8
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff feb8 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a22c:	4a0b      	ldr	r2, [pc, #44]	@ (800a25c <SDMMC_CmdStopTransfer+0x74>)
 800a22e:	210c      	movs	r1, #12
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f9c7 	bl	800a5c4 <SDMMC_GetCmdResp1>
 800a236:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a24a:	d101      	bne.n	800a250 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a24c:	2300      	movs	r3, #0
 800a24e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a250:	69fb      	ldr	r3, [r7, #28]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3720      	adds	r7, #32
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	05f5e100 	.word	0x05f5e100

0800a260 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b088      	sub	sp, #32
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a26e:	2307      	movs	r3, #7
 800a270:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a272:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a278:	2300      	movs	r3, #0
 800a27a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a27c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a280:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a282:	f107 0308 	add.w	r3, r7, #8
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f7ff fe87 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a28e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a292:	2107      	movs	r1, #7
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f995 	bl	800a5c4 <SDMMC_GetCmdResp1>
 800a29a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a29c:	69fb      	ldr	r3, [r7, #28]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3720      	adds	r7, #32
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b088      	sub	sp, #32
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2c4:	f107 0308 	add.w	r3, r7, #8
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7ff fe66 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 fbb9 	bl	800aa48 <SDMMC_GetCmdError>
 800a2d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2d8:	69fb      	ldr	r3, [r7, #28]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3720      	adds	r7, #32
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b088      	sub	sp, #32
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a2ea:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a2ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a2f0:	2308      	movs	r3, #8
 800a2f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a302:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a304:	f107 0308 	add.w	r3, r7, #8
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7ff fe46 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fb4b 	bl	800a9ac <SDMMC_GetCmdResp7>
 800a316:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a318:	69fb      	ldr	r3, [r7, #28]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3720      	adds	r7, #32
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b088      	sub	sp, #32
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
 800a32a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a330:	2337      	movs	r3, #55	@ 0x37
 800a332:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a334:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a33a:	2300      	movs	r3, #0
 800a33c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a33e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a342:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a344:	f107 0308 	add.w	r3, r7, #8
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7ff fe26 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a350:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a354:	2137      	movs	r1, #55	@ 0x37
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f934 	bl	800a5c4 <SDMMC_GetCmdResp1>
 800a35c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a35e:	69fb      	ldr	r3, [r7, #28]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3720      	adds	r7, #32
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b088      	sub	sp, #32
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a376:	2329      	movs	r3, #41	@ 0x29
 800a378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a37a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a37e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a380:	2300      	movs	r3, #0
 800a382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a388:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a38a:	f107 0308 	add.w	r3, r7, #8
 800a38e:	4619      	mov	r1, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f7ff fe03 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 fa50 	bl	800a83c <SDMMC_GetCmdResp3>
 800a39c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a39e:	69fb      	ldr	r3, [r7, #28]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3720      	adds	r7, #32
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b088      	sub	sp, #32
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a3b6:	2306      	movs	r3, #6
 800a3b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a3be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3ca:	f107 0308 	add.w	r3, r7, #8
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f7ff fde3 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a3d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3da:	2106      	movs	r1, #6
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f8f1 	bl	800a5c4 <SDMMC_GetCmdResp1>
 800a3e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3e4:	69fb      	ldr	r3, [r7, #28]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b088      	sub	sp, #32
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a3fa:	2333      	movs	r3, #51	@ 0x33
 800a3fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a402:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a404:	2300      	movs	r3, #0
 800a406:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a408:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a40c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a40e:	f107 0308 	add.w	r3, r7, #8
 800a412:	4619      	mov	r1, r3
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7ff fdc1 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a41a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a41e:	2133      	movs	r1, #51	@ 0x33
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f8cf 	bl	800a5c4 <SDMMC_GetCmdResp1>
 800a426:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a428:	69fb      	ldr	r3, [r7, #28]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3720      	adds	r7, #32
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a432:	b580      	push	{r7, lr}
 800a434:	b088      	sub	sp, #32
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a43a:	2300      	movs	r3, #0
 800a43c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a43e:	2302      	movs	r3, #2
 800a440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a442:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a446:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a448:	2300      	movs	r3, #0
 800a44a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a44c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a450:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a452:	f107 0308 	add.w	r3, r7, #8
 800a456:	4619      	mov	r1, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f7ff fd9f 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f9a2 	bl	800a7a8 <SDMMC_GetCmdResp2>
 800a464:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a466:	69fb      	ldr	r3, [r7, #28]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3720      	adds	r7, #32
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b088      	sub	sp, #32
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a47e:	2309      	movs	r3, #9
 800a480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a482:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800a486:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a488:	2300      	movs	r3, #0
 800a48a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a48c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a490:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a492:	f107 0308 	add.w	r3, r7, #8
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f7ff fd7f 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f982 	bl	800a7a8 <SDMMC_GetCmdResp2>
 800a4a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4a6:	69fb      	ldr	r3, [r7, #28]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3720      	adds	r7, #32
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b088      	sub	sp, #32
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a4c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a4d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4d2:	f107 0308 	add.w	r3, r7, #8
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f7ff fd5f 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	2103      	movs	r1, #3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f9ea 	bl	800a8bc <SDMMC_GetCmdResp6>
 800a4e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4ea:	69fb      	ldr	r3, [r7, #28]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3720      	adds	r7, #32
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a502:	230d      	movs	r3, #13
 800a504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a506:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a50a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a50c:	2300      	movs	r3, #0
 800a50e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a510:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a514:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a516:	f107 0308 	add.w	r3, r7, #8
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff fd3d 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a522:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a526:	210d      	movs	r1, #13
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f84b 	bl	800a5c4 <SDMMC_GetCmdResp1>
 800a52e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a530:	69fb      	ldr	r3, [r7, #28]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3720      	adds	r7, #32
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b088      	sub	sp, #32
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a542:	2300      	movs	r3, #0
 800a544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a546:	230d      	movs	r3, #13
 800a548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a54a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a54e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a550:	2300      	movs	r3, #0
 800a552:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a558:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a55a:	f107 0308 	add.w	r3, r7, #8
 800a55e:	4619      	mov	r1, r3
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7ff fd1b 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a566:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a56a:	210d      	movs	r1, #13
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f829 	bl	800a5c4 <SDMMC_GetCmdResp1>
 800a572:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a574:	69fb      	ldr	r3, [r7, #28]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3720      	adds	r7, #32
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b088      	sub	sp, #32
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800a58c:	2306      	movs	r3, #6
 800a58e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a590:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a594:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a596:	2300      	movs	r3, #0
 800a598:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a59a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a59e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5a0:	f107 0308 	add.w	r3, r7, #8
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7ff fcf8 	bl	8009f9c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800a5ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5b0:	2106      	movs	r1, #6
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f806 	bl	800a5c4 <SDMMC_GetCmdResp1>
 800a5b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5ba:	69fb      	ldr	r3, [r7, #28]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3720      	adds	r7, #32
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b088      	sub	sp, #32
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a5d2:	4b70      	ldr	r3, [pc, #448]	@ (800a794 <SDMMC_GetCmdResp1+0x1d0>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a70      	ldr	r2, [pc, #448]	@ (800a798 <SDMMC_GetCmdResp1+0x1d4>)
 800a5d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a5dc:	0a5a      	lsrs	r2, r3, #9
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	fb02 f303 	mul.w	r3, r2, r3
 800a5e4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	1e5a      	subs	r2, r3, #1
 800a5ea:	61fa      	str	r2, [r7, #28]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d102      	bne.n	800a5f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a5f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a5f4:	e0c9      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5fa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a5fc:	69ba      	ldr	r2, [r7, #24]
 800a5fe:	4b67      	ldr	r3, [pc, #412]	@ (800a79c <SDMMC_GetCmdResp1+0x1d8>)
 800a600:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0ef      	beq.n	800a5e6 <SDMMC_GetCmdResp1+0x22>
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d1ea      	bne.n	800a5e6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a614:	f003 0304 	and.w	r3, r3, #4
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d004      	beq.n	800a626 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2204      	movs	r2, #4
 800a620:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a622:	2304      	movs	r3, #4
 800a624:	e0b1      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d004      	beq.n	800a63c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2201      	movs	r2, #1
 800a636:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a638:	2301      	movs	r3, #1
 800a63a:	e0a6      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4a58      	ldr	r2, [pc, #352]	@ (800a7a0 <SDMMC_GetCmdResp1+0x1dc>)
 800a640:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f7ff fcd4 	bl	8009ff0 <SDMMC_GetCommandResponse>
 800a648:	4603      	mov	r3, r0
 800a64a:	461a      	mov	r2, r3
 800a64c:	7afb      	ldrb	r3, [r7, #11]
 800a64e:	4293      	cmp	r3, r2
 800a650:	d001      	beq.n	800a656 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a652:	2301      	movs	r3, #1
 800a654:	e099      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a656:	2100      	movs	r1, #0
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f7ff fcd6 	bl	800a00a <SDMMC_GetResponse>
 800a65e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	4b50      	ldr	r3, [pc, #320]	@ (800a7a4 <SDMMC_GetCmdResp1+0x1e0>)
 800a664:	4013      	ands	r3, r2
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a66a:	2300      	movs	r3, #0
 800a66c:	e08d      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2b00      	cmp	r3, #0
 800a672:	da02      	bge.n	800a67a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a674:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a678:	e087      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a680:	2b00      	cmp	r3, #0
 800a682:	d001      	beq.n	800a688 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a684:	2340      	movs	r3, #64	@ 0x40
 800a686:	e080      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d001      	beq.n	800a696 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a692:	2380      	movs	r3, #128	@ 0x80
 800a694:	e079      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d002      	beq.n	800a6a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a6a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a6a4:	e071      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d002      	beq.n	800a6b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a6b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6b4:	e069      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d002      	beq.n	800a6c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a6c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6c4:	e061      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d002      	beq.n	800a6d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a6d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a6d4:	e059      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a6e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a6e4:	e051      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a6f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a6f4:	e049      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d002      	beq.n	800a706 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a700:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a704:	e041      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a710:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a714:	e039      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d002      	beq.n	800a726 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a720:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a724:	e031      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d002      	beq.n	800a736 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a730:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a734:	e029      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d002      	beq.n	800a746 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a740:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a744:	e021      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d002      	beq.n	800a756 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a750:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a754:	e019      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a760:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a764:	e011      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a770:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a774:	e009      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f003 0308 	and.w	r3, r3, #8
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a780:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a784:	e001      	b.n	800a78a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a786:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3720      	adds	r7, #32
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	20000000 	.word	0x20000000
 800a798:	10624dd3 	.word	0x10624dd3
 800a79c:	00200045 	.word	0x00200045
 800a7a0:	002000c5 	.word	0x002000c5
 800a7a4:	fdffe008 	.word	0xfdffe008

0800a7a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a7b0:	4b1f      	ldr	r3, [pc, #124]	@ (800a830 <SDMMC_GetCmdResp2+0x88>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a1f      	ldr	r2, [pc, #124]	@ (800a834 <SDMMC_GetCmdResp2+0x8c>)
 800a7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ba:	0a5b      	lsrs	r3, r3, #9
 800a7bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7c0:	fb02 f303 	mul.w	r3, r2, r3
 800a7c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	1e5a      	subs	r2, r3, #1
 800a7ca:	60fa      	str	r2, [r7, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d102      	bne.n	800a7d6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a7d4:	e026      	b.n	800a824 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7da:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d0ef      	beq.n	800a7c6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1ea      	bne.n	800a7c6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7f4:	f003 0304 	and.w	r3, r3, #4
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d004      	beq.n	800a806 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2204      	movs	r2, #4
 800a800:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a802:	2304      	movs	r3, #4
 800a804:	e00e      	b.n	800a824 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a80a:	f003 0301 	and.w	r3, r3, #1
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d004      	beq.n	800a81c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a818:	2301      	movs	r3, #1
 800a81a:	e003      	b.n	800a824 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a06      	ldr	r2, [pc, #24]	@ (800a838 <SDMMC_GetCmdResp2+0x90>)
 800a820:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3714      	adds	r7, #20
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	20000000 	.word	0x20000000
 800a834:	10624dd3 	.word	0x10624dd3
 800a838:	002000c5 	.word	0x002000c5

0800a83c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a844:	4b1a      	ldr	r3, [pc, #104]	@ (800a8b0 <SDMMC_GetCmdResp3+0x74>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a1a      	ldr	r2, [pc, #104]	@ (800a8b4 <SDMMC_GetCmdResp3+0x78>)
 800a84a:	fba2 2303 	umull	r2, r3, r2, r3
 800a84e:	0a5b      	lsrs	r3, r3, #9
 800a850:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a854:	fb02 f303 	mul.w	r3, r2, r3
 800a858:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	1e5a      	subs	r2, r3, #1
 800a85e:	60fa      	str	r2, [r7, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d102      	bne.n	800a86a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a864:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a868:	e01b      	b.n	800a8a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a86e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a876:	2b00      	cmp	r3, #0
 800a878:	d0ef      	beq.n	800a85a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1ea      	bne.n	800a85a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a888:	f003 0304 	and.w	r3, r3, #4
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d004      	beq.n	800a89a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2204      	movs	r2, #4
 800a894:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a896:	2304      	movs	r3, #4
 800a898:	e003      	b.n	800a8a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a06      	ldr	r2, [pc, #24]	@ (800a8b8 <SDMMC_GetCmdResp3+0x7c>)
 800a89e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3714      	adds	r7, #20
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	20000000 	.word	0x20000000
 800a8b4:	10624dd3 	.word	0x10624dd3
 800a8b8:	002000c5 	.word	0x002000c5

0800a8bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b088      	sub	sp, #32
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a8ca:	4b35      	ldr	r3, [pc, #212]	@ (800a9a0 <SDMMC_GetCmdResp6+0xe4>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a35      	ldr	r2, [pc, #212]	@ (800a9a4 <SDMMC_GetCmdResp6+0xe8>)
 800a8d0:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d4:	0a5b      	lsrs	r3, r3, #9
 800a8d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8da:	fb02 f303 	mul.w	r3, r2, r3
 800a8de:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	1e5a      	subs	r2, r3, #1
 800a8e4:	61fa      	str	r2, [r7, #28]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d102      	bne.n	800a8f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a8ee:	e052      	b.n	800a996 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8f4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d0ef      	beq.n	800a8e0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1ea      	bne.n	800a8e0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a90e:	f003 0304 	and.w	r3, r3, #4
 800a912:	2b00      	cmp	r3, #0
 800a914:	d004      	beq.n	800a920 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2204      	movs	r2, #4
 800a91a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a91c:	2304      	movs	r3, #4
 800a91e:	e03a      	b.n	800a996 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a924:	f003 0301 	and.w	r3, r3, #1
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d004      	beq.n	800a936 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2201      	movs	r2, #1
 800a930:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a932:	2301      	movs	r3, #1
 800a934:	e02f      	b.n	800a996 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f7ff fb5a 	bl	8009ff0 <SDMMC_GetCommandResponse>
 800a93c:	4603      	mov	r3, r0
 800a93e:	461a      	mov	r2, r3
 800a940:	7afb      	ldrb	r3, [r7, #11]
 800a942:	4293      	cmp	r3, r2
 800a944:	d001      	beq.n	800a94a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a946:	2301      	movs	r3, #1
 800a948:	e025      	b.n	800a996 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	4a16      	ldr	r2, [pc, #88]	@ (800a9a8 <SDMMC_GetCmdResp6+0xec>)
 800a94e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a950:	2100      	movs	r1, #0
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f7ff fb59 	bl	800a00a <SDMMC_GetResponse>
 800a958:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a960:	2b00      	cmp	r3, #0
 800a962:	d106      	bne.n	800a972 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	0c1b      	lsrs	r3, r3, #16
 800a968:	b29a      	uxth	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a96e:	2300      	movs	r3, #0
 800a970:	e011      	b.n	800a996 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a97c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a980:	e009      	b.n	800a996 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a98c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a990:	e001      	b.n	800a996 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a992:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a996:	4618      	mov	r0, r3
 800a998:	3720      	adds	r7, #32
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	20000000 	.word	0x20000000
 800a9a4:	10624dd3 	.word	0x10624dd3
 800a9a8:	002000c5 	.word	0x002000c5

0800a9ac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a9b4:	4b22      	ldr	r3, [pc, #136]	@ (800aa40 <SDMMC_GetCmdResp7+0x94>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a22      	ldr	r2, [pc, #136]	@ (800aa44 <SDMMC_GetCmdResp7+0x98>)
 800a9ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a9be:	0a5b      	lsrs	r3, r3, #9
 800a9c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9c4:	fb02 f303 	mul.w	r3, r2, r3
 800a9c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	1e5a      	subs	r2, r3, #1
 800a9ce:	60fa      	str	r2, [r7, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d102      	bne.n	800a9da <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a9d8:	e02c      	b.n	800aa34 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9de:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d0ef      	beq.n	800a9ca <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d1ea      	bne.n	800a9ca <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9f8:	f003 0304 	and.w	r3, r3, #4
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d004      	beq.n	800aa0a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2204      	movs	r2, #4
 800aa04:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa06:	2304      	movs	r3, #4
 800aa08:	e014      	b.n	800aa34 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d004      	beq.n	800aa20 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e009      	b.n	800aa34 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d002      	beq.n	800aa32 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2240      	movs	r2, #64	@ 0x40
 800aa30:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800aa32:	2300      	movs	r3, #0

}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	20000000 	.word	0x20000000
 800aa44:	10624dd3 	.word	0x10624dd3

0800aa48 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800aa50:	4b11      	ldr	r3, [pc, #68]	@ (800aa98 <SDMMC_GetCmdError+0x50>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a11      	ldr	r2, [pc, #68]	@ (800aa9c <SDMMC_GetCmdError+0x54>)
 800aa56:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5a:	0a5b      	lsrs	r3, r3, #9
 800aa5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa60:	fb02 f303 	mul.w	r3, r2, r3
 800aa64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	1e5a      	subs	r2, r3, #1
 800aa6a:	60fa      	str	r2, [r7, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d102      	bne.n	800aa76 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa74:	e009      	b.n	800aa8a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d0f1      	beq.n	800aa66 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a06      	ldr	r2, [pc, #24]	@ (800aaa0 <SDMMC_GetCmdError+0x58>)
 800aa86:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	20000000 	.word	0x20000000
 800aa9c:	10624dd3 	.word	0x10624dd3
 800aaa0:	002000c5 	.word	0x002000c5

0800aaa4 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b087      	sub	sp, #28
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	3b04      	subs	r3, #4
 800aab4:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 800aab6:	2300      	movs	r3, #0
 800aab8:	82fb      	strh	r3, [r7, #22]
 800aaba:	e02a      	b.n	800ab12 <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 800aabc:	8afb      	ldrh	r3, [r7, #22]
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	4413      	add	r3, r2
 800aac2:	781a      	ldrb	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d11f      	bne.n	800ab0c <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 800aacc:	8afb      	ldrh	r3, [r7, #22]
 800aace:	3301      	adds	r3, #1
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	4413      	add	r3, r2
 800aad4:	781a      	ldrb	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	3301      	adds	r3, #1
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d115      	bne.n	800ab0c <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 800aae0:	8afb      	ldrh	r3, [r7, #22]
 800aae2:	3302      	adds	r3, #2
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	4413      	add	r3, r2
 800aae8:	781a      	ldrb	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	3302      	adds	r3, #2
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d10b      	bne.n	800ab0c <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 800aaf4:	8afb      	ldrh	r3, [r7, #22]
 800aaf6:	3303      	adds	r3, #3
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	4413      	add	r3, r2
 800aafc:	781a      	ldrb	r2, [r3, #0]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	3303      	adds	r3, #3
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d101      	bne.n	800ab0c <__AVI_SearchID+0x68>
            return i;  
 800ab08:	8afb      	ldrh	r3, [r7, #22]
 800ab0a:	e007      	b.n	800ab1c <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 800ab0c:	8afb      	ldrh	r3, [r7, #22]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	82fb      	strh	r3, [r7, #22]
 800ab12:	8afb      	ldrh	r3, [r7, #22]
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d8d0      	bhi.n	800aabc <__AVI_SearchID+0x18>
  }
  return 0;    
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	371c      	adds	r7, #28
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	3302      	adds	r3, #2
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	021b      	lsls	r3, r3, #8
 800ab3a:	b21a      	sxth	r2, r3
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	3303      	adds	r3, #3
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	b21b      	sxth	r3, r3
 800ab44:	4313      	orrs	r3, r2
 800ab46:	b21b      	sxth	r3, r3
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	3304      	adds	r3, #4
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	461a      	mov	r2, r3
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	3305      	adds	r3, #5
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	021b      	lsls	r3, r3, #8
 800ab5e:	431a      	orrs	r2, r3
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	3306      	adds	r3, #6
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	041b      	lsls	r3, r3, #16
 800ab68:	431a      	orrs	r2, r3
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	3307      	adds	r3, #7
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	061b      	lsls	r3, r3, #24
 800ab72:	4313      	orrs	r3, r2
 800ab74:	461a      	mov	r2, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d004      	beq.n	800ab90 <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	1c5a      	adds	r2, r3, #1
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	8bdb      	ldrh	r3, [r3, #30]
 800ab94:	f246 4263 	movw	r2, #25699	@ 0x6463
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d005      	beq.n	800aba8 <__AVI_GetStreamInfo+0x80>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	8bdb      	ldrh	r3, [r3, #30]
 800aba0:	f247 7262 	movw	r2, #30562	@ 0x7762
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d101      	bne.n	800abac <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	e000      	b.n	800abae <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 800abac:	230b      	movs	r3, #11
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
	...

0800abbc <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b08e      	sub	sp, #56	@ 0x38
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 800abd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a87      	ldr	r2, [pc, #540]	@ (800adf8 <__AVI_Init+0x23c>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d001      	beq.n	800abe4 <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	e170      	b.n	800aec6 <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 800abe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	4a84      	ldr	r2, [pc, #528]	@ (800adfc <__AVI_Init+0x240>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d001      	beq.n	800abf2 <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 800abee:	2302      	movs	r3, #2
 800abf0:	e169      	b.n	800aec6 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	330c      	adds	r3, #12
 800abf6:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800abfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a7f      	ldr	r2, [pc, #508]	@ (800ae00 <__AVI_Init+0x244>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d001      	beq.n	800ac0a <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 800ac06:	2303      	movs	r3, #3
 800ac08:	e15d      	b.n	800aec6 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 800ac0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	4a7d      	ldr	r2, [pc, #500]	@ (800ae04 <__AVI_Init+0x248>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d001      	beq.n	800ac18 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 800ac14:	2304      	movs	r3, #4
 800ac16:	e156      	b.n	800aec6 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	330c      	adds	r3, #12
 800ac1c:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 800ac22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a78      	ldr	r2, [pc, #480]	@ (800ae08 <__AVI_Init+0x24c>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d001      	beq.n	800ac30 <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 800ac2c:	2305      	movs	r3, #5
 800ac2e:	e14a      	b.n	800aec6 <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 800ac30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac32:	689a      	ldr	r2, [r3, #8]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 800ac38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3a:	699a      	ldr	r2, [r3, #24]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	3308      	adds	r3, #8
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	4413      	add	r3, r2
 800ac4a:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800ac50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a6a      	ldr	r2, [pc, #424]	@ (800ae00 <__AVI_Init+0x244>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d001      	beq.n	800ac5e <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	e133      	b.n	800aec6 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 800ac5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	4a6a      	ldr	r2, [pc, #424]	@ (800ae0c <__AVI_Init+0x250>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d001      	beq.n	800ac6c <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 800ac68:	2306      	movs	r3, #6
 800ac6a:	e12c      	b.n	800aec6 <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	330c      	adds	r3, #12
 800ac70:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 800ac72:	6a3b      	ldr	r3, [r7, #32]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a66      	ldr	r2, [pc, #408]	@ (800ae10 <__AVI_Init+0x254>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d001      	beq.n	800ac80 <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 800ac7c:	2307      	movs	r3, #7
 800ac7e:	e122      	b.n	800aec6 <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 800ac80:	6a3b      	ldr	r3, [r7, #32]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	4a63      	ldr	r2, [pc, #396]	@ (800ae14 <__AVI_Init+0x258>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d16a      	bne.n	800ad60 <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	68db      	ldr	r3, [r3, #12]
 800ac8e:	4a62      	ldr	r2, [pc, #392]	@ (800ae18 <__AVI_Init+0x25c>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d001      	beq.n	800ac98 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 800ac94:	230a      	movs	r3, #10
 800ac96:	e116      	b.n	800aec6 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 800ac98:	4a60      	ldr	r2, [pc, #384]	@ (800ae1c <__AVI_Init+0x260>)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 800ac9e:	4a60      	ldr	r2, [pc, #384]	@ (800ae20 <__AVI_Init+0x264>)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800aca4:	6a3b      	ldr	r3, [r7, #32]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	3314      	adds	r3, #20
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	4413      	add	r3, r2
 800acae:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a5b      	ldr	r2, [pc, #364]	@ (800ae24 <__AVI_Init+0x268>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d001      	beq.n	800acbe <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 800acba:	2308      	movs	r3, #8
 800acbc:	e103      	b.n	800aec6 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	68da      	ldr	r2, [r3, #12]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	691a      	ldr	r2, [r3, #16]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 800acce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	3308      	adds	r3, #8
 800acd4:	68ba      	ldr	r2, [r7, #8]
 800acd6:	4413      	add	r3, r2
 800acd8:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800acde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a47      	ldr	r2, [pc, #284]	@ (800ae00 <__AVI_Init+0x244>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d009      	beq.n	800acfc <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2200      	movs	r2, #0
 800acec:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	839a      	strh	r2, [r3, #28]
 800acfa:	e0b7      	b.n	800ae6c <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 800acfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	4a42      	ldr	r2, [pc, #264]	@ (800ae0c <__AVI_Init+0x250>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d001      	beq.n	800ad0a <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 800ad06:	2306      	movs	r3, #6
 800ad08:	e0dd      	b.n	800aec6 <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	330c      	adds	r3, #12
 800ad0e:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 800ad10:	6a3b      	ldr	r3, [r7, #32]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a3e      	ldr	r2, [pc, #248]	@ (800ae10 <__AVI_Init+0x254>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d001      	beq.n	800ad1e <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 800ad1a:	2307      	movs	r3, #7
 800ad1c:	e0d3      	b.n	800aec6 <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	4a41      	ldr	r2, [pc, #260]	@ (800ae28 <__AVI_Init+0x26c>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d001      	beq.n	800ad2c <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 800ad28:	230a      	movs	r3, #10
 800ad2a:	e0cc      	b.n	800aec6 <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800ad2c:	6a3b      	ldr	r3, [r7, #32]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	3314      	adds	r3, #20
 800ad32:	68ba      	ldr	r2, [r7, #8]
 800ad34:	4413      	add	r3, r2
 800ad36:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a39      	ldr	r2, [pc, #228]	@ (800ae24 <__AVI_Init+0x268>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d001      	beq.n	800ad46 <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 800ad42:	2308      	movs	r3, #8
 800ad44:	e0bf      	b.n	800aec6 <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	68da      	ldr	r2, [r3, #12]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	895a      	ldrh	r2, [r3, #10]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	891a      	ldrh	r2, [r3, #8]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	839a      	strh	r2, [r3, #28]
 800ad5e:	e085      	b.n	800ae6c <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800ad60:	6a3b      	ldr	r3, [r7, #32]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	4a30      	ldr	r2, [pc, #192]	@ (800ae28 <__AVI_Init+0x26c>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	f040 8080 	bne.w	800ae6c <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 800ad6c:	4a2f      	ldr	r2, [pc, #188]	@ (800ae2c <__AVI_Init+0x270>)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 800ad72:	4a2f      	ldr	r2, [pc, #188]	@ (800ae30 <__AVI_Init+0x274>)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	3314      	adds	r3, #20
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	4413      	add	r3, r2
 800ad82:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a26      	ldr	r2, [pc, #152]	@ (800ae24 <__AVI_Init+0x268>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d001      	beq.n	800ad92 <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 800ad8e:	2308      	movs	r3, #8
 800ad90:	e099      	b.n	800aec6 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	68da      	ldr	r2, [r3, #12]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	895a      	ldrh	r2, [r3, #10]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	891a      	ldrh	r2, [r3, #8]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 800adaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	3308      	adds	r3, #8
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	4413      	add	r3, r2
 800adb4:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800adba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a10      	ldr	r2, [pc, #64]	@ (800ae00 <__AVI_Init+0x244>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d001      	beq.n	800adc8 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 800adc4:	2303      	movs	r3, #3
 800adc6:	e07e      	b.n	800aec6 <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 800adc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	4a0f      	ldr	r2, [pc, #60]	@ (800ae0c <__AVI_Init+0x250>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d001      	beq.n	800add6 <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 800add2:	2306      	movs	r3, #6
 800add4:	e077      	b.n	800aec6 <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	330c      	adds	r3, #12
 800adda:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 800addc:	6a3b      	ldr	r3, [r7, #32]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a0b      	ldr	r2, [pc, #44]	@ (800ae10 <__AVI_Init+0x254>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d001      	beq.n	800adea <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 800ade6:	2307      	movs	r3, #7
 800ade8:	e06d      	b.n	800aec6 <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 800adea:	6a3b      	ldr	r3, [r7, #32]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	4a09      	ldr	r2, [pc, #36]	@ (800ae14 <__AVI_Init+0x258>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d01f      	beq.n	800ae34 <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 800adf4:	230a      	movs	r3, #10
 800adf6:	e066      	b.n	800aec6 <__AVI_Init+0x30a>
 800adf8:	46464952 	.word	0x46464952
 800adfc:	20495641 	.word	0x20495641
 800ae00:	5453494c 	.word	0x5453494c
 800ae04:	6c726468 	.word	0x6c726468
 800ae08:	68697661 	.word	0x68697661
 800ae0c:	6c727473 	.word	0x6c727473
 800ae10:	68727473 	.word	0x68727473
 800ae14:	73646976 	.word	0x73646976
 800ae18:	47504a4d 	.word	0x47504a4d
 800ae1c:	08010bc0 	.word	0x08010bc0
 800ae20:	08010bd8 	.word	0x08010bd8
 800ae24:	66727473 	.word	0x66727473
 800ae28:	73647561 	.word	0x73647561
 800ae2c:	08010bc8 	.word	0x08010bc8
 800ae30:	08010bd0 	.word	0x08010bd0
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	3314      	adds	r3, #20
 800ae3a:	68ba      	ldr	r2, [r7, #8]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a22      	ldr	r2, [pc, #136]	@ (800aed0 <__AVI_Init+0x314>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d001      	beq.n	800ae4e <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 800ae4a:	2308      	movs	r3, #8
 800ae4c:	e03b      	b.n	800aec6 <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	699b      	ldr	r3, [r3, #24]
 800ae52:	4a20      	ldr	r2, [pc, #128]	@ (800aed4 <__AVI_Init+0x318>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d001      	beq.n	800ae5c <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 800ae58:	230a      	movs	r3, #10
 800ae5a:	e034      	b.n	800aec6 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	68da      	ldr	r2, [r3, #12]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	691a      	ldr	r2, [r3, #16]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 800ae6c:	4a1a      	ldr	r2, [pc, #104]	@ (800aed8 <__AVI_Init+0x31c>)
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae72:	f7ff fe17 	bl	800aaa4 <__AVI_SearchID>
 800ae76:	4603      	mov	r3, r0
 800ae78:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 800ae7a:	8afb      	ldrh	r3, [r7, #22]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d101      	bne.n	800ae84 <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 800ae80:	2309      	movs	r3, #9
 800ae82:	e020      	b.n	800aec6 <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	695b      	ldr	r3, [r3, #20]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d01a      	beq.n	800aec2 <__AVI_Init+0x306>
  {
    tbuf+=offset;
 800ae8c:	8afb      	ldrh	r3, [r7, #22]
 800ae8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae90:	4413      	add	r3, r2
 800ae92:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae98:	461a      	mov	r2, r3
 800ae9a:	6879      	ldr	r1, [r7, #4]
 800ae9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae9e:	f7ff fe01 	bl	800aaa4 <__AVI_SearchID>
 800aea2:	4603      	mov	r3, r0
 800aea4:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 800aea6:	8afb      	ldrh	r3, [r7, #22]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 800aeac:	230b      	movs	r3, #11
 800aeae:	e00a      	b.n	800aec6 <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 800aeb0:	8afb      	ldrh	r3, [r7, #22]
 800aeb2:	3304      	adds	r3, #4
 800aeb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeb6:	4413      	add	r3, r2
 800aeb8:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 800aeba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aebc:	881a      	ldrh	r2, [r3, #0]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 800aec2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3738      	adds	r7, #56	@ 0x38
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	66727473 	.word	0x66727473
 800aed4:	47504a4d 	.word	0x47504a4d
 800aed8:	08010be0 	.word	0x08010be0

0800aedc <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
 800aee8:	603b      	str	r3, [r7, #0]
  uint32_t readSize= 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]
  
  pavi->pVideoBuffer = pVideoBuffer;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	683a      	ldr	r2, [r7, #0]
 800aef8:	639a      	str	r2, [r3, #56]	@ 0x38

  pavi->pAudioBuffer = pAudioBuffer;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6a3a      	ldr	r2, [r7, #32]
 800aefe:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af04:	641a      	str	r2, [r3, #64]	@ 0x40
  
  f_lseek(file, 0 );
 800af06:	2100      	movs	r1, #0
 800af08:	68b8      	ldr	r0, [r7, #8]
 800af0a:	f004 fe48 	bl	800fb9e <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800af12:	f107 0314 	add.w	r3, r7, #20
 800af16:	683a      	ldr	r2, [r7, #0]
 800af18:	68b8      	ldr	r0, [r7, #8]
 800af1a:	f004 fc59 	bl	800f7d0 <f_read>
  if(readSize != VideoBufferSize)
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	429a      	cmp	r2, r3
 800af24:	d001      	beq.n	800af2a <AVI_ParserInit+0x4e>
  {
    return 1;
 800af26:	2301      	movs	r3, #1
 800af28:	e013      	b.n	800af52 <AVI_ParserInit+0x76>
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af2e:	683a      	ldr	r2, [r7, #0]
 800af30:	4619      	mov	r1, r3
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f7ff fe42 	bl	800abbc <__AVI_Init>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <AVI_ParserInit+0x66>
  {
    return 1;    
 800af3e:	2301      	movs	r3, #1
 800af40:	e007      	b.n	800af52 <AVI_ParserInit+0x76>
  }

  pavi->FileSize= f_size(file);
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	68da      	ldr	r2, [r3, #12]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3718      	adds	r7, #24
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
	...

0800af5c <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file, uint8_t skipFlag)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af00      	add	r7, sp, #0
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	4613      	mov	r3, r2
 800af68:	71fb      	strb	r3, [r7, #7]
  uint32_t  offset ;
  uint32_t readSize = 0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	613b      	str	r3, [r7, #16]
  
  if(pavi->CurrentImage== 0 )
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af72:	2b00      	cmp	r3, #0
 800af74:	d124      	bne.n	800afc0 <AVI_GetFrame+0x64>
  {
    
    f_lseek(file, 0 ); /* Go to the file start */
 800af76:	2100      	movs	r1, #0
 800af78:	68b8      	ldr	r0, [r7, #8]
 800af7a:	f004 fe10 	bl	800fb9e <f_lseek>
    /* Read data*/
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af86:	f107 0310 	add.w	r3, r7, #16
 800af8a:	68b8      	ldr	r0, [r7, #8]
 800af8c:	f004 fc20 	bl	800f7d0 <f_read>
    
    /* Check for "movi" tag */
    offset = __AVI_SearchID(pavi->pVideoBuffer,pavi->VideoBufferSize,(uint8_t*)"movi");
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af98:	4a49      	ldr	r2, [pc, #292]	@ (800b0c0 <AVI_GetFrame+0x164>)
 800af9a:	4619      	mov	r1, r3
 800af9c:	f7ff fd82 	bl	800aaa4 <__AVI_SearchID>
 800afa0:	6178      	str	r0, [r7, #20]
    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	3304      	adds	r3, #4
 800afaa:	4413      	add	r3, r2
 800afac:	4619      	mov	r1, r3
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f7ff fdba 	bl	800ab28 <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	330c      	adds	r3, #12
 800afb8:	4619      	mov	r1, r3
 800afba:	68b8      	ldr	r0, [r7, #8]
 800afbc:	f004 fdef 	bl	800fb9e <f_lseek>
    
  }

  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	8bdb      	ldrh	r3, [r3, #30]
 800afc4:	f246 4263 	movw	r2, #25699	@ 0x6463
 800afc8:	4293      	cmp	r3, r2
 800afca:	d158      	bne.n	800b07e <AVI_GetFrame+0x122>
  {
    /* the Frame is a Video Frame */
       
	if(skipFlag == 1)
 800afcc:	79fb      	ldrb	r3, [r7, #7]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d11b      	bne.n	800b00a <AVI_GetFrame+0xae>
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6a1a      	ldr	r2, [r3, #32]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	631a      	str	r2, [r3, #48]	@ 0x30

		f_lseek(file, f_tell(file) + pavi->FrameSize);
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	699a      	ldr	r2, [r3, #24]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afe2:	4413      	add	r3, r2
 800afe4:	4619      	mov	r1, r3
 800afe6:	68b8      	ldr	r0, [r7, #8]
 800afe8:	f004 fdd9 	bl	800fb9e <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800aff0:	f107 0310 	add.w	r3, r7, #16
 800aff4:	2208      	movs	r2, #8
 800aff6:	68b8      	ldr	r0, [r7, #8]
 800aff8:	f004 fbea 	bl	800f7d0 <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b000:	4619      	mov	r1, r3
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f7ff fd90 	bl	800ab28 <__AVI_GetStreamInfo>
 800b008:	e037      	b.n	800b07a <AVI_GetFrame+0x11e>

	}
	else if(skipFlag == 2)
 800b00a:	79fb      	ldrb	r3, [r7, #7]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d11c      	bne.n	800b04a <AVI_GetFrame+0xee>
	{

		f_lseek(file, f_tell(file) - pavi->FrameSize - 8 - 8);
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	699a      	ldr	r2, [r3, #24]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	3b10      	subs	r3, #16
 800b01c:	4619      	mov	r1, r3
 800b01e:	68b8      	ldr	r0, [r7, #8]
 800b020:	f004 fdbd 	bl	800fb9e <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b028:	f107 0310 	add.w	r3, r7, #16
 800b02c:	2208      	movs	r2, #8
 800b02e:	68b8      	ldr	r0, [r7, #8]
 800b030:	f004 fbce 	bl	800f7d0 <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b038:	4619      	mov	r1, r3
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f7ff fd74 	bl	800ab28 <__AVI_GetStreamInfo>

		// Get the previous frame size
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6a1a      	ldr	r2, [r3, #32]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	631a      	str	r2, [r3, #48]	@ 0x30
 800b048:	e017      	b.n	800b07a <AVI_GetFrame+0x11e>
	}
	else
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6a1a      	ldr	r2, [r3, #32]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Read The current frame + the header of the next frame (8 bytes) */
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b05a:	f103 0208 	add.w	r2, r3, #8
 800b05e:	f107 0310 	add.w	r3, r7, #16
 800b062:	68b8      	ldr	r0, [r7, #8]
 800b064:	f004 fbb4 	bl	800f7d0 <f_read>

		/* Get the info of the next frame */
		__AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6a1b      	ldr	r3, [r3, #32]
 800b070:	4413      	add	r3, r2
 800b072:	4619      	mov	r1, r3
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f7ff fd57 	bl	800ab28 <__AVI_GetStreamInfo>
    	/* Return VIDEO frame */

	}
    
    return AVI_VIDEO_FRAME;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e01c      	b.n	800b0b8 <AVI_GetFrame+0x15c>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	8bdb      	ldrh	r3, [r3, #30]
 800b082:	f247 7262 	movw	r2, #30562	@ 0x7762
 800b086:	4293      	cmp	r3, r2
 800b088:	d115      	bne.n	800b0b6 <AVI_GetFrame+0x15a>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b092:	f103 0208 	add.w	r2, r3, #8
 800b096:	f107 0310 	add.w	r3, r7, #16
 800b09a:	68b8      	ldr	r0, [r7, #8]
 800b09c:	f004 fb98 	bl	800f7d0 <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6a1b      	ldr	r3, [r3, #32]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f7ff fd3b 	bl	800ab28 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 800b0b2:	2302      	movs	r3, #2
 800b0b4:	e000      	b.n	800b0b8 <AVI_GetFrame+0x15c>
    
  }
  
  return 0;
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3718      	adds	r7, #24
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	08010be0 	.word	0x08010be0

0800b0c4 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800b0ce:	79fb      	ldrb	r3, [r7, #7]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d105      	bne.n	800b0e0 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2120      	movs	r1, #32
 800b0d8:	4806      	ldr	r0, [pc, #24]	@ (800b0f4 <GC9A01_set_reset+0x30>)
 800b0da:	f7f6 fa83 	bl	80015e4 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800b0de:	e004      	b.n	800b0ea <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	2120      	movs	r1, #32
 800b0e4:	4803      	ldr	r0, [pc, #12]	@ (800b0f4 <GC9A01_set_reset+0x30>)
 800b0e6:	f7f6 fa7d 	bl	80015e4 <HAL_GPIO_WritePin>
}
 800b0ea:	bf00      	nop
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	58022400 	.word	0x58022400

0800b0f8 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	4603      	mov	r3, r0
 800b100:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800b102:	79fb      	ldrb	r3, [r7, #7]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d105      	bne.n	800b114 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 800b108:	2200      	movs	r2, #0
 800b10a:	2140      	movs	r1, #64	@ 0x40
 800b10c:	4806      	ldr	r0, [pc, #24]	@ (800b128 <GC9A01_set_data_command+0x30>)
 800b10e:	f7f6 fa69 	bl	80015e4 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 800b112:	e004      	b.n	800b11e <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800b114:	2201      	movs	r2, #1
 800b116:	2140      	movs	r1, #64	@ 0x40
 800b118:	4803      	ldr	r0, [pc, #12]	@ (800b128 <GC9A01_set_data_command+0x30>)
 800b11a:	f7f6 fa63 	bl	80015e4 <HAL_GPIO_WritePin>
}
 800b11e:	bf00      	nop
 800b120:	3708      	adds	r7, #8
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	58022400 	.word	0x58022400

0800b12c <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	4603      	mov	r3, r0
 800b134:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800b136:	79fb      	ldrb	r3, [r7, #7]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d105      	bne.n	800b148 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800b13c:	2200      	movs	r2, #0
 800b13e:	2102      	movs	r1, #2
 800b140:	4806      	ldr	r0, [pc, #24]	@ (800b15c <GC9A01_set_chip_select+0x30>)
 800b142:	f7f6 fa4f 	bl	80015e4 <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 800b146:	e004      	b.n	800b152 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800b148:	2201      	movs	r2, #1
 800b14a:	2102      	movs	r1, #2
 800b14c:	4803      	ldr	r0, [pc, #12]	@ (800b15c <GC9A01_set_chip_select+0x30>)
 800b14e:	f7f6 fa49 	bl	80015e4 <HAL_GPIO_WritePin>
}
 800b152:	bf00      	nop
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	58022800 	.word	0x58022800

0800b160 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	4603      	mov	r3, r0
 800b168:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 800b16a:	2000      	movs	r0, #0
 800b16c:	f7ff ffc4 	bl	800b0f8 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 800b170:	2000      	movs	r0, #0
 800b172:	f7ff ffdb 	bl	800b12c <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 800b176:	1dfb      	adds	r3, r7, #7
 800b178:	2101      	movs	r1, #1
 800b17a:	4618      	mov	r0, r3
 800b17c:	f000 fac4 	bl	800b708 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 800b180:	2001      	movs	r0, #1
 800b182:	f7ff ffd3 	bl	800b12c <GC9A01_set_chip_select>
}
 800b186:	bf00      	nop
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 800b18e:	b580      	push	{r7, lr}
 800b190:	b082      	sub	sp, #8
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
 800b196:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 800b198:	2001      	movs	r0, #1
 800b19a:	f7ff ffad 	bl	800b0f8 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 800b19e:	2000      	movs	r0, #0
 800b1a0:	f7ff ffc4 	bl	800b12c <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 faac 	bl	800b708 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 800b1b0:	2001      	movs	r0, #1
 800b1b2:	f7ff ffbb 	bl	800b12c <GC9A01_set_chip_select>
}
 800b1b6:	bf00      	nop
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b082      	sub	sp, #8
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 800b1c8:	1dfb      	adds	r3, r7, #7
 800b1ca:	2101      	movs	r1, #1
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7ff ffde 	bl	800b18e <GC9A01_write_data>
}
 800b1d2:	bf00      	nop
 800b1d4:	3708      	adds	r7, #8
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <GC9A01_init>:
void GC9A01_write_continue(uint8_t *data, size_t len) {
    GC9A01_write_command(MEM_WR_CONT);
    GC9A01_write_data(data, len);
}

void GC9A01_init(void) {
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800b1de:	2001      	movs	r0, #1
 800b1e0:	f7ff ffa4 	bl	800b12c <GC9A01_set_chip_select>
    HAL_Delay(5);
 800b1e4:	2005      	movs	r0, #5
 800b1e6:	f7f5 fbe5 	bl	80009b4 <HAL_Delay>
    GC9A01_set_reset(OFF);
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	f7ff ff6a 	bl	800b0c4 <GC9A01_set_reset>
    HAL_Delay(10);
 800b1f0:	200a      	movs	r0, #10
 800b1f2:	f7f5 fbdf 	bl	80009b4 <HAL_Delay>
    GC9A01_set_reset(ON);
 800b1f6:	2001      	movs	r0, #1
 800b1f8:	f7ff ff64 	bl	800b0c4 <GC9A01_set_reset>
    HAL_Delay(120);
 800b1fc:	2078      	movs	r0, #120	@ 0x78
 800b1fe:	f7f5 fbd9 	bl	80009b4 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 800b202:	20ef      	movs	r0, #239	@ 0xef
 800b204:	f7ff ffac 	bl	800b160 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 800b208:	20eb      	movs	r0, #235	@ 0xeb
 800b20a:	f7ff ffa9 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800b20e:	2014      	movs	r0, #20
 800b210:	f7ff ffd5 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 800b214:	20fe      	movs	r0, #254	@ 0xfe
 800b216:	f7ff ffa3 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800b21a:	20ef      	movs	r0, #239	@ 0xef
 800b21c:	f7ff ffa0 	bl	800b160 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 800b220:	20eb      	movs	r0, #235	@ 0xeb
 800b222:	f7ff ff9d 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800b226:	2014      	movs	r0, #20
 800b228:	f7ff ffc9 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 800b22c:	2084      	movs	r0, #132	@ 0x84
 800b22e:	f7ff ff97 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 800b232:	2040      	movs	r0, #64	@ 0x40
 800b234:	f7ff ffc3 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 800b238:	2085      	movs	r0, #133	@ 0x85
 800b23a:	f7ff ff91 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800b23e:	20ff      	movs	r0, #255	@ 0xff
 800b240:	f7ff ffbd 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 800b244:	2086      	movs	r0, #134	@ 0x86
 800b246:	f7ff ff8b 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800b24a:	20ff      	movs	r0, #255	@ 0xff
 800b24c:	f7ff ffb7 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 800b250:	2087      	movs	r0, #135	@ 0x87
 800b252:	f7ff ff85 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800b256:	20ff      	movs	r0, #255	@ 0xff
 800b258:	f7ff ffb1 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 800b25c:	2088      	movs	r0, #136	@ 0x88
 800b25e:	f7ff ff7f 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 800b262:	200a      	movs	r0, #10
 800b264:	f7ff ffab 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 800b268:	2089      	movs	r0, #137	@ 0x89
 800b26a:	f7ff ff79 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800b26e:	2021      	movs	r0, #33	@ 0x21
 800b270:	f7ff ffa5 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 800b274:	208a      	movs	r0, #138	@ 0x8a
 800b276:	f7ff ff73 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800b27a:	2000      	movs	r0, #0
 800b27c:	f7ff ff9f 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 800b280:	208b      	movs	r0, #139	@ 0x8b
 800b282:	f7ff ff6d 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 800b286:	2080      	movs	r0, #128	@ 0x80
 800b288:	f7ff ff99 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 800b28c:	208c      	movs	r0, #140	@ 0x8c
 800b28e:	f7ff ff67 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800b292:	2001      	movs	r0, #1
 800b294:	f7ff ff93 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 800b298:	208d      	movs	r0, #141	@ 0x8d
 800b29a:	f7ff ff61 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800b29e:	2001      	movs	r0, #1
 800b2a0:	f7ff ff8d 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 800b2a4:	208e      	movs	r0, #142	@ 0x8e
 800b2a6:	f7ff ff5b 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800b2aa:	20ff      	movs	r0, #255	@ 0xff
 800b2ac:	f7ff ff87 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 800b2b0:	208f      	movs	r0, #143	@ 0x8f
 800b2b2:	f7ff ff55 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800b2b6:	20ff      	movs	r0, #255	@ 0xff
 800b2b8:	f7ff ff81 	bl	800b1be <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800b2bc:	20b6      	movs	r0, #182	@ 0xb6
 800b2be:	f7ff ff4f 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	f7ff ff7b 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800b2c8:	2000      	movs	r0, #0
 800b2ca:	f7ff ff78 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800b2ce:	2036      	movs	r0, #54	@ 0x36
 800b2d0:	f7ff ff46 	bl	800b160 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 800b2d4:	2048      	movs	r0, #72	@ 0x48
 800b2d6:	f7ff ff72 	bl	800b1be <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800b2da:	203a      	movs	r0, #58	@ 0x3a
 800b2dc:	f7ff ff40 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 800b2e0:	2005      	movs	r0, #5
 800b2e2:	f7ff ff6c 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 800b2e6:	2090      	movs	r0, #144	@ 0x90
 800b2e8:	f7ff ff3a 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800b2ec:	2008      	movs	r0, #8
 800b2ee:	f7ff ff66 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800b2f2:	2008      	movs	r0, #8
 800b2f4:	f7ff ff63 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800b2f8:	2008      	movs	r0, #8
 800b2fa:	f7ff ff60 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800b2fe:	2008      	movs	r0, #8
 800b300:	f7ff ff5d 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 800b304:	20bd      	movs	r0, #189	@ 0xbd
 800b306:	f7ff ff2b 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800b30a:	2006      	movs	r0, #6
 800b30c:	f7ff ff57 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 800b310:	20bc      	movs	r0, #188	@ 0xbc
 800b312:	f7ff ff25 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800b316:	2000      	movs	r0, #0
 800b318:	f7ff ff51 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800b31c:	20ff      	movs	r0, #255	@ 0xff
 800b31e:	f7ff ff1f 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 800b322:	2060      	movs	r0, #96	@ 0x60
 800b324:	f7ff ff4b 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800b328:	2001      	movs	r0, #1
 800b32a:	f7ff ff48 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800b32e:	2004      	movs	r0, #4
 800b330:	f7ff ff45 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 800b334:	20c3      	movs	r0, #195	@ 0xc3
 800b336:	f7ff ff13 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 800b33a:	2013      	movs	r0, #19
 800b33c:	f7ff ff3f 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 800b340:	20c4      	movs	r0, #196	@ 0xc4
 800b342:	f7ff ff0d 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 800b346:	2013      	movs	r0, #19
 800b348:	f7ff ff39 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 800b34c:	20c9      	movs	r0, #201	@ 0xc9
 800b34e:	f7ff ff07 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 800b352:	2022      	movs	r0, #34	@ 0x22
 800b354:	f7ff ff33 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 800b358:	20be      	movs	r0, #190	@ 0xbe
 800b35a:	f7ff ff01 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 800b35e:	2011      	movs	r0, #17
 800b360:	f7ff ff2d 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 800b364:	20e1      	movs	r0, #225	@ 0xe1
 800b366:	f7ff fefb 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800b36a:	2010      	movs	r0, #16
 800b36c:	f7ff ff27 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 800b370:	200e      	movs	r0, #14
 800b372:	f7ff ff24 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 800b376:	20df      	movs	r0, #223	@ 0xdf
 800b378:	f7ff fef2 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800b37c:	2021      	movs	r0, #33	@ 0x21
 800b37e:	f7ff ff1e 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 800b382:	200c      	movs	r0, #12
 800b384:	f7ff ff1b 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 800b388:	2002      	movs	r0, #2
 800b38a:	f7ff ff18 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 800b38e:	20f0      	movs	r0, #240	@ 0xf0
 800b390:	f7ff fee6 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 800b394:	2045      	movs	r0, #69	@ 0x45
 800b396:	f7ff ff12 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800b39a:	2009      	movs	r0, #9
 800b39c:	f7ff ff0f 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800b3a0:	2008      	movs	r0, #8
 800b3a2:	f7ff ff0c 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800b3a6:	2008      	movs	r0, #8
 800b3a8:	f7ff ff09 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800b3ac:	2026      	movs	r0, #38	@ 0x26
 800b3ae:	f7ff ff06 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 800b3b2:	202a      	movs	r0, #42	@ 0x2a
 800b3b4:	f7ff ff03 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 800b3b8:	20f1      	movs	r0, #241	@ 0xf1
 800b3ba:	f7ff fed1 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800b3be:	2043      	movs	r0, #67	@ 0x43
 800b3c0:	f7ff fefd 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800b3c4:	2070      	movs	r0, #112	@ 0x70
 800b3c6:	f7ff fefa 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800b3ca:	2072      	movs	r0, #114	@ 0x72
 800b3cc:	f7ff fef7 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 800b3d0:	2036      	movs	r0, #54	@ 0x36
 800b3d2:	f7ff fef4 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800b3d6:	2037      	movs	r0, #55	@ 0x37
 800b3d8:	f7ff fef1 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800b3dc:	206f      	movs	r0, #111	@ 0x6f
 800b3de:	f7ff feee 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 800b3e2:	20f2      	movs	r0, #242	@ 0xf2
 800b3e4:	f7ff febc 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 800b3e8:	2045      	movs	r0, #69	@ 0x45
 800b3ea:	f7ff fee8 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800b3ee:	2009      	movs	r0, #9
 800b3f0:	f7ff fee5 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800b3f4:	2008      	movs	r0, #8
 800b3f6:	f7ff fee2 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800b3fa:	2008      	movs	r0, #8
 800b3fc:	f7ff fedf 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800b400:	2026      	movs	r0, #38	@ 0x26
 800b402:	f7ff fedc 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 800b406:	202a      	movs	r0, #42	@ 0x2a
 800b408:	f7ff fed9 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800b40c:	20f3      	movs	r0, #243	@ 0xf3
 800b40e:	f7ff fea7 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800b412:	2043      	movs	r0, #67	@ 0x43
 800b414:	f7ff fed3 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800b418:	2070      	movs	r0, #112	@ 0x70
 800b41a:	f7ff fed0 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800b41e:	2072      	movs	r0, #114	@ 0x72
 800b420:	f7ff fecd 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 800b424:	2036      	movs	r0, #54	@ 0x36
 800b426:	f7ff feca 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800b42a:	2037      	movs	r0, #55	@ 0x37
 800b42c:	f7ff fec7 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800b430:	206f      	movs	r0, #111	@ 0x6f
 800b432:	f7ff fec4 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 800b436:	20ed      	movs	r0, #237	@ 0xed
 800b438:	f7ff fe92 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 800b43c:	201b      	movs	r0, #27
 800b43e:	f7ff febe 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 800b442:	200b      	movs	r0, #11
 800b444:	f7ff febb 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 800b448:	20ae      	movs	r0, #174	@ 0xae
 800b44a:	f7ff fe89 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 800b44e:	2077      	movs	r0, #119	@ 0x77
 800b450:	f7ff feb5 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 800b454:	20cd      	movs	r0, #205	@ 0xcd
 800b456:	f7ff fe83 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 800b45a:	2063      	movs	r0, #99	@ 0x63
 800b45c:	f7ff feaf 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 800b460:	2070      	movs	r0, #112	@ 0x70
 800b462:	f7ff fe7d 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 800b466:	2007      	movs	r0, #7
 800b468:	f7ff fea9 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800b46c:	2007      	movs	r0, #7
 800b46e:	f7ff fea6 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800b472:	2004      	movs	r0, #4
 800b474:	f7ff fea3 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 800b478:	200e      	movs	r0, #14
 800b47a:	f7ff fea0 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800b47e:	200f      	movs	r0, #15
 800b480:	f7ff fe9d 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800b484:	2009      	movs	r0, #9
 800b486:	f7ff fe9a 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800b48a:	2007      	movs	r0, #7
 800b48c:	f7ff fe97 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800b490:	2008      	movs	r0, #8
 800b492:	f7ff fe94 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 800b496:	2003      	movs	r0, #3
 800b498:	f7ff fe91 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 800b49c:	20e8      	movs	r0, #232	@ 0xe8
 800b49e:	f7ff fe5f 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 800b4a2:	2034      	movs	r0, #52	@ 0x34
 800b4a4:	f7ff fe8b 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 800b4a8:	2062      	movs	r0, #98	@ 0x62
 800b4aa:	f7ff fe59 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800b4ae:	2018      	movs	r0, #24
 800b4b0:	f7ff fe85 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 800b4b4:	200d      	movs	r0, #13
 800b4b6:	f7ff fe82 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800b4ba:	2071      	movs	r0, #113	@ 0x71
 800b4bc:	f7ff fe7f 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 800b4c0:	20ed      	movs	r0, #237	@ 0xed
 800b4c2:	f7ff fe7c 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800b4c6:	2070      	movs	r0, #112	@ 0x70
 800b4c8:	f7ff fe79 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800b4cc:	2070      	movs	r0, #112	@ 0x70
 800b4ce:	f7ff fe76 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 800b4d2:	2018      	movs	r0, #24
 800b4d4:	f7ff fe73 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800b4d8:	200f      	movs	r0, #15
 800b4da:	f7ff fe70 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800b4de:	2071      	movs	r0, #113	@ 0x71
 800b4e0:	f7ff fe6d 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 800b4e4:	20ef      	movs	r0, #239	@ 0xef
 800b4e6:	f7ff fe6a 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800b4ea:	2070      	movs	r0, #112	@ 0x70
 800b4ec:	f7ff fe67 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800b4f0:	2070      	movs	r0, #112	@ 0x70
 800b4f2:	f7ff fe64 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 800b4f6:	2063      	movs	r0, #99	@ 0x63
 800b4f8:	f7ff fe32 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800b4fc:	2018      	movs	r0, #24
 800b4fe:	f7ff fe5e 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 800b502:	2011      	movs	r0, #17
 800b504:	f7ff fe5b 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800b508:	2071      	movs	r0, #113	@ 0x71
 800b50a:	f7ff fe58 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800b50e:	20f1      	movs	r0, #241	@ 0xf1
 800b510:	f7ff fe55 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800b514:	2070      	movs	r0, #112	@ 0x70
 800b516:	f7ff fe52 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800b51a:	2070      	movs	r0, #112	@ 0x70
 800b51c:	f7ff fe4f 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 800b520:	2018      	movs	r0, #24
 800b522:	f7ff fe4c 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 800b526:	2013      	movs	r0, #19
 800b528:	f7ff fe49 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800b52c:	2071      	movs	r0, #113	@ 0x71
 800b52e:	f7ff fe46 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 800b532:	20f3      	movs	r0, #243	@ 0xf3
 800b534:	f7ff fe43 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800b538:	2070      	movs	r0, #112	@ 0x70
 800b53a:	f7ff fe40 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800b53e:	2070      	movs	r0, #112	@ 0x70
 800b540:	f7ff fe3d 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 800b544:	2064      	movs	r0, #100	@ 0x64
 800b546:	f7ff fe0b 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 800b54a:	2028      	movs	r0, #40	@ 0x28
 800b54c:	f7ff fe37 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 800b550:	2029      	movs	r0, #41	@ 0x29
 800b552:	f7ff fe34 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800b556:	20f1      	movs	r0, #241	@ 0xf1
 800b558:	f7ff fe31 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800b55c:	2001      	movs	r0, #1
 800b55e:	f7ff fe2e 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800b562:	20f1      	movs	r0, #241	@ 0xf1
 800b564:	f7ff fe2b 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800b568:	2000      	movs	r0, #0
 800b56a:	f7ff fe28 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800b56e:	2007      	movs	r0, #7
 800b570:	f7ff fe25 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 800b574:	2066      	movs	r0, #102	@ 0x66
 800b576:	f7ff fdf3 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 800b57a:	203c      	movs	r0, #60	@ 0x3c
 800b57c:	f7ff fe1f 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800b580:	2000      	movs	r0, #0
 800b582:	f7ff fe1c 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 800b586:	20cd      	movs	r0, #205	@ 0xcd
 800b588:	f7ff fe19 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800b58c:	2067      	movs	r0, #103	@ 0x67
 800b58e:	f7ff fe16 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 800b592:	2045      	movs	r0, #69	@ 0x45
 800b594:	f7ff fe13 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 800b598:	2045      	movs	r0, #69	@ 0x45
 800b59a:	f7ff fe10 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800b59e:	2010      	movs	r0, #16
 800b5a0:	f7ff fe0d 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	f7ff fe0a 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	f7ff fe07 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	f7ff fe04 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 800b5b6:	2067      	movs	r0, #103	@ 0x67
 800b5b8:	f7ff fdd2 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800b5bc:	2000      	movs	r0, #0
 800b5be:	f7ff fdfe 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 800b5c2:	203c      	movs	r0, #60	@ 0x3c
 800b5c4:	f7ff fdfb 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	f7ff fdf8 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	f7ff fdf5 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800b5d4:	2000      	movs	r0, #0
 800b5d6:	f7ff fdf2 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800b5da:	2001      	movs	r0, #1
 800b5dc:	f7ff fdef 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 800b5e0:	2054      	movs	r0, #84	@ 0x54
 800b5e2:	f7ff fdec 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800b5e6:	2010      	movs	r0, #16
 800b5e8:	f7ff fde9 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 800b5ec:	2032      	movs	r0, #50	@ 0x32
 800b5ee:	f7ff fde6 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 800b5f2:	2098      	movs	r0, #152	@ 0x98
 800b5f4:	f7ff fde3 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 800b5f8:	2074      	movs	r0, #116	@ 0x74
 800b5fa:	f7ff fdb1 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800b5fe:	2010      	movs	r0, #16
 800b600:	f7ff fddd 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 800b604:	2085      	movs	r0, #133	@ 0x85
 800b606:	f7ff fdda 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800b60a:	2080      	movs	r0, #128	@ 0x80
 800b60c:	f7ff fdd7 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800b610:	2000      	movs	r0, #0
 800b612:	f7ff fdd4 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800b616:	2000      	movs	r0, #0
 800b618:	f7ff fdd1 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800b61c:	204e      	movs	r0, #78	@ 0x4e
 800b61e:	f7ff fdce 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800b622:	2000      	movs	r0, #0
 800b624:	f7ff fdcb 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 800b628:	2098      	movs	r0, #152	@ 0x98
 800b62a:	f7ff fd99 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 800b62e:	203e      	movs	r0, #62	@ 0x3e
 800b630:	f7ff fdc5 	bl	800b1be <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800b634:	2007      	movs	r0, #7
 800b636:	f7ff fdc2 	bl	800b1be <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 800b63a:	2035      	movs	r0, #53	@ 0x35
 800b63c:	f7ff fd90 	bl	800b160 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 800b640:	2021      	movs	r0, #33	@ 0x21
 800b642:	f7ff fd8d 	bl	800b160 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 800b646:	2011      	movs	r0, #17
 800b648:	f7ff fd8a 	bl	800b160 <GC9A01_write_command>
    HAL_Delay(120);
 800b64c:	2078      	movs	r0, #120	@ 0x78
 800b64e:	f7f5 f9b1 	bl	80009b4 <HAL_Delay>
    GC9A01_write_command(0x29);
 800b652:	2029      	movs	r0, #41	@ 0x29
 800b654:	f7ff fd84 	bl	800b160 <GC9A01_write_command>
    HAL_Delay(20);
 800b658:	2014      	movs	r0, #20
 800b65a:	f7f5 f9ab 	bl	80009b4 <HAL_Delay>
    
}
 800b65e:	bf00      	nop
 800b660:	bd80      	pop	{r7, pc}

0800b662 <GC9A01_set_frame>:

void GC9A01_set_frame(struct GC9A01_frame frame) {
 800b662:	b580      	push	{r7, lr}
 800b664:	b084      	sub	sp, #16
 800b666:	af00      	add	r7, sp, #0
 800b668:	463b      	mov	r3, r7
 800b66a:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t data[4];
    
    GC9A01_write_command(COL_ADDR_SET);
 800b66e:	202a      	movs	r0, #42	@ 0x2a
 800b670:	f7ff fd76 	bl	800b160 <GC9A01_write_command>
    data[0] = (frame.start.X >> 8) & 0xFF;
 800b674:	883b      	ldrh	r3, [r7, #0]
 800b676:	0a1b      	lsrs	r3, r3, #8
 800b678:	b29b      	uxth	r3, r3
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.X & 0xFF;
 800b67e:	883b      	ldrh	r3, [r7, #0]
 800b680:	b2db      	uxtb	r3, r3
 800b682:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.X >> 8) & 0xFF;
 800b684:	88bb      	ldrh	r3, [r7, #4]
 800b686:	0a1b      	lsrs	r3, r3, #8
 800b688:	b29b      	uxth	r3, r3
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.X & 0xFF;
 800b68e:	88bb      	ldrh	r3, [r7, #4]
 800b690:	b2db      	uxtb	r3, r3
 800b692:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 800b694:	f107 030c 	add.w	r3, r7, #12
 800b698:	2104      	movs	r1, #4
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff fd77 	bl	800b18e <GC9A01_write_data>

    GC9A01_write_command(ROW_ADDR_SET);
 800b6a0:	202b      	movs	r0, #43	@ 0x2b
 800b6a2:	f7ff fd5d 	bl	800b160 <GC9A01_write_command>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 800b6a6:	887b      	ldrh	r3, [r7, #2]
 800b6a8:	0a1b      	lsrs	r3, r3, #8
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.Y & 0xFF;
 800b6b0:	887b      	ldrh	r3, [r7, #2]
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.Y >> 8) & 0xFF;
 800b6b6:	88fb      	ldrh	r3, [r7, #6]
 800b6b8:	0a1b      	lsrs	r3, r3, #8
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.Y & 0xFF;
 800b6c0:	88fb      	ldrh	r3, [r7, #6]
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 800b6c6:	f107 030c 	add.w	r3, r7, #12
 800b6ca:	2104      	movs	r1, #4
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7ff fd5e 	bl	800b18e <GC9A01_write_data>
    
}
 800b6d2:	bf00      	nop
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <GC9A01_sleep_mode>:


void GC9A01_sleep_mode(uint8_t command)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	71fb      	strb	r3, [r7, #7]

	if(command)
 800b6e4:	79fb      	ldrb	r3, [r7, #7]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d003      	beq.n	800b6f2 <GC9A01_sleep_mode+0x18>
		GC9A01_write_command(SLEEP_MODE_ON);
 800b6ea:	2010      	movs	r0, #16
 800b6ec:	f7ff fd38 	bl	800b160 <GC9A01_write_command>
 800b6f0:	e002      	b.n	800b6f8 <GC9A01_sleep_mode+0x1e>
	else
		GC9A01_write_command(SLEEP_MODE_OFF);
 800b6f2:	2011      	movs	r0, #17
 800b6f4:	f7ff fd34 	bl	800b160 <GC9A01_write_command>

	HAL_Delay(120);
 800b6f8:	2078      	movs	r0, #120	@ 0x78
 800b6fa:	f7f5 f95b 	bl	80009b4 <HAL_Delay>

}
 800b6fe:	bf00      	nop
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
	...

0800b708 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	460b      	mov	r3, r1
 800b712:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 800b714:	887a      	ldrh	r2, [r7, #2]
 800b716:	f04f 33ff 	mov.w	r3, #4294967295
 800b71a:	6879      	ldr	r1, [r7, #4]
 800b71c:	4806      	ldr	r0, [pc, #24]	@ (800b738 <GC9A01_spi_tx+0x30>)
 800b71e:	f7fe f8fd 	bl	800991c <HAL_SPI_Transmit>
 800b722:	4603      	mov	r3, r0
 800b724:	461a      	mov	r2, r3
 800b726:	4b05      	ldr	r3, [pc, #20]	@ (800b73c <GC9A01_spi_tx+0x34>)
 800b728:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 800b72a:	4b04      	ldr	r3, [pc, #16]	@ (800b73c <GC9A01_spi_tx+0x34>)
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
		return;

}
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	2000020c 	.word	0x2000020c
 800b73c:	200000fc 	.word	0x200000fc

0800b740 <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af02      	add	r7, sp, #8
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
 800b74c:	603b      	str	r3, [r7, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 800b74e:	4a11      	ldr	r2, [pc, #68]	@ (800b794 <JPEG_Decode_DMA+0x54>)
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 800b754:	4a10      	ldr	r2, [pc, #64]	@ (800b798 <JPEG_Decode_DMA+0x58>)
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	6013      	str	r3, [r2, #0]
  Input_frameIndex=0;
 800b75a:	4b10      	ldr	r3, [pc, #64]	@ (800b79c <JPEG_Decode_DMA+0x5c>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	601a      	str	r2, [r3, #0]
  Input_frameSize = FrameSize;
 800b760:	4a0f      	ldr	r2, [pc, #60]	@ (800b7a0 <JPEG_Decode_DMA+0x60>)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6013      	str	r3, [r2, #0]

  Jpeg_HWDecodingEnd = 0;
 800b766:	4b0f      	ldr	r3, [pc, #60]	@ (800b7a4 <JPEG_Decode_DMA+0x64>)
 800b768:	2200      	movs	r2, #0
 800b76a:	601a      	str	r2, [r3, #0]
  
  /* Start JPEG decoding with DMA method */
  HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT);
 800b76c:	4b09      	ldr	r3, [pc, #36]	@ (800b794 <JPEG_Decode_DMA+0x54>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4619      	mov	r1, r3
 800b772:	4b09      	ldr	r3, [pc, #36]	@ (800b798 <JPEG_Decode_DMA+0x58>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	4613      	mov	r3, r2
 800b780:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f7f6 f878 	bl	800187a <HAL_JPEG_Decode_DMA>
  
  
  return 0;
 800b78a:	2300      	movs	r3, #0
  
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	20000108 	.word	0x20000108
 800b798:	20000104 	.word	0x20000104
 800b79c:	20000110 	.word	0x20000110
 800b7a0:	2000010c 	.word	0x2000010c
 800b7a4:	20000100 	.word	0x20000100

0800b7a8 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
}
 800b7b2:	bf00      	nop
 800b7b4:	370c      	adds	r7, #12
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
	...

0800b7c0 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 800b7ca:	4b19      	ldr	r3, [pc, #100]	@ (800b830 <HAL_JPEG_GetDataCallback+0x70>)
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	4a17      	ldr	r2, [pc, #92]	@ (800b830 <HAL_JPEG_GetDataCallback+0x70>)
 800b7d4:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 800b7d6:	4b16      	ldr	r3, [pc, #88]	@ (800b830 <HAL_JPEG_GetDataCallback+0x70>)
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	4b16      	ldr	r3, [pc, #88]	@ (800b834 <HAL_JPEG_GetDataCallback+0x74>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d218      	bcs.n	800b814 <HAL_JPEG_GetDataCallback+0x54>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 800b7e2:	4b15      	ldr	r3, [pc, #84]	@ (800b838 <HAL_JPEG_GetDataCallback+0x78>)
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	4a13      	ldr	r2, [pc, #76]	@ (800b838 <HAL_JPEG_GetDataCallback+0x78>)
 800b7ec:	6013      	str	r3, [r2, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 800b7ee:	4b11      	ldr	r3, [pc, #68]	@ (800b834 <HAL_JPEG_GetDataCallback+0x74>)
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	4b0f      	ldr	r3, [pc, #60]	@ (800b830 <HAL_JPEG_GetDataCallback+0x70>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7fc:	d303      	bcc.n	800b806 <HAL_JPEG_GetDataCallback+0x46>
    {
      inDataLength = CHUNK_SIZE_IN;
 800b7fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b802:	60fb      	str	r3, [r7, #12]
 800b804:	e008      	b.n	800b818 <HAL_JPEG_GetDataCallback+0x58>
    }
    else
    {
      inDataLength = Input_frameSize - Input_frameIndex;
 800b806:	4b0b      	ldr	r3, [pc, #44]	@ (800b834 <HAL_JPEG_GetDataCallback+0x74>)
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	4b09      	ldr	r3, [pc, #36]	@ (800b830 <HAL_JPEG_GetDataCallback+0x70>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	1ad3      	subs	r3, r2, r3
 800b810:	60fb      	str	r3, [r7, #12]
 800b812:	e001      	b.n	800b818 <HAL_JPEG_GetDataCallback+0x58>
    }    
  }
  else
  {
    inDataLength = 0; 
 800b814:	2300      	movs	r3, #0
 800b816:	60fb      	str	r3, [r7, #12]
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 800b818:	4b07      	ldr	r3, [pc, #28]	@ (800b838 <HAL_JPEG_GetDataCallback+0x78>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f7f6 f8e5 	bl	80019f0 <HAL_JPEG_ConfigInputBuffer>
  
}
 800b826:	bf00      	nop
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	20000110 	.word	0x20000110
 800b834:	2000010c 	.word	0x2000010c
 800b838:	20000108 	.word	0x20000108

0800b83c <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 800b848:	4b08      	ldr	r3, [pc, #32]	@ (800b86c <HAL_JPEG_DataReadyCallback+0x30>)
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4413      	add	r3, r2
 800b850:	4a06      	ldr	r2, [pc, #24]	@ (800b86c <HAL_JPEG_DataReadyCallback+0x30>)
 800b852:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 800b854:	4b05      	ldr	r3, [pc, #20]	@ (800b86c <HAL_JPEG_DataReadyCallback+0x30>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b85c:	4619      	mov	r1, r3
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f7f6 f8d8 	bl	8001a14 <HAL_JPEG_ConfigOutputBuffer>
}
 800b864:	bf00      	nop
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	20000104 	.word	0x20000104

0800b870 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  Error_Handler();
 800b878:	f000 f836 	bl	800b8e8 <Error_Handler>
}
 800b87c:	bf00      	nop
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1; 
 800b88c:	4b04      	ldr	r3, [pc, #16]	@ (800b8a0 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 800b88e:	2201      	movs	r2, #1
 800b890:	601a      	str	r2, [r3, #0]
}
 800b892:	bf00      	nop
 800b894:	370c      	adds	r7, #12
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	20000100 	.word	0x20000100

0800b8a4 <main>:
RTC_HandleTypeDef hrtc;
SPI_HandleTypeDef hspi5;


int main(void)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	af00      	add	r7, sp, #0

  // System configurations
  //MPU_Config();							// Parameters configuration for external SDRAM
  CPU_CACHE_Enable();
 800b8a8:	f000 f8ba 	bl	800ba20 <CPU_CACHE_Enable>
  HAL_Init();
 800b8ac:	f7f4 fff0 	bl	8000890 <HAL_Init>
  SystemClock_Config(); 				// System-Clock; HSE 200MHz, RTC-Clock; LSE 32kHz
 800b8b0:	f000 f81e 	bl	800b8f0 <SystemClock_Config>
  
  // Microcntroller's peripherals initialization
  MX_GPIO_Init(1);
 800b8b4:	2001      	movs	r0, #1
 800b8b6:	f000 f975 	bl	800bba4 <MX_GPIO_Init>
  MX_SPI5_Init();
 800b8ba:	f000 f91f 	bl	800bafc <MX_SPI5_Init>
  MX_RTC_Init();
 800b8be:	f000 fa4f 	bl	800bd60 <MX_RTC_Init>

  // External peripherals initialization
  GC9A01_init();
 800b8c2:	f7ff fc8a 	bl	800b1da <GC9A01_init>
  //BSP_SDRAM_Init(0);

  // JPEG initialization
  JPEG_Handle.Instance = JPEG;
 800b8c6:	4b06      	ldr	r3, [pc, #24]	@ (800b8e0 <main+0x3c>)
 800b8c8:	4a06      	ldr	r2, [pc, #24]	@ (800b8e4 <main+0x40>)
 800b8ca:	601a      	str	r2, [r3, #0]
  HAL_JPEG_Init(&JPEG_Handle);    
 800b8cc:	4804      	ldr	r0, [pc, #16]	@ (800b8e0 <main+0x3c>)
 800b8ce:	f7f5 febd 	bl	800164c <HAL_JPEG_Init>

////////////////////////////////////////////////	APPLICATION SECTION

  // Application initialization
  smart_watch_init();
 800b8d2:	f000 fb79 	bl	800bfc8 <smart_watch_init>

  // Application process
  smart_watch_process();
 800b8d6:	f000 fba5 	bl	800c024 <smart_watch_process>

  while (1);
 800b8da:	bf00      	nop
 800b8dc:	e7fd      	b.n	800b8da <main+0x36>
 800b8de:	bf00      	nop
 800b8e0:	20000114 	.word	0x20000114
 800b8e4:	52003000 	.word	0x52003000

0800b8e8 <Error_Handler>:

}


void Error_Handler(void)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	af00      	add	r7, sp, #0

  while(1);
 800b8ec:	bf00      	nop
 800b8ee:	e7fd      	b.n	800b8ec <Error_Handler+0x4>

0800b8f0 <SystemClock_Config>:
// PLL_Q                          = 4
// PLL_R                          = 2
// VDD(V)                         = 3.3
// Flash Latency(WS)              = 4
void SystemClock_Config(void)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b09e      	sub	sp, #120	@ 0x78
 800b8f4:	af00      	add	r7, sp, #0

  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800b8fc:	2004      	movs	r0, #4
 800b8fe:	f7f8 f919 	bl	8003b34 <HAL_PWREx_ConfigSupply>

  // The voltage scaling allows optimizing the power consumption when the device is
  // clocked below the maximum system frequency
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b902:	2300      	movs	r3, #0
 800b904:	607b      	str	r3, [r7, #4]
 800b906:	4b43      	ldr	r3, [pc, #268]	@ (800ba14 <SystemClock_Config+0x124>)
 800b908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b90a:	4a42      	ldr	r2, [pc, #264]	@ (800ba14 <SystemClock_Config+0x124>)
 800b90c:	f023 0301 	bic.w	r3, r3, #1
 800b910:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b912:	4b40      	ldr	r3, [pc, #256]	@ (800ba14 <SystemClock_Config+0x124>)
 800b914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b916:	f003 0301 	and.w	r3, r3, #1
 800b91a:	607b      	str	r3, [r7, #4]
 800b91c:	4b3e      	ldr	r3, [pc, #248]	@ (800ba18 <SystemClock_Config+0x128>)
 800b91e:	699b      	ldr	r3, [r3, #24]
 800b920:	4a3d      	ldr	r2, [pc, #244]	@ (800ba18 <SystemClock_Config+0x128>)
 800b922:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b926:	6193      	str	r3, [r2, #24]
 800b928:	4b3b      	ldr	r3, [pc, #236]	@ (800ba18 <SystemClock_Config+0x128>)
 800b92a:	699b      	ldr	r3, [r3, #24]
 800b92c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b930:	607b      	str	r3, [r7, #4]
 800b932:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800b934:	bf00      	nop
 800b936:	4b38      	ldr	r3, [pc, #224]	@ (800ba18 <SystemClock_Config+0x128>)
 800b938:	699b      	ldr	r3, [r3, #24]
 800b93a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b93e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b942:	d1f8      	bne.n	800b936 <SystemClock_Config+0x46>

  // Clocks configurations
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 800b944:	2305      	movs	r3, #5
 800b946:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b948:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800b94c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800b94e:	2301      	movs	r3, #1
 800b950:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800b952:	2300      	movs	r3, #0
 800b954:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800b956:	2300      	movs	r3, #0
 800b958:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b95a:	2302      	movs	r3, #2
 800b95c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b95e:	2302      	movs	r3, #2
 800b960:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800b962:	2305      	movs	r3, #5
 800b964:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 70;
 800b966:	2346      	movs	r3, #70	@ 0x46
 800b968:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800b96a:	2300      	movs	r3, #0
 800b96c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800b96e:	2302      	movs	r3, #2
 800b970:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800b972:	2302      	movs	r3, #2
 800b974:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800b976:	2304      	movs	r3, #4
 800b978:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800b97a:	2300      	movs	r3, #0
 800b97c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800b97e:	2308      	movs	r3, #8
 800b980:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b982:	f107 0308 	add.w	r3, r7, #8
 800b986:	4618      	mov	r0, r3
 800b988:	f7f8 f92e 	bl	8003be8 <HAL_RCC_OscConfig>
 800b98c:	4603      	mov	r3, r0
 800b98e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 800b992:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800b99a:	f7ff ffa5 	bl	800b8e8 <Error_Handler>
  }

  // CLocks assignment to peripheral buses
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800b99e:	233f      	movs	r3, #63	@ 0x3f
 800b9a0:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800b9aa:	2308      	movs	r3, #8
 800b9ac:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800b9ae:	2340      	movs	r3, #64	@ 0x40
 800b9b0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800b9b2:	2340      	movs	r3, #64	@ 0x40
 800b9b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800b9b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b9ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800b9bc:	2340      	movs	r3, #64	@ 0x40
 800b9be:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800b9c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800b9c4:	2104      	movs	r1, #4
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7f8 fd68 	bl	800449c <HAL_RCC_ClockConfig>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 800b9d2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <SystemClock_Config+0xee>
  {
    Error_Handler();
 800b9da:	f7ff ff85 	bl	800b8e8 <Error_Handler>
        - The activation of the CSI clock
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  __HAL_RCC_CSI_ENABLE() ;
 800b9de:	4b0f      	ldr	r3, [pc, #60]	@ (800ba1c <SystemClock_Config+0x12c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a0e      	ldr	r2, [pc, #56]	@ (800ba1c <SystemClock_Config+0x12c>)
 800b9e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9e8:	6013      	str	r3, [r2, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800b9ea:	4b0c      	ldr	r3, [pc, #48]	@ (800ba1c <SystemClock_Config+0x12c>)
 800b9ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b9f0:	4a0a      	ldr	r2, [pc, #40]	@ (800ba1c <SystemClock_Config+0x12c>)
 800b9f2:	f043 0302 	orr.w	r3, r3, #2
 800b9f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b9fa:	4b08      	ldr	r3, [pc, #32]	@ (800ba1c <SystemClock_Config+0x12c>)
 800b9fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ba00:	f003 0302 	and.w	r3, r3, #2
 800ba04:	603b      	str	r3, [r7, #0]
 800ba06:	683b      	ldr	r3, [r7, #0]
  HAL_EnableCompensationCell();
 800ba08:	f7f5 f824 	bl	8000a54 <HAL_EnableCompensationCell>

}
 800ba0c:	bf00      	nop
 800ba0e:	3778      	adds	r7, #120	@ 0x78
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	58000400 	.word	0x58000400
 800ba18:	58024800 	.word	0x58024800
 800ba1c:	58024400 	.word	0x58024400

0800ba20 <CPU_CACHE_Enable>:
}
*/


void CPU_CACHE_Enable(void)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800ba26:	4b34      	ldr	r3, [pc, #208]	@ (800baf8 <CPU_CACHE_Enable+0xd8>)
 800ba28:	695b      	ldr	r3, [r3, #20]
 800ba2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d11b      	bne.n	800ba6a <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800ba32:	f3bf 8f4f 	dsb	sy
}
 800ba36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ba38:	f3bf 8f6f 	isb	sy
}
 800ba3c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800ba3e:	4b2e      	ldr	r3, [pc, #184]	@ (800baf8 <CPU_CACHE_Enable+0xd8>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800ba46:	f3bf 8f4f 	dsb	sy
}
 800ba4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ba4c:	f3bf 8f6f 	isb	sy
}
 800ba50:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800ba52:	4b29      	ldr	r3, [pc, #164]	@ (800baf8 <CPU_CACHE_Enable+0xd8>)
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	4a28      	ldr	r2, [pc, #160]	@ (800baf8 <CPU_CACHE_Enable+0xd8>)
 800ba58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba5c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800ba5e:	f3bf 8f4f 	dsb	sy
}
 800ba62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ba64:	f3bf 8f6f 	isb	sy
}
 800ba68:	e000      	b.n	800ba6c <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800ba6a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800ba6c:	4b22      	ldr	r3, [pc, #136]	@ (800baf8 <CPU_CACHE_Enable+0xd8>)
 800ba6e:	695b      	ldr	r3, [r3, #20]
 800ba70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d138      	bne.n	800baea <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800ba78:	4b1f      	ldr	r3, [pc, #124]	@ (800baf8 <CPU_CACHE_Enable+0xd8>)
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800ba80:	f3bf 8f4f 	dsb	sy
}
 800ba84:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800ba86:	4b1c      	ldr	r3, [pc, #112]	@ (800baf8 <CPU_CACHE_Enable+0xd8>)
 800ba88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba8c:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	0b5b      	lsrs	r3, r3, #13
 800ba92:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ba96:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	08db      	lsrs	r3, r3, #3
 800ba9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800baa0:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	015a      	lsls	r2, r3, #5
 800baa6:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800baaa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800bab0:	4911      	ldr	r1, [pc, #68]	@ (800baf8 <CPU_CACHE_Enable+0xd8>)
 800bab2:	4313      	orrs	r3, r2
 800bab4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	1e5a      	subs	r2, r3, #1
 800babc:	607a      	str	r2, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d1ef      	bne.n	800baa2 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	1e5a      	subs	r2, r3, #1
 800bac6:	60ba      	str	r2, [r7, #8]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1e5      	bne.n	800ba98 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800bacc:	f3bf 8f4f 	dsb	sy
}
 800bad0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800bad2:	4b09      	ldr	r3, [pc, #36]	@ (800baf8 <CPU_CACHE_Enable+0xd8>)
 800bad4:	695b      	ldr	r3, [r3, #20]
 800bad6:	4a08      	ldr	r2, [pc, #32]	@ (800baf8 <CPU_CACHE_Enable+0xd8>)
 800bad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800badc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800bade:	f3bf 8f4f 	dsb	sy
}
 800bae2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bae4:	f3bf 8f6f 	isb	sy
}
 800bae8:	e000      	b.n	800baec <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800baea:	bf00      	nop

  SCB_EnableICache();
  SCB_EnableDCache();

}
 800baec:	bf00      	nop
 800baee:	3714      	adds	r7, #20
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr
 800baf8:	e000ed00 	.word	0xe000ed00

0800bafc <MX_SPI5_Init>:


void MX_SPI5_Init(void)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800bb00:	4b26      	ldr	r3, [pc, #152]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb02:	4a27      	ldr	r2, [pc, #156]	@ (800bba0 <MX_SPI5_Init+0xa4>)
 800bb04:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800bb06:	4b25      	ldr	r3, [pc, #148]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb08:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800bb0c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800bb0e:	4b23      	ldr	r3, [pc, #140]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800bb14:	4b21      	ldr	r3, [pc, #132]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb16:	2207      	movs	r2, #7
 800bb18:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bb1a:	4b20      	ldr	r3, [pc, #128]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800bb20:	4b1e      	ldr	r3, [pc, #120]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800bb26:	4b1d      	ldr	r3, [pc, #116]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800bb2c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bb2e:	4b1b      	ldr	r3, [pc, #108]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bb34:	4b19      	ldr	r3, [pc, #100]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb36:	2200      	movs	r2, #0
 800bb38:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800bb3a:	4b18      	ldr	r3, [pc, #96]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb40:	4b16      	ldr	r3, [pc, #88]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800bb46:	4b15      	ldr	r3, [pc, #84]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800bb4c:	4b13      	ldr	r3, [pc, #76]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800bb52:	4b12      	ldr	r3, [pc, #72]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800bb58:	4b10      	ldr	r3, [pc, #64]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800bb5e:	4b0f      	ldr	r3, [pc, #60]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800bb64:	4b0d      	ldr	r3, [pc, #52]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb66:	2200      	movs	r2, #0
 800bb68:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800bb6a:	4b0c      	ldr	r3, [pc, #48]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800bb70:	4b0a      	ldr	r3, [pc, #40]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb72:	2200      	movs	r2, #0
 800bb74:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800bb76:	4b09      	ldr	r3, [pc, #36]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb78:	2200      	movs	r2, #0
 800bb7a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800bb7c:	4b07      	ldr	r3, [pc, #28]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb7e:	2200      	movs	r2, #0
 800bb80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800bb82:	4b06      	ldr	r3, [pc, #24]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb84:	2200      	movs	r2, #0
 800bb86:	659a      	str	r2, [r3, #88]	@ 0x58

  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800bb88:	4804      	ldr	r0, [pc, #16]	@ (800bb9c <MX_SPI5_Init+0xa0>)
 800bb8a:	f7fd fda3 	bl	80096d4 <HAL_SPI_Init>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d001      	beq.n	800bb98 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 800bb94:	f7ff fea8 	bl	800b8e8 <Error_Handler>
  }


}
 800bb98:	bf00      	nop
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	2000020c 	.word	0x2000020c
 800bba0:	40015000 	.word	0x40015000

0800bba4 <MX_GPIO_Init>:


void MX_GPIO_Init(uint8_t it_en)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b08e      	sub	sp, #56	@ 0x38
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	4603      	mov	r3, r0
 800bbac:	71fb      	strb	r3, [r7, #7]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	601a      	str	r2, [r3, #0]
 800bbb6:	605a      	str	r2, [r3, #4]
 800bbb8:	609a      	str	r2, [r3, #8]
 800bbba:	60da      	str	r2, [r3, #12]
 800bbbc:	611a      	str	r2, [r3, #16]


  // GPIO Ports Clock Enable
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bbbe:	4b65      	ldr	r3, [pc, #404]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bbc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbc4:	4a63      	ldr	r2, [pc, #396]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bbc6:	f043 0304 	orr.w	r3, r3, #4
 800bbca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bbce:	4b61      	ldr	r3, [pc, #388]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bbd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbd4:	f003 0304 	and.w	r3, r3, #4
 800bbd8:	623b      	str	r3, [r7, #32]
 800bbda:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800bbdc:	4b5d      	ldr	r3, [pc, #372]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bbde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbe2:	4a5c      	ldr	r2, [pc, #368]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bbe4:	f043 0308 	orr.w	r3, r3, #8
 800bbe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bbec:	4b59      	ldr	r3, [pc, #356]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bbee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bbf2:	f003 0308 	and.w	r3, r3, #8
 800bbf6:	61fb      	str	r3, [r7, #28]
 800bbf8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbfa:	4b56      	ldr	r3, [pc, #344]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bbfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc00:	4a54      	ldr	r2, [pc, #336]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bc02:	f043 0301 	orr.w	r3, r3, #1
 800bc06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bc0a:	4b52      	ldr	r3, [pc, #328]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bc0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc10:	f003 0301 	and.w	r3, r3, #1
 800bc14:	61bb      	str	r3, [r7, #24]
 800bc16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800bc18:	4b4e      	ldr	r3, [pc, #312]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bc1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc1e:	4a4d      	ldr	r2, [pc, #308]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bc20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bc28:	4b4a      	ldr	r3, [pc, #296]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bc2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc32:	617b      	str	r3, [r7, #20]
 800bc34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bc36:	4b47      	ldr	r3, [pc, #284]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bc38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc3c:	4a45      	ldr	r2, [pc, #276]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bc3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bc46:	4b43      	ldr	r3, [pc, #268]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bc48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc50:	613b      	str	r3, [r7, #16]
 800bc52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800bc54:	4b3f      	ldr	r3, [pc, #252]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bc56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc5a:	4a3e      	ldr	r2, [pc, #248]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bc5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bc60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bc64:	4b3b      	ldr	r3, [pc, #236]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bc66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bc6e:	60fb      	str	r3, [r7, #12]
 800bc70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800bc72:	4b38      	ldr	r3, [pc, #224]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bc74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc78:	4a36      	ldr	r2, [pc, #216]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bc7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bc7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800bc82:	4b34      	ldr	r3, [pc, #208]	@ (800bd54 <MX_GPIO_Init+0x1b0>)
 800bc84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc8c:	60bb      	str	r3, [r7, #8]
 800bc8e:	68bb      	ldr	r3, [r7, #8]


  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 800bc90:	2200      	movs	r2, #0
 800bc92:	2102      	movs	r1, #2
 800bc94:	4830      	ldr	r0, [pc, #192]	@ (800bd58 <MX_GPIO_Init+0x1b4>)
 800bc96:	f7f5 fca5 	bl	80015e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	2161      	movs	r1, #97	@ 0x61
 800bc9e:	482f      	ldr	r0, [pc, #188]	@ (800bd5c <MX_GPIO_Init+0x1b8>)
 800bca0:	f7f5 fca0 	bl	80015e4 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOJ, BUTTON_MINUS_Pin|BUTTON_PLUS_Pin|BUTTON_SETTING_Pin, GPIO_PIN_SET);

  // Configure GPIO pin - GC9A01_CS_Pin
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 800bca4:	2302      	movs	r3, #2
 800bca6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcac:	2300      	movs	r3, #0
 800bcae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 800bcb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4827      	ldr	r0, [pc, #156]	@ (800bd58 <MX_GPIO_Init+0x1b4>)
 800bcbc:	f7f5 faca 	bl	8001254 <HAL_GPIO_Init>

  // Configure GPIO pins - GC9A01_BL_Pin ; GC9A01_DC_Pin ; GC9A01_RST_Pin
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 800bcc0:	2361      	movs	r3, #97	@ 0x61
 800bcc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bccc:	2300      	movs	r3, #0
 800bcce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800bcd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	4821      	ldr	r0, [pc, #132]	@ (800bd5c <MX_GPIO_Init+0x1b8>)
 800bcd8:	f7f5 fabc 	bl	8001254 <HAL_GPIO_Init>

  if(it_en)
 800bcdc:	79fb      	ldrb	r3, [r7, #7]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d025      	beq.n	800bd2e <MX_GPIO_Init+0x18a>
  {

	  GPIO_InitStruct.Pin = ( BUTTON_MINUS_Pin | BUTTON_PLUS_Pin | BUTTON_SETTING_Pin );
 800bce2:	2389      	movs	r3, #137	@ 0x89
 800bce4:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800bce6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800bcea:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bcec:	2301      	movs	r3, #1
 800bcee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800bcf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	4819      	ldr	r0, [pc, #100]	@ (800bd5c <MX_GPIO_Init+0x1b8>)
 800bcf8:	f7f5 faac 	bl	8001254 <HAL_GPIO_Init>

	  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	2100      	movs	r1, #0
 800bd00:	2006      	movs	r0, #6
 800bd02:	f7f4 ff92 	bl	8000c2a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800bd06:	2006      	movs	r0, #6
 800bd08:	f7f4 ffa9 	bl	8000c5e <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	2100      	movs	r1, #0
 800bd10:	2017      	movs	r0, #23
 800bd12:	f7f4 ff8a 	bl	8000c2a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800bd16:	2017      	movs	r0, #23
 800bd18:	f7f4 ffa1 	bl	8000c5e <HAL_NVIC_EnableIRQ>

	  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	2100      	movs	r1, #0
 800bd20:	2009      	movs	r0, #9
 800bd22:	f7f4 ff82 	bl	8000c2a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800bd26:	2009      	movs	r0, #9
 800bd28:	f7f4 ff99 	bl	8000c5e <HAL_NVIC_EnableIRQ>
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);

  }

}
 800bd2c:	e00d      	b.n	800bd4a <MX_GPIO_Init+0x1a6>
	  GPIO_InitStruct.Pin =  BUTTON_MINUS_Pin|BUTTON_PLUS_Pin|BUTTON_SETTING_Pin;
 800bd2e:	2389      	movs	r3, #137	@ 0x89
 800bd30:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bd32:	2300      	movs	r3, #0
 800bd34:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bd36:	2301      	movs	r3, #1
 800bd38:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	633b      	str	r3, [r7, #48]	@ 0x30
	  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800bd3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd42:	4619      	mov	r1, r3
 800bd44:	4805      	ldr	r0, [pc, #20]	@ (800bd5c <MX_GPIO_Init+0x1b8>)
 800bd46:	f7f5 fa85 	bl	8001254 <HAL_GPIO_Init>
}
 800bd4a:	bf00      	nop
 800bd4c:	3738      	adds	r7, #56	@ 0x38
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop
 800bd54:	58024400 	.word	0x58024400
 800bd58:	58022800 	.word	0x58022800
 800bd5c:	58022400 	.word	0x58022400

0800bd60 <MX_RTC_Init>:


void MX_RTC_Init(void)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b086      	sub	sp, #24
 800bd64:	af00      	add	r7, sp, #0

  RTC_TimeTypeDef sTime = {0};
 800bd66:	1d3b      	adds	r3, r7, #4
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	605a      	str	r2, [r3, #4]
 800bd6e:	609a      	str	r2, [r3, #8]
 800bd70:	60da      	str	r2, [r3, #12]
 800bd72:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800bd74:	2300      	movs	r3, #0
 800bd76:	603b      	str	r3, [r7, #0]


  hrtc.Instance = RTC;
 800bd78:	4b25      	ldr	r3, [pc, #148]	@ (800be10 <MX_RTC_Init+0xb0>)
 800bd7a:	4a26      	ldr	r2, [pc, #152]	@ (800be14 <MX_RTC_Init+0xb4>)
 800bd7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800bd7e:	4b24      	ldr	r3, [pc, #144]	@ (800be10 <MX_RTC_Init+0xb0>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800bd84:	4b22      	ldr	r3, [pc, #136]	@ (800be10 <MX_RTC_Init+0xb0>)
 800bd86:	227f      	movs	r2, #127	@ 0x7f
 800bd88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800bd8a:	4b21      	ldr	r3, [pc, #132]	@ (800be10 <MX_RTC_Init+0xb0>)
 800bd8c:	22ff      	movs	r2, #255	@ 0xff
 800bd8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800bd90:	4b1f      	ldr	r3, [pc, #124]	@ (800be10 <MX_RTC_Init+0xb0>)
 800bd92:	2200      	movs	r2, #0
 800bd94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800bd96:	4b1e      	ldr	r3, [pc, #120]	@ (800be10 <MX_RTC_Init+0xb0>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800bd9c:	4b1c      	ldr	r3, [pc, #112]	@ (800be10 <MX_RTC_Init+0xb0>)
 800bd9e:	2200      	movs	r2, #0
 800bda0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800bda2:	4b1b      	ldr	r3, [pc, #108]	@ (800be10 <MX_RTC_Init+0xb0>)
 800bda4:	2200      	movs	r2, #0
 800bda6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800bda8:	4819      	ldr	r0, [pc, #100]	@ (800be10 <MX_RTC_Init+0xb0>)
 800bdaa:	f7fb fc2b 	bl	8007604 <HAL_RTC_Init>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d001      	beq.n	800bdb8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800bdb4:	f7ff fd98 	bl	800b8e8 <Error_Handler>
  }


  sTime.Hours = 0;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800bdcc:	1d3b      	adds	r3, r7, #4
 800bdce:	2200      	movs	r2, #0
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	480f      	ldr	r0, [pc, #60]	@ (800be10 <MX_RTC_Init+0xb0>)
 800bdd4:	f7fb fc98 	bl	8007708 <HAL_RTC_SetTime>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d001      	beq.n	800bde2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800bdde:	f7ff fd83 	bl	800b8e8 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800bde2:	2301      	movs	r3, #1
 800bde4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800bde6:	2301      	movs	r3, #1
 800bde8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800bdea:	2301      	movs	r3, #1
 800bdec:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800bdf2:	463b      	mov	r3, r7
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	4805      	ldr	r0, [pc, #20]	@ (800be10 <MX_RTC_Init+0xb0>)
 800bdfa:	f7fb fd7f 	bl	80078fc <HAL_RTC_SetDate>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d001      	beq.n	800be08 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800be04:	f7ff fd70 	bl	800b8e8 <Error_Handler>
  }

}
 800be08:	bf00      	nop
 800be0a:	3718      	adds	r7, #24
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	200001e8 	.word	0x200001e8
 800be14:	58004000 	.word	0x58004000

0800be18 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	4603      	mov	r3, r0
 800be20:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800be22:	4b0c      	ldr	r3, [pc, #48]	@ (800be54 <SD_CheckStatus+0x3c>)
 800be24:	2201      	movs	r2, #1
 800be26:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState(0) == BSP_ERROR_NONE)
 800be28:	2000      	movs	r0, #0
 800be2a:	f7f4 fbd1 	bl	80005d0 <BSP_SD_GetCardState>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d107      	bne.n	800be44 <SD_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 800be34:	4b07      	ldr	r3, [pc, #28]	@ (800be54 <SD_CheckStatus+0x3c>)
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	f023 0301 	bic.w	r3, r3, #1
 800be3e:	b2da      	uxtb	r2, r3
 800be40:	4b04      	ldr	r3, [pc, #16]	@ (800be54 <SD_CheckStatus+0x3c>)
 800be42:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800be44:	4b03      	ldr	r3, [pc, #12]	@ (800be54 <SD_CheckStatus+0x3c>)
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	b2db      	uxtb	r3, r3
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	2000000d 	.word	0x2000000d

0800be58 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800be62:	79fb      	ldrb	r3, [r7, #7]
 800be64:	4618      	mov	r0, r3
 800be66:	f7ff ffd7 	bl	800be18 <SD_CheckStatus>
 800be6a:	4603      	mov	r3, r0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	4603      	mov	r3, r0
 800be7c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800be7e:	79fb      	ldrb	r3, [r7, #7]
 800be80:	4618      	mov	r0, r3
 800be82:	f7ff ffc9 	bl	800be18 <SD_CheckStatus>
 800be86:	4603      	mov	r3, r0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	60b9      	str	r1, [r7, #8]
 800be98:	607a      	str	r2, [r7, #4]
 800be9a:	603b      	str	r3, [r7, #0]
 800be9c:	4603      	mov	r3, r0
 800be9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bea0:	2301      	movs	r3, #1
 800bea2:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_ReadBlocks(0,(uint32_t*)buff, 
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	68b9      	ldr	r1, [r7, #8]
 800beaa:	2000      	movs	r0, #0
 800beac:	f7f4 fb30 	bl	8000510 <BSP_SD_ReadBlocks>
 800beb0:	4603      	mov	r3, r0
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d108      	bne.n	800bec8 <SD_read+0x38>
                       (uint32_t) (sector), 
                       count) == BSP_ERROR_NONE)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState(0)!= BSP_ERROR_NONE)
 800beb6:	bf00      	nop
 800beb8:	2000      	movs	r0, #0
 800beba:	f7f4 fb89 	bl	80005d0 <BSP_SD_GetCardState>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1f9      	bne.n	800beb8 <SD_read+0x28>
    {
    }
    res = RES_OK;
 800bec4:	2300      	movs	r3, #0
 800bec6:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800bec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beca:	4618      	mov	r0, r3
 800becc:	3718      	adds	r7, #24
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b086      	sub	sp, #24
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
 800bedc:	603b      	str	r3, [r7, #0]
 800bede:	4603      	mov	r3, r0
 800bee0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bee2:	2301      	movs	r3, #1
 800bee4:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_WriteBlocks(0,(uint32_t*)buff, 
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	68b9      	ldr	r1, [r7, #8]
 800beec:	2000      	movs	r0, #0
 800beee:	f7f4 fb3f 	bl	8000570 <BSP_SD_WriteBlocks>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d108      	bne.n	800bf0a <SD_write+0x38>
                        (uint32_t)(sector), 
                        count) == BSP_ERROR_NONE)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState(0) != BSP_ERROR_NONE)
 800bef8:	bf00      	nop
 800befa:	2000      	movs	r0, #0
 800befc:	f7f4 fb68 	bl	80005d0 <BSP_SD_GetCardState>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1f9      	bne.n	800befa <SD_write+0x28>
    {
    }    
    res = RES_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800bf0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3718      	adds	r7, #24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b08c      	sub	sp, #48	@ 0x30
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	603a      	str	r2, [r7, #0]
 800bf1e:	71fb      	strb	r3, [r7, #7]
 800bf20:	460b      	mov	r3, r1
 800bf22:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bf2a:	4b26      	ldr	r3, [pc, #152]	@ (800bfc4 <SD_ioctl+0xb0>)
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	f003 0301 	and.w	r3, r3, #1
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d001      	beq.n	800bf3c <SD_ioctl+0x28>
 800bf38:	2303      	movs	r3, #3
 800bf3a:	e03e      	b.n	800bfba <SD_ioctl+0xa6>
  
  switch (cmd)
 800bf3c:	79bb      	ldrb	r3, [r7, #6]
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	d836      	bhi.n	800bfb0 <SD_ioctl+0x9c>
 800bf42:	a201      	add	r2, pc, #4	@ (adr r2, 800bf48 <SD_ioctl+0x34>)
 800bf44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf48:	0800bf59 	.word	0x0800bf59
 800bf4c:	0800bf61 	.word	0x0800bf61
 800bf50:	0800bf7b 	.word	0x0800bf7b
 800bf54:	0800bf97 	.word	0x0800bf97
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bf5e:	e02a      	b.n	800bfb6 <SD_ioctl+0xa2>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800bf60:	f107 0308 	add.w	r3, r7, #8
 800bf64:	4619      	mov	r1, r3
 800bf66:	2000      	movs	r0, #0
 800bf68:	f7f4 fb4c 	bl	8000604 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bf6c:	6a3a      	ldr	r2, [r7, #32]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bf72:	2300      	movs	r3, #0
 800bf74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bf78:	e01d      	b.n	800bfb6 <SD_ioctl+0xa2>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800bf7a:	f107 0308 	add.w	r3, r7, #8
 800bf7e:	4619      	mov	r1, r3
 800bf80:	2000      	movs	r0, #0
 800bf82:	f7f4 fb3f 	bl	8000604 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bf86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bf94:	e00f      	b.n	800bfb6 <SD_ioctl+0xa2>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800bf96:	f107 0308 	add.w	r3, r7, #8
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	f7f4 fb31 	bl	8000604 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800bfa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	601a      	str	r2, [r3, #0]
  res = RES_OK;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800bfae:	e002      	b.n	800bfb6 <SD_ioctl+0xa2>
  
  default:
    res = RES_PARERR;
 800bfb0:	2304      	movs	r3, #4
 800bfb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 800bfb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3730      	adds	r7, #48	@ 0x30
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	2000000d 	.word	0x2000000d

0800bfc8 <smart_watch_init>:
// Output data buffer (format RGB565)
uint8_t output_data[100*1024] __attribute__((section(".d1"), nocommon));


void smart_watch_init(void)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	af00      	add	r7, sp, #0

	parameters_reset();
 800bfcc:	f000 fc74 	bl	800c8b8 <parameters_reset>

	// First time setting
	video.video_mode = SETTING_MODE;
 800bfd0:	4b10      	ldr	r3, [pc, #64]	@ (800c014 <smart_watch_init+0x4c>)
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

	// SD card initialization
	// Link the micro SD disk I/O driver
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800bfd8:	490f      	ldr	r1, [pc, #60]	@ (800c018 <smart_watch_init+0x50>)
 800bfda:	4810      	ldr	r0, [pc, #64]	@ (800c01c <smart_watch_init+0x54>)
 800bfdc:	f004 f834 	bl	8010048 <FATFS_LinkDriver>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d112      	bne.n	800c00c <smart_watch_init+0x44>
	{

		// Init the SD Card
	    SD_Initialize();
 800bfe6:	f000 fe41 	bl	800cc6c <SD_Initialize>

	    if(BSP_SD_IsDetected(0))
 800bfea:	2000      	movs	r0, #0
 800bfec:	f7f4 fa6c 	bl	80004c8 <BSP_SD_IsDetected>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d009      	beq.n	800c00a <smart_watch_init+0x42>
	    {

	      // Register the file system object to the FatFs module
	      if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 800bff6:	2200      	movs	r2, #0
 800bff8:	4907      	ldr	r1, [pc, #28]	@ (800c018 <smart_watch_init+0x50>)
 800bffa:	4809      	ldr	r0, [pc, #36]	@ (800c020 <smart_watch_init+0x58>)
 800bffc:	f003 f9d8 	bl	800f3b0 <f_mount>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d003      	beq.n	800c00e <smart_watch_init+0x46>
	      {

	    	  while(1);
 800c006:	bf00      	nop
 800c008:	e7fd      	b.n	800c006 <smart_watch_init+0x3e>

	    }
	    else
  		{

  			while(1);
 800c00a:	e7fe      	b.n	800c00a <smart_watch_init+0x42>

  	}
	else
	{

		while(1);
 800c00c:	e7fe      	b.n	800c00c <smart_watch_init+0x44>

	}

}
 800c00e:	bf00      	nop
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	20018754 	.word	0x20018754
 800c018:	200184d8 	.word	0x200184d8
 800c01c:	08010eb8 	.word	0x08010eb8
 800c020:	200182a4 	.word	0x200182a4

0800c024 <smart_watch_process>:


void smart_watch_process(void)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	af00      	add	r7, sp, #0

	while(1)
	{

		// Check if new file needs to be open
		file_handler(0);
 800c028:	2000      	movs	r0, #0
 800c02a:	f000 fb0b 	bl	800c644 <file_handler>

		// Video processing unit
		mjpeg_video_processing();
 800c02e:	f000 f807 	bl	800c040 <mjpeg_video_processing>

		// Check for user buttons pressed
		user_buttons_handler();
 800c032:	f000 fb85 	bl	800c740 <user_buttons_handler>

		// Battery management
		battery_management();
 800c036:	f000 fbc1 	bl	800c7bc <battery_management>
		file_handler(0);
 800c03a:	bf00      	nop
 800c03c:	e7f4      	b.n	800c028 <smart_watch_process+0x4>
	...

0800c040 <mjpeg_video_processing>:

////////////////////////////////////////////////////// PRIVATE FUNCTIONS


static void mjpeg_video_processing(void)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	af00      	add	r7, sp, #0

	switch(video.video_mode)
 800c044:	4b06      	ldr	r3, [pc, #24]	@ (800c060 <mjpeg_video_processing+0x20>)
 800c046:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d002      	beq.n	800c054 <mjpeg_video_processing+0x14>
	{

		default:
		case SETTING_MODE:

			clock_setting();
 800c04e:	f000 f809 	bl	800c064 <clock_setting>

			break;
 800c052:	e002      	b.n	800c05a <mjpeg_video_processing+0x1a>

		case NORMAL_MODE:

			clock_normal();
 800c054:	f000 f914 	bl	800c280 <clock_normal>

			break;
 800c058:	bf00      	nop

	}

}
 800c05a:	bf00      	nop
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	20018754 	.word	0x20018754

0800c064 <clock_setting>:


static void clock_setting(void)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	af00      	add	r7, sp, #0

	switch(video.set)
 800c068:	4b81      	ldr	r3, [pc, #516]	@ (800c270 <clock_setting+0x20c>)
 800c06a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c06e:	2b03      	cmp	r3, #3
 800c070:	f000 80ed 	beq.w	800c24e <clock_setting+0x1ea>
 800c074:	2b03      	cmp	r3, #3
 800c076:	dc03      	bgt.n	800c080 <clock_setting+0x1c>
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d00e      	beq.n	800c09a <clock_setting+0x36>
 800c07c:	2b02      	cmp	r3, #2
 800c07e:	d06d      	beq.n	800c15c <clock_setting+0xf8>
	{

		default:
		case SET_IDLE:

			while(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin));
 800c080:	bf00      	nop
 800c082:	2108      	movs	r1, #8
 800c084:	487b      	ldr	r0, [pc, #492]	@ (800c274 <clock_setting+0x210>)
 800c086:	f7f5 fa95 	bl	80015b4 <HAL_GPIO_ReadPin>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d0f8      	beq.n	800c082 <clock_setting+0x1e>

			video.set = SET_HOURS;
 800c090:	4b77      	ldr	r3, [pc, #476]	@ (800c270 <clock_setting+0x20c>)
 800c092:	2201      	movs	r2, #1
 800c094:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			break;
 800c098:	e0e8      	b.n	800c26c <clock_setting+0x208>

		case SET_HOURS:

			show_frame(0);
 800c09a:	2000      	movs	r0, #0
 800c09c:	f000 fa0e 	bl	800c4bc <show_frame>

			// If button plus
			if(!HAL_GPIO_ReadPin(BUTTON_PLUS_GPIO_Port, BUTTON_PLUS_Pin))
 800c0a0:	2180      	movs	r1, #128	@ 0x80
 800c0a2:	4874      	ldr	r0, [pc, #464]	@ (800c274 <clock_setting+0x210>)
 800c0a4:	f7f5 fa86 	bl	80015b4 <HAL_GPIO_ReadPin>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d122      	bne.n	800c0f4 <clock_setting+0x90>
			{

				HAL_Delay(200);
 800c0ae:	20c8      	movs	r0, #200	@ 0xc8
 800c0b0:	f7f4 fc80 	bl	80009b4 <HAL_Delay>

				video.time.Hours++;
 800c0b4:	4b6e      	ldr	r3, [pc, #440]	@ (800c270 <clock_setting+0x20c>)
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	b2da      	uxtb	r2, r3
 800c0bc:	4b6c      	ldr	r3, [pc, #432]	@ (800c270 <clock_setting+0x20c>)
 800c0be:	701a      	strb	r2, [r3, #0]
				video.time.Hours %= 12;
 800c0c0:	4b6b      	ldr	r3, [pc, #428]	@ (800c270 <clock_setting+0x20c>)
 800c0c2:	781a      	ldrb	r2, [r3, #0]
 800c0c4:	4b6c      	ldr	r3, [pc, #432]	@ (800c278 <clock_setting+0x214>)
 800c0c6:	fba3 1302 	umull	r1, r3, r3, r2
 800c0ca:	08d9      	lsrs	r1, r3, #3
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	005b      	lsls	r3, r3, #1
 800c0d0:	440b      	add	r3, r1
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	b2da      	uxtb	r2, r3
 800c0d8:	4b65      	ldr	r3, [pc, #404]	@ (800c270 <clock_setting+0x20c>)
 800c0da:	701a      	strb	r2, [r3, #0]

				video.file_idx = ( video.time.Hours * 60 );
 800c0dc:	4b64      	ldr	r3, [pc, #400]	@ (800c270 <clock_setting+0x20c>)
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	0112      	lsls	r2, r2, #4
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	4b61      	ldr	r3, [pc, #388]	@ (800c270 <clock_setting+0x20c>)
 800c0ec:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800c0ee:	2001      	movs	r0, #1
 800c0f0:	f000 faa8 	bl	800c644 <file_handler>

			}

			// If button minus
			if(!HAL_GPIO_ReadPin(BUTTON_MINUS_GPIO_Port, BUTTON_MINUS_Pin))
 800c0f4:	2101      	movs	r1, #1
 800c0f6:	485f      	ldr	r0, [pc, #380]	@ (800c274 <clock_setting+0x210>)
 800c0f8:	f7f5 fa5c 	bl	80015b4 <HAL_GPIO_ReadPin>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d11c      	bne.n	800c13c <clock_setting+0xd8>
			{

				HAL_Delay(200);
 800c102:	20c8      	movs	r0, #200	@ 0xc8
 800c104:	f7f4 fc56 	bl	80009b4 <HAL_Delay>

				if(video.time.Hours > 0)
 800c108:	4b59      	ldr	r3, [pc, #356]	@ (800c270 <clock_setting+0x20c>)
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d006      	beq.n	800c11e <clock_setting+0xba>
					video.time.Hours--;
 800c110:	4b57      	ldr	r3, [pc, #348]	@ (800c270 <clock_setting+0x20c>)
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	3b01      	subs	r3, #1
 800c116:	b2da      	uxtb	r2, r3
 800c118:	4b55      	ldr	r3, [pc, #340]	@ (800c270 <clock_setting+0x20c>)
 800c11a:	701a      	strb	r2, [r3, #0]
 800c11c:	e002      	b.n	800c124 <clock_setting+0xc0>
				else
					video.time.Hours = 11;
 800c11e:	4b54      	ldr	r3, [pc, #336]	@ (800c270 <clock_setting+0x20c>)
 800c120:	220b      	movs	r2, #11
 800c122:	701a      	strb	r2, [r3, #0]

				video.file_idx = ( video.time.Hours * 60 );
 800c124:	4b52      	ldr	r3, [pc, #328]	@ (800c270 <clock_setting+0x20c>)
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	461a      	mov	r2, r3
 800c12a:	0112      	lsls	r2, r2, #4
 800c12c:	1ad3      	subs	r3, r2, r3
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	b29a      	uxth	r2, r3
 800c132:	4b4f      	ldr	r3, [pc, #316]	@ (800c270 <clock_setting+0x20c>)
 800c134:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800c136:	2001      	movs	r0, #1
 800c138:	f000 fa84 	bl	800c644 <file_handler>

			}

			// If button settings
			if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800c13c:	2108      	movs	r1, #8
 800c13e:	484d      	ldr	r0, [pc, #308]	@ (800c274 <clock_setting+0x210>)
 800c140:	f7f5 fa38 	bl	80015b4 <HAL_GPIO_ReadPin>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	f040 808d 	bne.w	800c266 <clock_setting+0x202>
			{

				HAL_Delay(200);
 800c14c:	20c8      	movs	r0, #200	@ 0xc8
 800c14e:	f7f4 fc31 	bl	80009b4 <HAL_Delay>

				video.set = SET_MINUTES;
 800c152:	4b47      	ldr	r3, [pc, #284]	@ (800c270 <clock_setting+0x20c>)
 800c154:	2202      	movs	r2, #2
 800c156:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			}

			break;
 800c15a:	e084      	b.n	800c266 <clock_setting+0x202>

		case SET_MINUTES:

			show_frame(0);
 800c15c:	2000      	movs	r0, #0
 800c15e:	f000 f9ad 	bl	800c4bc <show_frame>

			// If button plus
			if(!HAL_GPIO_ReadPin(BUTTON_PLUS_GPIO_Port, BUTTON_PLUS_Pin))
 800c162:	2180      	movs	r1, #128	@ 0x80
 800c164:	4843      	ldr	r0, [pc, #268]	@ (800c274 <clock_setting+0x210>)
 800c166:	f7f5 fa25 	bl	80015b4 <HAL_GPIO_ReadPin>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d129      	bne.n	800c1c4 <clock_setting+0x160>
			{

				HAL_Delay(200);
 800c170:	20c8      	movs	r0, #200	@ 0xc8
 800c172:	f7f4 fc1f 	bl	80009b4 <HAL_Delay>

				video.time.Minutes++;
 800c176:	4b3e      	ldr	r3, [pc, #248]	@ (800c270 <clock_setting+0x20c>)
 800c178:	785b      	ldrb	r3, [r3, #1]
 800c17a:	3301      	adds	r3, #1
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	4b3c      	ldr	r3, [pc, #240]	@ (800c270 <clock_setting+0x20c>)
 800c180:	705a      	strb	r2, [r3, #1]
				video.time.Minutes %= 60;
 800c182:	4b3b      	ldr	r3, [pc, #236]	@ (800c270 <clock_setting+0x20c>)
 800c184:	785a      	ldrb	r2, [r3, #1]
 800c186:	4b3d      	ldr	r3, [pc, #244]	@ (800c27c <clock_setting+0x218>)
 800c188:	fba3 1302 	umull	r1, r3, r3, r2
 800c18c:	0959      	lsrs	r1, r3, #5
 800c18e:	460b      	mov	r3, r1
 800c190:	011b      	lsls	r3, r3, #4
 800c192:	1a5b      	subs	r3, r3, r1
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	b2da      	uxtb	r2, r3
 800c19a:	4b35      	ldr	r3, [pc, #212]	@ (800c270 <clock_setting+0x20c>)
 800c19c:	705a      	strb	r2, [r3, #1]

				video.file_idx += video.time.Minutes;
 800c19e:	4b34      	ldr	r3, [pc, #208]	@ (800c270 <clock_setting+0x20c>)
 800c1a0:	8a9b      	ldrh	r3, [r3, #20]
 800c1a2:	4a33      	ldr	r2, [pc, #204]	@ (800c270 <clock_setting+0x20c>)
 800c1a4:	7852      	ldrb	r2, [r2, #1]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	4b31      	ldr	r3, [pc, #196]	@ (800c270 <clock_setting+0x20c>)
 800c1ac:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800c1ae:	2001      	movs	r0, #1
 800c1b0:	f000 fa48 	bl	800c644 <file_handler>

				video.file_idx -= video.time.Minutes;
 800c1b4:	4b2e      	ldr	r3, [pc, #184]	@ (800c270 <clock_setting+0x20c>)
 800c1b6:	8a9b      	ldrh	r3, [r3, #20]
 800c1b8:	4a2d      	ldr	r2, [pc, #180]	@ (800c270 <clock_setting+0x20c>)
 800c1ba:	7852      	ldrb	r2, [r2, #1]
 800c1bc:	1a9b      	subs	r3, r3, r2
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	4b2b      	ldr	r3, [pc, #172]	@ (800c270 <clock_setting+0x20c>)
 800c1c2:	829a      	strh	r2, [r3, #20]


			}

			// If button minus
			if(!HAL_GPIO_ReadPin(BUTTON_MINUS_GPIO_Port, BUTTON_MINUS_Pin))
 800c1c4:	2101      	movs	r1, #1
 800c1c6:	482b      	ldr	r0, [pc, #172]	@ (800c274 <clock_setting+0x210>)
 800c1c8:	f7f5 f9f4 	bl	80015b4 <HAL_GPIO_ReadPin>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d123      	bne.n	800c21a <clock_setting+0x1b6>
			{

				HAL_Delay(200);
 800c1d2:	20c8      	movs	r0, #200	@ 0xc8
 800c1d4:	f7f4 fbee 	bl	80009b4 <HAL_Delay>

				if(video.time.Minutes > 0)
 800c1d8:	4b25      	ldr	r3, [pc, #148]	@ (800c270 <clock_setting+0x20c>)
 800c1da:	785b      	ldrb	r3, [r3, #1]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d006      	beq.n	800c1ee <clock_setting+0x18a>
					video.time.Minutes--;
 800c1e0:	4b23      	ldr	r3, [pc, #140]	@ (800c270 <clock_setting+0x20c>)
 800c1e2:	785b      	ldrb	r3, [r3, #1]
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	b2da      	uxtb	r2, r3
 800c1e8:	4b21      	ldr	r3, [pc, #132]	@ (800c270 <clock_setting+0x20c>)
 800c1ea:	705a      	strb	r2, [r3, #1]
 800c1ec:	e002      	b.n	800c1f4 <clock_setting+0x190>
				else
					video.time.Minutes = 59;
 800c1ee:	4b20      	ldr	r3, [pc, #128]	@ (800c270 <clock_setting+0x20c>)
 800c1f0:	223b      	movs	r2, #59	@ 0x3b
 800c1f2:	705a      	strb	r2, [r3, #1]

				video.file_idx += video.time.Minutes;
 800c1f4:	4b1e      	ldr	r3, [pc, #120]	@ (800c270 <clock_setting+0x20c>)
 800c1f6:	8a9b      	ldrh	r3, [r3, #20]
 800c1f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c270 <clock_setting+0x20c>)
 800c1fa:	7852      	ldrb	r2, [r2, #1]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	4b1b      	ldr	r3, [pc, #108]	@ (800c270 <clock_setting+0x20c>)
 800c202:	829a      	strh	r2, [r3, #20]

				file_handler(1);
 800c204:	2001      	movs	r0, #1
 800c206:	f000 fa1d 	bl	800c644 <file_handler>

				video.file_idx -= video.time.Minutes;
 800c20a:	4b19      	ldr	r3, [pc, #100]	@ (800c270 <clock_setting+0x20c>)
 800c20c:	8a9b      	ldrh	r3, [r3, #20]
 800c20e:	4a18      	ldr	r2, [pc, #96]	@ (800c270 <clock_setting+0x20c>)
 800c210:	7852      	ldrb	r2, [r2, #1]
 800c212:	1a9b      	subs	r3, r3, r2
 800c214:	b29a      	uxth	r2, r3
 800c216:	4b16      	ldr	r3, [pc, #88]	@ (800c270 <clock_setting+0x20c>)
 800c218:	829a      	strh	r2, [r3, #20]

			}

			// If button settings
			if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800c21a:	2108      	movs	r1, #8
 800c21c:	4815      	ldr	r0, [pc, #84]	@ (800c274 <clock_setting+0x210>)
 800c21e:	f7f5 f9c9 	bl	80015b4 <HAL_GPIO_ReadPin>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d120      	bne.n	800c26a <clock_setting+0x206>
			{

				HAL_Delay(200);
 800c228:	20c8      	movs	r0, #200	@ 0xc8
 800c22a:	f7f4 fbc3 	bl	80009b4 <HAL_Delay>

				video.file_idx += video.time.Minutes;
 800c22e:	4b10      	ldr	r3, [pc, #64]	@ (800c270 <clock_setting+0x20c>)
 800c230:	8a9b      	ldrh	r3, [r3, #20]
 800c232:	4a0f      	ldr	r2, [pc, #60]	@ (800c270 <clock_setting+0x20c>)
 800c234:	7852      	ldrb	r2, [r2, #1]
 800c236:	4413      	add	r3, r2
 800c238:	b29a      	uxth	r2, r3
 800c23a:	4b0d      	ldr	r3, [pc, #52]	@ (800c270 <clock_setting+0x20c>)
 800c23c:	829a      	strh	r2, [r3, #20]

				video.isfirstFrame = 1;
 800c23e:	4b0c      	ldr	r3, [pc, #48]	@ (800c270 <clock_setting+0x20c>)
 800c240:	2201      	movs	r2, #1
 800c242:	759a      	strb	r2, [r3, #22]

				video.set = SET_START;
 800c244:	4b0a      	ldr	r3, [pc, #40]	@ (800c270 <clock_setting+0x20c>)
 800c246:	2203      	movs	r2, #3
 800c248:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

			}

			break;
 800c24c:	e00d      	b.n	800c26a <clock_setting+0x206>

		case SET_START:

			file_handler(1);
 800c24e:	2001      	movs	r0, #1
 800c250:	f000 f9f8 	bl	800c644 <file_handler>

			video.set = SET_IDLE;
 800c254:	4b06      	ldr	r3, [pc, #24]	@ (800c270 <clock_setting+0x20c>)
 800c256:	2200      	movs	r2, #0
 800c258:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
			video.video_mode = NORMAL_MODE;
 800c25c:	4b04      	ldr	r3, [pc, #16]	@ (800c270 <clock_setting+0x20c>)
 800c25e:	2201      	movs	r2, #1
 800c260:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

			break;
 800c264:	e002      	b.n	800c26c <clock_setting+0x208>
			break;
 800c266:	bf00      	nop
 800c268:	e000      	b.n	800c26c <clock_setting+0x208>
			break;
 800c26a:	bf00      	nop

	}

}
 800c26c:	bf00      	nop
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	20018754 	.word	0x20018754
 800c274:	58022400 	.word	0x58022400
 800c278:	aaaaaaab 	.word	0xaaaaaaab
 800c27c:	88888889 	.word	0x88888889

0800c280 <clock_normal>:


static void clock_normal(void)
{
 800c280:	b590      	push	{r4, r7, lr}
 800c282:	b087      	sub	sp, #28
 800c284:	af02      	add	r7, sp, #8

	if(video.display_status == DISPLAY_OFF)
 800c286:	4b84      	ldr	r3, [pc, #528]	@ (800c498 <clock_normal+0x218>)
 800c288:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	f000 80fa 	beq.w	800c486 <clock_normal+0x206>
		return;

	// Save the frame into MJPEG_VideoBuffer
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800c292:	2200      	movs	r2, #0
 800c294:	4981      	ldr	r1, [pc, #516]	@ (800c49c <clock_normal+0x21c>)
 800c296:	4882      	ldr	r0, [pc, #520]	@ (800c4a0 <clock_normal+0x220>)
 800c298:	f7fe fe60 	bl	800af5c <AVI_GetFrame>
 800c29c:	4603      	mov	r3, r0
 800c29e:	b2da      	uxtb	r2, r3
 800c2a0:	4b7d      	ldr	r3, [pc, #500]	@ (800c498 <clock_normal+0x218>)
 800c2a2:	75da      	strb	r2, [r3, #23]


	if(video.frameToSkip > 0)
 800c2a4:	4b7c      	ldr	r3, [pc, #496]	@ (800c498 <clock_normal+0x218>)
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	dd0f      	ble.n	800c2cc <clock_normal+0x4c>
	{

		// Skip frames until the the watch time is
		// synchronized with the actual time

		video.frameToSkip--;
 800c2ac:	4b7a      	ldr	r3, [pc, #488]	@ (800c498 <clock_normal+0x218>)
 800c2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	4a79      	ldr	r2, [pc, #484]	@ (800c498 <clock_normal+0x218>)
 800c2b4:	6253      	str	r3, [r2, #36]	@ 0x24
		AVI_Handel.CurrentImage++;
 800c2b6:	4b7a      	ldr	r3, [pc, #488]	@ (800c4a0 <clock_normal+0x220>)
 800c2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	4a78      	ldr	r2, [pc, #480]	@ (800c4a0 <clock_normal+0x220>)
 800c2be:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 800c2c0:	4b75      	ldr	r3, [pc, #468]	@ (800c498 <clock_normal+0x218>)
 800c2c2:	6a1b      	ldr	r3, [r3, #32]
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	4a74      	ldr	r2, [pc, #464]	@ (800c498 <clock_normal+0x218>)
 800c2c8:	6213      	str	r3, [r2, #32]
 800c2ca:	e08a      	b.n	800c3e2 <clock_normal+0x162>

	}
	else if(video.FrameType == AVI_VIDEO_FRAME)
 800c2cc:	4b72      	ldr	r3, [pc, #456]	@ (800c498 <clock_normal+0x218>)
 800c2ce:	7ddb      	ldrb	r3, [r3, #23]
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	f040 8086 	bne.w	800c3e2 <clock_normal+0x162>
	{

		AVI_Handel.CurrentImage++;
 800c2d6:	4b72      	ldr	r3, [pc, #456]	@ (800c4a0 <clock_normal+0x220>)
 800c2d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2da:	3301      	adds	r3, #1
 800c2dc:	4a70      	ldr	r2, [pc, #448]	@ (800c4a0 <clock_normal+0x220>)
 800c2de:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 800c2e0:	4b6d      	ldr	r3, [pc, #436]	@ (800c498 <clock_normal+0x218>)
 800c2e2:	6a1b      	ldr	r3, [r3, #32]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	4a6c      	ldr	r2, [pc, #432]	@ (800c498 <clock_normal+0x218>)
 800c2e8:	6213      	str	r3, [r2, #32]

		// Decode the frame inside MJPEG_VideoBuffer and put it into jpegOutDataAdreess in the format YCrCb
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 800c2ea:	496e      	ldr	r1, [pc, #440]	@ (800c4a4 <clock_normal+0x224>)
 800c2ec:	4b6c      	ldr	r3, [pc, #432]	@ (800c4a0 <clock_normal+0x220>)
 800c2ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c2f0:	4b69      	ldr	r3, [pc, #420]	@ (800c498 <clock_normal+0x218>)
 800c2f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2f4:	486c      	ldr	r0, [pc, #432]	@ (800c4a8 <clock_normal+0x228>)
 800c2f6:	f7ff fa23 	bl	800b740 <JPEG_Decode_DMA>

		while(Jpeg_HWDecodingEnd == 0);
 800c2fa:	bf00      	nop
 800c2fc:	4b6b      	ldr	r3, [pc, #428]	@ (800c4ac <clock_normal+0x22c>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d0fb      	beq.n	800c2fc <clock_normal+0x7c>

		if(video.isfirstFrame == 1)
 800c304:	4b64      	ldr	r3, [pc, #400]	@ (800c498 <clock_normal+0x218>)
 800c306:	7d9b      	ldrb	r3, [r3, #22]
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d143      	bne.n	800c394 <clock_normal+0x114>
		{

			video.isfirstFrame = 0;
 800c30c:	4b62      	ldr	r3, [pc, #392]	@ (800c498 <clock_normal+0x218>)
 800c30e:	2200      	movs	r2, #0
 800c310:	759a      	strb	r2, [r3, #22]

			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800c312:	4967      	ldr	r1, [pc, #412]	@ (800c4b0 <clock_normal+0x230>)
 800c314:	4864      	ldr	r0, [pc, #400]	@ (800c4a8 <clock_normal+0x228>)
 800c316:	f7f5 fa1b 	bl	8001750 <HAL_JPEG_GetInfo>

			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800c31a:	4b65      	ldr	r3, [pc, #404]	@ (800c4b0 <clock_normal+0x230>)
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	b29b      	uxth	r3, r3
 800c320:	4a63      	ldr	r2, [pc, #396]	@ (800c4b0 <clock_normal+0x230>)
 800c322:	6892      	ldr	r2, [r2, #8]
 800c324:	b291      	uxth	r1, r2
 800c326:	4a62      	ldr	r2, [pc, #392]	@ (800c4b0 <clock_normal+0x230>)
 800c328:	6852      	ldr	r2, [r2, #4]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f000 fbe6 	bl	800cafc <DMA2D_Init>

			video.width = JPEG_Info.ImageWidth;
 800c330:	4b5f      	ldr	r3, [pc, #380]	@ (800c4b0 <clock_normal+0x230>)
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	b29a      	uxth	r2, r3
 800c336:	4b58      	ldr	r3, [pc, #352]	@ (800c498 <clock_normal+0x218>)
 800c338:	831a      	strh	r2, [r3, #24]
			video.height = JPEG_Info.ImageHeight;
 800c33a:	4b5d      	ldr	r3, [pc, #372]	@ (800c4b0 <clock_normal+0x230>)
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	b29a      	uxth	r2, r3
 800c340:	4b55      	ldr	r3, [pc, #340]	@ (800c498 <clock_normal+0x218>)
 800c342:	835a      	strh	r2, [r3, #26]
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 800c344:	4b54      	ldr	r3, [pc, #336]	@ (800c498 <clock_normal+0x218>)
 800c346:	8b1b      	ldrh	r3, [r3, #24]
 800c348:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	da00      	bge.n	800c352 <clock_normal+0xd2>
 800c350:	3301      	adds	r3, #1
 800c352:	105b      	asrs	r3, r3, #1
 800c354:	b29a      	uxth	r2, r3
 800c356:	4b50      	ldr	r3, [pc, #320]	@ (800c498 <clock_normal+0x218>)
 800c358:	839a      	strh	r2, [r3, #28]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 800c35a:	4b4f      	ldr	r3, [pc, #316]	@ (800c498 <clock_normal+0x218>)
 800c35c:	8b5b      	ldrh	r3, [r3, #26]
 800c35e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800c362:	2b00      	cmp	r3, #0
 800c364:	da00      	bge.n	800c368 <clock_normal+0xe8>
 800c366:	3301      	adds	r3, #1
 800c368:	105b      	asrs	r3, r3, #1
 800c36a:	b29a      	uxth	r2, r3
 800c36c:	4b4a      	ldr	r3, [pc, #296]	@ (800c498 <clock_normal+0x218>)
 800c36e:	83da      	strh	r2, [r3, #30]

			video.frame_time = AVI_Handel.aviInfo.SecPerFrame;
 800c370:	4b4b      	ldr	r3, [pc, #300]	@ (800c4a0 <clock_normal+0x220>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	b29a      	uxth	r2, r3
 800c376:	4b48      	ldr	r3, [pc, #288]	@ (800c498 <clock_normal+0x218>)
 800c378:	851a      	strh	r2, [r3, #40]	@ 0x28

			video.tick_offset = HAL_GetTick();
 800c37a:	f7f4 fb0f 	bl	800099c <HAL_GetTick>
 800c37e:	4603      	mov	r3, r0
 800c380:	4a45      	ldr	r2, [pc, #276]	@ (800c498 <clock_normal+0x218>)
 800c382:	6313      	str	r3, [r2, #48]	@ 0x30
			video.frameCount = 1;
 800c384:	4b44      	ldr	r3, [pc, #272]	@ (800c498 <clock_normal+0x218>)
 800c386:	2201      	movs	r2, #1
 800c388:	621a      	str	r2, [r3, #32]

			HAL_RTC_SetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800c38a:	2200      	movs	r2, #0
 800c38c:	4942      	ldr	r1, [pc, #264]	@ (800c498 <clock_normal+0x218>)
 800c38e:	4849      	ldr	r0, [pc, #292]	@ (800c4b4 <clock_normal+0x234>)
 800c390:	f7fb f9ba 	bl	8007708 <HAL_RTC_SetTime>

		}

		// Copies the output frame into LCD_FRAME_BUFFER and does the conversion from YCrCb to RGB888
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)output_data, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800c394:	4b40      	ldr	r3, [pc, #256]	@ (800c498 <clock_normal+0x218>)
 800c396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c398:	4618      	mov	r0, r3
 800c39a:	4b45      	ldr	r3, [pc, #276]	@ (800c4b0 <clock_normal+0x230>)
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	4b43      	ldr	r3, [pc, #268]	@ (800c4b0 <clock_normal+0x230>)
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	4944      	ldr	r1, [pc, #272]	@ (800c4b8 <clock_normal+0x238>)
 800c3a8:	f000 fc26 	bl	800cbf8 <DMA2D_CopyBuffer>

		//video.jpegOutDataAdreess = (video.jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;

		// Implements the data conversion from RGB888 to RGB565
		doubleFormat pOut;
		pOut.u8Arr = (uint8_t *)output_data;
 800c3ac:	4b42      	ldr	r3, [pc, #264]	@ (800c4b8 <clock_normal+0x238>)
 800c3ae:	607b      	str	r3, [r7, #4]
		depth24To16(&pOut, ( video.width * video.height ), 3);
 800c3b0:	4b39      	ldr	r3, [pc, #228]	@ (800c498 <clock_normal+0x218>)
 800c3b2:	8b1a      	ldrh	r2, [r3, #24]
 800c3b4:	4b38      	ldr	r3, [pc, #224]	@ (800c498 <clock_normal+0x218>)
 800c3b6:	8b5b      	ldrh	r3, [r3, #26]
 800c3b8:	fb12 f303 	smulbb	r3, r2, r3
 800c3bc:	b299      	uxth	r1, r3
 800c3be:	1d3b      	adds	r3, r7, #4
 800c3c0:	2203      	movs	r2, #3
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f000 fabe 	bl	800c944 <depth24To16>

		// Display the image
		lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 800c3c8:	4b33      	ldr	r3, [pc, #204]	@ (800c498 <clock_normal+0x218>)
 800c3ca:	8b98      	ldrh	r0, [r3, #28]
 800c3cc:	4b32      	ldr	r3, [pc, #200]	@ (800c498 <clock_normal+0x218>)
 800c3ce:	8bd9      	ldrh	r1, [r3, #30]
 800c3d0:	4b31      	ldr	r3, [pc, #196]	@ (800c498 <clock_normal+0x218>)
 800c3d2:	8b1a      	ldrh	r2, [r3, #24]
 800c3d4:	4b30      	ldr	r3, [pc, #192]	@ (800c498 <clock_normal+0x218>)
 800c3d6:	8b5c      	ldrh	r4, [r3, #26]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	4623      	mov	r3, r4
 800c3de:	f000 fb3b 	bl	800ca58 <lcd_draw>
	}

	// Synchronization

	// Obtain the number of frames to skip the next cycle
	video.actual_time = ( HAL_GetTick() - video.tick_offset );
 800c3e2:	f7f4 fadb 	bl	800099c <HAL_GetTick>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	4b2b      	ldr	r3, [pc, #172]	@ (800c498 <clock_normal+0x218>)
 800c3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	4a2a      	ldr	r2, [pc, #168]	@ (800c498 <clock_normal+0x218>)
 800c3f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
	float watch_time = ( video.frameCount * ( video.frame_time / 1000.0 ) );
 800c3f2:	4b29      	ldr	r3, [pc, #164]	@ (800c498 <clock_normal+0x218>)
 800c3f4:	6a1b      	ldr	r3, [r3, #32]
 800c3f6:	ee07 3a90 	vmov	s15, r3
 800c3fa:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800c3fe:	4b26      	ldr	r3, [pc, #152]	@ (800c498 <clock_normal+0x218>)
 800c400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c402:	ee07 3a90 	vmov	s15, r3
 800c406:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c40a:	ed9f 4b21 	vldr	d4, [pc, #132]	@ 800c490 <clock_normal+0x210>
 800c40e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800c412:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c416:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c41a:	edc7 7a03 	vstr	s15, [r7, #12]
	video.frameToSkip = ( ( video.actual_time - watch_time ) / ( video.frame_time / 1000.0 ) );
 800c41e:	4b1e      	ldr	r3, [pc, #120]	@ (800c498 <clock_normal+0x218>)
 800c420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c422:	ee07 3a90 	vmov	s15, r3
 800c426:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c42a:	edd7 7a03 	vldr	s15, [r7, #12]
 800c42e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c432:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800c436:	4b18      	ldr	r3, [pc, #96]	@ (800c498 <clock_normal+0x218>)
 800c438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c43a:	ee07 3a90 	vmov	s15, r3
 800c43e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c442:	ed9f 4b13 	vldr	d4, [pc, #76]	@ 800c490 <clock_normal+0x210>
 800c446:	ee87 6b04 	vdiv.f64	d6, d7, d4
 800c44a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c44e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c452:	ee17 2a90 	vmov	r2, s15
 800c456:	4b10      	ldr	r3, [pc, #64]	@ (800c498 <clock_normal+0x218>)
 800c458:	625a      	str	r2, [r3, #36]	@ 0x24

	if(video.frameToSkip < 0)
 800c45a:	4b0f      	ldr	r3, [pc, #60]	@ (800c498 <clock_normal+0x218>)
 800c45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c45e:	2b00      	cmp	r3, #0
 800c460:	da02      	bge.n	800c468 <clock_normal+0x1e8>
		video.frameToSkip = 0;
 800c462:	4b0d      	ldr	r3, [pc, #52]	@ (800c498 <clock_normal+0x218>)
 800c464:	2200      	movs	r2, #0
 800c466:	625a      	str	r2, [r3, #36]	@ 0x24

	RTC_DateTypeDef sDate = {0};
 800c468:	2300      	movs	r3, #0
 800c46a:	60bb      	str	r3, [r7, #8]
	HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800c46c:	2200      	movs	r2, #0
 800c46e:	490a      	ldr	r1, [pc, #40]	@ (800c498 <clock_normal+0x218>)
 800c470:	4810      	ldr	r0, [pc, #64]	@ (800c4b4 <clock_normal+0x234>)
 800c472:	f7fb f9e7 	bl	8007844 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800c476:	f107 0308 	add.w	r3, r7, #8
 800c47a:	2200      	movs	r2, #0
 800c47c:	4619      	mov	r1, r3
 800c47e:	480d      	ldr	r0, [pc, #52]	@ (800c4b4 <clock_normal+0x234>)
 800c480:	f7fb fac4 	bl	8007a0c <HAL_RTC_GetDate>
 800c484:	e000      	b.n	800c488 <clock_normal+0x208>
		return;
 800c486:	bf00      	nop

}
 800c488:	3714      	adds	r7, #20
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd90      	pop	{r4, r7, pc}
 800c48e:	bf00      	nop
 800c490:	00000000 	.word	0x00000000
 800c494:	408f4000 	.word	0x408f4000
 800c498:	20018754 	.word	0x20018754
 800c49c:	200184dc 	.word	0x200184dc
 800c4a0:	2001870c 	.word	0x2001870c
 800c4a4:	200002a4 	.word	0x200002a4
 800c4a8:	20000114 	.word	0x20000114
 800c4ac:	20000100 	.word	0x20000100
 800c4b0:	200001d4 	.word	0x200001d4
 800c4b4:	200001e8 	.word	0x200001e8
 800c4b8:	24032000 	.word	0x24032000

0800c4bc <show_frame>:


static void show_frame(uint32_t frame_num)
{
 800c4bc:	b590      	push	{r4, r7, lr}
 800c4be:	b089      	sub	sp, #36	@ 0x24
 800c4c0:	af02      	add	r7, sp, #8
 800c4c2:	6078      	str	r0, [r7, #4]

	for(int i = 0 ; i < frame_num ; i++)
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	617b      	str	r3, [r7, #20]
 800c4c8:	e011      	b.n	800c4ee <show_frame+0x32>
	{

		AVI_GetFrame(&AVI_Handel, &MJPEG_File, 1);
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	4955      	ldr	r1, [pc, #340]	@ (800c624 <show_frame+0x168>)
 800c4ce:	4856      	ldr	r0, [pc, #344]	@ (800c628 <show_frame+0x16c>)
 800c4d0:	f7fe fd44 	bl	800af5c <AVI_GetFrame>

		AVI_Handel.CurrentImage++;
 800c4d4:	4b54      	ldr	r3, [pc, #336]	@ (800c628 <show_frame+0x16c>)
 800c4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4d8:	3301      	adds	r3, #1
 800c4da:	4a53      	ldr	r2, [pc, #332]	@ (800c628 <show_frame+0x16c>)
 800c4dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
		video.frameCount++;
 800c4de:	4b53      	ldr	r3, [pc, #332]	@ (800c62c <show_frame+0x170>)
 800c4e0:	6a1b      	ldr	r3, [r3, #32]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	4a51      	ldr	r2, [pc, #324]	@ (800c62c <show_frame+0x170>)
 800c4e6:	6213      	str	r3, [r2, #32]
	for(int i = 0 ; i < frame_num ; i++)
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	617b      	str	r3, [r7, #20]
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d8e9      	bhi.n	800c4ca <show_frame+0xe>

	}

	for(int i = 0 ; i < 2 ; i++)
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	613b      	str	r3, [r7, #16]
 800c4fa:	e089      	b.n	800c610 <show_frame+0x154>
	{

		// Save the frame into MJPEG_VideoBuffer
		video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	4949      	ldr	r1, [pc, #292]	@ (800c624 <show_frame+0x168>)
 800c500:	4849      	ldr	r0, [pc, #292]	@ (800c628 <show_frame+0x16c>)
 800c502:	f7fe fd2b 	bl	800af5c <AVI_GetFrame>
 800c506:	4603      	mov	r3, r0
 800c508:	b2da      	uxtb	r2, r3
 800c50a:	4b48      	ldr	r3, [pc, #288]	@ (800c62c <show_frame+0x170>)
 800c50c:	75da      	strb	r2, [r3, #23]

		if(video.FrameType == AVI_VIDEO_FRAME)
 800c50e:	4b47      	ldr	r3, [pc, #284]	@ (800c62c <show_frame+0x170>)
 800c510:	7ddb      	ldrb	r3, [r3, #23]
 800c512:	2b01      	cmp	r3, #1
 800c514:	d179      	bne.n	800c60a <show_frame+0x14e>
		{

			AVI_Handel.CurrentImage++;
 800c516:	4b44      	ldr	r3, [pc, #272]	@ (800c628 <show_frame+0x16c>)
 800c518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c51a:	3301      	adds	r3, #1
 800c51c:	4a42      	ldr	r2, [pc, #264]	@ (800c628 <show_frame+0x16c>)
 800c51e:	62d3      	str	r3, [r2, #44]	@ 0x2c
			video.frameCount++;
 800c520:	4b42      	ldr	r3, [pc, #264]	@ (800c62c <show_frame+0x170>)
 800c522:	6a1b      	ldr	r3, [r3, #32]
 800c524:	3301      	adds	r3, #1
 800c526:	4a41      	ldr	r2, [pc, #260]	@ (800c62c <show_frame+0x170>)
 800c528:	6213      	str	r3, [r2, #32]

			// Decode the frame inside MJPEG_VideoBuffer and put it into jpegOutDataAdreess in the format YCrCb
			JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 800c52a:	4941      	ldr	r1, [pc, #260]	@ (800c630 <show_frame+0x174>)
 800c52c:	4b3e      	ldr	r3, [pc, #248]	@ (800c628 <show_frame+0x16c>)
 800c52e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c530:	4b3e      	ldr	r3, [pc, #248]	@ (800c62c <show_frame+0x170>)
 800c532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c534:	483f      	ldr	r0, [pc, #252]	@ (800c634 <show_frame+0x178>)
 800c536:	f7ff f903 	bl	800b740 <JPEG_Decode_DMA>

			while(Jpeg_HWDecodingEnd == 0);
 800c53a:	bf00      	nop
 800c53c:	4b3e      	ldr	r3, [pc, #248]	@ (800c638 <show_frame+0x17c>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d0fb      	beq.n	800c53c <show_frame+0x80>

			if(video.isfirstFrame == 1)
 800c544:	4b39      	ldr	r3, [pc, #228]	@ (800c62c <show_frame+0x170>)
 800c546:	7d9b      	ldrb	r3, [r3, #22]
 800c548:	2b01      	cmp	r3, #1
 800c54a:	d136      	bne.n	800c5ba <show_frame+0xfe>
			{

				video.isfirstFrame = 0;
 800c54c:	4b37      	ldr	r3, [pc, #220]	@ (800c62c <show_frame+0x170>)
 800c54e:	2200      	movs	r2, #0
 800c550:	759a      	strb	r2, [r3, #22]

				HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800c552:	493a      	ldr	r1, [pc, #232]	@ (800c63c <show_frame+0x180>)
 800c554:	4837      	ldr	r0, [pc, #220]	@ (800c634 <show_frame+0x178>)
 800c556:	f7f5 f8fb 	bl	8001750 <HAL_JPEG_GetInfo>

				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800c55a:	4b38      	ldr	r3, [pc, #224]	@ (800c63c <show_frame+0x180>)
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	b29b      	uxth	r3, r3
 800c560:	4a36      	ldr	r2, [pc, #216]	@ (800c63c <show_frame+0x180>)
 800c562:	6892      	ldr	r2, [r2, #8]
 800c564:	b291      	uxth	r1, r2
 800c566:	4a35      	ldr	r2, [pc, #212]	@ (800c63c <show_frame+0x180>)
 800c568:	6852      	ldr	r2, [r2, #4]
 800c56a:	4618      	mov	r0, r3
 800c56c:	f000 fac6 	bl	800cafc <DMA2D_Init>

				video.width = JPEG_Info.ImageWidth;
 800c570:	4b32      	ldr	r3, [pc, #200]	@ (800c63c <show_frame+0x180>)
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	b29a      	uxth	r2, r3
 800c576:	4b2d      	ldr	r3, [pc, #180]	@ (800c62c <show_frame+0x170>)
 800c578:	831a      	strh	r2, [r3, #24]
				video.height = JPEG_Info.ImageHeight;
 800c57a:	4b30      	ldr	r3, [pc, #192]	@ (800c63c <show_frame+0x180>)
 800c57c:	689b      	ldr	r3, [r3, #8]
 800c57e:	b29a      	uxth	r2, r3
 800c580:	4b2a      	ldr	r3, [pc, #168]	@ (800c62c <show_frame+0x170>)
 800c582:	835a      	strh	r2, [r3, #26]
				video.xPos = ( ( LCD_X_SIZE - video.width ) / 2 );					// Center the image in x
 800c584:	4b29      	ldr	r3, [pc, #164]	@ (800c62c <show_frame+0x170>)
 800c586:	8b1b      	ldrh	r3, [r3, #24]
 800c588:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	da00      	bge.n	800c592 <show_frame+0xd6>
 800c590:	3301      	adds	r3, #1
 800c592:	105b      	asrs	r3, r3, #1
 800c594:	b29a      	uxth	r2, r3
 800c596:	4b25      	ldr	r3, [pc, #148]	@ (800c62c <show_frame+0x170>)
 800c598:	839a      	strh	r2, [r3, #28]
				video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 800c59a:	4b24      	ldr	r3, [pc, #144]	@ (800c62c <show_frame+0x170>)
 800c59c:	8b5b      	ldrh	r3, [r3, #26]
 800c59e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	da00      	bge.n	800c5a8 <show_frame+0xec>
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	105b      	asrs	r3, r3, #1
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	4b1f      	ldr	r3, [pc, #124]	@ (800c62c <show_frame+0x170>)
 800c5ae:	83da      	strh	r2, [r3, #30]

				video.frame_time = AVI_Handel.aviInfo.SecPerFrame;
 800c5b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c628 <show_frame+0x16c>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	4b1d      	ldr	r3, [pc, #116]	@ (800c62c <show_frame+0x170>)
 800c5b8:	851a      	strh	r2, [r3, #40]	@ 0x28

			}

			// Copies the output frame into LCD_FRAME_BUFFER and does the conversion from YCrCb to RGB888
			DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)output_data, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800c5ba:	4b1c      	ldr	r3, [pc, #112]	@ (800c62c <show_frame+0x170>)
 800c5bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5be:	4618      	mov	r0, r3
 800c5c0:	4b1e      	ldr	r3, [pc, #120]	@ (800c63c <show_frame+0x180>)
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	4b1d      	ldr	r3, [pc, #116]	@ (800c63c <show_frame+0x180>)
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	491c      	ldr	r1, [pc, #112]	@ (800c640 <show_frame+0x184>)
 800c5ce:	f000 fb13 	bl	800cbf8 <DMA2D_CopyBuffer>

			//video.jpegOutDataAdreess = (video.jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;

			// Implements the data conversion from RGB888 to RGB565
			doubleFormat pOut;
			pOut.u8Arr = (uint8_t *)output_data;
 800c5d2:	4b1b      	ldr	r3, [pc, #108]	@ (800c640 <show_frame+0x184>)
 800c5d4:	60fb      	str	r3, [r7, #12]
			depth24To16(&pOut, ( video.width * video.height ), 3);
 800c5d6:	4b15      	ldr	r3, [pc, #84]	@ (800c62c <show_frame+0x170>)
 800c5d8:	8b1a      	ldrh	r2, [r3, #24]
 800c5da:	4b14      	ldr	r3, [pc, #80]	@ (800c62c <show_frame+0x170>)
 800c5dc:	8b5b      	ldrh	r3, [r3, #26]
 800c5de:	fb12 f303 	smulbb	r3, r2, r3
 800c5e2:	b299      	uxth	r1, r3
 800c5e4:	f107 030c 	add.w	r3, r7, #12
 800c5e8:	2203      	movs	r2, #3
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 f9aa 	bl	800c944 <depth24To16>

			lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 800c5f0:	4b0e      	ldr	r3, [pc, #56]	@ (800c62c <show_frame+0x170>)
 800c5f2:	8b98      	ldrh	r0, [r3, #28]
 800c5f4:	4b0d      	ldr	r3, [pc, #52]	@ (800c62c <show_frame+0x170>)
 800c5f6:	8bd9      	ldrh	r1, [r3, #30]
 800c5f8:	4b0c      	ldr	r3, [pc, #48]	@ (800c62c <show_frame+0x170>)
 800c5fa:	8b1a      	ldrh	r2, [r3, #24]
 800c5fc:	4b0b      	ldr	r3, [pc, #44]	@ (800c62c <show_frame+0x170>)
 800c5fe:	8b5c      	ldrh	r4, [r3, #26]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	9300      	str	r3, [sp, #0]
 800c604:	4623      	mov	r3, r4
 800c606:	f000 fa27 	bl	800ca58 <lcd_draw>
	for(int i = 0 ; i < 2 ; i++)
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	3301      	adds	r3, #1
 800c60e:	613b      	str	r3, [r7, #16]
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	2b01      	cmp	r3, #1
 800c614:	f77f af72 	ble.w	800c4fc <show_frame+0x40>

		}

	}

}
 800c618:	bf00      	nop
 800c61a:	bf00      	nop
 800c61c:	371c      	adds	r7, #28
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd90      	pop	{r4, r7, pc}
 800c622:	bf00      	nop
 800c624:	200184dc 	.word	0x200184dc
 800c628:	2001870c 	.word	0x2001870c
 800c62c:	20018754 	.word	0x20018754
 800c630:	200002a4 	.word	0x200002a4
 800c634:	20000114 	.word	0x20000114
 800c638:	20000100 	.word	0x20000100
 800c63c:	200001d4 	.word	0x200001d4
 800c640:	24032000 	.word	0x24032000

0800c644 <file_handler>:


static void file_handler(uint8_t openFile)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b086      	sub	sp, #24
 800c648:	af02      	add	r7, sp, #8
 800c64a:	4603      	mov	r3, r0
 800c64c:	71fb      	strb	r3, [r7, #7]
	  // Each file takes 30m

     static uint8_t  new_file_flag = 1;


     if(new_file_flag || openFile)
 800c64e:	4b31      	ldr	r3, [pc, #196]	@ (800c714 <file_handler+0xd0>)
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d102      	bne.n	800c65c <file_handler+0x18>
 800c656:	79fb      	ldrb	r3, [r7, #7]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d033      	beq.n	800c6c4 <file_handler+0x80>
     {

    	 if(openFile)
 800c65c:	79fb      	ldrb	r3, [r7, #7]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d002      	beq.n	800c668 <file_handler+0x24>
    		 f_close(&MJPEG_File);
 800c662:	482d      	ldr	r0, [pc, #180]	@ (800c718 <file_handler+0xd4>)
 800c664:	f003 fa71 	bl	800fb4a <f_close>

    	 new_file_flag = 0;
 800c668:	4b2a      	ldr	r3, [pc, #168]	@ (800c714 <file_handler+0xd0>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	701a      	strb	r2, [r3, #0]

    	 char file_idx_str[4];
    	 snprintf(file_idx_str, sizeof(file_idx_str), "%03d", video.file_idx);
 800c66e:	4b2b      	ldr	r3, [pc, #172]	@ (800c71c <file_handler+0xd8>)
 800c670:	8a9b      	ldrh	r3, [r3, #20]
 800c672:	f107 000c 	add.w	r0, r7, #12
 800c676:	4a2a      	ldr	r2, [pc, #168]	@ (800c720 <file_handler+0xdc>)
 800c678:	2104      	movs	r1, #4
 800c67a:	f003 fe8f 	bl	801039c <sniprintf>
    	 snprintf(name, sizeof(name), "video_%s.avi", file_idx_str);
 800c67e:	f107 030c 	add.w	r3, r7, #12
 800c682:	4a28      	ldr	r2, [pc, #160]	@ (800c724 <file_handler+0xe0>)
 800c684:	210e      	movs	r1, #14
 800c686:	4828      	ldr	r0, [pc, #160]	@ (800c728 <file_handler+0xe4>)
 800c688:	f003 fe88 	bl	801039c <sniprintf>

    	 // Open the MJPEG avi file with read access
    	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 800c68c:	2201      	movs	r2, #1
 800c68e:	4926      	ldr	r1, [pc, #152]	@ (800c728 <file_handler+0xe4>)
 800c690:	4821      	ldr	r0, [pc, #132]	@ (800c718 <file_handler+0xd4>)
 800c692:	f002 fed3 	bl	800f43c <f_open>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d112      	bne.n	800c6c2 <file_handler+0x7e>
    	 {

    		 video.isfirstFrame = 1;
 800c69c:	4b1f      	ldr	r3, [pc, #124]	@ (800c71c <file_handler+0xd8>)
 800c69e:	2201      	movs	r2, #1
 800c6a0:	759a      	strb	r2, [r3, #22]

    		 // parse the AVI file Header
    		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	9301      	str	r3, [sp, #4]
 800c6a6:	4b21      	ldr	r3, [pc, #132]	@ (800c72c <file_handler+0xe8>)
 800c6a8:	9300      	str	r3, [sp, #0]
 800c6aa:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 800c6ae:	4a20      	ldr	r2, [pc, #128]	@ (800c730 <file_handler+0xec>)
 800c6b0:	4919      	ldr	r1, [pc, #100]	@ (800c718 <file_handler+0xd4>)
 800c6b2:	4820      	ldr	r0, [pc, #128]	@ (800c734 <file_handler+0xf0>)
 800c6b4:	f7fe fc12 	bl	800aedc <AVI_ParserInit>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d002      	beq.n	800c6c4 <file_handler+0x80>
    			 while(1);
 800c6be:	bf00      	nop
 800c6c0:	e7fd      	b.n	800c6be <file_handler+0x7a>

    	 }
    	 else
    	 {

    		 while(1);
 800c6c2:	e7fe      	b.n	800c6c2 <file_handler+0x7e>
    	 }

     }

     // Check for the end of the video
     if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 800c6c4:	4b1b      	ldr	r3, [pc, #108]	@ (800c734 <file_handler+0xf0>)
 800c6c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6c8:	4b1a      	ldr	r3, [pc, #104]	@ (800c734 <file_handler+0xf0>)
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d31d      	bcc.n	800c70c <file_handler+0xc8>
     {

    	 video.file_idx++;
 800c6d0:	4b12      	ldr	r3, [pc, #72]	@ (800c71c <file_handler+0xd8>)
 800c6d2:	8a9b      	ldrh	r3, [r3, #20]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	b29a      	uxth	r2, r3
 800c6d8:	4b10      	ldr	r3, [pc, #64]	@ (800c71c <file_handler+0xd8>)
 800c6da:	829a      	strh	r2, [r3, #20]
		 video.file_idx %= 720;	// Restart the index every 24 files ( 12h )
 800c6dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c71c <file_handler+0xd8>)
 800c6de:	8a9b      	ldrh	r3, [r3, #20]
 800c6e0:	091a      	lsrs	r2, r3, #4
 800c6e2:	4915      	ldr	r1, [pc, #84]	@ (800c738 <file_handler+0xf4>)
 800c6e4:	fba1 1202 	umull	r1, r2, r1, r2
 800c6e8:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 800c6ec:	fb01 f202 	mul.w	r2, r1, r2
 800c6f0:	1a9b      	subs	r3, r3, r2
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	4b09      	ldr	r3, [pc, #36]	@ (800c71c <file_handler+0xd8>)
 800c6f6:	829a      	strh	r2, [r3, #20]

		 //  wait for the Last DMA2D transfer to ends
		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);
 800c6f8:	2132      	movs	r1, #50	@ 0x32
 800c6fa:	4810      	ldr	r0, [pc, #64]	@ (800c73c <file_handler+0xf8>)
 800c6fc:	f7f4 fb6d 	bl	8000dda <HAL_DMA2D_PollForTransfer>

		 f_close(&MJPEG_File);
 800c700:	4805      	ldr	r0, [pc, #20]	@ (800c718 <file_handler+0xd4>)
 800c702:	f003 fa22 	bl	800fb4a <f_close>

		 new_file_flag = 1;
 800c706:	4b03      	ldr	r3, [pc, #12]	@ (800c714 <file_handler+0xd0>)
 800c708:	2201      	movs	r2, #1
 800c70a:	701a      	strb	r2, [r3, #0]

     }

}
 800c70c:	bf00      	nop
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	2000000e 	.word	0x2000000e
 800c718:	200184dc 	.word	0x200184dc
 800c71c:	20018754 	.word	0x20018754
 800c720:	08010be8 	.word	0x08010be8
 800c724:	08010bf0 	.word	0x08010bf0
 800c728:	20000294 	.word	0x20000294
 800c72c:	200182a4 	.word	0x200182a4
 800c730:	200002a4 	.word	0x200002a4
 800c734:	2001870c 	.word	0x2001870c
 800c738:	05b05b06 	.word	0x05b05b06
 800c73c:	2000016c 	.word	0x2000016c

0800c740 <user_buttons_handler>:


static void user_buttons_handler(void)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	af00      	add	r7, sp, #0

	static uint8_t first = 1;
	static uint32_t button_timer = 0;


	if(video.video_mode == SETTING_MODE)
 800c744:	4b19      	ldr	r3, [pc, #100]	@ (800c7ac <user_buttons_handler+0x6c>)
 800c746:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d02c      	beq.n	800c7a8 <user_buttons_handler+0x68>
		return;

	// Long press enters in setting mode
	if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800c74e:	2108      	movs	r1, #8
 800c750:	4817      	ldr	r0, [pc, #92]	@ (800c7b0 <user_buttons_handler+0x70>)
 800c752:	f7f4 ff2f 	bl	80015b4 <HAL_GPIO_ReadPin>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d121      	bne.n	800c7a0 <user_buttons_handler+0x60>
	{

		if(first)
 800c75c:	4b15      	ldr	r3, [pc, #84]	@ (800c7b4 <user_buttons_handler+0x74>)
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d007      	beq.n	800c774 <user_buttons_handler+0x34>
		{

			first = 0;
 800c764:	4b13      	ldr	r3, [pc, #76]	@ (800c7b4 <user_buttons_handler+0x74>)
 800c766:	2200      	movs	r2, #0
 800c768:	701a      	strb	r2, [r3, #0]
			button_timer = HAL_GetTick();
 800c76a:	f7f4 f917 	bl	800099c <HAL_GetTick>
 800c76e:	4603      	mov	r3, r0
 800c770:	4a11      	ldr	r2, [pc, #68]	@ (800c7b8 <user_buttons_handler+0x78>)
 800c772:	6013      	str	r3, [r2, #0]

		}

		if(abs( HAL_GetTick() - button_timer ) >= 3000)
 800c774:	f7f4 f912 	bl	800099c <HAL_GetTick>
 800c778:	4602      	mov	r2, r0
 800c77a:	4b0f      	ldr	r3, [pc, #60]	@ (800c7b8 <user_buttons_handler+0x78>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	1ad3      	subs	r3, r2, r3
 800c780:	2b00      	cmp	r3, #0
 800c782:	bfb8      	it	lt
 800c784:	425b      	neglt	r3, r3
 800c786:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800c78a:	4293      	cmp	r3, r2
 800c78c:	dd0d      	ble.n	800c7aa <user_buttons_handler+0x6a>
		{

			video.video_mode = SETTING_MODE;
 800c78e:	4b07      	ldr	r3, [pc, #28]	@ (800c7ac <user_buttons_handler+0x6c>)
 800c790:	2200      	movs	r2, #0
 800c792:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
			video.set = SET_IDLE;
 800c796:	4b05      	ldr	r3, [pc, #20]	@ (800c7ac <user_buttons_handler+0x6c>)
 800c798:	2200      	movs	r2, #0
 800c79a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c79e:	e004      	b.n	800c7aa <user_buttons_handler+0x6a>

	}
	else
	{

		first = 1;
 800c7a0:	4b04      	ldr	r3, [pc, #16]	@ (800c7b4 <user_buttons_handler+0x74>)
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	701a      	strb	r2, [r3, #0]
 800c7a6:	e000      	b.n	800c7aa <user_buttons_handler+0x6a>
		return;
 800c7a8:	bf00      	nop

	}

}
 800c7aa:	bd80      	pop	{r7, pc}
 800c7ac:	20018754 	.word	0x20018754
 800c7b0:	58022400 	.word	0x58022400
 800c7b4:	2000000f 	.word	0x2000000f
 800c7b8:	20018798 	.word	0x20018798

0800c7bc <battery_management>:


static void battery_management()
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0


	if(video.display_status == DISPLAY_ON)
 800c7c2:	4b3a      	ldr	r3, [pc, #232]	@ (800c8ac <battery_management+0xf0>)
 800c7c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d16b      	bne.n	800c8a4 <battery_management+0xe8>
	{

		if(TIME_ELAPSED(video.time.Seconds, video.display_ts) >= DISPLAY_STANDBY_TIMER)
 800c7cc:	4b37      	ldr	r3, [pc, #220]	@ (800c8ac <battery_management+0xf0>)
 800c7ce:	789b      	ldrb	r3, [r3, #2]
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	4b36      	ldr	r3, [pc, #216]	@ (800c8ac <battery_management+0xf0>)
 800c7d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d00b      	beq.n	800c7f2 <battery_management+0x36>
 800c7da:	4b34      	ldr	r3, [pc, #208]	@ (800c8ac <battery_management+0xf0>)
 800c7dc:	789b      	ldrb	r3, [r3, #2]
 800c7de:	461a      	mov	r2, r3
 800c7e0:	4b32      	ldr	r3, [pc, #200]	@ (800c8ac <battery_management+0xf0>)
 800c7e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	2b3a      	cmp	r3, #58	@ 0x3a
 800c7e8:	bf8c      	ite	hi
 800c7ea:	2301      	movhi	r3, #1
 800c7ec:	2300      	movls	r3, #0
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	e009      	b.n	800c806 <battery_management+0x4a>
 800c7f2:	4b2e      	ldr	r3, [pc, #184]	@ (800c8ac <battery_management+0xf0>)
 800c7f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7f6:	4a2d      	ldr	r2, [pc, #180]	@ (800c8ac <battery_management+0xf0>)
 800c7f8:	7892      	ldrb	r2, [r2, #2]
 800c7fa:	1a9b      	subs	r3, r3, r2
 800c7fc:	2b3a      	cmp	r3, #58	@ 0x3a
 800c7fe:	bf8c      	ite	hi
 800c800:	2301      	movhi	r3, #1
 800c802:	2300      	movls	r3, #0
 800c804:	b2db      	uxtb	r3, r3
 800c806:	2b00      	cmp	r3, #0
 800c808:	d04c      	beq.n	800c8a4 <battery_management+0xe8>
		{

			// Enable interrupts for user buttons
			//MX_GPIO_Init(1);

			parameters_reset();
 800c80a:	f000 f855 	bl	800c8b8 <parameters_reset>

			GC9A01_sleep_mode(ON);
 800c80e:	2001      	movs	r0, #1
 800c810:	f7fe ff63 	bl	800b6da <GC9A01_sleep_mode>
			video.display_status = DISPLAY_OFF;
 800c814:	4b25      	ldr	r3, [pc, #148]	@ (800c8ac <battery_management+0xf0>)
 800c816:	2200      	movs	r2, #0
 800c818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

			// Stop mode

			HAL_SuspendTick();
 800c81c:	f7f4 f8ee 	bl	80009fc <HAL_SuspendTick>
  __ASM volatile ("cpsid i" : : : "memory");
 800c820:	b672      	cpsid	i
}
 800c822:	bf00      	nop

			__disable_irq();

			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800c824:	2101      	movs	r1, #1
 800c826:	2001      	movs	r0, #1
 800c828:	f7f7 f944 	bl	8003ab4 <HAL_PWR_EnterSTOPMode>
  __ASM volatile ("cpsie i" : : : "memory");
 800c82c:	b662      	cpsie	i
}
 800c82e:	bf00      	nop

			// Wake up

			__enable_irq();

			HAL_ResumeTick();
 800c830:	f7f4 f8f4 	bl	8000a1c <HAL_ResumeTick>

			SystemClock_Config();
 800c834:	f7ff f85c 	bl	800b8f0 <SystemClock_Config>

			GC9A01_init();
 800c838:	f7fe fccf 	bl	800b1da <GC9A01_init>
			video.display_status = DISPLAY_ON;
 800c83c:	4b1b      	ldr	r3, [pc, #108]	@ (800c8ac <battery_management+0xf0>)
 800c83e:	2201      	movs	r2, #1
 800c840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

			// Clock setting

			RTC_DateTypeDef sDate = {0};
 800c844:	2300      	movs	r3, #0
 800c846:	607b      	str	r3, [r7, #4]
			HAL_RTC_GetTime(&hrtc, &video.time, RTC_FORMAT_BIN);
 800c848:	2200      	movs	r2, #0
 800c84a:	4918      	ldr	r1, [pc, #96]	@ (800c8ac <battery_management+0xf0>)
 800c84c:	4818      	ldr	r0, [pc, #96]	@ (800c8b0 <battery_management+0xf4>)
 800c84e:	f7fa fff9 	bl	8007844 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800c852:	1d3b      	adds	r3, r7, #4
 800c854:	2200      	movs	r2, #0
 800c856:	4619      	mov	r1, r3
 800c858:	4815      	ldr	r0, [pc, #84]	@ (800c8b0 <battery_management+0xf4>)
 800c85a:	f7fb f8d7 	bl	8007a0c <HAL_RTC_GetDate>

			video.file_idx = ( ( video.time.Hours % 12 ) * 60 );
 800c85e:	4b13      	ldr	r3, [pc, #76]	@ (800c8ac <battery_management+0xf0>)
 800c860:	781a      	ldrb	r2, [r3, #0]
 800c862:	4b14      	ldr	r3, [pc, #80]	@ (800c8b4 <battery_management+0xf8>)
 800c864:	fba3 1302 	umull	r1, r3, r3, r2
 800c868:	08d9      	lsrs	r1, r3, #3
 800c86a:	460b      	mov	r3, r1
 800c86c:	005b      	lsls	r3, r3, #1
 800c86e:	440b      	add	r3, r1
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	1ad3      	subs	r3, r2, r3
 800c874:	b2db      	uxtb	r3, r3
 800c876:	461a      	mov	r2, r3
 800c878:	0112      	lsls	r2, r2, #4
 800c87a:	1ad3      	subs	r3, r2, r3
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	b29a      	uxth	r2, r3
 800c880:	4b0a      	ldr	r3, [pc, #40]	@ (800c8ac <battery_management+0xf0>)
 800c882:	829a      	strh	r2, [r3, #20]
			video.file_idx += video.time.Minutes;
 800c884:	4b09      	ldr	r3, [pc, #36]	@ (800c8ac <battery_management+0xf0>)
 800c886:	8a9b      	ldrh	r3, [r3, #20]
 800c888:	4a08      	ldr	r2, [pc, #32]	@ (800c8ac <battery_management+0xf0>)
 800c88a:	7852      	ldrb	r2, [r2, #1]
 800c88c:	4413      	add	r3, r2
 800c88e:	b29a      	uxth	r2, r3
 800c890:	4b06      	ldr	r3, [pc, #24]	@ (800c8ac <battery_management+0xf0>)
 800c892:	829a      	strh	r2, [r3, #20]

			file_handler(1);
 800c894:	2001      	movs	r0, #1
 800c896:	f7ff fed5 	bl	800c644 <file_handler>

			video.display_ts = video.time.Seconds;
 800c89a:	4b04      	ldr	r3, [pc, #16]	@ (800c8ac <battery_management+0xf0>)
 800c89c:	789b      	ldrb	r3, [r3, #2]
 800c89e:	461a      	mov	r2, r3
 800c8a0:	4b02      	ldr	r3, [pc, #8]	@ (800c8ac <battery_management+0xf0>)
 800c8a2:	63da      	str	r2, [r3, #60]	@ 0x3c

		}

	}

}
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	20018754 	.word	0x20018754
 800c8b0:	200001e8 	.word	0x200001e8
 800c8b4:	aaaaaaab 	.word	0xaaaaaaab

0800c8b8 <parameters_reset>:


static void parameters_reset(void)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	af00      	add	r7, sp, #0

	video.width = 0;
 800c8bc:	4b1f      	ldr	r3, [pc, #124]	@ (800c93c <parameters_reset+0x84>)
 800c8be:	2200      	movs	r2, #0
 800c8c0:	831a      	strh	r2, [r3, #24]
	video.height = 0;
 800c8c2:	4b1e      	ldr	r3, [pc, #120]	@ (800c93c <parameters_reset+0x84>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	835a      	strh	r2, [r3, #26]
	video.xPos = 0;
 800c8c8:	4b1c      	ldr	r3, [pc, #112]	@ (800c93c <parameters_reset+0x84>)
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	839a      	strh	r2, [r3, #28]
	video.yPos = 0;
 800c8ce:	4b1b      	ldr	r3, [pc, #108]	@ (800c93c <parameters_reset+0x84>)
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	83da      	strh	r2, [r3, #30]

	video.time.Hours = 0;
 800c8d4:	4b19      	ldr	r3, [pc, #100]	@ (800c93c <parameters_reset+0x84>)
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	701a      	strb	r2, [r3, #0]
	video.time.Minutes = 0;
 800c8da:	4b18      	ldr	r3, [pc, #96]	@ (800c93c <parameters_reset+0x84>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	705a      	strb	r2, [r3, #1]
	video.time.Seconds = 0;
 800c8e0:	4b16      	ldr	r3, [pc, #88]	@ (800c93c <parameters_reset+0x84>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	709a      	strb	r2, [r3, #2]

	video.file_idx = 0;
 800c8e6:	4b15      	ldr	r3, [pc, #84]	@ (800c93c <parameters_reset+0x84>)
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	829a      	strh	r2, [r3, #20]
	video.FrameType = 0;
 800c8ec:	4b13      	ldr	r3, [pc, #76]	@ (800c93c <parameters_reset+0x84>)
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	75da      	strb	r2, [r3, #23]

	video.frameToSkip = 0;
 800c8f2:	4b12      	ldr	r3, [pc, #72]	@ (800c93c <parameters_reset+0x84>)
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	625a      	str	r2, [r3, #36]	@ 0x24
	video.frame_time = 0;
 800c8f8:	4b10      	ldr	r3, [pc, #64]	@ (800c93c <parameters_reset+0x84>)
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	851a      	strh	r2, [r3, #40]	@ 0x28
	video.actual_time = 0;
 800c8fe:	4b0f      	ldr	r3, [pc, #60]	@ (800c93c <parameters_reset+0x84>)
 800c900:	2200      	movs	r2, #0
 800c902:	62da      	str	r2, [r3, #44]	@ 0x2c
	video.tick_offset = 0;
 800c904:	4b0d      	ldr	r3, [pc, #52]	@ (800c93c <parameters_reset+0x84>)
 800c906:	2200      	movs	r2, #0
 800c908:	631a      	str	r2, [r3, #48]	@ 0x30
	video.jpegOutDataAdreess = (uint32_t)preElab_data;
 800c90a:	4a0d      	ldr	r2, [pc, #52]	@ (800c940 <parameters_reset+0x88>)
 800c90c:	4b0b      	ldr	r3, [pc, #44]	@ (800c93c <parameters_reset+0x84>)
 800c90e:	635a      	str	r2, [r3, #52]	@ 0x34

	video.display_ts = video.time.Seconds;
 800c910:	4b0a      	ldr	r3, [pc, #40]	@ (800c93c <parameters_reset+0x84>)
 800c912:	789b      	ldrb	r3, [r3, #2]
 800c914:	461a      	mov	r2, r3
 800c916:	4b09      	ldr	r3, [pc, #36]	@ (800c93c <parameters_reset+0x84>)
 800c918:	63da      	str	r2, [r3, #60]	@ 0x3c

	video.display_status = DISPLAY_ON;
 800c91a:	4b08      	ldr	r3, [pc, #32]	@ (800c93c <parameters_reset+0x84>)
 800c91c:	2201      	movs	r2, #1
 800c91e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	video.frameCount = 0;
 800c922:	4b06      	ldr	r3, [pc, #24]	@ (800c93c <parameters_reset+0x84>)
 800c924:	2200      	movs	r2, #0
 800c926:	621a      	str	r2, [r3, #32]

	//video.video_mode = NORMAL_MODE;
	video.set = SET_IDLE;
 800c928:	4b04      	ldr	r3, [pc, #16]	@ (800c93c <parameters_reset+0x84>)
 800c92a:	2200      	movs	r2, #0
 800c92c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

}
 800c930:	bf00      	nop
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	20018754 	.word	0x20018754
 800c940:	24000000 	.word	0x24000000

0800c944 <depth24To16>:


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 800c944:	b480      	push	{r7}
 800c946:	b085      	sub	sp, #20
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	460b      	mov	r3, r1
 800c94e:	807b      	strh	r3, [r7, #2]
 800c950:	4613      	mov	r3, r2
 800c952:	707b      	strb	r3, [r7, #1]

	uint8_t b;
	uint8_t g;
	uint8_t r;

	int i = 0;
 800c954:	2300      	movs	r3, #0
 800c956:	60fb      	str	r3, [r7, #12]


	// Only half of the frame is handled per time
	// Alternate the top and bottom half every cycle
    if(swap)
 800c958:	4b3d      	ldr	r3, [pc, #244]	@ (800ca50 <depth24To16+0x10c>)
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d00c      	beq.n	800c97a <depth24To16+0x36>
    {

    	swap = 0;
 800c960:	4b3b      	ldr	r3, [pc, #236]	@ (800ca50 <depth24To16+0x10c>)
 800c962:	2200      	movs	r2, #0
 800c964:	701a      	strb	r2, [r3, #0]

    	i = 0;
 800c966:	2300      	movs	r3, #0
 800c968:	60fb      	str	r3, [r7, #12]
    	length /= 2;
 800c96a:	887b      	ldrh	r3, [r7, #2]
 800c96c:	085b      	lsrs	r3, r3, #1
 800c96e:	807b      	strh	r3, [r7, #2]
    	length += 1000;
 800c970:	887b      	ldrh	r3, [r7, #2]
 800c972:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800c976:	807b      	strh	r3, [r7, #2]
 800c978:	e05e      	b.n	800ca38 <depth24To16+0xf4>

    }
    else
    {

    	swap = 1;
 800c97a:	4b35      	ldr	r3, [pc, #212]	@ (800ca50 <depth24To16+0x10c>)
 800c97c:	2201      	movs	r2, #1
 800c97e:	701a      	strb	r2, [r3, #0]

    	i = ( length / 2 ) - 2000;
 800c980:	887b      	ldrh	r3, [r7, #2]
 800c982:	085b      	lsrs	r3, r3, #1
 800c984:	b29b      	uxth	r3, r3
 800c986:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800c98a:	60fb      	str	r3, [r7, #12]

    }

	for( ; i < length ; i++)
 800c98c:	e054      	b.n	800ca38 <depth24To16+0xf4>
	{

		b = pxArr->u8Arr[i*bpx];
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	787a      	ldrb	r2, [r7, #1]
 800c994:	68f9      	ldr	r1, [r7, #12]
 800c996:	fb01 f202 	mul.w	r2, r1, r2
 800c99a:	4413      	add	r3, r2
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	787b      	ldrb	r3, [r7, #1]
 800c9a6:	68f9      	ldr	r1, [r7, #12]
 800c9a8:	fb01 f303 	mul.w	r3, r1, r3
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	4413      	add	r3, r2
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	787b      	ldrb	r3, [r7, #1]
 800c9ba:	68f9      	ldr	r1, [r7, #12]
 800c9bc:	fb01 f303 	mul.w	r3, r1, r3
 800c9c0:	3302      	adds	r3, #2
 800c9c2:	4413      	add	r3, r2
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 800c9c8:	7a7b      	ldrb	r3, [r7, #9]
 800c9ca:	021b      	lsls	r3, r3, #8
 800c9cc:	b21a      	sxth	r2, r3
 800c9ce:	4b21      	ldr	r3, [pc, #132]	@ (800ca54 <depth24To16+0x110>)
 800c9d0:	4013      	ands	r3, r2
 800c9d2:	b21a      	sxth	r2, r3
 800c9d4:	7abb      	ldrb	r3, [r7, #10]
 800c9d6:	00db      	lsls	r3, r3, #3
 800c9d8:	b21b      	sxth	r3, r3
 800c9da:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800c9de:	b21b      	sxth	r3, r3
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	b21a      	sxth	r2, r3
 800c9e4:	7afb      	ldrb	r3, [r7, #11]
 800c9e6:	08db      	lsrs	r3, r3, #3
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	b21b      	sxth	r3, r3
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	b219      	sxth	r1, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681a      	ldr	r2, [r3, #0]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	005b      	lsls	r3, r3, #1
 800c9f8:	4413      	add	r3, r2
 800c9fa:	b28a      	uxth	r2, r1
 800c9fc:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	4413      	add	r3, r2
 800ca08:	881b      	ldrh	r3, [r3, #0]
 800ca0a:	021b      	lsls	r3, r3, #8
 800ca0c:	b21a      	sxth	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6819      	ldr	r1, [r3, #0]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	440b      	add	r3, r1
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	0a1b      	lsrs	r3, r3, #8
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	b21b      	sxth	r3, r3
 800ca20:	4313      	orrs	r3, r2
 800ca22:	b219      	sxth	r1, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681a      	ldr	r2, [r3, #0]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	005b      	lsls	r3, r3, #1
 800ca2c:	4413      	add	r3, r2
 800ca2e:	b28a      	uxth	r2, r1
 800ca30:	801a      	strh	r2, [r3, #0]
	for( ; i < length ; i++)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	3301      	adds	r3, #1
 800ca36:	60fb      	str	r3, [r7, #12]
 800ca38:	887b      	ldrh	r3, [r7, #2]
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	dba6      	blt.n	800c98e <depth24To16+0x4a>

	}

}
 800ca40:	bf00      	nop
 800ca42:	bf00      	nop
 800ca44:	3714      	adds	r7, #20
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	2001879c 	.word	0x2001879c
 800ca54:	fffff800 	.word	0xfffff800

0800ca58 <lcd_draw>:


static void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 800ca58:	b590      	push	{r4, r7, lr}
 800ca5a:	b087      	sub	sp, #28
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4604      	mov	r4, r0
 800ca60:	4608      	mov	r0, r1
 800ca62:	4611      	mov	r1, r2
 800ca64:	461a      	mov	r2, r3
 800ca66:	4623      	mov	r3, r4
 800ca68:	80fb      	strh	r3, [r7, #6]
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	80bb      	strh	r3, [r7, #4]
 800ca6e:	460b      	mov	r3, r1
 800ca70:	807b      	strh	r3, [r7, #2]
 800ca72:	4613      	mov	r3, r2
 800ca74:	803b      	strh	r3, [r7, #0]
	   struct GC9A01_frame frame;


		// Only half of the frame is handled per time
		// Alternate the top and bottom half every cycle
	   	if(swap)
 800ca76:	4b20      	ldr	r3, [pc, #128]	@ (800caf8 <lcd_draw+0xa0>)
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00b      	beq.n	800ca96 <lcd_draw+0x3e>
	   	{

	   		swap = 0;
 800ca7e:	4b1e      	ldr	r3, [pc, #120]	@ (800caf8 <lcd_draw+0xa0>)
 800ca80:	2200      	movs	r2, #0
 800ca82:	701a      	strb	r2, [r3, #0]

	        frame.start.X = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	81bb      	strh	r3, [r7, #12]
	        frame.start.Y = 0;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	81fb      	strh	r3, [r7, #14]
	        frame.end.X = 239;
 800ca8c:	23ef      	movs	r3, #239	@ 0xef
 800ca8e:	823b      	strh	r3, [r7, #16]
	        frame.end.Y = 119;
 800ca90:	2377      	movs	r3, #119	@ 0x77
 800ca92:	827b      	strh	r3, [r7, #18]
 800ca94:	e00e      	b.n	800cab4 <lcd_draw+0x5c>

	   	}
	   	else
	   	{

	   		swap = 1;
 800ca96:	4b18      	ldr	r3, [pc, #96]	@ (800caf8 <lcd_draw+0xa0>)
 800ca98:	2201      	movs	r2, #1
 800ca9a:	701a      	strb	r2, [r3, #0]

	   		data += ( 240 * 240 );
 800ca9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9e:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800caa2:	62bb      	str	r3, [r7, #40]	@ 0x28

	        frame.start.X = 0;
 800caa4:	2300      	movs	r3, #0
 800caa6:	81bb      	strh	r3, [r7, #12]
	        frame.start.Y = 120;
 800caa8:	2378      	movs	r3, #120	@ 0x78
 800caaa:	81fb      	strh	r3, [r7, #14]
	        frame.end.X = 239;
 800caac:	23ef      	movs	r3, #239	@ 0xef
 800caae:	823b      	strh	r3, [r7, #16]
	        frame.end.Y = 239;
 800cab0:	23ef      	movs	r3, #239	@ 0xef
 800cab2:	827b      	strh	r3, [r7, #18]

	   	}

	   	// Sends the block of data in a single time

	    GC9A01_set_frame(frame);
 800cab4:	f107 030c 	add.w	r3, r7, #12
 800cab8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cabc:	f7fe fdd1 	bl	800b662 <GC9A01_set_frame>
	    GC9A01_write_command(MEM_WR);
 800cac0:	202c      	movs	r0, #44	@ 0x2c
 800cac2:	f7fe fb4d 	bl	800b160 <GC9A01_write_command>

	    GC9A01_set_data_command(ON);
 800cac6:	2001      	movs	r0, #1
 800cac8:	f7fe fb16 	bl	800b0f8 <GC9A01_set_data_command>
	    GC9A01_set_chip_select(OFF);
 800cacc:	2000      	movs	r0, #0
 800cace:	f7fe fb2d 	bl	800b12c <GC9A01_set_chip_select>

	    uint32_t total_bytes = wd * ht;		// 2 byte per pixel
 800cad2:	887b      	ldrh	r3, [r7, #2]
 800cad4:	883a      	ldrh	r2, [r7, #0]
 800cad6:	fb02 f303 	mul.w	r3, r2, r3
 800cada:	617b      	str	r3, [r7, #20]
	    GC9A01_spi_tx(data, total_bytes);
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	b29b      	uxth	r3, r3
 800cae0:	4619      	mov	r1, r3
 800cae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cae4:	f7fe fe10 	bl	800b708 <GC9A01_spi_tx>

	    GC9A01_set_chip_select(ON);
 800cae8:	2001      	movs	r0, #1
 800caea:	f7fe fb1f 	bl	800b12c <GC9A01_set_chip_select>

}
 800caee:	bf00      	nop
 800caf0:	371c      	adds	r7, #28
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd90      	pop	{r4, r7, pc}
 800caf6:	bf00      	nop
 800caf8:	2001879d 	.word	0x2001879d

0800cafc <DMA2D_Init>:


static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	4603      	mov	r3, r0
 800cb04:	603a      	str	r2, [r7, #0]
 800cb06:	80fb      	strh	r3, [r7, #6]
 800cb08:	460b      	mov	r3, r1
 800cb0a:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	60fb      	str	r3, [r7, #12]
 800cb10:	2300      	movs	r3, #0
 800cb12:	60bb      	str	r3, [r7, #8]


  HAL_DMA2D_MspInit(&DMA2D_Handle);
 800cb14:	4836      	ldr	r0, [pc, #216]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cb16:	f000 fa03 	bl	800cf20 <HAL_DMA2D_MspInit>

  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d10d      	bne.n	800cb3c <DMA2D_Init+0x40>
  {

    cssMode = DMA2D_CSS_420;
 800cb20:	2302      	movs	r3, #2
 800cb22:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800cb24:	88fb      	ldrh	r3, [r7, #6]
 800cb26:	f003 030f 	and.w	r3, r3, #15
 800cb2a:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d025      	beq.n	800cb7e <DMA2D_Init+0x82>
    {

      inputLineOffset = 16 - inputLineOffset;
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	f1c3 0310 	rsb	r3, r3, #16
 800cb38:	60bb      	str	r3, [r7, #8]
 800cb3a:	e020      	b.n	800cb7e <DMA2D_Init+0x82>

    }

  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10d      	bne.n	800cb5e <DMA2D_Init+0x62>
  {

    cssMode = DMA2D_NO_CSS;
 800cb42:	2300      	movs	r3, #0
 800cb44:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 8;
 800cb46:	88fb      	ldrh	r3, [r7, #6]
 800cb48:	f003 0307 	and.w	r3, r3, #7
 800cb4c:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d014      	beq.n	800cb7e <DMA2D_Init+0x82>
    {

      inputLineOffset = 8 - inputLineOffset;
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	f1c3 0308 	rsb	r3, r3, #8
 800cb5a:	60bb      	str	r3, [r7, #8]
 800cb5c:	e00f      	b.n	800cb7e <DMA2D_Init+0x82>

    }

  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	d10c      	bne.n	800cb7e <DMA2D_Init+0x82>
  {

    cssMode = DMA2D_CSS_422;
 800cb64:	2301      	movs	r3, #1
 800cb66:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800cb68:	88fb      	ldrh	r3, [r7, #6]
 800cb6a:	f003 030f 	and.w	r3, r3, #15
 800cb6e:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d003      	beq.n	800cb7e <DMA2D_Init+0x82>
    {

      inputLineOffset = 16 - inputLineOffset;
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	f1c3 0310 	rsb	r3, r3, #16
 800cb7c:	60bb      	str	r3, [r7, #8]
    }

  }

  // Configure the DMA2D Mode, Color Mode and output offset
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 800cb7e:	4b1c      	ldr	r3, [pc, #112]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cb80:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800cb84:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 800cb86:	4b1a      	ldr	r3, [pc, #104]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cb88:	2201      	movs	r2, #1
 800cb8a:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 800cb8c:	88fb      	ldrh	r3, [r7, #6]
 800cb8e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cb92:	461a      	mov	r2, r3
 800cb94:	4b16      	ldr	r3, [pc, #88]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cb96:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 800cb98:	4b15      	ldr	r3, [pc, #84]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 800cb9e:	4b14      	ldr	r3, [pc, #80]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	615a      	str	r2, [r3, #20]

  // DMA2D Callbacks Configuration
  DMA2D_Handle.XferCpltCallback  = NULL;
 800cba4:	4b12      	ldr	r3, [pc, #72]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cba6:	2200      	movs	r2, #0
 800cba8:	621a      	str	r2, [r3, #32]

  // Foreground Configuration
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800cbaa:	4b11      	ldr	r3, [pc, #68]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cbac:	2201      	movs	r2, #1
 800cbae:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 800cbb0:	4b0f      	ldr	r3, [pc, #60]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cbb2:	22ff      	movs	r2, #255	@ 0xff
 800cbb4:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 800cbb6:	4b0e      	ldr	r3, [pc, #56]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cbb8:	220b      	movs	r2, #11
 800cbba:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 800cbbc:	4a0c      	ldr	r2, [pc, #48]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 800cbc2:	4a0b      	ldr	r2, [pc, #44]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; 		// No ForeGround Red/Blue swap
 800cbc8:	4b09      	ldr	r3, [pc, #36]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 800cbce:	4b08      	ldr	r3, [pc, #32]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance = DMA2D;
 800cbd4:	4b06      	ldr	r3, [pc, #24]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cbd6:	4a07      	ldr	r2, [pc, #28]	@ (800cbf4 <DMA2D_Init+0xf8>)
 800cbd8:	601a      	str	r2, [r3, #0]

  // DMA2D Initialization
  HAL_DMA2D_Init(&DMA2D_Handle);
 800cbda:	4805      	ldr	r0, [pc, #20]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cbdc:	f7f4 f86e 	bl	8000cbc <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	4803      	ldr	r0, [pc, #12]	@ (800cbf0 <DMA2D_Init+0xf4>)
 800cbe4:	f7f4 f9e2 	bl	8000fac <HAL_DMA2D_ConfigLayer>

}
 800cbe8:	bf00      	nop
 800cbea:	3710      	adds	r7, #16
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	2000016c 	.word	0x2000016c
 800cbf4:	52001000 	.word	0x52001000

0800cbf8 <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t ImageWidth, uint16_t ImageHeight)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b08a      	sub	sp, #40	@ 0x28
 800cbfc:	af02      	add	r7, sp, #8
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	4611      	mov	r1, r2
 800cc04:	461a      	mov	r2, r3
 800cc06:	460b      	mov	r3, r1
 800cc08:	80fb      	strh	r3, [r7, #6]
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	80bb      	strh	r3, [r7, #4]

  uint32_t xPos, yPos, destination;


  // calculate the destination transfer address
  xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 800cc0e:	4b15      	ldr	r3, [pc, #84]	@ (800cc64 <DMA2D_CopyBuffer+0x6c>)
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cc16:	085b      	lsrs	r3, r3, #1
 800cc18:	61fb      	str	r3, [r7, #28]
  yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 800cc1a:	4b12      	ldr	r3, [pc, #72]	@ (800cc64 <DMA2D_CopyBuffer+0x6c>)
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cc22:	085b      	lsrs	r3, r3, #1
 800cc24:	61bb      	str	r3, [r7, #24]

  destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 800cc26:	69ba      	ldr	r2, [r7, #24]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	011b      	lsls	r3, r3, #4
 800cc2c:	1a9b      	subs	r3, r3, r2
 800cc2e:	011b      	lsls	r3, r3, #4
 800cc30:	461a      	mov	r2, r3
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	4413      	add	r3, r2
 800cc36:	009a      	lsls	r2, r3, #2
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	617b      	str	r3, [r7, #20]

  // wait for the DMA2D transfer to ends
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 800cc3e:	f04f 31ff 	mov.w	r1, #4294967295
 800cc42:	4809      	ldr	r0, [pc, #36]	@ (800cc68 <DMA2D_CopyBuffer+0x70>)
 800cc44:	f7f4 f8c9 	bl	8000dda <HAL_DMA2D_PollForTransfer>
  // copy the new decoded frame to the LCD Frame buffer
  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 800cc48:	68f9      	ldr	r1, [r7, #12]
 800cc4a:	88fa      	ldrh	r2, [r7, #6]
 800cc4c:	88bb      	ldrh	r3, [r7, #4]
 800cc4e:	9300      	str	r3, [sp, #0]
 800cc50:	4613      	mov	r3, r2
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	4804      	ldr	r0, [pc, #16]	@ (800cc68 <DMA2D_CopyBuffer+0x70>)
 800cc56:	f7f4 f895 	bl	8000d84 <HAL_DMA2D_Start>

}
 800cc5a:	bf00      	nop
 800cc5c:	3720      	adds	r7, #32
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	200001d4 	.word	0x200001d4
 800cc68:	2000016c 	.word	0x2000016c

0800cc6c <SD_Initialize>:


static void SD_Initialize(void)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	af00      	add	r7, sp, #0

  BSP_SD_Init(0);
 800cc70:	2000      	movs	r0, #0
 800cc72:	f7f3 fb85 	bl	8000380 <BSP_SD_Init>

}
 800cc76:	bf00      	nop
 800cc78:	bd80      	pop	{r7, pc}

0800cc7a <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800cc7a:	b480      	push	{r7}
 800cc7c:	b083      	sub	sp, #12
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	4603      	mov	r3, r0
 800cc82:	80fb      	strh	r3, [r7, #6]
	//HAL_NVIC_DisableIRQ(EXTI3_IRQn);
	//HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);

	//MX_GPIO_Init(0);

}
 800cc84:	bf00      	nop
 800cc86:	370c      	adds	r7, #12
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr

0800cc90 <HAL_JPEG_MspInit>:

#include "main.h"


void HAL_JPEG_MspInit(JPEG_HandleTypeDef *hjpeg)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]

  static MDMA_HandleTypeDef   hmdmaIn;
  static MDMA_HandleTypeDef   hmdmaOut;  
  

  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 800cc98:	4b54      	ldr	r3, [pc, #336]	@ (800cdec <HAL_JPEG_MspInit+0x15c>)
 800cc9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800cc9e:	4a53      	ldr	r2, [pc, #332]	@ (800cdec <HAL_JPEG_MspInit+0x15c>)
 800cca0:	f043 0320 	orr.w	r3, r3, #32
 800cca4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800cca8:	4b50      	ldr	r3, [pc, #320]	@ (800cdec <HAL_JPEG_MspInit+0x15c>)
 800ccaa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ccae:	f003 0320 	and.w	r3, r3, #32
 800ccb2:	60fb      	str	r3, [r7, #12]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
  
  __HAL_RCC_MDMA_CLK_ENABLE();
 800ccb6:	4b4d      	ldr	r3, [pc, #308]	@ (800cdec <HAL_JPEG_MspInit+0x15c>)
 800ccb8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800ccbc:	4a4b      	ldr	r2, [pc, #300]	@ (800cdec <HAL_JPEG_MspInit+0x15c>)
 800ccbe:	f043 0301 	orr.w	r3, r3, #1
 800ccc2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800ccc6:	4b49      	ldr	r3, [pc, #292]	@ (800cdec <HAL_JPEG_MspInit+0x15c>)
 800ccc8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800cccc:	f003 0301 	and.w	r3, r3, #1
 800ccd0:	60bb      	str	r3, [r7, #8]
 800ccd2:	68bb      	ldr	r3, [r7, #8]
  
  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 800ccd4:	220f      	movs	r2, #15
 800ccd6:	2107      	movs	r1, #7
 800ccd8:	2079      	movs	r0, #121	@ 0x79
 800ccda:	f7f3 ffa6 	bl	8000c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(JPEG_IRQn);  
 800ccde:	2079      	movs	r0, #121	@ 0x79
 800cce0:	f7f3 ffbd 	bl	8000c5e <HAL_NVIC_EnableIRQ>
  
  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 800cce4:	4b42      	ldr	r3, [pc, #264]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cce6:	2280      	movs	r2, #128	@ 0x80
 800cce8:	60da      	str	r2, [r3, #12]
  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800ccea:	4b41      	ldr	r3, [pc, #260]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800ccec:	2200      	movs	r2, #0
 800ccee:	611a      	str	r2, [r3, #16]
  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 800ccf0:	4b3f      	ldr	r3, [pc, #252]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800ccf2:	2202      	movs	r2, #2
 800ccf4:	615a      	str	r2, [r3, #20]
  hmdmaIn.Init.DestinationInc     = MDMA_DEST_INC_DISABLE;
 800ccf6:	4b3e      	ldr	r3, [pc, #248]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	619a      	str	r2, [r3, #24]
  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 800ccfc:	4b3c      	ldr	r3, [pc, #240]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800ccfe:	2200      	movs	r2, #0
 800cd00:	61da      	str	r2, [r3, #28]
  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 800cd02:	4b3b      	ldr	r3, [pc, #236]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cd04:	2280      	movs	r2, #128	@ 0x80
 800cd06:	621a      	str	r2, [r3, #32]
  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;   
 800cd08:	4b39      	ldr	r3, [pc, #228]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cd0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800cd0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 800cd10:	4b37      	ldr	r3, [pc, #220]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cd12:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800cd16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS; 
 800cd18:	4b35      	ldr	r3, [pc, #212]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cd1a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800cd1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 800cd20:	4b33      	ldr	r3, [pc, #204]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdmaIn.Init.DestBlockAddressOffset  = 0;
 800cd26:	4b32      	ldr	r3, [pc, #200]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cd28:	2200      	movs	r2, #0
 800cd2a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800cd2c:	4b30      	ldr	r3, [pc, #192]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cd2e:	2211      	movs	r2, #17
 800cd30:	605a      	str	r2, [r3, #4]
  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;  
 800cd32:	4b2f      	ldr	r3, [pc, #188]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cd34:	2200      	movs	r2, #0
 800cd36:	609a      	str	r2, [r3, #8]
  hmdmaIn.Init.BufferTransferLength = 32;
 800cd38:	4b2d      	ldr	r3, [pc, #180]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cd3a:	2220      	movs	r2, #32
 800cd3c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hmdmaIn.Instance = MDMA_Channel1;
 800cd3e:	4b2c      	ldr	r3, [pc, #176]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cd40:	4a2c      	ldr	r2, [pc, #176]	@ (800cdf4 <HAL_JPEG_MspInit+0x164>)
 800cd42:	601a      	str	r2, [r3, #0]
  
  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4a2a      	ldr	r2, [pc, #168]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cd48:	631a      	str	r2, [r3, #48]	@ 0x30
 800cd4a:	4a29      	ldr	r2, [pc, #164]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6413      	str	r3, [r2, #64]	@ 0x40
  
  HAL_MDMA_DeInit(&hmdmaIn);  
 800cd50:	4827      	ldr	r0, [pc, #156]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cd52:	f7f6 fb4b 	bl	80033ec <HAL_MDMA_DeInit>

  HAL_MDMA_Init(&hmdmaIn);
 800cd56:	4826      	ldr	r0, [pc, #152]	@ (800cdf0 <HAL_JPEG_MspInit+0x160>)
 800cd58:	f7f6 fafc 	bl	8003354 <HAL_MDMA_Init>
  
  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 800cd5c:	4b26      	ldr	r3, [pc, #152]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cd5e:	22c0      	movs	r2, #192	@ 0xc0
 800cd60:	60da      	str	r2, [r3, #12]
  hmdmaOut.Init.Endianness      = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800cd62:	4b25      	ldr	r3, [pc, #148]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cd64:	2200      	movs	r2, #0
 800cd66:	611a      	str	r2, [r3, #16]
  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 800cd68:	4b23      	ldr	r3, [pc, #140]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	615a      	str	r2, [r3, #20]
  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 800cd6e:	4b22      	ldr	r3, [pc, #136]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cd70:	2208      	movs	r2, #8
 800cd72:	619a      	str	r2, [r3, #24]
  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
 800cd74:	4b20      	ldr	r3, [pc, #128]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cd76:	2220      	movs	r2, #32
 800cd78:	61da      	str	r2, [r3, #28]
  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 800cd7a:	4b1f      	ldr	r3, [pc, #124]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	621a      	str	r2, [r3, #32]
  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 800cd80:	4b1d      	ldr	r3, [pc, #116]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cd82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800cd86:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 800cd88:	4b1b      	ldr	r3, [pc, #108]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cd8a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800cd8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;  
 800cd90:	4b19      	ldr	r3, [pc, #100]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cd92:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800cd96:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 800cd98:	4b17      	ldr	r3, [pc, #92]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdmaOut.Init.DestBlockAddressOffset  = 0;
 800cd9e:	4b16      	ldr	r3, [pc, #88]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cda0:	2200      	movs	r2, #0
 800cda2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800cda4:	4b14      	ldr	r3, [pc, #80]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cda6:	2213      	movs	r2, #19
 800cda8:	605a      	str	r2, [r3, #4]
  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;    
 800cdaa:	4b13      	ldr	r3, [pc, #76]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cdac:	2200      	movs	r2, #0
 800cdae:	609a      	str	r2, [r3, #8]
  hmdmaOut.Init.BufferTransferLength = 32;
 800cdb0:	4b11      	ldr	r3, [pc, #68]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cdb2:	2220      	movs	r2, #32
 800cdb4:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hmdmaOut.Instance = MDMA_Channel0;
 800cdb6:	4b10      	ldr	r3, [pc, #64]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cdb8:	4a10      	ldr	r2, [pc, #64]	@ (800cdfc <HAL_JPEG_MspInit+0x16c>)
 800cdba:	601a      	str	r2, [r3, #0]

  HAL_MDMA_DeInit(&hmdmaOut);  
 800cdbc:	480e      	ldr	r0, [pc, #56]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cdbe:	f7f6 fb15 	bl	80033ec <HAL_MDMA_DeInit>

  HAL_MDMA_Init(&hmdmaOut);
 800cdc2:	480d      	ldr	r0, [pc, #52]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cdc4:	f7f6 fac6 	bl	8003354 <HAL_MDMA_Init>
  
  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	4a0b      	ldr	r2, [pc, #44]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cdcc:	635a      	str	r2, [r3, #52]	@ 0x34
 800cdce:	4a0a      	ldr	r2, [pc, #40]	@ (800cdf8 <HAL_JPEG_MspInit+0x168>)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6413      	str	r3, [r2, #64]	@ 0x40
  
  
  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 800cdd4:	220f      	movs	r2, #15
 800cdd6:	2108      	movs	r1, #8
 800cdd8:	207a      	movs	r0, #122	@ 0x7a
 800cdda:	f7f3 ff26 	bl	8000c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800cdde:	207a      	movs	r0, #122	@ 0x7a
 800cde0:	f7f3 ff3d 	bl	8000c5e <HAL_NVIC_EnableIRQ>
  
}
 800cde4:	bf00      	nop
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	58024400 	.word	0x58024400
 800cdf0:	200187a0 	.word	0x200187a0
 800cdf4:	52000080 	.word	0x52000080
 800cdf8:	2001880c 	.word	0x2001880c
 800cdfc:	52000040 	.word	0x52000040

0800ce00 <HAL_SPI_MspInit>:

}


void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b0be      	sub	sp, #248	@ 0xf8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce08:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	601a      	str	r2, [r3, #0]
 800ce10:	605a      	str	r2, [r3, #4]
 800ce12:	609a      	str	r2, [r3, #8]
 800ce14:	60da      	str	r2, [r3, #12]
 800ce16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ce18:	f107 0318 	add.w	r3, r7, #24
 800ce1c:	22c8      	movs	r2, #200	@ 0xc8
 800ce1e:	2100      	movs	r1, #0
 800ce20:	4618      	mov	r0, r3
 800ce22:	f003 faef 	bl	8010404 <memset>
  if(hspi->Instance==SPI5)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a39      	ldr	r2, [pc, #228]	@ (800cf10 <HAL_SPI_MspInit+0x110>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d16a      	bne.n	800cf06 <HAL_SPI_MspInit+0x106>
  {

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800ce30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800ce34:	f04f 0300 	mov.w	r3, #0
 800ce38:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ce42:	f107 0318 	add.w	r3, r7, #24
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7f7 fe9e 	bl	8004b88 <HAL_RCCEx_PeriphCLKConfig>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d001      	beq.n	800ce56 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800ce52:	f7fe fd49 	bl	800b8e8 <Error_Handler>
    }

    __HAL_RCC_SPI5_CLK_ENABLE();
 800ce56:	4b2f      	ldr	r3, [pc, #188]	@ (800cf14 <HAL_SPI_MspInit+0x114>)
 800ce58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce5c:	4a2d      	ldr	r2, [pc, #180]	@ (800cf14 <HAL_SPI_MspInit+0x114>)
 800ce5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800ce66:	4b2b      	ldr	r3, [pc, #172]	@ (800cf14 <HAL_SPI_MspInit+0x114>)
 800ce68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ce6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ce70:	617b      	str	r3, [r7, #20]
 800ce72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800ce74:	4b27      	ldr	r3, [pc, #156]	@ (800cf14 <HAL_SPI_MspInit+0x114>)
 800ce76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ce7a:	4a26      	ldr	r2, [pc, #152]	@ (800cf14 <HAL_SPI_MspInit+0x114>)
 800ce7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ce80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ce84:	4b23      	ldr	r3, [pc, #140]	@ (800cf14 <HAL_SPI_MspInit+0x114>)
 800ce86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ce8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce8e:	613b      	str	r3, [r7, #16]
 800ce90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800ce92:	4b20      	ldr	r3, [pc, #128]	@ (800cf14 <HAL_SPI_MspInit+0x114>)
 800ce94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ce98:	4a1e      	ldr	r2, [pc, #120]	@ (800cf14 <HAL_SPI_MspInit+0x114>)
 800ce9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ce9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800cea2:	4b1c      	ldr	r3, [pc, #112]	@ (800cf14 <HAL_SPI_MspInit+0x114>)
 800cea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ceac:	60fb      	str	r3, [r7, #12]
 800ceae:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = ARD_D13_Pin;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ceb6:	2302      	movs	r3, #2
 800ceb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cebc:	2300      	movs	r3, #0
 800cebe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cec2:	2300      	movs	r3, #0
 800cec4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800cec8:	2305      	movs	r3, #5
 800ceca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 800cece:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800ced2:	4619      	mov	r1, r3
 800ced4:	4810      	ldr	r0, [pc, #64]	@ (800cf18 <HAL_SPI_MspInit+0x118>)
 800ced6:	f7f4 f9bd 	bl	8001254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800ceda:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800cede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cee2:	2302      	movs	r3, #2
 800cee4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cee8:	2300      	movs	r3, #0
 800ceea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ceee:	2300      	movs	r3, #0
 800cef0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800cef4:	2305      	movs	r3, #5
 800cef6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800cefa:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800cefe:	4619      	mov	r1, r3
 800cf00:	4806      	ldr	r0, [pc, #24]	@ (800cf1c <HAL_SPI_MspInit+0x11c>)
 800cf02:	f7f4 f9a7 	bl	8001254 <HAL_GPIO_Init>

  }

}
 800cf06:	bf00      	nop
 800cf08:	37f8      	adds	r7, #248	@ 0xf8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	40015000 	.word	0x40015000
 800cf14:	58024400 	.word	0x58024400
 800cf18:	58022800 	.word	0x58022800
 800cf1c:	58022400 	.word	0x58022400

0800cf20 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4a0e      	ldr	r2, [pc, #56]	@ (800cf68 <HAL_DMA2D_MspInit+0x48>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d116      	bne.n	800cf60 <HAL_DMA2D_MspInit+0x40>
  {

    __HAL_RCC_DMA2D_CLK_ENABLE();
 800cf32:	4b0e      	ldr	r3, [pc, #56]	@ (800cf6c <HAL_DMA2D_MspInit+0x4c>)
 800cf34:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800cf38:	4a0c      	ldr	r2, [pc, #48]	@ (800cf6c <HAL_DMA2D_MspInit+0x4c>)
 800cf3a:	f043 0310 	orr.w	r3, r3, #16
 800cf3e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800cf42:	4b0a      	ldr	r3, [pc, #40]	@ (800cf6c <HAL_DMA2D_MspInit+0x4c>)
 800cf44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800cf48:	f003 0310 	and.w	r3, r3, #16
 800cf4c:	60fb      	str	r3, [r7, #12]
 800cf4e:	68fb      	ldr	r3, [r7, #12]

    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800cf50:	2200      	movs	r2, #0
 800cf52:	2100      	movs	r1, #0
 800cf54:	205a      	movs	r0, #90	@ 0x5a
 800cf56:	f7f3 fe68 	bl	8000c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800cf5a:	205a      	movs	r0, #90	@ 0x5a
 800cf5c:	f7f3 fe7f 	bl	8000c5e <HAL_NVIC_EnableIRQ>

  }

}
 800cf60:	bf00      	nop
 800cf62:	3710      	adds	r7, #16
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	52001000 	.word	0x52001000
 800cf6c:	58024400 	.word	0x58024400

0800cf70 <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b0b4      	sub	sp, #208	@ 0xd0
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cf78:	f107 0308 	add.w	r3, r7, #8
 800cf7c:	22c8      	movs	r2, #200	@ 0xc8
 800cf7e:	2100      	movs	r1, #0
 800cf80:	4618      	mov	r0, r3
 800cf82:	f003 fa3f 	bl	8010404 <memset>
  if(hrtc->Instance==RTC)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a10      	ldr	r2, [pc, #64]	@ (800cfcc <HAL_RTC_MspInit+0x5c>)
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	d119      	bne.n	800cfc4 <HAL_RTC_MspInit+0x54>
  {

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800cf90:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800cf94:	f04f 0300 	mov.w	r3, #0
 800cf98:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800cf9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cfa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cfa4:	f107 0308 	add.w	r3, r7, #8
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7f7 fded 	bl	8004b88 <HAL_RCCEx_PeriphCLKConfig>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d001      	beq.n	800cfb8 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800cfb4:	f7fe fc98 	bl	800b8e8 <Error_Handler>
    }

    __HAL_RCC_RTC_ENABLE();
 800cfb8:	4b05      	ldr	r3, [pc, #20]	@ (800cfd0 <HAL_RTC_MspInit+0x60>)
 800cfba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfbc:	4a04      	ldr	r2, [pc, #16]	@ (800cfd0 <HAL_RTC_MspInit+0x60>)
 800cfbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfc2:	6713      	str	r3, [r2, #112]	@ 0x70

  }

}
 800cfc4:	bf00      	nop
 800cfc6:	37d0      	adds	r7, #208	@ 0xd0
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	58004000 	.word	0x58004000
 800cfd0:	58024400 	.word	0x58024400

0800cfd4 <NMI_Handler>:

extern JPEG_HandleTypeDef    JPEG_Handle;


void NMI_Handler(void)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	af00      	add	r7, sp, #0
}
 800cfd8:	bf00      	nop
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr

0800cfe2 <HardFault_Handler>:


void HardFault_Handler(void)
{
 800cfe2:	b480      	push	{r7}
 800cfe4:	af00      	add	r7, sp, #0
  while (1)
 800cfe6:	bf00      	nop
 800cfe8:	e7fd      	b.n	800cfe6 <HardFault_Handler+0x4>

0800cfea <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 800cfea:	b480      	push	{r7}
 800cfec:	af00      	add	r7, sp, #0
  while (1)
 800cfee:	bf00      	nop
 800cff0:	e7fd      	b.n	800cfee <MemManage_Handler+0x4>

0800cff2 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 800cff2:	b480      	push	{r7}
 800cff4:	af00      	add	r7, sp, #0
  while (1)
 800cff6:	bf00      	nop
 800cff8:	e7fd      	b.n	800cff6 <BusFault_Handler+0x4>

0800cffa <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 800cffa:	b480      	push	{r7}
 800cffc:	af00      	add	r7, sp, #0
  while (1)
 800cffe:	bf00      	nop
 800d000:	e7fd      	b.n	800cffe <UsageFault_Handler+0x4>

0800d002 <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 800d002:	b480      	push	{r7}
 800d004:	af00      	add	r7, sp, #0
}
 800d006:	bf00      	nop
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 800d010:	b480      	push	{r7}
 800d012:	af00      	add	r7, sp, #0
}
 800d014:	bf00      	nop
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr

0800d01e <PendSV_Handler>:


void PendSV_Handler(void)
{
 800d01e:	b480      	push	{r7}
 800d020:	af00      	add	r7, sp, #0
}
 800d022:	bf00      	nop
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <SysTick_Handler>:


void SysTick_Handler(void)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	af00      	add	r7, sp, #0

  HAL_IncTick();
 800d030:	f7f3 fca0 	bl	8000974 <HAL_IncTick>

}
 800d034:	bf00      	nop
 800d036:	bd80      	pop	{r7, pc}

0800d038 <JPEG_IRQHandler>:


void JPEG_IRQHandler(void)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	af00      	add	r7, sp, #0
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 800d03c:	4802      	ldr	r0, [pc, #8]	@ (800d048 <JPEG_IRQHandler+0x10>)
 800d03e:	f7f4 fd05 	bl	8001a4c <HAL_JPEG_IRQHandler>
}
 800d042:	bf00      	nop
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	20000114 	.word	0x20000114

0800d04c <MDMA_IRQHandler>:


void MDMA_IRQHandler()
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	af00      	add	r7, sp, #0
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 800d050:	4b05      	ldr	r3, [pc, #20]	@ (800d068 <MDMA_IRQHandler+0x1c>)
 800d052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d054:	4618      	mov	r0, r3
 800d056:	f7f6 fac9 	bl	80035ec <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);  
 800d05a:	4b03      	ldr	r3, [pc, #12]	@ (800d068 <MDMA_IRQHandler+0x1c>)
 800d05c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d05e:	4618      	mov	r0, r3
 800d060:	f7f6 fac4 	bl	80035ec <HAL_MDMA_IRQHandler>
}
 800d064:	bf00      	nop
 800d066:	bd80      	pop	{r7, pc}
 800d068:	20000114 	.word	0x20000114

0800d06c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(BUTTON_MINUS_Pin);
 800d070:	2001      	movs	r0, #1
 800d072:	f7f4 fad0 	bl	8001616 <HAL_GPIO_EXTI_IRQHandler>

}
 800d076:	bf00      	nop
 800d078:	bd80      	pop	{r7, pc}

0800d07a <EXTI3_IRQHandler>:


void EXTI3_IRQHandler(void)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(BUTTON_SETTING_Pin);
 800d07e:	2008      	movs	r0, #8
 800d080:	f7f4 fac9 	bl	8001616 <HAL_GPIO_EXTI_IRQHandler>

}
 800d084:	bf00      	nop
 800d086:	bd80      	pop	{r7, pc}

0800d088 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	af00      	add	r7, sp, #0

    HAL_GPIO_EXTI_IRQHandler(BUTTON_PLUS_Pin);
 800d08c:	2080      	movs	r0, #128	@ 0x80
 800d08e:	f7f4 fac2 	bl	8001616 <HAL_GPIO_EXTI_IRQHandler>

}
 800d092:	bf00      	nop
 800d094:	bd80      	pop	{r7, pc}
	...

0800d098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b086      	sub	sp, #24
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d0a0:	4a14      	ldr	r2, [pc, #80]	@ (800d0f4 <_sbrk+0x5c>)
 800d0a2:	4b15      	ldr	r3, [pc, #84]	@ (800d0f8 <_sbrk+0x60>)
 800d0a4:	1ad3      	subs	r3, r2, r3
 800d0a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d0ac:	4b13      	ldr	r3, [pc, #76]	@ (800d0fc <_sbrk+0x64>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d102      	bne.n	800d0ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d0b4:	4b11      	ldr	r3, [pc, #68]	@ (800d0fc <_sbrk+0x64>)
 800d0b6:	4a12      	ldr	r2, [pc, #72]	@ (800d100 <_sbrk+0x68>)
 800d0b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d0ba:	4b10      	ldr	r3, [pc, #64]	@ (800d0fc <_sbrk+0x64>)
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	693a      	ldr	r2, [r7, #16]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d207      	bcs.n	800d0d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d0c8:	f003 f9b4 	bl	8010434 <__errno>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	220c      	movs	r2, #12
 800d0d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d0d6:	e009      	b.n	800d0ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d0d8:	4b08      	ldr	r3, [pc, #32]	@ (800d0fc <_sbrk+0x64>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d0de:	4b07      	ldr	r3, [pc, #28]	@ (800d0fc <_sbrk+0x64>)
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	4a05      	ldr	r2, [pc, #20]	@ (800d0fc <_sbrk+0x64>)
 800d0e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3718      	adds	r7, #24
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	20020000 	.word	0x20020000
 800d0f8:	00002000 	.word	0x00002000
 800d0fc:	20018878 	.word	0x20018878
 800d100:	200189f8 	.word	0x200189f8

0800d104 <Reset_Handler>:

.section  .text.Reset_Handler
.weak  Reset_Handler
.type  Reset_Handler, %function
Reset_Handler:
    ldr   sp, =_estack      /* set stack pointer */
 800d104:	f8df d040 	ldr.w	sp, [pc, #64]	@ 800d148 <LoopFillZerobss+0xe>

    /* Call the clock system initialization function.*/
    bl  SystemInit
 800d108:	f7f3 fb3a 	bl	8000780 <SystemInit>

    /* Copy the data segment initializers from flash to SRAM */
    ldr r0, =_sdata
 800d10c:	480f      	ldr	r0, [pc, #60]	@ (800d14c <LoopFillZerobss+0x12>)
    ldr r1, =_edata
 800d10e:	4910      	ldr	r1, [pc, #64]	@ (800d150 <LoopFillZerobss+0x16>)
    ldr r2, =_sidata
 800d110:	4a10      	ldr	r2, [pc, #64]	@ (800d154 <LoopFillZerobss+0x1a>)
    movs r3, #0
 800d112:	2300      	movs	r3, #0
    b LoopCopyDataInit
 800d114:	e002      	b.n	800d11c <LoopCopyDataInit>

0800d116 <CopyDataInit>:

CopyDataInit:
    ldr r4, [r2, r3]
 800d116:	58d4      	ldr	r4, [r2, r3]
    str r4, [r0, r3]
 800d118:	50c4      	str	r4, [r0, r3]
    adds r3, r3, #4
 800d11a:	3304      	adds	r3, #4

0800d11c <LoopCopyDataInit>:

LoopCopyDataInit:
    adds r4, r0, r3
 800d11c:	18c4      	adds	r4, r0, r3
    cmp r4, r1
 800d11e:	428c      	cmp	r4, r1
    bcc CopyDataInit
 800d120:	d3f9      	bcc.n	800d116 <CopyDataInit>

    /* Zero fill the bss segments (bss, bss_d1, bss_d2, bss_d3). */
    ldr r2, =_sbss
 800d122:	4a0d      	ldr	r2, [pc, #52]	@ (800d158 <LoopFillZerobss+0x1e>)
    ldr r4, =_ebss
 800d124:	4c0d      	ldr	r4, [pc, #52]	@ (800d15c <LoopFillZerobss+0x22>)
    bl FillZeroSegments
 800d126:	f000 f804 	bl	800d132 <FillZeroSegments>

    ldr r2, =_sbss_d1
 800d12a:	4a0d      	ldr	r2, [pc, #52]	@ (800d160 <LoopFillZerobss+0x26>)
    ldr r4, =_ebss_d1
 800d12c:	4c0d      	ldr	r4, [pc, #52]	@ (800d164 <LoopFillZerobss+0x2a>)
    bl FillZeroSegments
 800d12e:	f000 f800 	bl	800d132 <FillZeroSegments>

0800d132 <FillZeroSegments>:
    ldr r2, =_sbss_d3
    ldr r4, =_ebss_d3
    bl FillZeroSegments
*/
FillZeroSegments:
    movs r3, #0
 800d132:	2300      	movs	r3, #0
    b LoopFillZerobss
 800d134:	e001      	b.n	800d13a <LoopFillZerobss>

0800d136 <FillZerobss>:

FillZerobss:
    str  r3, [r2]
 800d136:	6013      	str	r3, [r2, #0]
    adds r2, r2, #4
 800d138:	3204      	adds	r2, #4

0800d13a <LoopFillZerobss>:

LoopFillZerobss:
    cmp r2, r4
 800d13a:	42a2      	cmp	r2, r4
    bcc FillZerobss
 800d13c:	d3fb      	bcc.n	800d136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d13e:	f003 f97f 	bl	8010440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d142:	f7fe fbaf 	bl	800b8a4 <main>
  bx  lr
 800d146:	4770      	bx	lr
    ldr   sp, =_estack      /* set stack pointer */
 800d148:	20020000 	.word	0x20020000
    ldr r0, =_sdata
 800d14c:	20000000 	.word	0x20000000
    ldr r1, =_edata
 800d150:	20000060 	.word	0x20000060
    ldr r2, =_sidata
 800d154:	08011350 	.word	0x08011350
    ldr r2, =_sbss
 800d158:	20000060 	.word	0x20000060
    ldr r4, =_ebss
 800d15c:	200189f8 	.word	0x200189f8
    ldr r2, =_sbss_d1
 800d160:	24000000 	.word	0x24000000
    ldr r4, =_ebss_d1
 800d164:	2404b000 	.word	0x2404b000

0800d168 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d168:	e7fe      	b.n	800d168 <ADC3_IRQHandler>
	...

0800d16c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	4603      	mov	r3, r0
 800d174:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d176:	79fb      	ldrb	r3, [r7, #7]
 800d178:	4a08      	ldr	r2, [pc, #32]	@ (800d19c <disk_status+0x30>)
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	4413      	add	r3, r2
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	79fa      	ldrb	r2, [r7, #7]
 800d184:	4905      	ldr	r1, [pc, #20]	@ (800d19c <disk_status+0x30>)
 800d186:	440a      	add	r2, r1
 800d188:	7a12      	ldrb	r2, [r2, #8]
 800d18a:	4610      	mov	r0, r2
 800d18c:	4798      	blx	r3
 800d18e:	4603      	mov	r3, r0
 800d190:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d192:	7bfb      	ldrb	r3, [r7, #15]
}
 800d194:	4618      	mov	r0, r3
 800d196:	3710      	adds	r7, #16
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}
 800d19c:	200188a4 	.word	0x200188a4

0800d1a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d1ae:	79fb      	ldrb	r3, [r7, #7]
 800d1b0:	4a0e      	ldr	r2, [pc, #56]	@ (800d1ec <disk_initialize+0x4c>)
 800d1b2:	5cd3      	ldrb	r3, [r2, r3]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d114      	bne.n	800d1e2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d1b8:	79fb      	ldrb	r3, [r7, #7]
 800d1ba:	4a0c      	ldr	r2, [pc, #48]	@ (800d1ec <disk_initialize+0x4c>)
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	4413      	add	r3, r2
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	79fa      	ldrb	r2, [r7, #7]
 800d1c6:	4909      	ldr	r1, [pc, #36]	@ (800d1ec <disk_initialize+0x4c>)
 800d1c8:	440a      	add	r2, r1
 800d1ca:	7a12      	ldrb	r2, [r2, #8]
 800d1cc:	4610      	mov	r0, r2
 800d1ce:	4798      	blx	r3
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800d1d4:	7bfb      	ldrb	r3, [r7, #15]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d103      	bne.n	800d1e2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800d1da:	79fb      	ldrb	r3, [r7, #7]
 800d1dc:	4a03      	ldr	r2, [pc, #12]	@ (800d1ec <disk_initialize+0x4c>)
 800d1de:	2101      	movs	r1, #1
 800d1e0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800d1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	200188a4 	.word	0x200188a4

0800d1f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d1f0:	b590      	push	{r4, r7, lr}
 800d1f2:	b087      	sub	sp, #28
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60b9      	str	r1, [r7, #8]
 800d1f8:	607a      	str	r2, [r7, #4]
 800d1fa:	603b      	str	r3, [r7, #0]
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d200:	7bfb      	ldrb	r3, [r7, #15]
 800d202:	4a0a      	ldr	r2, [pc, #40]	@ (800d22c <disk_read+0x3c>)
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	689c      	ldr	r4, [r3, #8]
 800d20c:	7bfb      	ldrb	r3, [r7, #15]
 800d20e:	4a07      	ldr	r2, [pc, #28]	@ (800d22c <disk_read+0x3c>)
 800d210:	4413      	add	r3, r2
 800d212:	7a18      	ldrb	r0, [r3, #8]
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	68b9      	ldr	r1, [r7, #8]
 800d21a:	47a0      	blx	r4
 800d21c:	4603      	mov	r3, r0
 800d21e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d220:	7dfb      	ldrb	r3, [r7, #23]
}
 800d222:	4618      	mov	r0, r3
 800d224:	371c      	adds	r7, #28
 800d226:	46bd      	mov	sp, r7
 800d228:	bd90      	pop	{r4, r7, pc}
 800d22a:	bf00      	nop
 800d22c:	200188a4 	.word	0x200188a4

0800d230 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d230:	b590      	push	{r4, r7, lr}
 800d232:	b087      	sub	sp, #28
 800d234:	af00      	add	r7, sp, #0
 800d236:	60b9      	str	r1, [r7, #8]
 800d238:	607a      	str	r2, [r7, #4]
 800d23a:	603b      	str	r3, [r7, #0]
 800d23c:	4603      	mov	r3, r0
 800d23e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d240:	7bfb      	ldrb	r3, [r7, #15]
 800d242:	4a0a      	ldr	r2, [pc, #40]	@ (800d26c <disk_write+0x3c>)
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	4413      	add	r3, r2
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	68dc      	ldr	r4, [r3, #12]
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
 800d24e:	4a07      	ldr	r2, [pc, #28]	@ (800d26c <disk_write+0x3c>)
 800d250:	4413      	add	r3, r2
 800d252:	7a18      	ldrb	r0, [r3, #8]
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	68b9      	ldr	r1, [r7, #8]
 800d25a:	47a0      	blx	r4
 800d25c:	4603      	mov	r3, r0
 800d25e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d260:	7dfb      	ldrb	r3, [r7, #23]
}
 800d262:	4618      	mov	r0, r3
 800d264:	371c      	adds	r7, #28
 800d266:	46bd      	mov	sp, r7
 800d268:	bd90      	pop	{r4, r7, pc}
 800d26a:	bf00      	nop
 800d26c:	200188a4 	.word	0x200188a4

0800d270 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	4603      	mov	r3, r0
 800d278:	603a      	str	r2, [r7, #0]
 800d27a:	71fb      	strb	r3, [r7, #7]
 800d27c:	460b      	mov	r3, r1
 800d27e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d280:	79fb      	ldrb	r3, [r7, #7]
 800d282:	4a09      	ldr	r2, [pc, #36]	@ (800d2a8 <disk_ioctl+0x38>)
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	4413      	add	r3, r2
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	691b      	ldr	r3, [r3, #16]
 800d28c:	79fa      	ldrb	r2, [r7, #7]
 800d28e:	4906      	ldr	r1, [pc, #24]	@ (800d2a8 <disk_ioctl+0x38>)
 800d290:	440a      	add	r2, r1
 800d292:	7a10      	ldrb	r0, [r2, #8]
 800d294:	79b9      	ldrb	r1, [r7, #6]
 800d296:	683a      	ldr	r2, [r7, #0]
 800d298:	4798      	blx	r3
 800d29a:	4603      	mov	r3, r0
 800d29c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3710      	adds	r7, #16
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	200188a4 	.word	0x200188a4

0800d2ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	af00      	add	r7, sp, #0
  return 0;
 800d2b0:	2300      	movs	r3, #0
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr

0800d2bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d2cc:	89fb      	ldrh	r3, [r7, #14]
 800d2ce:	021b      	lsls	r3, r3, #8
 800d2d0:	b21a      	sxth	r2, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	b21b      	sxth	r3, r3
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	b21b      	sxth	r3, r3
 800d2dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d2de:	89fb      	ldrh	r3, [r7, #14]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3714      	adds	r7, #20
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	3303      	adds	r3, #3
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	021b      	lsls	r3, r3, #8
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	3202      	adds	r2, #2
 800d304:	7812      	ldrb	r2, [r2, #0]
 800d306:	4313      	orrs	r3, r2
 800d308:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	021b      	lsls	r3, r3, #8
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	3201      	adds	r2, #1
 800d312:	7812      	ldrb	r2, [r2, #0]
 800d314:	4313      	orrs	r3, r2
 800d316:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	021b      	lsls	r3, r3, #8
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	7812      	ldrb	r2, [r2, #0]
 800d320:	4313      	orrs	r3, r2
 800d322:	60fb      	str	r3, [r7, #12]
	return rv;
 800d324:	68fb      	ldr	r3, [r7, #12]
}
 800d326:	4618      	mov	r0, r3
 800d328:	3714      	adds	r7, #20
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr

0800d332 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d332:	b480      	push	{r7}
 800d334:	b083      	sub	sp, #12
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
 800d33a:	460b      	mov	r3, r1
 800d33c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	1c5a      	adds	r2, r3, #1
 800d342:	607a      	str	r2, [r7, #4]
 800d344:	887a      	ldrh	r2, [r7, #2]
 800d346:	b2d2      	uxtb	r2, r2
 800d348:	701a      	strb	r2, [r3, #0]
 800d34a:	887b      	ldrh	r3, [r7, #2]
 800d34c:	0a1b      	lsrs	r3, r3, #8
 800d34e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	1c5a      	adds	r2, r3, #1
 800d354:	607a      	str	r2, [r7, #4]
 800d356:	887a      	ldrh	r2, [r7, #2]
 800d358:	b2d2      	uxtb	r2, r2
 800d35a:	701a      	strb	r2, [r3, #0]
}
 800d35c:	bf00      	nop
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	1c5a      	adds	r2, r3, #1
 800d376:	607a      	str	r2, [r7, #4]
 800d378:	683a      	ldr	r2, [r7, #0]
 800d37a:	b2d2      	uxtb	r2, r2
 800d37c:	701a      	strb	r2, [r3, #0]
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	0a1b      	lsrs	r3, r3, #8
 800d382:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	1c5a      	adds	r2, r3, #1
 800d388:	607a      	str	r2, [r7, #4]
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	b2d2      	uxtb	r2, r2
 800d38e:	701a      	strb	r2, [r3, #0]
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	0a1b      	lsrs	r3, r3, #8
 800d394:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	1c5a      	adds	r2, r3, #1
 800d39a:	607a      	str	r2, [r7, #4]
 800d39c:	683a      	ldr	r2, [r7, #0]
 800d39e:	b2d2      	uxtb	r2, r2
 800d3a0:	701a      	strb	r2, [r3, #0]
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	0a1b      	lsrs	r3, r3, #8
 800d3a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	607a      	str	r2, [r7, #4]
 800d3ae:	683a      	ldr	r2, [r7, #0]
 800d3b0:	b2d2      	uxtb	r2, r2
 800d3b2:	701a      	strb	r2, [r3, #0]
}
 800d3b4:	bf00      	nop
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d3c0:	b480      	push	{r7}
 800d3c2:	b087      	sub	sp, #28
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00d      	beq.n	800d3f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d3da:	693a      	ldr	r2, [r7, #16]
 800d3dc:	1c53      	adds	r3, r2, #1
 800d3de:	613b      	str	r3, [r7, #16]
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	1c59      	adds	r1, r3, #1
 800d3e4:	6179      	str	r1, [r7, #20]
 800d3e6:	7812      	ldrb	r2, [r2, #0]
 800d3e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	3b01      	subs	r3, #1
 800d3ee:	607b      	str	r3, [r7, #4]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d1f1      	bne.n	800d3da <mem_cpy+0x1a>
	}
}
 800d3f6:	bf00      	nop
 800d3f8:	371c      	adds	r7, #28
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr

0800d402 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d402:	b480      	push	{r7}
 800d404:	b087      	sub	sp, #28
 800d406:	af00      	add	r7, sp, #0
 800d408:	60f8      	str	r0, [r7, #12]
 800d40a:	60b9      	str	r1, [r7, #8]
 800d40c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	1c5a      	adds	r2, r3, #1
 800d416:	617a      	str	r2, [r7, #20]
 800d418:	68ba      	ldr	r2, [r7, #8]
 800d41a:	b2d2      	uxtb	r2, r2
 800d41c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	3b01      	subs	r3, #1
 800d422:	607b      	str	r3, [r7, #4]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1f3      	bne.n	800d412 <mem_set+0x10>
}
 800d42a:	bf00      	nop
 800d42c:	bf00      	nop
 800d42e:	371c      	adds	r7, #28
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d438:	b480      	push	{r7}
 800d43a:	b089      	sub	sp, #36	@ 0x24
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	61fb      	str	r3, [r7, #28]
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d44c:	2300      	movs	r3, #0
 800d44e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	1c5a      	adds	r2, r3, #1
 800d454:	61fa      	str	r2, [r7, #28]
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	4619      	mov	r1, r3
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	1c5a      	adds	r2, r3, #1
 800d45e:	61ba      	str	r2, [r7, #24]
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	1acb      	subs	r3, r1, r3
 800d464:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	3b01      	subs	r3, #1
 800d46a:	607b      	str	r3, [r7, #4]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d002      	beq.n	800d478 <mem_cmp+0x40>
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d0eb      	beq.n	800d450 <mem_cmp+0x18>

	return r;
 800d478:	697b      	ldr	r3, [r7, #20]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3724      	adds	r7, #36	@ 0x24
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d486:	b480      	push	{r7}
 800d488:	b083      	sub	sp, #12
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d490:	e002      	b.n	800d498 <chk_chr+0x12>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	3301      	adds	r3, #1
 800d496:	607b      	str	r3, [r7, #4]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d005      	beq.n	800d4ac <chk_chr+0x26>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d1f2      	bne.n	800d492 <chk_chr+0xc>
	return *str;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	781b      	ldrb	r3, [r3, #0]
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b085      	sub	sp, #20
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	60bb      	str	r3, [r7, #8]
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	60fb      	str	r3, [r7, #12]
 800d4ce:	e029      	b.n	800d524 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d4d0:	4a27      	ldr	r2, [pc, #156]	@ (800d570 <chk_lock+0xb4>)
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	011b      	lsls	r3, r3, #4
 800d4d6:	4413      	add	r3, r2
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d01d      	beq.n	800d51a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d4de:	4a24      	ldr	r2, [pc, #144]	@ (800d570 <chk_lock+0xb4>)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	011b      	lsls	r3, r3, #4
 800d4e4:	4413      	add	r3, r2
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d116      	bne.n	800d51e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d4f0:	4a1f      	ldr	r2, [pc, #124]	@ (800d570 <chk_lock+0xb4>)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	011b      	lsls	r3, r3, #4
 800d4f6:	4413      	add	r3, r2
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d500:	429a      	cmp	r2, r3
 800d502:	d10c      	bne.n	800d51e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d504:	4a1a      	ldr	r2, [pc, #104]	@ (800d570 <chk_lock+0xb4>)
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	011b      	lsls	r3, r3, #4
 800d50a:	4413      	add	r3, r2
 800d50c:	3308      	adds	r3, #8
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d514:	429a      	cmp	r2, r3
 800d516:	d102      	bne.n	800d51e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d518:	e007      	b.n	800d52a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d51a:	2301      	movs	r3, #1
 800d51c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	3301      	adds	r3, #1
 800d522:	60fb      	str	r3, [r7, #12]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2b01      	cmp	r3, #1
 800d528:	d9d2      	bls.n	800d4d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	d109      	bne.n	800d544 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d102      	bne.n	800d53c <chk_lock+0x80>
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	2b02      	cmp	r3, #2
 800d53a:	d101      	bne.n	800d540 <chk_lock+0x84>
 800d53c:	2300      	movs	r3, #0
 800d53e:	e010      	b.n	800d562 <chk_lock+0xa6>
 800d540:	2312      	movs	r3, #18
 800d542:	e00e      	b.n	800d562 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d108      	bne.n	800d55c <chk_lock+0xa0>
 800d54a:	4a09      	ldr	r2, [pc, #36]	@ (800d570 <chk_lock+0xb4>)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	011b      	lsls	r3, r3, #4
 800d550:	4413      	add	r3, r2
 800d552:	330c      	adds	r3, #12
 800d554:	881b      	ldrh	r3, [r3, #0]
 800d556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d55a:	d101      	bne.n	800d560 <chk_lock+0xa4>
 800d55c:	2310      	movs	r3, #16
 800d55e:	e000      	b.n	800d562 <chk_lock+0xa6>
 800d560:	2300      	movs	r3, #0
}
 800d562:	4618      	mov	r0, r3
 800d564:	3714      	adds	r7, #20
 800d566:	46bd      	mov	sp, r7
 800d568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	20018884 	.word	0x20018884

0800d574 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d57a:	2300      	movs	r3, #0
 800d57c:	607b      	str	r3, [r7, #4]
 800d57e:	e002      	b.n	800d586 <enq_lock+0x12>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	3301      	adds	r3, #1
 800d584:	607b      	str	r3, [r7, #4]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2b01      	cmp	r3, #1
 800d58a:	d806      	bhi.n	800d59a <enq_lock+0x26>
 800d58c:	4a09      	ldr	r2, [pc, #36]	@ (800d5b4 <enq_lock+0x40>)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	011b      	lsls	r3, r3, #4
 800d592:	4413      	add	r3, r2
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d1f2      	bne.n	800d580 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2b02      	cmp	r3, #2
 800d59e:	bf14      	ite	ne
 800d5a0:	2301      	movne	r3, #1
 800d5a2:	2300      	moveq	r3, #0
 800d5a4:	b2db      	uxtb	r3, r3
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	370c      	adds	r7, #12
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr
 800d5b2:	bf00      	nop
 800d5b4:	20018884 	.word	0x20018884

0800d5b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	60fb      	str	r3, [r7, #12]
 800d5c6:	e01f      	b.n	800d608 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d5c8:	4a41      	ldr	r2, [pc, #260]	@ (800d6d0 <inc_lock+0x118>)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	011b      	lsls	r3, r3, #4
 800d5ce:	4413      	add	r3, r2
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d113      	bne.n	800d602 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d5da:	4a3d      	ldr	r2, [pc, #244]	@ (800d6d0 <inc_lock+0x118>)
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	011b      	lsls	r3, r3, #4
 800d5e0:	4413      	add	r3, r2
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d109      	bne.n	800d602 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d5ee:	4a38      	ldr	r2, [pc, #224]	@ (800d6d0 <inc_lock+0x118>)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	011b      	lsls	r3, r3, #4
 800d5f4:	4413      	add	r3, r2
 800d5f6:	3308      	adds	r3, #8
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d006      	beq.n	800d610 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	3301      	adds	r3, #1
 800d606:	60fb      	str	r3, [r7, #12]
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d9dc      	bls.n	800d5c8 <inc_lock+0x10>
 800d60e:	e000      	b.n	800d612 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d610:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2b02      	cmp	r3, #2
 800d616:	d132      	bne.n	800d67e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d618:	2300      	movs	r3, #0
 800d61a:	60fb      	str	r3, [r7, #12]
 800d61c:	e002      	b.n	800d624 <inc_lock+0x6c>
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	3301      	adds	r3, #1
 800d622:	60fb      	str	r3, [r7, #12]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	2b01      	cmp	r3, #1
 800d628:	d806      	bhi.n	800d638 <inc_lock+0x80>
 800d62a:	4a29      	ldr	r2, [pc, #164]	@ (800d6d0 <inc_lock+0x118>)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	011b      	lsls	r3, r3, #4
 800d630:	4413      	add	r3, r2
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d1f2      	bne.n	800d61e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2b02      	cmp	r3, #2
 800d63c:	d101      	bne.n	800d642 <inc_lock+0x8a>
 800d63e:	2300      	movs	r3, #0
 800d640:	e040      	b.n	800d6c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	4922      	ldr	r1, [pc, #136]	@ (800d6d0 <inc_lock+0x118>)
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	011b      	lsls	r3, r3, #4
 800d64c:	440b      	add	r3, r1
 800d64e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	689a      	ldr	r2, [r3, #8]
 800d654:	491e      	ldr	r1, [pc, #120]	@ (800d6d0 <inc_lock+0x118>)
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	011b      	lsls	r3, r3, #4
 800d65a:	440b      	add	r3, r1
 800d65c:	3304      	adds	r3, #4
 800d65e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	695a      	ldr	r2, [r3, #20]
 800d664:	491a      	ldr	r1, [pc, #104]	@ (800d6d0 <inc_lock+0x118>)
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	011b      	lsls	r3, r3, #4
 800d66a:	440b      	add	r3, r1
 800d66c:	3308      	adds	r3, #8
 800d66e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d670:	4a17      	ldr	r2, [pc, #92]	@ (800d6d0 <inc_lock+0x118>)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	011b      	lsls	r3, r3, #4
 800d676:	4413      	add	r3, r2
 800d678:	330c      	adds	r3, #12
 800d67a:	2200      	movs	r2, #0
 800d67c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d009      	beq.n	800d698 <inc_lock+0xe0>
 800d684:	4a12      	ldr	r2, [pc, #72]	@ (800d6d0 <inc_lock+0x118>)
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	011b      	lsls	r3, r3, #4
 800d68a:	4413      	add	r3, r2
 800d68c:	330c      	adds	r3, #12
 800d68e:	881b      	ldrh	r3, [r3, #0]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d001      	beq.n	800d698 <inc_lock+0xe0>
 800d694:	2300      	movs	r3, #0
 800d696:	e015      	b.n	800d6c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d108      	bne.n	800d6b0 <inc_lock+0xf8>
 800d69e:	4a0c      	ldr	r2, [pc, #48]	@ (800d6d0 <inc_lock+0x118>)
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	011b      	lsls	r3, r3, #4
 800d6a4:	4413      	add	r3, r2
 800d6a6:	330c      	adds	r3, #12
 800d6a8:	881b      	ldrh	r3, [r3, #0]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	b29a      	uxth	r2, r3
 800d6ae:	e001      	b.n	800d6b4 <inc_lock+0xfc>
 800d6b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d6b4:	4906      	ldr	r1, [pc, #24]	@ (800d6d0 <inc_lock+0x118>)
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	011b      	lsls	r3, r3, #4
 800d6ba:	440b      	add	r3, r1
 800d6bc:	330c      	adds	r3, #12
 800d6be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	3301      	adds	r3, #1
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3714      	adds	r7, #20
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr
 800d6d0:	20018884 	.word	0x20018884

0800d6d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	3b01      	subs	r3, #1
 800d6e0:	607b      	str	r3, [r7, #4]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d825      	bhi.n	800d734 <dec_lock+0x60>
		n = Files[i].ctr;
 800d6e8:	4a17      	ldr	r2, [pc, #92]	@ (800d748 <dec_lock+0x74>)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	011b      	lsls	r3, r3, #4
 800d6ee:	4413      	add	r3, r2
 800d6f0:	330c      	adds	r3, #12
 800d6f2:	881b      	ldrh	r3, [r3, #0]
 800d6f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d6f6:	89fb      	ldrh	r3, [r7, #14]
 800d6f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6fc:	d101      	bne.n	800d702 <dec_lock+0x2e>
 800d6fe:	2300      	movs	r3, #0
 800d700:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d702:	89fb      	ldrh	r3, [r7, #14]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d002      	beq.n	800d70e <dec_lock+0x3a>
 800d708:	89fb      	ldrh	r3, [r7, #14]
 800d70a:	3b01      	subs	r3, #1
 800d70c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d70e:	4a0e      	ldr	r2, [pc, #56]	@ (800d748 <dec_lock+0x74>)
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	011b      	lsls	r3, r3, #4
 800d714:	4413      	add	r3, r2
 800d716:	330c      	adds	r3, #12
 800d718:	89fa      	ldrh	r2, [r7, #14]
 800d71a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d71c:	89fb      	ldrh	r3, [r7, #14]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d105      	bne.n	800d72e <dec_lock+0x5a>
 800d722:	4a09      	ldr	r2, [pc, #36]	@ (800d748 <dec_lock+0x74>)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	011b      	lsls	r3, r3, #4
 800d728:	4413      	add	r3, r2
 800d72a:	2200      	movs	r2, #0
 800d72c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	737b      	strb	r3, [r7, #13]
 800d732:	e001      	b.n	800d738 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d734:	2302      	movs	r3, #2
 800d736:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d738:	7b7b      	ldrb	r3, [r7, #13]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3714      	adds	r7, #20
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr
 800d746:	bf00      	nop
 800d748:	20018884 	.word	0x20018884

0800d74c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d754:	2300      	movs	r3, #0
 800d756:	60fb      	str	r3, [r7, #12]
 800d758:	e010      	b.n	800d77c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d75a:	4a0d      	ldr	r2, [pc, #52]	@ (800d790 <clear_lock+0x44>)
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	011b      	lsls	r3, r3, #4
 800d760:	4413      	add	r3, r2
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	429a      	cmp	r2, r3
 800d768:	d105      	bne.n	800d776 <clear_lock+0x2a>
 800d76a:	4a09      	ldr	r2, [pc, #36]	@ (800d790 <clear_lock+0x44>)
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	011b      	lsls	r3, r3, #4
 800d770:	4413      	add	r3, r2
 800d772:	2200      	movs	r2, #0
 800d774:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	3301      	adds	r3, #1
 800d77a:	60fb      	str	r3, [r7, #12]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d9eb      	bls.n	800d75a <clear_lock+0xe>
	}
}
 800d782:	bf00      	nop
 800d784:	bf00      	nop
 800d786:	3714      	adds	r7, #20
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr
 800d790:	20018884 	.word	0x20018884

0800d794 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b086      	sub	sp, #24
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d79c:	2300      	movs	r3, #0
 800d79e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	78db      	ldrb	r3, [r3, #3]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d034      	beq.n	800d812 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	7858      	ldrb	r0, [r3, #1]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	697a      	ldr	r2, [r7, #20]
 800d7bc:	f7ff fd38 	bl	800d230 <disk_write>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d002      	beq.n	800d7cc <sync_window+0x38>
			res = FR_DISK_ERR;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	73fb      	strb	r3, [r7, #15]
 800d7ca:	e022      	b.n	800d812 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7d6:	697a      	ldr	r2, [r7, #20]
 800d7d8:	1ad2      	subs	r2, r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	69db      	ldr	r3, [r3, #28]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d217      	bcs.n	800d812 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	789b      	ldrb	r3, [r3, #2]
 800d7e6:	613b      	str	r3, [r7, #16]
 800d7e8:	e010      	b.n	800d80c <sync_window+0x78>
					wsect += fs->fsize;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	69db      	ldr	r3, [r3, #28]
 800d7ee:	697a      	ldr	r2, [r7, #20]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	7858      	ldrb	r0, [r3, #1]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d7fe:	2301      	movs	r3, #1
 800d800:	697a      	ldr	r2, [r7, #20]
 800d802:	f7ff fd15 	bl	800d230 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	3b01      	subs	r3, #1
 800d80a:	613b      	str	r3, [r7, #16]
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d8eb      	bhi.n	800d7ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d812:	7bfb      	ldrb	r3, [r7, #15]
}
 800d814:	4618      	mov	r0, r3
 800d816:	3718      	adds	r7, #24
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d826:	2300      	movs	r3, #0
 800d828:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d82e:	683a      	ldr	r2, [r7, #0]
 800d830:	429a      	cmp	r2, r3
 800d832:	d01b      	beq.n	800d86c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f7ff ffad 	bl	800d794 <sync_window>
 800d83a:	4603      	mov	r3, r0
 800d83c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d83e:	7bfb      	ldrb	r3, [r7, #15]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d113      	bne.n	800d86c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	7858      	ldrb	r0, [r3, #1]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d84e:	2301      	movs	r3, #1
 800d850:	683a      	ldr	r2, [r7, #0]
 800d852:	f7ff fccd 	bl	800d1f0 <disk_read>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d004      	beq.n	800d866 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d85c:	f04f 33ff 	mov.w	r3, #4294967295
 800d860:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d862:	2301      	movs	r3, #1
 800d864:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	683a      	ldr	r2, [r7, #0]
 800d86a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800d86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
	...

0800d878 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7ff ff87 	bl	800d794 <sync_window>
 800d886:	4603      	mov	r3, r0
 800d888:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d88a:	7bfb      	ldrb	r3, [r7, #15]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d158      	bne.n	800d942 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	2b03      	cmp	r3, #3
 800d896:	d148      	bne.n	800d92a <sync_fs+0xb2>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	791b      	ldrb	r3, [r3, #4]
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d144      	bne.n	800d92a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	3334      	adds	r3, #52	@ 0x34
 800d8a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7ff fda9 	bl	800d402 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	3334      	adds	r3, #52	@ 0x34
 800d8b4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d8b8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7ff fd38 	bl	800d332 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	3334      	adds	r3, #52	@ 0x34
 800d8c6:	4921      	ldr	r1, [pc, #132]	@ (800d94c <sync_fs+0xd4>)
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7ff fd4d 	bl	800d368 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	3334      	adds	r3, #52	@ 0x34
 800d8d2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d8d6:	491e      	ldr	r1, [pc, #120]	@ (800d950 <sync_fs+0xd8>)
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7ff fd45 	bl	800d368 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	3334      	adds	r3, #52	@ 0x34
 800d8e2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	695b      	ldr	r3, [r3, #20]
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	4610      	mov	r0, r2
 800d8ee:	f7ff fd3b 	bl	800d368 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	3334      	adds	r3, #52	@ 0x34
 800d8f6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	4619      	mov	r1, r3
 800d900:	4610      	mov	r0, r2
 800d902:	f7ff fd31 	bl	800d368 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6a1b      	ldr	r3, [r3, #32]
 800d90a:	1c5a      	adds	r2, r3, #1
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	7858      	ldrb	r0, [r3, #1]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d91e:	2301      	movs	r3, #1
 800d920:	f7ff fc86 	bl	800d230 <disk_write>
			fs->fsi_flag = 0;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	785b      	ldrb	r3, [r3, #1]
 800d92e:	2200      	movs	r2, #0
 800d930:	2100      	movs	r1, #0
 800d932:	4618      	mov	r0, r3
 800d934:	f7ff fc9c 	bl	800d270 <disk_ioctl>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d001      	beq.n	800d942 <sync_fs+0xca>
 800d93e:	2301      	movs	r3, #1
 800d940:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d942:	7bfb      	ldrb	r3, [r7, #15]
}
 800d944:	4618      	mov	r0, r3
 800d946:	3710      	adds	r7, #16
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}
 800d94c:	41615252 	.word	0x41615252
 800d950:	61417272 	.word	0x61417272

0800d954 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	3b02      	subs	r3, #2
 800d962:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	699b      	ldr	r3, [r3, #24]
 800d968:	3b02      	subs	r3, #2
 800d96a:	683a      	ldr	r2, [r7, #0]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d301      	bcc.n	800d974 <clust2sect+0x20>
 800d970:	2300      	movs	r3, #0
 800d972:	e008      	b.n	800d986 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	895b      	ldrh	r3, [r3, #10]
 800d978:	461a      	mov	r2, r3
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	fb03 f202 	mul.w	r2, r3, r2
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d984:	4413      	add	r3, r2
}
 800d986:	4618      	mov	r0, r3
 800d988:	370c      	adds	r7, #12
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr

0800d992 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d992:	b580      	push	{r7, lr}
 800d994:	b086      	sub	sp, #24
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
 800d99a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d904      	bls.n	800d9b2 <get_fat+0x20>
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	699b      	ldr	r3, [r3, #24]
 800d9ac:	683a      	ldr	r2, [r7, #0]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d302      	bcc.n	800d9b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	617b      	str	r3, [r7, #20]
 800d9b6:	e08e      	b.n	800dad6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d9b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d9bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	2b03      	cmp	r3, #3
 800d9c4:	d061      	beq.n	800da8a <get_fat+0xf8>
 800d9c6:	2b03      	cmp	r3, #3
 800d9c8:	dc7b      	bgt.n	800dac2 <get_fat+0x130>
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d002      	beq.n	800d9d4 <get_fat+0x42>
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	d041      	beq.n	800da56 <get_fat+0xc4>
 800d9d2:	e076      	b.n	800dac2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	60fb      	str	r3, [r7, #12]
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	085b      	lsrs	r3, r3, #1
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	4413      	add	r3, r2
 800d9e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	0a5b      	lsrs	r3, r3, #9
 800d9ea:	4413      	add	r3, r2
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	6938      	ldr	r0, [r7, #16]
 800d9f0:	f7ff ff14 	bl	800d81c <move_window>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d166      	bne.n	800dac8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	1c5a      	adds	r2, r3, #1
 800d9fe:	60fa      	str	r2, [r7, #12]
 800da00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da04:	693a      	ldr	r2, [r7, #16]
 800da06:	4413      	add	r3, r2
 800da08:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800da0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	0a5b      	lsrs	r3, r3, #9
 800da16:	4413      	add	r3, r2
 800da18:	4619      	mov	r1, r3
 800da1a:	6938      	ldr	r0, [r7, #16]
 800da1c:	f7ff fefe 	bl	800d81c <move_window>
 800da20:	4603      	mov	r3, r0
 800da22:	2b00      	cmp	r3, #0
 800da24:	d152      	bne.n	800dacc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da2c:	693a      	ldr	r2, [r7, #16]
 800da2e:	4413      	add	r3, r2
 800da30:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800da34:	021b      	lsls	r3, r3, #8
 800da36:	68ba      	ldr	r2, [r7, #8]
 800da38:	4313      	orrs	r3, r2
 800da3a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	f003 0301 	and.w	r3, r3, #1
 800da42:	2b00      	cmp	r3, #0
 800da44:	d002      	beq.n	800da4c <get_fat+0xba>
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	091b      	lsrs	r3, r3, #4
 800da4a:	e002      	b.n	800da52 <get_fat+0xc0>
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800da52:	617b      	str	r3, [r7, #20]
			break;
 800da54:	e03f      	b.n	800dad6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	0a1b      	lsrs	r3, r3, #8
 800da5e:	4413      	add	r3, r2
 800da60:	4619      	mov	r1, r3
 800da62:	6938      	ldr	r0, [r7, #16]
 800da64:	f7ff feda 	bl	800d81c <move_window>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d130      	bne.n	800dad0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	005b      	lsls	r3, r3, #1
 800da78:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800da7c:	4413      	add	r3, r2
 800da7e:	4618      	mov	r0, r3
 800da80:	f7ff fc1c 	bl	800d2bc <ld_word>
 800da84:	4603      	mov	r3, r0
 800da86:	617b      	str	r3, [r7, #20]
			break;
 800da88:	e025      	b.n	800dad6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	09db      	lsrs	r3, r3, #7
 800da92:	4413      	add	r3, r2
 800da94:	4619      	mov	r1, r3
 800da96:	6938      	ldr	r0, [r7, #16]
 800da98:	f7ff fec0 	bl	800d81c <move_window>
 800da9c:	4603      	mov	r3, r0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d118      	bne.n	800dad4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800dab0:	4413      	add	r3, r2
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7ff fc1a 	bl	800d2ec <ld_dword>
 800dab8:	4603      	mov	r3, r0
 800daba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800dabe:	617b      	str	r3, [r7, #20]
			break;
 800dac0:	e009      	b.n	800dad6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dac2:	2301      	movs	r3, #1
 800dac4:	617b      	str	r3, [r7, #20]
 800dac6:	e006      	b.n	800dad6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dac8:	bf00      	nop
 800daca:	e004      	b.n	800dad6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dacc:	bf00      	nop
 800dace:	e002      	b.n	800dad6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dad0:	bf00      	nop
 800dad2:	e000      	b.n	800dad6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dad4:	bf00      	nop
		}
	}

	return val;
 800dad6:	697b      	ldr	r3, [r7, #20]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3718      	adds	r7, #24
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dae0:	b590      	push	{r4, r7, lr}
 800dae2:	b089      	sub	sp, #36	@ 0x24
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800daec:	2302      	movs	r3, #2
 800daee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	f240 80d9 	bls.w	800dcaa <put_fat+0x1ca>
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	699b      	ldr	r3, [r3, #24]
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	429a      	cmp	r2, r3
 800db00:	f080 80d3 	bcs.w	800dcaa <put_fat+0x1ca>
		switch (fs->fs_type) {
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	2b03      	cmp	r3, #3
 800db0a:	f000 8096 	beq.w	800dc3a <put_fat+0x15a>
 800db0e:	2b03      	cmp	r3, #3
 800db10:	f300 80cb 	bgt.w	800dcaa <put_fat+0x1ca>
 800db14:	2b01      	cmp	r3, #1
 800db16:	d002      	beq.n	800db1e <put_fat+0x3e>
 800db18:	2b02      	cmp	r3, #2
 800db1a:	d06e      	beq.n	800dbfa <put_fat+0x11a>
 800db1c:	e0c5      	b.n	800dcaa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	61bb      	str	r3, [r7, #24]
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	085b      	lsrs	r3, r3, #1
 800db26:	69ba      	ldr	r2, [r7, #24]
 800db28:	4413      	add	r3, r2
 800db2a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	0a5b      	lsrs	r3, r3, #9
 800db34:	4413      	add	r3, r2
 800db36:	4619      	mov	r1, r3
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f7ff fe6f 	bl	800d81c <move_window>
 800db3e:	4603      	mov	r3, r0
 800db40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db42:	7ffb      	ldrb	r3, [r7, #31]
 800db44:	2b00      	cmp	r3, #0
 800db46:	f040 80a9 	bne.w	800dc9c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	1c59      	adds	r1, r3, #1
 800db54:	61b9      	str	r1, [r7, #24]
 800db56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db5a:	4413      	add	r3, r2
 800db5c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	f003 0301 	and.w	r3, r3, #1
 800db64:	2b00      	cmp	r3, #0
 800db66:	d00d      	beq.n	800db84 <put_fat+0xa4>
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	b25b      	sxtb	r3, r3
 800db6e:	f003 030f 	and.w	r3, r3, #15
 800db72:	b25a      	sxtb	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	b2db      	uxtb	r3, r3
 800db78:	011b      	lsls	r3, r3, #4
 800db7a:	b25b      	sxtb	r3, r3
 800db7c:	4313      	orrs	r3, r2
 800db7e:	b25b      	sxtb	r3, r3
 800db80:	b2db      	uxtb	r3, r3
 800db82:	e001      	b.n	800db88 <put_fat+0xa8>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	b2db      	uxtb	r3, r3
 800db88:	697a      	ldr	r2, [r7, #20]
 800db8a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2201      	movs	r2, #1
 800db90:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	0a5b      	lsrs	r3, r3, #9
 800db9a:	4413      	add	r3, r2
 800db9c:	4619      	mov	r1, r3
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f7ff fe3c 	bl	800d81c <move_window>
 800dba4:	4603      	mov	r3, r0
 800dba6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dba8:	7ffb      	ldrb	r3, [r7, #31]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d178      	bne.n	800dca0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dbb4:	69bb      	ldr	r3, [r7, #24]
 800dbb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbba:	4413      	add	r3, r2
 800dbbc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	f003 0301 	and.w	r3, r3, #1
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d003      	beq.n	800dbd0 <put_fat+0xf0>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	091b      	lsrs	r3, r3, #4
 800dbcc:	b2db      	uxtb	r3, r3
 800dbce:	e00e      	b.n	800dbee <put_fat+0x10e>
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	b25b      	sxtb	r3, r3
 800dbd6:	f023 030f 	bic.w	r3, r3, #15
 800dbda:	b25a      	sxtb	r2, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	0a1b      	lsrs	r3, r3, #8
 800dbe0:	b25b      	sxtb	r3, r3
 800dbe2:	f003 030f 	and.w	r3, r3, #15
 800dbe6:	b25b      	sxtb	r3, r3
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	b25b      	sxtb	r3, r3
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	697a      	ldr	r2, [r7, #20]
 800dbf0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	70da      	strb	r2, [r3, #3]
			break;
 800dbf8:	e057      	b.n	800dcaa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	0a1b      	lsrs	r3, r3, #8
 800dc02:	4413      	add	r3, r2
 800dc04:	4619      	mov	r1, r3
 800dc06:	68f8      	ldr	r0, [r7, #12]
 800dc08:	f7ff fe08 	bl	800d81c <move_window>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc10:	7ffb      	ldrb	r3, [r7, #31]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d146      	bne.n	800dca4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	005b      	lsls	r3, r3, #1
 800dc20:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800dc24:	4413      	add	r3, r2
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	b292      	uxth	r2, r2
 800dc2a:	4611      	mov	r1, r2
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7ff fb80 	bl	800d332 <st_word>
			fs->wflag = 1;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2201      	movs	r2, #1
 800dc36:	70da      	strb	r2, [r3, #3]
			break;
 800dc38:	e037      	b.n	800dcaa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	09db      	lsrs	r3, r3, #7
 800dc42:	4413      	add	r3, r2
 800dc44:	4619      	mov	r1, r3
 800dc46:	68f8      	ldr	r0, [r7, #12]
 800dc48:	f7ff fde8 	bl	800d81c <move_window>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc50:	7ffb      	ldrb	r3, [r7, #31]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d128      	bne.n	800dca8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800dc6a:	4413      	add	r3, r2
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	f7ff fb3d 	bl	800d2ec <ld_dword>
 800dc72:	4603      	mov	r3, r0
 800dc74:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800dc78:	4323      	orrs	r3, r4
 800dc7a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800dc8a:	4413      	add	r3, r2
 800dc8c:	6879      	ldr	r1, [r7, #4]
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7ff fb6a 	bl	800d368 <st_dword>
			fs->wflag = 1;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2201      	movs	r2, #1
 800dc98:	70da      	strb	r2, [r3, #3]
			break;
 800dc9a:	e006      	b.n	800dcaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800dc9c:	bf00      	nop
 800dc9e:	e004      	b.n	800dcaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800dca0:	bf00      	nop
 800dca2:	e002      	b.n	800dcaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800dca4:	bf00      	nop
 800dca6:	e000      	b.n	800dcaa <put_fat+0x1ca>
			if (res != FR_OK) break;
 800dca8:	bf00      	nop
		}
	}
	return res;
 800dcaa:	7ffb      	ldrb	r3, [r7, #31]
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3724      	adds	r7, #36	@ 0x24
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd90      	pop	{r4, r7, pc}

0800dcb4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b088      	sub	sp, #32
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d904      	bls.n	800dcda <remove_chain+0x26>
 800dcd0:	69bb      	ldr	r3, [r7, #24]
 800dcd2:	699b      	ldr	r3, [r3, #24]
 800dcd4:	68ba      	ldr	r2, [r7, #8]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d301      	bcc.n	800dcde <remove_chain+0x2a>
 800dcda:	2302      	movs	r3, #2
 800dcdc:	e04b      	b.n	800dd76 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d00c      	beq.n	800dcfe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dce4:	f04f 32ff 	mov.w	r2, #4294967295
 800dce8:	6879      	ldr	r1, [r7, #4]
 800dcea:	69b8      	ldr	r0, [r7, #24]
 800dcec:	f7ff fef8 	bl	800dae0 <put_fat>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dcf4:	7ffb      	ldrb	r3, [r7, #31]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d001      	beq.n	800dcfe <remove_chain+0x4a>
 800dcfa:	7ffb      	ldrb	r3, [r7, #31]
 800dcfc:	e03b      	b.n	800dd76 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dcfe:	68b9      	ldr	r1, [r7, #8]
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f7ff fe46 	bl	800d992 <get_fat>
 800dd06:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d031      	beq.n	800dd72 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	d101      	bne.n	800dd18 <remove_chain+0x64>
 800dd14:	2302      	movs	r3, #2
 800dd16:	e02e      	b.n	800dd76 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd1e:	d101      	bne.n	800dd24 <remove_chain+0x70>
 800dd20:	2301      	movs	r3, #1
 800dd22:	e028      	b.n	800dd76 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dd24:	2200      	movs	r2, #0
 800dd26:	68b9      	ldr	r1, [r7, #8]
 800dd28:	69b8      	ldr	r0, [r7, #24]
 800dd2a:	f7ff fed9 	bl	800dae0 <put_fat>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dd32:	7ffb      	ldrb	r3, [r7, #31]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d001      	beq.n	800dd3c <remove_chain+0x88>
 800dd38:	7ffb      	ldrb	r3, [r7, #31]
 800dd3a:	e01c      	b.n	800dd76 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dd3c:	69bb      	ldr	r3, [r7, #24]
 800dd3e:	695a      	ldr	r2, [r3, #20]
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	699b      	ldr	r3, [r3, #24]
 800dd44:	3b02      	subs	r3, #2
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d20b      	bcs.n	800dd62 <remove_chain+0xae>
			fs->free_clst++;
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	695b      	ldr	r3, [r3, #20]
 800dd4e:	1c5a      	adds	r2, r3, #1
 800dd50:	69bb      	ldr	r3, [r7, #24]
 800dd52:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	791b      	ldrb	r3, [r3, #4]
 800dd58:	f043 0301 	orr.w	r3, r3, #1
 800dd5c:	b2da      	uxtb	r2, r3
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	699b      	ldr	r3, [r3, #24]
 800dd6a:	68ba      	ldr	r2, [r7, #8]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d3c6      	bcc.n	800dcfe <remove_chain+0x4a>
 800dd70:	e000      	b.n	800dd74 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800dd72:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800dd74:	2300      	movs	r3, #0
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3720      	adds	r7, #32
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}

0800dd7e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dd7e:	b580      	push	{r7, lr}
 800dd80:	b088      	sub	sp, #32
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
 800dd86:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d10d      	bne.n	800ddb0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	691b      	ldr	r3, [r3, #16]
 800dd98:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dd9a:	69bb      	ldr	r3, [r7, #24]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d004      	beq.n	800ddaa <create_chain+0x2c>
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	699b      	ldr	r3, [r3, #24]
 800dda4:	69ba      	ldr	r2, [r7, #24]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d31b      	bcc.n	800dde2 <create_chain+0x64>
 800ddaa:	2301      	movs	r3, #1
 800ddac:	61bb      	str	r3, [r7, #24]
 800ddae:	e018      	b.n	800dde2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ddb0:	6839      	ldr	r1, [r7, #0]
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f7ff fded 	bl	800d992 <get_fat>
 800ddb8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d801      	bhi.n	800ddc4 <create_chain+0x46>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	e070      	b.n	800dea6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddca:	d101      	bne.n	800ddd0 <create_chain+0x52>
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	e06a      	b.n	800dea6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	699b      	ldr	r3, [r3, #24]
 800ddd4:	68fa      	ldr	r2, [r7, #12]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d201      	bcs.n	800ddde <create_chain+0x60>
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	e063      	b.n	800dea6 <create_chain+0x128>
		scl = clst;
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dde6:	69fb      	ldr	r3, [r7, #28]
 800dde8:	3301      	adds	r3, #1
 800ddea:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	699b      	ldr	r3, [r3, #24]
 800ddf0:	69fa      	ldr	r2, [r7, #28]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d307      	bcc.n	800de06 <create_chain+0x88>
				ncl = 2;
 800ddf6:	2302      	movs	r3, #2
 800ddf8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ddfa:	69fa      	ldr	r2, [r7, #28]
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d901      	bls.n	800de06 <create_chain+0x88>
 800de02:	2300      	movs	r3, #0
 800de04:	e04f      	b.n	800dea6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800de06:	69f9      	ldr	r1, [r7, #28]
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f7ff fdc2 	bl	800d992 <get_fat>
 800de0e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d00e      	beq.n	800de34 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d003      	beq.n	800de24 <create_chain+0xa6>
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de22:	d101      	bne.n	800de28 <create_chain+0xaa>
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	e03e      	b.n	800dea6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800de28:	69fa      	ldr	r2, [r7, #28]
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d1da      	bne.n	800dde6 <create_chain+0x68>
 800de30:	2300      	movs	r3, #0
 800de32:	e038      	b.n	800dea6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800de34:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800de36:	f04f 32ff 	mov.w	r2, #4294967295
 800de3a:	69f9      	ldr	r1, [r7, #28]
 800de3c:	6938      	ldr	r0, [r7, #16]
 800de3e:	f7ff fe4f 	bl	800dae0 <put_fat>
 800de42:	4603      	mov	r3, r0
 800de44:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800de46:	7dfb      	ldrb	r3, [r7, #23]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d109      	bne.n	800de60 <create_chain+0xe2>
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d006      	beq.n	800de60 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800de52:	69fa      	ldr	r2, [r7, #28]
 800de54:	6839      	ldr	r1, [r7, #0]
 800de56:	6938      	ldr	r0, [r7, #16]
 800de58:	f7ff fe42 	bl	800dae0 <put_fat>
 800de5c:	4603      	mov	r3, r0
 800de5e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800de60:	7dfb      	ldrb	r3, [r7, #23]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d116      	bne.n	800de94 <create_chain+0x116>
		fs->last_clst = ncl;
 800de66:	693b      	ldr	r3, [r7, #16]
 800de68:	69fa      	ldr	r2, [r7, #28]
 800de6a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	695a      	ldr	r2, [r3, #20]
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	699b      	ldr	r3, [r3, #24]
 800de74:	3b02      	subs	r3, #2
 800de76:	429a      	cmp	r2, r3
 800de78:	d804      	bhi.n	800de84 <create_chain+0x106>
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	695b      	ldr	r3, [r3, #20]
 800de7e:	1e5a      	subs	r2, r3, #1
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	791b      	ldrb	r3, [r3, #4]
 800de88:	f043 0301 	orr.w	r3, r3, #1
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	711a      	strb	r2, [r3, #4]
 800de92:	e007      	b.n	800dea4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800de94:	7dfb      	ldrb	r3, [r7, #23]
 800de96:	2b01      	cmp	r3, #1
 800de98:	d102      	bne.n	800dea0 <create_chain+0x122>
 800de9a:	f04f 33ff 	mov.w	r3, #4294967295
 800de9e:	e000      	b.n	800dea2 <create_chain+0x124>
 800dea0:	2301      	movs	r3, #1
 800dea2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dea4:	69fb      	ldr	r3, [r7, #28]
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3720      	adds	r7, #32
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800deae:	b480      	push	{r7}
 800deb0:	b087      	sub	sp, #28
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
 800deb6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dec2:	3304      	adds	r3, #4
 800dec4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	0a5b      	lsrs	r3, r3, #9
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	8952      	ldrh	r2, [r2, #10]
 800dece:	fbb3 f3f2 	udiv	r3, r3, r2
 800ded2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	1d1a      	adds	r2, r3, #4
 800ded8:	613a      	str	r2, [r7, #16]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d101      	bne.n	800dee8 <clmt_clust+0x3a>
 800dee4:	2300      	movs	r3, #0
 800dee6:	e010      	b.n	800df0a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dee8:	697a      	ldr	r2, [r7, #20]
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	429a      	cmp	r2, r3
 800deee:	d307      	bcc.n	800df00 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800def0:	697a      	ldr	r2, [r7, #20]
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	1ad3      	subs	r3, r2, r3
 800def6:	617b      	str	r3, [r7, #20]
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	3304      	adds	r3, #4
 800defc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800defe:	e7e9      	b.n	800ded4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800df00:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	681a      	ldr	r2, [r3, #0]
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	4413      	add	r3, r2
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	371c      	adds	r7, #28
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr

0800df16 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b086      	sub	sp, #24
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
 800df1e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800df2c:	d204      	bcs.n	800df38 <dir_sdi+0x22>
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	f003 031f 	and.w	r3, r3, #31
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <dir_sdi+0x26>
		return FR_INT_ERR;
 800df38:	2302      	movs	r3, #2
 800df3a:	e063      	b.n	800e004 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	683a      	ldr	r2, [r7, #0]
 800df40:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	689b      	ldr	r3, [r3, #8]
 800df46:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d106      	bne.n	800df5c <dir_sdi+0x46>
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	2b02      	cmp	r3, #2
 800df54:	d902      	bls.n	800df5c <dir_sdi+0x46>
		clst = fs->dirbase;
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df5a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d10c      	bne.n	800df7c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	095b      	lsrs	r3, r3, #5
 800df66:	693a      	ldr	r2, [r7, #16]
 800df68:	8912      	ldrh	r2, [r2, #8]
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d301      	bcc.n	800df72 <dir_sdi+0x5c>
 800df6e:	2302      	movs	r3, #2
 800df70:	e048      	b.n	800e004 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	61da      	str	r2, [r3, #28]
 800df7a:	e029      	b.n	800dfd0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	895b      	ldrh	r3, [r3, #10]
 800df80:	025b      	lsls	r3, r3, #9
 800df82:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800df84:	e019      	b.n	800dfba <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6979      	ldr	r1, [r7, #20]
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7ff fd01 	bl	800d992 <get_fat>
 800df90:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df98:	d101      	bne.n	800df9e <dir_sdi+0x88>
 800df9a:	2301      	movs	r3, #1
 800df9c:	e032      	b.n	800e004 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d904      	bls.n	800dfae <dir_sdi+0x98>
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	699b      	ldr	r3, [r3, #24]
 800dfa8:	697a      	ldr	r2, [r7, #20]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d301      	bcc.n	800dfb2 <dir_sdi+0x9c>
 800dfae:	2302      	movs	r3, #2
 800dfb0:	e028      	b.n	800e004 <dir_sdi+0xee>
			ofs -= csz;
 800dfb2:	683a      	ldr	r2, [r7, #0]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	1ad3      	subs	r3, r2, r3
 800dfb8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d2e1      	bcs.n	800df86 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dfc2:	6979      	ldr	r1, [r7, #20]
 800dfc4:	6938      	ldr	r0, [r7, #16]
 800dfc6:	f7ff fcc5 	bl	800d954 <clust2sect>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	697a      	ldr	r2, [r7, #20]
 800dfd4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	69db      	ldr	r3, [r3, #28]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d101      	bne.n	800dfe2 <dir_sdi+0xcc>
 800dfde:	2302      	movs	r3, #2
 800dfe0:	e010      	b.n	800e004 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	69da      	ldr	r2, [r3, #28]
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	0a5b      	lsrs	r3, r3, #9
 800dfea:	441a      	add	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dffc:	441a      	add	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e002:	2300      	movs	r3, #0
}
 800e004:	4618      	mov	r0, r3
 800e006:	3718      	adds	r7, #24
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b086      	sub	sp, #24
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	695b      	ldr	r3, [r3, #20]
 800e020:	3320      	adds	r3, #32
 800e022:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	69db      	ldr	r3, [r3, #28]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d003      	beq.n	800e034 <dir_next+0x28>
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e032:	d301      	bcc.n	800e038 <dir_next+0x2c>
 800e034:	2304      	movs	r3, #4
 800e036:	e0aa      	b.n	800e18e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e03e:	2b00      	cmp	r3, #0
 800e040:	f040 8098 	bne.w	800e174 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	69db      	ldr	r3, [r3, #28]
 800e048:	1c5a      	adds	r2, r3, #1
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	699b      	ldr	r3, [r3, #24]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d10b      	bne.n	800e06e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	095b      	lsrs	r3, r3, #5
 800e05a:	68fa      	ldr	r2, [r7, #12]
 800e05c:	8912      	ldrh	r2, [r2, #8]
 800e05e:	4293      	cmp	r3, r2
 800e060:	f0c0 8088 	bcc.w	800e174 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2200      	movs	r2, #0
 800e068:	61da      	str	r2, [r3, #28]
 800e06a:	2304      	movs	r3, #4
 800e06c:	e08f      	b.n	800e18e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	0a5b      	lsrs	r3, r3, #9
 800e072:	68fa      	ldr	r2, [r7, #12]
 800e074:	8952      	ldrh	r2, [r2, #10]
 800e076:	3a01      	subs	r2, #1
 800e078:	4013      	ands	r3, r2
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d17a      	bne.n	800e174 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	699b      	ldr	r3, [r3, #24]
 800e084:	4619      	mov	r1, r3
 800e086:	4610      	mov	r0, r2
 800e088:	f7ff fc83 	bl	800d992 <get_fat>
 800e08c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	2b01      	cmp	r3, #1
 800e092:	d801      	bhi.n	800e098 <dir_next+0x8c>
 800e094:	2302      	movs	r3, #2
 800e096:	e07a      	b.n	800e18e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e09e:	d101      	bne.n	800e0a4 <dir_next+0x98>
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e074      	b.n	800e18e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	699b      	ldr	r3, [r3, #24]
 800e0a8:	697a      	ldr	r2, [r7, #20]
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d358      	bcc.n	800e160 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d104      	bne.n	800e0be <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	61da      	str	r2, [r3, #28]
 800e0ba:	2304      	movs	r3, #4
 800e0bc:	e067      	b.n	800e18e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	699b      	ldr	r3, [r3, #24]
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	4610      	mov	r0, r2
 800e0c8:	f7ff fe59 	bl	800dd7e <create_chain>
 800e0cc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <dir_next+0xcc>
 800e0d4:	2307      	movs	r3, #7
 800e0d6:	e05a      	b.n	800e18e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d101      	bne.n	800e0e2 <dir_next+0xd6>
 800e0de:	2302      	movs	r3, #2
 800e0e0:	e055      	b.n	800e18e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0e8:	d101      	bne.n	800e0ee <dir_next+0xe2>
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	e04f      	b.n	800e18e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e0ee:	68f8      	ldr	r0, [r7, #12]
 800e0f0:	f7ff fb50 	bl	800d794 <sync_window>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d001      	beq.n	800e0fe <dir_next+0xf2>
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e047      	b.n	800e18e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	3334      	adds	r3, #52	@ 0x34
 800e102:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e106:	2100      	movs	r1, #0
 800e108:	4618      	mov	r0, r3
 800e10a:	f7ff f97a 	bl	800d402 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e10e:	2300      	movs	r3, #0
 800e110:	613b      	str	r3, [r7, #16]
 800e112:	6979      	ldr	r1, [r7, #20]
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	f7ff fc1d 	bl	800d954 <clust2sect>
 800e11a:	4602      	mov	r2, r0
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	631a      	str	r2, [r3, #48]	@ 0x30
 800e120:	e012      	b.n	800e148 <dir_next+0x13c>
						fs->wflag = 1;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2201      	movs	r2, #1
 800e126:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	f7ff fb33 	bl	800d794 <sync_window>
 800e12e:	4603      	mov	r3, r0
 800e130:	2b00      	cmp	r3, #0
 800e132:	d001      	beq.n	800e138 <dir_next+0x12c>
 800e134:	2301      	movs	r3, #1
 800e136:	e02a      	b.n	800e18e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	3301      	adds	r3, #1
 800e13c:	613b      	str	r3, [r7, #16]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e142:	1c5a      	adds	r2, r3, #1
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	631a      	str	r2, [r3, #48]	@ 0x30
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	895b      	ldrh	r3, [r3, #10]
 800e14c:	461a      	mov	r2, r3
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	4293      	cmp	r3, r2
 800e152:	d3e6      	bcc.n	800e122 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	1ad2      	subs	r2, r2, r3
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	697a      	ldr	r2, [r7, #20]
 800e164:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e166:	6979      	ldr	r1, [r7, #20]
 800e168:	68f8      	ldr	r0, [r7, #12]
 800e16a:	f7ff fbf3 	bl	800d954 <clust2sect>
 800e16e:	4602      	mov	r2, r0
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	68ba      	ldr	r2, [r7, #8]
 800e178:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e186:	441a      	add	r2, r3
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e18c:	2300      	movs	r3, #0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3718      	adds	r7, #24
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e196:	b580      	push	{r7, lr}
 800e198:	b086      	sub	sp, #24
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
 800e19e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f7ff feb4 	bl	800df16 <dir_sdi>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e1b2:	7dfb      	ldrb	r3, [r7, #23]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d12b      	bne.n	800e210 <dir_alloc+0x7a>
		n = 0;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	69db      	ldr	r3, [r3, #28]
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	68f8      	ldr	r0, [r7, #12]
 800e1c4:	f7ff fb2a 	bl	800d81c <move_window>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e1cc:	7dfb      	ldrb	r3, [r7, #23]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d11d      	bne.n	800e20e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6a1b      	ldr	r3, [r3, #32]
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	2be5      	cmp	r3, #229	@ 0xe5
 800e1da:	d004      	beq.n	800e1e6 <dir_alloc+0x50>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6a1b      	ldr	r3, [r3, #32]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d107      	bne.n	800e1f6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	613b      	str	r3, [r7, #16]
 800e1ec:	693a      	ldr	r2, [r7, #16]
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	429a      	cmp	r2, r3
 800e1f2:	d102      	bne.n	800e1fa <dir_alloc+0x64>
 800e1f4:	e00c      	b.n	800e210 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e1fa:	2101      	movs	r1, #1
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7ff ff05 	bl	800e00c <dir_next>
 800e202:	4603      	mov	r3, r0
 800e204:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e206:	7dfb      	ldrb	r3, [r7, #23]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d0d7      	beq.n	800e1bc <dir_alloc+0x26>
 800e20c:	e000      	b.n	800e210 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e20e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e210:	7dfb      	ldrb	r3, [r7, #23]
 800e212:	2b04      	cmp	r3, #4
 800e214:	d101      	bne.n	800e21a <dir_alloc+0x84>
 800e216:	2307      	movs	r3, #7
 800e218:	75fb      	strb	r3, [r7, #23]
	return res;
 800e21a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3718      	adds	r7, #24
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b084      	sub	sp, #16
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	331a      	adds	r3, #26
 800e232:	4618      	mov	r0, r3
 800e234:	f7ff f842 	bl	800d2bc <ld_word>
 800e238:	4603      	mov	r3, r0
 800e23a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	2b03      	cmp	r3, #3
 800e242:	d109      	bne.n	800e258 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	3314      	adds	r3, #20
 800e248:	4618      	mov	r0, r3
 800e24a:	f7ff f837 	bl	800d2bc <ld_word>
 800e24e:	4603      	mov	r3, r0
 800e250:	041b      	lsls	r3, r3, #16
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	4313      	orrs	r3, r2
 800e256:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e258:	68fb      	ldr	r3, [r7, #12]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3710      	adds	r7, #16
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e262:	b580      	push	{r7, lr}
 800e264:	b084      	sub	sp, #16
 800e266:	af00      	add	r7, sp, #0
 800e268:	60f8      	str	r0, [r7, #12]
 800e26a:	60b9      	str	r1, [r7, #8]
 800e26c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	331a      	adds	r3, #26
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	b292      	uxth	r2, r2
 800e276:	4611      	mov	r1, r2
 800e278:	4618      	mov	r0, r3
 800e27a:	f7ff f85a 	bl	800d332 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	2b03      	cmp	r3, #3
 800e284:	d109      	bne.n	800e29a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	f103 0214 	add.w	r2, r3, #20
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	0c1b      	lsrs	r3, r3, #16
 800e290:	b29b      	uxth	r3, r3
 800e292:	4619      	mov	r1, r3
 800e294:	4610      	mov	r0, r2
 800e296:	f7ff f84c 	bl	800d332 <st_word>
	}
}
 800e29a:	bf00      	nop
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
	...

0800e2a4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e2a4:	b590      	push	{r4, r7, lr}
 800e2a6:	b087      	sub	sp, #28
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	331a      	adds	r3, #26
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7ff f802 	bl	800d2bc <ld_word>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d001      	beq.n	800e2c2 <cmp_lfn+0x1e>
 800e2be:	2300      	movs	r3, #0
 800e2c0:	e059      	b.n	800e376 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e2ca:	1e5a      	subs	r2, r3, #1
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	005b      	lsls	r3, r3, #1
 800e2d0:	4413      	add	r3, r2
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	4413      	add	r3, r2
 800e2d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e2d8:	2301      	movs	r3, #1
 800e2da:	81fb      	strh	r3, [r7, #14]
 800e2dc:	2300      	movs	r3, #0
 800e2de:	613b      	str	r3, [r7, #16]
 800e2e0:	e033      	b.n	800e34a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e2e2:	4a27      	ldr	r2, [pc, #156]	@ (800e380 <cmp_lfn+0xdc>)
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	4413      	add	r3, r2
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	4413      	add	r3, r2
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fe ffe3 	bl	800d2bc <ld_word>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e2fa:	89fb      	ldrh	r3, [r7, #14]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d01a      	beq.n	800e336 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	2bfe      	cmp	r3, #254	@ 0xfe
 800e304:	d812      	bhi.n	800e32c <cmp_lfn+0x88>
 800e306:	89bb      	ldrh	r3, [r7, #12]
 800e308:	4618      	mov	r0, r3
 800e30a:	f001 feff 	bl	801010c <ff_wtoupper>
 800e30e:	4603      	mov	r3, r0
 800e310:	461c      	mov	r4, r3
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	1c5a      	adds	r2, r3, #1
 800e316:	617a      	str	r2, [r7, #20]
 800e318:	005b      	lsls	r3, r3, #1
 800e31a:	687a      	ldr	r2, [r7, #4]
 800e31c:	4413      	add	r3, r2
 800e31e:	881b      	ldrh	r3, [r3, #0]
 800e320:	4618      	mov	r0, r3
 800e322:	f001 fef3 	bl	801010c <ff_wtoupper>
 800e326:	4603      	mov	r3, r0
 800e328:	429c      	cmp	r4, r3
 800e32a:	d001      	beq.n	800e330 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e32c:	2300      	movs	r3, #0
 800e32e:	e022      	b.n	800e376 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e330:	89bb      	ldrh	r3, [r7, #12]
 800e332:	81fb      	strh	r3, [r7, #14]
 800e334:	e006      	b.n	800e344 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e336:	89bb      	ldrh	r3, [r7, #12]
 800e338:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d001      	beq.n	800e344 <cmp_lfn+0xa0>
 800e340:	2300      	movs	r3, #0
 800e342:	e018      	b.n	800e376 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e344:	693b      	ldr	r3, [r7, #16]
 800e346:	3301      	adds	r3, #1
 800e348:	613b      	str	r3, [r7, #16]
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	2b0c      	cmp	r3, #12
 800e34e:	d9c8      	bls.n	800e2e2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00b      	beq.n	800e374 <cmp_lfn+0xd0>
 800e35c:	89fb      	ldrh	r3, [r7, #14]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d008      	beq.n	800e374 <cmp_lfn+0xd0>
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	005b      	lsls	r3, r3, #1
 800e366:	687a      	ldr	r2, [r7, #4]
 800e368:	4413      	add	r3, r2
 800e36a:	881b      	ldrh	r3, [r3, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d001      	beq.n	800e374 <cmp_lfn+0xd0>
 800e370:	2300      	movs	r3, #0
 800e372:	e000      	b.n	800e376 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e374:	2301      	movs	r3, #1
}
 800e376:	4618      	mov	r0, r3
 800e378:	371c      	adds	r7, #28
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd90      	pop	{r4, r7, pc}
 800e37e:	bf00      	nop
 800e380:	08010f4c 	.word	0x08010f4c

0800e384 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b088      	sub	sp, #32
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	60b9      	str	r1, [r7, #8]
 800e38e:	4611      	mov	r1, r2
 800e390:	461a      	mov	r2, r3
 800e392:	460b      	mov	r3, r1
 800e394:	71fb      	strb	r3, [r7, #7]
 800e396:	4613      	mov	r3, r2
 800e398:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	330d      	adds	r3, #13
 800e39e:	79ba      	ldrb	r2, [r7, #6]
 800e3a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	330b      	adds	r3, #11
 800e3a6:	220f      	movs	r2, #15
 800e3a8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	330c      	adds	r3, #12
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	331a      	adds	r3, #26
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fe ffba 	bl	800d332 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e3be:	79fb      	ldrb	r3, [r7, #7]
 800e3c0:	1e5a      	subs	r2, r3, #1
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	005b      	lsls	r3, r3, #1
 800e3c6:	4413      	add	r3, r2
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	4413      	add	r3, r2
 800e3cc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	82fb      	strh	r3, [r7, #22]
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e3d6:	8afb      	ldrh	r3, [r7, #22]
 800e3d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d007      	beq.n	800e3f0 <put_lfn+0x6c>
 800e3e0:	69fb      	ldr	r3, [r7, #28]
 800e3e2:	1c5a      	adds	r2, r3, #1
 800e3e4:	61fa      	str	r2, [r7, #28]
 800e3e6:	005b      	lsls	r3, r3, #1
 800e3e8:	68fa      	ldr	r2, [r7, #12]
 800e3ea:	4413      	add	r3, r2
 800e3ec:	881b      	ldrh	r3, [r3, #0]
 800e3ee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e3f0:	4a17      	ldr	r2, [pc, #92]	@ (800e450 <put_lfn+0xcc>)
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	4413      	add	r3, r2
 800e3fe:	8afa      	ldrh	r2, [r7, #22]
 800e400:	4611      	mov	r1, r2
 800e402:	4618      	mov	r0, r3
 800e404:	f7fe ff95 	bl	800d332 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e408:	8afb      	ldrh	r3, [r7, #22]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d102      	bne.n	800e414 <put_lfn+0x90>
 800e40e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e412:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	3301      	adds	r3, #1
 800e418:	61bb      	str	r3, [r7, #24]
 800e41a:	69bb      	ldr	r3, [r7, #24]
 800e41c:	2b0c      	cmp	r3, #12
 800e41e:	d9da      	bls.n	800e3d6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e420:	8afb      	ldrh	r3, [r7, #22]
 800e422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e426:	4293      	cmp	r3, r2
 800e428:	d006      	beq.n	800e438 <put_lfn+0xb4>
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	005b      	lsls	r3, r3, #1
 800e42e:	68fa      	ldr	r2, [r7, #12]
 800e430:	4413      	add	r3, r2
 800e432:	881b      	ldrh	r3, [r3, #0]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d103      	bne.n	800e440 <put_lfn+0xbc>
 800e438:	79fb      	ldrb	r3, [r7, #7]
 800e43a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e43e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	79fa      	ldrb	r2, [r7, #7]
 800e444:	701a      	strb	r2, [r3, #0]
}
 800e446:	bf00      	nop
 800e448:	3720      	adds	r7, #32
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	08010f4c 	.word	0x08010f4c

0800e454 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b08c      	sub	sp, #48	@ 0x30
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	607a      	str	r2, [r7, #4]
 800e460:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e462:	220b      	movs	r2, #11
 800e464:	68b9      	ldr	r1, [r7, #8]
 800e466:	68f8      	ldr	r0, [r7, #12]
 800e468:	f7fe ffaa 	bl	800d3c0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	2b05      	cmp	r3, #5
 800e470:	d929      	bls.n	800e4c6 <gen_numname+0x72>
		sr = seq;
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e476:	e020      	b.n	800e4ba <gen_numname+0x66>
			wc = *lfn++;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	1c9a      	adds	r2, r3, #2
 800e47c:	607a      	str	r2, [r7, #4]
 800e47e:	881b      	ldrh	r3, [r3, #0]
 800e480:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800e482:	2300      	movs	r3, #0
 800e484:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e486:	e015      	b.n	800e4b4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	005a      	lsls	r2, r3, #1
 800e48c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e48e:	f003 0301 	and.w	r3, r3, #1
 800e492:	4413      	add	r3, r2
 800e494:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e496:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e498:	085b      	lsrs	r3, r3, #1
 800e49a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d003      	beq.n	800e4ae <gen_numname+0x5a>
 800e4a6:	69fa      	ldr	r2, [r7, #28]
 800e4a8:	4b30      	ldr	r3, [pc, #192]	@ (800e56c <gen_numname+0x118>)
 800e4aa:	4053      	eors	r3, r2
 800e4ac:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4b6:	2b0f      	cmp	r3, #15
 800e4b8:	d9e6      	bls.n	800e488 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	881b      	ldrh	r3, [r3, #0]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d1da      	bne.n	800e478 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e4c6:	2307      	movs	r3, #7
 800e4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	f003 030f 	and.w	r3, r3, #15
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	3330      	adds	r3, #48	@ 0x30
 800e4d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800e4da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e4de:	2b39      	cmp	r3, #57	@ 0x39
 800e4e0:	d904      	bls.n	800e4ec <gen_numname+0x98>
 800e4e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e4e6:	3307      	adds	r3, #7
 800e4e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800e4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ee:	1e5a      	subs	r2, r3, #1
 800e4f0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e4f2:	3330      	adds	r3, #48	@ 0x30
 800e4f4:	443b      	add	r3, r7
 800e4f6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e4fa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	091b      	lsrs	r3, r3, #4
 800e502:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d1df      	bne.n	800e4ca <gen_numname+0x76>
	ns[i] = '~';
 800e50a:	f107 0214 	add.w	r2, r7, #20
 800e50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e510:	4413      	add	r3, r2
 800e512:	227e      	movs	r2, #126	@ 0x7e
 800e514:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e516:	2300      	movs	r3, #0
 800e518:	627b      	str	r3, [r7, #36]	@ 0x24
 800e51a:	e002      	b.n	800e522 <gen_numname+0xce>
 800e51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e51e:	3301      	adds	r3, #1
 800e520:	627b      	str	r3, [r7, #36]	@ 0x24
 800e522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e526:	429a      	cmp	r2, r3
 800e528:	d205      	bcs.n	800e536 <gen_numname+0xe2>
 800e52a:	68fa      	ldr	r2, [r7, #12]
 800e52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52e:	4413      	add	r3, r2
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	2b20      	cmp	r3, #32
 800e534:	d1f2      	bne.n	800e51c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e538:	2b07      	cmp	r3, #7
 800e53a:	d807      	bhi.n	800e54c <gen_numname+0xf8>
 800e53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e53e:	1c5a      	adds	r2, r3, #1
 800e540:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e542:	3330      	adds	r3, #48	@ 0x30
 800e544:	443b      	add	r3, r7
 800e546:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e54a:	e000      	b.n	800e54e <gen_numname+0xfa>
 800e54c:	2120      	movs	r1, #32
 800e54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e550:	1c5a      	adds	r2, r3, #1
 800e552:	627a      	str	r2, [r7, #36]	@ 0x24
 800e554:	68fa      	ldr	r2, [r7, #12]
 800e556:	4413      	add	r3, r2
 800e558:	460a      	mov	r2, r1
 800e55a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e55e:	2b07      	cmp	r3, #7
 800e560:	d9e9      	bls.n	800e536 <gen_numname+0xe2>
}
 800e562:	bf00      	nop
 800e564:	bf00      	nop
 800e566:	3730      	adds	r7, #48	@ 0x30
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	00011021 	.word	0x00011021

0800e570 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e570:	b480      	push	{r7}
 800e572:	b085      	sub	sp, #20
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e578:	2300      	movs	r3, #0
 800e57a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e57c:	230b      	movs	r3, #11
 800e57e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e580:	7bfb      	ldrb	r3, [r7, #15]
 800e582:	b2da      	uxtb	r2, r3
 800e584:	0852      	lsrs	r2, r2, #1
 800e586:	01db      	lsls	r3, r3, #7
 800e588:	4313      	orrs	r3, r2
 800e58a:	b2da      	uxtb	r2, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	1c59      	adds	r1, r3, #1
 800e590:	6079      	str	r1, [r7, #4]
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	4413      	add	r3, r2
 800e596:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	3b01      	subs	r3, #1
 800e59c:	60bb      	str	r3, [r7, #8]
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1ed      	bne.n	800e580 <sum_sfn+0x10>
	return sum;
 800e5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3714      	adds	r7, #20
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr

0800e5b2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e5b2:	b580      	push	{r7, lr}
 800e5b4:	b086      	sub	sp, #24
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f7ff fca7 	bl	800df16 <dir_sdi>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e5cc:	7dfb      	ldrb	r3, [r7, #23]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d001      	beq.n	800e5d6 <dir_find+0x24>
 800e5d2:	7dfb      	ldrb	r3, [r7, #23]
 800e5d4:	e0a9      	b.n	800e72a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e5d6:	23ff      	movs	r3, #255	@ 0xff
 800e5d8:	753b      	strb	r3, [r7, #20]
 800e5da:	7d3b      	ldrb	r3, [r7, #20]
 800e5dc:	757b      	strb	r3, [r7, #21]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e5e4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	69db      	ldr	r3, [r3, #28]
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	6938      	ldr	r0, [r7, #16]
 800e5ee:	f7ff f915 	bl	800d81c <move_window>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e5f6:	7dfb      	ldrb	r3, [r7, #23]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f040 8090 	bne.w	800e71e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6a1b      	ldr	r3, [r3, #32]
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e606:	7dbb      	ldrb	r3, [r7, #22]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d102      	bne.n	800e612 <dir_find+0x60>
 800e60c:	2304      	movs	r3, #4
 800e60e:	75fb      	strb	r3, [r7, #23]
 800e610:	e08a      	b.n	800e728 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6a1b      	ldr	r3, [r3, #32]
 800e616:	330b      	adds	r3, #11
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e61e:	73fb      	strb	r3, [r7, #15]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	7bfa      	ldrb	r2, [r7, #15]
 800e624:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e626:	7dbb      	ldrb	r3, [r7, #22]
 800e628:	2be5      	cmp	r3, #229	@ 0xe5
 800e62a:	d007      	beq.n	800e63c <dir_find+0x8a>
 800e62c:	7bfb      	ldrb	r3, [r7, #15]
 800e62e:	f003 0308 	and.w	r3, r3, #8
 800e632:	2b00      	cmp	r3, #0
 800e634:	d009      	beq.n	800e64a <dir_find+0x98>
 800e636:	7bfb      	ldrb	r3, [r7, #15]
 800e638:	2b0f      	cmp	r3, #15
 800e63a:	d006      	beq.n	800e64a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e63c:	23ff      	movs	r3, #255	@ 0xff
 800e63e:	757b      	strb	r3, [r7, #21]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f04f 32ff 	mov.w	r2, #4294967295
 800e646:	631a      	str	r2, [r3, #48]	@ 0x30
 800e648:	e05e      	b.n	800e708 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e64a:	7bfb      	ldrb	r3, [r7, #15]
 800e64c:	2b0f      	cmp	r3, #15
 800e64e:	d136      	bne.n	800e6be <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d154      	bne.n	800e708 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e65e:	7dbb      	ldrb	r3, [r7, #22]
 800e660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e664:	2b00      	cmp	r3, #0
 800e666:	d00d      	beq.n	800e684 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6a1b      	ldr	r3, [r3, #32]
 800e66c:	7b5b      	ldrb	r3, [r3, #13]
 800e66e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e670:	7dbb      	ldrb	r3, [r7, #22]
 800e672:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e676:	75bb      	strb	r3, [r7, #22]
 800e678:	7dbb      	ldrb	r3, [r7, #22]
 800e67a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	695a      	ldr	r2, [r3, #20]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e684:	7dba      	ldrb	r2, [r7, #22]
 800e686:	7d7b      	ldrb	r3, [r7, #21]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d115      	bne.n	800e6b8 <dir_find+0x106>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6a1b      	ldr	r3, [r3, #32]
 800e690:	330d      	adds	r3, #13
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	7d3a      	ldrb	r2, [r7, #20]
 800e696:	429a      	cmp	r2, r3
 800e698:	d10e      	bne.n	800e6b8 <dir_find+0x106>
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	68da      	ldr	r2, [r3, #12]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6a1b      	ldr	r3, [r3, #32]
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	4610      	mov	r0, r2
 800e6a6:	f7ff fdfd 	bl	800e2a4 <cmp_lfn>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d003      	beq.n	800e6b8 <dir_find+0x106>
 800e6b0:	7d7b      	ldrb	r3, [r7, #21]
 800e6b2:	3b01      	subs	r3, #1
 800e6b4:	b2db      	uxtb	r3, r3
 800e6b6:	e000      	b.n	800e6ba <dir_find+0x108>
 800e6b8:	23ff      	movs	r3, #255	@ 0xff
 800e6ba:	757b      	strb	r3, [r7, #21]
 800e6bc:	e024      	b.n	800e708 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e6be:	7d7b      	ldrb	r3, [r7, #21]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d109      	bne.n	800e6d8 <dir_find+0x126>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6a1b      	ldr	r3, [r3, #32]
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7ff ff51 	bl	800e570 <sum_sfn>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	7d3b      	ldrb	r3, [r7, #20]
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d024      	beq.n	800e722 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e6de:	f003 0301 	and.w	r3, r3, #1
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d10a      	bne.n	800e6fc <dir_find+0x14a>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6a18      	ldr	r0, [r3, #32]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	3324      	adds	r3, #36	@ 0x24
 800e6ee:	220b      	movs	r2, #11
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	f7fe fea1 	bl	800d438 <mem_cmp>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d014      	beq.n	800e726 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e6fc:	23ff      	movs	r3, #255	@ 0xff
 800e6fe:	757b      	strb	r3, [r7, #21]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f04f 32ff 	mov.w	r2, #4294967295
 800e706:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e708:	2100      	movs	r1, #0
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f7ff fc7e 	bl	800e00c <dir_next>
 800e710:	4603      	mov	r3, r0
 800e712:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e714:	7dfb      	ldrb	r3, [r7, #23]
 800e716:	2b00      	cmp	r3, #0
 800e718:	f43f af65 	beq.w	800e5e6 <dir_find+0x34>
 800e71c:	e004      	b.n	800e728 <dir_find+0x176>
		if (res != FR_OK) break;
 800e71e:	bf00      	nop
 800e720:	e002      	b.n	800e728 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e722:	bf00      	nop
 800e724:	e000      	b.n	800e728 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e726:	bf00      	nop

	return res;
 800e728:	7dfb      	ldrb	r3, [r7, #23]
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3718      	adds	r7, #24
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
	...

0800e734 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b08c      	sub	sp, #48	@ 0x30
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e748:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d001      	beq.n	800e754 <dir_register+0x20>
 800e750:	2306      	movs	r3, #6
 800e752:	e0e0      	b.n	800e916 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e754:	2300      	movs	r3, #0
 800e756:	627b      	str	r3, [r7, #36]	@ 0x24
 800e758:	e002      	b.n	800e760 <dir_register+0x2c>
 800e75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75c:	3301      	adds	r3, #1
 800e75e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	68da      	ldr	r2, [r3, #12]
 800e764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e766:	005b      	lsls	r3, r3, #1
 800e768:	4413      	add	r3, r2
 800e76a:	881b      	ldrh	r3, [r3, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d1f4      	bne.n	800e75a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800e776:	f107 030c 	add.w	r3, r7, #12
 800e77a:	220c      	movs	r2, #12
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7fe fe1f 	bl	800d3c0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e782:	7dfb      	ldrb	r3, [r7, #23]
 800e784:	f003 0301 	and.w	r3, r3, #1
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d032      	beq.n	800e7f2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2240      	movs	r2, #64	@ 0x40
 800e790:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800e794:	2301      	movs	r3, #1
 800e796:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e798:	e016      	b.n	800e7c8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800e7a0:	69fb      	ldr	r3, [r7, #28]
 800e7a2:	68da      	ldr	r2, [r3, #12]
 800e7a4:	f107 010c 	add.w	r1, r7, #12
 800e7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7aa:	f7ff fe53 	bl	800e454 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f7ff feff 	bl	800e5b2 <dir_find>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800e7ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d106      	bne.n	800e7d0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ca:	2b63      	cmp	r3, #99	@ 0x63
 800e7cc:	d9e5      	bls.n	800e79a <dir_register+0x66>
 800e7ce:	e000      	b.n	800e7d2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800e7d0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7d4:	2b64      	cmp	r3, #100	@ 0x64
 800e7d6:	d101      	bne.n	800e7dc <dir_register+0xa8>
 800e7d8:	2307      	movs	r3, #7
 800e7da:	e09c      	b.n	800e916 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e7dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e7e0:	2b04      	cmp	r3, #4
 800e7e2:	d002      	beq.n	800e7ea <dir_register+0xb6>
 800e7e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e7e8:	e095      	b.n	800e916 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e7ea:	7dfa      	ldrb	r2, [r7, #23]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e7f2:	7dfb      	ldrb	r3, [r7, #23]
 800e7f4:	f003 0302 	and.w	r3, r3, #2
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d007      	beq.n	800e80c <dir_register+0xd8>
 800e7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7fe:	330c      	adds	r3, #12
 800e800:	4a47      	ldr	r2, [pc, #284]	@ (800e920 <dir_register+0x1ec>)
 800e802:	fba2 2303 	umull	r2, r3, r2, r3
 800e806:	089b      	lsrs	r3, r3, #2
 800e808:	3301      	adds	r3, #1
 800e80a:	e000      	b.n	800e80e <dir_register+0xda>
 800e80c:	2301      	movs	r3, #1
 800e80e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e810:	6a39      	ldr	r1, [r7, #32]
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f7ff fcbf 	bl	800e196 <dir_alloc>
 800e818:	4603      	mov	r3, r0
 800e81a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e81e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e822:	2b00      	cmp	r3, #0
 800e824:	d148      	bne.n	800e8b8 <dir_register+0x184>
 800e826:	6a3b      	ldr	r3, [r7, #32]
 800e828:	3b01      	subs	r3, #1
 800e82a:	623b      	str	r3, [r7, #32]
 800e82c:	6a3b      	ldr	r3, [r7, #32]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d042      	beq.n	800e8b8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	695a      	ldr	r2, [r3, #20]
 800e836:	6a3b      	ldr	r3, [r7, #32]
 800e838:	015b      	lsls	r3, r3, #5
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	4619      	mov	r1, r3
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f7ff fb69 	bl	800df16 <dir_sdi>
 800e844:	4603      	mov	r3, r0
 800e846:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e84a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d132      	bne.n	800e8b8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	3324      	adds	r3, #36	@ 0x24
 800e856:	4618      	mov	r0, r3
 800e858:	f7ff fe8a 	bl	800e570 <sum_sfn>
 800e85c:	4603      	mov	r3, r0
 800e85e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	69db      	ldr	r3, [r3, #28]
 800e864:	4619      	mov	r1, r3
 800e866:	69f8      	ldr	r0, [r7, #28]
 800e868:	f7fe ffd8 	bl	800d81c <move_window>
 800e86c:	4603      	mov	r3, r0
 800e86e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800e872:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e876:	2b00      	cmp	r3, #0
 800e878:	d11d      	bne.n	800e8b6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	68d8      	ldr	r0, [r3, #12]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6a19      	ldr	r1, [r3, #32]
 800e882:	6a3b      	ldr	r3, [r7, #32]
 800e884:	b2da      	uxtb	r2, r3
 800e886:	7efb      	ldrb	r3, [r7, #27]
 800e888:	f7ff fd7c 	bl	800e384 <put_lfn>
				fs->wflag = 1;
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	2201      	movs	r2, #1
 800e890:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e892:	2100      	movs	r1, #0
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f7ff fbb9 	bl	800e00c <dir_next>
 800e89a:	4603      	mov	r3, r0
 800e89c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800e8a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d107      	bne.n	800e8b8 <dir_register+0x184>
 800e8a8:	6a3b      	ldr	r3, [r7, #32]
 800e8aa:	3b01      	subs	r3, #1
 800e8ac:	623b      	str	r3, [r7, #32]
 800e8ae:	6a3b      	ldr	r3, [r7, #32]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d1d5      	bne.n	800e860 <dir_register+0x12c>
 800e8b4:	e000      	b.n	800e8b8 <dir_register+0x184>
				if (res != FR_OK) break;
 800e8b6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e8b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d128      	bne.n	800e912 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	69db      	ldr	r3, [r3, #28]
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	69f8      	ldr	r0, [r7, #28]
 800e8c8:	f7fe ffa8 	bl	800d81c <move_window>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800e8d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d11b      	bne.n	800e912 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6a1b      	ldr	r3, [r3, #32]
 800e8de:	2220      	movs	r2, #32
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7fe fd8d 	bl	800d402 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6a18      	ldr	r0, [r3, #32]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	3324      	adds	r3, #36	@ 0x24
 800e8f0:	220b      	movs	r2, #11
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	f7fe fd64 	bl	800d3c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6a1b      	ldr	r3, [r3, #32]
 800e902:	330c      	adds	r3, #12
 800e904:	f002 0218 	and.w	r2, r2, #24
 800e908:	b2d2      	uxtb	r2, r2
 800e90a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e90c:	69fb      	ldr	r3, [r7, #28]
 800e90e:	2201      	movs	r2, #1
 800e910:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e912:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e916:	4618      	mov	r0, r3
 800e918:	3730      	adds	r7, #48	@ 0x30
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	4ec4ec4f 	.word	0x4ec4ec4f

0800e924 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b08a      	sub	sp, #40	@ 0x28
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	613b      	str	r3, [r7, #16]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	60fb      	str	r3, [r7, #12]
 800e93c:	2300      	movs	r3, #0
 800e93e:	617b      	str	r3, [r7, #20]
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	1c5a      	adds	r2, r3, #1
 800e948:	61ba      	str	r2, [r7, #24]
 800e94a:	693a      	ldr	r2, [r7, #16]
 800e94c:	4413      	add	r3, r2
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e952:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e954:	2b1f      	cmp	r3, #31
 800e956:	d940      	bls.n	800e9da <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e958:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e95a:	2b2f      	cmp	r3, #47	@ 0x2f
 800e95c:	d006      	beq.n	800e96c <create_name+0x48>
 800e95e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e960:	2b5c      	cmp	r3, #92	@ 0x5c
 800e962:	d110      	bne.n	800e986 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e964:	e002      	b.n	800e96c <create_name+0x48>
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	3301      	adds	r3, #1
 800e96a:	61bb      	str	r3, [r7, #24]
 800e96c:	693a      	ldr	r2, [r7, #16]
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	4413      	add	r3, r2
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	2b2f      	cmp	r3, #47	@ 0x2f
 800e976:	d0f6      	beq.n	800e966 <create_name+0x42>
 800e978:	693a      	ldr	r2, [r7, #16]
 800e97a:	69bb      	ldr	r3, [r7, #24]
 800e97c:	4413      	add	r3, r2
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	2b5c      	cmp	r3, #92	@ 0x5c
 800e982:	d0f0      	beq.n	800e966 <create_name+0x42>
			break;
 800e984:	e02a      	b.n	800e9dc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	2bfe      	cmp	r3, #254	@ 0xfe
 800e98a:	d901      	bls.n	800e990 <create_name+0x6c>
 800e98c:	2306      	movs	r3, #6
 800e98e:	e17d      	b.n	800ec8c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e990:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e992:	b2db      	uxtb	r3, r3
 800e994:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e996:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e998:	2101      	movs	r1, #1
 800e99a:	4618      	mov	r0, r3
 800e99c:	f001 fb7a 	bl	8010094 <ff_convert>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e9a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d101      	bne.n	800e9ae <create_name+0x8a>
 800e9aa:	2306      	movs	r3, #6
 800e9ac:	e16e      	b.n	800ec8c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e9ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9b0:	2b7f      	cmp	r3, #127	@ 0x7f
 800e9b2:	d809      	bhi.n	800e9c8 <create_name+0xa4>
 800e9b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	488d      	ldr	r0, [pc, #564]	@ (800ebf0 <create_name+0x2cc>)
 800e9ba:	f7fe fd64 	bl	800d486 <chk_chr>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d001      	beq.n	800e9c8 <create_name+0xa4>
 800e9c4:	2306      	movs	r3, #6
 800e9c6:	e161      	b.n	800ec8c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	1c5a      	adds	r2, r3, #1
 800e9cc:	617a      	str	r2, [r7, #20]
 800e9ce:	005b      	lsls	r3, r3, #1
 800e9d0:	68fa      	ldr	r2, [r7, #12]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e9d6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e9d8:	e7b4      	b.n	800e944 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e9da:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e9dc:	693a      	ldr	r2, [r7, #16]
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	441a      	add	r2, r3
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e9e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9e8:	2b1f      	cmp	r3, #31
 800e9ea:	d801      	bhi.n	800e9f0 <create_name+0xcc>
 800e9ec:	2304      	movs	r3, #4
 800e9ee:	e000      	b.n	800e9f2 <create_name+0xce>
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e9f6:	e011      	b.n	800ea1c <create_name+0xf8>
		w = lfn[di - 1];
 800e9f8:	697a      	ldr	r2, [r7, #20]
 800e9fa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e9fe:	4413      	add	r3, r2
 800ea00:	005b      	lsls	r3, r3, #1
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	4413      	add	r3, r2
 800ea06:	881b      	ldrh	r3, [r3, #0]
 800ea08:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ea0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea0c:	2b20      	cmp	r3, #32
 800ea0e:	d002      	beq.n	800ea16 <create_name+0xf2>
 800ea10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea12:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea14:	d106      	bne.n	800ea24 <create_name+0x100>
		di--;
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	3b01      	subs	r3, #1
 800ea1a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d1ea      	bne.n	800e9f8 <create_name+0xd4>
 800ea22:	e000      	b.n	800ea26 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ea24:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	68fa      	ldr	r2, [r7, #12]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	2200      	movs	r2, #0
 800ea30:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d101      	bne.n	800ea3c <create_name+0x118>
 800ea38:	2306      	movs	r3, #6
 800ea3a:	e127      	b.n	800ec8c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	3324      	adds	r3, #36	@ 0x24
 800ea40:	220b      	movs	r2, #11
 800ea42:	2120      	movs	r1, #32
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7fe fcdc 	bl	800d402 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	61bb      	str	r3, [r7, #24]
 800ea4e:	e002      	b.n	800ea56 <create_name+0x132>
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	3301      	adds	r3, #1
 800ea54:	61bb      	str	r3, [r7, #24]
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	005b      	lsls	r3, r3, #1
 800ea5a:	68fa      	ldr	r2, [r7, #12]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	881b      	ldrh	r3, [r3, #0]
 800ea60:	2b20      	cmp	r3, #32
 800ea62:	d0f5      	beq.n	800ea50 <create_name+0x12c>
 800ea64:	69bb      	ldr	r3, [r7, #24]
 800ea66:	005b      	lsls	r3, r3, #1
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	4413      	add	r3, r2
 800ea6c:	881b      	ldrh	r3, [r3, #0]
 800ea6e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea70:	d0ee      	beq.n	800ea50 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ea72:	69bb      	ldr	r3, [r7, #24]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d009      	beq.n	800ea8c <create_name+0x168>
 800ea78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea7c:	f043 0303 	orr.w	r3, r3, #3
 800ea80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ea84:	e002      	b.n	800ea8c <create_name+0x168>
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	617b      	str	r3, [r7, #20]
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d009      	beq.n	800eaa6 <create_name+0x182>
 800ea92:	697a      	ldr	r2, [r7, #20]
 800ea94:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ea98:	4413      	add	r3, r2
 800ea9a:	005b      	lsls	r3, r3, #1
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	881b      	ldrh	r3, [r3, #0]
 800eaa2:	2b2e      	cmp	r3, #46	@ 0x2e
 800eaa4:	d1ef      	bne.n	800ea86 <create_name+0x162>

	i = b = 0; ni = 8;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800eaac:	2300      	movs	r3, #0
 800eaae:	623b      	str	r3, [r7, #32]
 800eab0:	2308      	movs	r3, #8
 800eab2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	1c5a      	adds	r2, r3, #1
 800eab8:	61ba      	str	r2, [r7, #24]
 800eaba:	005b      	lsls	r3, r3, #1
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	4413      	add	r3, r2
 800eac0:	881b      	ldrh	r3, [r3, #0]
 800eac2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800eac4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f000 8090 	beq.w	800ebec <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800eacc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eace:	2b20      	cmp	r3, #32
 800ead0:	d006      	beq.n	800eae0 <create_name+0x1bc>
 800ead2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ead4:	2b2e      	cmp	r3, #46	@ 0x2e
 800ead6:	d10a      	bne.n	800eaee <create_name+0x1ca>
 800ead8:	69ba      	ldr	r2, [r7, #24]
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d006      	beq.n	800eaee <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800eae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eae4:	f043 0303 	orr.w	r3, r3, #3
 800eae8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eaec:	e07d      	b.n	800ebea <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800eaee:	6a3a      	ldr	r2, [r7, #32]
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d203      	bcs.n	800eafe <create_name+0x1da>
 800eaf6:	69ba      	ldr	r2, [r7, #24]
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d123      	bne.n	800eb46 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	2b0b      	cmp	r3, #11
 800eb02:	d106      	bne.n	800eb12 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800eb04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb08:	f043 0303 	orr.w	r3, r3, #3
 800eb0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eb10:	e075      	b.n	800ebfe <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800eb12:	69ba      	ldr	r2, [r7, #24]
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d005      	beq.n	800eb26 <create_name+0x202>
 800eb1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb1e:	f043 0303 	orr.w	r3, r3, #3
 800eb22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800eb26:	69ba      	ldr	r2, [r7, #24]
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d866      	bhi.n	800ebfc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	61bb      	str	r3, [r7, #24]
 800eb32:	2308      	movs	r3, #8
 800eb34:	623b      	str	r3, [r7, #32]
 800eb36:	230b      	movs	r3, #11
 800eb38:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800eb3a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eb3e:	009b      	lsls	r3, r3, #2
 800eb40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800eb44:	e051      	b.n	800ebea <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800eb46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb48:	2b7f      	cmp	r3, #127	@ 0x7f
 800eb4a:	d914      	bls.n	800eb76 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800eb4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb4e:	2100      	movs	r1, #0
 800eb50:	4618      	mov	r0, r3
 800eb52:	f001 fa9f 	bl	8010094 <ff_convert>
 800eb56:	4603      	mov	r3, r0
 800eb58:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800eb5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d004      	beq.n	800eb6a <create_name+0x246>
 800eb60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb62:	3b80      	subs	r3, #128	@ 0x80
 800eb64:	4a23      	ldr	r2, [pc, #140]	@ (800ebf4 <create_name+0x2d0>)
 800eb66:	5cd3      	ldrb	r3, [r2, r3]
 800eb68:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800eb6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb6e:	f043 0302 	orr.w	r3, r3, #2
 800eb72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800eb76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d007      	beq.n	800eb8c <create_name+0x268>
 800eb7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb7e:	4619      	mov	r1, r3
 800eb80:	481d      	ldr	r0, [pc, #116]	@ (800ebf8 <create_name+0x2d4>)
 800eb82:	f7fe fc80 	bl	800d486 <chk_chr>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d008      	beq.n	800eb9e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800eb8c:	235f      	movs	r3, #95	@ 0x5f
 800eb8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800eb90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb94:	f043 0303 	orr.w	r3, r3, #3
 800eb98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eb9c:	e01b      	b.n	800ebd6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800eb9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eba0:	2b40      	cmp	r3, #64	@ 0x40
 800eba2:	d909      	bls.n	800ebb8 <create_name+0x294>
 800eba4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eba6:	2b5a      	cmp	r3, #90	@ 0x5a
 800eba8:	d806      	bhi.n	800ebb8 <create_name+0x294>
					b |= 2;
 800ebaa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ebae:	f043 0302 	orr.w	r3, r3, #2
 800ebb2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ebb6:	e00e      	b.n	800ebd6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ebb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebba:	2b60      	cmp	r3, #96	@ 0x60
 800ebbc:	d90b      	bls.n	800ebd6 <create_name+0x2b2>
 800ebbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebc0:	2b7a      	cmp	r3, #122	@ 0x7a
 800ebc2:	d808      	bhi.n	800ebd6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ebc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ebc8:	f043 0301 	orr.w	r3, r3, #1
 800ebcc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ebd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebd2:	3b20      	subs	r3, #32
 800ebd4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ebd6:	6a3b      	ldr	r3, [r7, #32]
 800ebd8:	1c5a      	adds	r2, r3, #1
 800ebda:	623a      	str	r2, [r7, #32]
 800ebdc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ebde:	b2d1      	uxtb	r1, r2
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	4413      	add	r3, r2
 800ebe4:	460a      	mov	r2, r1
 800ebe6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ebea:	e763      	b.n	800eab4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ebec:	bf00      	nop
 800ebee:	e006      	b.n	800ebfe <create_name+0x2da>
 800ebf0:	08010c00 	.word	0x08010c00
 800ebf4:	08010ecc 	.word	0x08010ecc
 800ebf8:	08010c0c 	.word	0x08010c0c
			if (si > di) break;			/* No extension */
 800ebfc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ec04:	2be5      	cmp	r3, #229	@ 0xe5
 800ec06:	d103      	bne.n	800ec10 <create_name+0x2ec>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2205      	movs	r2, #5
 800ec0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	2b08      	cmp	r3, #8
 800ec14:	d104      	bne.n	800ec20 <create_name+0x2fc>
 800ec16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec1a:	009b      	lsls	r3, r3, #2
 800ec1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ec20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec24:	f003 030c 	and.w	r3, r3, #12
 800ec28:	2b0c      	cmp	r3, #12
 800ec2a:	d005      	beq.n	800ec38 <create_name+0x314>
 800ec2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec30:	f003 0303 	and.w	r3, r3, #3
 800ec34:	2b03      	cmp	r3, #3
 800ec36:	d105      	bne.n	800ec44 <create_name+0x320>
 800ec38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec3c:	f043 0302 	orr.w	r3, r3, #2
 800ec40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ec44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec48:	f003 0302 	and.w	r3, r3, #2
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d117      	bne.n	800ec80 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ec50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec54:	f003 0303 	and.w	r3, r3, #3
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d105      	bne.n	800ec68 <create_name+0x344>
 800ec5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec60:	f043 0310 	orr.w	r3, r3, #16
 800ec64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ec68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec6c:	f003 030c 	and.w	r3, r3, #12
 800ec70:	2b04      	cmp	r3, #4
 800ec72:	d105      	bne.n	800ec80 <create_name+0x35c>
 800ec74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec78:	f043 0308 	orr.w	r3, r3, #8
 800ec7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ec86:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800ec8a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3728      	adds	r7, #40	@ 0x28
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b086      	sub	sp, #24
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800eca8:	e002      	b.n	800ecb0 <follow_path+0x1c>
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	3301      	adds	r3, #1
 800ecae:	603b      	str	r3, [r7, #0]
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	2b2f      	cmp	r3, #47	@ 0x2f
 800ecb6:	d0f8      	beq.n	800ecaa <follow_path+0x16>
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	2b5c      	cmp	r3, #92	@ 0x5c
 800ecbe:	d0f4      	beq.n	800ecaa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	781b      	ldrb	r3, [r3, #0]
 800ecca:	2b1f      	cmp	r3, #31
 800eccc:	d80a      	bhi.n	800ece4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2280      	movs	r2, #128	@ 0x80
 800ecd2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ecd6:	2100      	movs	r1, #0
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f7ff f91c 	bl	800df16 <dir_sdi>
 800ecde:	4603      	mov	r3, r0
 800ece0:	75fb      	strb	r3, [r7, #23]
 800ece2:	e043      	b.n	800ed6c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ece4:	463b      	mov	r3, r7
 800ece6:	4619      	mov	r1, r3
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f7ff fe1b 	bl	800e924 <create_name>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ecf2:	7dfb      	ldrb	r3, [r7, #23]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d134      	bne.n	800ed62 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f7ff fc5a 	bl	800e5b2 <dir_find>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ed08:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ed0a:	7dfb      	ldrb	r3, [r7, #23]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d00a      	beq.n	800ed26 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ed10:	7dfb      	ldrb	r3, [r7, #23]
 800ed12:	2b04      	cmp	r3, #4
 800ed14:	d127      	bne.n	800ed66 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ed16:	7afb      	ldrb	r3, [r7, #11]
 800ed18:	f003 0304 	and.w	r3, r3, #4
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d122      	bne.n	800ed66 <follow_path+0xd2>
 800ed20:	2305      	movs	r3, #5
 800ed22:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ed24:	e01f      	b.n	800ed66 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ed26:	7afb      	ldrb	r3, [r7, #11]
 800ed28:	f003 0304 	and.w	r3, r3, #4
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d11c      	bne.n	800ed6a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	799b      	ldrb	r3, [r3, #6]
 800ed34:	f003 0310 	and.w	r3, r3, #16
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d102      	bne.n	800ed42 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ed3c:	2305      	movs	r3, #5
 800ed3e:	75fb      	strb	r3, [r7, #23]
 800ed40:	e014      	b.n	800ed6c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	695b      	ldr	r3, [r3, #20]
 800ed4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed50:	4413      	add	r3, r2
 800ed52:	4619      	mov	r1, r3
 800ed54:	68f8      	ldr	r0, [r7, #12]
 800ed56:	f7ff fa65 	bl	800e224 <ld_clust>
 800ed5a:	4602      	mov	r2, r0
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ed60:	e7c0      	b.n	800ece4 <follow_path+0x50>
			if (res != FR_OK) break;
 800ed62:	bf00      	nop
 800ed64:	e002      	b.n	800ed6c <follow_path+0xd8>
				break;
 800ed66:	bf00      	nop
 800ed68:	e000      	b.n	800ed6c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ed6a:	bf00      	nop
			}
		}
	}

	return res;
 800ed6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3718      	adds	r7, #24
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}

0800ed76 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ed76:	b480      	push	{r7}
 800ed78:	b087      	sub	sp, #28
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ed7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed82:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d031      	beq.n	800edf0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	617b      	str	r3, [r7, #20]
 800ed92:	e002      	b.n	800ed9a <get_ldnumber+0x24>
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	3301      	adds	r3, #1
 800ed98:	617b      	str	r3, [r7, #20]
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	2b1f      	cmp	r3, #31
 800eda0:	d903      	bls.n	800edaa <get_ldnumber+0x34>
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	781b      	ldrb	r3, [r3, #0]
 800eda6:	2b3a      	cmp	r3, #58	@ 0x3a
 800eda8:	d1f4      	bne.n	800ed94 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	2b3a      	cmp	r3, #58	@ 0x3a
 800edb0:	d11c      	bne.n	800edec <get_ldnumber+0x76>
			tp = *path;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	1c5a      	adds	r2, r3, #1
 800edbc:	60fa      	str	r2, [r7, #12]
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	3b30      	subs	r3, #48	@ 0x30
 800edc2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	2b09      	cmp	r3, #9
 800edc8:	d80e      	bhi.n	800ede8 <get_ldnumber+0x72>
 800edca:	68fa      	ldr	r2, [r7, #12]
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d10a      	bne.n	800ede8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d107      	bne.n	800ede8 <get_ldnumber+0x72>
					vol = (int)i;
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	3301      	adds	r3, #1
 800ede0:	617b      	str	r3, [r7, #20]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	697a      	ldr	r2, [r7, #20]
 800ede6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	e002      	b.n	800edf2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800edec:	2300      	movs	r3, #0
 800edee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800edf0:	693b      	ldr	r3, [r7, #16]
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	371c      	adds	r7, #28
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr
	...

0800ee00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	70da      	strb	r2, [r3, #3]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f04f 32ff 	mov.w	r2, #4294967295
 800ee16:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ee18:	6839      	ldr	r1, [r7, #0]
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f7fe fcfe 	bl	800d81c <move_window>
 800ee20:	4603      	mov	r3, r0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d001      	beq.n	800ee2a <check_fs+0x2a>
 800ee26:	2304      	movs	r3, #4
 800ee28:	e038      	b.n	800ee9c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	3334      	adds	r3, #52	@ 0x34
 800ee2e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7fe fa42 	bl	800d2bc <ld_word>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d001      	beq.n	800ee48 <check_fs+0x48>
 800ee44:	2303      	movs	r3, #3
 800ee46:	e029      	b.n	800ee9c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ee4e:	2be9      	cmp	r3, #233	@ 0xe9
 800ee50:	d009      	beq.n	800ee66 <check_fs+0x66>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ee58:	2beb      	cmp	r3, #235	@ 0xeb
 800ee5a:	d11e      	bne.n	800ee9a <check_fs+0x9a>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800ee62:	2b90      	cmp	r3, #144	@ 0x90
 800ee64:	d119      	bne.n	800ee9a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	3334      	adds	r3, #52	@ 0x34
 800ee6a:	3336      	adds	r3, #54	@ 0x36
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fe fa3d 	bl	800d2ec <ld_dword>
 800ee72:	4603      	mov	r3, r0
 800ee74:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ee78:	4a0a      	ldr	r2, [pc, #40]	@ (800eea4 <check_fs+0xa4>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d101      	bne.n	800ee82 <check_fs+0x82>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	e00c      	b.n	800ee9c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	3334      	adds	r3, #52	@ 0x34
 800ee86:	3352      	adds	r3, #82	@ 0x52
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7fe fa2f 	bl	800d2ec <ld_dword>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	4a05      	ldr	r2, [pc, #20]	@ (800eea8 <check_fs+0xa8>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d101      	bne.n	800ee9a <check_fs+0x9a>
 800ee96:	2300      	movs	r3, #0
 800ee98:	e000      	b.n	800ee9c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ee9a:	2302      	movs	r3, #2
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	00544146 	.word	0x00544146
 800eea8:	33544146 	.word	0x33544146

0800eeac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b096      	sub	sp, #88	@ 0x58
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	60b9      	str	r1, [r7, #8]
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	2200      	movs	r2, #0
 800eebe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800eec0:	68f8      	ldr	r0, [r7, #12]
 800eec2:	f7ff ff58 	bl	800ed76 <get_ldnumber>
 800eec6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	da01      	bge.n	800eed2 <find_volume+0x26>
 800eece:	230b      	movs	r3, #11
 800eed0:	e22d      	b.n	800f32e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800eed2:	4aa1      	ldr	r2, [pc, #644]	@ (800f158 <find_volume+0x2ac>)
 800eed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eeda:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d101      	bne.n	800eee6 <find_volume+0x3a>
 800eee2:	230c      	movs	r3, #12
 800eee4:	e223      	b.n	800f32e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eeea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800eeec:	79fb      	ldrb	r3, [r7, #7]
 800eeee:	f023 0301 	bic.w	r3, r3, #1
 800eef2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800eef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d01a      	beq.n	800ef32 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800eefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eefe:	785b      	ldrb	r3, [r3, #1]
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fe f933 	bl	800d16c <disk_status>
 800ef06:	4603      	mov	r3, r0
 800ef08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ef0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ef10:	f003 0301 	and.w	r3, r3, #1
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d10c      	bne.n	800ef32 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ef18:	79fb      	ldrb	r3, [r7, #7]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d007      	beq.n	800ef2e <find_volume+0x82>
 800ef1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ef22:	f003 0304 	and.w	r3, r3, #4
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d001      	beq.n	800ef2e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ef2a:	230a      	movs	r3, #10
 800ef2c:	e1ff      	b.n	800f32e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ef2e:	2300      	movs	r3, #0
 800ef30:	e1fd      	b.n	800f32e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ef32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef34:	2200      	movs	r2, #0
 800ef36:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ef38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef3a:	b2da      	uxtb	r2, r3
 800ef3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef3e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ef40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef42:	785b      	ldrb	r3, [r3, #1]
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7fe f92b 	bl	800d1a0 <disk_initialize>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ef50:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ef54:	f003 0301 	and.w	r3, r3, #1
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d001      	beq.n	800ef60 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ef5c:	2303      	movs	r3, #3
 800ef5e:	e1e6      	b.n	800f32e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ef60:	79fb      	ldrb	r3, [r7, #7]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d007      	beq.n	800ef76 <find_volume+0xca>
 800ef66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ef6a:	f003 0304 	and.w	r3, r3, #4
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d001      	beq.n	800ef76 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ef72:	230a      	movs	r3, #10
 800ef74:	e1db      	b.n	800f32e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ef76:	2300      	movs	r3, #0
 800ef78:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ef7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ef7c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ef7e:	f7ff ff3f 	bl	800ee00 <check_fs>
 800ef82:	4603      	mov	r3, r0
 800ef84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ef88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ef8c:	2b02      	cmp	r3, #2
 800ef8e:	d149      	bne.n	800f024 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ef90:	2300      	movs	r3, #0
 800ef92:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef94:	e01e      	b.n	800efd4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ef96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef98:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ef9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef9e:	011b      	lsls	r3, r3, #4
 800efa0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800efa4:	4413      	add	r3, r2
 800efa6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800efa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efaa:	3304      	adds	r3, #4
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d006      	beq.n	800efc0 <find_volume+0x114>
 800efb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efb4:	3308      	adds	r3, #8
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7fe f998 	bl	800d2ec <ld_dword>
 800efbc:	4602      	mov	r2, r0
 800efbe:	e000      	b.n	800efc2 <find_volume+0x116>
 800efc0:	2200      	movs	r2, #0
 800efc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efc4:	009b      	lsls	r3, r3, #2
 800efc6:	3358      	adds	r3, #88	@ 0x58
 800efc8:	443b      	add	r3, r7
 800efca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800efce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efd0:	3301      	adds	r3, #1
 800efd2:	643b      	str	r3, [r7, #64]	@ 0x40
 800efd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efd6:	2b03      	cmp	r3, #3
 800efd8:	d9dd      	bls.n	800ef96 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800efda:	2300      	movs	r3, #0
 800efdc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800efde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d002      	beq.n	800efea <find_volume+0x13e>
 800efe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efe6:	3b01      	subs	r3, #1
 800efe8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800efea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efec:	009b      	lsls	r3, r3, #2
 800efee:	3358      	adds	r3, #88	@ 0x58
 800eff0:	443b      	add	r3, r7
 800eff2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800eff6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800eff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800effa:	2b00      	cmp	r3, #0
 800effc:	d005      	beq.n	800f00a <find_volume+0x15e>
 800effe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f000:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f002:	f7ff fefd 	bl	800ee00 <check_fs>
 800f006:	4603      	mov	r3, r0
 800f008:	e000      	b.n	800f00c <find_volume+0x160>
 800f00a:	2303      	movs	r3, #3
 800f00c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f010:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f014:	2b01      	cmp	r3, #1
 800f016:	d905      	bls.n	800f024 <find_volume+0x178>
 800f018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f01a:	3301      	adds	r3, #1
 800f01c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f01e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f020:	2b03      	cmp	r3, #3
 800f022:	d9e2      	bls.n	800efea <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f024:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f028:	2b04      	cmp	r3, #4
 800f02a:	d101      	bne.n	800f030 <find_volume+0x184>
 800f02c:	2301      	movs	r3, #1
 800f02e:	e17e      	b.n	800f32e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f030:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f034:	2b01      	cmp	r3, #1
 800f036:	d901      	bls.n	800f03c <find_volume+0x190>
 800f038:	230d      	movs	r3, #13
 800f03a:	e178      	b.n	800f32e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f03e:	3334      	adds	r3, #52	@ 0x34
 800f040:	330b      	adds	r3, #11
 800f042:	4618      	mov	r0, r3
 800f044:	f7fe f93a 	bl	800d2bc <ld_word>
 800f048:	4603      	mov	r3, r0
 800f04a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f04e:	d001      	beq.n	800f054 <find_volume+0x1a8>
 800f050:	230d      	movs	r3, #13
 800f052:	e16c      	b.n	800f32e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f056:	3334      	adds	r3, #52	@ 0x34
 800f058:	3316      	adds	r3, #22
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7fe f92e 	bl	800d2bc <ld_word>
 800f060:	4603      	mov	r3, r0
 800f062:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f066:	2b00      	cmp	r3, #0
 800f068:	d106      	bne.n	800f078 <find_volume+0x1cc>
 800f06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f06c:	3334      	adds	r3, #52	@ 0x34
 800f06e:	3324      	adds	r3, #36	@ 0x24
 800f070:	4618      	mov	r0, r3
 800f072:	f7fe f93b 	bl	800d2ec <ld_dword>
 800f076:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f07a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f07c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f07e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f080:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f086:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f08a:	789b      	ldrb	r3, [r3, #2]
 800f08c:	2b01      	cmp	r3, #1
 800f08e:	d005      	beq.n	800f09c <find_volume+0x1f0>
 800f090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f092:	789b      	ldrb	r3, [r3, #2]
 800f094:	2b02      	cmp	r3, #2
 800f096:	d001      	beq.n	800f09c <find_volume+0x1f0>
 800f098:	230d      	movs	r3, #13
 800f09a:	e148      	b.n	800f32e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f09e:	789b      	ldrb	r3, [r3, #2]
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0a4:	fb02 f303 	mul.w	r3, r2, r3
 800f0a8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b8:	895b      	ldrh	r3, [r3, #10]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d008      	beq.n	800f0d0 <find_volume+0x224>
 800f0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0c0:	895b      	ldrh	r3, [r3, #10]
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0c6:	895b      	ldrh	r3, [r3, #10]
 800f0c8:	3b01      	subs	r3, #1
 800f0ca:	4013      	ands	r3, r2
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d001      	beq.n	800f0d4 <find_volume+0x228>
 800f0d0:	230d      	movs	r3, #13
 800f0d2:	e12c      	b.n	800f32e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0d6:	3334      	adds	r3, #52	@ 0x34
 800f0d8:	3311      	adds	r3, #17
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fe f8ee 	bl	800d2bc <ld_word>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	461a      	mov	r2, r3
 800f0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ea:	891b      	ldrh	r3, [r3, #8]
 800f0ec:	f003 030f 	and.w	r3, r3, #15
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d001      	beq.n	800f0fa <find_volume+0x24e>
 800f0f6:	230d      	movs	r3, #13
 800f0f8:	e119      	b.n	800f32e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0fc:	3334      	adds	r3, #52	@ 0x34
 800f0fe:	3313      	adds	r3, #19
 800f100:	4618      	mov	r0, r3
 800f102:	f7fe f8db 	bl	800d2bc <ld_word>
 800f106:	4603      	mov	r3, r0
 800f108:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f10a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d106      	bne.n	800f11e <find_volume+0x272>
 800f110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f112:	3334      	adds	r3, #52	@ 0x34
 800f114:	3320      	adds	r3, #32
 800f116:	4618      	mov	r0, r3
 800f118:	f7fe f8e8 	bl	800d2ec <ld_dword>
 800f11c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f120:	3334      	adds	r3, #52	@ 0x34
 800f122:	330e      	adds	r3, #14
 800f124:	4618      	mov	r0, r3
 800f126:	f7fe f8c9 	bl	800d2bc <ld_word>
 800f12a:	4603      	mov	r3, r0
 800f12c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f12e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f130:	2b00      	cmp	r3, #0
 800f132:	d101      	bne.n	800f138 <find_volume+0x28c>
 800f134:	230d      	movs	r3, #13
 800f136:	e0fa      	b.n	800f32e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f138:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f13a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f13c:	4413      	add	r3, r2
 800f13e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f140:	8912      	ldrh	r2, [r2, #8]
 800f142:	0912      	lsrs	r2, r2, #4
 800f144:	b292      	uxth	r2, r2
 800f146:	4413      	add	r3, r2
 800f148:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f14a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f14e:	429a      	cmp	r2, r3
 800f150:	d204      	bcs.n	800f15c <find_volume+0x2b0>
 800f152:	230d      	movs	r3, #13
 800f154:	e0eb      	b.n	800f32e <find_volume+0x482>
 800f156:	bf00      	nop
 800f158:	2001887c 	.word	0x2001887c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f15c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f160:	1ad3      	subs	r3, r2, r3
 800f162:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f164:	8952      	ldrh	r2, [r2, #10]
 800f166:	fbb3 f3f2 	udiv	r3, r3, r2
 800f16a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d101      	bne.n	800f176 <find_volume+0x2ca>
 800f172:	230d      	movs	r3, #13
 800f174:	e0db      	b.n	800f32e <find_volume+0x482>
		fmt = FS_FAT32;
 800f176:	2303      	movs	r3, #3
 800f178:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f17e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f182:	4293      	cmp	r3, r2
 800f184:	d802      	bhi.n	800f18c <find_volume+0x2e0>
 800f186:	2302      	movs	r3, #2
 800f188:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f18e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f192:	4293      	cmp	r3, r2
 800f194:	d802      	bhi.n	800f19c <find_volume+0x2f0>
 800f196:	2301      	movs	r3, #1
 800f198:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f19e:	1c9a      	adds	r2, r3, #2
 800f1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1a2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f1a8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f1aa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f1ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f1ae:	441a      	add	r2, r3
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1b2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f1b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1b8:	441a      	add	r2, r3
 800f1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1bc:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800f1be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f1c2:	2b03      	cmp	r3, #3
 800f1c4:	d11e      	bne.n	800f204 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c8:	3334      	adds	r3, #52	@ 0x34
 800f1ca:	332a      	adds	r3, #42	@ 0x2a
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7fe f875 	bl	800d2bc <ld_word>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d001      	beq.n	800f1dc <find_volume+0x330>
 800f1d8:	230d      	movs	r3, #13
 800f1da:	e0a8      	b.n	800f32e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1de:	891b      	ldrh	r3, [r3, #8]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d001      	beq.n	800f1e8 <find_volume+0x33c>
 800f1e4:	230d      	movs	r3, #13
 800f1e6:	e0a2      	b.n	800f32e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ea:	3334      	adds	r3, #52	@ 0x34
 800f1ec:	332c      	adds	r3, #44	@ 0x2c
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7fe f87c 	bl	800d2ec <ld_dword>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1fc:	699b      	ldr	r3, [r3, #24]
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	647b      	str	r3, [r7, #68]	@ 0x44
 800f202:	e01f      	b.n	800f244 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f206:	891b      	ldrh	r3, [r3, #8]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d101      	bne.n	800f210 <find_volume+0x364>
 800f20c:	230d      	movs	r3, #13
 800f20e:	e08e      	b.n	800f32e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f212:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f216:	441a      	add	r2, r3
 800f218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f21a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f21c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f220:	2b02      	cmp	r3, #2
 800f222:	d103      	bne.n	800f22c <find_volume+0x380>
 800f224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f226:	699b      	ldr	r3, [r3, #24]
 800f228:	005b      	lsls	r3, r3, #1
 800f22a:	e00a      	b.n	800f242 <find_volume+0x396>
 800f22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f22e:	699a      	ldr	r2, [r3, #24]
 800f230:	4613      	mov	r3, r2
 800f232:	005b      	lsls	r3, r3, #1
 800f234:	4413      	add	r3, r2
 800f236:	085a      	lsrs	r2, r3, #1
 800f238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f23a:	699b      	ldr	r3, [r3, #24]
 800f23c:	f003 0301 	and.w	r3, r3, #1
 800f240:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f242:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f246:	69da      	ldr	r2, [r3, #28]
 800f248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f24a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f24e:	0a5b      	lsrs	r3, r3, #9
 800f250:	429a      	cmp	r2, r3
 800f252:	d201      	bcs.n	800f258 <find_volume+0x3ac>
 800f254:	230d      	movs	r3, #13
 800f256:	e06a      	b.n	800f32e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f25a:	f04f 32ff 	mov.w	r2, #4294967295
 800f25e:	615a      	str	r2, [r3, #20]
 800f260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f262:	695a      	ldr	r2, [r3, #20]
 800f264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f266:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f26a:	2280      	movs	r2, #128	@ 0x80
 800f26c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f26e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f272:	2b03      	cmp	r3, #3
 800f274:	d149      	bne.n	800f30a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f278:	3334      	adds	r3, #52	@ 0x34
 800f27a:	3330      	adds	r3, #48	@ 0x30
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7fe f81d 	bl	800d2bc <ld_word>
 800f282:	4603      	mov	r3, r0
 800f284:	2b01      	cmp	r3, #1
 800f286:	d140      	bne.n	800f30a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f288:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f28a:	3301      	adds	r3, #1
 800f28c:	4619      	mov	r1, r3
 800f28e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f290:	f7fe fac4 	bl	800d81c <move_window>
 800f294:	4603      	mov	r3, r0
 800f296:	2b00      	cmp	r3, #0
 800f298:	d137      	bne.n	800f30a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f29c:	2200      	movs	r2, #0
 800f29e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2a2:	3334      	adds	r3, #52	@ 0x34
 800f2a4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7fe f807 	bl	800d2bc <ld_word>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	461a      	mov	r2, r3
 800f2b2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d127      	bne.n	800f30a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2bc:	3334      	adds	r3, #52	@ 0x34
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7fe f814 	bl	800d2ec <ld_dword>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	4a1c      	ldr	r2, [pc, #112]	@ (800f338 <find_volume+0x48c>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d11e      	bne.n	800f30a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ce:	3334      	adds	r3, #52	@ 0x34
 800f2d0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7fe f809 	bl	800d2ec <ld_dword>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	4a17      	ldr	r2, [pc, #92]	@ (800f33c <find_volume+0x490>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d113      	bne.n	800f30a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2e4:	3334      	adds	r3, #52	@ 0x34
 800f2e6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fd fffe 	bl	800d2ec <ld_dword>
 800f2f0:	4602      	mov	r2, r0
 800f2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2f4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2f8:	3334      	adds	r3, #52	@ 0x34
 800f2fa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fd fff4 	bl	800d2ec <ld_dword>
 800f304:	4602      	mov	r2, r0
 800f306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f308:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f30c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f310:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f312:	4b0b      	ldr	r3, [pc, #44]	@ (800f340 <find_volume+0x494>)
 800f314:	881b      	ldrh	r3, [r3, #0]
 800f316:	3301      	adds	r3, #1
 800f318:	b29a      	uxth	r2, r3
 800f31a:	4b09      	ldr	r3, [pc, #36]	@ (800f340 <find_volume+0x494>)
 800f31c:	801a      	strh	r2, [r3, #0]
 800f31e:	4b08      	ldr	r3, [pc, #32]	@ (800f340 <find_volume+0x494>)
 800f320:	881a      	ldrh	r2, [r3, #0]
 800f322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f324:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f326:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f328:	f7fe fa10 	bl	800d74c <clear_lock>
#endif
	return FR_OK;
 800f32c:	2300      	movs	r3, #0
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3758      	adds	r7, #88	@ 0x58
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
 800f336:	bf00      	nop
 800f338:	41615252 	.word	0x41615252
 800f33c:	61417272 	.word	0x61417272
 800f340:	20018880 	.word	0x20018880

0800f344 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f34e:	2309      	movs	r3, #9
 800f350:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d01c      	beq.n	800f392 <validate+0x4e>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d018      	beq.n	800f392 <validate+0x4e>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d013      	beq.n	800f392 <validate+0x4e>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	889a      	ldrh	r2, [r3, #4]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	88db      	ldrh	r3, [r3, #6]
 800f374:	429a      	cmp	r2, r3
 800f376:	d10c      	bne.n	800f392 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	785b      	ldrb	r3, [r3, #1]
 800f37e:	4618      	mov	r0, r3
 800f380:	f7fd fef4 	bl	800d16c <disk_status>
 800f384:	4603      	mov	r3, r0
 800f386:	f003 0301 	and.w	r3, r3, #1
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d101      	bne.n	800f392 <validate+0x4e>
			res = FR_OK;
 800f38e:	2300      	movs	r3, #0
 800f390:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f392:	7bfb      	ldrb	r3, [r7, #15]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d102      	bne.n	800f39e <validate+0x5a>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	e000      	b.n	800f3a0 <validate+0x5c>
 800f39e:	2300      	movs	r3, #0
 800f3a0:	683a      	ldr	r2, [r7, #0]
 800f3a2:	6013      	str	r3, [r2, #0]
	return res;
 800f3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3710      	adds	r7, #16
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
	...

0800f3b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b088      	sub	sp, #32
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	60f8      	str	r0, [r7, #12]
 800f3b8:	60b9      	str	r1, [r7, #8]
 800f3ba:	4613      	mov	r3, r2
 800f3bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f3c2:	f107 0310 	add.w	r3, r7, #16
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7ff fcd5 	bl	800ed76 <get_ldnumber>
 800f3cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f3ce:	69fb      	ldr	r3, [r7, #28]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	da01      	bge.n	800f3d8 <f_mount+0x28>
 800f3d4:	230b      	movs	r3, #11
 800f3d6:	e02b      	b.n	800f430 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f3d8:	4a17      	ldr	r2, [pc, #92]	@ (800f438 <f_mount+0x88>)
 800f3da:	69fb      	ldr	r3, [r7, #28]
 800f3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f3e2:	69bb      	ldr	r3, [r7, #24]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d005      	beq.n	800f3f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f3e8:	69b8      	ldr	r0, [r7, #24]
 800f3ea:	f7fe f9af 	bl	800d74c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d002      	beq.n	800f400 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f400:	68fa      	ldr	r2, [r7, #12]
 800f402:	490d      	ldr	r1, [pc, #52]	@ (800f438 <f_mount+0x88>)
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d002      	beq.n	800f416 <f_mount+0x66>
 800f410:	79fb      	ldrb	r3, [r7, #7]
 800f412:	2b01      	cmp	r3, #1
 800f414:	d001      	beq.n	800f41a <f_mount+0x6a>
 800f416:	2300      	movs	r3, #0
 800f418:	e00a      	b.n	800f430 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f41a:	f107 010c 	add.w	r1, r7, #12
 800f41e:	f107 0308 	add.w	r3, r7, #8
 800f422:	2200      	movs	r2, #0
 800f424:	4618      	mov	r0, r3
 800f426:	f7ff fd41 	bl	800eeac <find_volume>
 800f42a:	4603      	mov	r3, r0
 800f42c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f42e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f430:	4618      	mov	r0, r3
 800f432:	3720      	adds	r7, #32
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}
 800f438:	2001887c 	.word	0x2001887c

0800f43c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b09a      	sub	sp, #104	@ 0x68
 800f440:	af00      	add	r7, sp, #0
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	4613      	mov	r3, r2
 800f448:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d101      	bne.n	800f454 <f_open+0x18>
 800f450:	2309      	movs	r3, #9
 800f452:	e1b9      	b.n	800f7c8 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f454:	79fb      	ldrb	r3, [r7, #7]
 800f456:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f45a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f45c:	79fa      	ldrb	r2, [r7, #7]
 800f45e:	f107 0110 	add.w	r1, r7, #16
 800f462:	f107 0308 	add.w	r3, r7, #8
 800f466:	4618      	mov	r0, r3
 800f468:	f7ff fd20 	bl	800eeac <find_volume>
 800f46c:	4603      	mov	r3, r0
 800f46e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800f472:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f476:	2b00      	cmp	r3, #0
 800f478:	f040 819d 	bne.w	800f7b6 <f_open+0x37a>
		dj.obj.fs = fs;
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800f480:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800f484:	f000 fdef 	bl	8010066 <ff_memalloc>
 800f488:	65b8      	str	r0, [r7, #88]	@ 0x58
 800f48a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d101      	bne.n	800f494 <f_open+0x58>
 800f490:	2311      	movs	r3, #17
 800f492:	e199      	b.n	800f7c8 <f_open+0x38c>
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f498:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f49a:	68ba      	ldr	r2, [r7, #8]
 800f49c:	f107 0314 	add.w	r3, r7, #20
 800f4a0:	4611      	mov	r1, r2
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7ff fbf6 	bl	800ec94 <follow_path>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f4ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d118      	bne.n	800f4e8 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f4b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f4ba:	b25b      	sxtb	r3, r3
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	da03      	bge.n	800f4c8 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800f4c0:	2306      	movs	r3, #6
 800f4c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f4c6:	e00f      	b.n	800f4e8 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f4c8:	79fb      	ldrb	r3, [r7, #7]
 800f4ca:	2b01      	cmp	r3, #1
 800f4cc:	bf8c      	ite	hi
 800f4ce:	2301      	movhi	r3, #1
 800f4d0:	2300      	movls	r3, #0
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	f107 0314 	add.w	r3, r7, #20
 800f4da:	4611      	mov	r1, r2
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7fd ffed 	bl	800d4bc <chk_lock>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f4e8:	79fb      	ldrb	r3, [r7, #7]
 800f4ea:	f003 031c 	and.w	r3, r3, #28
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d07f      	beq.n	800f5f2 <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 800f4f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d017      	beq.n	800f52a <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f4fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f4fe:	2b04      	cmp	r3, #4
 800f500:	d10e      	bne.n	800f520 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f502:	f7fe f837 	bl	800d574 <enq_lock>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d006      	beq.n	800f51a <f_open+0xde>
 800f50c:	f107 0314 	add.w	r3, r7, #20
 800f510:	4618      	mov	r0, r3
 800f512:	f7ff f90f 	bl	800e734 <dir_register>
 800f516:	4603      	mov	r3, r0
 800f518:	e000      	b.n	800f51c <f_open+0xe0>
 800f51a:	2312      	movs	r3, #18
 800f51c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f520:	79fb      	ldrb	r3, [r7, #7]
 800f522:	f043 0308 	orr.w	r3, r3, #8
 800f526:	71fb      	strb	r3, [r7, #7]
 800f528:	e010      	b.n	800f54c <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f52a:	7ebb      	ldrb	r3, [r7, #26]
 800f52c:	f003 0311 	and.w	r3, r3, #17
 800f530:	2b00      	cmp	r3, #0
 800f532:	d003      	beq.n	800f53c <f_open+0x100>
					res = FR_DENIED;
 800f534:	2307      	movs	r3, #7
 800f536:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f53a:	e007      	b.n	800f54c <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f53c:	79fb      	ldrb	r3, [r7, #7]
 800f53e:	f003 0304 	and.w	r3, r3, #4
 800f542:	2b00      	cmp	r3, #0
 800f544:	d002      	beq.n	800f54c <f_open+0x110>
 800f546:	2308      	movs	r3, #8
 800f548:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f54c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f550:	2b00      	cmp	r3, #0
 800f552:	d168      	bne.n	800f626 <f_open+0x1ea>
 800f554:	79fb      	ldrb	r3, [r7, #7]
 800f556:	f003 0308 	and.w	r3, r3, #8
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d063      	beq.n	800f626 <f_open+0x1ea>
				dw = GET_FATTIME();
 800f55e:	f7fd fea5 	bl	800d2ac <get_fattime>
 800f562:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f566:	330e      	adds	r3, #14
 800f568:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7fd fefc 	bl	800d368 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f572:	3316      	adds	r3, #22
 800f574:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f576:	4618      	mov	r0, r3
 800f578:	f7fd fef6 	bl	800d368 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f57e:	330b      	adds	r3, #11
 800f580:	2220      	movs	r2, #32
 800f582:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f584:	693b      	ldr	r3, [r7, #16]
 800f586:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f588:	4611      	mov	r1, r2
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fe fe4a 	bl	800e224 <ld_clust>
 800f590:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f596:	2200      	movs	r2, #0
 800f598:	4618      	mov	r0, r3
 800f59a:	f7fe fe62 	bl	800e262 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f59e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5a0:	331c      	adds	r3, #28
 800f5a2:	2100      	movs	r1, #0
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7fd fedf 	bl	800d368 <st_dword>
					fs->wflag = 1;
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f5b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d037      	beq.n	800f626 <f_open+0x1ea>
						dw = fs->winsect;
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5ba:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800f5bc:	f107 0314 	add.w	r3, r7, #20
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7fe fb75 	bl	800dcb4 <remove_chain>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800f5d0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d126      	bne.n	800f626 <f_open+0x1ea>
							res = move_window(fs, dw);
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7fe f91d 	bl	800d81c <move_window>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f5ec:	3a01      	subs	r2, #1
 800f5ee:	611a      	str	r2, [r3, #16]
 800f5f0:	e019      	b.n	800f626 <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f5f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d115      	bne.n	800f626 <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f5fa:	7ebb      	ldrb	r3, [r7, #26]
 800f5fc:	f003 0310 	and.w	r3, r3, #16
 800f600:	2b00      	cmp	r3, #0
 800f602:	d003      	beq.n	800f60c <f_open+0x1d0>
					res = FR_NO_FILE;
 800f604:	2304      	movs	r3, #4
 800f606:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f60a:	e00c      	b.n	800f626 <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f60c:	79fb      	ldrb	r3, [r7, #7]
 800f60e:	f003 0302 	and.w	r3, r3, #2
 800f612:	2b00      	cmp	r3, #0
 800f614:	d007      	beq.n	800f626 <f_open+0x1ea>
 800f616:	7ebb      	ldrb	r3, [r7, #26]
 800f618:	f003 0301 	and.w	r3, r3, #1
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d002      	beq.n	800f626 <f_open+0x1ea>
						res = FR_DENIED;
 800f620:	2307      	movs	r3, #7
 800f622:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f626:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d126      	bne.n	800f67c <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f62e:	79fb      	ldrb	r3, [r7, #7]
 800f630:	f003 0308 	and.w	r3, r3, #8
 800f634:	2b00      	cmp	r3, #0
 800f636:	d003      	beq.n	800f640 <f_open+0x204>
				mode |= FA_MODIFIED;
 800f638:	79fb      	ldrb	r3, [r7, #7]
 800f63a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f63e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800f648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f64e:	79fb      	ldrb	r3, [r7, #7]
 800f650:	2b01      	cmp	r3, #1
 800f652:	bf8c      	ite	hi
 800f654:	2301      	movhi	r3, #1
 800f656:	2300      	movls	r3, #0
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	461a      	mov	r2, r3
 800f65c:	f107 0314 	add.w	r3, r7, #20
 800f660:	4611      	mov	r1, r2
 800f662:	4618      	mov	r0, r3
 800f664:	f7fd ffa8 	bl	800d5b8 <inc_lock>
 800f668:	4602      	mov	r2, r0
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	691b      	ldr	r3, [r3, #16]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d102      	bne.n	800f67c <f_open+0x240>
 800f676:	2302      	movs	r3, #2
 800f678:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f67c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f680:	2b00      	cmp	r3, #0
 800f682:	f040 8095 	bne.w	800f7b0 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f686:	693b      	ldr	r3, [r7, #16]
 800f688:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f68a:	4611      	mov	r1, r2
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7fe fdc9 	bl	800e224 <ld_clust>
 800f692:	4602      	mov	r2, r0
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f69a:	331c      	adds	r3, #28
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7fd fe25 	bl	800d2ec <ld_dword>
 800f6a2:	4602      	mov	r2, r0
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f6ae:	693a      	ldr	r2, [r7, #16]
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	88da      	ldrh	r2, [r3, #6]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	79fa      	ldrb	r2, [r7, #7]
 800f6c0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	3330      	adds	r3, #48	@ 0x30
 800f6d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f6dc:	2100      	movs	r1, #0
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fd fe8f 	bl	800d402 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f6e4:	79fb      	ldrb	r3, [r7, #7]
 800f6e6:	f003 0320 	and.w	r3, r3, #32
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d060      	beq.n	800f7b0 <f_open+0x374>
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d05c      	beq.n	800f7b0 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	68da      	ldr	r2, [r3, #12]
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	895b      	ldrh	r3, [r3, #10]
 800f702:	025b      	lsls	r3, r3, #9
 800f704:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	689b      	ldr	r3, [r3, #8]
 800f70a:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	68db      	ldr	r3, [r3, #12]
 800f710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f712:	e016      	b.n	800f742 <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f718:	4618      	mov	r0, r3
 800f71a:	f7fe f93a 	bl	800d992 <get_fat>
 800f71e:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f720:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f722:	2b01      	cmp	r3, #1
 800f724:	d802      	bhi.n	800f72c <f_open+0x2f0>
 800f726:	2302      	movs	r3, #2
 800f728:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f72c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f732:	d102      	bne.n	800f73a <f_open+0x2fe>
 800f734:	2301      	movs	r3, #1
 800f736:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f73a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f73c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f73e:	1ad3      	subs	r3, r2, r3
 800f740:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f742:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f746:	2b00      	cmp	r3, #0
 800f748:	d103      	bne.n	800f752 <f_open+0x316>
 800f74a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f74c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f74e:	429a      	cmp	r2, r3
 800f750:	d8e0      	bhi.n	800f714 <f_open+0x2d8>
				}
				fp->clust = clst;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f756:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f758:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d127      	bne.n	800f7b0 <f_open+0x374>
 800f760:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f766:	2b00      	cmp	r3, #0
 800f768:	d022      	beq.n	800f7b0 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fe f8f0 	bl	800d954 <clust2sect>
 800f774:	64b8      	str	r0, [r7, #72]	@ 0x48
 800f776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d103      	bne.n	800f784 <f_open+0x348>
						res = FR_INT_ERR;
 800f77c:	2302      	movs	r3, #2
 800f77e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f782:	e015      	b.n	800f7b0 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f784:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f786:	0a5a      	lsrs	r2, r3, #9
 800f788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f78a:	441a      	add	r2, r3
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	7858      	ldrb	r0, [r3, #1]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	6a1a      	ldr	r2, [r3, #32]
 800f79e:	2301      	movs	r3, #1
 800f7a0:	f7fd fd26 	bl	800d1f0 <disk_read>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d002      	beq.n	800f7b0 <f_open+0x374>
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800f7b0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f7b2:	f000 fc64 	bl	801007e <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f7b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d002      	beq.n	800f7c4 <f_open+0x388>
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f7c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3768      	adds	r7, #104	@ 0x68
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b08e      	sub	sp, #56	@ 0x38
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]
 800f7dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f107 0214 	add.w	r2, r7, #20
 800f7ee:	4611      	mov	r1, r2
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7ff fda7 	bl	800f344 <validate>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f7fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f800:	2b00      	cmp	r3, #0
 800f802:	d107      	bne.n	800f814 <f_read+0x44>
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	7d5b      	ldrb	r3, [r3, #21]
 800f808:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f80c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f810:	2b00      	cmp	r3, #0
 800f812:	d002      	beq.n	800f81a <f_read+0x4a>
 800f814:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f818:	e115      	b.n	800fa46 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	7d1b      	ldrb	r3, [r3, #20]
 800f81e:	f003 0301 	and.w	r3, r3, #1
 800f822:	2b00      	cmp	r3, #0
 800f824:	d101      	bne.n	800f82a <f_read+0x5a>
 800f826:	2307      	movs	r3, #7
 800f828:	e10d      	b.n	800fa46 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	68da      	ldr	r2, [r3, #12]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	699b      	ldr	r3, [r3, #24]
 800f832:	1ad3      	subs	r3, r2, r3
 800f834:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f836:	687a      	ldr	r2, [r7, #4]
 800f838:	6a3b      	ldr	r3, [r7, #32]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	f240 80fe 	bls.w	800fa3c <f_read+0x26c>
 800f840:	6a3b      	ldr	r3, [r7, #32]
 800f842:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f844:	e0fa      	b.n	800fa3c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	699b      	ldr	r3, [r3, #24]
 800f84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f84e:	2b00      	cmp	r3, #0
 800f850:	f040 80c6 	bne.w	800f9e0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	699b      	ldr	r3, [r3, #24]
 800f858:	0a5b      	lsrs	r3, r3, #9
 800f85a:	697a      	ldr	r2, [r7, #20]
 800f85c:	8952      	ldrh	r2, [r2, #10]
 800f85e:	3a01      	subs	r2, #1
 800f860:	4013      	ands	r3, r2
 800f862:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d12f      	bne.n	800f8ca <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	699b      	ldr	r3, [r3, #24]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d103      	bne.n	800f87a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	689b      	ldr	r3, [r3, #8]
 800f876:	633b      	str	r3, [r7, #48]	@ 0x30
 800f878:	e013      	b.n	800f8a2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d007      	beq.n	800f892 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	699b      	ldr	r3, [r3, #24]
 800f886:	4619      	mov	r1, r3
 800f888:	68f8      	ldr	r0, [r7, #12]
 800f88a:	f7fe fb10 	bl	800deae <clmt_clust>
 800f88e:	6338      	str	r0, [r7, #48]	@ 0x30
 800f890:	e007      	b.n	800f8a2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f892:	68fa      	ldr	r2, [r7, #12]
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	69db      	ldr	r3, [r3, #28]
 800f898:	4619      	mov	r1, r3
 800f89a:	4610      	mov	r0, r2
 800f89c:	f7fe f879 	bl	800d992 <get_fat>
 800f8a0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8a4:	2b01      	cmp	r3, #1
 800f8a6:	d804      	bhi.n	800f8b2 <f_read+0xe2>
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	2202      	movs	r2, #2
 800f8ac:	755a      	strb	r2, [r3, #21]
 800f8ae:	2302      	movs	r3, #2
 800f8b0:	e0c9      	b.n	800fa46 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f8b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8b8:	d104      	bne.n	800f8c4 <f_read+0xf4>
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2201      	movs	r2, #1
 800f8be:	755a      	strb	r2, [r3, #21]
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	e0c0      	b.n	800fa46 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8c8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f8ca:	697a      	ldr	r2, [r7, #20]
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	69db      	ldr	r3, [r3, #28]
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	4610      	mov	r0, r2
 800f8d4:	f7fe f83e 	bl	800d954 <clust2sect>
 800f8d8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d104      	bne.n	800f8ea <f_read+0x11a>
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	2202      	movs	r2, #2
 800f8e4:	755a      	strb	r2, [r3, #21]
 800f8e6:	2302      	movs	r3, #2
 800f8e8:	e0ad      	b.n	800fa46 <f_read+0x276>
			sect += csect;
 800f8ea:	69ba      	ldr	r2, [r7, #24]
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	0a5b      	lsrs	r3, r3, #9
 800f8f6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d039      	beq.n	800f972 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f8fe:	69fa      	ldr	r2, [r7, #28]
 800f900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f902:	4413      	add	r3, r2
 800f904:	697a      	ldr	r2, [r7, #20]
 800f906:	8952      	ldrh	r2, [r2, #10]
 800f908:	4293      	cmp	r3, r2
 800f90a:	d905      	bls.n	800f918 <f_read+0x148>
					cc = fs->csize - csect;
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	895b      	ldrh	r3, [r3, #10]
 800f910:	461a      	mov	r2, r3
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	1ad3      	subs	r3, r2, r3
 800f916:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	7858      	ldrb	r0, [r3, #1]
 800f91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f91e:	69ba      	ldr	r2, [r7, #24]
 800f920:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f922:	f7fd fc65 	bl	800d1f0 <disk_read>
 800f926:	4603      	mov	r3, r0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d004      	beq.n	800f936 <f_read+0x166>
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2201      	movs	r2, #1
 800f930:	755a      	strb	r2, [r3, #21]
 800f932:	2301      	movs	r3, #1
 800f934:	e087      	b.n	800fa46 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	7d1b      	ldrb	r3, [r3, #20]
 800f93a:	b25b      	sxtb	r3, r3
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	da14      	bge.n	800f96a <f_read+0x19a>
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	6a1a      	ldr	r2, [r3, #32]
 800f944:	69bb      	ldr	r3, [r7, #24]
 800f946:	1ad3      	subs	r3, r2, r3
 800f948:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f94a:	429a      	cmp	r2, r3
 800f94c:	d90d      	bls.n	800f96a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6a1a      	ldr	r2, [r3, #32]
 800f952:	69bb      	ldr	r3, [r7, #24]
 800f954:	1ad3      	subs	r3, r2, r3
 800f956:	025b      	lsls	r3, r3, #9
 800f958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f95a:	18d0      	adds	r0, r2, r3
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	3330      	adds	r3, #48	@ 0x30
 800f960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f964:	4619      	mov	r1, r3
 800f966:	f7fd fd2b 	bl	800d3c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f96c:	025b      	lsls	r3, r3, #9
 800f96e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800f970:	e050      	b.n	800fa14 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	6a1b      	ldr	r3, [r3, #32]
 800f976:	69ba      	ldr	r2, [r7, #24]
 800f978:	429a      	cmp	r2, r3
 800f97a:	d02e      	beq.n	800f9da <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	7d1b      	ldrb	r3, [r3, #20]
 800f980:	b25b      	sxtb	r3, r3
 800f982:	2b00      	cmp	r3, #0
 800f984:	da18      	bge.n	800f9b8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	7858      	ldrb	r0, [r3, #1]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	6a1a      	ldr	r2, [r3, #32]
 800f994:	2301      	movs	r3, #1
 800f996:	f7fd fc4b 	bl	800d230 <disk_write>
 800f99a:	4603      	mov	r3, r0
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d004      	beq.n	800f9aa <f_read+0x1da>
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	755a      	strb	r2, [r3, #21]
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e04d      	b.n	800fa46 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	7d1b      	ldrb	r3, [r3, #20]
 800f9ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f9b2:	b2da      	uxtb	r2, r3
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	7858      	ldrb	r0, [r3, #1]
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	69ba      	ldr	r2, [r7, #24]
 800f9c6:	f7fd fc13 	bl	800d1f0 <disk_read>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d004      	beq.n	800f9da <f_read+0x20a>
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	755a      	strb	r2, [r3, #21]
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	e035      	b.n	800fa46 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	69ba      	ldr	r2, [r7, #24]
 800f9de:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	699b      	ldr	r3, [r3, #24]
 800f9e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9e8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f9ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f9ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d901      	bls.n	800f9fa <f_read+0x22a>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	699b      	ldr	r3, [r3, #24]
 800fa04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa08:	4413      	add	r3, r2
 800fa0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fa10:	f7fd fcd6 	bl	800d3c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fa14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa18:	4413      	add	r3, r2
 800fa1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	699a      	ldr	r2, [r3, #24]
 800fa20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa22:	441a      	add	r2, r3
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	619a      	str	r2, [r3, #24]
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa2e:	441a      	add	r2, r3
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	601a      	str	r2, [r3, #0]
 800fa34:	687a      	ldr	r2, [r7, #4]
 800fa36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa38:	1ad3      	subs	r3, r2, r3
 800fa3a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f47f af01 	bne.w	800f846 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fa44:	2300      	movs	r3, #0
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3738      	adds	r7, #56	@ 0x38
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}

0800fa4e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fa4e:	b580      	push	{r7, lr}
 800fa50:	b086      	sub	sp, #24
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f107 0208 	add.w	r2, r7, #8
 800fa5c:	4611      	mov	r1, r2
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7ff fc70 	bl	800f344 <validate>
 800fa64:	4603      	mov	r3, r0
 800fa66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fa68:	7dfb      	ldrb	r3, [r7, #23]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d168      	bne.n	800fb40 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	7d1b      	ldrb	r3, [r3, #20]
 800fa72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d062      	beq.n	800fb40 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	7d1b      	ldrb	r3, [r3, #20]
 800fa7e:	b25b      	sxtb	r3, r3
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	da15      	bge.n	800fab0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	7858      	ldrb	r0, [r3, #1]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6a1a      	ldr	r2, [r3, #32]
 800fa92:	2301      	movs	r3, #1
 800fa94:	f7fd fbcc 	bl	800d230 <disk_write>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d001      	beq.n	800faa2 <f_sync+0x54>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	e04f      	b.n	800fb42 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	7d1b      	ldrb	r3, [r3, #20]
 800faa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800faaa:	b2da      	uxtb	r2, r3
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fab0:	f7fd fbfc 	bl	800d2ac <get_fattime>
 800fab4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fab6:	68ba      	ldr	r2, [r7, #8]
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fabc:	4619      	mov	r1, r3
 800fabe:	4610      	mov	r0, r2
 800fac0:	f7fd feac 	bl	800d81c <move_window>
 800fac4:	4603      	mov	r3, r0
 800fac6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fac8:	7dfb      	ldrb	r3, [r7, #23]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d138      	bne.n	800fb40 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fad2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	330b      	adds	r3, #11
 800fad8:	781a      	ldrb	r2, [r3, #0]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	330b      	adds	r3, #11
 800fade:	f042 0220 	orr.w	r2, r2, #32
 800fae2:	b2d2      	uxtb	r2, r2
 800fae4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6818      	ldr	r0, [r3, #0]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	689b      	ldr	r3, [r3, #8]
 800faee:	461a      	mov	r2, r3
 800faf0:	68f9      	ldr	r1, [r7, #12]
 800faf2:	f7fe fbb6 	bl	800e262 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	f103 021c 	add.w	r2, r3, #28
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	4619      	mov	r1, r3
 800fb02:	4610      	mov	r0, r2
 800fb04:	f7fd fc30 	bl	800d368 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	3316      	adds	r3, #22
 800fb0c:	6939      	ldr	r1, [r7, #16]
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7fd fc2a 	bl	800d368 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	3312      	adds	r3, #18
 800fb18:	2100      	movs	r1, #0
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fd fc09 	bl	800d332 <st_word>
					fs->wflag = 1;
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	2201      	movs	r2, #1
 800fb24:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fd fea5 	bl	800d878 <sync_fs>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	7d1b      	ldrb	r3, [r3, #20]
 800fb36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb3a:	b2da      	uxtb	r2, r3
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fb40:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3718      	adds	r7, #24
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}

0800fb4a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fb4a:	b580      	push	{r7, lr}
 800fb4c:	b084      	sub	sp, #16
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f7ff ff7b 	bl	800fa4e <f_sync>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fb5c:	7bfb      	ldrb	r3, [r7, #15]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d118      	bne.n	800fb94 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f107 0208 	add.w	r2, r7, #8
 800fb68:	4611      	mov	r1, r2
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7ff fbea 	bl	800f344 <validate>
 800fb70:	4603      	mov	r3, r0
 800fb72:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fb74:	7bfb      	ldrb	r3, [r7, #15]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d10c      	bne.n	800fb94 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	691b      	ldr	r3, [r3, #16]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fd fda8 	bl	800d6d4 <dec_lock>
 800fb84:	4603      	mov	r3, r0
 800fb86:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fb88:	7bfb      	ldrb	r3, [r7, #15]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d102      	bne.n	800fb94 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2200      	movs	r2, #0
 800fb92:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fb94:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3710      	adds	r7, #16
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}

0800fb9e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fb9e:	b580      	push	{r7, lr}
 800fba0:	b090      	sub	sp, #64	@ 0x40
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	6078      	str	r0, [r7, #4]
 800fba6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f107 0208 	add.w	r2, r7, #8
 800fbae:	4611      	mov	r1, r2
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7ff fbc7 	bl	800f344 <validate>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fbbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d103      	bne.n	800fbcc <f_lseek+0x2e>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	7d5b      	ldrb	r3, [r3, #21]
 800fbc8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fbcc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d002      	beq.n	800fbda <f_lseek+0x3c>
 800fbd4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fbd8:	e1e6      	b.n	800ffa8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	f000 80d1 	beq.w	800fd86 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbea:	d15a      	bne.n	800fca2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbf0:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf4:	1d1a      	adds	r2, r3, #4
 800fbf6:	627a      	str	r2, [r7, #36]	@ 0x24
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	617b      	str	r3, [r7, #20]
 800fbfc:	2302      	movs	r3, #2
 800fbfe:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	689b      	ldr	r3, [r3, #8]
 800fc04:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800fc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d03a      	beq.n	800fc82 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fc0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc0e:	613b      	str	r3, [r7, #16]
 800fc10:	2300      	movs	r3, #0
 800fc12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fc14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc16:	3302      	adds	r3, #2
 800fc18:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800fc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc1c:	60fb      	str	r3, [r7, #12]
 800fc1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc20:	3301      	adds	r3, #1
 800fc22:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7fd feb2 	bl	800d992 <get_fat>
 800fc2e:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d804      	bhi.n	800fc40 <f_lseek+0xa2>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2202      	movs	r2, #2
 800fc3a:	755a      	strb	r2, [r3, #21]
 800fc3c:	2302      	movs	r3, #2
 800fc3e:	e1b3      	b.n	800ffa8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fc40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc46:	d104      	bne.n	800fc52 <f_lseek+0xb4>
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	755a      	strb	r2, [r3, #21]
 800fc4e:	2301      	movs	r3, #1
 800fc50:	e1aa      	b.n	800ffa8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	3301      	adds	r3, #1
 800fc56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d0de      	beq.n	800fc1a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fc5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d809      	bhi.n	800fc78 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800fc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc66:	1d1a      	adds	r2, r3, #4
 800fc68:	627a      	str	r2, [r7, #36]	@ 0x24
 800fc6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc6c:	601a      	str	r2, [r3, #0]
 800fc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc70:	1d1a      	adds	r2, r3, #4
 800fc72:	627a      	str	r2, [r7, #36]	@ 0x24
 800fc74:	693a      	ldr	r2, [r7, #16]
 800fc76:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	699b      	ldr	r3, [r3, #24]
 800fc7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d3c4      	bcc.n	800fc0c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc88:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800fc8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d803      	bhi.n	800fc9a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800fc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc94:	2200      	movs	r2, #0
 800fc96:	601a      	str	r2, [r3, #0]
 800fc98:	e184      	b.n	800ffa4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800fc9a:	2311      	movs	r3, #17
 800fc9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800fca0:	e180      	b.n	800ffa4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	68db      	ldr	r3, [r3, #12]
 800fca6:	683a      	ldr	r2, [r7, #0]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d902      	bls.n	800fcb2 <f_lseek+0x114>
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	68db      	ldr	r3, [r3, #12]
 800fcb0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	683a      	ldr	r2, [r7, #0]
 800fcb6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	f000 8172 	beq.w	800ffa4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	3b01      	subs	r3, #1
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f7fe f8f1 	bl	800deae <clmt_clust>
 800fccc:	4602      	mov	r2, r0
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800fcd2:	68ba      	ldr	r2, [r7, #8]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	69db      	ldr	r3, [r3, #28]
 800fcd8:	4619      	mov	r1, r3
 800fcda:	4610      	mov	r0, r2
 800fcdc:	f7fd fe3a 	bl	800d954 <clust2sect>
 800fce0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fce2:	69bb      	ldr	r3, [r7, #24]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d104      	bne.n	800fcf2 <f_lseek+0x154>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2202      	movs	r2, #2
 800fcec:	755a      	strb	r2, [r3, #21]
 800fcee:	2302      	movs	r3, #2
 800fcf0:	e15a      	b.n	800ffa8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	3b01      	subs	r3, #1
 800fcf6:	0a5b      	lsrs	r3, r3, #9
 800fcf8:	68ba      	ldr	r2, [r7, #8]
 800fcfa:	8952      	ldrh	r2, [r2, #10]
 800fcfc:	3a01      	subs	r2, #1
 800fcfe:	4013      	ands	r3, r2
 800fd00:	69ba      	ldr	r2, [r7, #24]
 800fd02:	4413      	add	r3, r2
 800fd04:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	699b      	ldr	r3, [r3, #24]
 800fd0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	f000 8148 	beq.w	800ffa4 <f_lseek+0x406>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6a1b      	ldr	r3, [r3, #32]
 800fd18:	69ba      	ldr	r2, [r7, #24]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	f000 8142 	beq.w	800ffa4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	7d1b      	ldrb	r3, [r3, #20]
 800fd24:	b25b      	sxtb	r3, r3
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	da18      	bge.n	800fd5c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	7858      	ldrb	r0, [r3, #1]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6a1a      	ldr	r2, [r3, #32]
 800fd38:	2301      	movs	r3, #1
 800fd3a:	f7fd fa79 	bl	800d230 <disk_write>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d004      	beq.n	800fd4e <f_lseek+0x1b0>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2201      	movs	r2, #1
 800fd48:	755a      	strb	r2, [r3, #21]
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	e12c      	b.n	800ffa8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	7d1b      	ldrb	r3, [r3, #20]
 800fd52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fd56:	b2da      	uxtb	r2, r3
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	7858      	ldrb	r0, [r3, #1]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fd66:	2301      	movs	r3, #1
 800fd68:	69ba      	ldr	r2, [r7, #24]
 800fd6a:	f7fd fa41 	bl	800d1f0 <disk_read>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d004      	beq.n	800fd7e <f_lseek+0x1e0>
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2201      	movs	r2, #1
 800fd78:	755a      	strb	r2, [r3, #21]
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	e114      	b.n	800ffa8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	69ba      	ldr	r2, [r7, #24]
 800fd82:	621a      	str	r2, [r3, #32]
 800fd84:	e10e      	b.n	800ffa4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	683a      	ldr	r2, [r7, #0]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d908      	bls.n	800fda2 <f_lseek+0x204>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	7d1b      	ldrb	r3, [r3, #20]
 800fd94:	f003 0302 	and.w	r3, r3, #2
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d102      	bne.n	800fda2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	699b      	ldr	r3, [r3, #24]
 800fda6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fdb0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	f000 80a7 	beq.w	800ff08 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	895b      	ldrh	r3, [r3, #10]
 800fdbe:	025b      	lsls	r3, r3, #9
 800fdc0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800fdc2:	6a3b      	ldr	r3, [r7, #32]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d01b      	beq.n	800fe00 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	1e5a      	subs	r2, r3, #1
 800fdcc:	69fb      	ldr	r3, [r7, #28]
 800fdce:	fbb2 f2f3 	udiv	r2, r2, r3
 800fdd2:	6a3b      	ldr	r3, [r7, #32]
 800fdd4:	1e59      	subs	r1, r3, #1
 800fdd6:	69fb      	ldr	r3, [r7, #28]
 800fdd8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d30f      	bcc.n	800fe00 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fde0:	6a3b      	ldr	r3, [r7, #32]
 800fde2:	1e5a      	subs	r2, r3, #1
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	425b      	negs	r3, r3
 800fde8:	401a      	ands	r2, r3
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	699b      	ldr	r3, [r3, #24]
 800fdf2:	683a      	ldr	r2, [r7, #0]
 800fdf4:	1ad3      	subs	r3, r2, r3
 800fdf6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	69db      	ldr	r3, [r3, #28]
 800fdfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fdfe:	e022      	b.n	800fe46 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	689b      	ldr	r3, [r3, #8]
 800fe04:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800fe06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d119      	bne.n	800fe40 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2100      	movs	r1, #0
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7fd ffb4 	bl	800dd7e <create_chain>
 800fe16:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fe18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe1a:	2b01      	cmp	r3, #1
 800fe1c:	d104      	bne.n	800fe28 <f_lseek+0x28a>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2202      	movs	r2, #2
 800fe22:	755a      	strb	r2, [r3, #21]
 800fe24:	2302      	movs	r3, #2
 800fe26:	e0bf      	b.n	800ffa8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe2e:	d104      	bne.n	800fe3a <f_lseek+0x29c>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2201      	movs	r2, #1
 800fe34:	755a      	strb	r2, [r3, #21]
 800fe36:	2301      	movs	r3, #1
 800fe38:	e0b6      	b.n	800ffa8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fe3e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fe44:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800fe46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d05d      	beq.n	800ff08 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800fe4c:	e03a      	b.n	800fec4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800fe4e:	683a      	ldr	r2, [r7, #0]
 800fe50:	69fb      	ldr	r3, [r7, #28]
 800fe52:	1ad3      	subs	r3, r2, r3
 800fe54:	603b      	str	r3, [r7, #0]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	699a      	ldr	r2, [r3, #24]
 800fe5a:	69fb      	ldr	r3, [r7, #28]
 800fe5c:	441a      	add	r2, r3
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	7d1b      	ldrb	r3, [r3, #20]
 800fe66:	f003 0302 	and.w	r3, r3, #2
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d00b      	beq.n	800fe86 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fd ff83 	bl	800dd7e <create_chain>
 800fe78:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800fe7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d108      	bne.n	800fe92 <f_lseek+0x2f4>
							ofs = 0; break;
 800fe80:	2300      	movs	r3, #0
 800fe82:	603b      	str	r3, [r7, #0]
 800fe84:	e022      	b.n	800fecc <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7fd fd81 	bl	800d992 <get_fat>
 800fe90:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe98:	d104      	bne.n	800fea4 <f_lseek+0x306>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	755a      	strb	r2, [r3, #21]
 800fea0:	2301      	movs	r3, #1
 800fea2:	e081      	b.n	800ffa8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800fea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d904      	bls.n	800feb4 <f_lseek+0x316>
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	699b      	ldr	r3, [r3, #24]
 800feae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d304      	bcc.n	800febe <f_lseek+0x320>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2202      	movs	r2, #2
 800feb8:	755a      	strb	r2, [r3, #21]
 800feba:	2302      	movs	r3, #2
 800febc:	e074      	b.n	800ffa8 <f_lseek+0x40a>
					fp->clust = clst;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fec2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800fec4:	683a      	ldr	r2, [r7, #0]
 800fec6:	69fb      	ldr	r3, [r7, #28]
 800fec8:	429a      	cmp	r2, r3
 800feca:	d8c0      	bhi.n	800fe4e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	699a      	ldr	r2, [r3, #24]
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	441a      	add	r2, r3
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d012      	beq.n	800ff08 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7fd fd34 	bl	800d954 <clust2sect>
 800feec:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800feee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d104      	bne.n	800fefe <f_lseek+0x360>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2202      	movs	r2, #2
 800fef8:	755a      	strb	r2, [r3, #21]
 800fefa:	2302      	movs	r3, #2
 800fefc:	e054      	b.n	800ffa8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	0a5b      	lsrs	r3, r3, #9
 800ff02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ff04:	4413      	add	r3, r2
 800ff06:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	699a      	ldr	r2, [r3, #24]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	68db      	ldr	r3, [r3, #12]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d90a      	bls.n	800ff2a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	699a      	ldr	r2, [r3, #24]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	7d1b      	ldrb	r3, [r3, #20]
 800ff20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff24:	b2da      	uxtb	r2, r3
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	699b      	ldr	r3, [r3, #24]
 800ff2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d036      	beq.n	800ffa4 <f_lseek+0x406>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6a1b      	ldr	r3, [r3, #32]
 800ff3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d031      	beq.n	800ffa4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	7d1b      	ldrb	r3, [r3, #20]
 800ff44:	b25b      	sxtb	r3, r3
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	da18      	bge.n	800ff7c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	7858      	ldrb	r0, [r3, #1]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6a1a      	ldr	r2, [r3, #32]
 800ff58:	2301      	movs	r3, #1
 800ff5a:	f7fd f969 	bl	800d230 <disk_write>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d004      	beq.n	800ff6e <f_lseek+0x3d0>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2201      	movs	r2, #1
 800ff68:	755a      	strb	r2, [r3, #21]
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	e01c      	b.n	800ffa8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	7d1b      	ldrb	r3, [r3, #20]
 800ff72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff76:	b2da      	uxtb	r2, r3
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	7858      	ldrb	r0, [r3, #1]
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ff86:	2301      	movs	r3, #1
 800ff88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ff8a:	f7fd f931 	bl	800d1f0 <disk_read>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d004      	beq.n	800ff9e <f_lseek+0x400>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2201      	movs	r2, #1
 800ff98:	755a      	strb	r2, [r3, #21]
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	e004      	b.n	800ffa8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ffa2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ffa4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3740      	adds	r7, #64	@ 0x40
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b087      	sub	sp, #28
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	60f8      	str	r0, [r7, #12]
 800ffb8:	60b9      	str	r1, [r7, #8]
 800ffba:	4613      	mov	r3, r2
 800ffbc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ffc6:	4b1f      	ldr	r3, [pc, #124]	@ (8010044 <FATFS_LinkDriverEx+0x94>)
 800ffc8:	7a5b      	ldrb	r3, [r3, #9]
 800ffca:	b2db      	uxtb	r3, r3
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d131      	bne.n	8010034 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ffd0:	4b1c      	ldr	r3, [pc, #112]	@ (8010044 <FATFS_LinkDriverEx+0x94>)
 800ffd2:	7a5b      	ldrb	r3, [r3, #9]
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	4b1a      	ldr	r3, [pc, #104]	@ (8010044 <FATFS_LinkDriverEx+0x94>)
 800ffda:	2100      	movs	r1, #0
 800ffdc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ffde:	4b19      	ldr	r3, [pc, #100]	@ (8010044 <FATFS_LinkDriverEx+0x94>)
 800ffe0:	7a5b      	ldrb	r3, [r3, #9]
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	4a17      	ldr	r2, [pc, #92]	@ (8010044 <FATFS_LinkDriverEx+0x94>)
 800ffe6:	009b      	lsls	r3, r3, #2
 800ffe8:	4413      	add	r3, r2
 800ffea:	68fa      	ldr	r2, [r7, #12]
 800ffec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ffee:	4b15      	ldr	r3, [pc, #84]	@ (8010044 <FATFS_LinkDriverEx+0x94>)
 800fff0:	7a5b      	ldrb	r3, [r3, #9]
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	461a      	mov	r2, r3
 800fff6:	4b13      	ldr	r3, [pc, #76]	@ (8010044 <FATFS_LinkDriverEx+0x94>)
 800fff8:	4413      	add	r3, r2
 800fffa:	79fa      	ldrb	r2, [r7, #7]
 800fffc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fffe:	4b11      	ldr	r3, [pc, #68]	@ (8010044 <FATFS_LinkDriverEx+0x94>)
 8010000:	7a5b      	ldrb	r3, [r3, #9]
 8010002:	b2db      	uxtb	r3, r3
 8010004:	1c5a      	adds	r2, r3, #1
 8010006:	b2d1      	uxtb	r1, r2
 8010008:	4a0e      	ldr	r2, [pc, #56]	@ (8010044 <FATFS_LinkDriverEx+0x94>)
 801000a:	7251      	strb	r1, [r2, #9]
 801000c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801000e:	7dbb      	ldrb	r3, [r7, #22]
 8010010:	3330      	adds	r3, #48	@ 0x30
 8010012:	b2da      	uxtb	r2, r3
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	3301      	adds	r3, #1
 801001c:	223a      	movs	r2, #58	@ 0x3a
 801001e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	3302      	adds	r3, #2
 8010024:	222f      	movs	r2, #47	@ 0x2f
 8010026:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	3303      	adds	r3, #3
 801002c:	2200      	movs	r2, #0
 801002e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010030:	2300      	movs	r3, #0
 8010032:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010034:	7dfb      	ldrb	r3, [r7, #23]
}
 8010036:	4618      	mov	r0, r3
 8010038:	371c      	adds	r7, #28
 801003a:	46bd      	mov	sp, r7
 801003c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010040:	4770      	bx	lr
 8010042:	bf00      	nop
 8010044:	200188a4 	.word	0x200188a4

08010048 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010052:	2200      	movs	r2, #0
 8010054:	6839      	ldr	r1, [r7, #0]
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f7ff ffaa 	bl	800ffb0 <FATFS_LinkDriverEx>
 801005c:	4603      	mov	r3, r0
}
 801005e:	4618      	mov	r0, r3
 8010060:	3708      	adds	r7, #8
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}

08010066 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8010066:	b580      	push	{r7, lr}
 8010068:	b082      	sub	sp, #8
 801006a:	af00      	add	r7, sp, #0
 801006c:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f000 f8d6 	bl	8010220 <malloc>
 8010074:	4603      	mov	r3, r0
}
 8010076:	4618      	mov	r0, r3
 8010078:	3708      	adds	r7, #8
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}

0801007e <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 801007e:	b580      	push	{r7, lr}
 8010080:	b082      	sub	sp, #8
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f000 f8d2 	bl	8010230 <free>
}
 801008c:	bf00      	nop
 801008e:	3708      	adds	r7, #8
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010094:	b480      	push	{r7}
 8010096:	b085      	sub	sp, #20
 8010098:	af00      	add	r7, sp, #0
 801009a:	4603      	mov	r3, r0
 801009c:	6039      	str	r1, [r7, #0]
 801009e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80100a0:	88fb      	ldrh	r3, [r7, #6]
 80100a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80100a4:	d802      	bhi.n	80100ac <ff_convert+0x18>
		c = chr;
 80100a6:	88fb      	ldrh	r3, [r7, #6]
 80100a8:	81fb      	strh	r3, [r7, #14]
 80100aa:	e025      	b.n	80100f8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d00b      	beq.n	80100ca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80100b2:	88fb      	ldrh	r3, [r7, #6]
 80100b4:	2bff      	cmp	r3, #255	@ 0xff
 80100b6:	d805      	bhi.n	80100c4 <ff_convert+0x30>
 80100b8:	88fb      	ldrh	r3, [r7, #6]
 80100ba:	3b80      	subs	r3, #128	@ 0x80
 80100bc:	4a12      	ldr	r2, [pc, #72]	@ (8010108 <ff_convert+0x74>)
 80100be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100c2:	e000      	b.n	80100c6 <ff_convert+0x32>
 80100c4:	2300      	movs	r3, #0
 80100c6:	81fb      	strh	r3, [r7, #14]
 80100c8:	e016      	b.n	80100f8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80100ca:	2300      	movs	r3, #0
 80100cc:	81fb      	strh	r3, [r7, #14]
 80100ce:	e009      	b.n	80100e4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80100d0:	89fb      	ldrh	r3, [r7, #14]
 80100d2:	4a0d      	ldr	r2, [pc, #52]	@ (8010108 <ff_convert+0x74>)
 80100d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100d8:	88fa      	ldrh	r2, [r7, #6]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d006      	beq.n	80100ec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80100de:	89fb      	ldrh	r3, [r7, #14]
 80100e0:	3301      	adds	r3, #1
 80100e2:	81fb      	strh	r3, [r7, #14]
 80100e4:	89fb      	ldrh	r3, [r7, #14]
 80100e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80100e8:	d9f2      	bls.n	80100d0 <ff_convert+0x3c>
 80100ea:	e000      	b.n	80100ee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80100ec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80100ee:	89fb      	ldrh	r3, [r7, #14]
 80100f0:	3380      	adds	r3, #128	@ 0x80
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	b2db      	uxtb	r3, r3
 80100f6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80100f8:	89fb      	ldrh	r3, [r7, #14]
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3714      	adds	r7, #20
 80100fe:	46bd      	mov	sp, r7
 8010100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop
 8010108:	08010f5c 	.word	0x08010f5c

0801010c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801010c:	b480      	push	{r7}
 801010e:	b087      	sub	sp, #28
 8010110:	af00      	add	r7, sp, #0
 8010112:	4603      	mov	r3, r0
 8010114:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010116:	88fb      	ldrh	r3, [r7, #6]
 8010118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801011c:	d201      	bcs.n	8010122 <ff_wtoupper+0x16>
 801011e:	4b3e      	ldr	r3, [pc, #248]	@ (8010218 <ff_wtoupper+0x10c>)
 8010120:	e000      	b.n	8010124 <ff_wtoupper+0x18>
 8010122:	4b3e      	ldr	r3, [pc, #248]	@ (801021c <ff_wtoupper+0x110>)
 8010124:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	1c9a      	adds	r2, r3, #2
 801012a:	617a      	str	r2, [r7, #20]
 801012c:	881b      	ldrh	r3, [r3, #0]
 801012e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010130:	8a7b      	ldrh	r3, [r7, #18]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d068      	beq.n	8010208 <ff_wtoupper+0xfc>
 8010136:	88fa      	ldrh	r2, [r7, #6]
 8010138:	8a7b      	ldrh	r3, [r7, #18]
 801013a:	429a      	cmp	r2, r3
 801013c:	d364      	bcc.n	8010208 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	1c9a      	adds	r2, r3, #2
 8010142:	617a      	str	r2, [r7, #20]
 8010144:	881b      	ldrh	r3, [r3, #0]
 8010146:	823b      	strh	r3, [r7, #16]
 8010148:	8a3b      	ldrh	r3, [r7, #16]
 801014a:	0a1b      	lsrs	r3, r3, #8
 801014c:	81fb      	strh	r3, [r7, #14]
 801014e:	8a3b      	ldrh	r3, [r7, #16]
 8010150:	b2db      	uxtb	r3, r3
 8010152:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010154:	88fa      	ldrh	r2, [r7, #6]
 8010156:	8a79      	ldrh	r1, [r7, #18]
 8010158:	8a3b      	ldrh	r3, [r7, #16]
 801015a:	440b      	add	r3, r1
 801015c:	429a      	cmp	r2, r3
 801015e:	da49      	bge.n	80101f4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010160:	89fb      	ldrh	r3, [r7, #14]
 8010162:	2b08      	cmp	r3, #8
 8010164:	d84f      	bhi.n	8010206 <ff_wtoupper+0xfa>
 8010166:	a201      	add	r2, pc, #4	@ (adr r2, 801016c <ff_wtoupper+0x60>)
 8010168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801016c:	08010191 	.word	0x08010191
 8010170:	080101a3 	.word	0x080101a3
 8010174:	080101b9 	.word	0x080101b9
 8010178:	080101c1 	.word	0x080101c1
 801017c:	080101c9 	.word	0x080101c9
 8010180:	080101d1 	.word	0x080101d1
 8010184:	080101d9 	.word	0x080101d9
 8010188:	080101e1 	.word	0x080101e1
 801018c:	080101e9 	.word	0x080101e9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010190:	88fa      	ldrh	r2, [r7, #6]
 8010192:	8a7b      	ldrh	r3, [r7, #18]
 8010194:	1ad3      	subs	r3, r2, r3
 8010196:	005b      	lsls	r3, r3, #1
 8010198:	697a      	ldr	r2, [r7, #20]
 801019a:	4413      	add	r3, r2
 801019c:	881b      	ldrh	r3, [r3, #0]
 801019e:	80fb      	strh	r3, [r7, #6]
 80101a0:	e027      	b.n	80101f2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80101a2:	88fa      	ldrh	r2, [r7, #6]
 80101a4:	8a7b      	ldrh	r3, [r7, #18]
 80101a6:	1ad3      	subs	r3, r2, r3
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	f003 0301 	and.w	r3, r3, #1
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	88fa      	ldrh	r2, [r7, #6]
 80101b2:	1ad3      	subs	r3, r2, r3
 80101b4:	80fb      	strh	r3, [r7, #6]
 80101b6:	e01c      	b.n	80101f2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80101b8:	88fb      	ldrh	r3, [r7, #6]
 80101ba:	3b10      	subs	r3, #16
 80101bc:	80fb      	strh	r3, [r7, #6]
 80101be:	e018      	b.n	80101f2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80101c0:	88fb      	ldrh	r3, [r7, #6]
 80101c2:	3b20      	subs	r3, #32
 80101c4:	80fb      	strh	r3, [r7, #6]
 80101c6:	e014      	b.n	80101f2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80101c8:	88fb      	ldrh	r3, [r7, #6]
 80101ca:	3b30      	subs	r3, #48	@ 0x30
 80101cc:	80fb      	strh	r3, [r7, #6]
 80101ce:	e010      	b.n	80101f2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80101d0:	88fb      	ldrh	r3, [r7, #6]
 80101d2:	3b1a      	subs	r3, #26
 80101d4:	80fb      	strh	r3, [r7, #6]
 80101d6:	e00c      	b.n	80101f2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80101d8:	88fb      	ldrh	r3, [r7, #6]
 80101da:	3308      	adds	r3, #8
 80101dc:	80fb      	strh	r3, [r7, #6]
 80101de:	e008      	b.n	80101f2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80101e0:	88fb      	ldrh	r3, [r7, #6]
 80101e2:	3b50      	subs	r3, #80	@ 0x50
 80101e4:	80fb      	strh	r3, [r7, #6]
 80101e6:	e004      	b.n	80101f2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80101e8:	88fb      	ldrh	r3, [r7, #6]
 80101ea:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80101ee:	80fb      	strh	r3, [r7, #6]
 80101f0:	bf00      	nop
			}
			break;
 80101f2:	e008      	b.n	8010206 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80101f4:	89fb      	ldrh	r3, [r7, #14]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d195      	bne.n	8010126 <ff_wtoupper+0x1a>
 80101fa:	8a3b      	ldrh	r3, [r7, #16]
 80101fc:	005b      	lsls	r3, r3, #1
 80101fe:	697a      	ldr	r2, [r7, #20]
 8010200:	4413      	add	r3, r2
 8010202:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010204:	e78f      	b.n	8010126 <ff_wtoupper+0x1a>
			break;
 8010206:	bf00      	nop
	}

	return chr;
 8010208:	88fb      	ldrh	r3, [r7, #6]
}
 801020a:	4618      	mov	r0, r3
 801020c:	371c      	adds	r7, #28
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr
 8010216:	bf00      	nop
 8010218:	0801105c 	.word	0x0801105c
 801021c:	08011250 	.word	0x08011250

08010220 <malloc>:
 8010220:	4b02      	ldr	r3, [pc, #8]	@ (801022c <malloc+0xc>)
 8010222:	4601      	mov	r1, r0
 8010224:	6818      	ldr	r0, [r3, #0]
 8010226:	f000 b82d 	b.w	8010284 <_malloc_r>
 801022a:	bf00      	nop
 801022c:	20000010 	.word	0x20000010

08010230 <free>:
 8010230:	4b02      	ldr	r3, [pc, #8]	@ (801023c <free+0xc>)
 8010232:	4601      	mov	r1, r0
 8010234:	6818      	ldr	r0, [r3, #0]
 8010236:	f000 b929 	b.w	801048c <_free_r>
 801023a:	bf00      	nop
 801023c:	20000010 	.word	0x20000010

08010240 <sbrk_aligned>:
 8010240:	b570      	push	{r4, r5, r6, lr}
 8010242:	4e0f      	ldr	r6, [pc, #60]	@ (8010280 <sbrk_aligned+0x40>)
 8010244:	460c      	mov	r4, r1
 8010246:	6831      	ldr	r1, [r6, #0]
 8010248:	4605      	mov	r5, r0
 801024a:	b911      	cbnz	r1, 8010252 <sbrk_aligned+0x12>
 801024c:	f000 f8e2 	bl	8010414 <_sbrk_r>
 8010250:	6030      	str	r0, [r6, #0]
 8010252:	4621      	mov	r1, r4
 8010254:	4628      	mov	r0, r5
 8010256:	f000 f8dd 	bl	8010414 <_sbrk_r>
 801025a:	1c43      	adds	r3, r0, #1
 801025c:	d103      	bne.n	8010266 <sbrk_aligned+0x26>
 801025e:	f04f 34ff 	mov.w	r4, #4294967295
 8010262:	4620      	mov	r0, r4
 8010264:	bd70      	pop	{r4, r5, r6, pc}
 8010266:	1cc4      	adds	r4, r0, #3
 8010268:	f024 0403 	bic.w	r4, r4, #3
 801026c:	42a0      	cmp	r0, r4
 801026e:	d0f8      	beq.n	8010262 <sbrk_aligned+0x22>
 8010270:	1a21      	subs	r1, r4, r0
 8010272:	4628      	mov	r0, r5
 8010274:	f000 f8ce 	bl	8010414 <_sbrk_r>
 8010278:	3001      	adds	r0, #1
 801027a:	d1f2      	bne.n	8010262 <sbrk_aligned+0x22>
 801027c:	e7ef      	b.n	801025e <sbrk_aligned+0x1e>
 801027e:	bf00      	nop
 8010280:	200188b0 	.word	0x200188b0

08010284 <_malloc_r>:
 8010284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010288:	1ccd      	adds	r5, r1, #3
 801028a:	f025 0503 	bic.w	r5, r5, #3
 801028e:	3508      	adds	r5, #8
 8010290:	2d0c      	cmp	r5, #12
 8010292:	bf38      	it	cc
 8010294:	250c      	movcc	r5, #12
 8010296:	2d00      	cmp	r5, #0
 8010298:	4606      	mov	r6, r0
 801029a:	db01      	blt.n	80102a0 <_malloc_r+0x1c>
 801029c:	42a9      	cmp	r1, r5
 801029e:	d904      	bls.n	80102aa <_malloc_r+0x26>
 80102a0:	230c      	movs	r3, #12
 80102a2:	6033      	str	r3, [r6, #0]
 80102a4:	2000      	movs	r0, #0
 80102a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010380 <_malloc_r+0xfc>
 80102ae:	f000 f869 	bl	8010384 <__malloc_lock>
 80102b2:	f8d8 3000 	ldr.w	r3, [r8]
 80102b6:	461c      	mov	r4, r3
 80102b8:	bb44      	cbnz	r4, 801030c <_malloc_r+0x88>
 80102ba:	4629      	mov	r1, r5
 80102bc:	4630      	mov	r0, r6
 80102be:	f7ff ffbf 	bl	8010240 <sbrk_aligned>
 80102c2:	1c43      	adds	r3, r0, #1
 80102c4:	4604      	mov	r4, r0
 80102c6:	d158      	bne.n	801037a <_malloc_r+0xf6>
 80102c8:	f8d8 4000 	ldr.w	r4, [r8]
 80102cc:	4627      	mov	r7, r4
 80102ce:	2f00      	cmp	r7, #0
 80102d0:	d143      	bne.n	801035a <_malloc_r+0xd6>
 80102d2:	2c00      	cmp	r4, #0
 80102d4:	d04b      	beq.n	801036e <_malloc_r+0xea>
 80102d6:	6823      	ldr	r3, [r4, #0]
 80102d8:	4639      	mov	r1, r7
 80102da:	4630      	mov	r0, r6
 80102dc:	eb04 0903 	add.w	r9, r4, r3
 80102e0:	f000 f898 	bl	8010414 <_sbrk_r>
 80102e4:	4581      	cmp	r9, r0
 80102e6:	d142      	bne.n	801036e <_malloc_r+0xea>
 80102e8:	6821      	ldr	r1, [r4, #0]
 80102ea:	1a6d      	subs	r5, r5, r1
 80102ec:	4629      	mov	r1, r5
 80102ee:	4630      	mov	r0, r6
 80102f0:	f7ff ffa6 	bl	8010240 <sbrk_aligned>
 80102f4:	3001      	adds	r0, #1
 80102f6:	d03a      	beq.n	801036e <_malloc_r+0xea>
 80102f8:	6823      	ldr	r3, [r4, #0]
 80102fa:	442b      	add	r3, r5
 80102fc:	6023      	str	r3, [r4, #0]
 80102fe:	f8d8 3000 	ldr.w	r3, [r8]
 8010302:	685a      	ldr	r2, [r3, #4]
 8010304:	bb62      	cbnz	r2, 8010360 <_malloc_r+0xdc>
 8010306:	f8c8 7000 	str.w	r7, [r8]
 801030a:	e00f      	b.n	801032c <_malloc_r+0xa8>
 801030c:	6822      	ldr	r2, [r4, #0]
 801030e:	1b52      	subs	r2, r2, r5
 8010310:	d420      	bmi.n	8010354 <_malloc_r+0xd0>
 8010312:	2a0b      	cmp	r2, #11
 8010314:	d917      	bls.n	8010346 <_malloc_r+0xc2>
 8010316:	1961      	adds	r1, r4, r5
 8010318:	42a3      	cmp	r3, r4
 801031a:	6025      	str	r5, [r4, #0]
 801031c:	bf18      	it	ne
 801031e:	6059      	strne	r1, [r3, #4]
 8010320:	6863      	ldr	r3, [r4, #4]
 8010322:	bf08      	it	eq
 8010324:	f8c8 1000 	streq.w	r1, [r8]
 8010328:	5162      	str	r2, [r4, r5]
 801032a:	604b      	str	r3, [r1, #4]
 801032c:	4630      	mov	r0, r6
 801032e:	f000 f82f 	bl	8010390 <__malloc_unlock>
 8010332:	f104 000b 	add.w	r0, r4, #11
 8010336:	1d23      	adds	r3, r4, #4
 8010338:	f020 0007 	bic.w	r0, r0, #7
 801033c:	1ac2      	subs	r2, r0, r3
 801033e:	bf1c      	itt	ne
 8010340:	1a1b      	subne	r3, r3, r0
 8010342:	50a3      	strne	r3, [r4, r2]
 8010344:	e7af      	b.n	80102a6 <_malloc_r+0x22>
 8010346:	6862      	ldr	r2, [r4, #4]
 8010348:	42a3      	cmp	r3, r4
 801034a:	bf0c      	ite	eq
 801034c:	f8c8 2000 	streq.w	r2, [r8]
 8010350:	605a      	strne	r2, [r3, #4]
 8010352:	e7eb      	b.n	801032c <_malloc_r+0xa8>
 8010354:	4623      	mov	r3, r4
 8010356:	6864      	ldr	r4, [r4, #4]
 8010358:	e7ae      	b.n	80102b8 <_malloc_r+0x34>
 801035a:	463c      	mov	r4, r7
 801035c:	687f      	ldr	r7, [r7, #4]
 801035e:	e7b6      	b.n	80102ce <_malloc_r+0x4a>
 8010360:	461a      	mov	r2, r3
 8010362:	685b      	ldr	r3, [r3, #4]
 8010364:	42a3      	cmp	r3, r4
 8010366:	d1fb      	bne.n	8010360 <_malloc_r+0xdc>
 8010368:	2300      	movs	r3, #0
 801036a:	6053      	str	r3, [r2, #4]
 801036c:	e7de      	b.n	801032c <_malloc_r+0xa8>
 801036e:	230c      	movs	r3, #12
 8010370:	6033      	str	r3, [r6, #0]
 8010372:	4630      	mov	r0, r6
 8010374:	f000 f80c 	bl	8010390 <__malloc_unlock>
 8010378:	e794      	b.n	80102a4 <_malloc_r+0x20>
 801037a:	6005      	str	r5, [r0, #0]
 801037c:	e7d6      	b.n	801032c <_malloc_r+0xa8>
 801037e:	bf00      	nop
 8010380:	200188b4 	.word	0x200188b4

08010384 <__malloc_lock>:
 8010384:	4801      	ldr	r0, [pc, #4]	@ (801038c <__malloc_lock+0x8>)
 8010386:	f000 b87f 	b.w	8010488 <__retarget_lock_acquire_recursive>
 801038a:	bf00      	nop
 801038c:	200189f4 	.word	0x200189f4

08010390 <__malloc_unlock>:
 8010390:	4801      	ldr	r0, [pc, #4]	@ (8010398 <__malloc_unlock+0x8>)
 8010392:	f000 b87a 	b.w	801048a <__retarget_lock_release_recursive>
 8010396:	bf00      	nop
 8010398:	200189f4 	.word	0x200189f4

0801039c <sniprintf>:
 801039c:	b40c      	push	{r2, r3}
 801039e:	b530      	push	{r4, r5, lr}
 80103a0:	4b17      	ldr	r3, [pc, #92]	@ (8010400 <sniprintf+0x64>)
 80103a2:	1e0c      	subs	r4, r1, #0
 80103a4:	681d      	ldr	r5, [r3, #0]
 80103a6:	b09d      	sub	sp, #116	@ 0x74
 80103a8:	da08      	bge.n	80103bc <sniprintf+0x20>
 80103aa:	238b      	movs	r3, #139	@ 0x8b
 80103ac:	602b      	str	r3, [r5, #0]
 80103ae:	f04f 30ff 	mov.w	r0, #4294967295
 80103b2:	b01d      	add	sp, #116	@ 0x74
 80103b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80103b8:	b002      	add	sp, #8
 80103ba:	4770      	bx	lr
 80103bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80103c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80103c4:	bf14      	ite	ne
 80103c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80103ca:	4623      	moveq	r3, r4
 80103cc:	9304      	str	r3, [sp, #16]
 80103ce:	9307      	str	r3, [sp, #28]
 80103d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80103d4:	9002      	str	r0, [sp, #8]
 80103d6:	9006      	str	r0, [sp, #24]
 80103d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80103dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80103de:	ab21      	add	r3, sp, #132	@ 0x84
 80103e0:	a902      	add	r1, sp, #8
 80103e2:	4628      	mov	r0, r5
 80103e4:	9301      	str	r3, [sp, #4]
 80103e6:	f000 f8f7 	bl	80105d8 <_svfiprintf_r>
 80103ea:	1c43      	adds	r3, r0, #1
 80103ec:	bfbc      	itt	lt
 80103ee:	238b      	movlt	r3, #139	@ 0x8b
 80103f0:	602b      	strlt	r3, [r5, #0]
 80103f2:	2c00      	cmp	r4, #0
 80103f4:	d0dd      	beq.n	80103b2 <sniprintf+0x16>
 80103f6:	9b02      	ldr	r3, [sp, #8]
 80103f8:	2200      	movs	r2, #0
 80103fa:	701a      	strb	r2, [r3, #0]
 80103fc:	e7d9      	b.n	80103b2 <sniprintf+0x16>
 80103fe:	bf00      	nop
 8010400:	20000010 	.word	0x20000010

08010404 <memset>:
 8010404:	4402      	add	r2, r0
 8010406:	4603      	mov	r3, r0
 8010408:	4293      	cmp	r3, r2
 801040a:	d100      	bne.n	801040e <memset+0xa>
 801040c:	4770      	bx	lr
 801040e:	f803 1b01 	strb.w	r1, [r3], #1
 8010412:	e7f9      	b.n	8010408 <memset+0x4>

08010414 <_sbrk_r>:
 8010414:	b538      	push	{r3, r4, r5, lr}
 8010416:	4d06      	ldr	r5, [pc, #24]	@ (8010430 <_sbrk_r+0x1c>)
 8010418:	2300      	movs	r3, #0
 801041a:	4604      	mov	r4, r0
 801041c:	4608      	mov	r0, r1
 801041e:	602b      	str	r3, [r5, #0]
 8010420:	f7fc fe3a 	bl	800d098 <_sbrk>
 8010424:	1c43      	adds	r3, r0, #1
 8010426:	d102      	bne.n	801042e <_sbrk_r+0x1a>
 8010428:	682b      	ldr	r3, [r5, #0]
 801042a:	b103      	cbz	r3, 801042e <_sbrk_r+0x1a>
 801042c:	6023      	str	r3, [r4, #0]
 801042e:	bd38      	pop	{r3, r4, r5, pc}
 8010430:	200189f0 	.word	0x200189f0

08010434 <__errno>:
 8010434:	4b01      	ldr	r3, [pc, #4]	@ (801043c <__errno+0x8>)
 8010436:	6818      	ldr	r0, [r3, #0]
 8010438:	4770      	bx	lr
 801043a:	bf00      	nop
 801043c:	20000010 	.word	0x20000010

08010440 <__libc_init_array>:
 8010440:	b570      	push	{r4, r5, r6, lr}
 8010442:	4d0d      	ldr	r5, [pc, #52]	@ (8010478 <__libc_init_array+0x38>)
 8010444:	4c0d      	ldr	r4, [pc, #52]	@ (801047c <__libc_init_array+0x3c>)
 8010446:	1b64      	subs	r4, r4, r5
 8010448:	10a4      	asrs	r4, r4, #2
 801044a:	2600      	movs	r6, #0
 801044c:	42a6      	cmp	r6, r4
 801044e:	d109      	bne.n	8010464 <__libc_init_array+0x24>
 8010450:	4d0b      	ldr	r5, [pc, #44]	@ (8010480 <__libc_init_array+0x40>)
 8010452:	4c0c      	ldr	r4, [pc, #48]	@ (8010484 <__libc_init_array+0x44>)
 8010454:	f000 fba8 	bl	8010ba8 <_init>
 8010458:	1b64      	subs	r4, r4, r5
 801045a:	10a4      	asrs	r4, r4, #2
 801045c:	2600      	movs	r6, #0
 801045e:	42a6      	cmp	r6, r4
 8010460:	d105      	bne.n	801046e <__libc_init_array+0x2e>
 8010462:	bd70      	pop	{r4, r5, r6, pc}
 8010464:	f855 3b04 	ldr.w	r3, [r5], #4
 8010468:	4798      	blx	r3
 801046a:	3601      	adds	r6, #1
 801046c:	e7ee      	b.n	801044c <__libc_init_array+0xc>
 801046e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010472:	4798      	blx	r3
 8010474:	3601      	adds	r6, #1
 8010476:	e7f2      	b.n	801045e <__libc_init_array+0x1e>
 8010478:	08011348 	.word	0x08011348
 801047c:	08011348 	.word	0x08011348
 8010480:	08011348 	.word	0x08011348
 8010484:	0801134c 	.word	0x0801134c

08010488 <__retarget_lock_acquire_recursive>:
 8010488:	4770      	bx	lr

0801048a <__retarget_lock_release_recursive>:
 801048a:	4770      	bx	lr

0801048c <_free_r>:
 801048c:	b538      	push	{r3, r4, r5, lr}
 801048e:	4605      	mov	r5, r0
 8010490:	2900      	cmp	r1, #0
 8010492:	d041      	beq.n	8010518 <_free_r+0x8c>
 8010494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010498:	1f0c      	subs	r4, r1, #4
 801049a:	2b00      	cmp	r3, #0
 801049c:	bfb8      	it	lt
 801049e:	18e4      	addlt	r4, r4, r3
 80104a0:	f7ff ff70 	bl	8010384 <__malloc_lock>
 80104a4:	4a1d      	ldr	r2, [pc, #116]	@ (801051c <_free_r+0x90>)
 80104a6:	6813      	ldr	r3, [r2, #0]
 80104a8:	b933      	cbnz	r3, 80104b8 <_free_r+0x2c>
 80104aa:	6063      	str	r3, [r4, #4]
 80104ac:	6014      	str	r4, [r2, #0]
 80104ae:	4628      	mov	r0, r5
 80104b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104b4:	f7ff bf6c 	b.w	8010390 <__malloc_unlock>
 80104b8:	42a3      	cmp	r3, r4
 80104ba:	d908      	bls.n	80104ce <_free_r+0x42>
 80104bc:	6820      	ldr	r0, [r4, #0]
 80104be:	1821      	adds	r1, r4, r0
 80104c0:	428b      	cmp	r3, r1
 80104c2:	bf01      	itttt	eq
 80104c4:	6819      	ldreq	r1, [r3, #0]
 80104c6:	685b      	ldreq	r3, [r3, #4]
 80104c8:	1809      	addeq	r1, r1, r0
 80104ca:	6021      	streq	r1, [r4, #0]
 80104cc:	e7ed      	b.n	80104aa <_free_r+0x1e>
 80104ce:	461a      	mov	r2, r3
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	b10b      	cbz	r3, 80104d8 <_free_r+0x4c>
 80104d4:	42a3      	cmp	r3, r4
 80104d6:	d9fa      	bls.n	80104ce <_free_r+0x42>
 80104d8:	6811      	ldr	r1, [r2, #0]
 80104da:	1850      	adds	r0, r2, r1
 80104dc:	42a0      	cmp	r0, r4
 80104de:	d10b      	bne.n	80104f8 <_free_r+0x6c>
 80104e0:	6820      	ldr	r0, [r4, #0]
 80104e2:	4401      	add	r1, r0
 80104e4:	1850      	adds	r0, r2, r1
 80104e6:	4283      	cmp	r3, r0
 80104e8:	6011      	str	r1, [r2, #0]
 80104ea:	d1e0      	bne.n	80104ae <_free_r+0x22>
 80104ec:	6818      	ldr	r0, [r3, #0]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	6053      	str	r3, [r2, #4]
 80104f2:	4408      	add	r0, r1
 80104f4:	6010      	str	r0, [r2, #0]
 80104f6:	e7da      	b.n	80104ae <_free_r+0x22>
 80104f8:	d902      	bls.n	8010500 <_free_r+0x74>
 80104fa:	230c      	movs	r3, #12
 80104fc:	602b      	str	r3, [r5, #0]
 80104fe:	e7d6      	b.n	80104ae <_free_r+0x22>
 8010500:	6820      	ldr	r0, [r4, #0]
 8010502:	1821      	adds	r1, r4, r0
 8010504:	428b      	cmp	r3, r1
 8010506:	bf04      	itt	eq
 8010508:	6819      	ldreq	r1, [r3, #0]
 801050a:	685b      	ldreq	r3, [r3, #4]
 801050c:	6063      	str	r3, [r4, #4]
 801050e:	bf04      	itt	eq
 8010510:	1809      	addeq	r1, r1, r0
 8010512:	6021      	streq	r1, [r4, #0]
 8010514:	6054      	str	r4, [r2, #4]
 8010516:	e7ca      	b.n	80104ae <_free_r+0x22>
 8010518:	bd38      	pop	{r3, r4, r5, pc}
 801051a:	bf00      	nop
 801051c:	200188b4 	.word	0x200188b4

08010520 <__ssputs_r>:
 8010520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010524:	688e      	ldr	r6, [r1, #8]
 8010526:	461f      	mov	r7, r3
 8010528:	42be      	cmp	r6, r7
 801052a:	680b      	ldr	r3, [r1, #0]
 801052c:	4682      	mov	sl, r0
 801052e:	460c      	mov	r4, r1
 8010530:	4690      	mov	r8, r2
 8010532:	d82d      	bhi.n	8010590 <__ssputs_r+0x70>
 8010534:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010538:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801053c:	d026      	beq.n	801058c <__ssputs_r+0x6c>
 801053e:	6965      	ldr	r5, [r4, #20]
 8010540:	6909      	ldr	r1, [r1, #16]
 8010542:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010546:	eba3 0901 	sub.w	r9, r3, r1
 801054a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801054e:	1c7b      	adds	r3, r7, #1
 8010550:	444b      	add	r3, r9
 8010552:	106d      	asrs	r5, r5, #1
 8010554:	429d      	cmp	r5, r3
 8010556:	bf38      	it	cc
 8010558:	461d      	movcc	r5, r3
 801055a:	0553      	lsls	r3, r2, #21
 801055c:	d527      	bpl.n	80105ae <__ssputs_r+0x8e>
 801055e:	4629      	mov	r1, r5
 8010560:	f7ff fe90 	bl	8010284 <_malloc_r>
 8010564:	4606      	mov	r6, r0
 8010566:	b360      	cbz	r0, 80105c2 <__ssputs_r+0xa2>
 8010568:	6921      	ldr	r1, [r4, #16]
 801056a:	464a      	mov	r2, r9
 801056c:	f000 fad8 	bl	8010b20 <memcpy>
 8010570:	89a3      	ldrh	r3, [r4, #12]
 8010572:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801057a:	81a3      	strh	r3, [r4, #12]
 801057c:	6126      	str	r6, [r4, #16]
 801057e:	6165      	str	r5, [r4, #20]
 8010580:	444e      	add	r6, r9
 8010582:	eba5 0509 	sub.w	r5, r5, r9
 8010586:	6026      	str	r6, [r4, #0]
 8010588:	60a5      	str	r5, [r4, #8]
 801058a:	463e      	mov	r6, r7
 801058c:	42be      	cmp	r6, r7
 801058e:	d900      	bls.n	8010592 <__ssputs_r+0x72>
 8010590:	463e      	mov	r6, r7
 8010592:	6820      	ldr	r0, [r4, #0]
 8010594:	4632      	mov	r2, r6
 8010596:	4641      	mov	r1, r8
 8010598:	f000 faa8 	bl	8010aec <memmove>
 801059c:	68a3      	ldr	r3, [r4, #8]
 801059e:	1b9b      	subs	r3, r3, r6
 80105a0:	60a3      	str	r3, [r4, #8]
 80105a2:	6823      	ldr	r3, [r4, #0]
 80105a4:	4433      	add	r3, r6
 80105a6:	6023      	str	r3, [r4, #0]
 80105a8:	2000      	movs	r0, #0
 80105aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105ae:	462a      	mov	r2, r5
 80105b0:	f000 fac4 	bl	8010b3c <_realloc_r>
 80105b4:	4606      	mov	r6, r0
 80105b6:	2800      	cmp	r0, #0
 80105b8:	d1e0      	bne.n	801057c <__ssputs_r+0x5c>
 80105ba:	6921      	ldr	r1, [r4, #16]
 80105bc:	4650      	mov	r0, sl
 80105be:	f7ff ff65 	bl	801048c <_free_r>
 80105c2:	230c      	movs	r3, #12
 80105c4:	f8ca 3000 	str.w	r3, [sl]
 80105c8:	89a3      	ldrh	r3, [r4, #12]
 80105ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105ce:	81a3      	strh	r3, [r4, #12]
 80105d0:	f04f 30ff 	mov.w	r0, #4294967295
 80105d4:	e7e9      	b.n	80105aa <__ssputs_r+0x8a>
	...

080105d8 <_svfiprintf_r>:
 80105d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105dc:	4698      	mov	r8, r3
 80105de:	898b      	ldrh	r3, [r1, #12]
 80105e0:	061b      	lsls	r3, r3, #24
 80105e2:	b09d      	sub	sp, #116	@ 0x74
 80105e4:	4607      	mov	r7, r0
 80105e6:	460d      	mov	r5, r1
 80105e8:	4614      	mov	r4, r2
 80105ea:	d510      	bpl.n	801060e <_svfiprintf_r+0x36>
 80105ec:	690b      	ldr	r3, [r1, #16]
 80105ee:	b973      	cbnz	r3, 801060e <_svfiprintf_r+0x36>
 80105f0:	2140      	movs	r1, #64	@ 0x40
 80105f2:	f7ff fe47 	bl	8010284 <_malloc_r>
 80105f6:	6028      	str	r0, [r5, #0]
 80105f8:	6128      	str	r0, [r5, #16]
 80105fa:	b930      	cbnz	r0, 801060a <_svfiprintf_r+0x32>
 80105fc:	230c      	movs	r3, #12
 80105fe:	603b      	str	r3, [r7, #0]
 8010600:	f04f 30ff 	mov.w	r0, #4294967295
 8010604:	b01d      	add	sp, #116	@ 0x74
 8010606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060a:	2340      	movs	r3, #64	@ 0x40
 801060c:	616b      	str	r3, [r5, #20]
 801060e:	2300      	movs	r3, #0
 8010610:	9309      	str	r3, [sp, #36]	@ 0x24
 8010612:	2320      	movs	r3, #32
 8010614:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010618:	f8cd 800c 	str.w	r8, [sp, #12]
 801061c:	2330      	movs	r3, #48	@ 0x30
 801061e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80107bc <_svfiprintf_r+0x1e4>
 8010622:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010626:	f04f 0901 	mov.w	r9, #1
 801062a:	4623      	mov	r3, r4
 801062c:	469a      	mov	sl, r3
 801062e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010632:	b10a      	cbz	r2, 8010638 <_svfiprintf_r+0x60>
 8010634:	2a25      	cmp	r2, #37	@ 0x25
 8010636:	d1f9      	bne.n	801062c <_svfiprintf_r+0x54>
 8010638:	ebba 0b04 	subs.w	fp, sl, r4
 801063c:	d00b      	beq.n	8010656 <_svfiprintf_r+0x7e>
 801063e:	465b      	mov	r3, fp
 8010640:	4622      	mov	r2, r4
 8010642:	4629      	mov	r1, r5
 8010644:	4638      	mov	r0, r7
 8010646:	f7ff ff6b 	bl	8010520 <__ssputs_r>
 801064a:	3001      	adds	r0, #1
 801064c:	f000 80a7 	beq.w	801079e <_svfiprintf_r+0x1c6>
 8010650:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010652:	445a      	add	r2, fp
 8010654:	9209      	str	r2, [sp, #36]	@ 0x24
 8010656:	f89a 3000 	ldrb.w	r3, [sl]
 801065a:	2b00      	cmp	r3, #0
 801065c:	f000 809f 	beq.w	801079e <_svfiprintf_r+0x1c6>
 8010660:	2300      	movs	r3, #0
 8010662:	f04f 32ff 	mov.w	r2, #4294967295
 8010666:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801066a:	f10a 0a01 	add.w	sl, sl, #1
 801066e:	9304      	str	r3, [sp, #16]
 8010670:	9307      	str	r3, [sp, #28]
 8010672:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010676:	931a      	str	r3, [sp, #104]	@ 0x68
 8010678:	4654      	mov	r4, sl
 801067a:	2205      	movs	r2, #5
 801067c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010680:	484e      	ldr	r0, [pc, #312]	@ (80107bc <_svfiprintf_r+0x1e4>)
 8010682:	f7ef fe2d 	bl	80002e0 <memchr>
 8010686:	9a04      	ldr	r2, [sp, #16]
 8010688:	b9d8      	cbnz	r0, 80106c2 <_svfiprintf_r+0xea>
 801068a:	06d0      	lsls	r0, r2, #27
 801068c:	bf44      	itt	mi
 801068e:	2320      	movmi	r3, #32
 8010690:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010694:	0711      	lsls	r1, r2, #28
 8010696:	bf44      	itt	mi
 8010698:	232b      	movmi	r3, #43	@ 0x2b
 801069a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801069e:	f89a 3000 	ldrb.w	r3, [sl]
 80106a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80106a4:	d015      	beq.n	80106d2 <_svfiprintf_r+0xfa>
 80106a6:	9a07      	ldr	r2, [sp, #28]
 80106a8:	4654      	mov	r4, sl
 80106aa:	2000      	movs	r0, #0
 80106ac:	f04f 0c0a 	mov.w	ip, #10
 80106b0:	4621      	mov	r1, r4
 80106b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106b6:	3b30      	subs	r3, #48	@ 0x30
 80106b8:	2b09      	cmp	r3, #9
 80106ba:	d94b      	bls.n	8010754 <_svfiprintf_r+0x17c>
 80106bc:	b1b0      	cbz	r0, 80106ec <_svfiprintf_r+0x114>
 80106be:	9207      	str	r2, [sp, #28]
 80106c0:	e014      	b.n	80106ec <_svfiprintf_r+0x114>
 80106c2:	eba0 0308 	sub.w	r3, r0, r8
 80106c6:	fa09 f303 	lsl.w	r3, r9, r3
 80106ca:	4313      	orrs	r3, r2
 80106cc:	9304      	str	r3, [sp, #16]
 80106ce:	46a2      	mov	sl, r4
 80106d0:	e7d2      	b.n	8010678 <_svfiprintf_r+0xa0>
 80106d2:	9b03      	ldr	r3, [sp, #12]
 80106d4:	1d19      	adds	r1, r3, #4
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	9103      	str	r1, [sp, #12]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	bfbb      	ittet	lt
 80106de:	425b      	neglt	r3, r3
 80106e0:	f042 0202 	orrlt.w	r2, r2, #2
 80106e4:	9307      	strge	r3, [sp, #28]
 80106e6:	9307      	strlt	r3, [sp, #28]
 80106e8:	bfb8      	it	lt
 80106ea:	9204      	strlt	r2, [sp, #16]
 80106ec:	7823      	ldrb	r3, [r4, #0]
 80106ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80106f0:	d10a      	bne.n	8010708 <_svfiprintf_r+0x130>
 80106f2:	7863      	ldrb	r3, [r4, #1]
 80106f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80106f6:	d132      	bne.n	801075e <_svfiprintf_r+0x186>
 80106f8:	9b03      	ldr	r3, [sp, #12]
 80106fa:	1d1a      	adds	r2, r3, #4
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	9203      	str	r2, [sp, #12]
 8010700:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010704:	3402      	adds	r4, #2
 8010706:	9305      	str	r3, [sp, #20]
 8010708:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80107cc <_svfiprintf_r+0x1f4>
 801070c:	7821      	ldrb	r1, [r4, #0]
 801070e:	2203      	movs	r2, #3
 8010710:	4650      	mov	r0, sl
 8010712:	f7ef fde5 	bl	80002e0 <memchr>
 8010716:	b138      	cbz	r0, 8010728 <_svfiprintf_r+0x150>
 8010718:	9b04      	ldr	r3, [sp, #16]
 801071a:	eba0 000a 	sub.w	r0, r0, sl
 801071e:	2240      	movs	r2, #64	@ 0x40
 8010720:	4082      	lsls	r2, r0
 8010722:	4313      	orrs	r3, r2
 8010724:	3401      	adds	r4, #1
 8010726:	9304      	str	r3, [sp, #16]
 8010728:	f814 1b01 	ldrb.w	r1, [r4], #1
 801072c:	4824      	ldr	r0, [pc, #144]	@ (80107c0 <_svfiprintf_r+0x1e8>)
 801072e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010732:	2206      	movs	r2, #6
 8010734:	f7ef fdd4 	bl	80002e0 <memchr>
 8010738:	2800      	cmp	r0, #0
 801073a:	d036      	beq.n	80107aa <_svfiprintf_r+0x1d2>
 801073c:	4b21      	ldr	r3, [pc, #132]	@ (80107c4 <_svfiprintf_r+0x1ec>)
 801073e:	bb1b      	cbnz	r3, 8010788 <_svfiprintf_r+0x1b0>
 8010740:	9b03      	ldr	r3, [sp, #12]
 8010742:	3307      	adds	r3, #7
 8010744:	f023 0307 	bic.w	r3, r3, #7
 8010748:	3308      	adds	r3, #8
 801074a:	9303      	str	r3, [sp, #12]
 801074c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801074e:	4433      	add	r3, r6
 8010750:	9309      	str	r3, [sp, #36]	@ 0x24
 8010752:	e76a      	b.n	801062a <_svfiprintf_r+0x52>
 8010754:	fb0c 3202 	mla	r2, ip, r2, r3
 8010758:	460c      	mov	r4, r1
 801075a:	2001      	movs	r0, #1
 801075c:	e7a8      	b.n	80106b0 <_svfiprintf_r+0xd8>
 801075e:	2300      	movs	r3, #0
 8010760:	3401      	adds	r4, #1
 8010762:	9305      	str	r3, [sp, #20]
 8010764:	4619      	mov	r1, r3
 8010766:	f04f 0c0a 	mov.w	ip, #10
 801076a:	4620      	mov	r0, r4
 801076c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010770:	3a30      	subs	r2, #48	@ 0x30
 8010772:	2a09      	cmp	r2, #9
 8010774:	d903      	bls.n	801077e <_svfiprintf_r+0x1a6>
 8010776:	2b00      	cmp	r3, #0
 8010778:	d0c6      	beq.n	8010708 <_svfiprintf_r+0x130>
 801077a:	9105      	str	r1, [sp, #20]
 801077c:	e7c4      	b.n	8010708 <_svfiprintf_r+0x130>
 801077e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010782:	4604      	mov	r4, r0
 8010784:	2301      	movs	r3, #1
 8010786:	e7f0      	b.n	801076a <_svfiprintf_r+0x192>
 8010788:	ab03      	add	r3, sp, #12
 801078a:	9300      	str	r3, [sp, #0]
 801078c:	462a      	mov	r2, r5
 801078e:	4b0e      	ldr	r3, [pc, #56]	@ (80107c8 <_svfiprintf_r+0x1f0>)
 8010790:	a904      	add	r1, sp, #16
 8010792:	4638      	mov	r0, r7
 8010794:	f3af 8000 	nop.w
 8010798:	1c42      	adds	r2, r0, #1
 801079a:	4606      	mov	r6, r0
 801079c:	d1d6      	bne.n	801074c <_svfiprintf_r+0x174>
 801079e:	89ab      	ldrh	r3, [r5, #12]
 80107a0:	065b      	lsls	r3, r3, #25
 80107a2:	f53f af2d 	bmi.w	8010600 <_svfiprintf_r+0x28>
 80107a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80107a8:	e72c      	b.n	8010604 <_svfiprintf_r+0x2c>
 80107aa:	ab03      	add	r3, sp, #12
 80107ac:	9300      	str	r3, [sp, #0]
 80107ae:	462a      	mov	r2, r5
 80107b0:	4b05      	ldr	r3, [pc, #20]	@ (80107c8 <_svfiprintf_r+0x1f0>)
 80107b2:	a904      	add	r1, sp, #16
 80107b4:	4638      	mov	r0, r7
 80107b6:	f000 f879 	bl	80108ac <_printf_i>
 80107ba:	e7ed      	b.n	8010798 <_svfiprintf_r+0x1c0>
 80107bc:	0801130c 	.word	0x0801130c
 80107c0:	08011316 	.word	0x08011316
 80107c4:	00000000 	.word	0x00000000
 80107c8:	08010521 	.word	0x08010521
 80107cc:	08011312 	.word	0x08011312

080107d0 <_printf_common>:
 80107d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107d4:	4616      	mov	r6, r2
 80107d6:	4698      	mov	r8, r3
 80107d8:	688a      	ldr	r2, [r1, #8]
 80107da:	690b      	ldr	r3, [r1, #16]
 80107dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80107e0:	4293      	cmp	r3, r2
 80107e2:	bfb8      	it	lt
 80107e4:	4613      	movlt	r3, r2
 80107e6:	6033      	str	r3, [r6, #0]
 80107e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80107ec:	4607      	mov	r7, r0
 80107ee:	460c      	mov	r4, r1
 80107f0:	b10a      	cbz	r2, 80107f6 <_printf_common+0x26>
 80107f2:	3301      	adds	r3, #1
 80107f4:	6033      	str	r3, [r6, #0]
 80107f6:	6823      	ldr	r3, [r4, #0]
 80107f8:	0699      	lsls	r1, r3, #26
 80107fa:	bf42      	ittt	mi
 80107fc:	6833      	ldrmi	r3, [r6, #0]
 80107fe:	3302      	addmi	r3, #2
 8010800:	6033      	strmi	r3, [r6, #0]
 8010802:	6825      	ldr	r5, [r4, #0]
 8010804:	f015 0506 	ands.w	r5, r5, #6
 8010808:	d106      	bne.n	8010818 <_printf_common+0x48>
 801080a:	f104 0a19 	add.w	sl, r4, #25
 801080e:	68e3      	ldr	r3, [r4, #12]
 8010810:	6832      	ldr	r2, [r6, #0]
 8010812:	1a9b      	subs	r3, r3, r2
 8010814:	42ab      	cmp	r3, r5
 8010816:	dc26      	bgt.n	8010866 <_printf_common+0x96>
 8010818:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801081c:	6822      	ldr	r2, [r4, #0]
 801081e:	3b00      	subs	r3, #0
 8010820:	bf18      	it	ne
 8010822:	2301      	movne	r3, #1
 8010824:	0692      	lsls	r2, r2, #26
 8010826:	d42b      	bmi.n	8010880 <_printf_common+0xb0>
 8010828:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801082c:	4641      	mov	r1, r8
 801082e:	4638      	mov	r0, r7
 8010830:	47c8      	blx	r9
 8010832:	3001      	adds	r0, #1
 8010834:	d01e      	beq.n	8010874 <_printf_common+0xa4>
 8010836:	6823      	ldr	r3, [r4, #0]
 8010838:	6922      	ldr	r2, [r4, #16]
 801083a:	f003 0306 	and.w	r3, r3, #6
 801083e:	2b04      	cmp	r3, #4
 8010840:	bf02      	ittt	eq
 8010842:	68e5      	ldreq	r5, [r4, #12]
 8010844:	6833      	ldreq	r3, [r6, #0]
 8010846:	1aed      	subeq	r5, r5, r3
 8010848:	68a3      	ldr	r3, [r4, #8]
 801084a:	bf0c      	ite	eq
 801084c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010850:	2500      	movne	r5, #0
 8010852:	4293      	cmp	r3, r2
 8010854:	bfc4      	itt	gt
 8010856:	1a9b      	subgt	r3, r3, r2
 8010858:	18ed      	addgt	r5, r5, r3
 801085a:	2600      	movs	r6, #0
 801085c:	341a      	adds	r4, #26
 801085e:	42b5      	cmp	r5, r6
 8010860:	d11a      	bne.n	8010898 <_printf_common+0xc8>
 8010862:	2000      	movs	r0, #0
 8010864:	e008      	b.n	8010878 <_printf_common+0xa8>
 8010866:	2301      	movs	r3, #1
 8010868:	4652      	mov	r2, sl
 801086a:	4641      	mov	r1, r8
 801086c:	4638      	mov	r0, r7
 801086e:	47c8      	blx	r9
 8010870:	3001      	adds	r0, #1
 8010872:	d103      	bne.n	801087c <_printf_common+0xac>
 8010874:	f04f 30ff 	mov.w	r0, #4294967295
 8010878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801087c:	3501      	adds	r5, #1
 801087e:	e7c6      	b.n	801080e <_printf_common+0x3e>
 8010880:	18e1      	adds	r1, r4, r3
 8010882:	1c5a      	adds	r2, r3, #1
 8010884:	2030      	movs	r0, #48	@ 0x30
 8010886:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801088a:	4422      	add	r2, r4
 801088c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010890:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010894:	3302      	adds	r3, #2
 8010896:	e7c7      	b.n	8010828 <_printf_common+0x58>
 8010898:	2301      	movs	r3, #1
 801089a:	4622      	mov	r2, r4
 801089c:	4641      	mov	r1, r8
 801089e:	4638      	mov	r0, r7
 80108a0:	47c8      	blx	r9
 80108a2:	3001      	adds	r0, #1
 80108a4:	d0e6      	beq.n	8010874 <_printf_common+0xa4>
 80108a6:	3601      	adds	r6, #1
 80108a8:	e7d9      	b.n	801085e <_printf_common+0x8e>
	...

080108ac <_printf_i>:
 80108ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80108b0:	7e0f      	ldrb	r7, [r1, #24]
 80108b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80108b4:	2f78      	cmp	r7, #120	@ 0x78
 80108b6:	4691      	mov	r9, r2
 80108b8:	4680      	mov	r8, r0
 80108ba:	460c      	mov	r4, r1
 80108bc:	469a      	mov	sl, r3
 80108be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80108c2:	d807      	bhi.n	80108d4 <_printf_i+0x28>
 80108c4:	2f62      	cmp	r7, #98	@ 0x62
 80108c6:	d80a      	bhi.n	80108de <_printf_i+0x32>
 80108c8:	2f00      	cmp	r7, #0
 80108ca:	f000 80d2 	beq.w	8010a72 <_printf_i+0x1c6>
 80108ce:	2f58      	cmp	r7, #88	@ 0x58
 80108d0:	f000 80b9 	beq.w	8010a46 <_printf_i+0x19a>
 80108d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80108d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80108dc:	e03a      	b.n	8010954 <_printf_i+0xa8>
 80108de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80108e2:	2b15      	cmp	r3, #21
 80108e4:	d8f6      	bhi.n	80108d4 <_printf_i+0x28>
 80108e6:	a101      	add	r1, pc, #4	@ (adr r1, 80108ec <_printf_i+0x40>)
 80108e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80108ec:	08010945 	.word	0x08010945
 80108f0:	08010959 	.word	0x08010959
 80108f4:	080108d5 	.word	0x080108d5
 80108f8:	080108d5 	.word	0x080108d5
 80108fc:	080108d5 	.word	0x080108d5
 8010900:	080108d5 	.word	0x080108d5
 8010904:	08010959 	.word	0x08010959
 8010908:	080108d5 	.word	0x080108d5
 801090c:	080108d5 	.word	0x080108d5
 8010910:	080108d5 	.word	0x080108d5
 8010914:	080108d5 	.word	0x080108d5
 8010918:	08010a59 	.word	0x08010a59
 801091c:	08010983 	.word	0x08010983
 8010920:	08010a13 	.word	0x08010a13
 8010924:	080108d5 	.word	0x080108d5
 8010928:	080108d5 	.word	0x080108d5
 801092c:	08010a7b 	.word	0x08010a7b
 8010930:	080108d5 	.word	0x080108d5
 8010934:	08010983 	.word	0x08010983
 8010938:	080108d5 	.word	0x080108d5
 801093c:	080108d5 	.word	0x080108d5
 8010940:	08010a1b 	.word	0x08010a1b
 8010944:	6833      	ldr	r3, [r6, #0]
 8010946:	1d1a      	adds	r2, r3, #4
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	6032      	str	r2, [r6, #0]
 801094c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010950:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010954:	2301      	movs	r3, #1
 8010956:	e09d      	b.n	8010a94 <_printf_i+0x1e8>
 8010958:	6833      	ldr	r3, [r6, #0]
 801095a:	6820      	ldr	r0, [r4, #0]
 801095c:	1d19      	adds	r1, r3, #4
 801095e:	6031      	str	r1, [r6, #0]
 8010960:	0606      	lsls	r6, r0, #24
 8010962:	d501      	bpl.n	8010968 <_printf_i+0xbc>
 8010964:	681d      	ldr	r5, [r3, #0]
 8010966:	e003      	b.n	8010970 <_printf_i+0xc4>
 8010968:	0645      	lsls	r5, r0, #25
 801096a:	d5fb      	bpl.n	8010964 <_printf_i+0xb8>
 801096c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010970:	2d00      	cmp	r5, #0
 8010972:	da03      	bge.n	801097c <_printf_i+0xd0>
 8010974:	232d      	movs	r3, #45	@ 0x2d
 8010976:	426d      	negs	r5, r5
 8010978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801097c:	4859      	ldr	r0, [pc, #356]	@ (8010ae4 <_printf_i+0x238>)
 801097e:	230a      	movs	r3, #10
 8010980:	e011      	b.n	80109a6 <_printf_i+0xfa>
 8010982:	6821      	ldr	r1, [r4, #0]
 8010984:	6833      	ldr	r3, [r6, #0]
 8010986:	0608      	lsls	r0, r1, #24
 8010988:	f853 5b04 	ldr.w	r5, [r3], #4
 801098c:	d402      	bmi.n	8010994 <_printf_i+0xe8>
 801098e:	0649      	lsls	r1, r1, #25
 8010990:	bf48      	it	mi
 8010992:	b2ad      	uxthmi	r5, r5
 8010994:	2f6f      	cmp	r7, #111	@ 0x6f
 8010996:	4853      	ldr	r0, [pc, #332]	@ (8010ae4 <_printf_i+0x238>)
 8010998:	6033      	str	r3, [r6, #0]
 801099a:	bf14      	ite	ne
 801099c:	230a      	movne	r3, #10
 801099e:	2308      	moveq	r3, #8
 80109a0:	2100      	movs	r1, #0
 80109a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80109a6:	6866      	ldr	r6, [r4, #4]
 80109a8:	60a6      	str	r6, [r4, #8]
 80109aa:	2e00      	cmp	r6, #0
 80109ac:	bfa2      	ittt	ge
 80109ae:	6821      	ldrge	r1, [r4, #0]
 80109b0:	f021 0104 	bicge.w	r1, r1, #4
 80109b4:	6021      	strge	r1, [r4, #0]
 80109b6:	b90d      	cbnz	r5, 80109bc <_printf_i+0x110>
 80109b8:	2e00      	cmp	r6, #0
 80109ba:	d04b      	beq.n	8010a54 <_printf_i+0x1a8>
 80109bc:	4616      	mov	r6, r2
 80109be:	fbb5 f1f3 	udiv	r1, r5, r3
 80109c2:	fb03 5711 	mls	r7, r3, r1, r5
 80109c6:	5dc7      	ldrb	r7, [r0, r7]
 80109c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80109cc:	462f      	mov	r7, r5
 80109ce:	42bb      	cmp	r3, r7
 80109d0:	460d      	mov	r5, r1
 80109d2:	d9f4      	bls.n	80109be <_printf_i+0x112>
 80109d4:	2b08      	cmp	r3, #8
 80109d6:	d10b      	bne.n	80109f0 <_printf_i+0x144>
 80109d8:	6823      	ldr	r3, [r4, #0]
 80109da:	07df      	lsls	r7, r3, #31
 80109dc:	d508      	bpl.n	80109f0 <_printf_i+0x144>
 80109de:	6923      	ldr	r3, [r4, #16]
 80109e0:	6861      	ldr	r1, [r4, #4]
 80109e2:	4299      	cmp	r1, r3
 80109e4:	bfde      	ittt	le
 80109e6:	2330      	movle	r3, #48	@ 0x30
 80109e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80109ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80109f0:	1b92      	subs	r2, r2, r6
 80109f2:	6122      	str	r2, [r4, #16]
 80109f4:	f8cd a000 	str.w	sl, [sp]
 80109f8:	464b      	mov	r3, r9
 80109fa:	aa03      	add	r2, sp, #12
 80109fc:	4621      	mov	r1, r4
 80109fe:	4640      	mov	r0, r8
 8010a00:	f7ff fee6 	bl	80107d0 <_printf_common>
 8010a04:	3001      	adds	r0, #1
 8010a06:	d14a      	bne.n	8010a9e <_printf_i+0x1f2>
 8010a08:	f04f 30ff 	mov.w	r0, #4294967295
 8010a0c:	b004      	add	sp, #16
 8010a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a12:	6823      	ldr	r3, [r4, #0]
 8010a14:	f043 0320 	orr.w	r3, r3, #32
 8010a18:	6023      	str	r3, [r4, #0]
 8010a1a:	4833      	ldr	r0, [pc, #204]	@ (8010ae8 <_printf_i+0x23c>)
 8010a1c:	2778      	movs	r7, #120	@ 0x78
 8010a1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010a22:	6823      	ldr	r3, [r4, #0]
 8010a24:	6831      	ldr	r1, [r6, #0]
 8010a26:	061f      	lsls	r7, r3, #24
 8010a28:	f851 5b04 	ldr.w	r5, [r1], #4
 8010a2c:	d402      	bmi.n	8010a34 <_printf_i+0x188>
 8010a2e:	065f      	lsls	r7, r3, #25
 8010a30:	bf48      	it	mi
 8010a32:	b2ad      	uxthmi	r5, r5
 8010a34:	6031      	str	r1, [r6, #0]
 8010a36:	07d9      	lsls	r1, r3, #31
 8010a38:	bf44      	itt	mi
 8010a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8010a3e:	6023      	strmi	r3, [r4, #0]
 8010a40:	b11d      	cbz	r5, 8010a4a <_printf_i+0x19e>
 8010a42:	2310      	movs	r3, #16
 8010a44:	e7ac      	b.n	80109a0 <_printf_i+0xf4>
 8010a46:	4827      	ldr	r0, [pc, #156]	@ (8010ae4 <_printf_i+0x238>)
 8010a48:	e7e9      	b.n	8010a1e <_printf_i+0x172>
 8010a4a:	6823      	ldr	r3, [r4, #0]
 8010a4c:	f023 0320 	bic.w	r3, r3, #32
 8010a50:	6023      	str	r3, [r4, #0]
 8010a52:	e7f6      	b.n	8010a42 <_printf_i+0x196>
 8010a54:	4616      	mov	r6, r2
 8010a56:	e7bd      	b.n	80109d4 <_printf_i+0x128>
 8010a58:	6833      	ldr	r3, [r6, #0]
 8010a5a:	6825      	ldr	r5, [r4, #0]
 8010a5c:	6961      	ldr	r1, [r4, #20]
 8010a5e:	1d18      	adds	r0, r3, #4
 8010a60:	6030      	str	r0, [r6, #0]
 8010a62:	062e      	lsls	r6, r5, #24
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	d501      	bpl.n	8010a6c <_printf_i+0x1c0>
 8010a68:	6019      	str	r1, [r3, #0]
 8010a6a:	e002      	b.n	8010a72 <_printf_i+0x1c6>
 8010a6c:	0668      	lsls	r0, r5, #25
 8010a6e:	d5fb      	bpl.n	8010a68 <_printf_i+0x1bc>
 8010a70:	8019      	strh	r1, [r3, #0]
 8010a72:	2300      	movs	r3, #0
 8010a74:	6123      	str	r3, [r4, #16]
 8010a76:	4616      	mov	r6, r2
 8010a78:	e7bc      	b.n	80109f4 <_printf_i+0x148>
 8010a7a:	6833      	ldr	r3, [r6, #0]
 8010a7c:	1d1a      	adds	r2, r3, #4
 8010a7e:	6032      	str	r2, [r6, #0]
 8010a80:	681e      	ldr	r6, [r3, #0]
 8010a82:	6862      	ldr	r2, [r4, #4]
 8010a84:	2100      	movs	r1, #0
 8010a86:	4630      	mov	r0, r6
 8010a88:	f7ef fc2a 	bl	80002e0 <memchr>
 8010a8c:	b108      	cbz	r0, 8010a92 <_printf_i+0x1e6>
 8010a8e:	1b80      	subs	r0, r0, r6
 8010a90:	6060      	str	r0, [r4, #4]
 8010a92:	6863      	ldr	r3, [r4, #4]
 8010a94:	6123      	str	r3, [r4, #16]
 8010a96:	2300      	movs	r3, #0
 8010a98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a9c:	e7aa      	b.n	80109f4 <_printf_i+0x148>
 8010a9e:	6923      	ldr	r3, [r4, #16]
 8010aa0:	4632      	mov	r2, r6
 8010aa2:	4649      	mov	r1, r9
 8010aa4:	4640      	mov	r0, r8
 8010aa6:	47d0      	blx	sl
 8010aa8:	3001      	adds	r0, #1
 8010aaa:	d0ad      	beq.n	8010a08 <_printf_i+0x15c>
 8010aac:	6823      	ldr	r3, [r4, #0]
 8010aae:	079b      	lsls	r3, r3, #30
 8010ab0:	d413      	bmi.n	8010ada <_printf_i+0x22e>
 8010ab2:	68e0      	ldr	r0, [r4, #12]
 8010ab4:	9b03      	ldr	r3, [sp, #12]
 8010ab6:	4298      	cmp	r0, r3
 8010ab8:	bfb8      	it	lt
 8010aba:	4618      	movlt	r0, r3
 8010abc:	e7a6      	b.n	8010a0c <_printf_i+0x160>
 8010abe:	2301      	movs	r3, #1
 8010ac0:	4632      	mov	r2, r6
 8010ac2:	4649      	mov	r1, r9
 8010ac4:	4640      	mov	r0, r8
 8010ac6:	47d0      	blx	sl
 8010ac8:	3001      	adds	r0, #1
 8010aca:	d09d      	beq.n	8010a08 <_printf_i+0x15c>
 8010acc:	3501      	adds	r5, #1
 8010ace:	68e3      	ldr	r3, [r4, #12]
 8010ad0:	9903      	ldr	r1, [sp, #12]
 8010ad2:	1a5b      	subs	r3, r3, r1
 8010ad4:	42ab      	cmp	r3, r5
 8010ad6:	dcf2      	bgt.n	8010abe <_printf_i+0x212>
 8010ad8:	e7eb      	b.n	8010ab2 <_printf_i+0x206>
 8010ada:	2500      	movs	r5, #0
 8010adc:	f104 0619 	add.w	r6, r4, #25
 8010ae0:	e7f5      	b.n	8010ace <_printf_i+0x222>
 8010ae2:	bf00      	nop
 8010ae4:	0801131d 	.word	0x0801131d
 8010ae8:	0801132e 	.word	0x0801132e

08010aec <memmove>:
 8010aec:	4288      	cmp	r0, r1
 8010aee:	b510      	push	{r4, lr}
 8010af0:	eb01 0402 	add.w	r4, r1, r2
 8010af4:	d902      	bls.n	8010afc <memmove+0x10>
 8010af6:	4284      	cmp	r4, r0
 8010af8:	4623      	mov	r3, r4
 8010afa:	d807      	bhi.n	8010b0c <memmove+0x20>
 8010afc:	1e43      	subs	r3, r0, #1
 8010afe:	42a1      	cmp	r1, r4
 8010b00:	d008      	beq.n	8010b14 <memmove+0x28>
 8010b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b0a:	e7f8      	b.n	8010afe <memmove+0x12>
 8010b0c:	4402      	add	r2, r0
 8010b0e:	4601      	mov	r1, r0
 8010b10:	428a      	cmp	r2, r1
 8010b12:	d100      	bne.n	8010b16 <memmove+0x2a>
 8010b14:	bd10      	pop	{r4, pc}
 8010b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010b1e:	e7f7      	b.n	8010b10 <memmove+0x24>

08010b20 <memcpy>:
 8010b20:	440a      	add	r2, r1
 8010b22:	4291      	cmp	r1, r2
 8010b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b28:	d100      	bne.n	8010b2c <memcpy+0xc>
 8010b2a:	4770      	bx	lr
 8010b2c:	b510      	push	{r4, lr}
 8010b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b36:	4291      	cmp	r1, r2
 8010b38:	d1f9      	bne.n	8010b2e <memcpy+0xe>
 8010b3a:	bd10      	pop	{r4, pc}

08010b3c <_realloc_r>:
 8010b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b40:	4680      	mov	r8, r0
 8010b42:	4615      	mov	r5, r2
 8010b44:	460c      	mov	r4, r1
 8010b46:	b921      	cbnz	r1, 8010b52 <_realloc_r+0x16>
 8010b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b4c:	4611      	mov	r1, r2
 8010b4e:	f7ff bb99 	b.w	8010284 <_malloc_r>
 8010b52:	b92a      	cbnz	r2, 8010b60 <_realloc_r+0x24>
 8010b54:	f7ff fc9a 	bl	801048c <_free_r>
 8010b58:	2400      	movs	r4, #0
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b60:	f000 f81a 	bl	8010b98 <_malloc_usable_size_r>
 8010b64:	4285      	cmp	r5, r0
 8010b66:	4606      	mov	r6, r0
 8010b68:	d802      	bhi.n	8010b70 <_realloc_r+0x34>
 8010b6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010b6e:	d8f4      	bhi.n	8010b5a <_realloc_r+0x1e>
 8010b70:	4629      	mov	r1, r5
 8010b72:	4640      	mov	r0, r8
 8010b74:	f7ff fb86 	bl	8010284 <_malloc_r>
 8010b78:	4607      	mov	r7, r0
 8010b7a:	2800      	cmp	r0, #0
 8010b7c:	d0ec      	beq.n	8010b58 <_realloc_r+0x1c>
 8010b7e:	42b5      	cmp	r5, r6
 8010b80:	462a      	mov	r2, r5
 8010b82:	4621      	mov	r1, r4
 8010b84:	bf28      	it	cs
 8010b86:	4632      	movcs	r2, r6
 8010b88:	f7ff ffca 	bl	8010b20 <memcpy>
 8010b8c:	4621      	mov	r1, r4
 8010b8e:	4640      	mov	r0, r8
 8010b90:	f7ff fc7c 	bl	801048c <_free_r>
 8010b94:	463c      	mov	r4, r7
 8010b96:	e7e0      	b.n	8010b5a <_realloc_r+0x1e>

08010b98 <_malloc_usable_size_r>:
 8010b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b9c:	1f18      	subs	r0, r3, #4
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	bfbc      	itt	lt
 8010ba2:	580b      	ldrlt	r3, [r1, r0]
 8010ba4:	18c0      	addlt	r0, r0, r3
 8010ba6:	4770      	bx	lr

08010ba8 <_init>:
 8010ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010baa:	bf00      	nop
 8010bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bae:	bc08      	pop	{r3}
 8010bb0:	469e      	mov	lr, r3
 8010bb2:	4770      	bx	lr

08010bb4 <_fini>:
 8010bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bb6:	bf00      	nop
 8010bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bba:	bc08      	pop	{r3}
 8010bbc:	469e      	mov	lr, r3
 8010bbe:	4770      	bx	lr
