
JPEG_MJPEG_VideoDecoding_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ae8  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  08010d80  08010d80  00011d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011634  08011634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08011638  08011638  00012638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000060  20000000  0801163c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00018ac4  20000060  0801169c  00013060  2**2
                  ALLOC
  7 ._user_heap_stack 00002404  20018b24  0801169c  00013b24  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00013060  2**0
                  CONTENTS, READONLY
  9 .debug_info   00025479  00000000  00000000  0001308e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004a5a  00000000  00000000  00038507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001df0  00000000  00000000  0003cf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000170a  00000000  00000000  0003ed58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00047f28  00000000  00000000  00040462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002c625  00000000  00000000  0008838a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001cd0a8  00000000  00000000  000b49af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00281a57  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000080f8  00000000  00000000  00281a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000a3  00000000  00000000  00289b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000060 	.word	0x20000060
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010d68 	.word	0x08010d68

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000064 	.word	0x20000064
 80002d4:	08010d68 	.word	0x08010d68

080002d8 <IS42S32800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800J_ERROR;
 80002e2:	f04f 33ff 	mov.w	r3, #4294967295
 80002e6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4619      	mov	r1, r3
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f000 f832 	bl	8000358 <IS42S32800J_ClockEnable>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d128      	bne.n	800034c <IS42S32800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800J_Delay(1);
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 f8e2 	bl	80004c4 <IS42S32800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4619      	mov	r1, r3
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f000 f84a 	bl	80003a0 <IS42S32800J_Precharge>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d11c      	bne.n	800034c <IS42S32800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	6819      	ldr	r1, [r3, #0]
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	461a      	mov	r2, r3
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f000 f897 	bl	8000450 <IS42S32800J_RefreshMode>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d111      	bne.n	800034c <IS42S32800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8000328:	6839      	ldr	r1, [r7, #0]
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f000 f85c 	bl	80003e8 <IS42S32800J_ModeRegConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d10a      	bne.n	800034c <IS42S32800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	4619      	mov	r1, r3
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f000 f8ad 	bl	800049c <IS42S32800J_RefreshRate>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d101      	bne.n	800034c <IS42S32800J_Init+0x74>
          {
            ret = IS42S32800J_OK;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800034c:	68fb      	ldr	r3, [r7, #12]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8000362:	4b0e      	ldr	r3, [pc, #56]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 8000364:	2201      	movs	r2, #1
 8000366:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000368:	4a0c      	ldr	r2, [pc, #48]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800036e:	4b0b      	ldr	r3, [pc, #44]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 8000370:	2201      	movs	r2, #1
 8000372:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000374:	4b09      	ldr	r3, [pc, #36]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800037a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800037e:	4907      	ldr	r1, [pc, #28]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f009 f915 	bl	80095b0 <HAL_SDRAM_SendCommand>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d002      	beq.n	8000392 <IS42S32800J_ClockEnable+0x3a>
  {
    return IS42S32800J_ERROR;
 800038c:	f04f 33ff 	mov.w	r3, #4294967295
 8000390:	e000      	b.n	8000394 <IS42S32800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 8000392:	2300      	movs	r3, #0
  }
}
 8000394:	4618      	mov	r0, r3
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	2000007c 	.word	0x2000007c

080003a0 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003ac:	2202      	movs	r2, #2
 80003ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80003b0:	4a0c      	ldr	r2, [pc, #48]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80003bc:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80003c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003c6:	4907      	ldr	r1, [pc, #28]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f009 f8f1 	bl	80095b0 <HAL_SDRAM_SendCommand>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d002      	beq.n	80003da <IS42S32800J_Precharge+0x3a>
  {
    return IS42S32800J_ERROR;
 80003d4:	f04f 33ff 	mov.w	r3, #4294967295
 80003d8:	e000      	b.n	80003dc <IS42S32800J_Precharge+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 80003da:	2300      	movs	r3, #0
  }
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	2000007c 	.word	0x2000007c

080003e8 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80003fa:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8000400:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8000406:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800040c:	4313      	orrs	r3, r2
 800040e:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8000410:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000412:	2204      	movs	r2, #4
 8000414:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a0c      	ldr	r2, [pc, #48]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 800041c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800041e:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000420:	2201      	movs	r2, #1
 8000422:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000424:	4a09      	ldr	r2, [pc, #36]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800042a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800042e:	4907      	ldr	r1, [pc, #28]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f009 f8bd 	bl	80095b0 <HAL_SDRAM_SendCommand>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d002      	beq.n	8000442 <IS42S32800J_ModeRegConfig+0x5a>
  {
    return IS42S32800J_ERROR;
 800043c:	f04f 33ff 	mov.w	r3, #4294967295
 8000440:	e000      	b.n	8000444 <IS42S32800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800J_OK;
 8000442:	2300      	movs	r3, #0
  }
}
 8000444:	4618      	mov	r0, r3
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	2000007c 	.word	0x2000007c

08000450 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800045c:	4a0e      	ldr	r2, [pc, #56]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000462:	4a0d      	ldr	r2, [pc, #52]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000468:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 800046a:	2208      	movs	r2, #8
 800046c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800046e:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000474:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000478:	4907      	ldr	r1, [pc, #28]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 800047a:	68f8      	ldr	r0, [r7, #12]
 800047c:	f009 f898 	bl	80095b0 <HAL_SDRAM_SendCommand>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <IS42S32800J_RefreshMode+0x3c>
  {
    return IS42S32800J_ERROR;
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	e000      	b.n	800048e <IS42S32800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800J_OK;
 800048c:	2300      	movs	r3, #0
  }
}
 800048e:	4618      	mov	r0, r3
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	2000007c 	.word	0x2000007c

0800049c <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80004a6:	6839      	ldr	r1, [r7, #0]
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f009 f8b6 	bl	800961a <HAL_SDRAM_ProgramRefreshRate>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d002      	beq.n	80004ba <IS42S32800J_RefreshRate+0x1e>
  {
    return IS42S32800J_ERROR;
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295
 80004b8:	e000      	b.n	80004bc <IS42S32800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800J_OK;
 80004ba:	2300      	movs	r3, #0
  }
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <IS42S32800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80004cc:	f000 fcc6 	bl	8000e5c <HAL_GetTick>
 80004d0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80004d2:	bf00      	nop
 80004d4:	f000 fcc2 	bl	8000e5c <HAL_GetTick>
 80004d8:	4602      	mov	r2, r0
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	1ad3      	subs	r3, r2, r3
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d8f7      	bhi.n	80004d4 <IS42S32800J_Delay+0x10>
  {
  }
  return IS42S32800J_OK;
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t BSP_SD_Init(uint32_t Instance)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	@ 0x28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;

  if(Instance >= SD_INSTANCES_NBR)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d003      	beq.n	800050a <BSP_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000502:	f06f 0301 	mvn.w	r3, #1
 8000506:	627b      	str	r3, [r7, #36]	@ 0x24
 8000508:	e063      	b.n	80005d2 <BSP_SD_Init+0xe2>
  }
  else
  {
    /* Configure Input mode for SD detection pin */
    SD_DETECT_GPIO_CLK_ENABLE();
 800050a:	4b34      	ldr	r3, [pc, #208]	@ (80005dc <BSP_SD_Init+0xec>)
 800050c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000510:	4a32      	ldr	r2, [pc, #200]	@ (80005dc <BSP_SD_Init+0xec>)
 8000512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000516:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800051a:	4b30      	ldr	r3, [pc, #192]	@ (80005dc <BSP_SD_Init+0xec>)
 800051c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
    gpio_init_structure.Pin = SD_DETECT_PIN;
 8000528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800052c:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 800052e:	2301      	movs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000532:	2302      	movs	r3, #2
 8000534:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	4827      	ldr	r0, [pc, #156]	@ (80005e0 <BSP_SD_Init+0xf0>)
 8000542:	f001 f92b 	bl	800179c <HAL_GPIO_Init>

    if(BSP_SD_IsDetected(Instance) != SD_PRESENT)
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 f876 	bl	8000638 <BSP_SD_IsDetected>
 800054c:	4603      	mov	r3, r0
 800054e:	2b01      	cmp	r3, #1
 8000550:	d003      	beq.n	800055a <BSP_SD_Init+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8000552:	f06f 0306 	mvn.w	r3, #6
 8000556:	627b      	str	r3, [r7, #36]	@ 0x24
 8000558:	e03b      	b.n	80005d2 <BSP_SD_Init+0xe2>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SD initialization */
      SD_MspInit(&hsd_sdmmc[Instance]);
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	4613      	mov	r3, r2
 800055e:	015b      	lsls	r3, r3, #5
 8000560:	1a9b      	subs	r3, r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4a1f      	ldr	r2, [pc, #124]	@ (80005e4 <BSP_SD_Init+0xf4>)
 8000566:	4413      	add	r3, r2
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f929 	bl	80007c0 <SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS   */

      if(ret == BSP_ERROR_NONE)
 800056e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000570:	2b00      	cmp	r3, #0
 8000572:	d12e      	bne.n	80005d2 <BSP_SD_Init+0xe2>
      {
        /* HAL SD initialization and Enable wide operation   */
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	4613      	mov	r3, r2
 8000578:	015b      	lsls	r3, r3, #5
 800057a:	1a9b      	subs	r3, r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4a19      	ldr	r2, [pc, #100]	@ (80005e4 <BSP_SD_Init+0xf4>)
 8000580:	4413      	add	r3, r2
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f830 	bl	80005e8 <MX_SDMMC1_SD_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d003      	beq.n	8000596 <BSP_SD_Init+0xa6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800058e:	f06f 0303 	mvn.w	r3, #3
 8000592:	627b      	str	r3, [r7, #36]	@ 0x24
 8000594:	e01d      	b.n	80005d2 <BSP_SD_Init+0xe2>
        }
#if (USE_SD_BUS_WIDE_4B > 0)
        else if(HAL_SD_ConfigWideBusOperation(&hsd_sdmmc[Instance], SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	4613      	mov	r3, r2
 800059a:	015b      	lsls	r3, r3, #5
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	4a10      	ldr	r2, [pc, #64]	@ (80005e4 <BSP_SD_Init+0xf4>)
 80005a2:	4413      	add	r3, r2
 80005a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005a8:	4618      	mov	r0, r3
 80005aa:	f008 f945 	bl	8008838 <HAL_SD_ConfigWideBusOperation>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d003      	beq.n	80005bc <BSP_SD_Init+0xcc>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80005b4:	f06f 0303 	mvn.w	r3, #3
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80005ba:	e00a      	b.n	80005d2 <BSP_SD_Init+0xe2>
        }
#endif
        else
        {
          /* Switch to High Speed mode if the card support this mode */
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4613      	mov	r3, r2
 80005c0:	015b      	lsls	r3, r3, #5
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4a07      	ldr	r2, [pc, #28]	@ (80005e4 <BSP_SD_Init+0xf4>)
 80005c8:	4413      	add	r3, r2
 80005ca:	2102      	movs	r1, #2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f008 fa45 	bl	8008a5c <HAL_SD_ConfigSpeedBusOperation>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }
    }
  }
  return ret;
 80005d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3728      	adds	r7, #40	@ 0x28
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	58024400 	.word	0x58024400
 80005e0:	58022000 	.word	0x58022000
 80005e4:	2000008c 	.word	0x2000008c

080005e8 <MX_SDMMC1_SD_Init>:
  * @brief  Initializes the SDMMC1 peripheral.
  * @param  hsd SD handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDMMC1_SD_Init(SD_HandleTypeDef *hsd)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  /* uSD device interface configuration */
  hsd->Instance                 = SDMMC1;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000634 <MX_SDMMC1_SD_Init+0x4c>)
 80005f8:	601a      	str	r2, [r3, #0]
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hsd->Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
#if (USE_SD_BUS_WIDE_4B > 0)
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_4B;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800060c:	60da      	str	r2, [r3, #12]
#else
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_1B;
#endif
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
#endif /*USE_SD_TRANSCEIVER*/
#if ( USE_SD_HIGH_PERFORMANCE > 0 )
  hsd->Init.ClockDiv            = SDMMC_HSpeed_CLK_DIV;
#else
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2204      	movs	r2, #4
 8000618:	615a      	str	r2, [r3, #20]
#endif /*USE_SD_HIGH_PERFORMANCE*/

  /* HAL SD initialization   */
  if(HAL_SD_Init(hsd) != HAL_OK)
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f007 fa3c 	bl	8007a98 <HAL_SD_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_SDMMC1_SD_Init+0x42>
  {
    ret = HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	52007000 	.word	0x52007000

08000638 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t BSP_SD_IsDetected(uint32_t Instance)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000640:	f06f 0305 	mvn.w	r3, #5
 8000644:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <BSP_SD_IsDetected+0x1a>
  {
    return BSP_ERROR_WRONG_PARAM;
 800064c:	f06f 0301 	mvn.w	r3, #1
 8000650:	e00f      	b.n	8000672 <BSP_SD_IsDetected+0x3a>
  }
  else
  {
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 8000652:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000656:	4809      	ldr	r0, [pc, #36]	@ (800067c <BSP_SD_IsDetected+0x44>)
 8000658:	f001 fa50 	bl	8001afc <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	60fb      	str	r3, [r7, #12]
    /* Check SD card detect pin */
    if(ret != GPIO_PIN_RESET)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <BSP_SD_IsDetected+0x34>
    {
      ret = (int32_t)SD_NOT_PRESENT;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	e001      	b.n	8000670 <BSP_SD_IsDetected+0x38>
    }
    else
    {
      ret = (int32_t)SD_PRESENT;
 800066c:	2301      	movs	r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000670:	68fb      	ldr	r3, [r7, #12]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	58022000 	.word	0x58022000

08000680 <BSP_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t BSP_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af02      	add	r7, sp, #8
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	2264      	movs	r2, #100	@ 0x64
 8000696:	fb02 f303 	mul.w	r3, r2, r3
 800069a:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d003      	beq.n	80006aa <BSP_SD_ReadBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80006a2:	f06f 0301 	mvn.w	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	e013      	b.n	80006d2 <BSP_SD_ReadBlocks+0x52>
  }
  else
  {
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	015b      	lsls	r3, r3, #5
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4a09      	ldr	r2, [pc, #36]	@ (80006dc <BSP_SD_ReadBlocks+0x5c>)
 80006b6:	1898      	adds	r0, r3, r2
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	68b9      	ldr	r1, [r7, #8]
 80006c2:	f007 fb13 	bl	8007cec <HAL_SD_ReadBlocks>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <BSP_SD_ReadBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80006cc:	f06f 0303 	mvn.w	r3, #3
 80006d0:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 80006d2:	697b      	ldr	r3, [r7, #20]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000008c 	.word	0x2000008c

080006e0 <BSP_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t BSP_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	2264      	movs	r2, #100	@ 0x64
 80006f6:	fb02 f303 	mul.w	r3, r2, r3
 80006fa:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d003      	beq.n	800070a <BSP_SD_WriteBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000702:	f06f 0301 	mvn.w	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	e013      	b.n	8000732 <BSP_SD_WriteBlocks+0x52>
  }
  else
  {
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	4613      	mov	r3, r2
 800070e:	015b      	lsls	r3, r3, #5
 8000710:	1a9b      	subs	r3, r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4a09      	ldr	r2, [pc, #36]	@ (800073c <BSP_SD_WriteBlocks+0x5c>)
 8000716:	1898      	adds	r0, r3, r2
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	f007 fc6d 	bl	8008000 <HAL_SD_WriteBlocks>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <BSP_SD_WriteBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800072c:	f06f 0303 	mvn.w	r3, #3
 8000730:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 8000732:	697b      	ldr	r3, [r7, #20]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000008c 	.word	0x2000008c

08000740 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t BSP_SD_GetCardState(uint32_t Instance)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4613      	mov	r3, r2
 800074c:	015b      	lsls	r3, r3, #5
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4a07      	ldr	r2, [pc, #28]	@ (8000770 <BSP_SD_GetCardState+0x30>)
 8000754:	4413      	add	r3, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f008 fa3c 	bl	8008bd4 <HAL_SD_GetCardState>
 800075c:	4603      	mov	r3, r0
 800075e:	2b04      	cmp	r3, #4
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000008c 	.word	0x2000008c

08000774 <BSP_SD_GetCardInfo>:
  * @param  Instance  SD Instance
  * @param  CardInfo  Pointer to HAL_SD_CardInfoTypedef structure
  * @retval BSP status
  */
int32_t BSP_SD_GetCardInfo(uint32_t Instance, BSP_SD_CardInfo *CardInfo)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d003      	beq.n	8000790 <BSP_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000788:	f06f 0301 	mvn.w	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	e010      	b.n	80007b2 <BSP_SD_GetCardInfo+0x3e>
  }
  else
  {
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4613      	mov	r3, r2
 8000794:	015b      	lsls	r3, r3, #5
 8000796:	1a9b      	subs	r3, r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4a08      	ldr	r2, [pc, #32]	@ (80007bc <BSP_SD_GetCardInfo+0x48>)
 800079c:	4413      	add	r3, r2
 800079e:	6839      	ldr	r1, [r7, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f008 f81d 	bl	80087e0 <HAL_SD_GetCardInfo>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <BSP_SD_GetCardInfo+0x3e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80007ac:	f06f 0303 	mvn.w	r3, #3
 80007b0:	60fb      	str	r3, [r7, #12]
    }
  }
  /* Return BSP status */
  return ret;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000008c 	.word	0x2000008c

080007c0 <SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd  SD handle
  * @retval None
  */
static void SD_MspInit(SD_HandleTypeDef *hsd)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	@ 0x30
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4a44      	ldr	r2, [pc, #272]	@ (80008dc <SD_MspInit+0x11c>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	f040 8081 	bne.w	80008d4 <SD_MspInit+0x114>
    therefore Camera must be power down before using the BSP SD
    To power down the camera , Set GPIOJ pin 14 to high
    */

    /* Enable GPIO J clock */
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007d2:	4b43      	ldr	r3, [pc, #268]	@ (80008e0 <SD_MspInit+0x120>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a41      	ldr	r2, [pc, #260]	@ (80008e0 <SD_MspInit+0x120>)
 80007da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b3f      	ldr	r3, [pc, #252]	@ (80008e0 <SD_MspInit+0x120>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007ec:	61bb      	str	r3, [r7, #24]
 80007ee:	69bb      	ldr	r3, [r7, #24]

    gpio_init_structure.Pin       = GPIO_PIN_14;
 80007f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80007f4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4836      	ldr	r0, [pc, #216]	@ (80008e4 <SD_MspInit+0x124>)
 800080a:	f000 ffc7 	bl	800179c <HAL_GPIO_Init>

    /* Set the camera POWER_DOWN pin (active high) */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000814:	4833      	ldr	r0, [pc, #204]	@ (80008e4 <SD_MspInit+0x124>)
 8000816:	f001 f989 	bl	8001b2c <HAL_GPIO_WritePin>
#endif

    /* Enable SDIO clock */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800081a:	4b31      	ldr	r3, [pc, #196]	@ (80008e0 <SD_MspInit+0x120>)
 800081c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000820:	4a2f      	ldr	r2, [pc, #188]	@ (80008e0 <SD_MspInit+0x120>)
 8000822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000826:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800082a:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <SD_MspInit+0x120>)
 800082c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	697b      	ldr	r3, [r7, #20]


    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000838:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <SD_MspInit+0x120>)
 800083a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800083e:	4a28      	ldr	r2, [pc, #160]	@ (80008e0 <SD_MspInit+0x120>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000848:	4b25      	ldr	r3, [pc, #148]	@ (80008e0 <SD_MspInit+0x120>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <SD_MspInit+0x120>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800085c:	4a20      	ldr	r2, [pc, #128]	@ (80008e0 <SD_MspInit+0x120>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000866:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <SD_MspInit+0x120>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000874:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <SD_MspInit+0x120>)
 8000876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800087a:	4a19      	ldr	r2, [pc, #100]	@ (80008e0 <SD_MspInit+0x120>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <SD_MspInit+0x120>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]


    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8000896:	2301      	movs	r3, #1
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800089e:	230c      	movs	r3, #12
 80008a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SD_BUS_WIDE_4B > 0)
    /* SDMMC GPIO CLKIN PB8, D0 PC8, D1 PC9, D2 PC10, D3 PC11, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80008a2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008a6:	61fb      	str	r3, [r7, #28]
    /* SDMMC GPIO CLKIN PB8, D0 PC8, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif

    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	480e      	ldr	r0, [pc, #56]	@ (80008e8 <SD_MspInit+0x128>)
 80008b0:	f000 ff74 	bl	800179c <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
 80008b4:	2304      	movs	r3, #4
 80008b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	480b      	ldr	r0, [pc, #44]	@ (80008ec <SD_MspInit+0x12c>)
 80008c0:	f000 ff6c 	bl	800179c <HAL_GPIO_Init>

    /* NVIC configuration for SDIO interrupts */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	210e      	movs	r1, #14
 80008c8:	2031      	movs	r0, #49	@ 0x31
 80008ca:	f000 fbee 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80008ce:	2031      	movs	r0, #49	@ 0x31
 80008d0:	f000 fc05 	bl	80010de <HAL_NVIC_EnableIRQ>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3730      	adds	r7, #48	@ 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000008c 	.word	0x2000008c
 80008e0:	58024400 	.word	0x58024400
 80008e4:	58022400 	.word	0x58022400
 80008e8:	58020800 	.word	0x58020800
 80008ec:	58020c00 	.word	0x58020c00

080008f0 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800J_Context_t pRegMode;

  if(Instance >=SDRAM_INSTANCES_NBR)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80008fe:	f06f 0301 	mvn.w	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e033      	b.n	800096e <BSP_SDRAM_Init+0x7e>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SDRAM initialization */
      SDRAM_MspInit(&hsdram[0]);
 8000906:	481c      	ldr	r0, [pc, #112]	@ (8000978 <BSP_SDRAM_Init+0x88>)
 8000908:	f000 f884 	bl	8000a14 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800090c:	481a      	ldr	r0, [pc, #104]	@ (8000978 <BSP_SDRAM_Init+0x88>)
 800090e:	f000 f837 	bl	8000980 <MX_SDRAM_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d003      	beq.n	8000920 <BSP_SDRAM_Init+0x30>
    {
      ret = BSP_ERROR_NO_INIT;
 8000918:	f04f 33ff 	mov.w	r3, #4294967295
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	e026      	b.n	800096e <BSP_SDRAM_Init+0x7e>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8000920:	4b16      	ldr	r3, [pc, #88]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000922:	2208      	movs	r2, #8
 8000924:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000928:	2203      	movs	r2, #3
 800092a:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800092c:	4b13      	ldr	r3, [pc, #76]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 800092e:	f240 6203 	movw	r2, #1539	@ 0x603
 8000932:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8000940:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000942:	2230      	movs	r2, #48	@ 0x30
 8000944:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800094c:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 800094e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000952:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8000954:	4909      	ldr	r1, [pc, #36]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000956:	4808      	ldr	r0, [pc, #32]	@ (8000978 <BSP_SDRAM_Init+0x88>)
 8000958:	f7ff fcbe 	bl	80002d8 <IS42S32800J_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <BSP_SDRAM_Init+0x7a>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8000962:	f06f 0304 	mvn.w	r3, #4
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	e001      	b.n	800096e <BSP_SDRAM_Init+0x7e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000108 	.word	0x20000108
 800097c:	2000013c 	.word	0x2000013c

08000980 <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a20      	ldr	r2, [pc, #128]	@ (8000a0c <MX_SDRAM_Init+0x8c>)
 800098c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2201      	movs	r2, #1
 8000992:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2201      	movs	r2, #1
 8000998:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2204      	movs	r2, #4
 800099e:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2220      	movs	r2, #32
 80009a4:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2240      	movs	r2, #64	@ 0x40
 80009aa:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80009b2:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009c0:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_SDRAM_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80009d4:	2307      	movs	r3, #7
 80009d6:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 80009dc:	2307      	movs	r3, #7
 80009de:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4619      	mov	r1, r3
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f008 fd96 	bl	8009524 <HAL_SDRAM_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_SDRAM_Init+0x82>
  {
    return  HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <MX_SDRAM_Init+0x84>
  }
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3728      	adds	r7, #40	@ 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	52004140 	.word	0x52004140
 8000a10:	20000108 	.word	0x20000108

08000a14 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hsdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b090      	sub	sp, #64	@ 0x40
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a1c:	4b7f      	ldr	r3, [pc, #508]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a22:	4a7e      	ldr	r2, [pc, #504]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a28:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000a2c:	4b7b      	ldr	r3, [pc, #492]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8000a3a:	4b78      	ldr	r3, [pc, #480]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a40:	4a76      	ldr	r2, [pc, #472]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000a4a:	4b74      	ldr	r3, [pc, #464]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a58:	4b70      	ldr	r3, [pc, #448]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	4a6f      	ldr	r2, [pc, #444]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a68:	4b6c      	ldr	r3, [pc, #432]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	623b      	str	r3, [r7, #32]
 8000a74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	4b69      	ldr	r3, [pc, #420]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	4a67      	ldr	r2, [pc, #412]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a86:	4b65      	ldr	r3, [pc, #404]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	61fb      	str	r3, [r7, #28]
 8000a92:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a94:	4b61      	ldr	r3, [pc, #388]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	4a60      	ldr	r2, [pc, #384]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a9c:	f043 0320 	orr.w	r3, r3, #32
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa4:	4b5d      	ldr	r3, [pc, #372]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	f003 0320 	and.w	r3, r3, #32
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab2:	4b5a      	ldr	r3, [pc, #360]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	4a58      	ldr	r2, [pc, #352]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac2:	4b56      	ldr	r3, [pc, #344]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad0:	4b52      	ldr	r3, [pc, #328]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	4a51      	ldr	r2, [pc, #324]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae0:	4b4e      	ldr	r3, [pc, #312]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000aee:	4b4b      	ldr	r3, [pc, #300]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af4:	4a49      	ldr	r2, [pc, #292]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000afe:	4b47      	ldr	r3, [pc, #284]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000b1c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b26:	4619      	mov	r1, r3
 8000b28:	483d      	ldr	r0, [pc, #244]	@ (8000c20 <SDRAM_MspInit+0x20c>)
 8000b2a:	f000 fe37 	bl	800179c <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000b2e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000b34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b38:	4619      	mov	r1, r3
 8000b3a:	483a      	ldr	r0, [pc, #232]	@ (8000c24 <SDRAM_MspInit+0x210>)
 8000b3c:	f000 fe2e 	bl	800179c <HAL_GPIO_Init>
  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000b40:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000b46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4836      	ldr	r0, [pc, #216]	@ (8000c28 <SDRAM_MspInit+0x214>)
 8000b4e:	f000 fe25 	bl	800179c <HAL_GPIO_Init>
  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8000b52:	f248 1337 	movw	r3, #33079	@ 0x8137
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4833      	ldr	r0, [pc, #204]	@ (8000c2c <SDRAM_MspInit+0x218>)
 8000b60:	f000 fe1c 	bl	800179c <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8000b64:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000b6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6e:	4619      	mov	r1, r3
 8000b70:	482f      	ldr	r0, [pc, #188]	@ (8000c30 <SDRAM_MspInit+0x21c>)
 8000b72:	f000 fe13 	bl	800179c <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8000b76:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8000b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;

  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000b7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b80:	4619      	mov	r1, r3
 8000b82:	482c      	ldr	r0, [pc, #176]	@ (8000c34 <SDRAM_MspInit+0x220>)
 8000b84:	f000 fe0a 	bl	800179c <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8000b88:	4b2b      	ldr	r3, [pc, #172]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000b8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b8e:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8000b90:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b96:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8000b98:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000b9a:	2280      	movs	r2, #128	@ 0x80
 8000b9c:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000b9e:	4b26      	ldr	r3, [pc, #152]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8000ba4:	4b24      	ldr	r3, [pc, #144]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000ba6:	f240 2202 	movw	r2, #514	@ 0x202
 8000baa:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bae:	f640 0208 	movw	r2, #2056	@ 0x808
 8000bb2:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8000bb4:	4b20      	ldr	r3, [pc, #128]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bbc:	2280      	movs	r2, #128	@ 0x80
 8000bbe:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bc6:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bd6:	2280      	movs	r2, #128	@ 0x80
 8000bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	639a      	str	r2, [r3, #56]	@ 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000be8:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <SDRAM_MspInit+0x228>)
 8000bea:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bf0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bf2:	4a11      	ldr	r2, [pc, #68]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8000bf8:	480f      	ldr	r0, [pc, #60]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bfa:	f002 fe81 	bl	8003900 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8000bfe:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000c00:	f002 fe32 	bl	8003868 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	210f      	movs	r1, #15
 8000c08:	207a      	movs	r0, #122	@ 0x7a
 8000c0a:	f000 fa4e 	bl	80010aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8000c0e:	207a      	movs	r0, #122	@ 0x7a
 8000c10:	f000 fa65 	bl	80010de <HAL_NVIC_EnableIRQ>
}
 8000c14:	bf00      	nop
 8000c16:	3740      	adds	r7, #64	@ 0x40
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58020c00 	.word	0x58020c00
 8000c24:	58021000 	.word	0x58021000
 8000c28:	58021400 	.word	0x58021400
 8000c2c:	58021800 	.word	0x58021800
 8000c30:	58021c00 	.word	0x58021c00
 8000c34:	58022000 	.word	0x58022000
 8000c38:	2000015c 	.word	0x2000015c
 8000c3c:	52000040 	.word	0x52000040

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c44:	4b37      	ldr	r3, [pc, #220]	@ (8000d24 <SystemInit+0xe4>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4a:	4a36      	ldr	r2, [pc, #216]	@ (8000d24 <SystemInit+0xe4>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c54:	4b34      	ldr	r3, [pc, #208]	@ (8000d28 <SystemInit+0xe8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	2b06      	cmp	r3, #6
 8000c5e:	d807      	bhi.n	8000c70 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c60:	4b31      	ldr	r3, [pc, #196]	@ (8000d28 <SystemInit+0xe8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f023 030f 	bic.w	r3, r3, #15
 8000c68:	4a2f      	ldr	r2, [pc, #188]	@ (8000d28 <SystemInit+0xe8>)
 8000c6a:	f043 0307 	orr.w	r3, r3, #7
 8000c6e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c70:	4b2e      	ldr	r3, [pc, #184]	@ (8000d2c <SystemInit+0xec>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a2d      	ldr	r2, [pc, #180]	@ (8000d2c <SystemInit+0xec>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d2c <SystemInit+0xec>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c82:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <SystemInit+0xec>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4929      	ldr	r1, [pc, #164]	@ (8000d2c <SystemInit+0xec>)
 8000c88:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <SystemInit+0xf0>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c8e:	4b26      	ldr	r3, [pc, #152]	@ (8000d28 <SystemInit+0xe8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d007      	beq.n	8000caa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c9a:	4b23      	ldr	r3, [pc, #140]	@ (8000d28 <SystemInit+0xe8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 030f 	bic.w	r3, r3, #15
 8000ca2:	4a21      	ldr	r2, [pc, #132]	@ (8000d28 <SystemInit+0xe8>)
 8000ca4:	f043 0307 	orr.w	r3, r3, #7
 8000ca8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <SystemInit+0xec>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <SystemInit+0xec>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <SystemInit+0xec>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <SystemInit+0xec>)
 8000cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8000d34 <SystemInit+0xf4>)
 8000cc0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <SystemInit+0xec>)
 8000cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d38 <SystemInit+0xf8>)
 8000cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <SystemInit+0xec>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	@ (8000d3c <SystemInit+0xfc>)
 8000ccc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <SystemInit+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <SystemInit+0xec>)
 8000cd6:	4a19      	ldr	r2, [pc, #100]	@ (8000d3c <SystemInit+0xfc>)
 8000cd8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cda:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <SystemInit+0xec>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <SystemInit+0xec>)
 8000ce2:	4a16      	ldr	r2, [pc, #88]	@ (8000d3c <SystemInit+0xfc>)
 8000ce4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <SystemInit+0xec>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <SystemInit+0xec>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <SystemInit+0xec>)
 8000cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cf6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <SystemInit+0xec>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <SystemInit+0x100>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <SystemInit+0x104>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d0a:	d202      	bcs.n	8000d12 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <SystemInit+0x108>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <SystemInit+0x10c>)
 8000d14:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	52002000 	.word	0x52002000
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d34:	02020200 	.word	0x02020200
 8000d38:	01ff0000 	.word	0x01ff0000
 8000d3c:	01010280 	.word	0x01010280
 8000d40:	5c001000 	.word	0x5c001000
 8000d44:	ffff0000 	.word	0xffff0000
 8000d48:	51008108 	.word	0x51008108
 8000d4c:	52004000 	.word	0x52004000

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d56:	2003      	movs	r0, #3
 8000d58:	f000 f99c 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d5c:	f003 ff9e 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8000d60:	4602      	mov	r2, r0
 8000d62:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <HAL_Init+0x68>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	0a1b      	lsrs	r3, r3, #8
 8000d68:	f003 030f 	and.w	r3, r3, #15
 8000d6c:	4913      	ldr	r1, [pc, #76]	@ (8000dbc <HAL_Init+0x6c>)
 8000d6e:	5ccb      	ldrb	r3, [r1, r3]
 8000d70:	f003 031f 	and.w	r3, r3, #31
 8000d74:	fa22 f303 	lsr.w	r3, r2, r3
 8000d78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_Init+0x68>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	4a0e      	ldr	r2, [pc, #56]	@ (8000dbc <HAL_Init+0x6c>)
 8000d84:	5cd3      	ldrb	r3, [r2, r3]
 8000d86:	f003 031f 	and.w	r3, r3, #31
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d90:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc0 <HAL_Init+0x70>)
 8000d92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d94:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <HAL_Init+0x74>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 f814 	bl	8000dc8 <HAL_InitTick>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e002      	b.n	8000db0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000daa:	f003 f905 	bl	8003fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	58024400 	.word	0x58024400
 8000dbc:	08010f70 	.word	0x08010f70
 8000dc0:	20000004 	.word	0x20000004
 8000dc4:	20000000 	.word	0x20000000

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <HAL_InitTick+0x60>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e021      	b.n	8000e20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <HAL_InitTick+0x64>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <HAL_InitTick+0x60>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f981 	bl	80010fa <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f94b 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <HAL_InitTick+0x68>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2000000c 	.word	0x2000000c
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000008 	.word	0x20000008

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	200001c8 	.word	0x200001c8

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200001c8 	.word	0x200001c8

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff ffee 	bl	8000e5c <HAL_GetTick>
 8000e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9a:	bf00      	nop
 8000e9c:	f7ff ffde 	bl	8000e5c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000000c 	.word	0x2000000c

08000ebc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ec0:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <HAL_GetREVID+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	0c1b      	lsrs	r3, r3, #16
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	5c001000 	.word	0x5c001000

08000ed4 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <HAL_EnableCompensationCell+0x1c>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_EnableCompensationCell+0x1c>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6213      	str	r3, [r2, #32]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	58000400 	.word	0x58000400

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x40>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x40>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00
 8000f38:	05fa0000 	.word	0x05fa0000

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	@ (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	@ (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	@ (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	@ 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	@ 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff29 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff40 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff90 	bl	8000fe8 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5f 	bl	8000f94 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff33 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa4 	bl	8001050 <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001118:	f3bf 8f5f 	dmb	sy
}
 800111c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <HAL_MPU_Disable+0x28>)
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_MPU_Disable+0x28>)
 8001124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001128:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800112a:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_MPU_Disable+0x2c>)
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00
 8001140:	e000ed90 	.word	0xe000ed90

08001144 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800114c:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <HAL_MPU_Enable+0x38>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_MPU_Enable+0x3c>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115a:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <HAL_MPU_Enable+0x3c>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001160:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001162:	f3bf 8f4f 	dsb	sy
}
 8001166:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001168:	f3bf 8f6f 	isb	sy
}
 800116c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed90 	.word	0xe000ed90
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	785a      	ldrb	r2, [r3, #1]
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 8001192:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 800119a:	f023 0301 	bic.w	r3, r3, #1
 800119e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80011a0:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7b1b      	ldrb	r3, [r3, #12]
 80011ac:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7adb      	ldrb	r3, [r3, #11]
 80011b2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7a9b      	ldrb	r3, [r3, #10]
 80011ba:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7b5b      	ldrb	r3, [r3, #13]
 80011c2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7b9b      	ldrb	r3, [r3, #14]
 80011ca:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7bdb      	ldrb	r3, [r3, #15]
 80011d2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7a5b      	ldrb	r3, [r3, #9]
 80011da:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7a1b      	ldrb	r3, [r3, #8]
 80011e2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011e4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011ec:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011ee:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011f0:	6113      	str	r3, [r2, #16]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed90 	.word	0xe000ed90

08001204 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e04f      	b.n	80012b6 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f00c faf0 	bl	800d810 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2202      	movs	r2, #2
 8001234:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <HAL_DMA2D_Init+0xbc>)
 8001240:	4013      	ands	r3, r2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6851      	ldr	r1, [r2, #4]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	69d2      	ldr	r2, [r2, #28]
 800124a:	4311      	orrs	r1, r2
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	430b      	orrs	r3, r1
 8001252:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <HAL_DMA2D_Init+0xc0>)
 800125c:	4013      	ands	r3, r2
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	6891      	ldr	r1, [r2, #8]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6992      	ldr	r2, [r2, #24]
 8001266:	4311      	orrs	r1, r2
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	430b      	orrs	r3, r1
 800126e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001276:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <HAL_DMA2D_Init+0xc4>)
 8001278:	4013      	ands	r3, r2
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68d1      	ldr	r1, [r2, #12]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	430b      	orrs	r3, r1
 8001284:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800128c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	051a      	lsls	r2, r3, #20
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	055b      	lsls	r3, r3, #21
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	fff8ffbf 	.word	0xfff8ffbf
 80012c4:	fffffef8 	.word	0xfffffef8
 80012c8:	ffff0000 	.word	0xffff0000

080012cc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_DMA2D_Start+0x1c>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e018      	b.n	800131a <HAL_DMA2D_Start+0x4e>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2202      	movs	r2, #2
 80012f4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f000 f9a4 	bl	8001650 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d056      	beq.n	80013ec <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800133e:	f7ff fd8d 	bl	8000e5c <HAL_GetTick>
 8001342:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001344:	e04b      	b.n	80013de <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8001354:	2b00      	cmp	r3, #0
 8001356:	d023      	beq.n	80013a0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001366:	f043 0202 	orr.w	r2, r3, #2
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2221      	movs	r2, #33	@ 0x21
 800138a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2204      	movs	r2, #4
 8001390:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0a5      	b.n	80014ec <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a6:	d01a      	beq.n	80013de <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80013a8:	f7ff fd58 	bl	8000e5c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d302      	bcc.n	80013be <HAL_DMA2D_PollForTransfer+0x9c>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10f      	bne.n	80013de <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80013c2:	f043 0220 	orr.w	r2, r3, #32
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2203      	movs	r2, #3
 80013ce:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e086      	b.n	80014ec <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0ac      	beq.n	8001346 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 0320 	and.w	r3, r3, #32
 80013f6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fe:	f003 0320 	and.w	r3, r3, #32
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d061      	beq.n	80014d2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800140e:	f7ff fd25 	bl	8000e5c <HAL_GetTick>
 8001412:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001414:	e056      	b.n	80014c4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8001424:	2b00      	cmp	r3, #0
 8001426:	d02e      	beq.n	8001486 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001436:	f043 0204 	orr.w	r2, r3, #4
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800144c:	f043 0202 	orr.w	r2, r3, #2
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001462:	f043 0201 	orr.w	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2229      	movs	r2, #41	@ 0x29
 8001470:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2204      	movs	r2, #4
 8001476:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e032      	b.n	80014ec <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d01a      	beq.n	80014c4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800148e:	f7ff fce5 	bl	8000e5c <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d302      	bcc.n	80014a4 <HAL_DMA2D_PollForTransfer+0x182>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10f      	bne.n	80014c4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014a8:	f043 0220 	orr.w	r2, r3, #32
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2203      	movs	r2, #3
 80014b4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e013      	b.n	80014ec <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0a1      	beq.n	8001416 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2212      	movs	r2, #18
 80014d8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_DMA2D_ConfigLayer+0x24>
 8001514:	2302      	movs	r3, #2
 8001516:	e092      	b.n	800163e <HAL_DMA2D_ConfigLayer+0x14a>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2202      	movs	r2, #2
 8001524:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	3328      	adds	r3, #40	@ 0x28
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	041b      	lsls	r3, r3, #16
 8001544:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800154c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8001558:	4b3c      	ldr	r3, [pc, #240]	@ (800164c <HAL_DMA2D_ConfigLayer+0x158>)
 800155a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b0a      	cmp	r3, #10
 8001562:	d003      	beq.n	800156c <HAL_DMA2D_ConfigLayer+0x78>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b09      	cmp	r3, #9
 800156a:	d107      	bne.n	800157c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	e005      	b.n	8001588 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	061b      	lsls	r3, r3, #24
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d120      	bne.n	80015d0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	43db      	mvns	r3, r3
 8001598:	ea02 0103 	and.w	r1, r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b0a      	cmp	r3, #10
 80015b6:	d003      	beq.n	80015c0 <HAL_DMA2D_ConfigLayer+0xcc>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b09      	cmp	r3, #9
 80015be:	d135      	bne.n	800162c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80015ce:	e02d      	b.n	800162c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b0b      	cmp	r3, #11
 80015d6:	d109      	bne.n	80015ec <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	049b      	lsls	r3, r3, #18
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80015ea:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	69da      	ldr	r2, [r3, #28]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	ea02 0103 	and.w	r1, r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	430a      	orrs	r2, r1
 8001602:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b0a      	cmp	r3, #10
 8001614:	d003      	beq.n	800161e <HAL_DMA2D_ConfigLayer+0x12a>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b09      	cmp	r3, #9
 800161c:	d106      	bne.n	800162c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800162a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	ff33000f 	.word	0xff33000f

08001650 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001650:	b480      	push	{r7}
 8001652:	b08b      	sub	sp, #44	@ 0x2c
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001664:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	041a      	lsls	r2, r3, #16
 800166c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800166e:	431a      	orrs	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001688:	d174      	bne.n	8001774 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001690:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001698:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80016a0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d108      	bne.n	80016c2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	431a      	orrs	r2, r3
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c0:	e053      	b.n	800176a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d106      	bne.n	80016d8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d6:	e048      	b.n	800176a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d111      	bne.n	8001704 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	0cdb      	lsrs	r3, r3, #19
 80016e4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	0a9b      	lsrs	r3, r3, #10
 80016ea:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	015a      	lsls	r2, r3, #5
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	02db      	lsls	r3, r3, #11
 80016fa:	4313      	orrs	r3, r2
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	4313      	orrs	r3, r2
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
 8001702:	e032      	b.n	800176a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d117      	bne.n	800173c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	0fdb      	lsrs	r3, r3, #31
 8001710:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	0cdb      	lsrs	r3, r3, #19
 8001716:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	0adb      	lsrs	r3, r3, #11
 800171c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	015a      	lsls	r2, r3, #5
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	431a      	orrs	r2, r3
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	03db      	lsls	r3, r3, #15
 8001732:	4313      	orrs	r3, r2
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	4313      	orrs	r3, r2
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
 800173a:	e016      	b.n	800176a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	0f1b      	lsrs	r3, r3, #28
 8001740:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	0d1b      	lsrs	r3, r3, #20
 8001746:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	0b1b      	lsrs	r3, r3, #12
 800174c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	011a      	lsls	r2, r3, #4
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	431a      	orrs	r2, r3
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	031b      	lsls	r3, r3, #12
 8001762:	4313      	orrs	r3, r2
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	4313      	orrs	r3, r2
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001770:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001772:	e00d      	b.n	8001790 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800177c:	d104      	bne.n	8001788 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	615a      	str	r2, [r3, #20]
}
 8001786:	e003      	b.n	8001790 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	60da      	str	r2, [r3, #12]
}
 8001790:	bf00      	nop
 8001792:	372c      	adds	r7, #44	@ 0x2c
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017aa:	4b89      	ldr	r3, [pc, #548]	@ (80019d0 <HAL_GPIO_Init+0x234>)
 80017ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017ae:	e194      	b.n	8001ada <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8186 	beq.w	8001ad4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d005      	beq.n	80017e0 <HAL_GPIO_Init+0x44>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d130      	bne.n	8001842 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001816:	2201      	movs	r2, #1
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f003 0201 	and.w	r2, r3, #1
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b03      	cmp	r3, #3
 800184c:	d017      	beq.n	800187e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d123      	bne.n	80018d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	220f      	movs	r2, #15
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	69b9      	ldr	r1, [r7, #24]
 80018ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0203 	and.w	r2, r3, #3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80e0 	beq.w	8001ad4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001914:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <HAL_GPIO_Init+0x238>)
 8001916:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800191a:	4a2e      	ldr	r2, [pc, #184]	@ (80019d4 <HAL_GPIO_Init+0x238>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001924:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <HAL_GPIO_Init+0x238>)
 8001926:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001932:	4a29      	ldr	r2, [pc, #164]	@ (80019d8 <HAL_GPIO_Init+0x23c>)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	220f      	movs	r2, #15
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a20      	ldr	r2, [pc, #128]	@ (80019dc <HAL_GPIO_Init+0x240>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d052      	beq.n	8001a04 <HAL_GPIO_Init+0x268>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a1f      	ldr	r2, [pc, #124]	@ (80019e0 <HAL_GPIO_Init+0x244>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <HAL_GPIO_Init+0x22e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a1e      	ldr	r2, [pc, #120]	@ (80019e4 <HAL_GPIO_Init+0x248>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d02b      	beq.n	80019c6 <HAL_GPIO_Init+0x22a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a1d      	ldr	r2, [pc, #116]	@ (80019e8 <HAL_GPIO_Init+0x24c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d025      	beq.n	80019c2 <HAL_GPIO_Init+0x226>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a1c      	ldr	r2, [pc, #112]	@ (80019ec <HAL_GPIO_Init+0x250>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d01f      	beq.n	80019be <HAL_GPIO_Init+0x222>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a1b      	ldr	r2, [pc, #108]	@ (80019f0 <HAL_GPIO_Init+0x254>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d019      	beq.n	80019ba <HAL_GPIO_Init+0x21e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a1a      	ldr	r2, [pc, #104]	@ (80019f4 <HAL_GPIO_Init+0x258>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0x21a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <HAL_GPIO_Init+0x25c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00d      	beq.n	80019b2 <HAL_GPIO_Init+0x216>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a18      	ldr	r2, [pc, #96]	@ (80019fc <HAL_GPIO_Init+0x260>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_GPIO_Init+0x212>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <HAL_GPIO_Init+0x264>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_GPIO_Init+0x20e>
 80019a6:	2309      	movs	r3, #9
 80019a8:	e02d      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019aa:	230a      	movs	r3, #10
 80019ac:	e02b      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ae:	2308      	movs	r3, #8
 80019b0:	e029      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019b2:	2307      	movs	r3, #7
 80019b4:	e027      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019b6:	2306      	movs	r3, #6
 80019b8:	e025      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ba:	2305      	movs	r3, #5
 80019bc:	e023      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019be:	2304      	movs	r3, #4
 80019c0:	e021      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019c2:	2303      	movs	r3, #3
 80019c4:	e01f      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e01d      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e01b      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ce:	bf00      	nop
 80019d0:	58000080 	.word	0x58000080
 80019d4:	58024400 	.word	0x58024400
 80019d8:	58000400 	.word	0x58000400
 80019dc:	58020000 	.word	0x58020000
 80019e0:	58020400 	.word	0x58020400
 80019e4:	58020800 	.word	0x58020800
 80019e8:	58020c00 	.word	0x58020c00
 80019ec:	58021000 	.word	0x58021000
 80019f0:	58021400 	.word	0x58021400
 80019f4:	58021800 	.word	0x58021800
 80019f8:	58021c00 	.word	0x58021c00
 80019fc:	58022000 	.word	0x58022000
 8001a00:	58022400 	.word	0x58022400
 8001a04:	2300      	movs	r3, #0
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	f002 0203 	and.w	r2, r2, #3
 8001a0c:	0092      	lsls	r2, r2, #2
 8001a0e:	4093      	lsls	r3, r2
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a16:	4938      	ldr	r1, [pc, #224]	@ (8001af8 <HAL_GPIO_Init+0x35c>)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f47f ae63 	bne.w	80017b0 <HAL_GPIO_Init+0x14>
  }
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	3724      	adds	r7, #36	@ 0x24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	58000400 	.word	0x58000400

08001afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e001      	b.n	8001b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b3c:	787b      	ldrb	r3, [r7, #1]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b48:	e003      	b.n	8001b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	041a      	lsls	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	619a      	str	r2, [r3, #24]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e070      	b.n	8001c54 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f00b fcfa 	bl	800d580 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8001bc2:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001be2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8001bf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a19      	ldr	r2, [pc, #100]	@ (8001c5c <HAL_JPEG_Init+0xfc>)
 8001bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a18      	ldr	r2, [pc, #96]	@ (8001c60 <HAL_JPEG_Init+0x100>)
 8001bfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fcdb 	bl	80025c8 <JPEG_Set_HuffEnc_Mem>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e018      	b.n	8001c54 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c30:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	08011160 	.word	0x08011160
 8001c60:	080111a0 	.word	0x080111a0

08001c64 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_JPEG_GetInfo+0x16>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e083      	b.n	8001d86 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d103      	bne.n	8001c94 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2210      	movs	r2, #16
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e017      	b.n	8001cc4 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d103      	bne.n	8001caa <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e00c      	b.n	8001cc4 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d103      	bne.n	8001cc0 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2230      	movs	r2, #48	@ 0x30
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e001      	b.n	8001cc4 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e060      	b.n	8001d86 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b10      	cmp	r3, #16
 8001ce6:	d003      	beq.n	8001cf0 <HAL_JPEG_GetInfo+0x8c>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b30      	cmp	r3, #48	@ 0x30
 8001cee:	d140      	bne.n	8001d72 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d109      	bne.n	8001d34 <HAL_JPEG_GetInfo+0xd0>
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_JPEG_GetInfo+0xd0>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d103      	bne.n	8001d34 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	e01d      	b.n	8001d70 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_JPEG_GetInfo+0xea>
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d106      	bne.n	8001d4e <HAL_JPEG_GetInfo+0xea>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d103      	bne.n	8001d4e <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	e010      	b.n	8001d70 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d109      	bne.n	8001d68 <HAL_JPEG_GetInfo+0x104>
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_JPEG_GetInfo+0x104>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d103      	bne.n	8001d68 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	e003      	b.n	8001d70 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001d6e:	e003      	b.n	8001d78 <HAL_JPEG_GetInfo+0x114>
 8001d70:	e002      	b.n	8001d78 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2200      	movs	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f001 fd17 	bl	80037ac <JPEG_GetQuality>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_JPEG_Decode_DMA+0x20>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_JPEG_Decode_DMA+0x20>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e04c      	b.n	8001e4c <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_JPEG_Decode_DMA+0x32>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e045      	b.n	8001e4c <HAL_JPEG_Decode_DMA+0xbe>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d134      	bne.n	8001e3e <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de0:	f023 020f 	bic.w	r2, r3, #15
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dec:	f043 020e 	orr.w	r2, r3, #14
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fe57 	bl	8002acc <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f001 f978 	bl	8003114 <JPEG_DMA_StartProcess>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00f      	beq.n	8001e4a <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2206      	movs	r2, #6
 8001e2e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e006      	b.n	8001e4c <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8001e46:	2302      	movs	r3, #2
 8001e48:	e000      	b.n	8001e4c <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d116      	bne.n	8001e9c <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d033      	beq.n	8001ef6 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e92:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e9a:	e02c      	b.n	8001ef6 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d126      	bne.n	8001ef6 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f043 0306 	orr.w	r3, r3, #6
 8001ec4:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001ee2:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	43da      	mvns	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3b03      	subs	r3, #3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d813      	bhi.n	8001f9e <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d103      	bne.n	8001f8a <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fe16 	bl	8002bb4 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8001f88:	e00b      	b.n	8001fa2 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d105      	bne.n	8001fa2 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f001 f956 	bl	8003248 <JPEG_DMA_ContinueProcess>
      break;
 8001f9c:	e001      	b.n	8001fa2 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8001f9e:	bf00      	nop
 8001fa0:	e000      	b.n	8001fa4 <HAL_JPEG_IRQHandler+0x44>
      break;
 8001fa2:	bf00      	nop
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b08b      	sub	sp, #44	@ 0x2c
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	e020      	b.n	8002006 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	4413      	add	r3, r2
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8001fce:	6a3a      	ldr	r2, [r7, #32]
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fd8:	d90f      	bls.n	8001ffa <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e055      	b.n	800208a <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3201      	adds	r2, #1
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]
      p++;
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	623b      	str	r3, [r7, #32]
      i--;
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1ee      	bne.n	8001fde <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	3301      	adds	r3, #1
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d9db      	bls.n	8001fc4 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	4413      	add	r3, r2
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6a3a      	ldr	r2, [r7, #32]
 800201a:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	617b      	str	r3, [r7, #20]
  p = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800202a:	e027      	b.n	800207c <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	601a      	str	r2, [r3, #0]
      p++;
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	3301      	adds	r3, #1
 800203c:	623b      	str	r3, [r7, #32]
      code++;
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	3301      	adds	r3, #1
 8002042:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	4413      	add	r3, r2
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	4293      	cmp	r3, r2
 8002052:	d0eb      	beq.n	800202c <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b1f      	cmp	r3, #31
 8002058:	d901      	bls.n	800205e <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e015      	b.n	800208a <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800205e:	2201      	movs	r2, #1
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	429a      	cmp	r2, r3
 800206a:	d301      	bcc.n	8002070 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e00c      	b.n	800208a <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
    si++;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	4413      	add	r3, r2
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1dd      	bne.n	8002044 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	372c      	adds	r7, #44	@ 0x2c
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800209c:	af00      	add	r7, sp, #0
 800209e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80020a2:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80020a6:	6018      	str	r0, [r3, #0]
 80020a8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80020ac:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80020b0:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80020b2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80020b6:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	f107 020c 	add.w	r2, r7, #12
 80020c4:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80020c8:	f7ff ff70 	bl	8001fac <JPEG_Bits_To_SizeCodes>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 80020d2:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80020da:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80020de:	e075      	b.n	80021cc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 80020e6:	e067      	b.n	80021b8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80020e8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80020ec:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80020f6:	4413      	add	r3, r2
 80020f8:	3310      	adds	r3, #16
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8002100:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8002108:	23a0      	movs	r3, #160	@ 0xa0
 800210a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800210e:	e021      	b.n	8002154 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8002110:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002114:	2bf0      	cmp	r3, #240	@ 0xf0
 8002116:	d103      	bne.n	8002120 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8002118:	23a1      	movs	r3, #161	@ 0xa1
 800211a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800211e:	e019      	b.n	8002154 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8002120:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 800212e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800213a:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	461a      	mov	r2, r3
 8002148:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800214c:	4413      	add	r3, r2
 800214e:	3b01      	subs	r3, #1
 8002150:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8002154:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002158:	2ba1      	cmp	r3, #161	@ 0xa1
 800215a:	d901      	bls.n	8002160 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800215c:	2301      	movs	r3, #1
 800215e:	e035      	b.n	80021cc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002160:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002164:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002168:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800216c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002170:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002174:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800217e:	3328      	adds	r3, #40	@ 0x28
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002186:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800218a:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800218e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002192:	4413      	add	r3, r2
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	3b01      	subs	r3, #1
 8002198:	b2d9      	uxtb	r1, r3
 800219a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800219e:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80021a8:	4413      	add	r3, r2
 80021aa:	460a      	mov	r2, r1
 80021ac:	701a      	strb	r2, [r3, #0]
      k++;
 80021ae:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80021b2:	3301      	adds	r3, #1
 80021b4:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 80021b8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80021bc:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d38e      	bcc.n	80020e8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 80021dc:	af00      	add	r7, sp, #0
 80021de:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80021e2:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80021e6:	6018      	str	r0, [r3, #0]
 80021e8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80021ec:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80021f0:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80021f2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80021f6:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8002200:	f107 0208 	add.w	r2, r7, #8
 8002204:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8002208:	f7ff fed0 	bl	8001fac <JPEG_Bits_To_SizeCodes>
 800220c:	4603      	mov	r3, r0
 800220e:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8002212:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800221a:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800221e:	e048      	b.n	80022b2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8002226:	e03d      	b.n	80022a4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8002228:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800222c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8002236:	4413      	add	r3, r2
 8002238:	3310      	adds	r3, #16
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8002240:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002244:	2b0b      	cmp	r3, #11
 8002246:	d901      	bls.n	800224c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002248:	2301      	movs	r3, #1
 800224a:	e032      	b.n	80022b2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800224c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002250:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8002254:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8002258:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800225c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002260:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002264:	6819      	ldr	r1, [r3, #0]
 8002266:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800226a:	3302      	adds	r3, #2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002272:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002276:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800227a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800227e:	4413      	add	r3, r2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3b01      	subs	r3, #1
 8002284:	b2d9      	uxtb	r1, r3
 8002286:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800228a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002294:	4413      	add	r3, r2
 8002296:	460a      	mov	r2, r1
 8002298:	701a      	strb	r2, [r3, #0]
      k++;
 800229a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800229e:	3301      	adds	r3, #1
 80022a0:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 80022a4:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 80022a8:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d3bb      	bcc.n	8002228 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b09a      	sub	sp, #104	@ 0x68
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d106      	bne.n	80022e4 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 80022de:	3318      	adds	r3, #24
 80022e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80022e2:	e00f      	b.n	8002304 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d106      	bne.n	8002300 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 80022fa:	3318      	adds	r3, #24
 80022fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80022fe:	e001      	b.n	8002304 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e059      	b.n	80023b8 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d055      	beq.n	80023b6 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	68b8      	ldr	r0, [r7, #8]
 8002312:	f7ff ff60 	bl	80021d6 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8002316:	4603      	mov	r3, r0
 8002318:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800231c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8002324:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002328:	e046      	b.n	80023b8 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800232a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800232c:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800232e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002330:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002334:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002338:	3304      	adds	r3, #4
 800233a:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800233c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800233e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002342:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8002344:	230c      	movs	r3, #12
 8002346:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8002348:	e032      	b.n	80023b0 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800234a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800234c:	3b01      	subs	r3, #1
 800234e:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8002350:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002352:	3b04      	subs	r3, #4
 8002354:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002356:	f107 0214 	add.w	r2, r7, #20
 800235a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800235c:	4413      	add	r3, r2
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002366:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002368:	3302      	adds	r3, #2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	3368      	adds	r3, #104	@ 0x68
 800236e:	443b      	add	r3, r7
 8002370:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	4313      	orrs	r3, r2
 8002378:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800237a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800237c:	3b01      	subs	r3, #1
 800237e:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002380:	f107 0214 	add.w	r2, r7, #20
 8002384:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002386:	4413      	add	r3, r2
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002392:	3302      	adds	r3, #2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	3368      	adds	r3, #104	@ 0x68
 8002398:	443b      	add	r3, r7
 800239a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	4313      	orrs	r3, r2
 80023a2:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80023a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a6:	041a      	lsls	r2, r3, #16
 80023a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023aa:	431a      	orrs	r2, r3
 80023ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023ae:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80023b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d8c9      	bhi.n	800234a <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3768      	adds	r7, #104	@ 0x68
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80023cc:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80023d0:	6018      	str	r0, [r3, #0]
 80023d2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80023d6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80023da:	6019      	str	r1, [r3, #0]
 80023dc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80023e0:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80023e4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80023e6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80023ea:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023f6:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80023fa:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d10c      	bne.n	800241e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002404:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002408:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002414:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002418:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800241c:	e01d      	b.n	800245a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800241e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002422:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800242e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8002432:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d10c      	bne.n	8002456 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800243c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002440:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800244c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002450:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8002454:	e001      	b.n	800245a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0a8      	b.n	80025ac <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800245a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800245e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a0 	beq.w	80025aa <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800246a:	f107 0214 	add.w	r2, r7, #20
 800246e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002472:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002476:	4611      	mov	r1, r2
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	f7ff fe0c 	bl	8002096 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800247e:	4603      	mov	r3, r0
 8002480:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8002484:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800248c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002490:	e08c      	b.n	80025ac <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8002492:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002496:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80024a0:	e00e      	b.n	80024c0 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 80024a2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024a6:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80024aa:	601a      	str	r2, [r3, #0]
      addressDef++;
 80024ac:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024b0:	3304      	adds	r3, #4
 80024b2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80024b6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80024ba:	3301      	adds	r3, #1
 80024bc:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80024c0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d9ec      	bls.n	80024a2 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 80024c8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024cc:	4a3a      	ldr	r2, [pc, #232]	@ (80025b8 <JPEG_Set_HuffAC_Mem+0x1f8>)
 80024ce:	601a      	str	r2, [r3, #0]
    addressDef++;
 80024d0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024d4:	3304      	adds	r3, #4
 80024d6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 80024da:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024de:	4a37      	ldr	r2, [pc, #220]	@ (80025bc <JPEG_Set_HuffAC_Mem+0x1fc>)
 80024e0:	601a      	str	r2, [r3, #0]
    addressDef++;
 80024e2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024e6:	3304      	adds	r3, #4
 80024e8:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 80024ec:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024f0:	4a33      	ldr	r2, [pc, #204]	@ (80025c0 <JPEG_Set_HuffAC_Mem+0x200>)
 80024f2:	601a      	str	r2, [r3, #0]
    addressDef++;
 80024f4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024f8:	3304      	adds	r3, #4
 80024fa:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 80024fe:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002502:	4a30      	ldr	r2, [pc, #192]	@ (80025c4 <JPEG_Set_HuffAC_Mem+0x204>)
 8002504:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8002506:	23a2      	movs	r3, #162	@ 0xa2
 8002508:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 800250c:	e049      	b.n	80025a2 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800250e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002512:	3b01      	subs	r3, #1
 8002514:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8002518:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800251c:	3b04      	subs	r3, #4
 800251e:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002522:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002526:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800252a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800252e:	4413      	add	r3, r2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002538:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800253c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8002540:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002544:	3328      	adds	r3, #40	@ 0x28
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8002554:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002558:	3b01      	subs	r3, #1
 800255a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800255e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002562:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8002566:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800256a:	4413      	add	r3, r2
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002574:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002578:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800257c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002580:	3328      	adds	r3, #40	@ 0x28
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002590:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8002594:	041a      	lsls	r2, r3, #16
 8002596:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800259a:	431a      	orrs	r2, r3
 800259c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80025a0:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80025a2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d8b1      	bhi.n	800250e <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	0fd10fd0 	.word	0x0fd10fd0
 80025bc:	0fd30fd2 	.word	0x0fd30fd2
 80025c0:	0fd50fd4 	.word	0x0fd50fd4
 80025c4:	0fd70fd6 	.word	0x0fd70fd6

080025c8 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f84d 	bl	8002670 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80025de:	461a      	mov	r2, r3
 80025e0:	491f      	ldr	r1, [pc, #124]	@ (8002660 <JPEG_Set_HuffEnc_Mem+0x98>)
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff feec 	bl	80023c0 <JPEG_Set_HuffAC_Mem>
 80025e8:	4603      	mov	r3, r0
 80025ea:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	e030      	b.n	8002658 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80025fe:	461a      	mov	r2, r3
 8002600:	4918      	ldr	r1, [pc, #96]	@ (8002664 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff fedc 	bl	80023c0 <JPEG_Set_HuffAC_Mem>
 8002608:	4603      	mov	r3, r0
 800260a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	e020      	b.n	8002658 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800261e:	461a      	mov	r2, r3
 8002620:	4911      	ldr	r1, [pc, #68]	@ (8002668 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff fe4a 	bl	80022bc <JPEG_Set_HuffDC_Mem>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	e010      	b.n	8002658 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800263e:	461a      	mov	r2, r3
 8002640:	490a      	ldr	r1, [pc, #40]	@ (800266c <JPEG_Set_HuffEnc_Mem+0xa4>)
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fe3a 	bl	80022bc <JPEG_Set_HuffDC_Mem>
 8002648:	4603      	mov	r3, r0
 800264a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	e000      	b.n	8002658 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	08010fb8 	.word	0x08010fb8
 8002664:	0801106c 	.word	0x0801106c
 8002668:	08010f80 	.word	0x08010f80
 800266c:	08010f9c 	.word	0x08010f9c

08002670 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8002670:	b480      	push	{r7}
 8002672:	b08b      	sub	sp, #44	@ 0x2c
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8002678:	4b80      	ldr	r3, [pc, #512]	@ (800287c <JPEG_Set_Huff_DHTMem+0x20c>)
 800267a:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800267c:	4b80      	ldr	r3, [pc, #512]	@ (8002880 <JPEG_Set_Huff_DHTMem+0x210>)
 800267e:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8002680:	4b80      	ldr	r3, [pc, #512]	@ (8002884 <JPEG_Set_Huff_DHTMem+0x214>)
 8002682:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8002684:	4b80      	ldr	r3, [pc, #512]	@ (8002888 <JPEG_Set_Huff_DHTMem+0x218>)
 8002686:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002690:	330c      	adds	r3, #12
 8002692:	623b      	str	r3, [r7, #32]
  index = 16;
 8002694:	2310      	movs	r3, #16
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002698:	e01d      	b.n	80026d6 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	3b01      	subs	r3, #1
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	3b02      	subs	r3, #2
 80026a8:	6979      	ldr	r1, [r7, #20]
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80026ae:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	3b03      	subs	r3, #3
 80026b4:	6979      	ldr	r1, [r7, #20]
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80026ba:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80026bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026be:	3a04      	subs	r2, #4
 80026c0:	6979      	ldr	r1, [r7, #20]
 80026c2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80026c4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	601a      	str	r2, [r3, #0]
    address--;
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	3b04      	subs	r3, #4
 80026ce:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	3b04      	subs	r3, #4
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d8de      	bhi.n	800269a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80026e4:	3318      	adds	r3, #24
 80026e6:	623b      	str	r3, [r7, #32]
  index = 12;
 80026e8:	230c      	movs	r3, #12
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80026ec:	e021      	b.n	8002732 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	3b01      	subs	r3, #1
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4413      	add	r3, r2
 80026f6:	7c1b      	ldrb	r3, [r3, #16]
 80026f8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	3b02      	subs	r3, #2
 80026fe:	6979      	ldr	r1, [r7, #20]
 8002700:	440b      	add	r3, r1
 8002702:	7c1b      	ldrb	r3, [r3, #16]
 8002704:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002706:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	3b03      	subs	r3, #3
 800270c:	6979      	ldr	r1, [r7, #20]
 800270e:	440b      	add	r3, r1
 8002710:	7c1b      	ldrb	r3, [r3, #16]
 8002712:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002714:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8002716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002718:	3a04      	subs	r2, #4
 800271a:	6979      	ldr	r1, [r7, #20]
 800271c:	440a      	add	r2, r1
 800271e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002720:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	601a      	str	r2, [r3, #0]
    address--;
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	3b04      	subs	r3, #4
 800272a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	3b04      	subs	r3, #4
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	2b03      	cmp	r3, #3
 8002736:	d8da      	bhi.n	80026ee <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002740:	3328      	adds	r3, #40	@ 0x28
 8002742:	623b      	str	r3, [r7, #32]
  index = 16;
 8002744:	2310      	movs	r3, #16
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002748:	e01d      	b.n	8002786 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	3b01      	subs	r3, #1
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	3b02      	subs	r3, #2
 8002758:	69f9      	ldr	r1, [r7, #28]
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800275e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	3b03      	subs	r3, #3
 8002764:	69f9      	ldr	r1, [r7, #28]
 8002766:	5ccb      	ldrb	r3, [r1, r3]
 8002768:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800276a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800276c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800276e:	3a04      	subs	r2, #4
 8002770:	69f9      	ldr	r1, [r7, #28]
 8002772:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002774:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	601a      	str	r2, [r3, #0]
    address--;
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	3b04      	subs	r3, #4
 800277e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	3b04      	subs	r3, #4
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	2b03      	cmp	r3, #3
 800278a:	d8de      	bhi.n	800274a <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002794:	33cc      	adds	r3, #204	@ 0xcc
 8002796:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b3b      	ldr	r3, [pc, #236]	@ (800288c <JPEG_Set_Huff_DHTMem+0x21c>)
 800279e:	4013      	ands	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80027a8:	021a      	lsls	r2, r3, #8
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
  *address = value;
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	3b04      	subs	r3, #4
 80027c2:	623b      	str	r3, [r7, #32]
  index = 160;
 80027c4:	23a0      	movs	r3, #160	@ 0xa0
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80027c8:	e021      	b.n	800280e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	3b01      	subs	r3, #1
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	7c1b      	ldrb	r3, [r3, #16]
 80027d4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	3b02      	subs	r3, #2
 80027da:	69f9      	ldr	r1, [r7, #28]
 80027dc:	440b      	add	r3, r1
 80027de:	7c1b      	ldrb	r3, [r3, #16]
 80027e0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80027e2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	3b03      	subs	r3, #3
 80027e8:	69f9      	ldr	r1, [r7, #28]
 80027ea:	440b      	add	r3, r1
 80027ec:	7c1b      	ldrb	r3, [r3, #16]
 80027ee:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80027f0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80027f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f4:	3a04      	subs	r2, #4
 80027f6:	69f9      	ldr	r1, [r7, #28]
 80027f8:	440a      	add	r2, r1
 80027fa:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80027fc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	601a      	str	r2, [r3, #0]
    address--;
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	3b04      	subs	r3, #4
 8002806:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	3b04      	subs	r3, #4
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	2b03      	cmp	r3, #3
 8002812:	d8da      	bhi.n	80027ca <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800281c:	33cc      	adds	r3, #204	@ 0xcc
 800281e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	785b      	ldrb	r3, [r3, #1]
 800282c:	061a      	lsls	r2, r3, #24
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	431a      	orrs	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	041b      	lsls	r3, r3, #16
 8002838:	4313      	orrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800284a:	33dc      	adds	r3, #220	@ 0xdc
 800284c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <JPEG_Set_Huff_DHTMem+0x21c>)
 8002854:	4013      	ands	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	7bdb      	ldrb	r3, [r3, #15]
 800285c:	021a      	lsls	r2, r3, #8
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4313      	orrs	r3, r2
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	7b92      	ldrb	r2, [r2, #14]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  *address = value;
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	3b04      	subs	r3, #4
 8002874:	623b      	str	r3, [r7, #32]
  index = 12;
 8002876:	230c      	movs	r3, #12
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800287a:	e027      	b.n	80028cc <JPEG_Set_Huff_DHTMem+0x25c>
 800287c:	08010fb8 	.word	0x08010fb8
 8002880:	0801106c 	.word	0x0801106c
 8002884:	08010f80 	.word	0x08010f80
 8002888:	08010f9c 	.word	0x08010f9c
 800288c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	3301      	adds	r3, #1
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	5cd3      	ldrb	r3, [r2, r3]
 8002898:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800289a:	6939      	ldr	r1, [r7, #16]
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	440b      	add	r3, r1
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80028a4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	3b01      	subs	r3, #1
 80028aa:	6939      	ldr	r1, [r7, #16]
 80028ac:	5ccb      	ldrb	r3, [r1, r3]
 80028ae:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80028b0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80028b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b4:	3a02      	subs	r2, #2
 80028b6:	6939      	ldr	r1, [r7, #16]
 80028b8:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80028ba:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	601a      	str	r2, [r3, #0]
    address--;
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	3b04      	subs	r3, #4
 80028c4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	3b04      	subs	r3, #4
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80028cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d8de      	bhi.n	8002890 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80028da:	33dc      	adds	r3, #220	@ 0xdc
 80028dc:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	7c5b      	ldrb	r3, [r3, #17]
 80028ea:	061a      	lsls	r2, r3, #24
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	7c1b      	ldrb	r3, [r3, #16]
 80028f4:	041b      	lsls	r3, r3, #16
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002908:	33e8      	adds	r3, #232	@ 0xe8
 800290a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b6d      	ldr	r3, [pc, #436]	@ (8002ac8 <JPEG_Set_Huff_DHTMem+0x458>)
 8002912:	4013      	ands	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	7edb      	ldrb	r3, [r3, #27]
 800291a:	021a      	lsls	r2, r3, #8
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	7e92      	ldrb	r2, [r2, #26]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	3b04      	subs	r3, #4
 8002932:	623b      	str	r3, [r7, #32]
  index = 8;
 8002934:	2308      	movs	r3, #8
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002938:	e021      	b.n	800297e <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	3301      	adds	r3, #1
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	7c1b      	ldrb	r3, [r3, #16]
 8002944:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002946:	6939      	ldr	r1, [r7, #16]
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	440b      	add	r3, r1
 800294c:	3310      	adds	r3, #16
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002952:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	3b01      	subs	r3, #1
 8002958:	6939      	ldr	r1, [r7, #16]
 800295a:	440b      	add	r3, r1
 800295c:	7c1b      	ldrb	r3, [r3, #16]
 800295e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002960:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8002962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002964:	3a02      	subs	r2, #2
 8002966:	6939      	ldr	r1, [r7, #16]
 8002968:	440a      	add	r2, r1
 800296a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800296c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	601a      	str	r2, [r3, #0]
    address--;
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	3b04      	subs	r3, #4
 8002976:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	3b04      	subs	r3, #4
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	2b03      	cmp	r3, #3
 8002982:	d8da      	bhi.n	800293a <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800298c:	33e8      	adds	r3, #232	@ 0xe8
 800298e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	785b      	ldrb	r3, [r3, #1]
 800299c:	061a      	lsls	r2, r3, #24
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	041b      	lsls	r3, r3, #16
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
  *address = value;
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80029ba:	33f8      	adds	r3, #248	@ 0xf8
 80029bc:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b41      	ldr	r3, [pc, #260]	@ (8002ac8 <JPEG_Set_Huff_DHTMem+0x458>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	7bdb      	ldrb	r3, [r3, #15]
 80029cc:	021a      	lsls	r2, r3, #8
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	7b92      	ldrb	r2, [r2, #14]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  *address = value;
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	3b04      	subs	r3, #4
 80029e4:	623b      	str	r3, [r7, #32]
  index = 12;
 80029e6:	230c      	movs	r3, #12
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80029ea:	e01d      	b.n	8002a28 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	3301      	adds	r3, #1
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
 80029f4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80029f6:	69b9      	ldr	r1, [r7, #24]
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	440b      	add	r3, r1
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002a00:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	3b01      	subs	r3, #1
 8002a06:	69b9      	ldr	r1, [r7, #24]
 8002a08:	5ccb      	ldrb	r3, [r1, r3]
 8002a0a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002a0c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a10:	3a02      	subs	r2, #2
 8002a12:	69b9      	ldr	r1, [r7, #24]
 8002a14:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002a16:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	601a      	str	r2, [r3, #0]
    address--;
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	3b04      	subs	r3, #4
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d8de      	bhi.n	80029ec <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002a36:	33f8      	adds	r3, #248	@ 0xf8
 8002a38:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	7c5b      	ldrb	r3, [r3, #17]
 8002a46:	061a      	lsls	r2, r3, #24
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	7c1b      	ldrb	r3, [r3, #16]
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002a64:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002a68:	623b      	str	r3, [r7, #32]
  index = 160;
 8002a6a:	23a0      	movs	r3, #160	@ 0xa0
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a6e:	e021      	b.n	8002ab4 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	3301      	adds	r3, #1
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	7c1b      	ldrb	r3, [r3, #16]
 8002a7a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002a7c:	69b9      	ldr	r1, [r7, #24]
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	440b      	add	r3, r1
 8002a82:	3310      	adds	r3, #16
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002a88:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	69b9      	ldr	r1, [r7, #24]
 8002a90:	440b      	add	r3, r1
 8002a92:	7c1b      	ldrb	r3, [r3, #16]
 8002a94:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002a96:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8002a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9a:	3a02      	subs	r2, #2
 8002a9c:	69b9      	ldr	r1, [r7, #24]
 8002a9e:	440a      	add	r2, r1
 8002aa0:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002aa2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	601a      	str	r2, [r3, #0]
    address--;
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	3b04      	subs	r3, #4
 8002aac:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	3b04      	subs	r3, #4
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d8da      	bhi.n	8002a70 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8002aba:	bf00      	nop
 8002abc:	bf00      	nop
 8002abe:	372c      	adds	r7, #44	@ 0x2c
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	ffff0000 	.word	0xffff0000

08002acc <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d108      	bne.n	8002afe <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0208 	orr.w	r2, r2, #8
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	e007      	b.n	8002b0e <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0208 	bic.w	r2, r2, #8
 8002b0c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002b2c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b4c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002b5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0201 	orr.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d108      	bne.n	8002b8c <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8002b88:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b8a:	e00d      	b.n	8002ba8 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	d107      	bne.n	8002ba8 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002ba6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d125      	bne.n	8002c14 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d01e      	beq.n	8002c14 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff f841 	bl	8001c64 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3304      	adds	r3, #4
 8002bec:	4619      	mov	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f009 faca 	bl	800c188 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c12:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d116      	bne.n	8002c4e <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002c2e:	2108      	movs	r1, #8
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f988 	bl	8002f46 <JPEG_ReadInputData>
 8002c36:	e00a      	b.n	8002c4e <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8002c46:	2101      	movs	r1, #1
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f97c 	bl	8002f46 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d116      	bne.n	8002c88 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d004      	beq.n	8002c72 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002c68:	2108      	movs	r1, #8
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f864 	bl	8002d38 <JPEG_StoreOutputData>
 8002c70:	e00a      	b.n	8002c88 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8002c80:	2101      	movs	r1, #1
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f858 	bl	8002d38 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d14b      	bne.n	8002d2e <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0201 	bic.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d107      	bne.n	8002cc2 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002cc0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002cd0:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69d9      	ldr	r1, [r3, #28]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f009 fa99 	bl	800c21c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf4:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfa:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d103      	bne.n	8002d24 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f009 faa1 	bl	800c264 <HAL_JPEG_DecodeCpltCallback>
 8002d22:	e002      	b.n	8002d2a <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff f911 	bl	8001f4c <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d34b      	bcc.n	8002dec <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e031      	b.n	8002dbe <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d60:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	4413      	add	r3, r2
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	0a19      	lsrs	r1, r3, #8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7e:	3301      	adds	r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	b2ca      	uxtb	r2, r1
 8002d84:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	0c19      	lsrs	r1, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	3302      	adds	r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	b2ca      	uxtb	r2, r1
 8002d98:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	0e19      	lsrs	r1, r3, #24
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	3303      	adds	r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	b2ca      	uxtb	r2, r1
 8002dac:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	1d1a      	adds	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d3c9      	bcc.n	8002d5a <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	f040 80b5 	bne.w	8002f3e <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69d9      	ldr	r1, [r3, #28]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f009 fa1c 	bl	800c21c <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8002dea:	e0a8      	b.n	8002f3e <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	429a      	cmp	r2, r3
 8002df6:	f240 80a2 	bls.w	8002f3e <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	e031      	b.n	8002e72 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e14:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	4413      	add	r3, r2
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	0a19      	lsrs	r1, r3, #8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	3301      	adds	r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	b2ca      	uxtb	r2, r1
 8002e38:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	0c19      	lsrs	r1, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	3302      	adds	r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	b2ca      	uxtb	r2, r1
 8002e4c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	0e19      	lsrs	r1, r3, #24
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	3303      	adds	r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	b2ca      	uxtb	r2, r1
 8002e60:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	1d1a      	adds	r2, r3, #4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d3c9      	bcc.n	8002e0e <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d10b      	bne.n	8002e9e <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69d9      	ldr	r1, [r3, #28]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	461a      	mov	r2, r3
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f009 f9c3 	bl	800c21c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002e9c:	e04f      	b.n	8002f3e <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb0:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e015      	b.n	8002ee4 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	fa22 f103 	lsr.w	r1, r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	4413      	add	r3, r2
 8002ed0:	b2ca      	uxtb	r2, r1
 8002ed2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d3e5      	bcc.n	8002eb8 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69d9      	ldr	r1, [r3, #28]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f009 f990 	bl	800c21c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f1c3 0304 	rsb	r3, r3, #4
 8002f08:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	e013      	b.n	8002f38 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	fa22 f103 	lsr.w	r1, r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	4413      	add	r3, r2
 8002f24:	b2ca      	uxtb	r2, r1
 8002f26:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	3301      	adds	r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d9e8      	bls.n	8002f10 <JPEG_StoreOutputData+0x1d8>
}
 8002f3e:	bf00      	nop
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b088      	sub	sp, #32
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <JPEG_ReadInputData+0x1c>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8002f62:	2101      	movs	r1, #1
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7fe ff75 	bl	8001e54 <HAL_JPEG_Pause>
 8002f6a:	e028      	b.n	8002fbe <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d906      	bls.n	8002f86 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	e01b      	b.n	8002fbe <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d115      	bne.n	8002fbe <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f009 f901 	bl	800c1a0 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d905      	bls.n	8002fb2 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002faa:	f023 0203 	bic.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbc:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f040 809f 	bne.w	800310a <JPEG_ReadInputData+0x1c4>
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 809b 	beq.w	800310a <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d335      	bcc.n	800304e <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e02d      	b.n	8003044 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3301      	adds	r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003008:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6999      	ldr	r1, [r3, #24]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3302      	adds	r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800301a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	3303      	adds	r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003030:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003032:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	1d1a      	adds	r2, r3, #4
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	3301      	adds	r3, #1
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d3cd      	bcc.n	8002fe8 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800304c:	e05d      	b.n	800310a <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d035      	beq.n	80030c0 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8003054:	2300      	movs	r3, #0
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	e02d      	b.n	80030b6 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699a      	ldr	r2, [r3, #24]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	3301      	adds	r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800307a:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6999      	ldr	r1, [r3, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3302      	adds	r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800308c:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3303      	adds	r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80030a2:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80030a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	1d1a      	adds	r2, r3, #4
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	3301      	adds	r3, #1
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d3cd      	bcc.n	800305a <JPEG_ReadInputData+0x114>
}
 80030be:	e024      	b.n	800310a <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	e017      	b.n	80030fa <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4413      	add	r3, r2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	3301      	adds	r3, #1
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d3e3      	bcc.n	80030ca <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800310a:	bf00      	nop
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b087      	sub	sp, #28
 8003118:	af02      	add	r7, sp, #8
 800311a:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003122:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312a:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	429a      	cmp	r2, r3
 8003134:	d804      	bhi.n	8003140 <JPEG_DMA_StartProcess+0x2c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	429a      	cmp	r2, r3
 800313e:	d901      	bls.n	8003144 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e074      	b.n	800322e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003148:	4a3b      	ldr	r2, [pc, #236]	@ (8003238 <JPEG_DMA_StartProcess+0x124>)
 800314a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003150:	4a3a      	ldr	r2, [pc, #232]	@ (800323c <JPEG_DMA_StartProcess+0x128>)
 8003152:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003158:	4a39      	ldr	r2, [pc, #228]	@ (8003240 <JPEG_DMA_StartProcess+0x12c>)
 800315a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003160:	4a36      	ldr	r2, [pc, #216]	@ (800323c <JPEG_DMA_StartProcess+0x128>)
 8003162:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003168:	4a36      	ldr	r2, [pc, #216]	@ (8003244 <JPEG_DMA_StartProcess+0x130>)
 800316a:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <JPEG_DMA_StartProcess+0x64>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d107      	bne.n	8003188 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800317c:	f043 0204 	orr.w	r2, r3, #4
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e052      	b.n	800322e <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003190:	68f9      	ldr	r1, [r7, #12]
 8003192:	fbb3 f1f1 	udiv	r1, r3, r1
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	fb00 f101 	mul.w	r1, r0, r1
 800319c:	1a5b      	subs	r3, r3, r1
 800319e:	1ad2      	subs	r2, r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	fbb3 f1f1 	udiv	r1, r3, r1
 80031b2:	68b8      	ldr	r0, [r7, #8]
 80031b4:	fb00 f101 	mul.w	r1, r0, r1
 80031b8:	1a5b      	subs	r3, r3, r1
 80031ba:	1ad2      	subs	r2, r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3344      	adds	r3, #68	@ 0x44
 80031ca:	4619      	mov	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	461c      	mov	r4, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d6:	2201      	movs	r2, #1
 80031d8:	9200      	str	r2, [sp, #0]
 80031da:	4622      	mov	r2, r4
 80031dc:	f000 fbe8 	bl	80039b0 <HAL_MDMA_Start_IT>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ea:	f043 0204 	orr.w	r2, r3, #4
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e01b      	b.n	800322e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	4619      	mov	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3340      	adds	r3, #64	@ 0x40
 8003206:	461c      	mov	r4, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320c:	2201      	movs	r2, #1
 800320e:	9200      	str	r2, [sp, #0]
 8003210:	4622      	mov	r2, r4
 8003212:	f000 fbcd 	bl	80039b0 <HAL_MDMA_Start_IT>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003220:	f043 0204 	orr.w	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	bd90      	pop	{r4, r7, pc}
 8003236:	bf00      	nop
 8003238:	08003547 	.word	0x08003547
 800323c:	08003735 	.word	0x08003735
 8003240:	08003673 	.word	0x08003673
 8003244:	08003785 	.word	0x08003785

08003248 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d125      	bne.n	80032a8 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01e      	beq.n	80032a8 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7fe fcf7 	bl	8001c64 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3304      	adds	r3, #4
 8003280:	4619      	mov	r1, r3
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f008 ff80 	bl	800c188 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032a6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d039      	beq.n	800332a <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ba:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80032e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80032f0:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d104      	bne.n	800330a <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fbd4 	bl	8003ab2 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d105      	bne.n	8003324 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fbc8 	bl	8003ab2 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8003322:	e002      	b.n	800332a <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f804 	bl	8003332 <JPEG_DMA_EndProcess>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800334a:	1ad2      	subs	r2, r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	429a      	cmp	r2, r3
 800335a:	d10a      	bne.n	8003372 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69d9      	ldr	r1, [r3, #28]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003364:	461a      	mov	r2, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f008 ff58 	bl	800c21c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	d134      	bne.n	80033ea <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69d9      	ldr	r1, [r3, #28]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	461a      	mov	r2, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f008 ff42 	bl	800c21c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b2:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b8:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d103      	bne.n	80033e2 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f008 ff42 	bl	800c264 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 80033e0:	e00c      	b.n	80033fc <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fe fdb2 	bl	8001f4c <HAL_JPEG_EncodeCpltCallback>
}
 80033e8:	e008      	b.n	80033fc <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f804 	bl	8003404 <JPEG_DMA_PollResidualData>
}
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800340c:	2310      	movs	r3, #16
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	e04f      	b.n	80034b2 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003416:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d146      	bne.n	80034ac <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	d03f      	beq.n	80034ac <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003432:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	4413      	add	r3, r2
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	0a19      	lsrs	r1, r3, #8
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	3301      	adds	r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	b2ca      	uxtb	r2, r1
 8003456:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	0c19      	lsrs	r1, r3, #16
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	3302      	adds	r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	b2ca      	uxtb	r2, r1
 800346a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	0e19      	lsrs	r1, r3, #24
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	3303      	adds	r3, #3
 800347a:	4413      	add	r3, r2
 800347c:	b2ca      	uxtb	r2, r1
 800347e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	1d1a      	adds	r2, r3, #4
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003492:	429a      	cmp	r2, r3
 8003494:	d10a      	bne.n	80034ac <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69d9      	ldr	r1, [r3, #28]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	461a      	mov	r2, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f008 febb 	bl	800c21c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1ac      	bne.n	8003412 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034bc:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <JPEG_DMA_PollResidualData+0xd2>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d133      	bne.n	800353e <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0201 	bic.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69d9      	ldr	r1, [r3, #28]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	461a      	mov	r2, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f008 fe8f 	bl	800c21c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003508:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d103      	bne.n	8003538 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f008 fe97 	bl	800c264 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8003536:	e002      	b.n	800353e <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7fe fd07 	bl	8001f4c <HAL_JPEG_EncodeCpltCallback>
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8003546:	b590      	push	{r4, r7, lr}
 8003548:	b087      	sub	sp, #28
 800354a:	af02      	add	r7, sp, #8
 800354c:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003568:	f248 030c 	movw	r3, #32780	@ 0x800c
 800356c:	4013      	ands	r3, r2
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d17c      	bne.n	800366c <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003578:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8003588:	1ad2      	subs	r2, r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	4619      	mov	r1, r3
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f008 fe03 	bl	800c1a0 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d81f      	bhi.n	80035e4 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ae:	f043 0204 	orr.w	r2, r3, #4
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2206      	movs	r2, #6
 80035ba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f008 fe46 	bl	800c250 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 80035c4:	e052      	b.n	800366c <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	fbb3 f1f1 	udiv	r1, r3, r1
 80035d4:	68b8      	ldr	r0, [r7, #8]
 80035d6:	fb00 f101 	mul.w	r1, r0, r1
 80035da:	1a5b      	subs	r3, r3, r1
 80035dc:	1ad2      	subs	r2, r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80035e2:	e010      	b.n	8003606 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00c      	beq.n	8003606 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d006      	beq.n	8003606 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	3301      	adds	r3, #1
 8003600:	009a      	lsls	r2, r3, #2
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d124      	bne.n	800365c <JPEG_MDMAInCpltCallback+0x116>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003616:	2b00      	cmp	r3, #0
 8003618:	d020      	beq.n	800365c <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	4619      	mov	r1, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3340      	adds	r3, #64	@ 0x40
 800362a:	461c      	mov	r4, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003630:	2201      	movs	r2, #1
 8003632:	9200      	str	r2, [sp, #0]
 8003634:	4622      	mov	r2, r4
 8003636:	f000 f9bb 	bl	80039b0 <HAL_MDMA_Start_IT>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003644:	f043 0204 	orr.w	r2, r3, #4
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2206      	movs	r2, #6
 8003650:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f008 fdfb 	bl	800c250 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800365a:	e007      	b.n	800366c <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}

08003672 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8003672:	b590      	push	{r4, r7, lr}
 8003674:	b087      	sub	sp, #28
 8003676:	af02      	add	r7, sp, #8
 8003678:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003694:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003698:	4013      	ands	r3, r2
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d147      	bne.n	800372e <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d138      	bne.n	800371e <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80036ba:	1ad2      	subs	r2, r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	69d9      	ldr	r1, [r3, #28]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	461a      	mov	r2, r3
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f008 fda6 	bl	800c21c <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d120      	bne.n	800371e <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3344      	adds	r3, #68	@ 0x44
 80036e6:	4619      	mov	r1, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	461c      	mov	r4, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f2:	2201      	movs	r2, #1
 80036f4:	9200      	str	r2, [sp, #0]
 80036f6:	4622      	mov	r2, r4
 80036f8:	f000 f95a 	bl	80039b0 <HAL_MDMA_Start_IT>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00d      	beq.n	800371e <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003706:	f043 0204 	orr.w	r2, r3, #4
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2206      	movs	r2, #6
 8003712:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f008 fd9a 	bl	800c250 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800371c:	e007      	b.n	800372e <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800372c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	bd90      	pop	{r4, r7, pc}

08003734 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003760:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376e:	f043 0204 	orr.w	r2, r3, #4
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f008 fd6a 	bl	800c250 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003790:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003796:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff fdc7 	bl	8003332 <JPEG_DMA_EndProcess>
  }
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b08b      	sub	sp, #44	@ 0x2c
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3350      	adds	r3, #80	@ 0x50
 80037be:	61bb      	str	r3, [r7, #24]

  i = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80037c4:	e042      	b.n	800384c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	e033      	b.n	800383a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d103      	bne.n	80037ee <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	3364      	adds	r3, #100	@ 0x64
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ec:	e022      	b.n	8003834 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2264      	movs	r2, #100	@ 0x64
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037fa:	6a38      	ldr	r0, [r7, #32]
 80037fc:	69f9      	ldr	r1, [r7, #28]
 80037fe:	4401      	add	r1, r0
 8003800:	4818      	ldr	r0, [pc, #96]	@ (8003864 <JPEG_GetQuality+0xb8>)
 8003802:	5c41      	ldrb	r1, [r0, r1]
 8003804:	440a      	add	r2, r1
 8003806:	7812      	ldrb	r2, [r2, #0]
 8003808:	fbb3 f3f2 	udiv	r3, r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b64      	cmp	r3, #100	@ 0x64
 8003812:	d807      	bhi.n	8003824 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381e:	4413      	add	r3, r2
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
 8003822:	e007      	b.n	8003834 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8003824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003830:	4413      	add	r3, r2
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	3301      	adds	r3, #1
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d9c8      	bls.n	80037d2 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	3304      	adds	r3, #4
 8003844:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	3304      	adds	r3, #4
 800384a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	2b3c      	cmp	r3, #60	@ 0x3c
 8003850:	d9b9      	bls.n	80037c6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	099b      	lsrs	r3, r3, #6
}
 8003856:	4618      	mov	r0, r3
 8003858:	372c      	adds	r7, #44	@ 0x2c
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	08011120 	.word	0x08011120

08003868 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7fd faf4 	bl	8000e5c <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e03b      	b.n	80038f8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80038a0:	e00f      	b.n	80038c2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80038a2:	f7fd fadb 	bl	8000e5c <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b05      	cmp	r3, #5
 80038ae:	d908      	bls.n	80038c2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2240      	movs	r2, #64	@ 0x40
 80038b4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2203      	movs	r2, #3
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e01a      	b.n	80038f8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e8      	bne.n	80038a2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fad9 	bl	8003e88 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e048      	b.n	80039a4 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2200      	movs	r2, #0
 8003928:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2200      	movs	r2, #0
 8003930:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2200      	movs	r2, #0
 8003938:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2200      	movs	r2, #0
 8003940:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2200      	movs	r2, #0
 8003948:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2200      	movs	r2, #0
 8003960:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2200      	movs	r2, #0
 8003970:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	221f      	movs	r2, #31
 8003978:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e070      	b.n	8003aaa <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_MDMA_Start_IT+0x26>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e069      	b.n	8003aaa <HAL_MDMA_Start_IT+0xfa>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d158      	bne.n	8003a9c <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f9c8 	bl	8003da8 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0206 	orr.w	r2, r2, #6
 8003a26:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0210 	orr.w	r2, r2, #16
 8003a3e:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d007      	beq.n	8003a58 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0208 	orr.w	r2, r2, #8
 8003a56:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0220 	orr.w	r2, r2, #32
 8003a6e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a88:	d10e      	bne.n	8003aa8 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	e005      	b.n	8003aa8 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e000      	b.n	8003aaa <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e017      	b.n	8003af4 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d004      	beq.n	8003ada <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2280      	movs	r2, #128	@ 0x80
 8003ad4:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e00c      	b.n	8003af4 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2204      	movs	r2, #4
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b0c:	4b91      	ldr	r3, [pc, #580]	@ (8003d54 <HAL_MDMA_IRQHandler+0x254>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a91      	ldr	r2, [pc, #580]	@ (8003d58 <HAL_MDMA_IRQHandler+0x258>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	0a9b      	lsrs	r3, r3, #10
 8003b18:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4b8e      	ldr	r3, [pc, #568]	@ (8003d5c <HAL_MDMA_IRQHandler+0x25c>)
 8003b22:	4413      	add	r3, r2
 8003b24:	099b      	lsrs	r3, r3, #6
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8003b32:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 812d 	beq.w	8003d9c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d054      	beq.n	8003bfa <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d04d      	beq.n	8003bfa <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0202 	bic.w	r2, r2, #2
 8003b6c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	669a      	str	r2, [r3, #104]	@ 0x68
 8003b8c:	e005      	b.n	8003b9a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b92:	f043 0202 	orr.w	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ba8:	f043 0204 	orr.w	r2, r3, #4
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bbe:	f043 0208 	orr.w	r2, r3, #8
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d012      	beq.n	8003c2e <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2210      	movs	r2, #16
 8003c1c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d012      	beq.n	8003c62 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2208      	movs	r2, #8
 8003c50:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d012      	beq.n	8003c96 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2204      	movs	r2, #4
 8003c84:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d039      	beq.n	8003d18 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d032      	beq.n	8003d18 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8003cc0:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d110      	bne.n	8003cf0 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d05c      	beq.n	8003da0 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	4798      	blx	r3
        }
        return;
 8003cee:	e057      	b.n	8003da0 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d040      	beq.n	8003da2 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2204      	movs	r2, #4
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d30d      	bcc.n	8003d60 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f2      	bne.n	8003d38 <HAL_MDMA_IRQHandler+0x238>
 8003d52:	e006      	b.n	8003d62 <HAL_MDMA_IRQHandler+0x262>
 8003d54:	20000000 	.word	0x20000000
 8003d58:	1b4e81b5 	.word	0x1b4e81b5
 8003d5c:	adffffc0 	.word	0xadffffc0
        break;
 8003d60:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003d80:	e003      	b.n	8003d8a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
 8003d9a:	e002      	b.n	8003da2 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8003d9c:	bf00      	nop
 8003d9e:	e000      	b.n	8003da2 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8003da0:	bf00      	nop
    }
  }
}
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695a      	ldr	r2, [r3, #20]
 8003dbc:	4b31      	ldr	r3, [pc, #196]	@ (8003e84 <MDMA_SetConfig+0xdc>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	051a      	lsls	r2, r3, #20
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	221f      	movs	r2, #31
 8003dec:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003e04:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e0c:	d002      	beq.n	8003e14 <MDMA_SetConfig+0x6c>
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d108      	bne.n	8003e26 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e22:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e24:	e007      	b.n	8003e36 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003e34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003e3c:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e44:	d002      	beq.n	8003e4c <MDMA_SetConfig+0xa4>
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d108      	bne.n	8003e5e <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003e5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e5c:	e007      	b.n	8003e6e <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003e6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003e78:	bf00      	nop
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	fffe0000 	.word	0xfffe0000

08003e88 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68d9      	ldr	r1, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003eae:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003eba:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003ec6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8003ed0:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003edc:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003ede:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee8:	d107      	bne.n	8003efa <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8003ef8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	da11      	bge.n	8003f2e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003f18:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1e:	425b      	negs	r3, r3
 8003f20:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	621a      	str	r2, [r3, #32]
 8003f2c:	e006      	b.n	8003f3c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f32:	461a      	mov	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	b292      	uxth	r2, r2
 8003f3a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	da15      	bge.n	8003f70 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003f52:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f58:	425b      	negs	r3, r3
 8003f5a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6a19      	ldr	r1, [r3, #32]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	041a      	lsls	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	621a      	str	r2, [r3, #32]
 8003f6e:	e009      	b.n	8003f84 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6a19      	ldr	r1, [r3, #32]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7a:	041a      	lsls	r2, r3, #16
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f8c:	d006      	beq.n	8003f9c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f9a:	e003      	b.n	8003fa4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0

}
 8003fbc:	bf00      	nop
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003fd0:	4b29      	ldr	r3, [pc, #164]	@ (8004078 <HAL_PWREx_ConfigSupply+0xb0>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	2b06      	cmp	r3, #6
 8003fda:	d00a      	beq.n	8003ff2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003fdc:	4b26      	ldr	r3, [pc, #152]	@ (8004078 <HAL_PWREx_ConfigSupply+0xb0>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d001      	beq.n	8003fee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e040      	b.n	8004070 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e03e      	b.n	8004070 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ff2:	4b21      	ldr	r3, [pc, #132]	@ (8004078 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003ffa:	491f      	ldr	r1, [pc, #124]	@ (8004078 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004002:	f7fc ff2b 	bl	8000e5c <HAL_GetTick>
 8004006:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004008:	e009      	b.n	800401e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800400a:	f7fc ff27 	bl	8000e5c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004018:	d901      	bls.n	800401e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e028      	b.n	8004070 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800401e:	4b16      	ldr	r3, [pc, #88]	@ (8004078 <HAL_PWREx_ConfigSupply+0xb0>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800402a:	d1ee      	bne.n	800400a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b1e      	cmp	r3, #30
 8004030:	d008      	beq.n	8004044 <HAL_PWREx_ConfigSupply+0x7c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b2e      	cmp	r3, #46	@ 0x2e
 8004036:	d005      	beq.n	8004044 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b1d      	cmp	r3, #29
 800403c:	d002      	beq.n	8004044 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b2d      	cmp	r3, #45	@ 0x2d
 8004042:	d114      	bne.n	800406e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004044:	f7fc ff0a 	bl	8000e5c <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800404a:	e009      	b.n	8004060 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800404c:	f7fc ff06 	bl	8000e5c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800405a:	d901      	bls.n	8004060 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e007      	b.n	8004070 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004060:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <HAL_PWREx_ConfigSupply+0xb0>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800406c:	d1ee      	bne.n	800404c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	58024800 	.word	0x58024800

0800407c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08c      	sub	sp, #48	@ 0x30
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d102      	bne.n	8004090 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f000 bc48 	b.w	8004920 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8088 	beq.w	80041ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800409e:	4b99      	ldr	r3, [pc, #612]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040a8:	4b96      	ldr	r3, [pc, #600]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80040aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80040ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d007      	beq.n	80040c4 <HAL_RCC_OscConfig+0x48>
 80040b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b6:	2b18      	cmp	r3, #24
 80040b8:	d111      	bne.n	80040de <HAL_RCC_OscConfig+0x62>
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d10c      	bne.n	80040de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d06d      	beq.n	80041ac <HAL_RCC_OscConfig+0x130>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d169      	bne.n	80041ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	f000 bc21 	b.w	8004920 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e6:	d106      	bne.n	80040f6 <HAL_RCC_OscConfig+0x7a>
 80040e8:	4b86      	ldr	r3, [pc, #536]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a85      	ldr	r2, [pc, #532]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80040ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	e02e      	b.n	8004154 <HAL_RCC_OscConfig+0xd8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x9c>
 80040fe:	4b81      	ldr	r3, [pc, #516]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a80      	ldr	r2, [pc, #512]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b7e      	ldr	r3, [pc, #504]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a7d      	ldr	r2, [pc, #500]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004110:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e01d      	b.n	8004154 <HAL_RCC_OscConfig+0xd8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0xc0>
 8004122:	4b78      	ldr	r3, [pc, #480]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a77      	ldr	r2, [pc, #476]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b75      	ldr	r3, [pc, #468]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a74      	ldr	r2, [pc, #464]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0xd8>
 800413c:	4b71      	ldr	r3, [pc, #452]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a70      	ldr	r2, [pc, #448]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	4b6e      	ldr	r3, [pc, #440]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a6d      	ldr	r2, [pc, #436]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800414e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d013      	beq.n	8004184 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7fc fe7e 	bl	8000e5c <HAL_GetTick>
 8004160:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004164:	f7fc fe7a 	bl	8000e5c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	@ 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e3d4      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004176:	4b63      	ldr	r3, [pc, #396]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0xe8>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fc fe6a 	bl	8000e5c <HAL_GetTick>
 8004188:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800418c:	f7fc fe66 	bl	8000e5c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	@ 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e3c0      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800419e:	4b59      	ldr	r3, [pc, #356]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x110>
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80ca 	beq.w	8004350 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041bc:	4b51      	ldr	r3, [pc, #324]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <HAL_RCC_OscConfig+0x166>
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	2b18      	cmp	r3, #24
 80041d6:	d156      	bne.n	8004286 <HAL_RCC_OscConfig+0x20a>
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d151      	bne.n	8004286 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e2:	4b48      	ldr	r3, [pc, #288]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <HAL_RCC_OscConfig+0x17e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e392      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041fa:	4b42      	ldr	r3, [pc, #264]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 0219 	bic.w	r2, r3, #25
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	493f      	ldr	r1, [pc, #252]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fc fe26 	bl	8000e5c <HAL_GetTick>
 8004210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004214:	f7fc fe22 	bl	8000e5c <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e37c      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004226:	4b37      	ldr	r3, [pc, #220]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004232:	f7fc fe43 	bl	8000ebc <HAL_GetREVID>
 8004236:	4603      	mov	r3, r0
 8004238:	f241 0203 	movw	r2, #4099	@ 0x1003
 800423c:	4293      	cmp	r3, r2
 800423e:	d817      	bhi.n	8004270 <HAL_RCC_OscConfig+0x1f4>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b40      	cmp	r3, #64	@ 0x40
 8004246:	d108      	bne.n	800425a <HAL_RCC_OscConfig+0x1de>
 8004248:	4b2e      	ldr	r3, [pc, #184]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004250:	4a2c      	ldr	r2, [pc, #176]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004256:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004258:	e07a      	b.n	8004350 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425a:	4b2a      	ldr	r3, [pc, #168]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	031b      	lsls	r3, r3, #12
 8004268:	4926      	ldr	r1, [pc, #152]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800426e:	e06f      	b.n	8004350 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004270:	4b24      	ldr	r3, [pc, #144]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	061b      	lsls	r3, r3, #24
 800427e:	4921      	ldr	r1, [pc, #132]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004284:	e064      	b.n	8004350 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d047      	beq.n	800431e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800428e:	4b1d      	ldr	r3, [pc, #116]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 0219 	bic.w	r2, r3, #25
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	491a      	ldr	r1, [pc, #104]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800429c:	4313      	orrs	r3, r2
 800429e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fc fddc 	bl	8000e5c <HAL_GetTick>
 80042a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a8:	f7fc fdd8 	bl	8000e5c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e332      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ba:	4b12      	ldr	r3, [pc, #72]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c6:	f7fc fdf9 	bl	8000ebc <HAL_GetREVID>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d819      	bhi.n	8004308 <HAL_RCC_OscConfig+0x28c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b40      	cmp	r3, #64	@ 0x40
 80042da:	d108      	bne.n	80042ee <HAL_RCC_OscConfig+0x272>
 80042dc:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80042e4:	4a07      	ldr	r2, [pc, #28]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80042e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ea:	6053      	str	r3, [r2, #4]
 80042ec:	e030      	b.n	8004350 <HAL_RCC_OscConfig+0x2d4>
 80042ee:	4b05      	ldr	r3, [pc, #20]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	031b      	lsls	r3, r3, #12
 80042fc:	4901      	ldr	r1, [pc, #4]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	604b      	str	r3, [r1, #4]
 8004302:	e025      	b.n	8004350 <HAL_RCC_OscConfig+0x2d4>
 8004304:	58024400 	.word	0x58024400
 8004308:	4b9a      	ldr	r3, [pc, #616]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	4997      	ldr	r1, [pc, #604]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]
 800431c:	e018      	b.n	8004350 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431e:	4b95      	ldr	r3, [pc, #596]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a94      	ldr	r2, [pc, #592]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432a:	f7fc fd97 	bl	8000e5c <HAL_GetTick>
 800432e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004332:	f7fc fd93 	bl	8000e5c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e2ed      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004344:	4b8b      	ldr	r3, [pc, #556]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80a9 	beq.w	80044b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800435e:	4b85      	ldr	r3, [pc, #532]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004366:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004368:	4b82      	ldr	r3, [pc, #520]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d007      	beq.n	8004384 <HAL_RCC_OscConfig+0x308>
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b18      	cmp	r3, #24
 8004378:	d13a      	bne.n	80043f0 <HAL_RCC_OscConfig+0x374>
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d135      	bne.n	80043f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004384:	4b7b      	ldr	r3, [pc, #492]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_OscConfig+0x320>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	2b80      	cmp	r3, #128	@ 0x80
 8004396:	d001      	beq.n	800439c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e2c1      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800439c:	f7fc fd8e 	bl	8000ebc <HAL_GetREVID>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d817      	bhi.n	80043da <HAL_RCC_OscConfig+0x35e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d108      	bne.n	80043c4 <HAL_RCC_OscConfig+0x348>
 80043b2:	4b70      	ldr	r3, [pc, #448]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80043ba:	4a6e      	ldr	r2, [pc, #440]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043c2:	e075      	b.n	80044b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	069b      	lsls	r3, r3, #26
 80043d2:	4968      	ldr	r1, [pc, #416]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043d8:	e06a      	b.n	80044b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043da:	4b66      	ldr	r3, [pc, #408]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	061b      	lsls	r3, r3, #24
 80043e8:	4962      	ldr	r1, [pc, #392]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043ee:	e05f      	b.n	80044b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d042      	beq.n	800447e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fc fd2a 	bl	8000e5c <HAL_GetTick>
 8004408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800440c:	f7fc fd26 	bl	8000e5c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e280      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800441e:	4b55      	ldr	r3, [pc, #340]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800442a:	f7fc fd47 	bl	8000ebc <HAL_GetREVID>
 800442e:	4603      	mov	r3, r0
 8004430:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004434:	4293      	cmp	r3, r2
 8004436:	d817      	bhi.n	8004468 <HAL_RCC_OscConfig+0x3ec>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	2b20      	cmp	r3, #32
 800443e:	d108      	bne.n	8004452 <HAL_RCC_OscConfig+0x3d6>
 8004440:	4b4c      	ldr	r3, [pc, #304]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004448:	4a4a      	ldr	r2, [pc, #296]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 800444a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800444e:	6053      	str	r3, [r2, #4]
 8004450:	e02e      	b.n	80044b0 <HAL_RCC_OscConfig+0x434>
 8004452:	4b48      	ldr	r3, [pc, #288]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	069b      	lsls	r3, r3, #26
 8004460:	4944      	ldr	r1, [pc, #272]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]
 8004466:	e023      	b.n	80044b0 <HAL_RCC_OscConfig+0x434>
 8004468:	4b42      	ldr	r3, [pc, #264]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	061b      	lsls	r3, r3, #24
 8004476:	493f      	ldr	r1, [pc, #252]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004478:	4313      	orrs	r3, r2
 800447a:	60cb      	str	r3, [r1, #12]
 800447c:	e018      	b.n	80044b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800447e:	4b3d      	ldr	r3, [pc, #244]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a3c      	ldr	r2, [pc, #240]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004484:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448a:	f7fc fce7 	bl	8000e5c <HAL_GetTick>
 800448e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004492:	f7fc fce3 	bl	8000e5c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e23d      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044a4:	4b33      	ldr	r3, [pc, #204]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f0      	bne.n	8004492 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d036      	beq.n	800452a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d019      	beq.n	80044f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80044c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fc fcc4 	bl	8000e5c <HAL_GetTick>
 80044d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d8:	f7fc fcc0 	bl	8000e5c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e21a      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044ea:	4b22      	ldr	r3, [pc, #136]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80044ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x45c>
 80044f6:	e018      	b.n	800452a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80044fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7fc fcaa 	bl	8000e5c <HAL_GetTick>
 8004508:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800450c:	f7fc fca6 	bl	8000e5c <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e200      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800451e:	4b15      	ldr	r3, [pc, #84]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d039      	beq.n	80045aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01c      	beq.n	8004578 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800453e:	4b0d      	ldr	r3, [pc, #52]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a0c      	ldr	r2, [pc, #48]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004544:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004548:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800454a:	f7fc fc87 	bl	8000e5c <HAL_GetTick>
 800454e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004552:	f7fc fc83 	bl	8000e5c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e1dd      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x4d6>
 8004570:	e01b      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
 8004572:	bf00      	nop
 8004574:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004578:	4b9b      	ldr	r3, [pc, #620]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a9a      	ldr	r2, [pc, #616]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800457e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004582:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004584:	f7fc fc6a 	bl	8000e5c <HAL_GetTick>
 8004588:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800458c:	f7fc fc66 	bl	8000e5c <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e1c0      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800459e:	4b92      	ldr	r3, [pc, #584]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 8081 	beq.w	80046ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045b8:	4b8c      	ldr	r3, [pc, #560]	@ (80047ec <HAL_RCC_OscConfig+0x770>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a8b      	ldr	r2, [pc, #556]	@ (80047ec <HAL_RCC_OscConfig+0x770>)
 80045be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045c4:	f7fc fc4a 	bl	8000e5c <HAL_GetTick>
 80045c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045cc:	f7fc fc46 	bl	8000e5c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	@ 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e1a0      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045de:	4b83      	ldr	r3, [pc, #524]	@ (80047ec <HAL_RCC_OscConfig+0x770>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d106      	bne.n	8004600 <HAL_RCC_OscConfig+0x584>
 80045f2:	4b7d      	ldr	r3, [pc, #500]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f6:	4a7c      	ldr	r2, [pc, #496]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fe:	e02d      	b.n	800465c <HAL_RCC_OscConfig+0x5e0>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10c      	bne.n	8004622 <HAL_RCC_OscConfig+0x5a6>
 8004608:	4b77      	ldr	r3, [pc, #476]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800460a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460c:	4a76      	ldr	r2, [pc, #472]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	6713      	str	r3, [r2, #112]	@ 0x70
 8004614:	4b74      	ldr	r3, [pc, #464]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004618:	4a73      	ldr	r2, [pc, #460]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800461a:	f023 0304 	bic.w	r3, r3, #4
 800461e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004620:	e01c      	b.n	800465c <HAL_RCC_OscConfig+0x5e0>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b05      	cmp	r3, #5
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0x5c8>
 800462a:	4b6f      	ldr	r3, [pc, #444]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462e:	4a6e      	ldr	r2, [pc, #440]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004630:	f043 0304 	orr.w	r3, r3, #4
 8004634:	6713      	str	r3, [r2, #112]	@ 0x70
 8004636:	4b6c      	ldr	r3, [pc, #432]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463a:	4a6b      	ldr	r2, [pc, #428]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	6713      	str	r3, [r2, #112]	@ 0x70
 8004642:	e00b      	b.n	800465c <HAL_RCC_OscConfig+0x5e0>
 8004644:	4b68      	ldr	r3, [pc, #416]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004648:	4a67      	ldr	r2, [pc, #412]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004650:	4b65      	ldr	r3, [pc, #404]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004654:	4a64      	ldr	r2, [pc, #400]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004656:	f023 0304 	bic.w	r3, r3, #4
 800465a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d015      	beq.n	8004690 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fc fbfa 	bl	8000e5c <HAL_GetTick>
 8004668:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800466a:	e00a      	b.n	8004682 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466c:	f7fc fbf6 	bl	8000e5c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e14e      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004682:	4b59      	ldr	r3, [pc, #356]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0ee      	beq.n	800466c <HAL_RCC_OscConfig+0x5f0>
 800468e:	e014      	b.n	80046ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004690:	f7fc fbe4 	bl	8000e5c <HAL_GetTick>
 8004694:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004696:	e00a      	b.n	80046ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004698:	f7fc fbe0 	bl	8000e5c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e138      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046ae:	4b4e      	ldr	r3, [pc, #312]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1ee      	bne.n	8004698 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 812d 	beq.w	800491e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80046c4:	4b48      	ldr	r3, [pc, #288]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046cc:	2b18      	cmp	r3, #24
 80046ce:	f000 80bd 	beq.w	800484c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	f040 809e 	bne.w	8004818 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046dc:	4b42      	ldr	r3, [pc, #264]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a41      	ldr	r2, [pc, #260]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80046e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fc fbb8 	bl	8000e5c <HAL_GetTick>
 80046ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fc fbb4 	bl	8000e5c <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e10e      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004702:	4b39      	ldr	r3, [pc, #228]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f0      	bne.n	80046f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800470e:	4b36      	ldr	r3, [pc, #216]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004710:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004712:	4b37      	ldr	r3, [pc, #220]	@ (80047f0 <HAL_RCC_OscConfig+0x774>)
 8004714:	4013      	ands	r3, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800471e:	0112      	lsls	r2, r2, #4
 8004720:	430a      	orrs	r2, r1
 8004722:	4931      	ldr	r1, [pc, #196]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004724:	4313      	orrs	r3, r2
 8004726:	628b      	str	r3, [r1, #40]	@ 0x28
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472c:	3b01      	subs	r3, #1
 800472e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004736:	3b01      	subs	r3, #1
 8004738:	025b      	lsls	r3, r3, #9
 800473a:	b29b      	uxth	r3, r3
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004742:	3b01      	subs	r3, #1
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004750:	3b01      	subs	r3, #1
 8004752:	061b      	lsls	r3, r3, #24
 8004754:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004758:	4923      	ldr	r1, [pc, #140]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800475e:	4b22      	ldr	r3, [pc, #136]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004762:	4a21      	ldr	r2, [pc, #132]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800476a:	4b1f      	ldr	r3, [pc, #124]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800476c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800476e:	4b21      	ldr	r3, [pc, #132]	@ (80047f4 <HAL_RCC_OscConfig+0x778>)
 8004770:	4013      	ands	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004776:	00d2      	lsls	r2, r2, #3
 8004778:	491b      	ldr	r1, [pc, #108]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800477a:	4313      	orrs	r3, r2
 800477c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800477e:	4b1a      	ldr	r3, [pc, #104]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004782:	f023 020c 	bic.w	r2, r3, #12
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	4917      	ldr	r1, [pc, #92]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800478c:	4313      	orrs	r3, r2
 800478e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004790:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004794:	f023 0202 	bic.w	r2, r3, #2
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479c:	4912      	ldr	r1, [pc, #72]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047a2:	4b11      	ldr	r3, [pc, #68]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	4a10      	ldr	r2, [pc, #64]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ae:	4b0e      	ldr	r3, [pc, #56]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b2:	4a0d      	ldr	r2, [pc, #52]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047ba:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	4a0a      	ldr	r2, [pc, #40]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80047c6:	4b08      	ldr	r3, [pc, #32]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ca:	4a07      	ldr	r2, [pc, #28]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d2:	4b05      	ldr	r3, [pc, #20]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a04      	ldr	r2, [pc, #16]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047de:	f7fc fb3d 	bl	8000e5c <HAL_GetTick>
 80047e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047e4:	e011      	b.n	800480a <HAL_RCC_OscConfig+0x78e>
 80047e6:	bf00      	nop
 80047e8:	58024400 	.word	0x58024400
 80047ec:	58024800 	.word	0x58024800
 80047f0:	fffffc0c 	.word	0xfffffc0c
 80047f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f8:	f7fc fb30 	bl	8000e5c <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e08a      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800480a:	4b47      	ldr	r3, [pc, #284]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x77c>
 8004816:	e082      	b.n	800491e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004818:	4b43      	ldr	r3, [pc, #268]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a42      	ldr	r2, [pc, #264]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 800481e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fc fb1a 	bl	8000e5c <HAL_GetTick>
 8004828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482c:	f7fc fb16 	bl	8000e5c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e070      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800483e:	4b3a      	ldr	r3, [pc, #232]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x7b0>
 800484a:	e068      	b.n	800491e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800484c:	4b36      	ldr	r3, [pc, #216]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004852:	4b35      	ldr	r3, [pc, #212]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004856:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	2b01      	cmp	r3, #1
 800485e:	d031      	beq.n	80048c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f003 0203 	and.w	r2, r3, #3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d12a      	bne.n	80048c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d122      	bne.n	80048c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004888:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800488a:	429a      	cmp	r2, r3
 800488c:	d11a      	bne.n	80048c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	0a5b      	lsrs	r3, r3, #9
 8004892:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800489a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800489c:	429a      	cmp	r2, r3
 800489e:	d111      	bne.n	80048c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d108      	bne.n	80048c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	0e1b      	lsrs	r3, r3, #24
 80048b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e02b      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80048c8:	4b17      	ldr	r3, [pc, #92]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 80048ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048cc:	08db      	lsrs	r3, r3, #3
 80048ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d01f      	beq.n	800491e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80048de:	4b12      	ldr	r3, [pc, #72]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 80048e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e2:	4a11      	ldr	r2, [pc, #68]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048ea:	f7fc fab7 	bl	8000e5c <HAL_GetTick>
 80048ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80048f0:	bf00      	nop
 80048f2:	f7fc fab3 	bl	8000e5c <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d0f9      	beq.n	80048f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 8004900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004902:	4b0a      	ldr	r3, [pc, #40]	@ (800492c <HAL_RCC_OscConfig+0x8b0>)
 8004904:	4013      	ands	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800490a:	00d2      	lsls	r2, r2, #3
 800490c:	4906      	ldr	r1, [pc, #24]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 800490e:	4313      	orrs	r3, r2
 8004910:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004912:	4b05      	ldr	r3, [pc, #20]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	4a04      	ldr	r2, [pc, #16]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3730      	adds	r7, #48	@ 0x30
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	58024400 	.word	0x58024400
 800492c:	ffff0007 	.word	0xffff0007

08004930 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e19c      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004944:	4b8a      	ldr	r3, [pc, #552]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d910      	bls.n	8004974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b87      	ldr	r3, [pc, #540]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f023 020f 	bic.w	r2, r3, #15
 800495a:	4985      	ldr	r1, [pc, #532]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	4313      	orrs	r3, r2
 8004960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b83      	ldr	r3, [pc, #524]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e184      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d010      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	4b7b      	ldr	r3, [pc, #492]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800498c:	429a      	cmp	r2, r3
 800498e:	d908      	bls.n	80049a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004990:	4b78      	ldr	r3, [pc, #480]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	4975      	ldr	r1, [pc, #468]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d010      	beq.n	80049d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	4b70      	ldr	r3, [pc, #448]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d908      	bls.n	80049d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049be:	4b6d      	ldr	r3, [pc, #436]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	496a      	ldr	r1, [pc, #424]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d010      	beq.n	80049fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	4b64      	ldr	r3, [pc, #400]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d908      	bls.n	80049fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049ec:	4b61      	ldr	r3, [pc, #388]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	495e      	ldr	r1, [pc, #376]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d010      	beq.n	8004a2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69da      	ldr	r2, [r3, #28]
 8004a0e:	4b59      	ldr	r3, [pc, #356]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d908      	bls.n	8004a2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a1a:	4b56      	ldr	r3, [pc, #344]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	4953      	ldr	r1, [pc, #332]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d010      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d908      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a48:	4b4a      	ldr	r3, [pc, #296]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f023 020f 	bic.w	r2, r3, #15
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4947      	ldr	r1, [pc, #284]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d055      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a66:	4b43      	ldr	r3, [pc, #268]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	4940      	ldr	r1, [pc, #256]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d107      	bne.n	8004a90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a80:	4b3c      	ldr	r3, [pc, #240]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d121      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0f6      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d107      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a98:	4b36      	ldr	r3, [pc, #216]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d115      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0ea      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d107      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ab0:	4b30      	ldr	r3, [pc, #192]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d109      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0de      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0d6      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ad0:	4b28      	ldr	r3, [pc, #160]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f023 0207 	bic.w	r2, r3, #7
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4925      	ldr	r1, [pc, #148]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae2:	f7fc f9bb 	bl	8000e5c <HAL_GetTick>
 8004ae6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae8:	e00a      	b.n	8004b00 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aea:	f7fc f9b7 	bl	8000e5c <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e0be      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b00:	4b1c      	ldr	r3, [pc, #112]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d1eb      	bne.n	8004aea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d010      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	4b14      	ldr	r3, [pc, #80]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d208      	bcs.n	8004b40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b2e:	4b11      	ldr	r3, [pc, #68]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f023 020f 	bic.w	r2, r3, #15
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	490e      	ldr	r1, [pc, #56]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b40:	4b0b      	ldr	r3, [pc, #44]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d214      	bcs.n	8004b78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4e:	4b08      	ldr	r3, [pc, #32]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 020f 	bic.w	r2, r3, #15
 8004b56:	4906      	ldr	r1, [pc, #24]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b04      	ldr	r3, [pc, #16]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e086      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>
 8004b70:	52002000 	.word	0x52002000
 8004b74:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d010      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	4b3f      	ldr	r3, [pc, #252]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d208      	bcs.n	8004ba6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b94:	4b3c      	ldr	r3, [pc, #240]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	4939      	ldr	r1, [pc, #228]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d010      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695a      	ldr	r2, [r3, #20]
 8004bb6:	4b34      	ldr	r3, [pc, #208]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d208      	bcs.n	8004bd4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bc2:	4b31      	ldr	r3, [pc, #196]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	492e      	ldr	r1, [pc, #184]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d010      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699a      	ldr	r2, [r3, #24]
 8004be4:	4b28      	ldr	r3, [pc, #160]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d208      	bcs.n	8004c02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bf0:	4b25      	ldr	r3, [pc, #148]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	4922      	ldr	r1, [pc, #136]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d010      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69da      	ldr	r2, [r3, #28]
 8004c12:	4b1d      	ldr	r3, [pc, #116]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d208      	bcs.n	8004c30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	4917      	ldr	r1, [pc, #92]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c30:	f000 f834 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b14      	ldr	r3, [pc, #80]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	4912      	ldr	r1, [pc, #72]	@ (8004c8c <HAL_RCC_ClockConfig+0x35c>)
 8004c42:	5ccb      	ldrb	r3, [r1, r3]
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	4a0d      	ldr	r2, [pc, #52]	@ (8004c8c <HAL_RCC_ClockConfig+0x35c>)
 8004c58:	5cd3      	ldrb	r3, [r2, r3]
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
 8004c64:	4a0a      	ldr	r2, [pc, #40]	@ (8004c90 <HAL_RCC_ClockConfig+0x360>)
 8004c66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c68:	4a0a      	ldr	r2, [pc, #40]	@ (8004c94 <HAL_RCC_ClockConfig+0x364>)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c98 <HAL_RCC_ClockConfig+0x368>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fc f8a8 	bl	8000dc8 <HAL_InitTick>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	58024400 	.word	0x58024400
 8004c8c:	08010f70 	.word	0x08010f70
 8004c90:	20000004 	.word	0x20000004
 8004c94:	20000000 	.word	0x20000000
 8004c98:	20000008 	.word	0x20000008

08004c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b089      	sub	sp, #36	@ 0x24
 8004ca0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ca2:	4bb3      	ldr	r3, [pc, #716]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004caa:	2b18      	cmp	r3, #24
 8004cac:	f200 8155 	bhi.w	8004f5a <HAL_RCC_GetSysClockFreq+0x2be>
 8004cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004d1d 	.word	0x08004d1d
 8004cbc:	08004f5b 	.word	0x08004f5b
 8004cc0:	08004f5b 	.word	0x08004f5b
 8004cc4:	08004f5b 	.word	0x08004f5b
 8004cc8:	08004f5b 	.word	0x08004f5b
 8004ccc:	08004f5b 	.word	0x08004f5b
 8004cd0:	08004f5b 	.word	0x08004f5b
 8004cd4:	08004f5b 	.word	0x08004f5b
 8004cd8:	08004d43 	.word	0x08004d43
 8004cdc:	08004f5b 	.word	0x08004f5b
 8004ce0:	08004f5b 	.word	0x08004f5b
 8004ce4:	08004f5b 	.word	0x08004f5b
 8004ce8:	08004f5b 	.word	0x08004f5b
 8004cec:	08004f5b 	.word	0x08004f5b
 8004cf0:	08004f5b 	.word	0x08004f5b
 8004cf4:	08004f5b 	.word	0x08004f5b
 8004cf8:	08004d49 	.word	0x08004d49
 8004cfc:	08004f5b 	.word	0x08004f5b
 8004d00:	08004f5b 	.word	0x08004f5b
 8004d04:	08004f5b 	.word	0x08004f5b
 8004d08:	08004f5b 	.word	0x08004f5b
 8004d0c:	08004f5b 	.word	0x08004f5b
 8004d10:	08004f5b 	.word	0x08004f5b
 8004d14:	08004f5b 	.word	0x08004f5b
 8004d18:	08004d4f 	.word	0x08004d4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d1c:	4b94      	ldr	r3, [pc, #592]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d009      	beq.n	8004d3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d28:	4b91      	ldr	r3, [pc, #580]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	08db      	lsrs	r3, r3, #3
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	4a90      	ldr	r2, [pc, #576]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
 8004d38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004d3a:	e111      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d3c:	4b8d      	ldr	r3, [pc, #564]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d3e:	61bb      	str	r3, [r7, #24]
      break;
 8004d40:	e10e      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004d42:	4b8d      	ldr	r3, [pc, #564]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d44:	61bb      	str	r3, [r7, #24]
      break;
 8004d46:	e10b      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004d48:	4b8c      	ldr	r3, [pc, #560]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d4a:	61bb      	str	r3, [r7, #24]
      break;
 8004d4c:	e108      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d4e:	4b88      	ldr	r3, [pc, #544]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004d58:	4b85      	ldr	r3, [pc, #532]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d64:	4b82      	ldr	r3, [pc, #520]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d6e:	4b80      	ldr	r3, [pc, #512]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d72:	08db      	lsrs	r3, r3, #3
 8004d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80e1 	beq.w	8004f54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	f000 8083 	beq.w	8004ea0 <HAL_RCC_GetSysClockFreq+0x204>
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	f200 80a1 	bhi.w	8004ee4 <HAL_RCC_GetSysClockFreq+0x248>
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0x114>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d056      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004dae:	e099      	b.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004db0:	4b6f      	ldr	r3, [pc, #444]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d02d      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dbc:	4b6c      	ldr	r3, [pc, #432]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	08db      	lsrs	r3, r3, #3
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	4a6b      	ldr	r2, [pc, #428]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dcc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	ee07 3a90 	vmov	s15, r3
 8004dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de6:	4b62      	ldr	r3, [pc, #392]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dfa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004e16:	e087      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004f84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2a:	4b51      	ldr	r3, [pc, #324]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e5a:	e065      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004f88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6e:	4b40      	ldr	r3, [pc, #256]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e9e:	e043      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eaa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004f8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ec6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ede:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ee2:	e021      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004f88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004f28:	4b11      	ldr	r3, [pc, #68]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2c:	0a5b      	lsrs	r3, r3, #9
 8004f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f32:	3301      	adds	r3, #1
 8004f34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f4c:	ee17 3a90 	vmov	r3, s15
 8004f50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004f52:	e005      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61bb      	str	r3, [r7, #24]
      break;
 8004f58:	e002      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004f5a:	4b07      	ldr	r3, [pc, #28]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f5c:	61bb      	str	r3, [r7, #24]
      break;
 8004f5e:	bf00      	nop
  }

  return sysclockfreq;
 8004f60:	69bb      	ldr	r3, [r7, #24]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3724      	adds	r7, #36	@ 0x24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	58024400 	.word	0x58024400
 8004f74:	03d09000 	.word	0x03d09000
 8004f78:	003d0900 	.word	0x003d0900
 8004f7c:	017d7840 	.word	0x017d7840
 8004f80:	46000000 	.word	0x46000000
 8004f84:	4c742400 	.word	0x4c742400
 8004f88:	4a742400 	.word	0x4a742400
 8004f8c:	4bbebc20 	.word	0x4bbebc20

08004f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f96:	f7ff fe81 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	4b10      	ldr	r3, [pc, #64]	@ (8004fe0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	0a1b      	lsrs	r3, r3, #8
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	490f      	ldr	r1, [pc, #60]	@ (8004fe4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fa8:	5ccb      	ldrb	r3, [r1, r3]
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	4a09      	ldr	r2, [pc, #36]	@ (8004fe4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fbe:	5cd3      	ldrb	r3, [r2, r3]
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fca:	4a07      	ldr	r2, [pc, #28]	@ (8004fe8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004fcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fce:	4a07      	ldr	r2, [pc, #28]	@ (8004fec <HAL_RCC_GetHCLKFreq+0x5c>)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004fd4:	4b04      	ldr	r3, [pc, #16]	@ (8004fe8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	58024400 	.word	0x58024400
 8004fe4:	08010f70 	.word	0x08010f70
 8004fe8:	20000004 	.word	0x20000004
 8004fec:	20000000 	.word	0x20000000

08004ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004ff4:	f7ff ffcc 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4b06      	ldr	r3, [pc, #24]	@ (8005014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	091b      	lsrs	r3, r3, #4
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	4904      	ldr	r1, [pc, #16]	@ (8005018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005006:	5ccb      	ldrb	r3, [r1, r3]
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005010:	4618      	mov	r0, r3
 8005012:	bd80      	pop	{r7, pc}
 8005014:	58024400 	.word	0x58024400
 8005018:	08010f70 	.word	0x08010f70

0800501c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800501c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005020:	b0cc      	sub	sp, #304	@ 0x130
 8005022:	af00      	add	r7, sp, #0
 8005024:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005028:	2300      	movs	r3, #0
 800502a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800502e:	2300      	movs	r3, #0
 8005030:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005034:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005040:	2500      	movs	r5, #0
 8005042:	ea54 0305 	orrs.w	r3, r4, r5
 8005046:	d049      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800504c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800504e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005052:	d02f      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005054:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005058:	d828      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800505a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800505e:	d01a      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005060:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005064:	d822      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800506a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800506e:	d007      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005070:	e01c      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005072:	4bb8      	ldr	r3, [pc, #736]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005076:	4ab7      	ldr	r2, [pc, #732]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800507c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800507e:	e01a      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005080:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005084:	3308      	adds	r3, #8
 8005086:	2102      	movs	r1, #2
 8005088:	4618      	mov	r0, r3
 800508a:	f002 fba1 	bl	80077d0 <RCCEx_PLL2_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005094:	e00f      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005096:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800509a:	3328      	adds	r3, #40	@ 0x28
 800509c:	2102      	movs	r1, #2
 800509e:	4618      	mov	r0, r3
 80050a0:	f002 fc48 	bl	8007934 <RCCEx_PLL3_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050aa:	e004      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80050b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80050be:	4ba5      	ldr	r3, [pc, #660]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80050c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050cc:	4aa1      	ldr	r2, [pc, #644]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050ce:	430b      	orrs	r3, r1
 80050d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80050d2:	e003      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80050e8:	f04f 0900 	mov.w	r9, #0
 80050ec:	ea58 0309 	orrs.w	r3, r8, r9
 80050f0:	d047      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80050f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d82a      	bhi.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80050fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005104 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	08005119 	.word	0x08005119
 8005108:	08005127 	.word	0x08005127
 800510c:	0800513d 	.word	0x0800513d
 8005110:	0800515b 	.word	0x0800515b
 8005114:	0800515b 	.word	0x0800515b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005118:	4b8e      	ldr	r3, [pc, #568]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800511a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511c:	4a8d      	ldr	r2, [pc, #564]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800511e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005122:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005124:	e01a      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005126:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800512a:	3308      	adds	r3, #8
 800512c:	2100      	movs	r1, #0
 800512e:	4618      	mov	r0, r3
 8005130:	f002 fb4e 	bl	80077d0 <RCCEx_PLL2_Config>
 8005134:	4603      	mov	r3, r0
 8005136:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800513a:	e00f      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800513c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005140:	3328      	adds	r3, #40	@ 0x28
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f002 fbf5 	bl	8007934 <RCCEx_PLL3_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005150:	e004      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005158:	e000      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800515a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800515c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005164:	4b7b      	ldr	r3, [pc, #492]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005168:	f023 0107 	bic.w	r1, r3, #7
 800516c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005172:	4a78      	ldr	r2, [pc, #480]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005174:	430b      	orrs	r3, r1
 8005176:	6513      	str	r3, [r2, #80]	@ 0x50
 8005178:	e003      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800517e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005182:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800518e:	f04f 0b00 	mov.w	fp, #0
 8005192:	ea5a 030b 	orrs.w	r3, sl, fp
 8005196:	d04c      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005198:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800519c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800519e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051a2:	d030      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80051a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051a8:	d829      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80051ac:	d02d      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80051ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80051b0:	d825      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051b2:	2b80      	cmp	r3, #128	@ 0x80
 80051b4:	d018      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80051b6:	2b80      	cmp	r3, #128	@ 0x80
 80051b8:	d821      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80051be:	2b40      	cmp	r3, #64	@ 0x40
 80051c0:	d007      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80051c2:	e01c      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c4:	4b63      	ldr	r3, [pc, #396]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c8:	4a62      	ldr	r2, [pc, #392]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051d0:	e01c      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051d6:	3308      	adds	r3, #8
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f002 faf8 	bl	80077d0 <RCCEx_PLL2_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051e6:	e011      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051ec:	3328      	adds	r3, #40	@ 0x28
 80051ee:	2100      	movs	r1, #0
 80051f0:	4618      	mov	r0, r3
 80051f2:	f002 fb9f 	bl	8007934 <RCCEx_PLL3_Config>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051fc:	e006      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005204:	e002      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800520a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800520c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005214:	4b4f      	ldr	r3, [pc, #316]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005218:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800521c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005222:	4a4c      	ldr	r2, [pc, #304]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005224:	430b      	orrs	r3, r1
 8005226:	6513      	str	r3, [r2, #80]	@ 0x50
 8005228:	e003      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800522e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800523e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005242:	2300      	movs	r3, #0
 8005244:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005248:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800524c:	460b      	mov	r3, r1
 800524e:	4313      	orrs	r3, r2
 8005250:	d053      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005256:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800525a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800525e:	d035      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005260:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005264:	d82e      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005266:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800526a:	d031      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800526c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005270:	d828      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005272:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005276:	d01a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005278:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800527c:	d822      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005282:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005286:	d007      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005288:	e01c      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800528a:	4b32      	ldr	r3, [pc, #200]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800528c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528e:	4a31      	ldr	r2, [pc, #196]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005294:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005296:	e01c      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005298:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800529c:	3308      	adds	r3, #8
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f002 fa95 	bl	80077d0 <RCCEx_PLL2_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80052ac:	e011      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052b2:	3328      	adds	r3, #40	@ 0x28
 80052b4:	2100      	movs	r1, #0
 80052b6:	4618      	mov	r0, r3
 80052b8:	f002 fb3c 	bl	8007934 <RCCEx_PLL3_Config>
 80052bc:	4603      	mov	r3, r0
 80052be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052c2:	e006      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80052ca:	e002      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80052cc:	bf00      	nop
 80052ce:	e000      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80052d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10b      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80052da:	4b1e      	ldr	r3, [pc, #120]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052de:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80052e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80052ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052ec:	430b      	orrs	r3, r1
 80052ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80052f0:	e003      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80052fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005306:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800530a:	2300      	movs	r3, #0
 800530c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005310:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005314:	460b      	mov	r3, r1
 8005316:	4313      	orrs	r3, r2
 8005318:	d056      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800531a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800531e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005322:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005326:	d038      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005328:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800532c:	d831      	bhi.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800532e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005332:	d034      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005334:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005338:	d82b      	bhi.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800533a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800533e:	d01d      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005340:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005344:	d825      	bhi.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005346:	2b00      	cmp	r3, #0
 8005348:	d006      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800534a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005350:	e01f      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005352:	bf00      	nop
 8005354:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005358:	4ba2      	ldr	r3, [pc, #648]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800535a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535c:	4aa1      	ldr	r2, [pc, #644]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800535e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005364:	e01c      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005366:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800536a:	3308      	adds	r3, #8
 800536c:	2100      	movs	r1, #0
 800536e:	4618      	mov	r0, r3
 8005370:	f002 fa2e 	bl	80077d0 <RCCEx_PLL2_Config>
 8005374:	4603      	mov	r3, r0
 8005376:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800537a:	e011      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800537c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005380:	3328      	adds	r3, #40	@ 0x28
 8005382:	2100      	movs	r1, #0
 8005384:	4618      	mov	r0, r3
 8005386:	f002 fad5 	bl	8007934 <RCCEx_PLL3_Config>
 800538a:	4603      	mov	r3, r0
 800538c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005390:	e006      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005398:	e002      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800539a:	bf00      	nop
 800539c:	e000      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800539e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10b      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80053a8:	4b8e      	ldr	r3, [pc, #568]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80053b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053b8:	4a8a      	ldr	r2, [pc, #552]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ba:	430b      	orrs	r3, r1
 80053bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80053be:	e003      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80053d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80053d8:	2300      	movs	r3, #0
 80053da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80053de:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80053e2:	460b      	mov	r3, r1
 80053e4:	4313      	orrs	r3, r2
 80053e6:	d03a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80053e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ee:	2b30      	cmp	r3, #48	@ 0x30
 80053f0:	d01f      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80053f2:	2b30      	cmp	r3, #48	@ 0x30
 80053f4:	d819      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d00c      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d815      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d019      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005402:	2b10      	cmp	r3, #16
 8005404:	d111      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005406:	4b77      	ldr	r3, [pc, #476]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540a:	4a76      	ldr	r2, [pc, #472]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800540c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005412:	e011      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005414:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005418:	3308      	adds	r3, #8
 800541a:	2102      	movs	r1, #2
 800541c:	4618      	mov	r0, r3
 800541e:	f002 f9d7 	bl	80077d0 <RCCEx_PLL2_Config>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005428:	e006      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005430:	e002      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005432:	bf00      	nop
 8005434:	e000      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005438:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005440:	4b68      	ldr	r3, [pc, #416]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005444:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005448:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800544c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544e:	4a65      	ldr	r2, [pc, #404]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005450:	430b      	orrs	r3, r1
 8005452:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005454:	e003      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005456:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800545a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800545e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800546a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800546e:	2300      	movs	r3, #0
 8005470:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005474:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005478:	460b      	mov	r3, r1
 800547a:	4313      	orrs	r3, r2
 800547c:	d051      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800547e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005484:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005488:	d035      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800548a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800548e:	d82e      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005490:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005494:	d031      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005496:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800549a:	d828      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800549c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054a0:	d01a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80054a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054a6:	d822      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80054ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b0:	d007      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80054b2:	e01c      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b4:	4b4b      	ldr	r3, [pc, #300]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	4a4a      	ldr	r2, [pc, #296]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054c0:	e01c      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054c6:	3308      	adds	r3, #8
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f002 f980 	bl	80077d0 <RCCEx_PLL2_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054d6:	e011      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054dc:	3328      	adds	r3, #40	@ 0x28
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f002 fa27 	bl	8007934 <RCCEx_PLL3_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054ec:	e006      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80054f4:	e002      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054f6:	bf00      	nop
 80054f8:	e000      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005504:	4b37      	ldr	r3, [pc, #220]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005508:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800550c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005512:	4a34      	ldr	r2, [pc, #208]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005514:	430b      	orrs	r3, r1
 8005516:	6513      	str	r3, [r2, #80]	@ 0x50
 8005518:	e003      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800551e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800552e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005532:	2300      	movs	r3, #0
 8005534:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005538:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800553c:	460b      	mov	r3, r1
 800553e:	4313      	orrs	r3, r2
 8005540:	d056      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005546:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800554c:	d033      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800554e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005552:	d82c      	bhi.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005554:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005558:	d02f      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800555a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800555e:	d826      	bhi.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005560:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005564:	d02b      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005566:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800556a:	d820      	bhi.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800556c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005570:	d012      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005572:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005576:	d81a      	bhi.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d022      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800557c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005580:	d115      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005582:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005586:	3308      	adds	r3, #8
 8005588:	2101      	movs	r1, #1
 800558a:	4618      	mov	r0, r3
 800558c:	f002 f920 	bl	80077d0 <RCCEx_PLL2_Config>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005596:	e015      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800559c:	3328      	adds	r3, #40	@ 0x28
 800559e:	2101      	movs	r1, #1
 80055a0:	4618      	mov	r0, r3
 80055a2:	f002 f9c7 	bl	8007934 <RCCEx_PLL3_Config>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80055ac:	e00a      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80055b4:	e006      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055b6:	bf00      	nop
 80055b8:	e004      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055ba:	bf00      	nop
 80055bc:	e002      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055be:	bf00      	nop
 80055c0:	e000      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10d      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80055cc:	4b05      	ldr	r3, [pc, #20]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80055d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055da:	4a02      	ldr	r2, [pc, #8]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055dc:	430b      	orrs	r3, r1
 80055de:	6513      	str	r3, [r2, #80]	@ 0x50
 80055e0:	e006      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80055e2:	bf00      	nop
 80055e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80055f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80055fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005600:	2300      	movs	r3, #0
 8005602:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005606:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800560a:	460b      	mov	r3, r1
 800560c:	4313      	orrs	r3, r2
 800560e:	d055      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005610:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005614:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005618:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800561c:	d033      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800561e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005622:	d82c      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005628:	d02f      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800562e:	d826      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005630:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005634:	d02b      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005636:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800563a:	d820      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800563c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005640:	d012      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005642:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005646:	d81a      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d022      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800564c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005650:	d115      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005652:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005656:	3308      	adds	r3, #8
 8005658:	2101      	movs	r1, #1
 800565a:	4618      	mov	r0, r3
 800565c:	f002 f8b8 	bl	80077d0 <RCCEx_PLL2_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005666:	e015      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800566c:	3328      	adds	r3, #40	@ 0x28
 800566e:	2101      	movs	r1, #1
 8005670:	4618      	mov	r0, r3
 8005672:	f002 f95f 	bl	8007934 <RCCEx_PLL3_Config>
 8005676:	4603      	mov	r3, r0
 8005678:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800567c:	e00a      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005684:	e006      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005686:	bf00      	nop
 8005688:	e004      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800568a:	bf00      	nop
 800568c:	e002      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005694:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800569c:	4bb6      	ldr	r3, [pc, #728]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800569e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80056a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056ac:	4ab2      	ldr	r2, [pc, #712]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056ae:	430b      	orrs	r3, r1
 80056b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80056b2:	e003      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056b8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80056bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80056c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056cc:	2300      	movs	r3, #0
 80056ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4313      	orrs	r3, r2
 80056da:	d02a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80056dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d011      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80056e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056ea:	d10a      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056f0:	3308      	adds	r3, #8
 80056f2:	2101      	movs	r1, #1
 80056f4:	4618      	mov	r0, r3
 80056f6:	f002 f86b 	bl	80077d0 <RCCEx_PLL2_Config>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005700:	e004      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005708:	e000      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800570a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800570c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005714:	4b98      	ldr	r3, [pc, #608]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005718:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800571c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005722:	4a95      	ldr	r2, [pc, #596]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005724:	430b      	orrs	r3, r1
 8005726:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005728:	e003      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800572e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800573e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005742:	2300      	movs	r3, #0
 8005744:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005748:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800574c:	460b      	mov	r3, r1
 800574e:	4313      	orrs	r3, r2
 8005750:	d037      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005752:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800575c:	d00e      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x760>
 800575e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005762:	d816      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005764:	2b00      	cmp	r3, #0
 8005766:	d018      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005768:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800576c:	d111      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800576e:	4b82      	ldr	r3, [pc, #520]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005772:	4a81      	ldr	r2, [pc, #516]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005778:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800577a:	e00f      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800577c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005780:	3308      	adds	r3, #8
 8005782:	2101      	movs	r1, #1
 8005784:	4618      	mov	r0, r3
 8005786:	f002 f823 	bl	80077d0 <RCCEx_PLL2_Config>
 800578a:	4603      	mov	r3, r0
 800578c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005790:	e004      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005798:	e000      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800579a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800579c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057a4:	4b74      	ldr	r3, [pc, #464]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80057ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b2:	4a71      	ldr	r2, [pc, #452]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057b4:	430b      	orrs	r3, r1
 80057b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80057b8:	e003      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80057ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057d2:	2300      	movs	r3, #0
 80057d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80057d8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80057dc:	460b      	mov	r3, r1
 80057de:	4313      	orrs	r3, r2
 80057e0:	d03a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80057e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d81d      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80057ec:	a201      	add	r2, pc, #4	@ (adr r2, 80057f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	08005831 	.word	0x08005831
 80057f8:	08005805 	.word	0x08005805
 80057fc:	08005813 	.word	0x08005813
 8005800:	08005831 	.word	0x08005831
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005804:	4b5c      	ldr	r3, [pc, #368]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	4a5b      	ldr	r2, [pc, #364]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800580a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800580e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005810:	e00f      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005812:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005816:	3308      	adds	r3, #8
 8005818:	2102      	movs	r1, #2
 800581a:	4618      	mov	r0, r3
 800581c:	f001 ffd8 	bl	80077d0 <RCCEx_PLL2_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005826:	e004      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800582e:	e000      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005832:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800583a:	4b4f      	ldr	r3, [pc, #316]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800583c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800583e:	f023 0103 	bic.w	r1, r3, #3
 8005842:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005848:	4a4b      	ldr	r2, [pc, #300]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800584a:	430b      	orrs	r3, r1
 800584c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800584e:	e003      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005850:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005854:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005858:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005864:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005868:	2300      	movs	r3, #0
 800586a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800586e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005872:	460b      	mov	r3, r1
 8005874:	4313      	orrs	r3, r2
 8005876:	f000 80a0 	beq.w	80059ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800587a:	4b40      	ldr	r3, [pc, #256]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a3f      	ldr	r2, [pc, #252]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005884:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005886:	f7fb fae9 	bl	8000e5c <HAL_GetTick>
 800588a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800588e:	e00b      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005890:	f7fb fae4 	bl	8000e5c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b64      	cmp	r3, #100	@ 0x64
 800589e:	d903      	bls.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80058a6:	e005      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058a8:	4b34      	ldr	r3, [pc, #208]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ed      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80058b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d17a      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80058c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80058c8:	4053      	eors	r3, r2
 80058ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d015      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058d2:	4b29      	ldr	r3, [pc, #164]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058de:	4b26      	ldr	r3, [pc, #152]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e2:	4a25      	ldr	r2, [pc, #148]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ea:	4b23      	ldr	r3, [pc, #140]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ee:	4a22      	ldr	r2, [pc, #136]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80058f6:	4a20      	ldr	r2, [pc, #128]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80058fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80058fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005902:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590a:	d118      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590c:	f7fb faa6 	bl	8000e5c <HAL_GetTick>
 8005910:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005914:	e00d      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005916:	f7fb faa1 	bl	8000e5c <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005920:	1ad2      	subs	r2, r2, r3
 8005922:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005926:	429a      	cmp	r2, r3
 8005928:	d903      	bls.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8005930:	e005      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005932:	4b11      	ldr	r3, [pc, #68]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0eb      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800593e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005942:	2b00      	cmp	r3, #0
 8005944:	d130      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005946:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800594a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800594e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005952:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005956:	d115      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005958:	4b07      	ldr	r3, [pc, #28]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005960:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005964:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005968:	091a      	lsrs	r2, r3, #4
 800596a:	4b05      	ldr	r3, [pc, #20]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800596c:	4013      	ands	r3, r2
 800596e:	4a02      	ldr	r2, [pc, #8]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005970:	430b      	orrs	r3, r1
 8005972:	6113      	str	r3, [r2, #16]
 8005974:	e00c      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005976:	bf00      	nop
 8005978:	58024400 	.word	0x58024400
 800597c:	58024800 	.word	0x58024800
 8005980:	00ffffcf 	.word	0x00ffffcf
 8005984:	4bd4      	ldr	r3, [pc, #848]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	4ad3      	ldr	r2, [pc, #844]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800598a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800598e:	6113      	str	r3, [r2, #16]
 8005990:	4bd1      	ldr	r3, [pc, #836]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005992:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005994:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005998:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800599c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a0:	4acd      	ldr	r2, [pc, #820]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80059a2:	430b      	orrs	r3, r1
 80059a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80059a6:	e008      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059ac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80059b0:	e003      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80059ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f002 0301 	and.w	r3, r2, #1
 80059c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059ca:	2300      	movs	r3, #0
 80059cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f000 808b 	beq.w	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80059dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059e4:	2b28      	cmp	r3, #40	@ 0x28
 80059e6:	d86b      	bhi.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80059e8:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80059ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ee:	bf00      	nop
 80059f0:	08005ac9 	.word	0x08005ac9
 80059f4:	08005ac1 	.word	0x08005ac1
 80059f8:	08005ac1 	.word	0x08005ac1
 80059fc:	08005ac1 	.word	0x08005ac1
 8005a00:	08005ac1 	.word	0x08005ac1
 8005a04:	08005ac1 	.word	0x08005ac1
 8005a08:	08005ac1 	.word	0x08005ac1
 8005a0c:	08005ac1 	.word	0x08005ac1
 8005a10:	08005a95 	.word	0x08005a95
 8005a14:	08005ac1 	.word	0x08005ac1
 8005a18:	08005ac1 	.word	0x08005ac1
 8005a1c:	08005ac1 	.word	0x08005ac1
 8005a20:	08005ac1 	.word	0x08005ac1
 8005a24:	08005ac1 	.word	0x08005ac1
 8005a28:	08005ac1 	.word	0x08005ac1
 8005a2c:	08005ac1 	.word	0x08005ac1
 8005a30:	08005aab 	.word	0x08005aab
 8005a34:	08005ac1 	.word	0x08005ac1
 8005a38:	08005ac1 	.word	0x08005ac1
 8005a3c:	08005ac1 	.word	0x08005ac1
 8005a40:	08005ac1 	.word	0x08005ac1
 8005a44:	08005ac1 	.word	0x08005ac1
 8005a48:	08005ac1 	.word	0x08005ac1
 8005a4c:	08005ac1 	.word	0x08005ac1
 8005a50:	08005ac9 	.word	0x08005ac9
 8005a54:	08005ac1 	.word	0x08005ac1
 8005a58:	08005ac1 	.word	0x08005ac1
 8005a5c:	08005ac1 	.word	0x08005ac1
 8005a60:	08005ac1 	.word	0x08005ac1
 8005a64:	08005ac1 	.word	0x08005ac1
 8005a68:	08005ac1 	.word	0x08005ac1
 8005a6c:	08005ac1 	.word	0x08005ac1
 8005a70:	08005ac9 	.word	0x08005ac9
 8005a74:	08005ac1 	.word	0x08005ac1
 8005a78:	08005ac1 	.word	0x08005ac1
 8005a7c:	08005ac1 	.word	0x08005ac1
 8005a80:	08005ac1 	.word	0x08005ac1
 8005a84:	08005ac1 	.word	0x08005ac1
 8005a88:	08005ac1 	.word	0x08005ac1
 8005a8c:	08005ac1 	.word	0x08005ac1
 8005a90:	08005ac9 	.word	0x08005ac9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a98:	3308      	adds	r3, #8
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 fe97 	bl	80077d0 <RCCEx_PLL2_Config>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005aa8:	e00f      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005aaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aae:	3328      	adds	r3, #40	@ 0x28
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f001 ff3e 	bl	8007934 <RCCEx_PLL3_Config>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005abe:	e004      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ac6:	e000      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10b      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ad2:	4b81      	ldr	r3, [pc, #516]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005ada:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ae2:	4a7d      	ldr	r2, [pc, #500]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ae8:	e003      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005aee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005af2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	f002 0302 	and.w	r3, r2, #2
 8005afe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b02:	2300      	movs	r3, #0
 8005b04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005b08:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	d042      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005b12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b18:	2b05      	cmp	r3, #5
 8005b1a:	d825      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b24 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b22:	bf00      	nop
 8005b24:	08005b71 	.word	0x08005b71
 8005b28:	08005b3d 	.word	0x08005b3d
 8005b2c:	08005b53 	.word	0x08005b53
 8005b30:	08005b71 	.word	0x08005b71
 8005b34:	08005b71 	.word	0x08005b71
 8005b38:	08005b71 	.word	0x08005b71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b40:	3308      	adds	r3, #8
 8005b42:	2101      	movs	r1, #1
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 fe43 	bl	80077d0 <RCCEx_PLL2_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b50:	e00f      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b56:	3328      	adds	r3, #40	@ 0x28
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f001 feea 	bl	8007934 <RCCEx_PLL3_Config>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b66:	e004      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b6e:	e000      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b7a:	4b57      	ldr	r3, [pc, #348]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7e:	f023 0107 	bic.w	r1, r3, #7
 8005b82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b88:	4a53      	ldr	r2, [pc, #332]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b8a:	430b      	orrs	r3, r1
 8005b8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b8e:	e003      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b90:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b94:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	f002 0304 	and.w	r3, r2, #4
 8005ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	d044      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005bb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bc0:	2b05      	cmp	r3, #5
 8005bc2:	d825      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005c19 	.word	0x08005c19
 8005bd0:	08005be5 	.word	0x08005be5
 8005bd4:	08005bfb 	.word	0x08005bfb
 8005bd8:	08005c19 	.word	0x08005c19
 8005bdc:	08005c19 	.word	0x08005c19
 8005be0:	08005c19 	.word	0x08005c19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005be4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005be8:	3308      	adds	r3, #8
 8005bea:	2101      	movs	r1, #1
 8005bec:	4618      	mov	r0, r3
 8005bee:	f001 fdef 	bl	80077d0 <RCCEx_PLL2_Config>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005bf8:	e00f      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bfe:	3328      	adds	r3, #40	@ 0x28
 8005c00:	2101      	movs	r1, #1
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 fe96 	bl	8007934 <RCCEx_PLL3_Config>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005c0e:	e004      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c16:	e000      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10b      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c22:	4b2d      	ldr	r3, [pc, #180]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c26:	f023 0107 	bic.w	r1, r3, #7
 8005c2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c32:	4a29      	ldr	r2, [pc, #164]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c38:	e003      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	f002 0320 	and.w	r3, r2, #32
 8005c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c52:	2300      	movs	r3, #0
 8005c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	d057      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005c62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c6e:	d035      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c74:	d82c      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c7a:	d031      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c80:	d826      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c86:	d02d      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005c88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c8c:	d820      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c92:	d012      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c98:	d81a      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d024      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005c9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ca2:	d115      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ca4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ca8:	3308      	adds	r3, #8
 8005caa:	2100      	movs	r1, #0
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 fd8f 	bl	80077d0 <RCCEx_PLL2_Config>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005cb8:	e017      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cbe:	3328      	adds	r3, #40	@ 0x28
 8005cc0:	2102      	movs	r1, #2
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 fe36 	bl	8007934 <RCCEx_PLL3_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005cce:	e00c      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005cd6:	e008      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005cd8:	58024400 	.word	0x58024400
        break;
 8005cdc:	bf00      	nop
 8005cde:	e004      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ce0:	bf00      	nop
 8005ce2:	e002      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ce4:	bf00      	nop
 8005ce6:	e000      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10b      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cf2:	4bc2      	ldr	r3, [pc, #776]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d02:	4abe      	ldr	r2, [pc, #760]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d04:	430b      	orrs	r3, r1
 8005d06:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d08:	e003      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d22:	2300      	movs	r3, #0
 8005d24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005d28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	d055      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d3a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d3e:	d033      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005d40:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d44:	d82c      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d4a:	d02f      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d50:	d826      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d56:	d02b      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005d58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d5c:	d820      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d62:	d012      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005d64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d68:	d81a      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d022      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d72:	d115      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d78:	3308      	adds	r3, #8
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 fd27 	bl	80077d0 <RCCEx_PLL2_Config>
 8005d82:	4603      	mov	r3, r0
 8005d84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d88:	e015      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d8e:	3328      	adds	r3, #40	@ 0x28
 8005d90:	2102      	movs	r1, #2
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 fdce 	bl	8007934 <RCCEx_PLL3_Config>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d9e:	e00a      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005da6:	e006      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005da8:	bf00      	nop
 8005daa:	e004      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005dac:	bf00      	nop
 8005dae:	e002      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005db0:	bf00      	nop
 8005db2:	e000      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10b      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dbe:	4b8f      	ldr	r3, [pc, #572]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005dc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005dce:	4a8b      	ldr	r2, [pc, #556]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005dd0:	430b      	orrs	r3, r1
 8005dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dd4:	e003      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dda:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005dea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005dee:	2300      	movs	r3, #0
 8005df0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005df4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	d055      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005dfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e06:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005e0a:	d033      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005e0c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005e10:	d82c      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005e12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e16:	d02f      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e1c:	d826      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005e1e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005e22:	d02b      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005e24:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005e28:	d820      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005e2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e2e:	d012      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005e30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e34:	d81a      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d022      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005e3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e3e:	d115      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e44:	3308      	adds	r3, #8
 8005e46:	2100      	movs	r1, #0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 fcc1 	bl	80077d0 <RCCEx_PLL2_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e54:	e015      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e5a:	3328      	adds	r3, #40	@ 0x28
 8005e5c:	2102      	movs	r1, #2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f001 fd68 	bl	8007934 <RCCEx_PLL3_Config>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e6a:	e00a      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e72:	e006      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e74:	bf00      	nop
 8005e76:	e004      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e78:	bf00      	nop
 8005e7a:	e002      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e7c:	bf00      	nop
 8005e7e:	e000      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10b      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005e92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e9a:	4a58      	ldr	r2, [pc, #352]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ea0:	e003      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ea6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005eaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f002 0308 	and.w	r3, r2, #8
 8005eb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ec0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	d01e      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005eca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed6:	d10c      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005edc:	3328      	adds	r3, #40	@ 0x28
 8005ede:	2102      	movs	r1, #2
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f001 fd27 	bl	8007934 <RCCEx_PLL3_Config>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ef2:	4b42      	ldr	r3, [pc, #264]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f02:	4a3e      	ldr	r2, [pc, #248]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f04:	430b      	orrs	r3, r1
 8005f06:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f10:	f002 0310 	and.w	r3, r2, #16
 8005f14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f1e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005f22:	460b      	mov	r3, r1
 8005f24:	4313      	orrs	r3, r2
 8005f26:	d01e      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f34:	d10c      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f3a:	3328      	adds	r3, #40	@ 0x28
 8005f3c:	2102      	movs	r1, #2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 fcf8 	bl	8007934 <RCCEx_PLL3_Config>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f50:	4b2a      	ldr	r3, [pc, #168]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f54:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f60:	4a26      	ldr	r2, [pc, #152]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005f72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f76:	2300      	movs	r3, #0
 8005f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f7c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005f80:	460b      	mov	r3, r1
 8005f82:	4313      	orrs	r3, r2
 8005f84:	d040      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f92:	d022      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8005f94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f98:	d81b      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fa2:	d00b      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8005fa4:	e015      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005faa:	3308      	adds	r3, #8
 8005fac:	2100      	movs	r1, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 fc0e 	bl	80077d0 <RCCEx_PLL2_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005fba:	e00f      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fc0:	3328      	adds	r3, #40	@ 0x28
 8005fc2:	2102      	movs	r1, #2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 fcb5 	bl	8007934 <RCCEx_PLL3_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005fd0:	e004      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005fd8:	e000      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8005fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fdc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10d      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fe4:	4b05      	ldr	r3, [pc, #20]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ff0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ff4:	4a01      	ldr	r2, [pc, #4]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ff6:	430b      	orrs	r3, r1
 8005ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ffa:	e005      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005ffc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006000:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006004:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006010:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006014:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006016:	2300      	movs	r3, #0
 8006018:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800601a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800601e:	460b      	mov	r3, r1
 8006020:	4313      	orrs	r3, r2
 8006022:	d03b      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006024:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800602c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006030:	d01f      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006032:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006036:	d818      	bhi.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006038:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800603c:	d003      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800603e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006042:	d007      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006044:	e011      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006046:	4b64      	ldr	r3, [pc, #400]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604a:	4a63      	ldr	r2, [pc, #396]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800604c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006050:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006052:	e00f      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006054:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006058:	3328      	adds	r3, #40	@ 0x28
 800605a:	2101      	movs	r1, #1
 800605c:	4618      	mov	r0, r3
 800605e:	f001 fc69 	bl	8007934 <RCCEx_PLL3_Config>
 8006062:	4603      	mov	r3, r0
 8006064:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006068:	e004      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006070:	e000      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006074:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800607c:	4b56      	ldr	r3, [pc, #344]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800607e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006080:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006084:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006088:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800608c:	4a52      	ldr	r2, [pc, #328]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800608e:	430b      	orrs	r3, r1
 8006090:	6553      	str	r3, [r2, #84]	@ 0x54
 8006092:	e003      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006094:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006098:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800609c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80060a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80060aa:	2300      	movs	r3, #0
 80060ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80060ae:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80060b2:	460b      	mov	r3, r1
 80060b4:	4313      	orrs	r3, r2
 80060b6:	d031      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80060b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80060c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060c6:	d007      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80060c8:	e011      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ca:	4b43      	ldr	r3, [pc, #268]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80060cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ce:	4a42      	ldr	r2, [pc, #264]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80060d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80060d6:	e00e      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060dc:	3308      	adds	r3, #8
 80060de:	2102      	movs	r1, #2
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 fb75 	bl	80077d0 <RCCEx_PLL2_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80060ec:	e003      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80060fe:	4b36      	ldr	r3, [pc, #216]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006102:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006106:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800610a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610c:	4a32      	ldr	r2, [pc, #200]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800610e:	430b      	orrs	r3, r1
 8006110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006112:	e003      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006114:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006118:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800611c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006128:	66bb      	str	r3, [r7, #104]	@ 0x68
 800612a:	2300      	movs	r3, #0
 800612c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800612e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006132:	460b      	mov	r3, r1
 8006134:	4313      	orrs	r3, r2
 8006136:	d00c      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006138:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800613c:	3328      	adds	r3, #40	@ 0x28
 800613e:	2102      	movs	r1, #2
 8006140:	4618      	mov	r0, r3
 8006142:	f001 fbf7 	bl	8007934 <RCCEx_PLL3_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006152:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800615e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006160:	2300      	movs	r3, #0
 8006162:	667b      	str	r3, [r7, #100]	@ 0x64
 8006164:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006168:	460b      	mov	r3, r1
 800616a:	4313      	orrs	r3, r2
 800616c:	d03a      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800616e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006176:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800617a:	d018      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800617c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006180:	d811      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006186:	d014      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800618c:	d80b      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d011      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006196:	d106      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006198:	4b0f      	ldr	r3, [pc, #60]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800619a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619c:	4a0e      	ldr	r2, [pc, #56]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800619e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80061a4:	e008      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80061ac:	e004      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80061ae:	bf00      	nop
 80061b0:	e002      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80061b2:	bf00      	nop
 80061b4:	e000      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80061b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10d      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061c0:	4b05      	ldr	r3, [pc, #20]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80061c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061c4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061d0:	4a01      	ldr	r2, [pc, #4]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80061d2:	430b      	orrs	r3, r1
 80061d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80061d6:	e005      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80061d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061e0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80061f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061f2:	2300      	movs	r3, #0
 80061f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80061fa:	460b      	mov	r3, r1
 80061fc:	4313      	orrs	r3, r2
 80061fe:	d009      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006200:	4baa      	ldr	r3, [pc, #680]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006204:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006208:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800620c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800620e:	4aa7      	ldr	r2, [pc, #668]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006210:	430b      	orrs	r3, r1
 8006212:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006214:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006220:	653b      	str	r3, [r7, #80]	@ 0x50
 8006222:	2300      	movs	r3, #0
 8006224:	657b      	str	r3, [r7, #84]	@ 0x54
 8006226:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800622a:	460b      	mov	r3, r1
 800622c:	4313      	orrs	r3, r2
 800622e:	d00a      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006230:	4b9e      	ldr	r3, [pc, #632]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800623c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006240:	4a9a      	ldr	r2, [pc, #616]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006242:	430b      	orrs	r3, r1
 8006244:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006246:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006252:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006254:	2300      	movs	r3, #0
 8006256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006258:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800625c:	460b      	mov	r3, r1
 800625e:	4313      	orrs	r3, r2
 8006260:	d009      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006262:	4b92      	ldr	r3, [pc, #584]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006266:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800626a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800626e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006270:	4a8e      	ldr	r2, [pc, #568]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006272:	430b      	orrs	r3, r1
 8006274:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006276:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006282:	643b      	str	r3, [r7, #64]	@ 0x40
 8006284:	2300      	movs	r3, #0
 8006286:	647b      	str	r3, [r7, #68]	@ 0x44
 8006288:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800628c:	460b      	mov	r3, r1
 800628e:	4313      	orrs	r3, r2
 8006290:	d00e      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006292:	4b86      	ldr	r3, [pc, #536]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	4a85      	ldr	r2, [pc, #532]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006298:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800629c:	6113      	str	r3, [r2, #16]
 800629e:	4b83      	ldr	r3, [pc, #524]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062a0:	6919      	ldr	r1, [r3, #16]
 80062a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80062aa:	4a80      	ldr	r2, [pc, #512]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062ac:	430b      	orrs	r3, r1
 80062ae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80062b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80062bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062be:	2300      	movs	r3, #0
 80062c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80062c6:	460b      	mov	r3, r1
 80062c8:	4313      	orrs	r3, r2
 80062ca:	d009      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80062cc:	4b77      	ldr	r3, [pc, #476]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80062d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062da:	4a74      	ldr	r2, [pc, #464]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062dc:	430b      	orrs	r3, r1
 80062de:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80062ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ee:	2300      	movs	r3, #0
 80062f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80062f6:	460b      	mov	r3, r1
 80062f8:	4313      	orrs	r3, r2
 80062fa:	d00a      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062fc:	4b6b      	ldr	r3, [pc, #428]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006300:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006304:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800630c:	4a67      	ldr	r2, [pc, #412]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800630e:	430b      	orrs	r3, r1
 8006310:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006312:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	2100      	movs	r1, #0
 800631c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006324:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006328:	460b      	mov	r3, r1
 800632a:	4313      	orrs	r3, r2
 800632c:	d011      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800632e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006332:	3308      	adds	r3, #8
 8006334:	2100      	movs	r1, #0
 8006336:	4618      	mov	r0, r3
 8006338:	f001 fa4a 	bl	80077d0 <RCCEx_PLL2_Config>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006342:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800634e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006352:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	2100      	movs	r1, #0
 800635c:	6239      	str	r1, [r7, #32]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	627b      	str	r3, [r7, #36]	@ 0x24
 8006364:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006368:	460b      	mov	r3, r1
 800636a:	4313      	orrs	r3, r2
 800636c:	d011      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800636e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006372:	3308      	adds	r3, #8
 8006374:	2101      	movs	r1, #1
 8006376:	4618      	mov	r0, r3
 8006378:	f001 fa2a 	bl	80077d0 <RCCEx_PLL2_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006382:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800638e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	2100      	movs	r1, #0
 800639c:	61b9      	str	r1, [r7, #24]
 800639e:	f003 0304 	and.w	r3, r3, #4
 80063a2:	61fb      	str	r3, [r7, #28]
 80063a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80063a8:	460b      	mov	r3, r1
 80063aa:	4313      	orrs	r3, r2
 80063ac:	d011      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063b2:	3308      	adds	r3, #8
 80063b4:	2102      	movs	r1, #2
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 fa0a 	bl	80077d0 <RCCEx_PLL2_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80063c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80063d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063da:	2100      	movs	r1, #0
 80063dc:	6139      	str	r1, [r7, #16]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80063e8:	460b      	mov	r3, r1
 80063ea:	4313      	orrs	r3, r2
 80063ec:	d011      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063f2:	3328      	adds	r3, #40	@ 0x28
 80063f4:	2100      	movs	r1, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	f001 fa9c 	bl	8007934 <RCCEx_PLL3_Config>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8006402:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800640e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	2100      	movs	r1, #0
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006428:	460b      	mov	r3, r1
 800642a:	4313      	orrs	r3, r2
 800642c:	d011      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800642e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006432:	3328      	adds	r3, #40	@ 0x28
 8006434:	2101      	movs	r1, #1
 8006436:	4618      	mov	r0, r3
 8006438:	f001 fa7c 	bl	8007934 <RCCEx_PLL3_Config>
 800643c:	4603      	mov	r3, r0
 800643e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006442:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800644e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006452:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	2100      	movs	r1, #0
 800645c:	6039      	str	r1, [r7, #0]
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	607b      	str	r3, [r7, #4]
 8006464:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006468:	460b      	mov	r3, r1
 800646a:	4313      	orrs	r3, r2
 800646c:	d011      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800646e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006472:	3328      	adds	r3, #40	@ 0x28
 8006474:	2102      	movs	r1, #2
 8006476:	4618      	mov	r0, r3
 8006478:	f001 fa5c 	bl	8007934 <RCCEx_PLL3_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006482:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800648e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8006492:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	e000      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80064a6:	46bd      	mov	sp, r7
 80064a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ac:	58024400 	.word	0x58024400

080064b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b090      	sub	sp, #64	@ 0x40
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80064ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064be:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80064c2:	430b      	orrs	r3, r1
 80064c4:	f040 8094 	bne.w	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80064c8:	4b9e      	ldr	r3, [pc, #632]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	f200 8087 	bhi.w	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80064da:	a201      	add	r2, pc, #4	@ (adr r2, 80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	080064f5 	.word	0x080064f5
 80064e4:	0800651d 	.word	0x0800651d
 80064e8:	08006545 	.word	0x08006545
 80064ec:	080065e1 	.word	0x080065e1
 80064f0:	0800656d 	.word	0x0800656d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064f4:	4b93      	ldr	r3, [pc, #588]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006500:	d108      	bne.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006506:	4618      	mov	r0, r3
 8006508:	f001 f810 	bl	800752c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006510:	f000 bd45 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006518:	f000 bd41 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800651c:	4b89      	ldr	r3, [pc, #548]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006528:	d108      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800652a:	f107 0318 	add.w	r3, r7, #24
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fd54 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006538:	f000 bd31 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006540:	f000 bd2d 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006544:	4b7f      	ldr	r3, [pc, #508]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800654c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006550:	d108      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006552:	f107 030c 	add.w	r3, r7, #12
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fe94 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006560:	f000 bd1d 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006568:	f000 bd19 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800656c:	4b75      	ldr	r3, [pc, #468]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800656e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006570:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006574:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006576:	4b73      	ldr	r3, [pc, #460]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b04      	cmp	r3, #4
 8006580:	d10c      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006584:	2b00      	cmp	r3, #0
 8006586:	d109      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006588:	4b6e      	ldr	r3, [pc, #440]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	08db      	lsrs	r3, r3, #3
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	4a6d      	ldr	r2, [pc, #436]	@ (8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006594:	fa22 f303 	lsr.w	r3, r2, r3
 8006598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800659a:	e01f      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800659c:	4b69      	ldr	r3, [pc, #420]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065a8:	d106      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80065aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065b0:	d102      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80065b2:	4b66      	ldr	r3, [pc, #408]	@ (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80065b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065b6:	e011      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065b8:	4b62      	ldr	r3, [pc, #392]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065c4:	d106      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80065c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065cc:	d102      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80065ce:	4b60      	ldr	r3, [pc, #384]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80065d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065d2:	e003      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80065d4:	2300      	movs	r3, #0
 80065d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80065d8:	f000 bce1 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80065dc:	f000 bcdf 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065e0:	4b5c      	ldr	r3, [pc, #368]	@ (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80065e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065e4:	f000 bcdb 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ec:	f000 bcd7 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80065f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065f4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80065f8:	430b      	orrs	r3, r1
 80065fa:	f040 80ad 	bne.w	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80065fe:	4b51      	ldr	r3, [pc, #324]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006602:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006606:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800660e:	d056      	beq.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006616:	f200 8090 	bhi.w	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800661a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661c:	2bc0      	cmp	r3, #192	@ 0xc0
 800661e:	f000 8088 	beq.w	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	2bc0      	cmp	r3, #192	@ 0xc0
 8006626:	f200 8088 	bhi.w	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662c:	2b80      	cmp	r3, #128	@ 0x80
 800662e:	d032      	beq.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006632:	2b80      	cmp	r3, #128	@ 0x80
 8006634:	f200 8081 	bhi.w	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800663e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006640:	2b40      	cmp	r3, #64	@ 0x40
 8006642:	d014      	beq.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006644:	e079      	b.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006646:	4b3f      	ldr	r3, [pc, #252]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800664e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006652:	d108      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006658:	4618      	mov	r0, r3
 800665a:	f000 ff67 	bl	800752c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800665e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006662:	f000 bc9c 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800666a:	f000 bc98 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800666e:	4b35      	ldr	r3, [pc, #212]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006676:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800667a:	d108      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800667c:	f107 0318 	add.w	r3, r7, #24
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fcab 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800668a:	f000 bc88 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006692:	f000 bc84 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006696:	4b2b      	ldr	r3, [pc, #172]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800669e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066a2:	d108      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066a4:	f107 030c 	add.w	r3, r7, #12
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fdeb 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066b2:	f000 bc74 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066ba:	f000 bc70 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066be:	4b21      	ldr	r3, [pc, #132]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d10c      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80066d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d109      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066da:	4b1a      	ldr	r3, [pc, #104]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	08db      	lsrs	r3, r3, #3
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	4a18      	ldr	r2, [pc, #96]	@ (8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80066e6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066ec:	e01f      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066ee:	4b15      	ldr	r3, [pc, #84]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066fa:	d106      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80066fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006702:	d102      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006704:	4b11      	ldr	r3, [pc, #68]	@ (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006708:	e011      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800670a:	4b0e      	ldr	r3, [pc, #56]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006716:	d106      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800671a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800671e:	d102      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006720:	4b0b      	ldr	r3, [pc, #44]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006724:	e003      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800672a:	f000 bc38 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800672e:	f000 bc36 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006732:	4b08      	ldr	r3, [pc, #32]	@ (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006736:	f000 bc32 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800673e:	f000 bc2e 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006742:	bf00      	nop
 8006744:	58024400 	.word	0x58024400
 8006748:	03d09000 	.word	0x03d09000
 800674c:	003d0900 	.word	0x003d0900
 8006750:	017d7840 	.word	0x017d7840
 8006754:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800675c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006760:	430b      	orrs	r3, r1
 8006762:	f040 809c 	bne.w	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006766:	4b9e      	ldr	r3, [pc, #632]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800676a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800676e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006776:	d054      	beq.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800677e:	f200 808b 	bhi.w	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006784:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006788:	f000 8083 	beq.w	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006792:	f200 8081 	bhi.w	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800679c:	d02f      	beq.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800679e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067a4:	d878      	bhi.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067b2:	d012      	beq.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80067b4:	e070      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067b6:	4b8a      	ldr	r3, [pc, #552]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067c2:	d107      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 feaf 	bl	800752c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067d2:	e3e4      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067d4:	2300      	movs	r3, #0
 80067d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067d8:	e3e1      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067da:	4b81      	ldr	r3, [pc, #516]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067e6:	d107      	bne.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067e8:	f107 0318 	add.w	r3, r7, #24
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 fbf5 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067f6:	e3d2      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067fc:	e3cf      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067fe:	4b78      	ldr	r3, [pc, #480]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800680a:	d107      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800680c:	f107 030c 	add.w	r3, r7, #12
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fd37 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800681a:	e3c0      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006820:	e3bd      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006822:	4b6f      	ldr	r3, [pc, #444]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006826:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800682a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800682c:	4b6c      	ldr	r3, [pc, #432]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b04      	cmp	r3, #4
 8006836:	d10c      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800683a:	2b00      	cmp	r3, #0
 800683c:	d109      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800683e:	4b68      	ldr	r3, [pc, #416]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	08db      	lsrs	r3, r3, #3
 8006844:	f003 0303 	and.w	r3, r3, #3
 8006848:	4a66      	ldr	r2, [pc, #408]	@ (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800684a:	fa22 f303 	lsr.w	r3, r2, r3
 800684e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006850:	e01e      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006852:	4b63      	ldr	r3, [pc, #396]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800685a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800685e:	d106      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006862:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006866:	d102      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006868:	4b5f      	ldr	r3, [pc, #380]	@ (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800686a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800686c:	e010      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800686e:	4b5c      	ldr	r3, [pc, #368]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006876:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800687a:	d106      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800687c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800687e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006882:	d102      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006884:	4b59      	ldr	r3, [pc, #356]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006888:	e002      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800688e:	e386      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006890:	e385      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006892:	4b57      	ldr	r3, [pc, #348]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006896:	e382      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800689c:	e37f      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800689e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80068a6:	430b      	orrs	r3, r1
 80068a8:	f040 80a7 	bne.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80068ac:	4b4c      	ldr	r3, [pc, #304]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80068b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068bc:	d055      	beq.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068c4:	f200 8096 	bhi.w	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80068ce:	f000 8084 	beq.w	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80068d8:	f200 808c 	bhi.w	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068e2:	d030      	beq.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80068e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068ea:	f200 8083 	bhi.w	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d004      	beq.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068fa:	d012      	beq.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80068fc:	e07a      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068fe:	4b38      	ldr	r3, [pc, #224]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006906:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800690a:	d107      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800690c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fe0b 	bl	800752c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800691a:	e340      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006920:	e33d      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006922:	4b2f      	ldr	r3, [pc, #188]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800692a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800692e:	d107      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006930:	f107 0318 	add.w	r3, r7, #24
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fb51 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800693e:	e32e      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006944:	e32b      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006946:	4b26      	ldr	r3, [pc, #152]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800694e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006952:	d107      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006954:	f107 030c 	add.w	r3, r7, #12
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fc93 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006962:	e31c      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006968:	e319      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800696a:	4b1d      	ldr	r3, [pc, #116]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800696c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800696e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006972:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006974:	4b1a      	ldr	r3, [pc, #104]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b04      	cmp	r3, #4
 800697e:	d10c      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006986:	4b16      	ldr	r3, [pc, #88]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	08db      	lsrs	r3, r3, #3
 800698c:	f003 0303 	and.w	r3, r3, #3
 8006990:	4a14      	ldr	r2, [pc, #80]	@ (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006992:	fa22 f303 	lsr.w	r3, r2, r3
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006998:	e01e      	b.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800699a:	4b11      	ldr	r3, [pc, #68]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069a6:	d106      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80069a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069ae:	d102      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069b0:	4b0d      	ldr	r3, [pc, #52]	@ (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069b4:	e010      	b.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069b6:	4b0a      	ldr	r3, [pc, #40]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069c2:	d106      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80069c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069ca:	d102      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069cc:	4b07      	ldr	r3, [pc, #28]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80069ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069d0:	e002      	b.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80069d6:	e2e2      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069d8:	e2e1      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069da:	4b05      	ldr	r3, [pc, #20]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80069dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069de:	e2de      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069e0:	58024400 	.word	0x58024400
 80069e4:	03d09000 	.word	0x03d09000
 80069e8:	003d0900 	.word	0x003d0900
 80069ec:	017d7840 	.word	0x017d7840
 80069f0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069f8:	e2d1      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80069fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069fe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006a02:	430b      	orrs	r3, r1
 8006a04:	f040 809c 	bne.w	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006a08:	4b93      	ldr	r3, [pc, #588]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a0c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006a10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a18:	d054      	beq.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a20:	f200 808b 	bhi.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a2a:	f000 8083 	beq.w	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a34:	f200 8081 	bhi.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a3e:	d02f      	beq.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a46:	d878      	bhi.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d004      	beq.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a54:	d012      	beq.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006a56:	e070      	b.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a58:	4b7f      	ldr	r3, [pc, #508]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a64:	d107      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fd5e 	bl	800752c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a74:	e293      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a7a:	e290      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a7c:	4b76      	ldr	r3, [pc, #472]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a88:	d107      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a8a:	f107 0318 	add.w	r3, r7, #24
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 faa4 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a98:	e281      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a9e:	e27e      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006aa0:	4b6d      	ldr	r3, [pc, #436]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aac:	d107      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aae:	f107 030c 	add.w	r3, r7, #12
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fbe6 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006abc:	e26f      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac2:	e26c      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ac4:	4b64      	ldr	r3, [pc, #400]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ac8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006acc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ace:	4b62      	ldr	r3, [pc, #392]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0304 	and.w	r3, r3, #4
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d10c      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ae0:	4b5d      	ldr	r3, [pc, #372]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	08db      	lsrs	r3, r3, #3
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	4a5c      	ldr	r2, [pc, #368]	@ (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006aec:	fa22 f303 	lsr.w	r3, r2, r3
 8006af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006af2:	e01e      	b.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006af4:	4b58      	ldr	r3, [pc, #352]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b00:	d106      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b08:	d102      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b0a:	4b55      	ldr	r3, [pc, #340]	@ (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b0e:	e010      	b.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b10:	4b51      	ldr	r3, [pc, #324]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b1c:	d106      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b24:	d102      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b26:	4b4f      	ldr	r3, [pc, #316]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b2a:	e002      	b.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006b30:	e235      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b32:	e234      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b34:	4b4c      	ldr	r3, [pc, #304]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b38:	e231      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b3e:	e22e      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b44:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	f040 808f 	bne.w	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006b4e:	4b42      	ldr	r3, [pc, #264]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b52:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006b56:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b5e:	d06b      	beq.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b66:	d874      	bhi.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b6e:	d056      	beq.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b76:	d86c      	bhi.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b7e:	d03b      	beq.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b86:	d864      	bhi.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b8e:	d021      	beq.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b96:	d85c      	bhi.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d004      	beq.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ba4:	d004      	beq.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006ba6:	e054      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006ba8:	f7fe fa22 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 8006bac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006bae:	e1f6      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bb0:	4b29      	ldr	r3, [pc, #164]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bbc:	d107      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bbe:	f107 0318 	add.w	r3, r7, #24
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fa0a 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bcc:	e1e7      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bd2:	e1e4      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bd4:	4b20      	ldr	r3, [pc, #128]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006be0:	d107      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006be2:	f107 030c 	add.w	r3, r7, #12
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fb4c 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bf0:	e1d5      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bf6:	e1d2      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bf8:	4b17      	ldr	r3, [pc, #92]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d109      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c04:	4b14      	ldr	r3, [pc, #80]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	08db      	lsrs	r3, r3, #3
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	4a13      	ldr	r2, [pc, #76]	@ (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006c10:	fa22 f303 	lsr.w	r3, r2, r3
 8006c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c16:	e1c2      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c1c:	e1bf      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c2a:	d102      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c30:	e1b5      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c36:	e1b2      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c38:	4b07      	ldr	r3, [pc, #28]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c44:	d102      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006c46:	4b07      	ldr	r3, [pc, #28]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c4a:	e1a8      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c50:	e1a5      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c56:	e1a2      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c58:	58024400 	.word	0x58024400
 8006c5c:	03d09000 	.word	0x03d09000
 8006c60:	003d0900 	.word	0x003d0900
 8006c64:	017d7840 	.word	0x017d7840
 8006c68:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c70:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006c74:	430b      	orrs	r3, r1
 8006c76:	d173      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006c78:	4b9c      	ldr	r3, [pc, #624]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c88:	d02f      	beq.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c90:	d863      	bhi.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d004      	beq.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c9e:	d012      	beq.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006ca0:	e05b      	b.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ca2:	4b92      	ldr	r3, [pc, #584]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006caa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cae:	d107      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb0:	f107 0318 	add.w	r3, r7, #24
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 f991 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cbe:	e16e      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc4:	e16b      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cc6:	4b89      	ldr	r3, [pc, #548]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cd2:	d107      	bne.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cd4:	f107 030c 	add.w	r3, r7, #12
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fad3 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ce2:	e15c      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce8:	e159      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cea:	4b80      	ldr	r3, [pc, #512]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006cf2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cf4:	4b7d      	ldr	r3, [pc, #500]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d10c      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d109      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d06:	4b79      	ldr	r3, [pc, #484]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	08db      	lsrs	r3, r3, #3
 8006d0c:	f003 0303 	and.w	r3, r3, #3
 8006d10:	4a77      	ldr	r2, [pc, #476]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006d12:	fa22 f303 	lsr.w	r3, r2, r3
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d18:	e01e      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d1a:	4b74      	ldr	r3, [pc, #464]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d26:	d106      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d2e:	d102      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d30:	4b70      	ldr	r3, [pc, #448]	@ (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d34:	e010      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d36:	4b6d      	ldr	r3, [pc, #436]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d42:	d106      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d4a:	d102      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d50:	e002      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d56:	e122      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d58:	e121      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d5e:	e11e      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d64:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	d133      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006d6c:	4b5f      	ldr	r3, [pc, #380]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d74:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d004      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d82:	d012      	beq.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006d84:	e023      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d86:	4b59      	ldr	r3, [pc, #356]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d92:	d107      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fbc7 	bl	800752c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006da2:	e0fc      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006da8:	e0f9      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006daa:	4b50      	ldr	r3, [pc, #320]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006db2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006db6:	d107      	bne.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006db8:	f107 0318 	add.w	r3, r7, #24
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 f90d 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dc6:	e0ea      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dcc:	e0e7      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dd2:	e0e4      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dd8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	f040 808d 	bne.w	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006de2:	4b42      	ldr	r3, [pc, #264]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006dea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006df2:	d06b      	beq.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dfa:	d874      	bhi.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e02:	d056      	beq.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e0a:	d86c      	bhi.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e12:	d03b      	beq.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e1a:	d864      	bhi.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e22:	d021      	beq.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e2a:	d85c      	bhi.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d004      	beq.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e38:	d004      	beq.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006e3a:	e054      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006e3c:	f000 f8b8 	bl	8006fb0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e40:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e42:	e0ac      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e44:	4b29      	ldr	r3, [pc, #164]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e50:	d107      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e52:	f107 0318 	add.w	r3, r7, #24
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f8c0 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e60:	e09d      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e66:	e09a      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e68:	4b20      	ldr	r3, [pc, #128]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e74:	d107      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e76:	f107 030c 	add.w	r3, r7, #12
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 fa02 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e84:	e08b      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e8a:	e088      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e8c:	4b17      	ldr	r3, [pc, #92]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d109      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e98:	4b14      	ldr	r3, [pc, #80]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	08db      	lsrs	r3, r3, #3
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	4a13      	ldr	r2, [pc, #76]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eaa:	e078      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eb0:	e075      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ebe:	d102      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ec4:	e06b      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eca:	e068      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ecc:	4b07      	ldr	r3, [pc, #28]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ed8:	d102      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006eda:	4b07      	ldr	r3, [pc, #28]	@ (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ede:	e05e      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee4:	e05b      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eea:	e058      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006eec:	58024400 	.word	0x58024400
 8006ef0:	03d09000 	.word	0x03d09000
 8006ef4:	003d0900 	.word	0x003d0900
 8006ef8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f00:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006f04:	430b      	orrs	r3, r1
 8006f06:	d148      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006f08:	4b27      	ldr	r3, [pc, #156]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f18:	d02a      	beq.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f20:	d838      	bhi.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d004      	beq.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f2e:	d00d      	beq.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006f30:	e030      	b.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f32:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f3e:	d102      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006f40:	4b1a      	ldr	r3, [pc, #104]	@ (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f44:	e02b      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f4a:	e028      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f4c:	4b16      	ldr	r3, [pc, #88]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f58:	d107      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 fae4 	bl	800752c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f68:	e019      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f6e:	e016      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f70:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f7c:	d107      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f7e:	f107 0318 	add.w	r3, r7, #24
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 f82a 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f8c:	e007      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f92:	e004      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f98:	e001      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3740      	adds	r7, #64	@ 0x40
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	58024400 	.word	0x58024400
 8006fac:	017d7840 	.word	0x017d7840

08006fb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006fb4:	f7fd ffec 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	4b06      	ldr	r3, [pc, #24]	@ (8006fd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	091b      	lsrs	r3, r3, #4
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	4904      	ldr	r1, [pc, #16]	@ (8006fd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006fc6:	5ccb      	ldrb	r3, [r1, r3]
 8006fc8:	f003 031f 	and.w	r3, r3, #31
 8006fcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	58024400 	.word	0x58024400
 8006fd8:	08010f70 	.word	0x08010f70

08006fdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b089      	sub	sp, #36	@ 0x24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fe4:	4ba1      	ldr	r3, [pc, #644]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006fee:	4b9f      	ldr	r3, [pc, #636]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff2:	0b1b      	lsrs	r3, r3, #12
 8006ff4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ff8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffe:	091b      	lsrs	r3, r3, #4
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007006:	4b99      	ldr	r3, [pc, #612]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800700a:	08db      	lsrs	r3, r3, #3
 800700c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	fb02 f303 	mul.w	r3, r2, r3
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 8111 	beq.w	800724c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b02      	cmp	r3, #2
 800702e:	f000 8083 	beq.w	8007138 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	2b02      	cmp	r3, #2
 8007036:	f200 80a1 	bhi.w	800717c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d056      	beq.n	80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007046:	e099      	b.n	800717c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007048:	4b88      	ldr	r3, [pc, #544]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d02d      	beq.n	80070b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007054:	4b85      	ldr	r3, [pc, #532]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	08db      	lsrs	r3, r3, #3
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	4a84      	ldr	r2, [pc, #528]	@ (8007270 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007060:	fa22 f303 	lsr.w	r3, r2, r3
 8007064:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	ee07 3a90 	vmov	s15, r3
 800706c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707e:	4b7b      	ldr	r3, [pc, #492]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007092:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070ae:	e087      	b.n	80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c2:	4b6a      	ldr	r3, [pc, #424]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070f2:	e065      	b.n	80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800727c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007106:	4b59      	ldr	r3, [pc, #356]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007116:	ed97 6a03 	vldr	s12, [r7, #12]
 800711a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800711e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800712a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007136:	e043      	b.n	80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007142:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800714a:	4b48      	ldr	r3, [pc, #288]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715a:	ed97 6a03 	vldr	s12, [r7, #12]
 800715e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800716e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800717a:	e021      	b.n	80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007186:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800727c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800718a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718e:	4b37      	ldr	r3, [pc, #220]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719e:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80071c0:	4b2a      	ldr	r3, [pc, #168]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c4:	0a5b      	lsrs	r3, r3, #9
 80071c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071da:	edd7 6a07 	vldr	s13, [r7, #28]
 80071de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e6:	ee17 2a90 	vmov	r2, s15
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80071ee:	4b1f      	ldr	r3, [pc, #124]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f2:	0c1b      	lsrs	r3, r3, #16
 80071f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071f8:	ee07 3a90 	vmov	s15, r3
 80071fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007200:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007204:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007208:	edd7 6a07 	vldr	s13, [r7, #28]
 800720c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007214:	ee17 2a90 	vmov	r2, s15
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800721c:	4b13      	ldr	r3, [pc, #76]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800721e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007220:	0e1b      	lsrs	r3, r3, #24
 8007222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007236:	edd7 6a07 	vldr	s13, [r7, #28]
 800723a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800723e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007242:	ee17 2a90 	vmov	r2, s15
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800724a:	e008      	b.n	800725e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	609a      	str	r2, [r3, #8]
}
 800725e:	bf00      	nop
 8007260:	3724      	adds	r7, #36	@ 0x24
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	58024400 	.word	0x58024400
 8007270:	03d09000 	.word	0x03d09000
 8007274:	46000000 	.word	0x46000000
 8007278:	4c742400 	.word	0x4c742400
 800727c:	4a742400 	.word	0x4a742400
 8007280:	4bbebc20 	.word	0x4bbebc20

08007284 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007284:	b480      	push	{r7}
 8007286:	b089      	sub	sp, #36	@ 0x24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800728c:	4ba1      	ldr	r3, [pc, #644]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800728e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007290:	f003 0303 	and.w	r3, r3, #3
 8007294:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007296:	4b9f      	ldr	r3, [pc, #636]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729a:	0d1b      	lsrs	r3, r3, #20
 800729c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072a2:	4b9c      	ldr	r3, [pc, #624]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a6:	0a1b      	lsrs	r3, r3, #8
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80072ae:	4b99      	ldr	r3, [pc, #612]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b2:	08db      	lsrs	r3, r3, #3
 80072b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	fb02 f303 	mul.w	r3, r2, r3
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8111 	beq.w	80074f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	f000 8083 	beq.w	80073e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	f200 80a1 	bhi.w	8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d056      	beq.n	800739c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80072ee:	e099      	b.n	8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072f0:	4b88      	ldr	r3, [pc, #544]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d02d      	beq.n	8007358 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072fc:	4b85      	ldr	r3, [pc, #532]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	08db      	lsrs	r3, r3, #3
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	4a84      	ldr	r2, [pc, #528]	@ (8007518 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007308:	fa22 f303 	lsr.w	r3, r2, r3
 800730c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	ee07 3a90 	vmov	s15, r3
 8007314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007326:	4b7b      	ldr	r3, [pc, #492]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007336:	ed97 6a03 	vldr	s12, [r7, #12]
 800733a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800751c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800733e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800734a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007352:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007356:	e087      	b.n	8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800736a:	4b6a      	ldr	r3, [pc, #424]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737a:	ed97 6a03 	vldr	s12, [r7, #12]
 800737e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800751c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800738a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800738e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800739a:	e065      	b.n	8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ae:	4b59      	ldr	r3, [pc, #356]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073be:	ed97 6a03 	vldr	s12, [r7, #12]
 80073c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800751c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073de:	e043      	b.n	8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80073ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f2:	4b48      	ldr	r3, [pc, #288]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007402:	ed97 6a03 	vldr	s12, [r7, #12]
 8007406:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800751c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800740a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800741a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007422:	e021      	b.n	8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007436:	4b37      	ldr	r3, [pc, #220]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007446:	ed97 6a03 	vldr	s12, [r7, #12]
 800744a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800751c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800744e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800745a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800745e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007466:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007468:	4b2a      	ldr	r3, [pc, #168]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800746a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746c:	0a5b      	lsrs	r3, r3, #9
 800746e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800747e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007482:	edd7 6a07 	vldr	s13, [r7, #28]
 8007486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800748a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800748e:	ee17 2a90 	vmov	r2, s15
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007496:	4b1f      	ldr	r3, [pc, #124]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749a:	0c1b      	lsrs	r3, r3, #16
 800749c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074a0:	ee07 3a90 	vmov	s15, r3
 80074a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80074b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074bc:	ee17 2a90 	vmov	r2, s15
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80074c4:	4b13      	ldr	r3, [pc, #76]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c8:	0e1b      	lsrs	r3, r3, #24
 80074ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074de:	edd7 6a07 	vldr	s13, [r7, #28]
 80074e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ea:	ee17 2a90 	vmov	r2, s15
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80074f2:	e008      	b.n	8007506 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	609a      	str	r2, [r3, #8]
}
 8007506:	bf00      	nop
 8007508:	3724      	adds	r7, #36	@ 0x24
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	58024400 	.word	0x58024400
 8007518:	03d09000 	.word	0x03d09000
 800751c:	46000000 	.word	0x46000000
 8007520:	4c742400 	.word	0x4c742400
 8007524:	4a742400 	.word	0x4a742400
 8007528:	4bbebc20 	.word	0x4bbebc20

0800752c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800752c:	b480      	push	{r7}
 800752e:	b089      	sub	sp, #36	@ 0x24
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007534:	4ba0      	ldr	r3, [pc, #640]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800753e:	4b9e      	ldr	r3, [pc, #632]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007542:	091b      	lsrs	r3, r3, #4
 8007544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007548:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800754a:	4b9b      	ldr	r3, [pc, #620]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800754c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007554:	4b98      	ldr	r3, [pc, #608]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007558:	08db      	lsrs	r3, r3, #3
 800755a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	fb02 f303 	mul.w	r3, r2, r3
 8007564:	ee07 3a90 	vmov	s15, r3
 8007568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 8111 	beq.w	800779a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	2b02      	cmp	r3, #2
 800757c:	f000 8083 	beq.w	8007686 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	2b02      	cmp	r3, #2
 8007584:	f200 80a1 	bhi.w	80076ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d056      	beq.n	8007642 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007594:	e099      	b.n	80076ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007596:	4b88      	ldr	r3, [pc, #544]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d02d      	beq.n	80075fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075a2:	4b85      	ldr	r3, [pc, #532]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	08db      	lsrs	r3, r3, #3
 80075a8:	f003 0303 	and.w	r3, r3, #3
 80075ac:	4a83      	ldr	r2, [pc, #524]	@ (80077bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80075ae:	fa22 f303 	lsr.w	r3, r2, r3
 80075b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	ee07 3a90 	vmov	s15, r3
 80075c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075cc:	4b7a      	ldr	r3, [pc, #488]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d4:	ee07 3a90 	vmov	s15, r3
 80075d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80075e0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075fc:	e087      	b.n	800770e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	ee07 3a90 	vmov	s15, r3
 8007604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007608:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800760c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007610:	4b69      	ldr	r3, [pc, #420]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007618:	ee07 3a90 	vmov	s15, r3
 800761c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007620:	ed97 6a03 	vldr	s12, [r7, #12]
 8007624:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007630:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007640:	e065      	b.n	800770e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	ee07 3a90 	vmov	s15, r3
 8007648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80077c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007654:	4b58      	ldr	r3, [pc, #352]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765c:	ee07 3a90 	vmov	s15, r3
 8007660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007664:	ed97 6a03 	vldr	s12, [r7, #12]
 8007668:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800766c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007674:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007680:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007684:	e043      	b.n	800770e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	ee07 3a90 	vmov	s15, r3
 800768c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007690:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007698:	4b47      	ldr	r3, [pc, #284]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800769a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a0:	ee07 3a90 	vmov	s15, r3
 80076a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ac:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076c8:	e021      	b.n	800770e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	ee07 3a90 	vmov	s15, r3
 80076d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076dc:	4b36      	ldr	r3, [pc, #216]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e4:	ee07 3a90 	vmov	s15, r3
 80076e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80076f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007708:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800770c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800770e:	4b2a      	ldr	r3, [pc, #168]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007712:	0a5b      	lsrs	r3, r3, #9
 8007714:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007718:	ee07 3a90 	vmov	s15, r3
 800771c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007720:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007724:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007728:	edd7 6a07 	vldr	s13, [r7, #28]
 800772c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007734:	ee17 2a90 	vmov	r2, s15
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800773c:	4b1e      	ldr	r3, [pc, #120]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800773e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007740:	0c1b      	lsrs	r3, r3, #16
 8007742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007752:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007756:	edd7 6a07 	vldr	s13, [r7, #28]
 800775a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800775e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007762:	ee17 2a90 	vmov	r2, s15
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800776a:	4b13      	ldr	r3, [pc, #76]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800776c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800776e:	0e1b      	lsrs	r3, r3, #24
 8007770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007774:	ee07 3a90 	vmov	s15, r3
 8007778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007780:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007784:	edd7 6a07 	vldr	s13, [r7, #28]
 8007788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800778c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007790:	ee17 2a90 	vmov	r2, s15
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007798:	e008      	b.n	80077ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	609a      	str	r2, [r3, #8]
}
 80077ac:	bf00      	nop
 80077ae:	3724      	adds	r7, #36	@ 0x24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	58024400 	.word	0x58024400
 80077bc:	03d09000 	.word	0x03d09000
 80077c0:	46000000 	.word	0x46000000
 80077c4:	4c742400 	.word	0x4c742400
 80077c8:	4a742400 	.word	0x4a742400
 80077cc:	4bbebc20 	.word	0x4bbebc20

080077d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077de:	4b53      	ldr	r3, [pc, #332]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80077e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d101      	bne.n	80077ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e099      	b.n	8007922 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80077ee:	4b4f      	ldr	r3, [pc, #316]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a4e      	ldr	r2, [pc, #312]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80077f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80077f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077fa:	f7f9 fb2f 	bl	8000e5c <HAL_GetTick>
 80077fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007800:	e008      	b.n	8007814 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007802:	f7f9 fb2b 	bl	8000e5c <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d901      	bls.n	8007814 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e086      	b.n	8007922 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007814:	4b45      	ldr	r3, [pc, #276]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f0      	bne.n	8007802 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007820:	4b42      	ldr	r3, [pc, #264]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007824:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	031b      	lsls	r3, r3, #12
 800782e:	493f      	ldr	r1, [pc, #252]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007830:	4313      	orrs	r3, r2
 8007832:	628b      	str	r3, [r1, #40]	@ 0x28
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	3b01      	subs	r3, #1
 800783a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	3b01      	subs	r3, #1
 8007844:	025b      	lsls	r3, r3, #9
 8007846:	b29b      	uxth	r3, r3
 8007848:	431a      	orrs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	3b01      	subs	r3, #1
 8007850:	041b      	lsls	r3, r3, #16
 8007852:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	3b01      	subs	r3, #1
 800785e:	061b      	lsls	r3, r3, #24
 8007860:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007864:	4931      	ldr	r1, [pc, #196]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007866:	4313      	orrs	r3, r2
 8007868:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800786a:	4b30      	ldr	r3, [pc, #192]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	492d      	ldr	r1, [pc, #180]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007878:	4313      	orrs	r3, r2
 800787a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800787c:	4b2b      	ldr	r3, [pc, #172]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 800787e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007880:	f023 0220 	bic.w	r2, r3, #32
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	4928      	ldr	r1, [pc, #160]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 800788a:	4313      	orrs	r3, r2
 800788c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800788e:	4b27      	ldr	r3, [pc, #156]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007892:	4a26      	ldr	r2, [pc, #152]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007894:	f023 0310 	bic.w	r3, r3, #16
 8007898:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800789a:	4b24      	ldr	r3, [pc, #144]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 800789c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800789e:	4b24      	ldr	r3, [pc, #144]	@ (8007930 <RCCEx_PLL2_Config+0x160>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	69d2      	ldr	r2, [r2, #28]
 80078a6:	00d2      	lsls	r2, r2, #3
 80078a8:	4920      	ldr	r1, [pc, #128]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80078ae:	4b1f      	ldr	r3, [pc, #124]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b2:	4a1e      	ldr	r2, [pc, #120]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078b4:	f043 0310 	orr.w	r3, r3, #16
 80078b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d106      	bne.n	80078ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80078c0:	4b1a      	ldr	r3, [pc, #104]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c4:	4a19      	ldr	r2, [pc, #100]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078cc:	e00f      	b.n	80078ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d106      	bne.n	80078e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80078d4:	4b15      	ldr	r3, [pc, #84]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d8:	4a14      	ldr	r2, [pc, #80]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078e0:	e005      	b.n	80078ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078e2:	4b12      	ldr	r3, [pc, #72]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e6:	4a11      	ldr	r2, [pc, #68]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80078ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80078ee:	4b0f      	ldr	r3, [pc, #60]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a0e      	ldr	r2, [pc, #56]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078fa:	f7f9 faaf 	bl	8000e5c <HAL_GetTick>
 80078fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007900:	e008      	b.n	8007914 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007902:	f7f9 faab 	bl	8000e5c <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	d901      	bls.n	8007914 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e006      	b.n	8007922 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007914:	4b05      	ldr	r3, [pc, #20]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0f0      	beq.n	8007902 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007920:	7bfb      	ldrb	r3, [r7, #15]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	58024400 	.word	0x58024400
 8007930:	ffff0007 	.word	0xffff0007

08007934 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007942:	4b53      	ldr	r3, [pc, #332]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	2b03      	cmp	r3, #3
 800794c:	d101      	bne.n	8007952 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e099      	b.n	8007a86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007952:	4b4f      	ldr	r3, [pc, #316]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a4e      	ldr	r2, [pc, #312]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007958:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800795c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800795e:	f7f9 fa7d 	bl	8000e5c <HAL_GetTick>
 8007962:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007964:	e008      	b.n	8007978 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007966:	f7f9 fa79 	bl	8000e5c <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d901      	bls.n	8007978 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e086      	b.n	8007a86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007978:	4b45      	ldr	r3, [pc, #276]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1f0      	bne.n	8007966 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007984:	4b42      	ldr	r3, [pc, #264]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007988:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	051b      	lsls	r3, r3, #20
 8007992:	493f      	ldr	r1, [pc, #252]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007994:	4313      	orrs	r3, r2
 8007996:	628b      	str	r3, [r1, #40]	@ 0x28
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	3b01      	subs	r3, #1
 800799e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	025b      	lsls	r3, r3, #9
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	041b      	lsls	r3, r3, #16
 80079b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	061b      	lsls	r3, r3, #24
 80079c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80079c8:	4931      	ldr	r1, [pc, #196]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079ce:	4b30      	ldr	r3, [pc, #192]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	492d      	ldr	r1, [pc, #180]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	4928      	ldr	r1, [pc, #160]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079f2:	4b27      	ldr	r3, [pc, #156]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f6:	4a26      	ldr	r2, [pc, #152]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079fe:	4b24      	ldr	r3, [pc, #144]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a02:	4b24      	ldr	r3, [pc, #144]	@ (8007a94 <RCCEx_PLL3_Config+0x160>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	69d2      	ldr	r2, [r2, #28]
 8007a0a:	00d2      	lsls	r2, r2, #3
 8007a0c:	4920      	ldr	r1, [pc, #128]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007a12:	4b1f      	ldr	r3, [pc, #124]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a16:	4a1e      	ldr	r2, [pc, #120]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d106      	bne.n	8007a32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a24:	4b1a      	ldr	r3, [pc, #104]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a28:	4a19      	ldr	r2, [pc, #100]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a30:	e00f      	b.n	8007a52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d106      	bne.n	8007a46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a38:	4b15      	ldr	r3, [pc, #84]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3c:	4a14      	ldr	r2, [pc, #80]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a44:	e005      	b.n	8007a52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a46:	4b12      	ldr	r3, [pc, #72]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4a:	4a11      	ldr	r2, [pc, #68]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a52:	4b0f      	ldr	r3, [pc, #60]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a0e      	ldr	r2, [pc, #56]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a5e:	f7f9 f9fd 	bl	8000e5c <HAL_GetTick>
 8007a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a64:	e008      	b.n	8007a78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a66:	f7f9 f9f9 	bl	8000e5c <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e006      	b.n	8007a86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a78:	4b05      	ldr	r3, [pc, #20]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0f0      	beq.n	8007a66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	58024400 	.word	0x58024400
 8007a94:	ffff0007 	.word	0xffff0007

08007a98 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08a      	sub	sp, #40	@ 0x28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e075      	b.n	8007b96 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d105      	bne.n	8007ac2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f90b 	bl	8007cd8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f868 	bl	8007ba0 <HAL_SD_InitCard>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e05d      	b.n	8007b96 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007ada:	f107 0308 	add.w	r3, r7, #8
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fdbf 	bl	8008664 <HAL_SD_GetCardStatus>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e052      	b.n	8007b96 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007af0:	7e3b      	ldrb	r3, [r7, #24]
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007af6:	7e7b      	ldrb	r3, [r7, #25]
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d10a      	bne.n	8007b1a <HAL_SD_Init+0x82>
 8007b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d102      	bne.n	8007b10 <HAL_SD_Init+0x78>
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d004      	beq.n	8007b1a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b16:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b18:	e00b      	b.n	8007b32 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d104      	bne.n	8007b2c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b28:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b2a:	e002      	b.n	8007b32 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fe7d 	bl	8008838 <HAL_SD_ConfigWideBusOperation>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e026      	b.n	8007b96 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007b48:	f7f9 f988 	bl	8000e5c <HAL_GetTick>
 8007b4c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007b4e:	e011      	b.n	8007b74 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007b50:	f7f9 f984 	bl	8000e5c <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5e:	d109      	bne.n	8007b74 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b66:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e010      	b.n	8007b96 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f001 f82d 	bl	8008bd4 <HAL_SD_GetCardState>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	d1e7      	bne.n	8007b50 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3728      	adds	r7, #40	@ 0x28
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007ba0:	b590      	push	{r4, r7, lr}
 8007ba2:	b08d      	sub	sp, #52	@ 0x34
 8007ba4:	af02      	add	r7, sp, #8
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007bac:	2300      	movs	r3, #0
 8007bae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007bb8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007bbc:	f04f 0100 	mov.w	r1, #0
 8007bc0:	f7fe fc76 	bl	80064b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007bc4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d109      	bne.n	8007be0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007bda:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e070      	b.n	8007cc2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be2:	0a1b      	lsrs	r3, r3, #8
 8007be4:	4a39      	ldr	r2, [pc, #228]	@ (8007ccc <HAL_SD_InitCard+0x12c>)
 8007be6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bea:	091b      	lsrs	r3, r3, #4
 8007bec:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681c      	ldr	r4, [r3, #0]
 8007bf2:	466a      	mov	r2, sp
 8007bf4:	f107 0318 	add.w	r3, r7, #24
 8007bf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007bfc:	e882 0003 	stmia.w	r2, {r0, r1}
 8007c00:	f107 030c 	add.w	r3, r7, #12
 8007c04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c06:	4620      	mov	r0, r4
 8007c08:	f002 fea6 	bl	800a958 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f002 fee9 	bl	800a9e8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d005      	beq.n	8007c28 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c26:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d007      	beq.n	8007c3e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007c2e:	4a28      	ldr	r2, [pc, #160]	@ (8007cd0 <HAL_SD_InitCard+0x130>)
 8007c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c36:	3301      	adds	r3, #1
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7f9 f91b 	bl	8000e74 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 f8b6 	bl	8008db0 <SD_PowerON>
 8007c44:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00b      	beq.n	8007c64 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e02e      	b.n	8007cc2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 ffd5 	bl	8008c14 <SD_InitCard>
 8007c6a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00b      	beq.n	8007c8a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e01b      	b.n	8007cc2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007c92:	4618      	mov	r0, r3
 8007c94:	f002 ff3e 	bl	800ab14 <SDMMC_CmdBlockLength>
 8007c98:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00f      	beq.n	8007cc0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8007cd4 <HAL_SD_InitCard+0x134>)
 8007ca6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	372c      	adds	r7, #44	@ 0x2c
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd90      	pop	{r4, r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	014f8b59 	.word	0x014f8b59
 8007cd0:	00012110 	.word	0x00012110
 8007cd4:	1fe00fff 	.word	0x1fe00fff

08007cd8 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b092      	sub	sp, #72	@ 0x48
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007cfa:	f7f9 f8af 	bl	8000e5c <HAL_GetTick>
 8007cfe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d107      	bne.n	8007d1e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d12:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e167      	b.n	8007fee <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	f040 815a 	bne.w	8007fe0 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	441a      	add	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d907      	bls.n	8007d50 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d44:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e14e      	b.n	8007fee <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2203      	movs	r2, #3
 8007d54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d002      	beq.n	8007d6e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6a:	025b      	lsls	r3, r3, #9
 8007d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d72:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	025b      	lsls	r3, r3, #9
 8007d78:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d7a:	2390      	movs	r3, #144	@ 0x90
 8007d7c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f107 0214 	add.w	r2, r7, #20
 8007d92:	4611      	mov	r1, r2
 8007d94:	4618      	mov	r0, r3
 8007d96:	f002 fe91 	bl	800aabc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007da8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d90a      	bls.n	8007dc6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2202      	movs	r2, #2
 8007db4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f002 feef 	bl	800aba0 <SDMMC_CmdReadMultiBlock>
 8007dc2:	6478      	str	r0, [r7, #68]	@ 0x44
 8007dc4:	e009      	b.n	8007dda <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f002 fec1 	bl	800ab5a <SDMMC_CmdReadSingleBlock>
 8007dd8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d012      	beq.n	8007e06 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a84      	ldr	r2, [pc, #528]	@ (8007ff8 <HAL_SD_ReadBlocks+0x30c>)
 8007de6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dee:	431a      	orrs	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e0f3      	b.n	8007fee <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e0a:	e058      	b.n	8007ebe <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d033      	beq.n	8007e82 <HAL_SD_ReadBlocks+0x196>
 8007e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e1c:	2b1f      	cmp	r3, #31
 8007e1e:	d930      	bls.n	8007e82 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8007e20:	2300      	movs	r3, #0
 8007e22:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e24:	e027      	b.n	8007e76 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f002 fdbe 	bl	800a9ac <SDMMC_ReadFIFO>
 8007e30:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e42:	0a1b      	lsrs	r3, r3, #8
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e52:	0c1b      	lsrs	r3, r3, #16
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e58:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e62:	0e1b      	lsrs	r3, r3, #24
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8007e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e72:	3301      	adds	r3, #1
 8007e74:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e78:	2b07      	cmp	r3, #7
 8007e7a:	d9d4      	bls.n	8007e26 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e7e:	3b20      	subs	r3, #32
 8007e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007e82:	f7f8 ffeb 	bl	8000e5c <HAL_GetTick>
 8007e86:	4602      	mov	r2, r0
 8007e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d902      	bls.n	8007e98 <HAL_SD_ReadBlocks+0x1ac>
 8007e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d112      	bne.n	8007ebe <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a56      	ldr	r2, [pc, #344]	@ (8007ff8 <HAL_SD_ReadBlocks+0x30c>)
 8007e9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e097      	b.n	8007fee <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ec4:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d09f      	beq.n	8007e0c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007eda:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d022      	beq.n	8007f30 <HAL_SD_ReadBlocks+0x244>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d91f      	bls.n	8007f30 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d01b      	beq.n	8007f30 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f002 feb9 	bl	800ac74 <SDMMC_CmdStopTransfer>
 8007f02:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007f04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d012      	beq.n	8007f30 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a3a      	ldr	r2, [pc, #232]	@ (8007ff8 <HAL_SD_ReadBlocks+0x30c>)
 8007f10:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e05e      	b.n	8007fee <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f36:	f003 0308 	and.w	r3, r3, #8
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d012      	beq.n	8007f64 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a2d      	ldr	r2, [pc, #180]	@ (8007ff8 <HAL_SD_ReadBlocks+0x30c>)
 8007f44:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f4a:	f043 0208 	orr.w	r2, r3, #8
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e044      	b.n	8007fee <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d012      	beq.n	8007f98 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a20      	ldr	r2, [pc, #128]	@ (8007ff8 <HAL_SD_ReadBlocks+0x30c>)
 8007f78:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f7e:	f043 0202 	orr.w	r2, r3, #2
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e02a      	b.n	8007fee <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d012      	beq.n	8007fcc <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a13      	ldr	r2, [pc, #76]	@ (8007ff8 <HAL_SD_ReadBlocks+0x30c>)
 8007fac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fb2:	f043 0220 	orr.w	r2, r3, #32
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e010      	b.n	8007fee <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8007ffc <HAL_SD_ReadBlocks+0x310>)
 8007fd2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	e006      	b.n	8007fee <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
  }
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3748      	adds	r7, #72	@ 0x48
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	1fe00fff 	.word	0x1fe00fff
 8007ffc:	18000f3a 	.word	0x18000f3a

08008000 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b092      	sub	sp, #72	@ 0x48
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
 800800c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800800e:	f7f8 ff25 	bl	8000e5c <HAL_GetTick>
 8008012:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d107      	bne.n	8008032 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008026:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e16b      	b.n	800830a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b01      	cmp	r3, #1
 800803c:	f040 815e 	bne.w	80082fc <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008046:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	441a      	add	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008050:	429a      	cmp	r2, r3
 8008052:	d907      	bls.n	8008064 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008058:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e152      	b.n	800830a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2203      	movs	r2, #3
 8008068:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2200      	movs	r2, #0
 8008072:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008078:	2b01      	cmp	r3, #1
 800807a:	d002      	beq.n	8008082 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800807c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807e:	025b      	lsls	r3, r3, #9
 8008080:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008082:	f04f 33ff 	mov.w	r3, #4294967295
 8008086:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	025b      	lsls	r3, r3, #9
 800808c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800808e:	2390      	movs	r3, #144	@ 0x90
 8008090:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008092:	2300      	movs	r3, #0
 8008094:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008096:	2300      	movs	r3, #0
 8008098:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800809a:	2300      	movs	r3, #0
 800809c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f107 0218 	add.w	r2, r7, #24
 80080a6:	4611      	mov	r1, r2
 80080a8:	4618      	mov	r0, r3
 80080aa:	f002 fd07 	bl	800aabc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68da      	ldr	r2, [r3, #12]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080bc:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d90a      	bls.n	80080da <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2220      	movs	r2, #32
 80080c8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80080d0:	4618      	mov	r0, r3
 80080d2:	f002 fdab 	bl	800ac2c <SDMMC_CmdWriteMultiBlock>
 80080d6:	6478      	str	r0, [r7, #68]	@ 0x44
 80080d8:	e009      	b.n	80080ee <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2210      	movs	r2, #16
 80080de:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80080e6:	4618      	mov	r0, r3
 80080e8:	f002 fd7d 	bl	800abe6 <SDMMC_CmdWriteSingleBlock>
 80080ec:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80080ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d012      	beq.n	800811a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a86      	ldr	r2, [pc, #536]	@ (8008314 <HAL_SD_WriteBlocks+0x314>)
 80080fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008102:	431a      	orrs	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e0f7      	b.n	800830a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800811e:	e05c      	b.n	80081da <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d037      	beq.n	800819e <HAL_SD_WriteBlocks+0x19e>
 800812e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008130:	2b1f      	cmp	r3, #31
 8008132:	d934      	bls.n	800819e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8008134:	2300      	movs	r3, #0
 8008136:	643b      	str	r3, [r7, #64]	@ 0x40
 8008138:	e02b      	b.n	8008192 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800813a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008142:	3301      	adds	r3, #1
 8008144:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	021a      	lsls	r2, r3, #8
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	4313      	orrs	r3, r2
 8008150:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008154:	3301      	adds	r3, #1
 8008156:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	041a      	lsls	r2, r3, #16
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	4313      	orrs	r3, r2
 8008162:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008166:	3301      	adds	r3, #1
 8008168:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800816a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	061a      	lsls	r2, r3, #24
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	4313      	orrs	r3, r2
 8008174:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008178:	3301      	adds	r3, #1
 800817a:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f107 0214 	add.w	r2, r7, #20
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f002 fc1d 	bl	800a9c6 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800818c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800818e:	3301      	adds	r3, #1
 8008190:	643b      	str	r3, [r7, #64]	@ 0x40
 8008192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008194:	2b07      	cmp	r3, #7
 8008196:	d9d0      	bls.n	800813a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800819a:	3b20      	subs	r3, #32
 800819c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800819e:	f7f8 fe5d 	bl	8000e5c <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d902      	bls.n	80081b4 <HAL_SD_WriteBlocks+0x1b4>
 80081ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d112      	bne.n	80081da <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a56      	ldr	r2, [pc, #344]	@ (8008314 <HAL_SD_WriteBlocks+0x314>)
 80081ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081c2:	431a      	orrs	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e097      	b.n	800830a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081e0:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d09b      	beq.n	8008120 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081f6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008202:	2b00      	cmp	r3, #0
 8008204:	d022      	beq.n	800824c <HAL_SD_WriteBlocks+0x24c>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d91f      	bls.n	800824c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008210:	2b03      	cmp	r3, #3
 8008212:	d01b      	beq.n	800824c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4618      	mov	r0, r3
 800821a:	f002 fd2b 	bl	800ac74 <SDMMC_CmdStopTransfer>
 800821e:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008222:	2b00      	cmp	r3, #0
 8008224:	d012      	beq.n	800824c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a3a      	ldr	r2, [pc, #232]	@ (8008314 <HAL_SD_WriteBlocks+0x314>)
 800822c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008234:	431a      	orrs	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e05e      	b.n	800830a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008252:	f003 0308 	and.w	r3, r3, #8
 8008256:	2b00      	cmp	r3, #0
 8008258:	d012      	beq.n	8008280 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a2d      	ldr	r2, [pc, #180]	@ (8008314 <HAL_SD_WriteBlocks+0x314>)
 8008260:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008266:	f043 0208 	orr.w	r2, r3, #8
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e044      	b.n	800830a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d012      	beq.n	80082b4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a20      	ldr	r2, [pc, #128]	@ (8008314 <HAL_SD_WriteBlocks+0x314>)
 8008294:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800829a:	f043 0202 	orr.w	r2, r3, #2
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e02a      	b.n	800830a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ba:	f003 0310 	and.w	r3, r3, #16
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d012      	beq.n	80082e8 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a13      	ldr	r2, [pc, #76]	@ (8008314 <HAL_SD_WriteBlocks+0x314>)
 80082c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ce:	f043 0210 	orr.w	r2, r3, #16
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e010      	b.n	800830a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a0a      	ldr	r2, [pc, #40]	@ (8008318 <HAL_SD_WriteBlocks+0x318>)
 80082ee:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	e006      	b.n	800830a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008300:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
  }
}
 800830a:	4618      	mov	r0, r3
 800830c:	3748      	adds	r7, #72	@ 0x48
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	1fe00fff 	.word	0x1fe00fff
 8008318:	18000f3a 	.word	0x18000f3a

0800831c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800832a:	0f9b      	lsrs	r3, r3, #30
 800832c:	b2da      	uxtb	r2, r3
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008336:	0e9b      	lsrs	r3, r3, #26
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	b2da      	uxtb	r2, r3
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008348:	0e1b      	lsrs	r3, r3, #24
 800834a:	b2db      	uxtb	r3, r3
 800834c:	f003 0303 	and.w	r3, r3, #3
 8008350:	b2da      	uxtb	r2, r3
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800835a:	0c1b      	lsrs	r3, r3, #16
 800835c:	b2da      	uxtb	r2, r3
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008366:	0a1b      	lsrs	r3, r3, #8
 8008368:	b2da      	uxtb	r2, r3
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008372:	b2da      	uxtb	r2, r3
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800837c:	0d1b      	lsrs	r3, r3, #20
 800837e:	b29a      	uxth	r2, r3
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008388:	0c1b      	lsrs	r3, r3, #16
 800838a:	b2db      	uxtb	r3, r3
 800838c:	f003 030f 	and.w	r3, r3, #15
 8008390:	b2da      	uxtb	r2, r3
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800839a:	0bdb      	lsrs	r3, r3, #15
 800839c:	b2db      	uxtb	r3, r3
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083ac:	0b9b      	lsrs	r3, r3, #14
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083be:	0b5b      	lsrs	r3, r3, #13
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083d0:	0b1b      	lsrs	r3, r3, #12
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2200      	movs	r2, #0
 80083e2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d163      	bne.n	80084b4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083f0:	009a      	lsls	r2, r3, #2
 80083f2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80083f6:	4013      	ands	r3, r2
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80083fc:	0f92      	lsrs	r2, r2, #30
 80083fe:	431a      	orrs	r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008408:	0edb      	lsrs	r3, r3, #27
 800840a:	b2db      	uxtb	r3, r3
 800840c:	f003 0307 	and.w	r3, r3, #7
 8008410:	b2da      	uxtb	r2, r3
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800841a:	0e1b      	lsrs	r3, r3, #24
 800841c:	b2db      	uxtb	r3, r3
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	b2da      	uxtb	r2, r3
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800842c:	0d5b      	lsrs	r3, r3, #21
 800842e:	b2db      	uxtb	r3, r3
 8008430:	f003 0307 	and.w	r3, r3, #7
 8008434:	b2da      	uxtb	r2, r3
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800843e:	0c9b      	lsrs	r3, r3, #18
 8008440:	b2db      	uxtb	r3, r3
 8008442:	f003 0307 	and.w	r3, r3, #7
 8008446:	b2da      	uxtb	r2, r3
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008450:	0bdb      	lsrs	r3, r3, #15
 8008452:	b2db      	uxtb	r3, r3
 8008454:	f003 0307 	and.w	r3, r3, #7
 8008458:	b2da      	uxtb	r2, r3
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	7e1b      	ldrb	r3, [r3, #24]
 800846c:	b2db      	uxtb	r3, r3
 800846e:	f003 0307 	and.w	r3, r3, #7
 8008472:	3302      	adds	r3, #2
 8008474:	2201      	movs	r2, #1
 8008476:	fa02 f303 	lsl.w	r3, r2, r3
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800847e:	fb03 f202 	mul.w	r2, r3, r2
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	7a1b      	ldrb	r3, [r3, #8]
 800848a:	b2db      	uxtb	r3, r3
 800848c:	f003 030f 	and.w	r3, r3, #15
 8008490:	2201      	movs	r2, #1
 8008492:	409a      	lsls	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80084a0:	0a52      	lsrs	r2, r2, #9
 80084a2:	fb03 f202 	mul.w	r2, r3, r2
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80084b2:	e031      	b.n	8008518 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d11d      	bne.n	80084f8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084c0:	041b      	lsls	r3, r3, #16
 80084c2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084ca:	0c1b      	lsrs	r3, r3, #16
 80084cc:	431a      	orrs	r2, r3
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	3301      	adds	r3, #1
 80084d8:	029a      	lsls	r2, r3, #10
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80084f6:	e00f      	b.n	8008518 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a58      	ldr	r2, [pc, #352]	@ (8008660 <HAL_SD_GetCardCSD+0x344>)
 80084fe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008504:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e09d      	b.n	8008654 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800851c:	0b9b      	lsrs	r3, r3, #14
 800851e:	b2db      	uxtb	r3, r3
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	b2da      	uxtb	r2, r3
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800852e:	09db      	lsrs	r3, r3, #7
 8008530:	b2db      	uxtb	r3, r3
 8008532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008536:	b2da      	uxtb	r2, r3
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008540:	b2db      	uxtb	r3, r3
 8008542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008546:	b2da      	uxtb	r2, r3
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008550:	0fdb      	lsrs	r3, r3, #31
 8008552:	b2da      	uxtb	r2, r3
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800855c:	0f5b      	lsrs	r3, r3, #29
 800855e:	b2db      	uxtb	r3, r3
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	b2da      	uxtb	r2, r3
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800856e:	0e9b      	lsrs	r3, r3, #26
 8008570:	b2db      	uxtb	r3, r3
 8008572:	f003 0307 	and.w	r3, r3, #7
 8008576:	b2da      	uxtb	r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008580:	0d9b      	lsrs	r3, r3, #22
 8008582:	b2db      	uxtb	r3, r3
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	b2da      	uxtb	r2, r3
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008592:	0d5b      	lsrs	r3, r3, #21
 8008594:	b2db      	uxtb	r3, r3
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	b2da      	uxtb	r2, r3
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085ae:	0c1b      	lsrs	r3, r3, #16
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085c2:	0bdb      	lsrs	r3, r3, #15
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085d6:	0b9b      	lsrs	r3, r3, #14
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085ea:	0b5b      	lsrs	r3, r3, #13
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085fe:	0b1b      	lsrs	r3, r3, #12
 8008600:	b2db      	uxtb	r3, r3
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	b2da      	uxtb	r2, r3
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008612:	0a9b      	lsrs	r3, r3, #10
 8008614:	b2db      	uxtb	r3, r3
 8008616:	f003 0303 	and.w	r3, r3, #3
 800861a:	b2da      	uxtb	r2, r3
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008626:	0a1b      	lsrs	r3, r3, #8
 8008628:	b2db      	uxtb	r3, r3
 800862a:	f003 0303 	and.w	r3, r3, #3
 800862e:	b2da      	uxtb	r2, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800863a:	085b      	lsrs	r3, r3, #1
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008642:	b2da      	uxtb	r2, r3
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	1fe00fff 	.word	0x1fe00fff

08008664 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b094      	sub	sp, #80	@ 0x50
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b03      	cmp	r3, #3
 800867e:	d101      	bne.n	8008684 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e0a7      	b.n	80087d4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008684:	f107 0308 	add.w	r3, r7, #8
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fc1e 	bl	8008ecc <SD_SendSDStatus>
 8008690:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008692:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008694:	2b00      	cmp	r3, #0
 8008696:	d011      	beq.n	80086bc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a4f      	ldr	r2, [pc, #316]	@ (80087dc <HAL_SD_GetCardStatus+0x178>)
 800869e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086a6:	431a      	orrs	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80086ba:	e070      	b.n	800879e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	099b      	lsrs	r3, r3, #6
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	f003 0303 	and.w	r3, r3, #3
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	095b      	lsrs	r3, r3, #5
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	0a1b      	lsrs	r3, r3, #8
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	0e1b      	lsrs	r3, r3, #24
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	4313      	orrs	r3, r2
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	061a      	lsls	r2, r3, #24
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	021b      	lsls	r3, r3, #8
 80086fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008702:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	0a1b      	lsrs	r3, r3, #8
 8008708:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800870c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	0e1b      	lsrs	r3, r3, #24
 8008712:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	b2da      	uxtb	r2, r3
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	0a1b      	lsrs	r3, r3, #8
 8008724:	b2da      	uxtb	r2, r3
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	0d1b      	lsrs	r3, r3, #20
 800872e:	b2db      	uxtb	r3, r3
 8008730:	f003 030f 	and.w	r3, r3, #15
 8008734:	b2da      	uxtb	r2, r3
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	0c1b      	lsrs	r3, r3, #16
 800873e:	b29b      	uxth	r3, r3
 8008740:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008744:	b29a      	uxth	r2, r3
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	b29b      	uxth	r3, r3
 800874a:	b2db      	uxtb	r3, r3
 800874c:	b29b      	uxth	r3, r3
 800874e:	4313      	orrs	r3, r2
 8008750:	b29a      	uxth	r2, r3
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	0a9b      	lsrs	r3, r3, #10
 800875a:	b2db      	uxtb	r3, r3
 800875c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008760:	b2da      	uxtb	r2, r3
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	0a1b      	lsrs	r3, r3, #8
 800876a:	b2db      	uxtb	r3, r3
 800876c:	f003 0303 	and.w	r3, r3, #3
 8008770:	b2da      	uxtb	r2, r3
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	091b      	lsrs	r3, r3, #4
 800877a:	b2db      	uxtb	r3, r3
 800877c:	f003 030f 	and.w	r3, r3, #15
 8008780:	b2da      	uxtb	r2, r3
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	b2db      	uxtb	r3, r3
 800878a:	f003 030f 	and.w	r3, r3, #15
 800878e:	b2da      	uxtb	r2, r3
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	0e1b      	lsrs	r3, r3, #24
 8008798:	b2da      	uxtb	r2, r3
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80087a6:	4618      	mov	r0, r3
 80087a8:	f002 f9b4 	bl	800ab14 <SDMMC_CmdBlockLength>
 80087ac:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80087ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00d      	beq.n	80087d0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a08      	ldr	r2, [pc, #32]	@ (80087dc <HAL_SD_GetCardStatus+0x178>)
 80087ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087c0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 80087d0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3750      	adds	r7, #80	@ 0x50
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	1fe00fff 	.word	0x1fe00fff

080087e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008838:	b590      	push	{r4, r7, lr}
 800883a:	b08d      	sub	sp, #52	@ 0x34
 800883c:	af02      	add	r7, sp, #8
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2203      	movs	r2, #3
 800884c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008854:	2b03      	cmp	r3, #3
 8008856:	d02e      	beq.n	80088b6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800885e:	d106      	bne.n	800886e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008864:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	635a      	str	r2, [r3, #52]	@ 0x34
 800886c:	e029      	b.n	80088c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008874:	d10a      	bne.n	800888c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fc20 	bl	80090bc <SD_WideBus_Enable>
 800887c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	431a      	orrs	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	635a      	str	r2, [r3, #52]	@ 0x34
 800888a:	e01a      	b.n	80088c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fc5d 	bl	8009152 <SD_WideBus_Disable>
 8008898:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	431a      	orrs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80088a6:	e00c      	b.n	80088c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ac:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80088b4:	e005      	b.n	80088c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ba:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d007      	beq.n	80088da <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a5f      	ldr	r2, [pc, #380]	@ (8008a4c <HAL_SD_ConfigWideBusOperation+0x214>)
 80088d0:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80088d8:	e096      	b.n	8008a08 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80088da:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80088de:	f04f 0100 	mov.w	r1, #0
 80088e2:	f7fd fde5 	bl	80064b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80088e6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 8083 	beq.w	80089f6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	695a      	ldr	r2, [r3, #20]
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	4950      	ldr	r1, [pc, #320]	@ (8008a50 <HAL_SD_ConfigWideBusOperation+0x218>)
 800890e:	fba1 1303 	umull	r1, r3, r1, r3
 8008912:	0e1b      	lsrs	r3, r3, #24
 8008914:	429a      	cmp	r2, r3
 8008916:	d303      	bcc.n	8008920 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	61bb      	str	r3, [r7, #24]
 800891e:	e05a      	b.n	80089d6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008928:	d103      	bne.n	8008932 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	61bb      	str	r3, [r7, #24]
 8008930:	e051      	b.n	80089d6 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800893a:	d126      	bne.n	800898a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10e      	bne.n	8008962 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	4a43      	ldr	r2, [pc, #268]	@ (8008a54 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d906      	bls.n	800895a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	4a40      	ldr	r2, [pc, #256]	@ (8008a50 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008950:	fba2 2303 	umull	r2, r3, r2, r3
 8008954:	0e5b      	lsrs	r3, r3, #25
 8008956:	61bb      	str	r3, [r7, #24]
 8008958:	e03d      	b.n	80089d6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	61bb      	str	r3, [r7, #24]
 8008960:	e039      	b.n	80089d6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	fbb2 f3f3 	udiv	r3, r2, r3
 800896e:	4a39      	ldr	r2, [pc, #228]	@ (8008a54 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d906      	bls.n	8008982 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	4a36      	ldr	r2, [pc, #216]	@ (8008a50 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008978:	fba2 2303 	umull	r2, r3, r2, r3
 800897c:	0e5b      	lsrs	r3, r3, #25
 800897e:	61bb      	str	r3, [r7, #24]
 8008980:	e029      	b.n	80089d6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	61bb      	str	r3, [r7, #24]
 8008988:	e025      	b.n	80089d6 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d10e      	bne.n	80089b0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	4a30      	ldr	r2, [pc, #192]	@ (8008a58 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d906      	bls.n	80089a8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	4a2c      	ldr	r2, [pc, #176]	@ (8008a50 <HAL_SD_ConfigWideBusOperation+0x218>)
 800899e:	fba2 2303 	umull	r2, r3, r2, r3
 80089a2:	0e1b      	lsrs	r3, r3, #24
 80089a4:	61bb      	str	r3, [r7, #24]
 80089a6:	e016      	b.n	80089d6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	61bb      	str	r3, [r7, #24]
 80089ae:	e012      	b.n	80089d6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	69fa      	ldr	r2, [r7, #28]
 80089b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089bc:	4a26      	ldr	r2, [pc, #152]	@ (8008a58 <HAL_SD_ConfigWideBusOperation+0x220>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d906      	bls.n	80089d0 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	4a22      	ldr	r2, [pc, #136]	@ (8008a50 <HAL_SD_ConfigWideBusOperation+0x218>)
 80089c6:	fba2 2303 	umull	r2, r3, r2, r3
 80089ca:	0e1b      	lsrs	r3, r3, #24
 80089cc:	61bb      	str	r3, [r7, #24]
 80089ce:	e002      	b.n	80089d6 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681c      	ldr	r4, [r3, #0]
 80089da:	466a      	mov	r2, sp
 80089dc:	f107 0314 	add.w	r3, r7, #20
 80089e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80089e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80089e8:	f107 0308 	add.w	r3, r7, #8
 80089ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089ee:	4620      	mov	r0, r4
 80089f0:	f001 ffb2 	bl	800a958 <SDMMC_Init>
 80089f4:	e008      	b.n	8008a08 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008a10:	4618      	mov	r0, r3
 8008a12:	f002 f87f 	bl	800ab14 <SDMMC_CmdBlockLength>
 8008a16:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00c      	beq.n	8008a38 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a0a      	ldr	r2, [pc, #40]	@ (8008a4c <HAL_SD_ConfigWideBusOperation+0x214>)
 8008a24:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	431a      	orrs	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008a40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	372c      	adds	r7, #44	@ 0x2c
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd90      	pop	{r4, r7, pc}
 8008a4c:	1fe00fff 	.word	0x1fe00fff
 8008a50:	55e63b89 	.word	0x55e63b89
 8008a54:	02faf080 	.word	0x02faf080
 8008a58:	017d7840 	.word	0x017d7840

08008a5c <HAL_SD_ConfigSpeedBusOperation>:
  *            @arg SDMMC_SPEED_MODE_ULTRA: Ultra high speed mode
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_SD_ConfigSpeedBusOperation(SD_HandleTypeDef *hsd, uint32_t SpeedMode)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SDMMC_SPEED_MODE(SpeedMode));
  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2203      	movs	r2, #3
 8008a6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        status = HAL_ERROR;
        break;
    }
  }
#else
  switch (SpeedMode)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d027      	beq.n	8008ac8 <HAL_SD_ConfigSpeedBusOperation+0x6c>
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d85c      	bhi.n	8008b38 <HAL_SD_ConfigSpeedBusOperation+0xdc>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d003      	beq.n	8008a8c <HAL_SD_ConfigSpeedBusOperation+0x30>
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d046      	beq.n	8008b18 <HAL_SD_ConfigSpeedBusOperation+0xbc>
 8008a8a:	e055      	b.n	8008b38 <HAL_SD_ConfigSpeedBusOperation+0xdc>
  {
    case SDMMC_SPEED_MODE_AUTO:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a94:	d008      	beq.n	8008aa8 <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a9e:	d003      	beq.n	8008aa8 <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d150      	bne.n	8008b4a <HAL_SD_ConfigSpeedBusOperation+0xee>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008aa8:	4947      	ldr	r1, [pc, #284]	@ (8008bc8 <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fc6c 	bl	8009388 <SD_SwitchSpeed>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d049      	beq.n	8008b4a <HAL_SD_ConfigSpeedBusOperation+0xee>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aba:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	75fb      	strb	r3, [r7, #23]
      }
      else
      {
        /*Nothing to do, Use defaultSpeed */
      }
      break;
 8008ac6:	e040      	b.n	8008b4a <HAL_SD_ConfigSpeedBusOperation+0xee>
    }
    case SDMMC_SPEED_MODE_HIGH:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ad0:	d008      	beq.n	8008ae4 <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008ad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ada:	d003      	beq.n	8008ae4 <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d10f      	bne.n	8008b04 <HAL_SD_ConfigSpeedBusOperation+0xa8>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008ae4:	4938      	ldr	r1, [pc, #224]	@ (8008bc8 <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fc4e 	bl	8009388 <SD_SwitchSpeed>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d011      	beq.n	8008b16 <HAL_SD_ConfigSpeedBusOperation+0xba>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	75fb      	strb	r3, [r7, #23]
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008b02:	e008      	b.n	8008b16 <HAL_SD_ConfigSpeedBusOperation+0xba>
        }
      }
      else
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b08:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008b14:	e01c      	b.n	8008b50 <HAL_SD_ConfigSpeedBusOperation+0xf4>
 8008b16:	e01b      	b.n	8008b50 <HAL_SD_ConfigSpeedBusOperation+0xf4>
    }
    case SDMMC_SPEED_MODE_DEFAULT:
    {
      /* Switch to default Speed */
      if (SD_SwitchSpeed(hsd, SDMMC_SDR12_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008b18:	492c      	ldr	r1, [pc, #176]	@ (8008bcc <HAL_SD_ConfigSpeedBusOperation+0x170>)
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fc34 	bl	8009388 <SD_SwitchSpeed>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d013      	beq.n	8008b4e <HAL_SD_ConfigSpeedBusOperation+0xf2>
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b2a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	75fb      	strb	r3, [r7, #23]
      }

      break;
 8008b36:	e00a      	b.n	8008b4e <HAL_SD_ConfigSpeedBusOperation+0xf2>
    }
    case SDMMC_SPEED_MODE_ULTRA: /*not valid without transceiver*/
    default:
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b3c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	75fb      	strb	r3, [r7, #23]
      break;
 8008b48:	e002      	b.n	8008b50 <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 8008b4a:	bf00      	nop
 8008b4c:	e000      	b.n	8008b50 <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 8008b4e:	bf00      	nop
  }
#endif /* USE_SD_TRANSCEIVER */

  /* Verify that SD card is ready to use after Speed mode switch*/
  tickstart = HAL_GetTick();
 8008b50:	f7f8 f984 	bl	8000e5c <HAL_GetTick>
 8008b54:	6138      	str	r0, [r7, #16]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b56:	e011      	b.n	8008b7c <HAL_SD_ConfigSpeedBusOperation+0x120>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008b58:	f7f8 f980 	bl	8000e5c <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b66:	d109      	bne.n	8008b7c <HAL_SD_ConfigSpeedBusOperation+0x120>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008b6e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e021      	b.n	8008bc0 <HAL_SD_ConfigSpeedBusOperation+0x164>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f829 	bl	8008bd4 <HAL_SD_GetCardState>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	d1e7      	bne.n	8008b58 <HAL_SD_ConfigSpeedBusOperation+0xfc>
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008b90:	4618      	mov	r0, r3
 8008b92:	f001 ffbf 	bl	800ab14 <SDMMC_CmdBlockLength>
 8008b96:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00b      	beq.n	8008bb6 <HAL_SD_ConfigSpeedBusOperation+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8008bd0 <HAL_SD_ConfigSpeedBusOperation+0x174>)
 8008ba4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	431a      	orrs	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  return status;
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	80ffff01 	.word	0x80ffff01
 8008bcc:	80ffff00 	.word	0x80ffff00
 8008bd0:	1fe00fff 	.word	0x1fe00fff

08008bd4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008be0:	f107 030c 	add.w	r3, r7, #12
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 fa40 	bl	800906c <SD_SendStatus>
 8008bec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d005      	beq.n	8008c00 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	0a5b      	lsrs	r3, r3, #9
 8008c04:	f003 030f 	and.w	r3, r3, #15
 8008c08:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008c0a:	693b      	ldr	r3, [r7, #16]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3718      	adds	r7, #24
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b090      	sub	sp, #64	@ 0x40
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008c20:	f7f8 f91c 	bl	8000e5c <HAL_GetTick>
 8008c24:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f001 feed 	bl	800aa0a <SDMMC_GetPowerState>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d102      	bne.n	8008c3c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c36:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008c3a:	e0b5      	b.n	8008da8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d02e      	beq.n	8008ca2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f002 f938 	bl	800aebe <SDMMC_CmdSendCID>
 8008c4e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <SD_InitCard+0x46>
    {
      return errorstate;
 8008c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c58:	e0a6      	b.n	8008da8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2100      	movs	r1, #0
 8008c60:	4618      	mov	r0, r3
 8008c62:	f001 ff18 	bl	800aa96 <SDMMC_GetResponse>
 8008c66:	4602      	mov	r2, r0
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2104      	movs	r1, #4
 8008c72:	4618      	mov	r0, r3
 8008c74:	f001 ff0f 	bl	800aa96 <SDMMC_GetResponse>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2108      	movs	r1, #8
 8008c84:	4618      	mov	r0, r3
 8008c86:	f001 ff06 	bl	800aa96 <SDMMC_GetResponse>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	210c      	movs	r1, #12
 8008c96:	4618      	mov	r0, r3
 8008c98:	f001 fefd 	bl	800aa96 <SDMMC_GetResponse>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d01d      	beq.n	8008ce6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008caa:	e019      	b.n	8008ce0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f107 020a 	add.w	r2, r7, #10
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f002 f940 	bl	800af3c <SDMMC_CmdSetRelAdd>
 8008cbc:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d001      	beq.n	8008cc8 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc6:	e06f      	b.n	8008da8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008cc8:	f7f8 f8c8 	bl	8000e5c <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	f241 3287 	movw	r2, #4999	@ 0x1387
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d902      	bls.n	8008ce0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008cda:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008cde:	e063      	b.n	8008da8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008ce0:	897b      	ldrh	r3, [r7, #10]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0e2      	beq.n	8008cac <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d036      	beq.n	8008d5c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008cee:	897b      	ldrh	r3, [r7, #10]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cfe:	041b      	lsls	r3, r3, #16
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f002 f8fa 	bl	800aefc <SDMMC_CmdSendCSD>
 8008d08:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <SD_InitCard+0x100>
    {
      return errorstate;
 8008d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d12:	e049      	b.n	8008da8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2100      	movs	r1, #0
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 febb 	bl	800aa96 <SDMMC_GetResponse>
 8008d20:	4602      	mov	r2, r0
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2104      	movs	r1, #4
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 feb2 	bl	800aa96 <SDMMC_GetResponse>
 8008d32:	4602      	mov	r2, r0
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2108      	movs	r1, #8
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f001 fea9 	bl	800aa96 <SDMMC_GetResponse>
 8008d44:	4602      	mov	r2, r0
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	210c      	movs	r1, #12
 8008d50:	4618      	mov	r0, r3
 8008d52:	f001 fea0 	bl	800aa96 <SDMMC_GetResponse>
 8008d56:	4602      	mov	r2, r0
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2104      	movs	r1, #4
 8008d62:	4618      	mov	r0, r3
 8008d64:	f001 fe97 	bl	800aa96 <SDMMC_GetResponse>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	0d1a      	lsrs	r2, r3, #20
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008d70:	f107 030c 	add.w	r3, r7, #12
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7ff fad0 	bl	800831c <HAL_SD_GetCardCSD>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d82:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008d86:	e00f      	b.n	8008da8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d90:	041b      	lsls	r3, r3, #16
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f001 ffa9 	bl	800acec <SDMMC_CmdSelDesel>
 8008d9a:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <SD_InitCard+0x192>
  {
    return errorstate;
 8008da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da4:	e000      	b.n	8008da8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3740      	adds	r7, #64	@ 0x40
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008db8:	2300      	movs	r3, #0
 8008dba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f001 ffb2 	bl	800ad32 <SDMMC_CmdGoIdleState>
 8008dce:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <SD_PowerON+0x2a>
  {
    return errorstate;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	e072      	b.n	8008ec0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f001 ffc5 	bl	800ad6e <SDMMC_CmdOperCond>
 8008de4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dec:	d10d      	bne.n	8008e0a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f001 ff9a 	bl	800ad32 <SDMMC_CmdGoIdleState>
 8008dfe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d004      	beq.n	8008e10 <SD_PowerON+0x60>
    {
      return errorstate;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	e05a      	b.n	8008ec0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d137      	bne.n	8008e88 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f001 ffc5 	bl	800adae <SDMMC_CmdAppCommand>
 8008e24:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d02d      	beq.n	8008e88 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e2c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008e30:	e046      	b.n	8008ec0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2100      	movs	r1, #0
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f001 ffb8 	bl	800adae <SDMMC_CmdAppCommand>
 8008e3e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <SD_PowerON+0x9a>
    {
      return errorstate;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	e03a      	b.n	8008ec0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	491e      	ldr	r1, [pc, #120]	@ (8008ec8 <SD_PowerON+0x118>)
 8008e50:	4618      	mov	r0, r3
 8008e52:	f001 ffcf 	bl	800adf4 <SDMMC_CmdAppOperCommand>
 8008e56:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008e62:	e02d      	b.n	8008ec0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2100      	movs	r1, #0
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f001 fe13 	bl	800aa96 <SDMMC_GetResponse>
 8008e70:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	0fdb      	lsrs	r3, r3, #31
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d101      	bne.n	8008e7e <SD_PowerON+0xce>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e000      	b.n	8008e80 <SD_PowerON+0xd0>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	613b      	str	r3, [r7, #16]

    count++;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	3301      	adds	r3, #1
 8008e86:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d802      	bhi.n	8008e98 <SD_PowerON+0xe8>
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0cc      	beq.n	8008e32 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d902      	bls.n	8008ea8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008ea2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008ea6:	e00b      	b.n	8008ec0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d002      	beq.n	8008ebe <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	c1100000 	.word	0xc1100000

08008ecc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08c      	sub	sp, #48	@ 0x30
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008ed6:	f7f7 ffc1 	bl	8000e5c <HAL_GetTick>
 8008eda:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f001 fdd5 	bl	800aa96 <SDMMC_GetResponse>
 8008eec:	4603      	mov	r3, r0
 8008eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ef2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ef6:	d102      	bne.n	8008efe <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ef8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008efc:	e0b0      	b.n	8009060 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2140      	movs	r1, #64	@ 0x40
 8008f04:	4618      	mov	r0, r3
 8008f06:	f001 fe05 	bl	800ab14 <SDMMC_CmdBlockLength>
 8008f0a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d005      	beq.n	8008f1e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	e0a0      	b.n	8009060 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f26:	041b      	lsls	r3, r3, #16
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f001 ff3f 	bl	800adae <SDMMC_CmdAppCommand>
 8008f30:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d005      	beq.n	8008f44 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	e08d      	b.n	8009060 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f44:	f04f 33ff 	mov.w	r3, #4294967295
 8008f48:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008f4a:	2340      	movs	r3, #64	@ 0x40
 8008f4c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008f4e:	2360      	movs	r3, #96	@ 0x60
 8008f50:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f52:	2302      	movs	r3, #2
 8008f54:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f107 0208 	add.w	r2, r7, #8
 8008f66:	4611      	mov	r1, r2
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f001 fda7 	bl	800aabc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4618      	mov	r0, r3
 8008f74:	f002 f827 	bl	800afc6 <SDMMC_CmdStatusRegister>
 8008f78:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d02b      	beq.n	8008fd8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	e069      	b.n	8009060 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d013      	beq.n	8008fc2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f9e:	e00d      	b.n	8008fbc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f001 fd01 	bl	800a9ac <SDMMC_ReadFIFO>
 8008faa:	4602      	mov	r2, r0
 8008fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fae:	601a      	str	r2, [r3, #0]
        pData++;
 8008fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8008fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb8:	3301      	adds	r3, #1
 8008fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fbe:	2b07      	cmp	r3, #7
 8008fc0:	d9ee      	bls.n	8008fa0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fc2:	f7f7 ff4b 	bl	8000e5c <HAL_GetTick>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd0:	d102      	bne.n	8008fd8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008fd2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008fd6:	e043      	b.n	8009060 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fde:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d0d2      	beq.n	8008f8c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fec:	f003 0308 	and.w	r3, r3, #8
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d001      	beq.n	8008ff8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008ff4:	2308      	movs	r3, #8
 8008ff6:	e033      	b.n	8009060 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009006:	2302      	movs	r3, #2
 8009008:	e02a      	b.n	8009060 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009010:	f003 0320 	and.w	r3, r3, #32
 8009014:	2b00      	cmp	r3, #0
 8009016:	d017      	beq.n	8009048 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009018:	2320      	movs	r3, #32
 800901a:	e021      	b.n	8009060 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4618      	mov	r0, r3
 8009022:	f001 fcc3 	bl	800a9ac <SDMMC_ReadFIFO>
 8009026:	4602      	mov	r2, r0
 8009028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902a:	601a      	str	r2, [r3, #0]
    pData++;
 800902c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902e:	3304      	adds	r3, #4
 8009030:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009032:	f7f7 ff13 	bl	8000e5c <HAL_GetTick>
 8009036:	4602      	mov	r2, r0
 8009038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009040:	d102      	bne.n	8009048 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009042:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009046:	e00b      	b.n	8009060 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800904e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1e2      	bne.n	800901c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a03      	ldr	r2, [pc, #12]	@ (8009068 <SD_SendSDStatus+0x19c>)
 800905c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3730      	adds	r7, #48	@ 0x30
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	18000f3a 	.word	0x18000f3a

0800906c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d102      	bne.n	8009082 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800907c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009080:	e018      	b.n	80090b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800908a:	041b      	lsls	r3, r3, #16
 800908c:	4619      	mov	r1, r3
 800908e:	4610      	mov	r0, r2
 8009090:	f001 ff76 	bl	800af80 <SDMMC_CmdSendStatus>
 8009094:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	e009      	b.n	80090b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2100      	movs	r1, #0
 80090a6:	4618      	mov	r0, r3
 80090a8:	f001 fcf5 	bl	800aa96 <SDMMC_GetResponse>
 80090ac:	4602      	mov	r2, r0
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80090c4:	2300      	movs	r3, #0
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	2300      	movs	r3, #0
 80090ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2100      	movs	r1, #0
 80090d2:	4618      	mov	r0, r3
 80090d4:	f001 fcdf 	bl	800aa96 <SDMMC_GetResponse>
 80090d8:	4603      	mov	r3, r0
 80090da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090e2:	d102      	bne.n	80090ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80090e8:	e02f      	b.n	800914a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80090ea:	f107 030c 	add.w	r3, r7, #12
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f879 	bl	80091e8 <SD_FindSCR>
 80090f6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	e023      	b.n	800914a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01c      	beq.n	8009146 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009114:	041b      	lsls	r3, r3, #16
 8009116:	4619      	mov	r1, r3
 8009118:	4610      	mov	r0, r2
 800911a:	f001 fe48 	bl	800adae <SDMMC_CmdAppCommand>
 800911e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	e00f      	b.n	800914a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2102      	movs	r1, #2
 8009130:	4618      	mov	r0, r3
 8009132:	f001 fe7f 	bl	800ae34 <SDMMC_CmdBusWidth>
 8009136:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d001      	beq.n	8009142 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	e003      	b.n	800914a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009142:	2300      	movs	r3, #0
 8009144:	e001      	b.n	800914a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009146:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800914a:	4618      	mov	r0, r3
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b086      	sub	sp, #24
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800915a:	2300      	movs	r3, #0
 800915c:	60fb      	str	r3, [r7, #12]
 800915e:	2300      	movs	r3, #0
 8009160:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2100      	movs	r1, #0
 8009168:	4618      	mov	r0, r3
 800916a:	f001 fc94 	bl	800aa96 <SDMMC_GetResponse>
 800916e:	4603      	mov	r3, r0
 8009170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009174:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009178:	d102      	bne.n	8009180 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800917a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800917e:	e02f      	b.n	80091e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009180:	f107 030c 	add.w	r3, r7, #12
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f82e 	bl	80091e8 <SD_FindSCR>
 800918c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	e023      	b.n	80091e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d01c      	beq.n	80091dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091aa:	041b      	lsls	r3, r3, #16
 80091ac:	4619      	mov	r1, r3
 80091ae:	4610      	mov	r0, r2
 80091b0:	f001 fdfd 	bl	800adae <SDMMC_CmdAppCommand>
 80091b4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	e00f      	b.n	80091e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2100      	movs	r1, #0
 80091c6:	4618      	mov	r0, r3
 80091c8:	f001 fe34 	bl	800ae34 <SDMMC_CmdBusWidth>
 80091cc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	e003      	b.n	80091e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80091d8:	2300      	movs	r3, #0
 80091da:	e001      	b.n	80091e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091dc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3718      	adds	r7, #24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b08e      	sub	sp, #56	@ 0x38
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80091f2:	f7f7 fe33 	bl	8000e5c <HAL_GetTick>
 80091f6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80091fc:	2300      	movs	r3, #0
 80091fe:	60bb      	str	r3, [r7, #8]
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2108      	movs	r1, #8
 800920e:	4618      	mov	r0, r3
 8009210:	f001 fc80 	bl	800ab14 <SDMMC_CmdBlockLength>
 8009214:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <SD_FindSCR+0x38>
  {
    return errorstate;
 800921c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921e:	e0ad      	b.n	800937c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009228:	041b      	lsls	r3, r3, #16
 800922a:	4619      	mov	r1, r3
 800922c:	4610      	mov	r0, r2
 800922e:	f001 fdbe 	bl	800adae <SDMMC_CmdAppCommand>
 8009232:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <SD_FindSCR+0x56>
  {
    return errorstate;
 800923a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923c:	e09e      	b.n	800937c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800923e:	f04f 33ff 	mov.w	r3, #4294967295
 8009242:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009244:	2308      	movs	r3, #8
 8009246:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009248:	2330      	movs	r3, #48	@ 0x30
 800924a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800924c:	2302      	movs	r3, #2
 800924e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009250:	2300      	movs	r3, #0
 8009252:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009254:	2301      	movs	r3, #1
 8009256:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f107 0210 	add.w	r2, r7, #16
 8009260:	4611      	mov	r1, r2
 8009262:	4618      	mov	r0, r3
 8009264:	f001 fc2a 	bl	800aabc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4618      	mov	r0, r3
 800926e:	f001 fe04 	bl	800ae7a <SDMMC_CmdSendSCR>
 8009272:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009276:	2b00      	cmp	r3, #0
 8009278:	d027      	beq.n	80092ca <SD_FindSCR+0xe2>
  {
    return errorstate;
 800927a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927c:	e07e      	b.n	800937c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009284:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d113      	bne.n	80092b4 <SD_FindSCR+0xcc>
 800928c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800928e:	2b00      	cmp	r3, #0
 8009290:	d110      	bne.n	80092b4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4618      	mov	r0, r3
 8009298:	f001 fb88 	bl	800a9ac <SDMMC_ReadFIFO>
 800929c:	4603      	mov	r3, r0
 800929e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f001 fb81 	bl	800a9ac <SDMMC_ReadFIFO>
 80092aa:	4603      	mov	r3, r0
 80092ac:	60fb      	str	r3, [r7, #12]
      index++;
 80092ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b0:	3301      	adds	r3, #1
 80092b2:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80092b4:	f7f7 fdd2 	bl	8000e5c <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c2:	d102      	bne.n	80092ca <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80092c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80092c8:	e058      	b.n	800937c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092d0:	f240 532a 	movw	r3, #1322	@ 0x52a
 80092d4:	4013      	ands	r3, r2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0d1      	beq.n	800927e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092e0:	f003 0308 	and.w	r3, r3, #8
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d005      	beq.n	80092f4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2208      	movs	r2, #8
 80092ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80092f0:	2308      	movs	r3, #8
 80092f2:	e043      	b.n	800937c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092fa:	f003 0302 	and.w	r3, r3, #2
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d005      	beq.n	800930e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2202      	movs	r2, #2
 8009308:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800930a:	2302      	movs	r3, #2
 800930c:	e036      	b.n	800937c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009314:	f003 0320 	and.w	r3, r3, #32
 8009318:	2b00      	cmp	r3, #0
 800931a:	d005      	beq.n	8009328 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2220      	movs	r2, #32
 8009322:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009324:	2320      	movs	r3, #32
 8009326:	e029      	b.n	800937c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a15      	ldr	r2, [pc, #84]	@ (8009384 <SD_FindSCR+0x19c>)
 800932e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	061a      	lsls	r2, r3, #24
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	021b      	lsls	r3, r3, #8
 8009338:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800933c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	0a1b      	lsrs	r3, r3, #8
 8009342:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009346:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	0e1b      	lsrs	r3, r3, #24
 800934c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800934e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009350:	601a      	str	r2, [r3, #0]
    scr++;
 8009352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009354:	3304      	adds	r3, #4
 8009356:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	061a      	lsls	r2, r3, #24
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	021b      	lsls	r3, r3, #8
 8009360:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009364:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	0a1b      	lsrs	r3, r3, #8
 800936a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800936e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	0e1b      	lsrs	r3, r3, #24
 8009374:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009378:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3738      	adds	r7, #56	@ 0x38
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	18000f3a 	.word	0x18000f3a

08009388 <SD_SwitchSpeed>:
  * @param  hsd: SD handle
  * @param  SwitchSpeedMode: SD speed mode( SDMMC_SDR12_SWITCH_PATTERN, SDMMC_SDR25_SWITCH_PATTERN)
  * @retval SD Card error state
  */
uint32_t SD_SwitchSpeed(SD_HandleTypeDef *hsd, uint32_t SwitchSpeedMode)
{
 8009388:	b590      	push	{r4, r7, lr}
 800938a:	b09d      	sub	sp, #116	@ 0x74
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8009392:	2300      	movs	r3, #0
 8009394:	66fb      	str	r3, [r7, #108]	@ 0x6c
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8009396:	f107 0308 	add.w	r3, r7, #8
 800939a:	2240      	movs	r2, #64	@ 0x40
 800939c:	2100      	movs	r1, #0
 800939e:	4618      	mov	r0, r3
 80093a0:	f007 fc54 	bl	8010c4c <memset>
  uint32_t count;
  uint32_t loop = 0 ;
 80093a4:	2300      	movs	r3, #0
 80093a6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t Timeout = HAL_GetTick();
 80093a8:	f7f7 fd58 	bl	8000e5c <HAL_GetTick>
 80093ac:	6638      	str	r0, [r7, #96]	@ 0x60

  if (hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d102      	bne.n	80093bc <SD_SwitchSpeed+0x34>
  {
    /* Standard Speed Card <= 12.5Mhz  */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093b6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80093ba:	e0ad      	b.n	8009518 <SD_SwitchSpeed+0x190>
  }

  if (hsd->SdCard.CardSpeed >= CARD_HIGH_SPEED)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093c0:	2bff      	cmp	r3, #255	@ 0xff
 80093c2:	f240 80a8 	bls.w	8009516 <SD_SwitchSpeed+0x18e>
  {
    /* Initialize the Data control register */
    hsd->Instance->DCTRL = 0;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2200      	movs	r2, #0
 80093cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2140      	movs	r1, #64	@ 0x40
 80093d4:	4618      	mov	r0, r3
 80093d6:	f001 fb9d 	bl	800ab14 <SDMMC_CmdBlockLength>
 80093da:	66f8      	str	r0, [r7, #108]	@ 0x6c

    if (errorstate != HAL_SD_ERROR_NONE)
 80093dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <SD_SwitchSpeed+0x5e>
    {
      return errorstate;
 80093e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093e4:	e098      	b.n	8009518 <SD_SwitchSpeed+0x190>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093e6:	f04f 33ff 	mov.w	r3, #4294967295
 80093ea:	64bb      	str	r3, [r7, #72]	@ 0x48
    sdmmc_datainitstructure.DataLength    = 64U;
 80093ec:	2340      	movs	r3, #64	@ 0x40
 80093ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 80093f0:	2360      	movs	r3, #96	@ 0x60
 80093f2:	653b      	str	r3, [r7, #80]	@ 0x50
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80093f4:	2302      	movs	r3, #2
 80093f6:	657b      	str	r3, [r7, #84]	@ 0x54
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 80093fc:	2301      	movs	r3, #1
 80093fe:	65fb      	str	r3, [r7, #92]	@ 0x5c

    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8009408:	4611      	mov	r1, r2
 800940a:	4618      	mov	r0, r3
 800940c:	f001 fb56 	bl	800aabc <SDMMC_ConfigData>


    errorstate = SDMMC_CmdSwitch(hsd->Instance, SwitchSpeedMode);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	4618      	mov	r0, r3
 8009418:	f001 fdf7 	bl	800b00a <SDMMC_CmdSwitch>
 800941c:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (errorstate != HAL_SD_ERROR_NONE)
 800941e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009420:	2b00      	cmp	r3, #0
 8009422:	d036      	beq.n	8009492 <SD_SwitchSpeed+0x10a>
    {
      return errorstate;
 8009424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009426:	e077      	b.n	8009518 <SD_SwitchSpeed+0x190>
    }

    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800942e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009432:	2b00      	cmp	r3, #0
 8009434:	d01a      	beq.n	800946c <SD_SwitchSpeed+0xe4>
      {
        for (count = 0U; count < 8U; count++)
 8009436:	2300      	movs	r3, #0
 8009438:	66bb      	str	r3, [r7, #104]	@ 0x68
 800943a:	e011      	b.n	8009460 <SD_SwitchSpeed+0xd8>
        {
          SD_hs[(8U * loop) + count]  = SDMMC_ReadFIFO(hsd->Instance);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6819      	ldr	r1, [r3, #0]
 8009440:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009442:	00da      	lsls	r2, r3, #3
 8009444:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009446:	18d4      	adds	r4, r2, r3
 8009448:	4608      	mov	r0, r1
 800944a:	f001 faaf 	bl	800a9ac <SDMMC_ReadFIFO>
 800944e:	4602      	mov	r2, r0
 8009450:	00a3      	lsls	r3, r4, #2
 8009452:	3370      	adds	r3, #112	@ 0x70
 8009454:	443b      	add	r3, r7
 8009456:	f843 2c68 	str.w	r2, [r3, #-104]
        for (count = 0U; count < 8U; count++)
 800945a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800945c:	3301      	adds	r3, #1
 800945e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009460:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009462:	2b07      	cmp	r3, #7
 8009464:	d9ea      	bls.n	800943c <SD_SwitchSpeed+0xb4>
        }
        loop ++;
 8009466:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009468:	3301      	adds	r3, #1
 800946a:	667b      	str	r3, [r7, #100]	@ 0x64
      }

      if ((HAL_GetTick() - Timeout) >=  SDMMC_DATATIMEOUT)
 800946c:	f7f7 fcf6 	bl	8000e5c <HAL_GetTick>
 8009470:	4602      	mov	r2, r0
 8009472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947a:	d10a      	bne.n	8009492 <SD_SwitchSpeed+0x10a>
      {
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009482:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_SD_ERROR_TIMEOUT;
 800948c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009490:	e042      	b.n	8009518 <SD_SwitchSpeed+0x190>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009498:	f240 532a 	movw	r3, #1322	@ 0x52a
 800949c:	4013      	ands	r3, r2
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d0c2      	beq.n	8009428 <SD_SwitchSpeed+0xa0>
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094a8:	f003 0308 	and.w	r3, r3, #8
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d005      	beq.n	80094bc <SD_SwitchSpeed+0x134>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2208      	movs	r2, #8
 80094b6:	639a      	str	r2, [r3, #56]	@ 0x38

      return errorstate;
 80094b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094ba:	e02d      	b.n	8009518 <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094c2:	f003 0302 	and.w	r3, r3, #2
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d007      	beq.n	80094da <SD_SwitchSpeed+0x152>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2202      	movs	r2, #2
 80094d0:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;
 80094d2:	2302      	movs	r3, #2
 80094d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 80094d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094d8:	e01e      	b.n	8009518 <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094e0:	f003 0320 	and.w	r3, r3, #32
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d007      	beq.n	80094f8 <SD_SwitchSpeed+0x170>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2220      	movs	r2, #32
 80094ee:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_RX_OVERRUN;
 80094f0:	2320      	movs	r3, #32
 80094f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 80094f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094f6:	e00f      	b.n	8009518 <SD_SwitchSpeed+0x190>
    {
      /* No error flag set */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a08      	ldr	r2, [pc, #32]	@ (8009520 <SD_SwitchSpeed+0x198>)
 80094fe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Test if the switch mode HS is ok */
    if ((((uint8_t *)SD_hs)[13] & 2U) != 2U)
 8009500:	f107 0308 	add.w	r3, r7, #8
 8009504:	330d      	adds	r3, #13
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	f003 0302 	and.w	r3, r3, #2
 800950c:	2b00      	cmp	r3, #0
 800950e:	d102      	bne.n	8009516 <SD_SwitchSpeed+0x18e>
    {
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009510:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009514:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }

  }

  return errorstate;
 8009516:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8009518:	4618      	mov	r0, r3
 800951a:	3774      	adds	r7, #116	@ 0x74
 800951c:	46bd      	mov	sp, r7
 800951e:	bd90      	pop	{r4, r7, pc}
 8009520:	18000f3a 	.word	0x18000f3a

08009524 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e02b      	b.n	8009590 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800953e:	b2db      	uxtb	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	d106      	bne.n	8009552 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f825 	bl	800959c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2202      	movs	r2, #2
 8009556:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	3304      	adds	r3, #4
 8009562:	4619      	mov	r1, r3
 8009564:	4610      	mov	r0, r2
 8009566:	f001 f8f5 	bl	800a754 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6818      	ldr	r0, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	461a      	mov	r2, r3
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	f001 f949 	bl	800a80c <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800957a:	4b07      	ldr	r3, [pc, #28]	@ (8009598 <HAL_SDRAM_Init+0x74>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a06      	ldr	r2, [pc, #24]	@ (8009598 <HAL_SDRAM_Init+0x74>)
 8009580:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009584:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	52004000 	.word	0x52004000

0800959c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80095c2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80095c4:	7dfb      	ldrb	r3, [r7, #23]
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d101      	bne.n	80095ce <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80095ca:	2302      	movs	r3, #2
 80095cc:	e021      	b.n	8009612 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d002      	beq.n	80095da <HAL_SDRAM_SendCommand+0x2a>
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	2b05      	cmp	r3, #5
 80095d8:	d118      	bne.n	800960c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2202      	movs	r2, #2
 80095de:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	68b9      	ldr	r1, [r7, #8]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f001 f978 	bl	800a8e0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d104      	bne.n	8009602 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2205      	movs	r2, #5
 80095fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009600:	e006      	b.n	8009610 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800960a:	e001      	b.n	8009610 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e000      	b.n	8009612 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b082      	sub	sp, #8
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b02      	cmp	r3, #2
 800962e:	d101      	bne.n	8009634 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009630:	2302      	movs	r3, #2
 8009632:	e016      	b.n	8009662 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800963a:	b2db      	uxtb	r3, r3
 800963c:	2b01      	cmp	r3, #1
 800963e:	d10f      	bne.n	8009660 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2202      	movs	r2, #2
 8009644:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	4618      	mov	r0, r3
 8009650:	f001 f96a 	bl	800a928 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	e000      	b.n	8009662 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009660:	2301      	movs	r3, #1
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e10f      	b.n	800989e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a87      	ldr	r2, [pc, #540]	@ (80098a8 <HAL_SPI_Init+0x23c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d00f      	beq.n	80096ae <HAL_SPI_Init+0x42>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a86      	ldr	r2, [pc, #536]	@ (80098ac <HAL_SPI_Init+0x240>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d00a      	beq.n	80096ae <HAL_SPI_Init+0x42>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a84      	ldr	r2, [pc, #528]	@ (80098b0 <HAL_SPI_Init+0x244>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d005      	beq.n	80096ae <HAL_SPI_Init+0x42>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	2b0f      	cmp	r3, #15
 80096a8:	d901      	bls.n	80096ae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e0f7      	b.n	800989e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fbbc 	bl	8009e2c <SPI_GetPacketSize>
 80096b4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a7b      	ldr	r2, [pc, #492]	@ (80098a8 <HAL_SPI_Init+0x23c>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d00c      	beq.n	80096da <HAL_SPI_Init+0x6e>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a79      	ldr	r2, [pc, #484]	@ (80098ac <HAL_SPI_Init+0x240>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d007      	beq.n	80096da <HAL_SPI_Init+0x6e>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a78      	ldr	r2, [pc, #480]	@ (80098b0 <HAL_SPI_Init+0x244>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d002      	beq.n	80096da <HAL_SPI_Init+0x6e>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2b08      	cmp	r3, #8
 80096d8:	d811      	bhi.n	80096fe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80096de:	4a72      	ldr	r2, [pc, #456]	@ (80098a8 <HAL_SPI_Init+0x23c>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d009      	beq.n	80096f8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a70      	ldr	r2, [pc, #448]	@ (80098ac <HAL_SPI_Init+0x240>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d004      	beq.n	80096f8 <HAL_SPI_Init+0x8c>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a6f      	ldr	r2, [pc, #444]	@ (80098b0 <HAL_SPI_Init+0x244>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d104      	bne.n	8009702 <HAL_SPI_Init+0x96>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b10      	cmp	r3, #16
 80096fc:	d901      	bls.n	8009702 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	e0cd      	b.n	800989e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009708:	b2db      	uxtb	r3, r3
 800970a:	2b00      	cmp	r3, #0
 800970c:	d106      	bne.n	800971c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f003 ffea 	bl	800d6f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2202      	movs	r2, #2
 8009720:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f022 0201 	bic.w	r2, r2, #1
 8009732:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800973e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009748:	d119      	bne.n	800977e <HAL_SPI_Init+0x112>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009752:	d103      	bne.n	800975c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009758:	2b00      	cmp	r3, #0
 800975a:	d008      	beq.n	800976e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10c      	bne.n	800977e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009768:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800976c:	d107      	bne.n	800977e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800977c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00f      	beq.n	80097aa <HAL_SPI_Init+0x13e>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	2b06      	cmp	r3, #6
 8009790:	d90b      	bls.n	80097aa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	430a      	orrs	r2, r1
 80097a6:	601a      	str	r2, [r3, #0]
 80097a8:	e007      	b.n	80097ba <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80097b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	69da      	ldr	r2, [r3, #28]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c2:	431a      	orrs	r2, r3
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	431a      	orrs	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097cc:	ea42 0103 	orr.w	r1, r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	68da      	ldr	r2, [r3, #12]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	430a      	orrs	r2, r1
 80097da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e4:	431a      	orrs	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ea:	431a      	orrs	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	431a      	orrs	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	431a      	orrs	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	431a      	orrs	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	431a      	orrs	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	431a      	orrs	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800980e:	431a      	orrs	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	431a      	orrs	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800981a:	ea42 0103 	orr.w	r1, r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	430a      	orrs	r2, r1
 8009828:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d113      	bne.n	800985a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009844:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009858:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 0201 	bic.w	r2, r2, #1
 8009868:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	430a      	orrs	r2, r1
 800988a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	40013000 	.word	0x40013000
 80098ac:	40003800 	.word	0x40003800
 80098b0:	40003c00 	.word	0x40003c00

080098b4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af02      	add	r7, sp, #8
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	603b      	str	r3, [r7, #0]
 80098c0:	4613      	mov	r3, r2
 80098c2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3320      	adds	r3, #32
 80098ca:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098cc:	f7f7 fac6 	bl	8000e5c <HAL_GetTick>
 80098d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d001      	beq.n	80098e2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80098de:	2302      	movs	r3, #2
 80098e0:	e1d1      	b.n	8009c86 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <HAL_SPI_Transmit+0x3a>
 80098e8:	88fb      	ldrh	r3, [r7, #6]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d101      	bne.n	80098f2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e1c9      	b.n	8009c86 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d101      	bne.n	8009900 <HAL_SPI_Transmit+0x4c>
 80098fc:	2302      	movs	r3, #2
 80098fe:	e1c2      	b.n	8009c86 <HAL_SPI_Transmit+0x3d2>
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2203      	movs	r2, #3
 800990c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	88fa      	ldrh	r2, [r7, #6]
 8009922:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	88fa      	ldrh	r2, [r7, #6]
 800992a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009958:	d108      	bne.n	800996c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	e009      	b.n	8009980 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800997e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	685a      	ldr	r2, [r3, #4]
 8009986:	4b96      	ldr	r3, [pc, #600]	@ (8009be0 <HAL_SPI_Transmit+0x32c>)
 8009988:	4013      	ands	r3, r2
 800998a:	88f9      	ldrh	r1, [r7, #6]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	6812      	ldr	r2, [r2, #0]
 8009990:	430b      	orrs	r3, r1
 8009992:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f042 0201 	orr.w	r2, r2, #1
 80099a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099ac:	d107      	bne.n	80099be <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	2b0f      	cmp	r3, #15
 80099c4:	d947      	bls.n	8009a56 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80099c6:	e03f      	b.n	8009a48 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	f003 0302 	and.w	r3, r3, #2
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d114      	bne.n	8009a00 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	6812      	ldr	r2, [r2, #0]
 80099e0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099e6:	1d1a      	adds	r2, r3, #4
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	3b01      	subs	r3, #1
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80099fe:	e023      	b.n	8009a48 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a00:	f7f7 fa2c 	bl	8000e5c <HAL_GetTick>
 8009a04:	4602      	mov	r2, r0
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d803      	bhi.n	8009a18 <HAL_SPI_Transmit+0x164>
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a16:	d102      	bne.n	8009a1e <HAL_SPI_Transmit+0x16a>
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d114      	bne.n	8009a48 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f000 f936 	bl	8009c90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e11e      	b.n	8009c86 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1b9      	bne.n	80099c8 <HAL_SPI_Transmit+0x114>
 8009a54:	e0f1      	b.n	8009c3a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	2b07      	cmp	r3, #7
 8009a5c:	f240 80e6 	bls.w	8009c2c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009a60:	e05d      	b.n	8009b1e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	695b      	ldr	r3, [r3, #20]
 8009a68:	f003 0302 	and.w	r3, r3, #2
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d132      	bne.n	8009ad6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d918      	bls.n	8009aae <HAL_SPI_Transmit+0x1fa>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d014      	beq.n	8009aae <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6812      	ldr	r2, [r2, #0]
 8009a8e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a94:	1d1a      	adds	r2, r3, #4
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	3b02      	subs	r3, #2
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009aac:	e037      	b.n	8009b1e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ab2:	881a      	ldrh	r2, [r3, #0]
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009abc:	1c9a      	adds	r2, r3, #2
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	3b01      	subs	r3, #1
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009ad4:	e023      	b.n	8009b1e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ad6:	f7f7 f9c1 	bl	8000e5c <HAL_GetTick>
 8009ada:	4602      	mov	r2, r0
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d803      	bhi.n	8009aee <HAL_SPI_Transmit+0x23a>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aec:	d102      	bne.n	8009af4 <HAL_SPI_Transmit+0x240>
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d114      	bne.n	8009b1e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 f8cb 	bl	8009c90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e0b3      	b.n	8009c86 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d19b      	bne.n	8009a62 <HAL_SPI_Transmit+0x1ae>
 8009b2a:	e086      	b.n	8009c3a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	f003 0302 	and.w	r3, r3, #2
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	d154      	bne.n	8009be4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d918      	bls.n	8009b78 <HAL_SPI_Transmit+0x2c4>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b4a:	2b40      	cmp	r3, #64	@ 0x40
 8009b4c:	d914      	bls.n	8009b78 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6812      	ldr	r2, [r2, #0]
 8009b58:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b5e:	1d1a      	adds	r2, r3, #4
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	3b04      	subs	r3, #4
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009b76:	e059      	b.n	8009c2c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d917      	bls.n	8009bb4 <HAL_SPI_Transmit+0x300>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d013      	beq.n	8009bb4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b90:	881a      	ldrh	r2, [r3, #0]
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b9a:	1c9a      	adds	r2, r3, #2
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	3b02      	subs	r3, #2
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009bb2:	e03b      	b.n	8009c2c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3320      	adds	r3, #32
 8009bbe:	7812      	ldrb	r2, [r2, #0]
 8009bc0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bc6:	1c5a      	adds	r2, r3, #1
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009bde:	e025      	b.n	8009c2c <HAL_SPI_Transmit+0x378>
 8009be0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009be4:	f7f7 f93a 	bl	8000e5c <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d803      	bhi.n	8009bfc <HAL_SPI_Transmit+0x348>
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfa:	d102      	bne.n	8009c02 <HAL_SPI_Transmit+0x34e>
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d114      	bne.n	8009c2c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 f844 	bl	8009c90 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e02c      	b.n	8009c86 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f47f af79 	bne.w	8009b2c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2200      	movs	r2, #0
 8009c42:	2108      	movs	r1, #8
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f000 f8c3 	bl	8009dd0 <SPI_WaitOnFlagUntilTimeout>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d007      	beq.n	8009c60 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c56:	f043 0220 	orr.w	r2, r3, #32
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f000 f815 	bl	8009c90 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d001      	beq.n	8009c84 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	e000      	b.n	8009c86 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009c84:	2300      	movs	r3, #0
  }
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3718      	adds	r7, #24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop

08009c90 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	699a      	ldr	r2, [r3, #24]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f042 0208 	orr.w	r2, r2, #8
 8009cae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	699a      	ldr	r2, [r3, #24]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f042 0210 	orr.w	r2, r2, #16
 8009cbe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 0201 	bic.w	r2, r2, #1
 8009cce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6919      	ldr	r1, [r3, #16]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	4b3c      	ldr	r3, [pc, #240]	@ (8009dcc <SPI_CloseTransfer+0x13c>)
 8009cdc:	400b      	ands	r3, r1
 8009cde:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	689a      	ldr	r2, [r3, #8]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009cee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b04      	cmp	r3, #4
 8009cfa:	d014      	beq.n	8009d26 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f003 0320 	and.w	r3, r3, #32
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00f      	beq.n	8009d26 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	699a      	ldr	r2, [r3, #24]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f042 0220 	orr.w	r2, r2, #32
 8009d24:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	2b03      	cmp	r3, #3
 8009d30:	d014      	beq.n	8009d5c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00f      	beq.n	8009d5c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d42:	f043 0204 	orr.w	r2, r3, #4
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	699a      	ldr	r2, [r3, #24]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d5a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00f      	beq.n	8009d86 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d6c:	f043 0201 	orr.w	r2, r3, #1
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	699a      	ldr	r2, [r3, #24]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d84:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00f      	beq.n	8009db0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d96:	f043 0208 	orr.w	r2, r3, #8
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	699a      	ldr	r2, [r3, #24]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009dae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009dc0:	bf00      	nop
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	fffffc90 	.word	0xfffffc90

08009dd0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	603b      	str	r3, [r7, #0]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009de0:	e010      	b.n	8009e04 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009de2:	f7f7 f83b 	bl	8000e5c <HAL_GetTick>
 8009de6:	4602      	mov	r2, r0
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d803      	bhi.n	8009dfa <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df8:	d102      	bne.n	8009e00 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e00f      	b.n	8009e24 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	695a      	ldr	r2, [r3, #20]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	bf0c      	ite	eq
 8009e14:	2301      	moveq	r3, #1
 8009e16:	2300      	movne	r3, #0
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	79fb      	ldrb	r3, [r7, #7]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d0df      	beq.n	8009de2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e38:	095b      	lsrs	r3, r3, #5
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	3301      	adds	r3, #1
 8009e44:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	3307      	adds	r3, #7
 8009e4a:	08db      	lsrs	r3, r3, #3
 8009e4c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	fb02 f303 	mul.w	r3, r2, r3
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d101      	bne.n	8009e74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e049      	b.n	8009f08 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d106      	bne.n	8009e8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f003 fce9 	bl	800d860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2202      	movs	r2, #2
 8009e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	f000 fa67 	bl	800a374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	f003 0302 	and.w	r3, r3, #2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d020      	beq.n	8009f74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f003 0302 	and.w	r3, r3, #2
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d01b      	beq.n	8009f74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f06f 0202 	mvn.w	r2, #2
 8009f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	f003 0303 	and.w	r3, r3, #3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 f9ec 	bl	800a338 <HAL_TIM_IC_CaptureCallback>
 8009f60:	e005      	b.n	8009f6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f9de 	bl	800a324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 f9ef 	bl	800a34c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	f003 0304 	and.w	r3, r3, #4
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d020      	beq.n	8009fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f003 0304 	and.w	r3, r3, #4
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d01b      	beq.n	8009fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f06f 0204 	mvn.w	r2, #4
 8009f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2202      	movs	r2, #2
 8009f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	699b      	ldr	r3, [r3, #24]
 8009f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d003      	beq.n	8009fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f9c6 	bl	800a338 <HAL_TIM_IC_CaptureCallback>
 8009fac:	e005      	b.n	8009fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f9b8 	bl	800a324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 f9c9 	bl	800a34c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f003 0308 	and.w	r3, r3, #8
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d020      	beq.n	800a00c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f003 0308 	and.w	r3, r3, #8
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d01b      	beq.n	800a00c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f06f 0208 	mvn.w	r2, #8
 8009fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2204      	movs	r2, #4
 8009fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	69db      	ldr	r3, [r3, #28]
 8009fea:	f003 0303 	and.w	r3, r3, #3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d003      	beq.n	8009ffa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f9a0 	bl	800a338 <HAL_TIM_IC_CaptureCallback>
 8009ff8:	e005      	b.n	800a006 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f992 	bl	800a324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f9a3 	bl	800a34c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	f003 0310 	and.w	r3, r3, #16
 800a012:	2b00      	cmp	r3, #0
 800a014:	d020      	beq.n	800a058 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f003 0310 	and.w	r3, r3, #16
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d01b      	beq.n	800a058 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f06f 0210 	mvn.w	r2, #16
 800a028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2208      	movs	r2, #8
 800a02e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d003      	beq.n	800a046 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f97a 	bl	800a338 <HAL_TIM_IC_CaptureCallback>
 800a044:	e005      	b.n	800a052 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f96c 	bl	800a324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f97d 	bl	800a34c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00c      	beq.n	800a07c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f003 0301 	and.w	r3, r3, #1
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d007      	beq.n	800a07c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f06f 0201 	mvn.w	r2, #1
 800a074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f94a 	bl	800a310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a082:	2b00      	cmp	r3, #0
 800a084:	d104      	bne.n	800a090 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d00c      	beq.n	800a0aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a096:	2b00      	cmp	r3, #0
 800a098:	d007      	beq.n	800a0aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a0a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fb41 	bl	800a72c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00c      	beq.n	800a0ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d007      	beq.n	800a0ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a0c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fb39 	bl	800a740 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00c      	beq.n	800a0f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d007      	beq.n	800a0f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a0ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f937 	bl	800a360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	f003 0320 	and.w	r3, r3, #32
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00c      	beq.n	800a116 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f003 0320 	and.w	r3, r3, #32
 800a102:	2b00      	cmp	r3, #0
 800a104:	d007      	beq.n	800a116 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f06f 0220 	mvn.w	r2, #32
 800a10e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fb01 	bl	800a718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a116:	bf00      	nop
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a134:	2b01      	cmp	r3, #1
 800a136:	d101      	bne.n	800a13c <HAL_TIM_ConfigClockSource+0x1c>
 800a138:	2302      	movs	r3, #2
 800a13a:	e0dc      	b.n	800a2f6 <HAL_TIM_ConfigClockSource+0x1d6>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	4b6a      	ldr	r3, [pc, #424]	@ (800a300 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a158:	4013      	ands	r3, r2
 800a15a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a64      	ldr	r2, [pc, #400]	@ (800a304 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a172:	4293      	cmp	r3, r2
 800a174:	f000 80a9 	beq.w	800a2ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a178:	4a62      	ldr	r2, [pc, #392]	@ (800a304 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	f200 80ae 	bhi.w	800a2dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a180:	4a61      	ldr	r2, [pc, #388]	@ (800a308 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a182:	4293      	cmp	r3, r2
 800a184:	f000 80a1 	beq.w	800a2ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a188:	4a5f      	ldr	r2, [pc, #380]	@ (800a308 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	f200 80a6 	bhi.w	800a2dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a190:	4a5e      	ldr	r2, [pc, #376]	@ (800a30c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a192:	4293      	cmp	r3, r2
 800a194:	f000 8099 	beq.w	800a2ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a198:	4a5c      	ldr	r2, [pc, #368]	@ (800a30c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	f200 809e 	bhi.w	800a2dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a1a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a1a4:	f000 8091 	beq.w	800a2ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a1a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a1ac:	f200 8096 	bhi.w	800a2dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a1b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1b4:	f000 8089 	beq.w	800a2ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a1b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1bc:	f200 808e 	bhi.w	800a2dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a1c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1c4:	d03e      	beq.n	800a244 <HAL_TIM_ConfigClockSource+0x124>
 800a1c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1ca:	f200 8087 	bhi.w	800a2dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a1ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1d2:	f000 8086 	beq.w	800a2e2 <HAL_TIM_ConfigClockSource+0x1c2>
 800a1d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1da:	d87f      	bhi.n	800a2dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a1dc:	2b70      	cmp	r3, #112	@ 0x70
 800a1de:	d01a      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0xf6>
 800a1e0:	2b70      	cmp	r3, #112	@ 0x70
 800a1e2:	d87b      	bhi.n	800a2dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a1e4:	2b60      	cmp	r3, #96	@ 0x60
 800a1e6:	d050      	beq.n	800a28a <HAL_TIM_ConfigClockSource+0x16a>
 800a1e8:	2b60      	cmp	r3, #96	@ 0x60
 800a1ea:	d877      	bhi.n	800a2dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a1ec:	2b50      	cmp	r3, #80	@ 0x50
 800a1ee:	d03c      	beq.n	800a26a <HAL_TIM_ConfigClockSource+0x14a>
 800a1f0:	2b50      	cmp	r3, #80	@ 0x50
 800a1f2:	d873      	bhi.n	800a2dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a1f4:	2b40      	cmp	r3, #64	@ 0x40
 800a1f6:	d058      	beq.n	800a2aa <HAL_TIM_ConfigClockSource+0x18a>
 800a1f8:	2b40      	cmp	r3, #64	@ 0x40
 800a1fa:	d86f      	bhi.n	800a2dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a1fc:	2b30      	cmp	r3, #48	@ 0x30
 800a1fe:	d064      	beq.n	800a2ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a200:	2b30      	cmp	r3, #48	@ 0x30
 800a202:	d86b      	bhi.n	800a2dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a204:	2b20      	cmp	r3, #32
 800a206:	d060      	beq.n	800a2ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a208:	2b20      	cmp	r3, #32
 800a20a:	d867      	bhi.n	800a2dc <HAL_TIM_ConfigClockSource+0x1bc>
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d05c      	beq.n	800a2ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a210:	2b10      	cmp	r3, #16
 800a212:	d05a      	beq.n	800a2ca <HAL_TIM_ConfigClockSource+0x1aa>
 800a214:	e062      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a226:	f000 f9c9 	bl	800a5bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a238:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	609a      	str	r2, [r3, #8]
      break;
 800a242:	e04f      	b.n	800a2e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a254:	f000 f9b2 	bl	800a5bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	689a      	ldr	r2, [r3, #8]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a266:	609a      	str	r2, [r3, #8]
      break;
 800a268:	e03c      	b.n	800a2e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a276:	461a      	mov	r2, r3
 800a278:	f000 f922 	bl	800a4c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2150      	movs	r1, #80	@ 0x50
 800a282:	4618      	mov	r0, r3
 800a284:	f000 f97c 	bl	800a580 <TIM_ITRx_SetConfig>
      break;
 800a288:	e02c      	b.n	800a2e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a296:	461a      	mov	r2, r3
 800a298:	f000 f941 	bl	800a51e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2160      	movs	r1, #96	@ 0x60
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 f96c 	bl	800a580 <TIM_ITRx_SetConfig>
      break;
 800a2a8:	e01c      	b.n	800a2e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	f000 f902 	bl	800a4c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2140      	movs	r1, #64	@ 0x40
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f000 f95c 	bl	800a580 <TIM_ITRx_SetConfig>
      break;
 800a2c8:	e00c      	b.n	800a2e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	f000 f953 	bl	800a580 <TIM_ITRx_SetConfig>
      break;
 800a2da:	e003      	b.n	800a2e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	73fb      	strb	r3, [r7, #15]
      break;
 800a2e0:	e000      	b.n	800a2e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a2e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	bf00      	nop
 800a300:	ffceff88 	.word	0xffceff88
 800a304:	00100040 	.word	0x00100040
 800a308:	00100030 	.word	0x00100030
 800a30c:	00100020 	.word	0x00100020

0800a310 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a46      	ldr	r2, [pc, #280]	@ (800a4a0 <TIM_Base_SetConfig+0x12c>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d013      	beq.n	800a3b4 <TIM_Base_SetConfig+0x40>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a392:	d00f      	beq.n	800a3b4 <TIM_Base_SetConfig+0x40>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a43      	ldr	r2, [pc, #268]	@ (800a4a4 <TIM_Base_SetConfig+0x130>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d00b      	beq.n	800a3b4 <TIM_Base_SetConfig+0x40>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a42      	ldr	r2, [pc, #264]	@ (800a4a8 <TIM_Base_SetConfig+0x134>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d007      	beq.n	800a3b4 <TIM_Base_SetConfig+0x40>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a41      	ldr	r2, [pc, #260]	@ (800a4ac <TIM_Base_SetConfig+0x138>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d003      	beq.n	800a3b4 <TIM_Base_SetConfig+0x40>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a40      	ldr	r2, [pc, #256]	@ (800a4b0 <TIM_Base_SetConfig+0x13c>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d108      	bne.n	800a3c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a35      	ldr	r2, [pc, #212]	@ (800a4a0 <TIM_Base_SetConfig+0x12c>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d01f      	beq.n	800a40e <TIM_Base_SetConfig+0x9a>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3d4:	d01b      	beq.n	800a40e <TIM_Base_SetConfig+0x9a>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a32      	ldr	r2, [pc, #200]	@ (800a4a4 <TIM_Base_SetConfig+0x130>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d017      	beq.n	800a40e <TIM_Base_SetConfig+0x9a>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a31      	ldr	r2, [pc, #196]	@ (800a4a8 <TIM_Base_SetConfig+0x134>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d013      	beq.n	800a40e <TIM_Base_SetConfig+0x9a>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a30      	ldr	r2, [pc, #192]	@ (800a4ac <TIM_Base_SetConfig+0x138>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d00f      	beq.n	800a40e <TIM_Base_SetConfig+0x9a>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a2f      	ldr	r2, [pc, #188]	@ (800a4b0 <TIM_Base_SetConfig+0x13c>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d00b      	beq.n	800a40e <TIM_Base_SetConfig+0x9a>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a2e      	ldr	r2, [pc, #184]	@ (800a4b4 <TIM_Base_SetConfig+0x140>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d007      	beq.n	800a40e <TIM_Base_SetConfig+0x9a>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a2d      	ldr	r2, [pc, #180]	@ (800a4b8 <TIM_Base_SetConfig+0x144>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d003      	beq.n	800a40e <TIM_Base_SetConfig+0x9a>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a2c      	ldr	r2, [pc, #176]	@ (800a4bc <TIM_Base_SetConfig+0x148>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d108      	bne.n	800a420 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	689a      	ldr	r2, [r3, #8]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a16      	ldr	r2, [pc, #88]	@ (800a4a0 <TIM_Base_SetConfig+0x12c>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d00f      	beq.n	800a46c <TIM_Base_SetConfig+0xf8>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a18      	ldr	r2, [pc, #96]	@ (800a4b0 <TIM_Base_SetConfig+0x13c>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d00b      	beq.n	800a46c <TIM_Base_SetConfig+0xf8>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a17      	ldr	r2, [pc, #92]	@ (800a4b4 <TIM_Base_SetConfig+0x140>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d007      	beq.n	800a46c <TIM_Base_SetConfig+0xf8>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a16      	ldr	r2, [pc, #88]	@ (800a4b8 <TIM_Base_SetConfig+0x144>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d003      	beq.n	800a46c <TIM_Base_SetConfig+0xf8>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a15      	ldr	r2, [pc, #84]	@ (800a4bc <TIM_Base_SetConfig+0x148>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d103      	bne.n	800a474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	691a      	ldr	r2, [r3, #16]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	2b01      	cmp	r3, #1
 800a484:	d105      	bne.n	800a492 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	f023 0201 	bic.w	r2, r3, #1
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	611a      	str	r2, [r3, #16]
  }
}
 800a492:	bf00      	nop
 800a494:	3714      	adds	r7, #20
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	40010000 	.word	0x40010000
 800a4a4:	40000400 	.word	0x40000400
 800a4a8:	40000800 	.word	0x40000800
 800a4ac:	40000c00 	.word	0x40000c00
 800a4b0:	40010400 	.word	0x40010400
 800a4b4:	40014000 	.word	0x40014000
 800a4b8:	40014400 	.word	0x40014400
 800a4bc:	40014800 	.word	0x40014800

0800a4c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6a1b      	ldr	r3, [r3, #32]
 800a4d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	6a1b      	ldr	r3, [r3, #32]
 800a4d6:	f023 0201 	bic.w	r2, r3, #1
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a4ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	011b      	lsls	r3, r3, #4
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f023 030a 	bic.w	r3, r3, #10
 800a4fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	4313      	orrs	r3, r2
 800a504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	621a      	str	r2, [r3, #32]
}
 800a512:	bf00      	nop
 800a514:	371c      	adds	r7, #28
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a51e:	b480      	push	{r7}
 800a520:	b087      	sub	sp, #28
 800a522:	af00      	add	r7, sp, #0
 800a524:	60f8      	str	r0, [r7, #12]
 800a526:	60b9      	str	r1, [r7, #8]
 800a528:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6a1b      	ldr	r3, [r3, #32]
 800a52e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6a1b      	ldr	r3, [r3, #32]
 800a534:	f023 0210 	bic.w	r2, r3, #16
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a548:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	031b      	lsls	r3, r3, #12
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	4313      	orrs	r3, r2
 800a552:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a55a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	011b      	lsls	r3, r3, #4
 800a560:	697a      	ldr	r2, [r7, #20]
 800a562:	4313      	orrs	r3, r2
 800a564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	697a      	ldr	r2, [r7, #20]
 800a570:	621a      	str	r2, [r3, #32]
}
 800a572:	bf00      	nop
 800a574:	371c      	adds	r7, #28
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
	...

0800a580 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	4b09      	ldr	r3, [pc, #36]	@ (800a5b8 <TIM_ITRx_SetConfig+0x38>)
 800a594:	4013      	ands	r3, r2
 800a596:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	f043 0307 	orr.w	r3, r3, #7
 800a5a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	609a      	str	r2, [r3, #8]
}
 800a5aa:	bf00      	nop
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	ffcfff8f 	.word	0xffcfff8f

0800a5bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b087      	sub	sp, #28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a5d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	021a      	lsls	r2, r3, #8
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	431a      	orrs	r2, r3
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	697a      	ldr	r2, [r7, #20]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	609a      	str	r2, [r3, #8]
}
 800a5f0:	bf00      	nop
 800a5f2:	371c      	adds	r7, #28
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d101      	bne.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a610:	2302      	movs	r3, #2
 800a612:	e06d      	b.n	800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2202      	movs	r2, #2
 800a620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a30      	ldr	r2, [pc, #192]	@ (800a6fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d004      	beq.n	800a648 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a2f      	ldr	r2, [pc, #188]	@ (800a700 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d108      	bne.n	800a65a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a64e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	4313      	orrs	r3, r2
 800a658:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a660:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	4313      	orrs	r3, r2
 800a66a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a20      	ldr	r2, [pc, #128]	@ (800a6fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d022      	beq.n	800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a686:	d01d      	beq.n	800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a1d      	ldr	r2, [pc, #116]	@ (800a704 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d018      	beq.n	800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a1c      	ldr	r2, [pc, #112]	@ (800a708 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d013      	beq.n	800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a1a      	ldr	r2, [pc, #104]	@ (800a70c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d00e      	beq.n	800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a15      	ldr	r2, [pc, #84]	@ (800a700 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d009      	beq.n	800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4a16      	ldr	r2, [pc, #88]	@ (800a710 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d004      	beq.n	800a6c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a15      	ldr	r2, [pc, #84]	@ (800a714 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d10c      	bne.n	800a6de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	40010000 	.word	0x40010000
 800a700:	40010400 	.word	0x40010400
 800a704:	40000400 	.word	0x40000400
 800a708:	40000800 	.word	0x40000800
 800a70c:	40000c00 	.word	0x40000c00
 800a710:	40001800 	.word	0x40001800
 800a714:	40014000 	.word	0x40014000

0800a718 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d121      	bne.n	800a7aa <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	4b27      	ldr	r3, [pc, #156]	@ (800a808 <FMC_SDRAM_Init+0xb4>)
 800a76c:	4013      	ands	r3, r2
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	6851      	ldr	r1, [r2, #4]
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	6892      	ldr	r2, [r2, #8]
 800a776:	4311      	orrs	r1, r2
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	68d2      	ldr	r2, [r2, #12]
 800a77c:	4311      	orrs	r1, r2
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	6912      	ldr	r2, [r2, #16]
 800a782:	4311      	orrs	r1, r2
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	6952      	ldr	r2, [r2, #20]
 800a788:	4311      	orrs	r1, r2
 800a78a:	683a      	ldr	r2, [r7, #0]
 800a78c:	6992      	ldr	r2, [r2, #24]
 800a78e:	4311      	orrs	r1, r2
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	69d2      	ldr	r2, [r2, #28]
 800a794:	4311      	orrs	r1, r2
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	6a12      	ldr	r2, [r2, #32]
 800a79a:	4311      	orrs	r1, r2
 800a79c:	683a      	ldr	r2, [r7, #0]
 800a79e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a7a0:	430a      	orrs	r2, r1
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	e026      	b.n	800a7f8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	69d9      	ldr	r1, [r3, #28]
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	6a1b      	ldr	r3, [r3, #32]
 800a7ba:	4319      	orrs	r1, r3
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c0:	430b      	orrs	r3, r1
 800a7c2:	431a      	orrs	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	4b0e      	ldr	r3, [pc, #56]	@ (800a808 <FMC_SDRAM_Init+0xb4>)
 800a7ce:	4013      	ands	r3, r2
 800a7d0:	683a      	ldr	r2, [r7, #0]
 800a7d2:	6851      	ldr	r1, [r2, #4]
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	6892      	ldr	r2, [r2, #8]
 800a7d8:	4311      	orrs	r1, r2
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	68d2      	ldr	r2, [r2, #12]
 800a7de:	4311      	orrs	r1, r2
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	6912      	ldr	r2, [r2, #16]
 800a7e4:	4311      	orrs	r1, r2
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	6952      	ldr	r2, [r2, #20]
 800a7ea:	4311      	orrs	r1, r2
 800a7ec:	683a      	ldr	r2, [r7, #0]
 800a7ee:	6992      	ldr	r2, [r2, #24]
 800a7f0:	430a      	orrs	r2, r1
 800a7f2:	431a      	orrs	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	ffff8000 	.word	0xffff8000

0800a80c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d128      	bne.n	800a870 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	1e59      	subs	r1, r3, #1
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	3b01      	subs	r3, #1
 800a832:	011b      	lsls	r3, r3, #4
 800a834:	4319      	orrs	r1, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	021b      	lsls	r3, r3, #8
 800a83e:	4319      	orrs	r1, r3
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	3b01      	subs	r3, #1
 800a846:	031b      	lsls	r3, r3, #12
 800a848:	4319      	orrs	r1, r3
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	3b01      	subs	r3, #1
 800a850:	041b      	lsls	r3, r3, #16
 800a852:	4319      	orrs	r1, r3
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	695b      	ldr	r3, [r3, #20]
 800a858:	3b01      	subs	r3, #1
 800a85a:	051b      	lsls	r3, r3, #20
 800a85c:	4319      	orrs	r1, r3
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	3b01      	subs	r3, #1
 800a864:	061b      	lsls	r3, r3, #24
 800a866:	430b      	orrs	r3, r1
 800a868:	431a      	orrs	r2, r3
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	609a      	str	r2, [r3, #8]
 800a86e:	e02d      	b.n	800a8cc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	689a      	ldr	r2, [r3, #8]
 800a874:	4b19      	ldr	r3, [pc, #100]	@ (800a8dc <FMC_SDRAM_Timing_Init+0xd0>)
 800a876:	4013      	ands	r3, r2
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	68d2      	ldr	r2, [r2, #12]
 800a87c:	3a01      	subs	r2, #1
 800a87e:	0311      	lsls	r1, r2, #12
 800a880:	68ba      	ldr	r2, [r7, #8]
 800a882:	6952      	ldr	r2, [r2, #20]
 800a884:	3a01      	subs	r2, #1
 800a886:	0512      	lsls	r2, r2, #20
 800a888:	430a      	orrs	r2, r1
 800a88a:	431a      	orrs	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	1e59      	subs	r1, r3, #1
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	011b      	lsls	r3, r3, #4
 800a8a6:	4319      	orrs	r1, r3
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	021b      	lsls	r3, r3, #8
 800a8b0:	4319      	orrs	r1, r3
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	041b      	lsls	r3, r3, #16
 800a8ba:	4319      	orrs	r1, r3
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	061b      	lsls	r3, r3, #24
 800a8c4:	430b      	orrs	r3, r1
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3714      	adds	r7, #20
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	ff0f0fff 	.word	0xff0f0fff

0800a8e0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	691a      	ldr	r2, [r3, #16]
 800a8f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a924 <FMC_SDRAM_SendCommand+0x44>)
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	68ba      	ldr	r2, [r7, #8]
 800a8f6:	6811      	ldr	r1, [r2, #0]
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	6852      	ldr	r2, [r2, #4]
 800a8fc:	4311      	orrs	r1, r2
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	6892      	ldr	r2, [r2, #8]
 800a902:	3a01      	subs	r2, #1
 800a904:	0152      	lsls	r2, r2, #5
 800a906:	4311      	orrs	r1, r2
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	68d2      	ldr	r2, [r2, #12]
 800a90c:	0252      	lsls	r2, r2, #9
 800a90e:	430a      	orrs	r2, r1
 800a910:	431a      	orrs	r2, r3
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	ffc00000 	.word	0xffc00000

0800a928 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	695a      	ldr	r2, [r3, #20]
 800a936:	4b07      	ldr	r3, [pc, #28]	@ (800a954 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a938:	4013      	ands	r3, r2
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	0052      	lsls	r2, r2, #1
 800a93e:	431a      	orrs	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	ffffc001 	.word	0xffffc001

0800a958 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a958:	b084      	sub	sp, #16
 800a95a:	b480      	push	{r7}
 800a95c:	b085      	sub	sp, #20
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	f107 001c 	add.w	r0, r7, #28
 800a966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a96e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a970:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a972:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800a976:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800a97a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a97c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800a97e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	4313      	orrs	r3, r2
 800a984:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	4b07      	ldr	r3, [pc, #28]	@ (800a9a8 <SDMMC_Init+0x50>)
 800a98c:	4013      	ands	r3, r2
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	431a      	orrs	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	b004      	add	sp, #16
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	ffc02c00 	.word	0xffc02c00

0800a9ac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b083      	sub	sp, #12
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
 800a9ce:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr

0800a9e8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f043 0203 	orr.w	r2, r3, #3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b083      	sub	sp, #12
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0303 	and.w	r3, r3, #3
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr
	...

0800aa28 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aa32:	2300      	movs	r3, #0
 800aa34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800aa46:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800aa4c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800aa52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	68da      	ldr	r2, [r3, #12]
 800aa5e:	4b06      	ldr	r3, [pc, #24]	@ (800aa78 <SDMMC_SendCommand+0x50>)
 800aa60:	4013      	ands	r3, r2
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	431a      	orrs	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	fffee0c0 	.word	0xfffee0c0

0800aa7c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	b2db      	uxtb	r3, r3
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b085      	sub	sp, #20
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	3314      	adds	r3, #20
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	685a      	ldr	r2, [r3, #4]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800aae2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800aae8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800aaee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aafa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	431a      	orrs	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ab06:	2300      	movs	r3, #0

}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3714      	adds	r7, #20
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b088      	sub	sp, #32
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ab22:	2310      	movs	r3, #16
 800ab24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab36:	f107 0308 	add.w	r3, r7, #8
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f7ff ff73 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ab42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab46:	2110      	movs	r1, #16
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 fa81 	bl	800b050 <SDMMC_GetCmdResp1>
 800ab4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab50:	69fb      	ldr	r3, [r7, #28]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3720      	adds	r7, #32
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b088      	sub	sp, #32
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ab68:	2311      	movs	r3, #17
 800ab6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab72:	2300      	movs	r3, #0
 800ab74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab7c:	f107 0308 	add.w	r3, r7, #8
 800ab80:	4619      	mov	r1, r3
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7ff ff50 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ab88:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab8c:	2111      	movs	r1, #17
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fa5e 	bl	800b050 <SDMMC_GetCmdResp1>
 800ab94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab96:	69fb      	ldr	r3, [r7, #28]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3720      	adds	r7, #32
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800abae:	2312      	movs	r3, #18
 800abb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800abb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abb8:	2300      	movs	r3, #0
 800abba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abc2:	f107 0308 	add.w	r3, r7, #8
 800abc6:	4619      	mov	r1, r3
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f7ff ff2d 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800abce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abd2:	2112      	movs	r1, #18
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fa3b 	bl	800b050 <SDMMC_GetCmdResp1>
 800abda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abdc:	69fb      	ldr	r3, [r7, #28]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3720      	adds	r7, #32
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b088      	sub	sp, #32
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
 800abee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800abf4:	2318      	movs	r3, #24
 800abf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800abfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abfe:	2300      	movs	r3, #0
 800ac00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac08:	f107 0308 	add.w	r3, r7, #8
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7ff ff0a 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ac14:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac18:	2118      	movs	r1, #24
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fa18 	bl	800b050 <SDMMC_GetCmdResp1>
 800ac20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac22:	69fb      	ldr	r3, [r7, #28]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3720      	adds	r7, #32
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b088      	sub	sp, #32
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ac3a:	2319      	movs	r3, #25
 800ac3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac44:	2300      	movs	r3, #0
 800ac46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac4e:	f107 0308 	add.w	r3, r7, #8
 800ac52:	4619      	mov	r1, r3
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f7ff fee7 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ac5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac5e:	2119      	movs	r1, #25
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 f9f5 	bl	800b050 <SDMMC_GetCmdResp1>
 800ac66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac68:	69fb      	ldr	r3, [r7, #28]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3720      	adds	r7, #32
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
	...

0800ac74 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b088      	sub	sp, #32
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ac80:	230c      	movs	r3, #12
 800ac82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac92:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acac:	f107 0308 	add.w	r3, r7, #8
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7ff feb8 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800acb8:	4a0b      	ldr	r2, [pc, #44]	@ (800ace8 <SDMMC_CmdStopTransfer+0x74>)
 800acba:	210c      	movs	r1, #12
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 f9c7 	bl	800b050 <SDMMC_GetCmdResp1>
 800acc2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800acd6:	d101      	bne.n	800acdc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800acd8:	2300      	movs	r3, #0
 800acda:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800acdc:	69fb      	ldr	r3, [r7, #28]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3720      	adds	r7, #32
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	05f5e100 	.word	0x05f5e100

0800acec <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b088      	sub	sp, #32
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800acfa:	2307      	movs	r3, #7
 800acfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad04:	2300      	movs	r3, #0
 800ad06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad0c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad0e:	f107 0308 	add.w	r3, r7, #8
 800ad12:	4619      	mov	r1, r3
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7ff fe87 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ad1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad1e:	2107      	movs	r1, #7
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f995 	bl	800b050 <SDMMC_GetCmdResp1>
 800ad26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad28:	69fb      	ldr	r3, [r7, #28]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3720      	adds	r7, #32
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b088      	sub	sp, #32
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ad42:	2300      	movs	r3, #0
 800ad44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad46:	2300      	movs	r3, #0
 800ad48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad50:	f107 0308 	add.w	r3, r7, #8
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f7ff fe66 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fbb9 	bl	800b4d4 <SDMMC_GetCmdError>
 800ad62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad64:	69fb      	ldr	r3, [r7, #28]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3720      	adds	r7, #32
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b088      	sub	sp, #32
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ad76:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ad7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ad7c:	2308      	movs	r3, #8
 800ad7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad86:	2300      	movs	r3, #0
 800ad88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad90:	f107 0308 	add.w	r3, r7, #8
 800ad94:	4619      	mov	r1, r3
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff fe46 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fb4b 	bl	800b438 <SDMMC_GetCmdResp7>
 800ada2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ada4:	69fb      	ldr	r3, [r7, #28]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3720      	adds	r7, #32
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800adae:	b580      	push	{r7, lr}
 800adb0:	b088      	sub	sp, #32
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800adbc:	2337      	movs	r3, #55	@ 0x37
 800adbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adc6:	2300      	movs	r3, #0
 800adc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800adce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800add0:	f107 0308 	add.w	r3, r7, #8
 800add4:	4619      	mov	r1, r3
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f7ff fe26 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800addc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ade0:	2137      	movs	r1, #55	@ 0x37
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f934 	bl	800b050 <SDMMC_GetCmdResp1>
 800ade8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adea:	69fb      	ldr	r3, [r7, #28]
}
 800adec:	4618      	mov	r0, r3
 800adee:	3720      	adds	r7, #32
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b088      	sub	sp, #32
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ae02:	2329      	movs	r3, #41	@ 0x29
 800ae04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae16:	f107 0308 	add.w	r3, r7, #8
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f7ff fe03 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fa50 	bl	800b2c8 <SDMMC_GetCmdResp3>
 800ae28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae2a:	69fb      	ldr	r3, [r7, #28]
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3720      	adds	r7, #32
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b088      	sub	sp, #32
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ae42:	2306      	movs	r3, #6
 800ae44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae56:	f107 0308 	add.w	r3, r7, #8
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f7ff fde3 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ae62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae66:	2106      	movs	r1, #6
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f8f1 	bl	800b050 <SDMMC_GetCmdResp1>
 800ae6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae70:	69fb      	ldr	r3, [r7, #28]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3720      	adds	r7, #32
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b088      	sub	sp, #32
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ae86:	2333      	movs	r3, #51	@ 0x33
 800ae88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae90:	2300      	movs	r3, #0
 800ae92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae9a:	f107 0308 	add.w	r3, r7, #8
 800ae9e:	4619      	mov	r1, r3
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f7ff fdc1 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800aea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aeaa:	2133      	movs	r1, #51	@ 0x33
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f8cf 	bl	800b050 <SDMMC_GetCmdResp1>
 800aeb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeb4:	69fb      	ldr	r3, [r7, #28]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3720      	adds	r7, #32
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b088      	sub	sp, #32
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800aec6:	2300      	movs	r3, #0
 800aec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aeca:	2302      	movs	r3, #2
 800aecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aece:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800aed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aed4:	2300      	movs	r3, #0
 800aed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aedc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aede:	f107 0308 	add.w	r3, r7, #8
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7ff fd9f 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f9a2 	bl	800b234 <SDMMC_GetCmdResp2>
 800aef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aef2:	69fb      	ldr	r3, [r7, #28]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3720      	adds	r7, #32
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b088      	sub	sp, #32
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800af0a:	2309      	movs	r3, #9
 800af0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800af0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800af12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af14:	2300      	movs	r3, #0
 800af16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af1e:	f107 0308 	add.w	r3, r7, #8
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7ff fd7f 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f982 	bl	800b234 <SDMMC_GetCmdResp2>
 800af30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af32:	69fb      	ldr	r3, [r7, #28]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3720      	adds	r7, #32
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b088      	sub	sp, #32
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800af46:	2300      	movs	r3, #0
 800af48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800af4a:	2303      	movs	r3, #3
 800af4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af54:	2300      	movs	r3, #0
 800af56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af5e:	f107 0308 	add.w	r3, r7, #8
 800af62:	4619      	mov	r1, r3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7ff fd5f 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	2103      	movs	r1, #3
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f9ea 	bl	800b348 <SDMMC_GetCmdResp6>
 800af74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af76:	69fb      	ldr	r3, [r7, #28]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3720      	adds	r7, #32
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b088      	sub	sp, #32
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800af8e:	230d      	movs	r3, #13
 800af90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af98:	2300      	movs	r3, #0
 800af9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800afa0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afa2:	f107 0308 	add.w	r3, r7, #8
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7ff fd3d 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800afae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afb2:	210d      	movs	r1, #13
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f84b 	bl	800b050 <SDMMC_GetCmdResp1>
 800afba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afbc:	69fb      	ldr	r3, [r7, #28]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3720      	adds	r7, #32
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b088      	sub	sp, #32
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800afce:	2300      	movs	r3, #0
 800afd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800afd2:	230d      	movs	r3, #13
 800afd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800afda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afdc:	2300      	movs	r3, #0
 800afde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800afe4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afe6:	f107 0308 	add.w	r3, r7, #8
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff fd1b 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800aff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aff6:	210d      	movs	r1, #13
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f829 	bl	800b050 <SDMMC_GetCmdResp1>
 800affe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b000:	69fb      	ldr	r3, [r7, #28]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3720      	adds	r7, #32
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b088      	sub	sp, #32
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800b018:	2306      	movs	r3, #6
 800b01a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b01c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b022:	2300      	movs	r3, #0
 800b024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b026:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b02a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b02c:	f107 0308 	add.w	r3, r7, #8
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7ff fcf8 	bl	800aa28 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800b038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b03c:	2106      	movs	r1, #6
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f806 	bl	800b050 <SDMMC_GetCmdResp1>
 800b044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b046:	69fb      	ldr	r3, [r7, #28]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3720      	adds	r7, #32
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b088      	sub	sp, #32
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	460b      	mov	r3, r1
 800b05a:	607a      	str	r2, [r7, #4]
 800b05c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b05e:	4b70      	ldr	r3, [pc, #448]	@ (800b220 <SDMMC_GetCmdResp1+0x1d0>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a70      	ldr	r2, [pc, #448]	@ (800b224 <SDMMC_GetCmdResp1+0x1d4>)
 800b064:	fba2 2303 	umull	r2, r3, r2, r3
 800b068:	0a5a      	lsrs	r2, r3, #9
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	fb02 f303 	mul.w	r3, r2, r3
 800b070:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	1e5a      	subs	r2, r3, #1
 800b076:	61fa      	str	r2, [r7, #28]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d102      	bne.n	800b082 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b07c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b080:	e0c9      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b086:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	4b67      	ldr	r3, [pc, #412]	@ (800b228 <SDMMC_GetCmdResp1+0x1d8>)
 800b08c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d0ef      	beq.n	800b072 <SDMMC_GetCmdResp1+0x22>
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1ea      	bne.n	800b072 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0a0:	f003 0304 	and.w	r3, r3, #4
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d004      	beq.n	800b0b2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2204      	movs	r2, #4
 800b0ac:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0ae:	2304      	movs	r3, #4
 800b0b0:	e0b1      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d004      	beq.n	800b0c8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e0a6      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4a58      	ldr	r2, [pc, #352]	@ (800b22c <SDMMC_GetCmdResp1+0x1dc>)
 800b0cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b0ce:	68f8      	ldr	r0, [r7, #12]
 800b0d0:	f7ff fcd4 	bl	800aa7c <SDMMC_GetCommandResponse>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	7afb      	ldrb	r3, [r7, #11]
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d001      	beq.n	800b0e2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e099      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f7ff fcd6 	bl	800aa96 <SDMMC_GetResponse>
 800b0ea:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b0ec:	697a      	ldr	r2, [r7, #20]
 800b0ee:	4b50      	ldr	r3, [pc, #320]	@ (800b230 <SDMMC_GetCmdResp1+0x1e0>)
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e08d      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	da02      	bge.n	800b106 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b100:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b104:	e087      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b110:	2340      	movs	r3, #64	@ 0x40
 800b112:	e080      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b11e:	2380      	movs	r3, #128	@ 0x80
 800b120:	e079      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d002      	beq.n	800b132 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b12c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b130:	e071      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b13c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b140:	e069      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b14c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b150:	e061      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d002      	beq.n	800b162 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b15c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b160:	e059      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b16c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b170:	e051      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b17c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b180:	e049      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d002      	beq.n	800b192 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b18c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b190:	e041      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d002      	beq.n	800b1a2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b19c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1a0:	e039      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b1ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b1b0:	e031      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d002      	beq.n	800b1c2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b1bc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b1c0:	e029      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d002      	beq.n	800b1d2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b1cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b1d0:	e021      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b1dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b1e0:	e019      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d002      	beq.n	800b1f2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b1ec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b1f0:	e011      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b1fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b200:	e009      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f003 0308 	and.w	r3, r3, #8
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b20c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b210:	e001      	b.n	800b216 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b212:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b216:	4618      	mov	r0, r3
 800b218:	3720      	adds	r7, #32
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	20000000 	.word	0x20000000
 800b224:	10624dd3 	.word	0x10624dd3
 800b228:	00200045 	.word	0x00200045
 800b22c:	002000c5 	.word	0x002000c5
 800b230:	fdffe008 	.word	0xfdffe008

0800b234 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b23c:	4b1f      	ldr	r3, [pc, #124]	@ (800b2bc <SDMMC_GetCmdResp2+0x88>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a1f      	ldr	r2, [pc, #124]	@ (800b2c0 <SDMMC_GetCmdResp2+0x8c>)
 800b242:	fba2 2303 	umull	r2, r3, r2, r3
 800b246:	0a5b      	lsrs	r3, r3, #9
 800b248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b24c:	fb02 f303 	mul.w	r3, r2, r3
 800b250:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	1e5a      	subs	r2, r3, #1
 800b256:	60fa      	str	r2, [r7, #12]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d102      	bne.n	800b262 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b25c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b260:	e026      	b.n	800b2b0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b266:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d0ef      	beq.n	800b252 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d1ea      	bne.n	800b252 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b280:	f003 0304 	and.w	r3, r3, #4
 800b284:	2b00      	cmp	r3, #0
 800b286:	d004      	beq.n	800b292 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2204      	movs	r2, #4
 800b28c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b28e:	2304      	movs	r3, #4
 800b290:	e00e      	b.n	800b2b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b296:	f003 0301 	and.w	r3, r3, #1
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d004      	beq.n	800b2a8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e003      	b.n	800b2b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a06      	ldr	r2, [pc, #24]	@ (800b2c4 <SDMMC_GetCmdResp2+0x90>)
 800b2ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b2ae:	2300      	movs	r3, #0
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3714      	adds	r7, #20
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr
 800b2bc:	20000000 	.word	0x20000000
 800b2c0:	10624dd3 	.word	0x10624dd3
 800b2c4:	002000c5 	.word	0x002000c5

0800b2c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b085      	sub	sp, #20
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b2d0:	4b1a      	ldr	r3, [pc, #104]	@ (800b33c <SDMMC_GetCmdResp3+0x74>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a1a      	ldr	r2, [pc, #104]	@ (800b340 <SDMMC_GetCmdResp3+0x78>)
 800b2d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b2da:	0a5b      	lsrs	r3, r3, #9
 800b2dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2e0:	fb02 f303 	mul.w	r3, r2, r3
 800b2e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	1e5a      	subs	r2, r3, #1
 800b2ea:	60fa      	str	r2, [r7, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d102      	bne.n	800b2f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b2f4:	e01b      	b.n	800b32e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2fa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b302:	2b00      	cmp	r3, #0
 800b304:	d0ef      	beq.n	800b2e6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d1ea      	bne.n	800b2e6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b314:	f003 0304 	and.w	r3, r3, #4
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d004      	beq.n	800b326 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2204      	movs	r2, #4
 800b320:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b322:	2304      	movs	r3, #4
 800b324:	e003      	b.n	800b32e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a06      	ldr	r2, [pc, #24]	@ (800b344 <SDMMC_GetCmdResp3+0x7c>)
 800b32a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	20000000 	.word	0x20000000
 800b340:	10624dd3 	.word	0x10624dd3
 800b344:	002000c5 	.word	0x002000c5

0800b348 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	460b      	mov	r3, r1
 800b352:	607a      	str	r2, [r7, #4]
 800b354:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b356:	4b35      	ldr	r3, [pc, #212]	@ (800b42c <SDMMC_GetCmdResp6+0xe4>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a35      	ldr	r2, [pc, #212]	@ (800b430 <SDMMC_GetCmdResp6+0xe8>)
 800b35c:	fba2 2303 	umull	r2, r3, r2, r3
 800b360:	0a5b      	lsrs	r3, r3, #9
 800b362:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b366:	fb02 f303 	mul.w	r3, r2, r3
 800b36a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	1e5a      	subs	r2, r3, #1
 800b370:	61fa      	str	r2, [r7, #28]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d102      	bne.n	800b37c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b376:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b37a:	e052      	b.n	800b422 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b380:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d0ef      	beq.n	800b36c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1ea      	bne.n	800b36c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b39a:	f003 0304 	and.w	r3, r3, #4
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d004      	beq.n	800b3ac <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2204      	movs	r2, #4
 800b3a6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3a8:	2304      	movs	r3, #4
 800b3aa:	e03a      	b.n	800b422 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3b0:	f003 0301 	and.w	r3, r3, #1
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d004      	beq.n	800b3c2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e02f      	b.n	800b422 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f7ff fb5a 	bl	800aa7c <SDMMC_GetCommandResponse>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	7afb      	ldrb	r3, [r7, #11]
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d001      	beq.n	800b3d6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e025      	b.n	800b422 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	4a16      	ldr	r2, [pc, #88]	@ (800b434 <SDMMC_GetCmdResp6+0xec>)
 800b3da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b3dc:	2100      	movs	r1, #0
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f7ff fb59 	bl	800aa96 <SDMMC_GetResponse>
 800b3e4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d106      	bne.n	800b3fe <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	0c1b      	lsrs	r3, r3, #16
 800b3f4:	b29a      	uxth	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	e011      	b.n	800b422 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d002      	beq.n	800b40e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b408:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b40c:	e009      	b.n	800b422 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b418:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b41c:	e001      	b.n	800b422 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b41e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b422:	4618      	mov	r0, r3
 800b424:	3720      	adds	r7, #32
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	20000000 	.word	0x20000000
 800b430:	10624dd3 	.word	0x10624dd3
 800b434:	002000c5 	.word	0x002000c5

0800b438 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b440:	4b22      	ldr	r3, [pc, #136]	@ (800b4cc <SDMMC_GetCmdResp7+0x94>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a22      	ldr	r2, [pc, #136]	@ (800b4d0 <SDMMC_GetCmdResp7+0x98>)
 800b446:	fba2 2303 	umull	r2, r3, r2, r3
 800b44a:	0a5b      	lsrs	r3, r3, #9
 800b44c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b450:	fb02 f303 	mul.w	r3, r2, r3
 800b454:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	1e5a      	subs	r2, r3, #1
 800b45a:	60fa      	str	r2, [r7, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d102      	bne.n	800b466 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b460:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b464:	e02c      	b.n	800b4c0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b46a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b472:	2b00      	cmp	r3, #0
 800b474:	d0ef      	beq.n	800b456 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1ea      	bne.n	800b456 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b484:	f003 0304 	and.w	r3, r3, #4
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d004      	beq.n	800b496 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2204      	movs	r2, #4
 800b490:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b492:	2304      	movs	r3, #4
 800b494:	e014      	b.n	800b4c0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b49a:	f003 0301 	and.w	r3, r3, #1
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d004      	beq.n	800b4ac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e009      	b.n	800b4c0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2240      	movs	r2, #64	@ 0x40
 800b4bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b4be:	2300      	movs	r3, #0

}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr
 800b4cc:	20000000 	.word	0x20000000
 800b4d0:	10624dd3 	.word	0x10624dd3

0800b4d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b4dc:	4b11      	ldr	r3, [pc, #68]	@ (800b524 <SDMMC_GetCmdError+0x50>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a11      	ldr	r2, [pc, #68]	@ (800b528 <SDMMC_GetCmdError+0x54>)
 800b4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e6:	0a5b      	lsrs	r3, r3, #9
 800b4e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4ec:	fb02 f303 	mul.w	r3, r2, r3
 800b4f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	1e5a      	subs	r2, r3, #1
 800b4f6:	60fa      	str	r2, [r7, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d102      	bne.n	800b502 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b500:	e009      	b.n	800b516 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0f1      	beq.n	800b4f2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a06      	ldr	r2, [pc, #24]	@ (800b52c <SDMMC_GetCmdError+0x58>)
 800b512:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3714      	adds	r7, #20
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	20000000 	.word	0x20000000
 800b528:	10624dd3 	.word	0x10624dd3
 800b52c:	002000c5 	.word	0x002000c5

0800b530 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 800b530:	b480      	push	{r7}
 800b532:	b087      	sub	sp, #28
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	3b04      	subs	r3, #4
 800b540:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 800b542:	2300      	movs	r3, #0
 800b544:	82fb      	strh	r3, [r7, #22]
 800b546:	e02a      	b.n	800b59e <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 800b548:	8afb      	ldrh	r3, [r7, #22]
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	4413      	add	r3, r2
 800b54e:	781a      	ldrb	r2, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	429a      	cmp	r2, r3
 800b556:	d11f      	bne.n	800b598 <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 800b558:	8afb      	ldrh	r3, [r7, #22]
 800b55a:	3301      	adds	r3, #1
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	4413      	add	r3, r2
 800b560:	781a      	ldrb	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	3301      	adds	r3, #1
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d115      	bne.n	800b598 <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 800b56c:	8afb      	ldrh	r3, [r7, #22]
 800b56e:	3302      	adds	r3, #2
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	4413      	add	r3, r2
 800b574:	781a      	ldrb	r2, [r3, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3302      	adds	r3, #2
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d10b      	bne.n	800b598 <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 800b580:	8afb      	ldrh	r3, [r7, #22]
 800b582:	3303      	adds	r3, #3
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	4413      	add	r3, r2
 800b588:	781a      	ldrb	r2, [r3, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	3303      	adds	r3, #3
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	429a      	cmp	r2, r3
 800b592:	d101      	bne.n	800b598 <__AVI_SearchID+0x68>
            return i;  
 800b594:	8afb      	ldrh	r3, [r7, #22]
 800b596:	e007      	b.n	800b5a8 <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 800b598:	8afb      	ldrh	r3, [r7, #22]
 800b59a:	3301      	adds	r3, #1
 800b59c:	82fb      	strh	r3, [r7, #22]
 800b59e:	8afb      	ldrh	r3, [r7, #22]
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d8d0      	bhi.n	800b548 <__AVI_SearchID+0x18>
  }
  return 0;    
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	371c      	adds	r7, #28
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	3302      	adds	r3, #2
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	021b      	lsls	r3, r3, #8
 800b5c6:	b21a      	sxth	r2, r3
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	3303      	adds	r3, #3
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	b21b      	sxth	r3, r3
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	b21b      	sxth	r3, r3
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	3304      	adds	r3, #4
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	3305      	adds	r3, #5
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	021b      	lsls	r3, r3, #8
 800b5ea:	431a      	orrs	r2, r3
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	3306      	adds	r3, #6
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	041b      	lsls	r3, r3, #16
 800b5f4:	431a      	orrs	r2, r3
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	3307      	adds	r3, #7
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	061b      	lsls	r3, r3, #24
 800b5fe:	4313      	orrs	r3, r2
 800b600:	461a      	mov	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a1b      	ldr	r3, [r3, #32]
 800b60a:	f003 0301 	and.w	r3, r3, #1
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d004      	beq.n	800b61c <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a1b      	ldr	r3, [r3, #32]
 800b616:	1c5a      	adds	r2, r3, #1
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	8bdb      	ldrh	r3, [r3, #30]
 800b620:	f246 4263 	movw	r2, #25699	@ 0x6463
 800b624:	4293      	cmp	r3, r2
 800b626:	d005      	beq.n	800b634 <__AVI_GetStreamInfo+0x80>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	8bdb      	ldrh	r3, [r3, #30]
 800b62c:	f247 7262 	movw	r2, #30562	@ 0x7762
 800b630:	4293      	cmp	r3, r2
 800b632:	d101      	bne.n	800b638 <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 800b634:	2300      	movs	r3, #0
 800b636:	e000      	b.n	800b63a <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 800b638:	230b      	movs	r3, #11
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
	...

0800b648 <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b08e      	sub	sp, #56	@ 0x38
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 800b654:	2300      	movs	r3, #0
 800b656:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 800b662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a87      	ldr	r2, [pc, #540]	@ (800b884 <__AVI_Init+0x23c>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d001      	beq.n	800b670 <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	e170      	b.n	800b952 <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 800b670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	4a84      	ldr	r2, [pc, #528]	@ (800b888 <__AVI_Init+0x240>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d001      	beq.n	800b67e <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 800b67a:	2302      	movs	r3, #2
 800b67c:	e169      	b.n	800b952 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	330c      	adds	r3, #12
 800b682:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800b688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a7f      	ldr	r2, [pc, #508]	@ (800b88c <__AVI_Init+0x244>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d001      	beq.n	800b696 <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 800b692:	2303      	movs	r3, #3
 800b694:	e15d      	b.n	800b952 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 800b696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	4a7d      	ldr	r2, [pc, #500]	@ (800b890 <__AVI_Init+0x248>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d001      	beq.n	800b6a4 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 800b6a0:	2304      	movs	r3, #4
 800b6a2:	e156      	b.n	800b952 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	330c      	adds	r3, #12
 800b6a8:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a78      	ldr	r2, [pc, #480]	@ (800b894 <__AVI_Init+0x24c>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d001      	beq.n	800b6bc <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 800b6b8:	2305      	movs	r3, #5
 800b6ba:	e14a      	b.n	800b952 <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6be:	689a      	ldr	r2, [r3, #8]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c6:	699a      	ldr	r2, [r3, #24]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 800b6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	3308      	adds	r3, #8
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800b6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a6a      	ldr	r2, [pc, #424]	@ (800b88c <__AVI_Init+0x244>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d001      	beq.n	800b6ea <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	e133      	b.n	800b952 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 800b6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	4a6a      	ldr	r2, [pc, #424]	@ (800b898 <__AVI_Init+0x250>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d001      	beq.n	800b6f8 <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 800b6f4:	2306      	movs	r3, #6
 800b6f6:	e12c      	b.n	800b952 <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	330c      	adds	r3, #12
 800b6fc:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 800b6fe:	6a3b      	ldr	r3, [r7, #32]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a66      	ldr	r2, [pc, #408]	@ (800b89c <__AVI_Init+0x254>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d001      	beq.n	800b70c <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 800b708:	2307      	movs	r3, #7
 800b70a:	e122      	b.n	800b952 <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 800b70c:	6a3b      	ldr	r3, [r7, #32]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	4a63      	ldr	r2, [pc, #396]	@ (800b8a0 <__AVI_Init+0x258>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d16a      	bne.n	800b7ec <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	4a62      	ldr	r2, [pc, #392]	@ (800b8a4 <__AVI_Init+0x25c>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d001      	beq.n	800b724 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 800b720:	230a      	movs	r3, #10
 800b722:	e116      	b.n	800b952 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 800b724:	4a60      	ldr	r2, [pc, #384]	@ (800b8a8 <__AVI_Init+0x260>)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 800b72a:	4a60      	ldr	r2, [pc, #384]	@ (800b8ac <__AVI_Init+0x264>)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800b730:	6a3b      	ldr	r3, [r7, #32]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	3314      	adds	r3, #20
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	4413      	add	r3, r2
 800b73a:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a5b      	ldr	r2, [pc, #364]	@ (800b8b0 <__AVI_Init+0x268>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d001      	beq.n	800b74a <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 800b746:	2308      	movs	r3, #8
 800b748:	e103      	b.n	800b952 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	68da      	ldr	r2, [r3, #12]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	691a      	ldr	r2, [r3, #16]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 800b75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	3308      	adds	r3, #8
 800b760:	68ba      	ldr	r2, [r7, #8]
 800b762:	4413      	add	r3, r2
 800b764:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800b76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a47      	ldr	r2, [pc, #284]	@ (800b88c <__AVI_Init+0x244>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d009      	beq.n	800b788 <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2200      	movs	r2, #0
 800b778:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	839a      	strh	r2, [r3, #28]
 800b786:	e0b7      	b.n	800b8f8 <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 800b788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	4a42      	ldr	r2, [pc, #264]	@ (800b898 <__AVI_Init+0x250>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d001      	beq.n	800b796 <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 800b792:	2306      	movs	r3, #6
 800b794:	e0dd      	b.n	800b952 <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	330c      	adds	r3, #12
 800b79a:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a3e      	ldr	r2, [pc, #248]	@ (800b89c <__AVI_Init+0x254>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d001      	beq.n	800b7aa <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 800b7a6:	2307      	movs	r3, #7
 800b7a8:	e0d3      	b.n	800b952 <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800b7aa:	6a3b      	ldr	r3, [r7, #32]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	4a41      	ldr	r2, [pc, #260]	@ (800b8b4 <__AVI_Init+0x26c>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d001      	beq.n	800b7b8 <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 800b7b4:	230a      	movs	r3, #10
 800b7b6:	e0cc      	b.n	800b952 <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800b7b8:	6a3b      	ldr	r3, [r7, #32]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	3314      	adds	r3, #20
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a39      	ldr	r2, [pc, #228]	@ (800b8b0 <__AVI_Init+0x268>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d001      	beq.n	800b7d2 <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 800b7ce:	2308      	movs	r3, #8
 800b7d0:	e0bf      	b.n	800b952 <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	68da      	ldr	r2, [r3, #12]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	895a      	ldrh	r2, [r3, #10]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	891a      	ldrh	r2, [r3, #8]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	839a      	strh	r2, [r3, #28]
 800b7ea:	e085      	b.n	800b8f8 <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	4a30      	ldr	r2, [pc, #192]	@ (800b8b4 <__AVI_Init+0x26c>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	f040 8080 	bne.w	800b8f8 <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 800b7f8:	4a2f      	ldr	r2, [pc, #188]	@ (800b8b8 <__AVI_Init+0x270>)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 800b7fe:	4a2f      	ldr	r2, [pc, #188]	@ (800b8bc <__AVI_Init+0x274>)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800b804:	6a3b      	ldr	r3, [r7, #32]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	3314      	adds	r3, #20
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	4413      	add	r3, r2
 800b80e:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a26      	ldr	r2, [pc, #152]	@ (800b8b0 <__AVI_Init+0x268>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d001      	beq.n	800b81e <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 800b81a:	2308      	movs	r3, #8
 800b81c:	e099      	b.n	800b952 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	68da      	ldr	r2, [r3, #12]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	895a      	ldrh	r2, [r3, #10]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	891a      	ldrh	r2, [r3, #8]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 800b836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	3308      	adds	r3, #8
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	4413      	add	r3, r2
 800b840:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800b846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a10      	ldr	r2, [pc, #64]	@ (800b88c <__AVI_Init+0x244>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d001      	beq.n	800b854 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 800b850:	2303      	movs	r3, #3
 800b852:	e07e      	b.n	800b952 <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 800b854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	4a0f      	ldr	r2, [pc, #60]	@ (800b898 <__AVI_Init+0x250>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d001      	beq.n	800b862 <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 800b85e:	2306      	movs	r3, #6
 800b860:	e077      	b.n	800b952 <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	330c      	adds	r3, #12
 800b866:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 800b868:	6a3b      	ldr	r3, [r7, #32]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a0b      	ldr	r2, [pc, #44]	@ (800b89c <__AVI_Init+0x254>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d001      	beq.n	800b876 <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 800b872:	2307      	movs	r3, #7
 800b874:	e06d      	b.n	800b952 <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 800b876:	6a3b      	ldr	r3, [r7, #32]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	4a09      	ldr	r2, [pc, #36]	@ (800b8a0 <__AVI_Init+0x258>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d01f      	beq.n	800b8c0 <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 800b880:	230a      	movs	r3, #10
 800b882:	e066      	b.n	800b952 <__AVI_Init+0x30a>
 800b884:	46464952 	.word	0x46464952
 800b888:	20495641 	.word	0x20495641
 800b88c:	5453494c 	.word	0x5453494c
 800b890:	6c726468 	.word	0x6c726468
 800b894:	68697661 	.word	0x68697661
 800b898:	6c727473 	.word	0x6c727473
 800b89c:	68727473 	.word	0x68727473
 800b8a0:	73646976 	.word	0x73646976
 800b8a4:	47504a4d 	.word	0x47504a4d
 800b8a8:	08010d80 	.word	0x08010d80
 800b8ac:	08010d98 	.word	0x08010d98
 800b8b0:	66727473 	.word	0x66727473
 800b8b4:	73647561 	.word	0x73647561
 800b8b8:	08010d88 	.word	0x08010d88
 800b8bc:	08010d90 	.word	0x08010d90
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	3314      	adds	r3, #20
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a22      	ldr	r2, [pc, #136]	@ (800b95c <__AVI_Init+0x314>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d001      	beq.n	800b8da <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 800b8d6:	2308      	movs	r3, #8
 800b8d8:	e03b      	b.n	800b952 <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	4a20      	ldr	r2, [pc, #128]	@ (800b960 <__AVI_Init+0x318>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d001      	beq.n	800b8e8 <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 800b8e4:	230a      	movs	r3, #10
 800b8e6:	e034      	b.n	800b952 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	68da      	ldr	r2, [r3, #12]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	691a      	ldr	r2, [r3, #16]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 800b8f8:	4a1a      	ldr	r2, [pc, #104]	@ (800b964 <__AVI_Init+0x31c>)
 800b8fa:	6879      	ldr	r1, [r7, #4]
 800b8fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b8fe:	f7ff fe17 	bl	800b530 <__AVI_SearchID>
 800b902:	4603      	mov	r3, r0
 800b904:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 800b906:	8afb      	ldrh	r3, [r7, #22]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d101      	bne.n	800b910 <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 800b90c:	2309      	movs	r3, #9
 800b90e:	e020      	b.n	800b952 <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	695b      	ldr	r3, [r3, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d01a      	beq.n	800b94e <__AVI_Init+0x306>
  {
    tbuf+=offset;
 800b918:	8afb      	ldrh	r3, [r7, #22]
 800b91a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b91c:	4413      	add	r3, r2
 800b91e:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b924:	461a      	mov	r2, r3
 800b926:	6879      	ldr	r1, [r7, #4]
 800b928:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b92a:	f7ff fe01 	bl	800b530 <__AVI_SearchID>
 800b92e:	4603      	mov	r3, r0
 800b930:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 800b932:	8afb      	ldrh	r3, [r7, #22]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d101      	bne.n	800b93c <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 800b938:	230b      	movs	r3, #11
 800b93a:	e00a      	b.n	800b952 <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 800b93c:	8afb      	ldrh	r3, [r7, #22]
 800b93e:	3304      	adds	r3, #4
 800b940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b942:	4413      	add	r3, r2
 800b944:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 800b946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b948:	881a      	ldrh	r2, [r3, #0]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 800b94e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800b952:	4618      	mov	r0, r3
 800b954:	3738      	adds	r7, #56	@ 0x38
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	66727473 	.word	0x66727473
 800b960:	47504a4d 	.word	0x47504a4d
 800b964:	08010da0 	.word	0x08010da0

0800b968 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]
 800b974:	603b      	str	r3, [r7, #0]
  uint32_t readSize= 0;
 800b976:	2300      	movs	r3, #0
 800b978:	617b      	str	r3, [r7, #20]
  
  pavi->pVideoBuffer = pVideoBuffer;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	683a      	ldr	r2, [r7, #0]
 800b984:	639a      	str	r2, [r3, #56]	@ 0x38

  pavi->pAudioBuffer = pAudioBuffer;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	6a3a      	ldr	r2, [r7, #32]
 800b98a:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b990:	641a      	str	r2, [r3, #64]	@ 0x40
  
  f_lseek(file, 0 );
 800b992:	2100      	movs	r1, #0
 800b994:	68b8      	ldr	r0, [r7, #8]
 800b996:	f004 fd5a 	bl	801044e <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b99e:	f107 0314 	add.w	r3, r7, #20
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	68b8      	ldr	r0, [r7, #8]
 800b9a6:	f004 fb6b 	bl	8010080 <f_read>
  if(readSize != VideoBufferSize)
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	683a      	ldr	r2, [r7, #0]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d001      	beq.n	800b9b6 <AVI_ParserInit+0x4e>
  {
    return 1;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e013      	b.n	800b9de <AVI_ParserInit+0x76>
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9ba:	683a      	ldr	r2, [r7, #0]
 800b9bc:	4619      	mov	r1, r3
 800b9be:	68f8      	ldr	r0, [r7, #12]
 800b9c0:	f7ff fe42 	bl	800b648 <__AVI_Init>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d001      	beq.n	800b9ce <AVI_ParserInit+0x66>
  {
    return 1;    
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e007      	b.n	800b9de <AVI_ParserInit+0x76>
  }

  pavi->FileSize= f_size(file);
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	68da      	ldr	r2, [r3, #12]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;  
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3718      	adds	r7, #24
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
	...

0800b9e8 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file)  
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  uint32_t  offset ;
  uint32_t readSize = 0;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	60bb      	str	r3, [r7, #8]
  
  if(pavi->CurrentImage== 0 )
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d124      	bne.n	800ba48 <AVI_GetFrame+0x60>
  {
    
    f_lseek(file, 0 ); /* Go to the file start */
 800b9fe:	2100      	movs	r1, #0
 800ba00:	6838      	ldr	r0, [r7, #0]
 800ba02:	f004 fd24 	bl	801044e <f_lseek>
    /* Read data*/
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize );
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba0e:	f107 0308 	add.w	r3, r7, #8
 800ba12:	6838      	ldr	r0, [r7, #0]
 800ba14:	f004 fb34 	bl	8010080 <f_read>
    
    /* Check for "movi" tag */
    offset = __AVI_SearchID(pavi->pVideoBuffer,pavi->VideoBufferSize,(uint8_t*)"movi");
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba20:	4a2a      	ldr	r2, [pc, #168]	@ (800bacc <AVI_GetFrame+0xe4>)
 800ba22:	4619      	mov	r1, r3
 800ba24:	f7ff fd84 	bl	800b530 <__AVI_SearchID>
 800ba28:	60f8      	str	r0, [r7, #12]
    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	3304      	adds	r3, #4
 800ba32:	4413      	add	r3, r2
 800ba34:	4619      	mov	r1, r3
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7ff fdbc 	bl	800b5b4 <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	330c      	adds	r3, #12
 800ba40:	4619      	mov	r1, r3
 800ba42:	6838      	ldr	r0, [r7, #0]
 800ba44:	f004 fd03 	bl	801044e <f_lseek>
    
  }

  /* Get the current frame size */
  pavi->FrameSize = pavi->aviInfo.StreamSize; 
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a1a      	ldr	r2, [r3, #32]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	631a      	str	r2, [r3, #48]	@ 0x30
  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	8bdb      	ldrh	r3, [r3, #30]
 800ba54:	f246 4263 	movw	r2, #25699	@ 0x6463
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d115      	bne.n	800ba88 <AVI_GetFrame+0xa0>
  {
    /* the Frame is a Video Frame */
       
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba64:	f103 0208 	add.w	r2, r3, #8
 800ba68:	f107 0308 	add.w	r3, r7, #8
 800ba6c:	6838      	ldr	r0, [r7, #0]
 800ba6e:	f004 fb07 	bl	8010080 <f_read>
    
    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f7ff fd98 	bl	800b5b4 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_VIDEO_FRAME;
 800ba84:	2301      	movs	r3, #1
 800ba86:	e01c      	b.n	800bac2 <AVI_GetFrame+0xda>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	8bdb      	ldrh	r3, [r3, #30]
 800ba8c:	f247 7262 	movw	r2, #30562	@ 0x7762
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d115      	bne.n	800bac0 <AVI_GetFrame+0xd8>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba9c:	f103 0208 	add.w	r2, r3, #8
 800baa0:	f107 0308 	add.w	r3, r7, #8
 800baa4:	6838      	ldr	r0, [r7, #0]
 800baa6:	f004 faeb 	bl	8010080 <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	4413      	add	r3, r2
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7ff fd7c 	bl	800b5b4 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 800babc:	2302      	movs	r3, #2
 800babe:	e000      	b.n	800bac2 <AVI_GetFrame+0xda>
    
  }
  
  return 0;
 800bac0:	2300      	movs	r3, #0
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	08010da0 	.word	0x08010da0

0800bad0 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	4603      	mov	r3, r0
 800bad8:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800bada:	79fb      	ldrb	r3, [r7, #7]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d105      	bne.n	800baec <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 800bae0:	2200      	movs	r2, #0
 800bae2:	2120      	movs	r1, #32
 800bae4:	4806      	ldr	r0, [pc, #24]	@ (800bb00 <GC9A01_set_reset+0x30>)
 800bae6:	f7f6 f821 	bl	8001b2c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800baea:	e004      	b.n	800baf6 <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 800baec:	2201      	movs	r2, #1
 800baee:	2120      	movs	r1, #32
 800baf0:	4803      	ldr	r0, [pc, #12]	@ (800bb00 <GC9A01_set_reset+0x30>)
 800baf2:	f7f6 f81b 	bl	8001b2c <HAL_GPIO_WritePin>
}
 800baf6:	bf00      	nop
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	58022400 	.word	0x58022400

0800bb04 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800bb0e:	79fb      	ldrb	r3, [r7, #7]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d105      	bne.n	800bb20 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 800bb14:	2200      	movs	r2, #0
 800bb16:	2140      	movs	r1, #64	@ 0x40
 800bb18:	4806      	ldr	r0, [pc, #24]	@ (800bb34 <GC9A01_set_data_command+0x30>)
 800bb1a:	f7f6 f807 	bl	8001b2c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 800bb1e:	e004      	b.n	800bb2a <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800bb20:	2201      	movs	r2, #1
 800bb22:	2140      	movs	r1, #64	@ 0x40
 800bb24:	4803      	ldr	r0, [pc, #12]	@ (800bb34 <GC9A01_set_data_command+0x30>)
 800bb26:	f7f6 f801 	bl	8001b2c <HAL_GPIO_WritePin>
}
 800bb2a:	bf00      	nop
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	58022400 	.word	0x58022400

0800bb38 <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	4603      	mov	r3, r0
 800bb40:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800bb42:	79fb      	ldrb	r3, [r7, #7]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d105      	bne.n	800bb54 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2102      	movs	r1, #2
 800bb4c:	4806      	ldr	r0, [pc, #24]	@ (800bb68 <GC9A01_set_chip_select+0x30>)
 800bb4e:	f7f5 ffed 	bl	8001b2c <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 800bb52:	e004      	b.n	800bb5e <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800bb54:	2201      	movs	r2, #1
 800bb56:	2102      	movs	r1, #2
 800bb58:	4803      	ldr	r0, [pc, #12]	@ (800bb68 <GC9A01_set_chip_select+0x30>)
 800bb5a:	f7f5 ffe7 	bl	8001b2c <HAL_GPIO_WritePin>
}
 800bb5e:	bf00      	nop
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	58022800 	.word	0x58022800

0800bb6c <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	4603      	mov	r3, r0
 800bb74:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 800bb76:	2000      	movs	r0, #0
 800bb78:	f7ff ffc4 	bl	800bb04 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	f7ff ffdb 	bl	800bb38 <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 800bb82:	1dfb      	adds	r3, r7, #7
 800bb84:	2101      	movs	r1, #1
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 faae 	bl	800c0e8 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 800bb8c:	2001      	movs	r0, #1
 800bb8e:	f7ff ffd3 	bl	800bb38 <GC9A01_set_chip_select>
}
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b082      	sub	sp, #8
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 800bba4:	2001      	movs	r0, #1
 800bba6:	f7ff ffad 	bl	800bb04 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 800bbaa:	2000      	movs	r0, #0
 800bbac:	f7ff ffc4 	bl	800bb38 <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 fa96 	bl	800c0e8 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 800bbbc:	2001      	movs	r0, #1
 800bbbe:	f7ff ffbb 	bl	800bb38 <GC9A01_set_chip_select>
}
 800bbc2:	bf00      	nop
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b082      	sub	sp, #8
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 800bbd4:	1dfb      	adds	r3, r7, #7
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7ff ffde 	bl	800bb9a <GC9A01_write_data>
}
 800bbde:	bf00      	nop
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <GC9A01_init>:
void GC9A01_write_continue(uint8_t *data, size_t len) {
    GC9A01_write_command(MEM_WR_CONT);
    GC9A01_write_data(data, len);
}

void GC9A01_init(void) {
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800bbea:	2001      	movs	r0, #1
 800bbec:	f7ff ffa4 	bl	800bb38 <GC9A01_set_chip_select>
    HAL_Delay(5);
 800bbf0:	2005      	movs	r0, #5
 800bbf2:	f7f5 f93f 	bl	8000e74 <HAL_Delay>
    GC9A01_set_reset(OFF);
 800bbf6:	2000      	movs	r0, #0
 800bbf8:	f7ff ff6a 	bl	800bad0 <GC9A01_set_reset>
    HAL_Delay(10);
 800bbfc:	200a      	movs	r0, #10
 800bbfe:	f7f5 f939 	bl	8000e74 <HAL_Delay>
    GC9A01_set_reset(ON);
 800bc02:	2001      	movs	r0, #1
 800bc04:	f7ff ff64 	bl	800bad0 <GC9A01_set_reset>
    HAL_Delay(120);
 800bc08:	2078      	movs	r0, #120	@ 0x78
 800bc0a:	f7f5 f933 	bl	8000e74 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 800bc0e:	20ef      	movs	r0, #239	@ 0xef
 800bc10:	f7ff ffac 	bl	800bb6c <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 800bc14:	20eb      	movs	r0, #235	@ 0xeb
 800bc16:	f7ff ffa9 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800bc1a:	2014      	movs	r0, #20
 800bc1c:	f7ff ffd5 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 800bc20:	20fe      	movs	r0, #254	@ 0xfe
 800bc22:	f7ff ffa3 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800bc26:	20ef      	movs	r0, #239	@ 0xef
 800bc28:	f7ff ffa0 	bl	800bb6c <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 800bc2c:	20eb      	movs	r0, #235	@ 0xeb
 800bc2e:	f7ff ff9d 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800bc32:	2014      	movs	r0, #20
 800bc34:	f7ff ffc9 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 800bc38:	2084      	movs	r0, #132	@ 0x84
 800bc3a:	f7ff ff97 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 800bc3e:	2040      	movs	r0, #64	@ 0x40
 800bc40:	f7ff ffc3 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 800bc44:	2085      	movs	r0, #133	@ 0x85
 800bc46:	f7ff ff91 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bc4a:	20ff      	movs	r0, #255	@ 0xff
 800bc4c:	f7ff ffbd 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 800bc50:	2086      	movs	r0, #134	@ 0x86
 800bc52:	f7ff ff8b 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bc56:	20ff      	movs	r0, #255	@ 0xff
 800bc58:	f7ff ffb7 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 800bc5c:	2087      	movs	r0, #135	@ 0x87
 800bc5e:	f7ff ff85 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bc62:	20ff      	movs	r0, #255	@ 0xff
 800bc64:	f7ff ffb1 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 800bc68:	2088      	movs	r0, #136	@ 0x88
 800bc6a:	f7ff ff7f 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 800bc6e:	200a      	movs	r0, #10
 800bc70:	f7ff ffab 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 800bc74:	2089      	movs	r0, #137	@ 0x89
 800bc76:	f7ff ff79 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800bc7a:	2021      	movs	r0, #33	@ 0x21
 800bc7c:	f7ff ffa5 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 800bc80:	208a      	movs	r0, #138	@ 0x8a
 800bc82:	f7ff ff73 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bc86:	2000      	movs	r0, #0
 800bc88:	f7ff ff9f 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 800bc8c:	208b      	movs	r0, #139	@ 0x8b
 800bc8e:	f7ff ff6d 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 800bc92:	2080      	movs	r0, #128	@ 0x80
 800bc94:	f7ff ff99 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 800bc98:	208c      	movs	r0, #140	@ 0x8c
 800bc9a:	f7ff ff67 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800bc9e:	2001      	movs	r0, #1
 800bca0:	f7ff ff93 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 800bca4:	208d      	movs	r0, #141	@ 0x8d
 800bca6:	f7ff ff61 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800bcaa:	2001      	movs	r0, #1
 800bcac:	f7ff ff8d 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 800bcb0:	208e      	movs	r0, #142	@ 0x8e
 800bcb2:	f7ff ff5b 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bcb6:	20ff      	movs	r0, #255	@ 0xff
 800bcb8:	f7ff ff87 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 800bcbc:	208f      	movs	r0, #143	@ 0x8f
 800bcbe:	f7ff ff55 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bcc2:	20ff      	movs	r0, #255	@ 0xff
 800bcc4:	f7ff ff81 	bl	800bbca <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800bcc8:	20b6      	movs	r0, #182	@ 0xb6
 800bcca:	f7ff ff4f 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bcce:	2000      	movs	r0, #0
 800bcd0:	f7ff ff7b 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	f7ff ff78 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800bcda:	2036      	movs	r0, #54	@ 0x36
 800bcdc:	f7ff ff46 	bl	800bb6c <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 800bce0:	2048      	movs	r0, #72	@ 0x48
 800bce2:	f7ff ff72 	bl	800bbca <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800bce6:	203a      	movs	r0, #58	@ 0x3a
 800bce8:	f7ff ff40 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 800bcec:	2005      	movs	r0, #5
 800bcee:	f7ff ff6c 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 800bcf2:	2090      	movs	r0, #144	@ 0x90
 800bcf4:	f7ff ff3a 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800bcf8:	2008      	movs	r0, #8
 800bcfa:	f7ff ff66 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bcfe:	2008      	movs	r0, #8
 800bd00:	f7ff ff63 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bd04:	2008      	movs	r0, #8
 800bd06:	f7ff ff60 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bd0a:	2008      	movs	r0, #8
 800bd0c:	f7ff ff5d 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 800bd10:	20bd      	movs	r0, #189	@ 0xbd
 800bd12:	f7ff ff2b 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800bd16:	2006      	movs	r0, #6
 800bd18:	f7ff ff57 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 800bd1c:	20bc      	movs	r0, #188	@ 0xbc
 800bd1e:	f7ff ff25 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bd22:	2000      	movs	r0, #0
 800bd24:	f7ff ff51 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800bd28:	20ff      	movs	r0, #255	@ 0xff
 800bd2a:	f7ff ff1f 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 800bd2e:	2060      	movs	r0, #96	@ 0x60
 800bd30:	f7ff ff4b 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800bd34:	2001      	movs	r0, #1
 800bd36:	f7ff ff48 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800bd3a:	2004      	movs	r0, #4
 800bd3c:	f7ff ff45 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 800bd40:	20c3      	movs	r0, #195	@ 0xc3
 800bd42:	f7ff ff13 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 800bd46:	2013      	movs	r0, #19
 800bd48:	f7ff ff3f 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 800bd4c:	20c4      	movs	r0, #196	@ 0xc4
 800bd4e:	f7ff ff0d 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 800bd52:	2013      	movs	r0, #19
 800bd54:	f7ff ff39 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 800bd58:	20c9      	movs	r0, #201	@ 0xc9
 800bd5a:	f7ff ff07 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 800bd5e:	2022      	movs	r0, #34	@ 0x22
 800bd60:	f7ff ff33 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 800bd64:	20be      	movs	r0, #190	@ 0xbe
 800bd66:	f7ff ff01 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 800bd6a:	2011      	movs	r0, #17
 800bd6c:	f7ff ff2d 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 800bd70:	20e1      	movs	r0, #225	@ 0xe1
 800bd72:	f7ff fefb 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800bd76:	2010      	movs	r0, #16
 800bd78:	f7ff ff27 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 800bd7c:	200e      	movs	r0, #14
 800bd7e:	f7ff ff24 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 800bd82:	20df      	movs	r0, #223	@ 0xdf
 800bd84:	f7ff fef2 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800bd88:	2021      	movs	r0, #33	@ 0x21
 800bd8a:	f7ff ff1e 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 800bd8e:	200c      	movs	r0, #12
 800bd90:	f7ff ff1b 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 800bd94:	2002      	movs	r0, #2
 800bd96:	f7ff ff18 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 800bd9a:	20f0      	movs	r0, #240	@ 0xf0
 800bd9c:	f7ff fee6 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 800bda0:	2045      	movs	r0, #69	@ 0x45
 800bda2:	f7ff ff12 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800bda6:	2009      	movs	r0, #9
 800bda8:	f7ff ff0f 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bdac:	2008      	movs	r0, #8
 800bdae:	f7ff ff0c 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bdb2:	2008      	movs	r0, #8
 800bdb4:	f7ff ff09 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800bdb8:	2026      	movs	r0, #38	@ 0x26
 800bdba:	f7ff ff06 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 800bdbe:	202a      	movs	r0, #42	@ 0x2a
 800bdc0:	f7ff ff03 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 800bdc4:	20f1      	movs	r0, #241	@ 0xf1
 800bdc6:	f7ff fed1 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800bdca:	2043      	movs	r0, #67	@ 0x43
 800bdcc:	f7ff fefd 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bdd0:	2070      	movs	r0, #112	@ 0x70
 800bdd2:	f7ff fefa 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800bdd6:	2072      	movs	r0, #114	@ 0x72
 800bdd8:	f7ff fef7 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 800bddc:	2036      	movs	r0, #54	@ 0x36
 800bdde:	f7ff fef4 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800bde2:	2037      	movs	r0, #55	@ 0x37
 800bde4:	f7ff fef1 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800bde8:	206f      	movs	r0, #111	@ 0x6f
 800bdea:	f7ff feee 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 800bdee:	20f2      	movs	r0, #242	@ 0xf2
 800bdf0:	f7ff febc 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 800bdf4:	2045      	movs	r0, #69	@ 0x45
 800bdf6:	f7ff fee8 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800bdfa:	2009      	movs	r0, #9
 800bdfc:	f7ff fee5 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800be00:	2008      	movs	r0, #8
 800be02:	f7ff fee2 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800be06:	2008      	movs	r0, #8
 800be08:	f7ff fedf 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800be0c:	2026      	movs	r0, #38	@ 0x26
 800be0e:	f7ff fedc 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 800be12:	202a      	movs	r0, #42	@ 0x2a
 800be14:	f7ff fed9 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800be18:	20f3      	movs	r0, #243	@ 0xf3
 800be1a:	f7ff fea7 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800be1e:	2043      	movs	r0, #67	@ 0x43
 800be20:	f7ff fed3 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800be24:	2070      	movs	r0, #112	@ 0x70
 800be26:	f7ff fed0 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800be2a:	2072      	movs	r0, #114	@ 0x72
 800be2c:	f7ff fecd 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 800be30:	2036      	movs	r0, #54	@ 0x36
 800be32:	f7ff feca 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800be36:	2037      	movs	r0, #55	@ 0x37
 800be38:	f7ff fec7 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800be3c:	206f      	movs	r0, #111	@ 0x6f
 800be3e:	f7ff fec4 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 800be42:	20ed      	movs	r0, #237	@ 0xed
 800be44:	f7ff fe92 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 800be48:	201b      	movs	r0, #27
 800be4a:	f7ff febe 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 800be4e:	200b      	movs	r0, #11
 800be50:	f7ff febb 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 800be54:	20ae      	movs	r0, #174	@ 0xae
 800be56:	f7ff fe89 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 800be5a:	2077      	movs	r0, #119	@ 0x77
 800be5c:	f7ff feb5 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 800be60:	20cd      	movs	r0, #205	@ 0xcd
 800be62:	f7ff fe83 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 800be66:	2063      	movs	r0, #99	@ 0x63
 800be68:	f7ff feaf 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 800be6c:	2070      	movs	r0, #112	@ 0x70
 800be6e:	f7ff fe7d 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 800be72:	2007      	movs	r0, #7
 800be74:	f7ff fea9 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800be78:	2007      	movs	r0, #7
 800be7a:	f7ff fea6 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800be7e:	2004      	movs	r0, #4
 800be80:	f7ff fea3 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 800be84:	200e      	movs	r0, #14
 800be86:	f7ff fea0 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800be8a:	200f      	movs	r0, #15
 800be8c:	f7ff fe9d 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800be90:	2009      	movs	r0, #9
 800be92:	f7ff fe9a 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800be96:	2007      	movs	r0, #7
 800be98:	f7ff fe97 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800be9c:	2008      	movs	r0, #8
 800be9e:	f7ff fe94 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 800bea2:	2003      	movs	r0, #3
 800bea4:	f7ff fe91 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 800bea8:	20e8      	movs	r0, #232	@ 0xe8
 800beaa:	f7ff fe5f 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 800beae:	2034      	movs	r0, #52	@ 0x34
 800beb0:	f7ff fe8b 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 800beb4:	2062      	movs	r0, #98	@ 0x62
 800beb6:	f7ff fe59 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800beba:	2018      	movs	r0, #24
 800bebc:	f7ff fe85 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 800bec0:	200d      	movs	r0, #13
 800bec2:	f7ff fe82 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800bec6:	2071      	movs	r0, #113	@ 0x71
 800bec8:	f7ff fe7f 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 800becc:	20ed      	movs	r0, #237	@ 0xed
 800bece:	f7ff fe7c 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bed2:	2070      	movs	r0, #112	@ 0x70
 800bed4:	f7ff fe79 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bed8:	2070      	movs	r0, #112	@ 0x70
 800beda:	f7ff fe76 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 800bede:	2018      	movs	r0, #24
 800bee0:	f7ff fe73 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800bee4:	200f      	movs	r0, #15
 800bee6:	f7ff fe70 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800beea:	2071      	movs	r0, #113	@ 0x71
 800beec:	f7ff fe6d 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 800bef0:	20ef      	movs	r0, #239	@ 0xef
 800bef2:	f7ff fe6a 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bef6:	2070      	movs	r0, #112	@ 0x70
 800bef8:	f7ff fe67 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800befc:	2070      	movs	r0, #112	@ 0x70
 800befe:	f7ff fe64 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 800bf02:	2063      	movs	r0, #99	@ 0x63
 800bf04:	f7ff fe32 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800bf08:	2018      	movs	r0, #24
 800bf0a:	f7ff fe5e 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 800bf0e:	2011      	movs	r0, #17
 800bf10:	f7ff fe5b 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800bf14:	2071      	movs	r0, #113	@ 0x71
 800bf16:	f7ff fe58 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800bf1a:	20f1      	movs	r0, #241	@ 0xf1
 800bf1c:	f7ff fe55 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bf20:	2070      	movs	r0, #112	@ 0x70
 800bf22:	f7ff fe52 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bf26:	2070      	movs	r0, #112	@ 0x70
 800bf28:	f7ff fe4f 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 800bf2c:	2018      	movs	r0, #24
 800bf2e:	f7ff fe4c 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 800bf32:	2013      	movs	r0, #19
 800bf34:	f7ff fe49 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800bf38:	2071      	movs	r0, #113	@ 0x71
 800bf3a:	f7ff fe46 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 800bf3e:	20f3      	movs	r0, #243	@ 0xf3
 800bf40:	f7ff fe43 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bf44:	2070      	movs	r0, #112	@ 0x70
 800bf46:	f7ff fe40 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bf4a:	2070      	movs	r0, #112	@ 0x70
 800bf4c:	f7ff fe3d 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 800bf50:	2064      	movs	r0, #100	@ 0x64
 800bf52:	f7ff fe0b 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 800bf56:	2028      	movs	r0, #40	@ 0x28
 800bf58:	f7ff fe37 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 800bf5c:	2029      	movs	r0, #41	@ 0x29
 800bf5e:	f7ff fe34 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800bf62:	20f1      	movs	r0, #241	@ 0xf1
 800bf64:	f7ff fe31 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800bf68:	2001      	movs	r0, #1
 800bf6a:	f7ff fe2e 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800bf6e:	20f1      	movs	r0, #241	@ 0xf1
 800bf70:	f7ff fe2b 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bf74:	2000      	movs	r0, #0
 800bf76:	f7ff fe28 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800bf7a:	2007      	movs	r0, #7
 800bf7c:	f7ff fe25 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 800bf80:	2066      	movs	r0, #102	@ 0x66
 800bf82:	f7ff fdf3 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 800bf86:	203c      	movs	r0, #60	@ 0x3c
 800bf88:	f7ff fe1f 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	f7ff fe1c 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 800bf92:	20cd      	movs	r0, #205	@ 0xcd
 800bf94:	f7ff fe19 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800bf98:	2067      	movs	r0, #103	@ 0x67
 800bf9a:	f7ff fe16 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 800bf9e:	2045      	movs	r0, #69	@ 0x45
 800bfa0:	f7ff fe13 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 800bfa4:	2045      	movs	r0, #69	@ 0x45
 800bfa6:	f7ff fe10 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800bfaa:	2010      	movs	r0, #16
 800bfac:	f7ff fe0d 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfb0:	2000      	movs	r0, #0
 800bfb2:	f7ff fe0a 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	f7ff fe07 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	f7ff fe04 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 800bfc2:	2067      	movs	r0, #103	@ 0x67
 800bfc4:	f7ff fdd2 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bfc8:	2000      	movs	r0, #0
 800bfca:	f7ff fdfe 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 800bfce:	203c      	movs	r0, #60	@ 0x3c
 800bfd0:	f7ff fdfb 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	f7ff fdf8 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfda:	2000      	movs	r0, #0
 800bfdc:	f7ff fdf5 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	f7ff fdf2 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800bfe6:	2001      	movs	r0, #1
 800bfe8:	f7ff fdef 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 800bfec:	2054      	movs	r0, #84	@ 0x54
 800bfee:	f7ff fdec 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800bff2:	2010      	movs	r0, #16
 800bff4:	f7ff fde9 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 800bff8:	2032      	movs	r0, #50	@ 0x32
 800bffa:	f7ff fde6 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 800bffe:	2098      	movs	r0, #152	@ 0x98
 800c000:	f7ff fde3 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 800c004:	2074      	movs	r0, #116	@ 0x74
 800c006:	f7ff fdb1 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800c00a:	2010      	movs	r0, #16
 800c00c:	f7ff fddd 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 800c010:	2085      	movs	r0, #133	@ 0x85
 800c012:	f7ff fdda 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800c016:	2080      	movs	r0, #128	@ 0x80
 800c018:	f7ff fdd7 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c01c:	2000      	movs	r0, #0
 800c01e:	f7ff fdd4 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c022:	2000      	movs	r0, #0
 800c024:	f7ff fdd1 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800c028:	204e      	movs	r0, #78	@ 0x4e
 800c02a:	f7ff fdce 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c02e:	2000      	movs	r0, #0
 800c030:	f7ff fdcb 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 800c034:	2098      	movs	r0, #152	@ 0x98
 800c036:	f7ff fd99 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 800c03a:	203e      	movs	r0, #62	@ 0x3e
 800c03c:	f7ff fdc5 	bl	800bbca <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800c040:	2007      	movs	r0, #7
 800c042:	f7ff fdc2 	bl	800bbca <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 800c046:	2035      	movs	r0, #53	@ 0x35
 800c048:	f7ff fd90 	bl	800bb6c <GC9A01_write_command>
    GC9A01_write_command(0x21);
 800c04c:	2021      	movs	r0, #33	@ 0x21
 800c04e:	f7ff fd8d 	bl	800bb6c <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 800c052:	2011      	movs	r0, #17
 800c054:	f7ff fd8a 	bl	800bb6c <GC9A01_write_command>
    HAL_Delay(120);
 800c058:	2078      	movs	r0, #120	@ 0x78
 800c05a:	f7f4 ff0b 	bl	8000e74 <HAL_Delay>
    GC9A01_write_command(0x29);
 800c05e:	2029      	movs	r0, #41	@ 0x29
 800c060:	f7ff fd84 	bl	800bb6c <GC9A01_write_command>
    HAL_Delay(20);
 800c064:	2014      	movs	r0, #20
 800c066:	f7f4 ff05 	bl	8000e74 <HAL_Delay>
    
}
 800c06a:	bf00      	nop
 800c06c:	bd80      	pop	{r7, pc}

0800c06e <GC9A01_set_frame>:

void GC9A01_set_frame(struct GC9A01_frame frame) {
 800c06e:	b580      	push	{r7, lr}
 800c070:	b084      	sub	sp, #16
 800c072:	af00      	add	r7, sp, #0
 800c074:	463b      	mov	r3, r7
 800c076:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t data[4];
    
    GC9A01_write_command(COL_ADDR_SET);
 800c07a:	202a      	movs	r0, #42	@ 0x2a
 800c07c:	f7ff fd76 	bl	800bb6c <GC9A01_write_command>
    data[0] = (frame.start.X >> 8) & 0xFF;
 800c080:	883b      	ldrh	r3, [r7, #0]
 800c082:	0a1b      	lsrs	r3, r3, #8
 800c084:	b29b      	uxth	r3, r3
 800c086:	b2db      	uxtb	r3, r3
 800c088:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.X & 0xFF;
 800c08a:	883b      	ldrh	r3, [r7, #0]
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.X >> 8) & 0xFF;
 800c090:	88bb      	ldrh	r3, [r7, #4]
 800c092:	0a1b      	lsrs	r3, r3, #8
 800c094:	b29b      	uxth	r3, r3
 800c096:	b2db      	uxtb	r3, r3
 800c098:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.X & 0xFF;
 800c09a:	88bb      	ldrh	r3, [r7, #4]
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 800c0a0:	f107 030c 	add.w	r3, r7, #12
 800c0a4:	2104      	movs	r1, #4
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7ff fd77 	bl	800bb9a <GC9A01_write_data>

    GC9A01_write_command(ROW_ADDR_SET);
 800c0ac:	202b      	movs	r0, #43	@ 0x2b
 800c0ae:	f7ff fd5d 	bl	800bb6c <GC9A01_write_command>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 800c0b2:	887b      	ldrh	r3, [r7, #2]
 800c0b4:	0a1b      	lsrs	r3, r3, #8
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.Y & 0xFF;
 800c0bc:	887b      	ldrh	r3, [r7, #2]
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.Y >> 8) & 0xFF;
 800c0c2:	88fb      	ldrh	r3, [r7, #6]
 800c0c4:	0a1b      	lsrs	r3, r3, #8
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.Y & 0xFF;
 800c0cc:	88fb      	ldrh	r3, [r7, #6]
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 800c0d2:	f107 030c 	add.w	r3, r7, #12
 800c0d6:	2104      	movs	r1, #4
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7ff fd5e 	bl	800bb9a <GC9A01_write_data>
    
}
 800c0de:	bf00      	nop
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
	...

0800c0e8 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 800c0f4:	887a      	ldrh	r2, [r7, #2]
 800c0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0fa:	6879      	ldr	r1, [r7, #4]
 800c0fc:	4806      	ldr	r0, [pc, #24]	@ (800c118 <GC9A01_spi_tx+0x30>)
 800c0fe:	f7fd fbd9 	bl	80098b4 <HAL_SPI_Transmit>
 800c102:	4603      	mov	r3, r0
 800c104:	461a      	mov	r2, r3
 800c106:	4b05      	ldr	r3, [pc, #20]	@ (800c11c <GC9A01_spi_tx+0x34>)
 800c108:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 800c10a:	4b04      	ldr	r3, [pc, #16]	@ (800c11c <GC9A01_spi_tx+0x34>)
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
		return;

}
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20000304 	.word	0x20000304
 800c11c:	200001cc 	.word	0x200001cc

0800c120 <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b086      	sub	sp, #24
 800c124:	af02      	add	r7, sp, #8
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
 800c12c:	603b      	str	r3, [r7, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 800c12e:	4a11      	ldr	r2, [pc, #68]	@ (800c174 <JPEG_Decode_DMA+0x54>)
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 800c134:	4a10      	ldr	r2, [pc, #64]	@ (800c178 <JPEG_Decode_DMA+0x58>)
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	6013      	str	r3, [r2, #0]
  Input_frameIndex=0;
 800c13a:	4b10      	ldr	r3, [pc, #64]	@ (800c17c <JPEG_Decode_DMA+0x5c>)
 800c13c:	2200      	movs	r2, #0
 800c13e:	601a      	str	r2, [r3, #0]
  Input_frameSize = FrameSize;
 800c140:	4a0f      	ldr	r2, [pc, #60]	@ (800c180 <JPEG_Decode_DMA+0x60>)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6013      	str	r3, [r2, #0]
  
  Jpeg_HWDecodingEnd = 0;
 800c146:	4b0f      	ldr	r3, [pc, #60]	@ (800c184 <JPEG_Decode_DMA+0x64>)
 800c148:	2200      	movs	r2, #0
 800c14a:	601a      	str	r2, [r3, #0]
  
  /* Start JPEG decoding with DMA method */
  HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT);
 800c14c:	4b09      	ldr	r3, [pc, #36]	@ (800c174 <JPEG_Decode_DMA+0x54>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4619      	mov	r1, r3
 800c152:	4b09      	ldr	r3, [pc, #36]	@ (800c178 <JPEG_Decode_DMA+0x58>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	461a      	mov	r2, r3
 800c158:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c15c:	9300      	str	r3, [sp, #0]
 800c15e:	4613      	mov	r3, r2
 800c160:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f7f5 fe12 	bl	8001d8e <HAL_JPEG_Decode_DMA>
  
  
  return 0;
 800c16a:	2300      	movs	r3, #0
  
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	200001d8 	.word	0x200001d8
 800c178:	200001d4 	.word	0x200001d4
 800c17c:	200001e0 	.word	0x200001e0
 800c180:	200001dc 	.word	0x200001dc
 800c184:	200001d0 	.word	0x200001d0

0800c188 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
}
 800c192:	bf00      	nop
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
	...

0800c1a0 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 800c1aa:	4b19      	ldr	r3, [pc, #100]	@ (800c210 <HAL_JPEG_GetDataCallback+0x70>)
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	4413      	add	r3, r2
 800c1b2:	4a17      	ldr	r2, [pc, #92]	@ (800c210 <HAL_JPEG_GetDataCallback+0x70>)
 800c1b4:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 800c1b6:	4b16      	ldr	r3, [pc, #88]	@ (800c210 <HAL_JPEG_GetDataCallback+0x70>)
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	4b16      	ldr	r3, [pc, #88]	@ (800c214 <HAL_JPEG_GetDataCallback+0x74>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d218      	bcs.n	800c1f4 <HAL_JPEG_GetDataCallback+0x54>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 800c1c2:	4b15      	ldr	r3, [pc, #84]	@ (800c218 <HAL_JPEG_GetDataCallback+0x78>)
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	4a13      	ldr	r2, [pc, #76]	@ (800c218 <HAL_JPEG_GetDataCallback+0x78>)
 800c1cc:	6013      	str	r3, [r2, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 800c1ce:	4b11      	ldr	r3, [pc, #68]	@ (800c214 <HAL_JPEG_GetDataCallback+0x74>)
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	4b0f      	ldr	r3, [pc, #60]	@ (800c210 <HAL_JPEG_GetDataCallback+0x70>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1dc:	d303      	bcc.n	800c1e6 <HAL_JPEG_GetDataCallback+0x46>
    {
      inDataLength = CHUNK_SIZE_IN;
 800c1de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	e008      	b.n	800c1f8 <HAL_JPEG_GetDataCallback+0x58>
    }
    else
    {
      inDataLength = Input_frameSize - Input_frameIndex;
 800c1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c214 <HAL_JPEG_GetDataCallback+0x74>)
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	4b09      	ldr	r3, [pc, #36]	@ (800c210 <HAL_JPEG_GetDataCallback+0x70>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	60fb      	str	r3, [r7, #12]
 800c1f2:	e001      	b.n	800c1f8 <HAL_JPEG_GetDataCallback+0x58>
    }    
  }
  else
  {
    inDataLength = 0; 
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	60fb      	str	r3, [r7, #12]
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 800c1f8:	4b07      	ldr	r3, [pc, #28]	@ (800c218 <HAL_JPEG_GetDataCallback+0x78>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	68fa      	ldr	r2, [r7, #12]
 800c1fe:	4619      	mov	r1, r3
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7f5 fe7f 	bl	8001f04 <HAL_JPEG_ConfigInputBuffer>
  
}
 800c206:	bf00      	nop
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	200001e0 	.word	0x200001e0
 800c214:	200001dc 	.word	0x200001dc
 800c218:	200001d8 	.word	0x200001d8

0800c21c <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 800c228:	4b08      	ldr	r3, [pc, #32]	@ (800c24c <HAL_JPEG_DataReadyCallback+0x30>)
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4413      	add	r3, r2
 800c230:	4a06      	ldr	r2, [pc, #24]	@ (800c24c <HAL_JPEG_DataReadyCallback+0x30>)
 800c232:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 800c234:	4b05      	ldr	r3, [pc, #20]	@ (800c24c <HAL_JPEG_DataReadyCallback+0x30>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c23c:	4619      	mov	r1, r3
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f7f5 fe72 	bl	8001f28 <HAL_JPEG_ConfigOutputBuffer>
}
 800c244:	bf00      	nop
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	200001d4 	.word	0x200001d4

0800c250 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  Error_Handler();
 800c258:	f000 f83a 	bl	800c2d0 <Error_Handler>
}
 800c25c:	bf00      	nop
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1; 
 800c26c:	4b04      	ldr	r3, [pc, #16]	@ (800c280 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 800c26e:	2201      	movs	r2, #1
 800c270:	601a      	str	r2, [r3, #0]
}
 800c272:	bf00      	nop
 800c274:	370c      	adds	r7, #12
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	200001d0 	.word	0x200001d0

0800c284 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	af00      	add	r7, sp, #0

  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
 800c288:	f000 f8bc 	bl	800c404 <MPU_Config>
   
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 800c28c:	f000 f8fc 	bl	800c488 <CPU_CACHE_Enable>
  
  HAL_Init();
 800c290:	f7f4 fd5e 	bl	8000d50 <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 800c294:	f000 f820 	bl	800c2d8 <SystemClock_Config>
  
  MX_GPIO_Init();
 800c298:	f000 f9b8 	bl	800c60c <MX_GPIO_Init>
  MX_SPI5_Init();
 800c29c:	f000 f962 	bl	800c564 <MX_SPI5_Init>

  MX_TIM3_Init();
 800c2a0:	f000 fa6c 	bl	800c77c <MX_TIM3_Init>
  GC9A01_init();
 800c2a4:	f7ff fc9f 	bl	800bbe6 <GC9A01_init>
 
 /*Initialize The SDRAM */  
  BSP_SDRAM_Init(0);
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	f7f4 fb21 	bl	80008f0 <BSP_SDRAM_Init>
  //BSP_LCD_GetXSize(0 ,&LCD_X_Size);
  //BSP_LCD_GetYSize(0 ,&LCD_Y_Size);
  
  /*##-2- Initialize the HW JPEG Codec  ######################################*/
  /* Init the HAL JPEG driver */
  JPEG_Handle.Instance = JPEG;
 800c2ae:	4b06      	ldr	r3, [pc, #24]	@ (800c2c8 <main+0x44>)
 800c2b0:	4a06      	ldr	r2, [pc, #24]	@ (800c2cc <main+0x48>)
 800c2b2:	601a      	str	r2, [r3, #0]
  HAL_JPEG_Init(&JPEG_Handle);    
 800c2b4:	4804      	ldr	r0, [pc, #16]	@ (800c2c8 <main+0x44>)
 800c2b6:	f7f5 fc53 	bl	8001b60 <HAL_JPEG_Init>

  smart_watch_init();
 800c2ba:	f000 fb87 	bl	800c9cc <smart_watch_init>

  smart_watch_process();
 800c2be:	f000 fc2d 	bl	800cb1c <smart_watch_process>

  /* Infinite loop */
  while (1);
 800c2c2:	bf00      	nop
 800c2c4:	e7fd      	b.n	800c2c2 <main+0x3e>
 800c2c6:	bf00      	nop
 800c2c8:	200001e4 	.word	0x200001e4
 800c2cc:	52003000 	.word	0x52003000

0800c2d0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	af00      	add	r7, sp, #0

  /* Turn LED3 on */
  while(1);
 800c2d4:	bf00      	nop
 800c2d6:	e7fd      	b.n	800c2d4 <Error_Handler+0x4>

0800c2d8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b09e      	sub	sp, #120	@ 0x78
 800c2dc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800c2e4:	2004      	movs	r0, #4
 800c2e6:	f7f7 fe6f 	bl	8003fc8 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	607b      	str	r3, [r7, #4]
 800c2ee:	4b42      	ldr	r3, [pc, #264]	@ (800c3f8 <SystemClock_Config+0x120>)
 800c2f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2f2:	4a41      	ldr	r2, [pc, #260]	@ (800c3f8 <SystemClock_Config+0x120>)
 800c2f4:	f023 0301 	bic.w	r3, r3, #1
 800c2f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c2fa:	4b3f      	ldr	r3, [pc, #252]	@ (800c3f8 <SystemClock_Config+0x120>)
 800c2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fe:	f003 0301 	and.w	r3, r3, #1
 800c302:	607b      	str	r3, [r7, #4]
 800c304:	4b3d      	ldr	r3, [pc, #244]	@ (800c3fc <SystemClock_Config+0x124>)
 800c306:	699b      	ldr	r3, [r3, #24]
 800c308:	4a3c      	ldr	r2, [pc, #240]	@ (800c3fc <SystemClock_Config+0x124>)
 800c30a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c30e:	6193      	str	r3, [r2, #24]
 800c310:	4b3a      	ldr	r3, [pc, #232]	@ (800c3fc <SystemClock_Config+0x124>)
 800c312:	699b      	ldr	r3, [r3, #24]
 800c314:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c318:	607b      	str	r3, [r7, #4]
 800c31a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800c31c:	bf00      	nop
 800c31e:	4b37      	ldr	r3, [pc, #220]	@ (800c3fc <SystemClock_Config+0x124>)
 800c320:	699b      	ldr	r3, [r3, #24]
 800c322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c32a:	d1f8      	bne.n	800c31e <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c32c:	2301      	movs	r3, #1
 800c32e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c330:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c334:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800c336:	2300      	movs	r3, #0
 800c338:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800c33a:	2300      	movs	r3, #0
 800c33c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c33e:	2302      	movs	r3, #2
 800c340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c342:	2302      	movs	r3, #2
 800c344:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800c346:	2305      	movs	r3, #5
 800c348:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 70;
 800c34a:	2346      	movs	r3, #70	@ 0x46
 800c34c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800c34e:	2300      	movs	r3, #0
 800c350:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800c352:	2302      	movs	r3, #2
 800c354:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800c356:	2302      	movs	r3, #2
 800c358:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c35a:	2304      	movs	r3, #4
 800c35c:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800c35e:	2300      	movs	r3, #0
 800c360:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800c362:	2308      	movs	r3, #8
 800c364:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800c366:	f107 0308 	add.w	r3, r7, #8
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7f7 fe86 	bl	800407c <HAL_RCC_OscConfig>
 800c370:	4603      	mov	r3, r0
 800c372:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 800c376:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800c37e:	f7ff ffa7 	bl	800c2d0 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800c382:	233f      	movs	r3, #63	@ 0x3f
 800c384:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c386:	2303      	movs	r3, #3
 800c388:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800c38a:	2300      	movs	r3, #0
 800c38c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800c38e:	2308      	movs	r3, #8
 800c390:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800c392:	2340      	movs	r3, #64	@ 0x40
 800c394:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800c396:	2340      	movs	r3, #64	@ 0x40
 800c398:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800c39a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c39e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800c3a0:	2340      	movs	r3, #64	@ 0x40
 800c3a2:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800c3a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c3a8:	2104      	movs	r1, #4
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7f8 fac0 	bl	8004930 <HAL_RCC_ClockConfig>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 800c3b6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d001      	beq.n	800c3c2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800c3be:	f7ff ff87 	bl	800c2d0 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */
 
  /*activate CSI clock mondatory for I/O Compensation Cell*/  
  __HAL_RCC_CSI_ENABLE() ;
 800c3c2:	4b0f      	ldr	r3, [pc, #60]	@ (800c400 <SystemClock_Config+0x128>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a0e      	ldr	r2, [pc, #56]	@ (800c400 <SystemClock_Config+0x128>)
 800c3c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3cc:	6013      	str	r3, [r2, #0]
    
  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800c3ce:	4b0c      	ldr	r3, [pc, #48]	@ (800c400 <SystemClock_Config+0x128>)
 800c3d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c3d4:	4a0a      	ldr	r2, [pc, #40]	@ (800c400 <SystemClock_Config+0x128>)
 800c3d6:	f043 0302 	orr.w	r3, r3, #2
 800c3da:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800c3de:	4b08      	ldr	r3, [pc, #32]	@ (800c400 <SystemClock_Config+0x128>)
 800c3e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c3e4:	f003 0302 	and.w	r3, r3, #2
 800c3e8:	603b      	str	r3, [r7, #0]
 800c3ea:	683b      	ldr	r3, [r7, #0]
  
  /* Enables the I/O Compensation Cell */    
  HAL_EnableCompensationCell();  
 800c3ec:	f7f4 fd72 	bl	8000ed4 <HAL_EnableCompensationCell>

  //uint32_t sisclk = HAL_RCC_GetSysClockFreq();
  //HAL_Delay(1);

}
 800c3f0:	bf00      	nop
 800c3f2:	3778      	adds	r7, #120	@ 0x78
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	58000400 	.word	0x58000400
 800c3fc:	58024800 	.word	0x58024800
 800c400:	58024400 	.word	0x58024400

0800c404 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;
  
  /* Disable the MPU */
  HAL_MPU_Disable();
 800c40a:	f7f4 fe83 	bl	8001114 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800c40e:	2301      	movs	r3, #1
 800c410:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 800c412:	2300      	movs	r3, #0
 800c414:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800c416:	231f      	movs	r3, #31
 800c418:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800c41a:	2300      	movs	r3, #0
 800c41c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800c41e:	2300      	movs	r3, #0
 800c420:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800c422:	2300      	movs	r3, #0
 800c424:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800c426:	2301      	movs	r3, #1
 800c428:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800c42e:	2300      	movs	r3, #0
 800c430:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800c432:	2387      	movs	r3, #135	@ 0x87
 800c434:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800c436:	2301      	movs	r3, #1
 800c438:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800c43a:	463b      	mov	r3, r7
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7f4 fea1 	bl	8001184 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800c442:	2301      	movs	r3, #1
 800c444:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 800c446:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800c44a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800c44c:	2318      	movs	r3, #24
 800c44e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800c450:	2303      	movs	r3, #3
 800c452:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800c454:	2300      	movs	r3, #0
 800c456:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800c458:	2301      	movs	r3, #1
 800c45a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800c45c:	2300      	movs	r3, #0
 800c45e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800c460:	2301      	movs	r3, #1
 800c462:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800c464:	2300      	movs	r3, #0
 800c466:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800c468:	2300      	movs	r3, #0
 800c46a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800c46c:	2300      	movs	r3, #0
 800c46e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800c470:	463b      	mov	r3, r7
 800c472:	4618      	mov	r0, r3
 800c474:	f7f4 fe86 	bl	8001184 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800c478:	2004      	movs	r0, #4
 800c47a:	f7f4 fe63 	bl	8001144 <HAL_MPU_Enable>
}
 800c47e:	bf00      	nop
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
	...

0800c488 <CPU_CACHE_Enable>:
* @brief  CPU L1-Cache enable.
* @param  None
* @retval None
*/
static void CPU_CACHE_Enable(void)
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800c48e:	4b34      	ldr	r3, [pc, #208]	@ (800c560 <CPU_CACHE_Enable+0xd8>)
 800c490:	695b      	ldr	r3, [r3, #20]
 800c492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c496:	2b00      	cmp	r3, #0
 800c498:	d11b      	bne.n	800c4d2 <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800c49a:	f3bf 8f4f 	dsb	sy
}
 800c49e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c4a0:	f3bf 8f6f 	isb	sy
}
 800c4a4:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800c4a6:	4b2e      	ldr	r3, [pc, #184]	@ (800c560 <CPU_CACHE_Enable+0xd8>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800c4ae:	f3bf 8f4f 	dsb	sy
}
 800c4b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c4b4:	f3bf 8f6f 	isb	sy
}
 800c4b8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800c4ba:	4b29      	ldr	r3, [pc, #164]	@ (800c560 <CPU_CACHE_Enable+0xd8>)
 800c4bc:	695b      	ldr	r3, [r3, #20]
 800c4be:	4a28      	ldr	r2, [pc, #160]	@ (800c560 <CPU_CACHE_Enable+0xd8>)
 800c4c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4c4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c4c6:	f3bf 8f4f 	dsb	sy
}
 800c4ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c4cc:	f3bf 8f6f 	isb	sy
}
 800c4d0:	e000      	b.n	800c4d4 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800c4d2:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800c4d4:	4b22      	ldr	r3, [pc, #136]	@ (800c560 <CPU_CACHE_Enable+0xd8>)
 800c4d6:	695b      	ldr	r3, [r3, #20]
 800c4d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d138      	bne.n	800c552 <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800c4e0:	4b1f      	ldr	r3, [pc, #124]	@ (800c560 <CPU_CACHE_Enable+0xd8>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800c4e8:	f3bf 8f4f 	dsb	sy
}
 800c4ec:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800c4ee:	4b1c      	ldr	r3, [pc, #112]	@ (800c560 <CPU_CACHE_Enable+0xd8>)
 800c4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4f4:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	0b5b      	lsrs	r3, r3, #13
 800c4fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c4fe:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	08db      	lsrs	r3, r3, #3
 800c504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c508:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	015a      	lsls	r2, r3, #5
 800c50e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800c512:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c518:	4911      	ldr	r1, [pc, #68]	@ (800c560 <CPU_CACHE_Enable+0xd8>)
 800c51a:	4313      	orrs	r3, r2
 800c51c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	1e5a      	subs	r2, r3, #1
 800c524:	607a      	str	r2, [r7, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1ef      	bne.n	800c50a <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	1e5a      	subs	r2, r3, #1
 800c52e:	60ba      	str	r2, [r7, #8]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1e5      	bne.n	800c500 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800c534:	f3bf 8f4f 	dsb	sy
}
 800c538:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800c53a:	4b09      	ldr	r3, [pc, #36]	@ (800c560 <CPU_CACHE_Enable+0xd8>)
 800c53c:	695b      	ldr	r3, [r3, #20]
 800c53e:	4a08      	ldr	r2, [pc, #32]	@ (800c560 <CPU_CACHE_Enable+0xd8>)
 800c540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c544:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c546:	f3bf 8f4f 	dsb	sy
}
 800c54a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c54c:	f3bf 8f6f 	isb	sy
}
 800c550:	e000      	b.n	800c554 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800c552:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800c554:	bf00      	nop
 800c556:	3714      	adds	r7, #20
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr
 800c560:	e000ed00 	.word	0xe000ed00

0800c564 <MX_SPI5_Init>:

static void MX_SPI5_Init(void)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800c568:	4b26      	ldr	r3, [pc, #152]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c56a:	4a27      	ldr	r2, [pc, #156]	@ (800c608 <MX_SPI5_Init+0xa4>)
 800c56c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800c56e:	4b25      	ldr	r3, [pc, #148]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c570:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800c574:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800c576:	4b23      	ldr	r3, [pc, #140]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c578:	2200      	movs	r2, #0
 800c57a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800c57c:	4b21      	ldr	r3, [pc, #132]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c57e:	2207      	movs	r2, #7
 800c580:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c582:	4b20      	ldr	r3, [pc, #128]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c584:	2200      	movs	r2, #0
 800c586:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c588:	4b1e      	ldr	r3, [pc, #120]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c58a:	2200      	movs	r2, #0
 800c58c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800c58e:	4b1d      	ldr	r3, [pc, #116]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c590:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800c594:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c596:	4b1b      	ldr	r3, [pc, #108]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c598:	2200      	movs	r2, #0
 800c59a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c59c:	4b19      	ldr	r3, [pc, #100]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c59e:	2200      	movs	r2, #0
 800c5a0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800c5a2:	4b18      	ldr	r3, [pc, #96]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c5a8:	4b16      	ldr	r3, [pc, #88]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800c5ae:	4b15      	ldr	r3, [pc, #84]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800c5b4:	4b13      	ldr	r3, [pc, #76]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800c5ba:	4b12      	ldr	r3, [pc, #72]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800c5c0:	4b10      	ldr	r3, [pc, #64]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c5c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c5cc:	4b0d      	ldr	r3, [pc, #52]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800c5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800c5d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c5da:	2200      	movs	r2, #0
 800c5dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800c5de:	4b09      	ldr	r3, [pc, #36]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800c5e4:	4b07      	ldr	r3, [pc, #28]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800c5ea:	4b06      	ldr	r3, [pc, #24]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800c5f0:	4804      	ldr	r0, [pc, #16]	@ (800c604 <MX_SPI5_Init+0xa0>)
 800c5f2:	f7fd f83b 	bl	800966c <HAL_SPI_Init>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d001      	beq.n	800c600 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 800c5fc:	f7ff fe68 	bl	800c2d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800c600:	bf00      	nop
 800c602:	bd80      	pop	{r7, pc}
 800c604:	20000304 	.word	0x20000304
 800c608:	40015000 	.word	0x40015000

0800c60c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b08c      	sub	sp, #48	@ 0x30
 800c610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c612:	f107 031c 	add.w	r3, r7, #28
 800c616:	2200      	movs	r2, #0
 800c618:	601a      	str	r2, [r3, #0]
 800c61a:	605a      	str	r2, [r3, #4]
 800c61c:	609a      	str	r2, [r3, #8]
 800c61e:	60da      	str	r2, [r3, #12]
 800c620:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c622:	4b53      	ldr	r3, [pc, #332]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c628:	4a51      	ldr	r2, [pc, #324]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c62a:	f043 0304 	orr.w	r3, r3, #4
 800c62e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c632:	4b4f      	ldr	r3, [pc, #316]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c638:	f003 0304 	and.w	r3, r3, #4
 800c63c:	61bb      	str	r3, [r7, #24]
 800c63e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c640:	4b4b      	ldr	r3, [pc, #300]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c646:	4a4a      	ldr	r2, [pc, #296]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c648:	f043 0308 	orr.w	r3, r3, #8
 800c64c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c650:	4b47      	ldr	r3, [pc, #284]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c656:	f003 0308 	and.w	r3, r3, #8
 800c65a:	617b      	str	r3, [r7, #20]
 800c65c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c65e:	4b44      	ldr	r3, [pc, #272]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c664:	4a42      	ldr	r2, [pc, #264]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c666:	f043 0301 	orr.w	r3, r3, #1
 800c66a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c66e:	4b40      	ldr	r3, [pc, #256]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c674:	f003 0301 	and.w	r3, r3, #1
 800c678:	613b      	str	r3, [r7, #16]
 800c67a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800c67c:	4b3c      	ldr	r3, [pc, #240]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c67e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c682:	4a3b      	ldr	r2, [pc, #236]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c688:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c68c:	4b38      	ldr	r3, [pc, #224]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c68e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c696:	60fb      	str	r3, [r7, #12]
 800c698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c69a:	4b35      	ldr	r3, [pc, #212]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c69c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6a0:	4a33      	ldr	r2, [pc, #204]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c6a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c6aa:	4b31      	ldr	r3, [pc, #196]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c6ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6b4:	60bb      	str	r3, [r7, #8]
 800c6b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800c6b8:	4b2d      	ldr	r3, [pc, #180]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c6ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6be:	4a2c      	ldr	r2, [pc, #176]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c6c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c6c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c6c8:	4b29      	ldr	r3, [pc, #164]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c6ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c6d2:	607b      	str	r3, [r7, #4]
 800c6d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c6d6:	4b26      	ldr	r3, [pc, #152]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c6d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6dc:	4a24      	ldr	r2, [pc, #144]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c6de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c6e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c6e6:	4b22      	ldr	r3, [pc, #136]	@ (800c770 <MX_GPIO_Init+0x164>)
 800c6e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c6ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c6f0:	603b      	str	r3, [r7, #0]
 800c6f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	2102      	movs	r1, #2
 800c6f8:	481e      	ldr	r0, [pc, #120]	@ (800c774 <MX_GPIO_Init+0x168>)
 800c6fa:	f7f5 fa17 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 800c6fe:	2200      	movs	r2, #0
 800c700:	2161      	movs	r1, #97	@ 0x61
 800c702:	481d      	ldr	r0, [pc, #116]	@ (800c778 <MX_GPIO_Init+0x16c>)
 800c704:	f7f5 fa12 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 800c708:	2302      	movs	r3, #2
 800c70a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c70c:	2301      	movs	r3, #1
 800c70e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c710:	2300      	movs	r3, #0
 800c712:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c714:	2300      	movs	r3, #0
 800c716:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 800c718:	f107 031c 	add.w	r3, r7, #28
 800c71c:	4619      	mov	r1, r3
 800c71e:	4815      	ldr	r0, [pc, #84]	@ (800c774 <MX_GPIO_Init+0x168>)
 800c720:	f7f5 f83c 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 800c724:	2361      	movs	r3, #97	@ 0x61
 800c726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c728:	2301      	movs	r3, #1
 800c72a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c72c:	2300      	movs	r3, #0
 800c72e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c730:	2300      	movs	r3, #0
 800c732:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c734:	f107 031c 	add.w	r3, r7, #28
 800c738:	4619      	mov	r1, r3
 800c73a:	480f      	ldr	r0, [pc, #60]	@ (800c778 <MX_GPIO_Init+0x16c>)
 800c73c:	f7f5 f82e 	bl	800179c <HAL_GPIO_Init>

  // Configure GPIO pins for user buttons
  HAL_GPIO_WritePin(GPIOJ, BUTTON_MINUS_Pin|BUTTON_PLUS_Pin|BUTTON_SETTING_Pin, GPIO_PIN_SET);
 800c740:	2201      	movs	r2, #1
 800c742:	2189      	movs	r1, #137	@ 0x89
 800c744:	480c      	ldr	r0, [pc, #48]	@ (800c778 <MX_GPIO_Init+0x16c>)
 800c746:	f7f5 f9f1 	bl	8001b2c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin =  BUTTON_MINUS_Pin|BUTTON_PLUS_Pin|BUTTON_SETTING_Pin;
 800c74a:	2389      	movs	r3, #137	@ 0x89
 800c74c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800c74e:	2311      	movs	r3, #17
 800c750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c752:	2301      	movs	r3, #1
 800c754:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c756:	2300      	movs	r3, #0
 800c758:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c75a:	f107 031c 	add.w	r3, r7, #28
 800c75e:	4619      	mov	r1, r3
 800c760:	4805      	ldr	r0, [pc, #20]	@ (800c778 <MX_GPIO_Init+0x16c>)
 800c762:	f7f5 f81b 	bl	800179c <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800c766:	bf00      	nop
 800c768:	3730      	adds	r7, #48	@ 0x30
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	58024400 	.word	0x58024400
 800c774:	58022800 	.word	0x58022800
 800c778:	58022400 	.word	0x58022400

0800c77c <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b088      	sub	sp, #32
 800c780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c782:	f107 0310 	add.w	r3, r7, #16
 800c786:	2200      	movs	r2, #0
 800c788:	601a      	str	r2, [r3, #0]
 800c78a:	605a      	str	r2, [r3, #4]
 800c78c:	609a      	str	r2, [r3, #8]
 800c78e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c790:	1d3b      	adds	r3, r7, #4
 800c792:	2200      	movs	r2, #0
 800c794:	601a      	str	r2, [r3, #0]
 800c796:	605a      	str	r2, [r3, #4]
 800c798:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800c79a:	4b1e      	ldr	r3, [pc, #120]	@ (800c814 <MX_TIM3_Init+0x98>)
 800c79c:	4a1e      	ldr	r2, [pc, #120]	@ (800c818 <MX_TIM3_Init+0x9c>)
 800c79e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 21874;
 800c7a0:	4b1c      	ldr	r3, [pc, #112]	@ (800c814 <MX_TIM3_Init+0x98>)
 800c7a2:	f245 5272 	movw	r2, #21874	@ 0x5572
 800c7a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c7a8:	4b1a      	ldr	r3, [pc, #104]	@ (800c814 <MX_TIM3_Init+0x98>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800c7ae:	4b19      	ldr	r3, [pc, #100]	@ (800c814 <MX_TIM3_Init+0x98>)
 800c7b0:	f242 720f 	movw	r2, #9999	@ 0x270f
 800c7b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800c7b6:	4b17      	ldr	r3, [pc, #92]	@ (800c814 <MX_TIM3_Init+0x98>)
 800c7b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c7be:	4b15      	ldr	r3, [pc, #84]	@ (800c814 <MX_TIM3_Init+0x98>)
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800c7c4:	4813      	ldr	r0, [pc, #76]	@ (800c814 <MX_TIM3_Init+0x98>)
 800c7c6:	f7fd fb4c 	bl	8009e62 <HAL_TIM_Base_Init>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d001      	beq.n	800c7d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800c7d0:	f7ff fd7e 	bl	800c2d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c7d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c7d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800c7da:	f107 0310 	add.w	r3, r7, #16
 800c7de:	4619      	mov	r1, r3
 800c7e0:	480c      	ldr	r0, [pc, #48]	@ (800c814 <MX_TIM3_Init+0x98>)
 800c7e2:	f7fd fc9d 	bl	800a120 <HAL_TIM_ConfigClockSource>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d001      	beq.n	800c7f0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800c7ec:	f7ff fd70 	bl	800c2d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c7f8:	1d3b      	adds	r3, r7, #4
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	4805      	ldr	r0, [pc, #20]	@ (800c814 <MX_TIM3_Init+0x98>)
 800c7fe:	f7fd fefd 	bl	800a5fc <HAL_TIMEx_MasterConfigSynchronization>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d001      	beq.n	800c80c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800c808:	f7ff fd62 	bl	800c2d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800c80c:	bf00      	nop
 800c80e:	3720      	adds	r7, #32
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	200002b8 	.word	0x200002b8
 800c818:	40000400 	.word	0x40000400

0800c81c <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	4603      	mov	r3, r0
 800c824:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c826:	4b0c      	ldr	r3, [pc, #48]	@ (800c858 <SD_CheckStatus+0x3c>)
 800c828:	2201      	movs	r2, #1
 800c82a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState(0) == BSP_ERROR_NONE)
 800c82c:	2000      	movs	r0, #0
 800c82e:	f7f3 ff87 	bl	8000740 <BSP_SD_GetCardState>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d107      	bne.n	800c848 <SD_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 800c838:	4b07      	ldr	r3, [pc, #28]	@ (800c858 <SD_CheckStatus+0x3c>)
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	f023 0301 	bic.w	r3, r3, #1
 800c842:	b2da      	uxtb	r2, r3
 800c844:	4b04      	ldr	r3, [pc, #16]	@ (800c858 <SD_CheckStatus+0x3c>)
 800c846:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800c848:	4b03      	ldr	r3, [pc, #12]	@ (800c858 <SD_CheckStatus+0x3c>)
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	b2db      	uxtb	r3, r3
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3708      	adds	r7, #8
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	2000000d 	.word	0x2000000d

0800c85c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	4603      	mov	r3, r0
 800c864:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c866:	79fb      	ldrb	r3, [r7, #7]
 800c868:	4618      	mov	r0, r3
 800c86a:	f7ff ffd7 	bl	800c81c <SD_CheckStatus>
 800c86e:	4603      	mov	r3, r0
}
 800c870:	4618      	mov	r0, r3
 800c872:	3708      	adds	r7, #8
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	4603      	mov	r3, r0
 800c880:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c882:	79fb      	ldrb	r3, [r7, #7]
 800c884:	4618      	mov	r0, r3
 800c886:	f7ff ffc9 	bl	800c81c <SD_CheckStatus>
 800c88a:	4603      	mov	r3, r0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	607a      	str	r2, [r7, #4]
 800c89e:	603b      	str	r3, [r7, #0]
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_ReadBlocks(0,(uint32_t*)buff, 
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	68b9      	ldr	r1, [r7, #8]
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	f7f3 fee6 	bl	8000680 <BSP_SD_ReadBlocks>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d108      	bne.n	800c8cc <SD_read+0x38>
                       (uint32_t) (sector), 
                       count) == BSP_ERROR_NONE)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState(0)!= BSP_ERROR_NONE)
 800c8ba:	bf00      	nop
 800c8bc:	2000      	movs	r0, #0
 800c8be:	f7f3 ff3f 	bl	8000740 <BSP_SD_GetCardState>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d1f9      	bne.n	800c8bc <SD_read+0x28>
    {
    }
    res = RES_OK;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c8cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3718      	adds	r7, #24
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b086      	sub	sp, #24
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	603b      	str	r3, [r7, #0]
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_WriteBlocks(0,(uint32_t*)buff, 
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	68b9      	ldr	r1, [r7, #8]
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	f7f3 fef5 	bl	80006e0 <BSP_SD_WriteBlocks>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d108      	bne.n	800c90e <SD_write+0x38>
                        (uint32_t)(sector), 
                        count) == BSP_ERROR_NONE)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState(0) != BSP_ERROR_NONE)
 800c8fc:	bf00      	nop
 800c8fe:	2000      	movs	r0, #0
 800c900:	f7f3 ff1e 	bl	8000740 <BSP_SD_GetCardState>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d1f9      	bne.n	800c8fe <SD_write+0x28>
    {
    }    
    res = RES_OK;
 800c90a:	2300      	movs	r3, #0
 800c90c:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c910:	4618      	mov	r0, r3
 800c912:	3718      	adds	r7, #24
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b08c      	sub	sp, #48	@ 0x30
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	4603      	mov	r3, r0
 800c920:	603a      	str	r2, [r7, #0]
 800c922:	71fb      	strb	r3, [r7, #7]
 800c924:	460b      	mov	r3, r1
 800c926:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c928:	2301      	movs	r3, #1
 800c92a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c92e:	4b26      	ldr	r3, [pc, #152]	@ (800c9c8 <SD_ioctl+0xb0>)
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	b2db      	uxtb	r3, r3
 800c934:	f003 0301 	and.w	r3, r3, #1
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d001      	beq.n	800c940 <SD_ioctl+0x28>
 800c93c:	2303      	movs	r3, #3
 800c93e:	e03e      	b.n	800c9be <SD_ioctl+0xa6>
  
  switch (cmd)
 800c940:	79bb      	ldrb	r3, [r7, #6]
 800c942:	2b03      	cmp	r3, #3
 800c944:	d836      	bhi.n	800c9b4 <SD_ioctl+0x9c>
 800c946:	a201      	add	r2, pc, #4	@ (adr r2, 800c94c <SD_ioctl+0x34>)
 800c948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c94c:	0800c95d 	.word	0x0800c95d
 800c950:	0800c965 	.word	0x0800c965
 800c954:	0800c97f 	.word	0x0800c97f
 800c958:	0800c99b 	.word	0x0800c99b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c95c:	2300      	movs	r3, #0
 800c95e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c962:	e02a      	b.n	800c9ba <SD_ioctl+0xa2>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800c964:	f107 0308 	add.w	r3, r7, #8
 800c968:	4619      	mov	r1, r3
 800c96a:	2000      	movs	r0, #0
 800c96c:	f7f3 ff02 	bl	8000774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c970:	6a3a      	ldr	r2, [r7, #32]
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c976:	2300      	movs	r3, #0
 800c978:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c97c:	e01d      	b.n	800c9ba <SD_ioctl+0xa2>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800c97e:	f107 0308 	add.w	r3, r7, #8
 800c982:	4619      	mov	r1, r3
 800c984:	2000      	movs	r0, #0
 800c986:	f7f3 fef5 	bl	8000774 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98c:	b29a      	uxth	r2, r3
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c992:	2300      	movs	r3, #0
 800c994:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c998:	e00f      	b.n	800c9ba <SD_ioctl+0xa2>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800c99a:	f107 0308 	add.w	r3, r7, #8
 800c99e:	4619      	mov	r1, r3
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	f7f3 fee7 	bl	8000774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800c9a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	601a      	str	r2, [r3, #0]
  res = RES_OK;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c9b2:	e002      	b.n	800c9ba <SD_ioctl+0xa2>
  
  default:
    res = RES_PARERR;
 800c9b4:	2304      	movs	r3, #4
 800c9b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 800c9ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3730      	adds	r7, #48	@ 0x30
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	2000000d 	.word	0x2000000d

0800c9cc <smart_watch_init>:

video_t video;													// Video data structure


void smart_watch_init(void)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	af00      	add	r7, sp, #0

	file_name[0] = "video_000.avi";
 800c9d0:	4b35      	ldr	r3, [pc, #212]	@ (800caa8 <smart_watch_init+0xdc>)
 800c9d2:	4a36      	ldr	r2, [pc, #216]	@ (800caac <smart_watch_init+0xe0>)
 800c9d4:	601a      	str	r2, [r3, #0]
	file_name[1] = "video_001.avi";
 800c9d6:	4b34      	ldr	r3, [pc, #208]	@ (800caa8 <smart_watch_init+0xdc>)
 800c9d8:	4a35      	ldr	r2, [pc, #212]	@ (800cab0 <smart_watch_init+0xe4>)
 800c9da:	605a      	str	r2, [r3, #4]
	file_name[2] = "video_002.avi";
 800c9dc:	4b32      	ldr	r3, [pc, #200]	@ (800caa8 <smart_watch_init+0xdc>)
 800c9de:	4a35      	ldr	r2, [pc, #212]	@ (800cab4 <smart_watch_init+0xe8>)
 800c9e0:	609a      	str	r2, [r3, #8]
	file_name[3] = "video_003.avi";
 800c9e2:	4b31      	ldr	r3, [pc, #196]	@ (800caa8 <smart_watch_init+0xdc>)
 800c9e4:	4a34      	ldr	r2, [pc, #208]	@ (800cab8 <smart_watch_init+0xec>)
 800c9e6:	60da      	str	r2, [r3, #12]
	file_name[4] = "video_004.avi";
 800c9e8:	4b2f      	ldr	r3, [pc, #188]	@ (800caa8 <smart_watch_init+0xdc>)
 800c9ea:	4a34      	ldr	r2, [pc, #208]	@ (800cabc <smart_watch_init+0xf0>)
 800c9ec:	611a      	str	r2, [r3, #16]
	file_name[5] = "video_005.avi";
 800c9ee:	4b2e      	ldr	r3, [pc, #184]	@ (800caa8 <smart_watch_init+0xdc>)
 800c9f0:	4a33      	ldr	r2, [pc, #204]	@ (800cac0 <smart_watch_init+0xf4>)
 800c9f2:	615a      	str	r2, [r3, #20]
	file_name[6] = "video_006.avi";
 800c9f4:	4b2c      	ldr	r3, [pc, #176]	@ (800caa8 <smart_watch_init+0xdc>)
 800c9f6:	4a33      	ldr	r2, [pc, #204]	@ (800cac4 <smart_watch_init+0xf8>)
 800c9f8:	619a      	str	r2, [r3, #24]
	file_name[7] = "video_007.avi";
 800c9fa:	4b2b      	ldr	r3, [pc, #172]	@ (800caa8 <smart_watch_init+0xdc>)
 800c9fc:	4a32      	ldr	r2, [pc, #200]	@ (800cac8 <smart_watch_init+0xfc>)
 800c9fe:	61da      	str	r2, [r3, #28]
	file_name[8] = "video_008.avi";
 800ca00:	4b29      	ldr	r3, [pc, #164]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca02:	4a32      	ldr	r2, [pc, #200]	@ (800cacc <smart_watch_init+0x100>)
 800ca04:	621a      	str	r2, [r3, #32]
	file_name[9] = "video_009.avi";
 800ca06:	4b28      	ldr	r3, [pc, #160]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca08:	4a31      	ldr	r2, [pc, #196]	@ (800cad0 <smart_watch_init+0x104>)
 800ca0a:	625a      	str	r2, [r3, #36]	@ 0x24
	file_name[10] = "video_010.avi";
 800ca0c:	4b26      	ldr	r3, [pc, #152]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca0e:	4a31      	ldr	r2, [pc, #196]	@ (800cad4 <smart_watch_init+0x108>)
 800ca10:	629a      	str	r2, [r3, #40]	@ 0x28
	file_name[11] = "video_011.avi";
 800ca12:	4b25      	ldr	r3, [pc, #148]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca14:	4a30      	ldr	r2, [pc, #192]	@ (800cad8 <smart_watch_init+0x10c>)
 800ca16:	62da      	str	r2, [r3, #44]	@ 0x2c
	file_name[12] = "video_012.avi";
 800ca18:	4b23      	ldr	r3, [pc, #140]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca1a:	4a30      	ldr	r2, [pc, #192]	@ (800cadc <smart_watch_init+0x110>)
 800ca1c:	631a      	str	r2, [r3, #48]	@ 0x30
	file_name[13] = "video_013.avi";
 800ca1e:	4b22      	ldr	r3, [pc, #136]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca20:	4a2f      	ldr	r2, [pc, #188]	@ (800cae0 <smart_watch_init+0x114>)
 800ca22:	635a      	str	r2, [r3, #52]	@ 0x34
	file_name[14] = "video_014.avi";
 800ca24:	4b20      	ldr	r3, [pc, #128]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca26:	4a2f      	ldr	r2, [pc, #188]	@ (800cae4 <smart_watch_init+0x118>)
 800ca28:	639a      	str	r2, [r3, #56]	@ 0x38
	file_name[15] = "video_015.avi";
 800ca2a:	4b1f      	ldr	r3, [pc, #124]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca2c:	4a2e      	ldr	r2, [pc, #184]	@ (800cae8 <smart_watch_init+0x11c>)
 800ca2e:	63da      	str	r2, [r3, #60]	@ 0x3c
	file_name[16] = "video_016.avi";
 800ca30:	4b1d      	ldr	r3, [pc, #116]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca32:	4a2e      	ldr	r2, [pc, #184]	@ (800caec <smart_watch_init+0x120>)
 800ca34:	641a      	str	r2, [r3, #64]	@ 0x40
	file_name[17] = "video_017.avi";
 800ca36:	4b1c      	ldr	r3, [pc, #112]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca38:	4a2d      	ldr	r2, [pc, #180]	@ (800caf0 <smart_watch_init+0x124>)
 800ca3a:	645a      	str	r2, [r3, #68]	@ 0x44
	file_name[18] = "video_018.avi";
 800ca3c:	4b1a      	ldr	r3, [pc, #104]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca3e:	4a2d      	ldr	r2, [pc, #180]	@ (800caf4 <smart_watch_init+0x128>)
 800ca40:	649a      	str	r2, [r3, #72]	@ 0x48
	file_name[19] = "video_019.avi";
 800ca42:	4b19      	ldr	r3, [pc, #100]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca44:	4a2c      	ldr	r2, [pc, #176]	@ (800caf8 <smart_watch_init+0x12c>)
 800ca46:	64da      	str	r2, [r3, #76]	@ 0x4c
	file_name[20] = "video_020.avi";
 800ca48:	4b17      	ldr	r3, [pc, #92]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca4a:	4a2c      	ldr	r2, [pc, #176]	@ (800cafc <smart_watch_init+0x130>)
 800ca4c:	651a      	str	r2, [r3, #80]	@ 0x50
	file_name[21] = "video_021.avi";
 800ca4e:	4b16      	ldr	r3, [pc, #88]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca50:	4a2b      	ldr	r2, [pc, #172]	@ (800cb00 <smart_watch_init+0x134>)
 800ca52:	655a      	str	r2, [r3, #84]	@ 0x54
	file_name[22] = "video_022.avi";
 800ca54:	4b14      	ldr	r3, [pc, #80]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca56:	4a2b      	ldr	r2, [pc, #172]	@ (800cb04 <smart_watch_init+0x138>)
 800ca58:	659a      	str	r2, [r3, #88]	@ 0x58
	file_name[23] = "video_023.avi";
 800ca5a:	4b13      	ldr	r3, [pc, #76]	@ (800caa8 <smart_watch_init+0xdc>)
 800ca5c:	4a2a      	ldr	r2, [pc, #168]	@ (800cb08 <smart_watch_init+0x13c>)
 800ca5e:	65da      	str	r2, [r3, #92]	@ 0x5c


	parameters_reset();
 800ca60:	f000 fbc2 	bl	800d1e8 <parameters_reset>

	video.video_mode = SETTING_MODE;				// First time setting
 800ca64:	4b29      	ldr	r3, [pc, #164]	@ (800cb0c <smart_watch_init+0x140>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	f883 2020 	strb.w	r2, [r3, #32]

	// SD card initialization
	// Link the micro SD disk I/O driver
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800ca6c:	4928      	ldr	r1, [pc, #160]	@ (800cb10 <smart_watch_init+0x144>)
 800ca6e:	4829      	ldr	r0, [pc, #164]	@ (800cb14 <smart_watch_init+0x148>)
 800ca70:	f003 ff42 	bl	80108f8 <FATFS_LinkDriver>
 800ca74:	4603      	mov	r3, r0
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d112      	bne.n	800caa0 <smart_watch_init+0xd4>
	{

		// Init the SD Card
	    SD_Initialize();
 800ca7a:	f000 fd79 	bl	800d570 <SD_Initialize>

	    if(BSP_SD_IsDetected(0))
 800ca7e:	2000      	movs	r0, #0
 800ca80:	f7f3 fdda 	bl	8000638 <BSP_SD_IsDetected>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d009      	beq.n	800ca9e <smart_watch_init+0xd2>
	    {

	      // Register the file system object to the FatFs module
	      if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	4920      	ldr	r1, [pc, #128]	@ (800cb10 <smart_watch_init+0x144>)
 800ca8e:	4822      	ldr	r0, [pc, #136]	@ (800cb18 <smart_watch_init+0x14c>)
 800ca90:	f003 f8e6 	bl	800fc60 <f_mount>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d003      	beq.n	800caa2 <smart_watch_init+0xd6>
	      {

	    	  while(1);
 800ca9a:	bf00      	nop
 800ca9c:	e7fd      	b.n	800ca9a <smart_watch_init+0xce>

	    }
	    else
  		{

  			while(1);
 800ca9e:	e7fe      	b.n	800ca9e <smart_watch_init+0xd2>

  	}
	else
	{

		while(1);
 800caa0:	e7fe      	b.n	800caa0 <smart_watch_init+0xd4>

	}

}
 800caa2:	bf00      	nop
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	2000038c 	.word	0x2000038c
 800caac:	08010da8 	.word	0x08010da8
 800cab0:	08010db8 	.word	0x08010db8
 800cab4:	08010dc8 	.word	0x08010dc8
 800cab8:	08010dd8 	.word	0x08010dd8
 800cabc:	08010de8 	.word	0x08010de8
 800cac0:	08010df8 	.word	0x08010df8
 800cac4:	08010e08 	.word	0x08010e08
 800cac8:	08010e18 	.word	0x08010e18
 800cacc:	08010e28 	.word	0x08010e28
 800cad0:	08010e38 	.word	0x08010e38
 800cad4:	08010e48 	.word	0x08010e48
 800cad8:	08010e58 	.word	0x08010e58
 800cadc:	08010e68 	.word	0x08010e68
 800cae0:	08010e78 	.word	0x08010e78
 800cae4:	08010e88 	.word	0x08010e88
 800cae8:	08010e98 	.word	0x08010e98
 800caec:	08010ea8 	.word	0x08010ea8
 800caf0:	08010eb8 	.word	0x08010eb8
 800caf4:	08010ec8 	.word	0x08010ec8
 800caf8:	08010ed8 	.word	0x08010ed8
 800cafc:	08010ee8 	.word	0x08010ee8
 800cb00:	08010ef8 	.word	0x08010ef8
 800cb04:	08010f08 	.word	0x08010f08
 800cb08:	08010f18 	.word	0x08010f18
 800cb0c:	200188a0 	.word	0x200188a0
 800cb10:	20018624 	.word	0x20018624
 800cb14:	080111e0 	.word	0x080111e0
 800cb18:	200183f0 	.word	0x200183f0

0800cb1c <smart_watch_process>:


void smart_watch_process(void)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	af00      	add	r7, sp, #0

	while(1)
	{

		// Check if new file needs to be open
		file_handler(0);
 800cb20:	2000      	movs	r0, #0
 800cb22:	f000 faaf 	bl	800d084 <file_handler>

		// Video processing unit
		mjpeg_video_processing();
 800cb26:	f000 f805 	bl	800cb34 <mjpeg_video_processing>

		// Check for user buttons pressed
		user_buttons_handler();
 800cb2a:	f000 fb25 	bl	800d178 <user_buttons_handler>
		file_handler(0);
 800cb2e:	bf00      	nop
 800cb30:	e7f6      	b.n	800cb20 <smart_watch_process+0x4>
	...

0800cb34 <mjpeg_video_processing>:

////////////////////////////////////////////////////// PRIVATE FUNCTIONS


static void mjpeg_video_processing(void)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	af00      	add	r7, sp, #0

	switch(video.video_mode)
 800cb38:	4b06      	ldr	r3, [pc, #24]	@ (800cb54 <mjpeg_video_processing+0x20>)
 800cb3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d002      	beq.n	800cb48 <mjpeg_video_processing+0x14>
	{

		default:
		case SETTING_MODE:

			clock_setting();
 800cb42:	f000 f809 	bl	800cb58 <clock_setting>

			break;
 800cb46:	e002      	b.n	800cb4e <mjpeg_video_processing+0x1a>

		case NORMAL_MODE:

			clock_normal();
 800cb48:	f000 f8ce 	bl	800cce8 <clock_normal>

			break;
 800cb4c:	bf00      	nop

	}

}
 800cb4e:	bf00      	nop
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	200188a0 	.word	0x200188a0

0800cb58 <clock_setting>:


static void clock_setting(void)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	af00      	add	r7, sp, #0

	switch(video.set)
 800cb5c:	4b5e      	ldr	r3, [pc, #376]	@ (800ccd8 <clock_setting+0x180>)
 800cb5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800cb62:	2b03      	cmp	r3, #3
 800cb64:	f000 80a9 	beq.w	800ccba <clock_setting+0x162>
 800cb68:	2b03      	cmp	r3, #3
 800cb6a:	dc03      	bgt.n	800cb74 <clock_setting+0x1c>
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d010      	beq.n	800cb92 <clock_setting+0x3a>
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d06a      	beq.n	800cc4a <clock_setting+0xf2>
	{

		default:
		case SET_IDLE:

			while(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin));
 800cb74:	bf00      	nop
 800cb76:	2108      	movs	r1, #8
 800cb78:	4858      	ldr	r0, [pc, #352]	@ (800ccdc <clock_setting+0x184>)
 800cb7a:	f7f4 ffbf 	bl	8001afc <HAL_GPIO_ReadPin>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d0f8      	beq.n	800cb76 <clock_setting+0x1e>

			parameters_reset();
 800cb84:	f000 fb30 	bl	800d1e8 <parameters_reset>

			video.set = SET_HOURS;
 800cb88:	4b53      	ldr	r3, [pc, #332]	@ (800ccd8 <clock_setting+0x180>)
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

			break;
 800cb90:	e09f      	b.n	800ccd2 <clock_setting+0x17a>

		case SET_HOURS:

			show_frame(0);
 800cb92:	2000      	movs	r0, #0
 800cb94:	f000 f9ac 	bl	800cef0 <show_frame>

			// If button plus
			if(!HAL_GPIO_ReadPin(BUTTON_PLUS_GPIO_Port, BUTTON_PLUS_Pin))
 800cb98:	2180      	movs	r1, #128	@ 0x80
 800cb9a:	4850      	ldr	r0, [pc, #320]	@ (800ccdc <clock_setting+0x184>)
 800cb9c:	f7f4 ffae 	bl	8001afc <HAL_GPIO_ReadPin>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d127      	bne.n	800cbf6 <clock_setting+0x9e>
			{

				HAL_Delay(200);
 800cba6:	20c8      	movs	r0, #200	@ 0xc8
 800cba8:	f7f4 f964 	bl	8000e74 <HAL_Delay>

				if(video.file_idx % 2)
 800cbac:	4b4a      	ldr	r3, [pc, #296]	@ (800ccd8 <clock_setting+0x180>)
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	f003 0301 	and.w	r3, r3, #1
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d006      	beq.n	800cbc8 <clock_setting+0x70>
					video.file_idx += 1;
 800cbba:	4b47      	ldr	r3, [pc, #284]	@ (800ccd8 <clock_setting+0x180>)
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	4b45      	ldr	r3, [pc, #276]	@ (800ccd8 <clock_setting+0x180>)
 800cbc4:	701a      	strb	r2, [r3, #0]
 800cbc6:	e005      	b.n	800cbd4 <clock_setting+0x7c>
				else
					video.file_idx += 2;
 800cbc8:	4b43      	ldr	r3, [pc, #268]	@ (800ccd8 <clock_setting+0x180>)
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	3302      	adds	r3, #2
 800cbce:	b2da      	uxtb	r2, r3
 800cbd0:	4b41      	ldr	r3, [pc, #260]	@ (800ccd8 <clock_setting+0x180>)
 800cbd2:	701a      	strb	r2, [r3, #0]

				video.file_idx %= 24;
 800cbd4:	4b40      	ldr	r3, [pc, #256]	@ (800ccd8 <clock_setting+0x180>)
 800cbd6:	781a      	ldrb	r2, [r3, #0]
 800cbd8:	4b41      	ldr	r3, [pc, #260]	@ (800cce0 <clock_setting+0x188>)
 800cbda:	fba3 1302 	umull	r1, r3, r3, r2
 800cbde:	0919      	lsrs	r1, r3, #4
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	005b      	lsls	r3, r3, #1
 800cbe4:	440b      	add	r3, r1
 800cbe6:	00db      	lsls	r3, r3, #3
 800cbe8:	1ad3      	subs	r3, r2, r3
 800cbea:	b2da      	uxtb	r2, r3
 800cbec:	4b3a      	ldr	r3, [pc, #232]	@ (800ccd8 <clock_setting+0x180>)
 800cbee:	701a      	strb	r2, [r3, #0]

				file_handler(1);
 800cbf0:	2001      	movs	r0, #1
 800cbf2:	f000 fa47 	bl	800d084 <file_handler>

			}

			// If button minus
			if(!HAL_GPIO_ReadPin(BUTTON_MINUS_GPIO_Port, BUTTON_MINUS_Pin))
 800cbf6:	2101      	movs	r1, #1
 800cbf8:	4838      	ldr	r0, [pc, #224]	@ (800ccdc <clock_setting+0x184>)
 800cbfa:	f7f4 ff7f 	bl	8001afc <HAL_GPIO_ReadPin>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d113      	bne.n	800cc2c <clock_setting+0xd4>
			{

				HAL_Delay(200);
 800cc04:	20c8      	movs	r0, #200	@ 0xc8
 800cc06:	f7f4 f935 	bl	8000e74 <HAL_Delay>

				if(video.file_idx >= 2)
 800cc0a:	4b33      	ldr	r3, [pc, #204]	@ (800ccd8 <clock_setting+0x180>)
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d906      	bls.n	800cc20 <clock_setting+0xc8>
					video.file_idx -= 2;
 800cc12:	4b31      	ldr	r3, [pc, #196]	@ (800ccd8 <clock_setting+0x180>)
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	3b02      	subs	r3, #2
 800cc18:	b2da      	uxtb	r2, r3
 800cc1a:	4b2f      	ldr	r3, [pc, #188]	@ (800ccd8 <clock_setting+0x180>)
 800cc1c:	701a      	strb	r2, [r3, #0]
 800cc1e:	e002      	b.n	800cc26 <clock_setting+0xce>
				else
					video.file_idx = 22;
 800cc20:	4b2d      	ldr	r3, [pc, #180]	@ (800ccd8 <clock_setting+0x180>)
 800cc22:	2216      	movs	r2, #22
 800cc24:	701a      	strb	r2, [r3, #0]

				file_handler(1);
 800cc26:	2001      	movs	r0, #1
 800cc28:	f000 fa2c 	bl	800d084 <file_handler>

			}

			// If button settings
			if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800cc2c:	2108      	movs	r1, #8
 800cc2e:	482b      	ldr	r0, [pc, #172]	@ (800ccdc <clock_setting+0x184>)
 800cc30:	f7f4 ff64 	bl	8001afc <HAL_GPIO_ReadPin>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d148      	bne.n	800cccc <clock_setting+0x174>
			{

				HAL_Delay(200);
 800cc3a:	20c8      	movs	r0, #200	@ 0xc8
 800cc3c:	f7f4 f91a 	bl	8000e74 <HAL_Delay>

				video.set = SET_MINUTES;
 800cc40:	4b25      	ldr	r3, [pc, #148]	@ (800ccd8 <clock_setting+0x180>)
 800cc42:	2202      	movs	r2, #2
 800cc44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

			}

			break;
 800cc48:	e040      	b.n	800cccc <clock_setting+0x174>

		case SET_MINUTES:

			// If button plus
			if(!HAL_GPIO_ReadPin(BUTTON_PLUS_GPIO_Port, BUTTON_PLUS_Pin))
 800cc4a:	2180      	movs	r1, #128	@ 0x80
 800cc4c:	4823      	ldr	r0, [pc, #140]	@ (800ccdc <clock_setting+0x184>)
 800cc4e:	f7f4 ff55 	bl	8001afc <HAL_GPIO_ReadPin>
 800cc52:	4603      	mov	r3, r0
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d106      	bne.n	800cc66 <clock_setting+0x10e>
			{

				HAL_Delay(200);
 800cc58:	20c8      	movs	r0, #200	@ 0xc8
 800cc5a:	f7f4 f90b 	bl	8000e74 <HAL_Delay>

				show_frame(1800);
 800cc5e:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 800cc62:	f000 f945 	bl	800cef0 <show_frame>

			}

			// If button minus
			if(!HAL_GPIO_ReadPin(BUTTON_MINUS_GPIO_Port, BUTTON_MINUS_Pin))
 800cc66:	2101      	movs	r1, #1
 800cc68:	481c      	ldr	r0, [pc, #112]	@ (800ccdc <clock_setting+0x184>)
 800cc6a:	f7f4 ff47 	bl	8001afc <HAL_GPIO_ReadPin>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d113      	bne.n	800cc9c <clock_setting+0x144>
			{

				HAL_Delay(200);
 800cc74:	20c8      	movs	r0, #200	@ 0xc8
 800cc76:	f7f4 f8fd 	bl	8000e74 <HAL_Delay>

				if(video.file_idx >= 1)
 800cc7a:	4b17      	ldr	r3, [pc, #92]	@ (800ccd8 <clock_setting+0x180>)
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d006      	beq.n	800cc90 <clock_setting+0x138>
					video.file_idx -= 1;
 800cc82:	4b15      	ldr	r3, [pc, #84]	@ (800ccd8 <clock_setting+0x180>)
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	3b01      	subs	r3, #1
 800cc88:	b2da      	uxtb	r2, r3
 800cc8a:	4b13      	ldr	r3, [pc, #76]	@ (800ccd8 <clock_setting+0x180>)
 800cc8c:	701a      	strb	r2, [r3, #0]
 800cc8e:	e002      	b.n	800cc96 <clock_setting+0x13e>
				else
					video.file_idx = 0;
 800cc90:	4b11      	ldr	r3, [pc, #68]	@ (800ccd8 <clock_setting+0x180>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	701a      	strb	r2, [r3, #0]
				show_frame(0);
 800cc96:	2000      	movs	r0, #0
 800cc98:	f000 f92a 	bl	800cef0 <show_frame>

			}

			// If button settings
			if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800cc9c:	2108      	movs	r1, #8
 800cc9e:	480f      	ldr	r0, [pc, #60]	@ (800ccdc <clock_setting+0x184>)
 800cca0:	f7f4 ff2c 	bl	8001afc <HAL_GPIO_ReadPin>
 800cca4:	4603      	mov	r3, r0
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d112      	bne.n	800ccd0 <clock_setting+0x178>
			{

				HAL_Delay(200);
 800ccaa:	20c8      	movs	r0, #200	@ 0xc8
 800ccac:	f7f4 f8e2 	bl	8000e74 <HAL_Delay>

				video.set = SET_START;
 800ccb0:	4b09      	ldr	r3, [pc, #36]	@ (800ccd8 <clock_setting+0x180>)
 800ccb2:	2203      	movs	r2, #3
 800ccb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

			}


			break;
 800ccb8:	e00a      	b.n	800ccd0 <clock_setting+0x178>

		case SET_START:

			video.set = SET_IDLE;
 800ccba:	4b07      	ldr	r3, [pc, #28]	@ (800ccd8 <clock_setting+0x180>)
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			video.video_mode = NORMAL_MODE;
 800ccc2:	4b05      	ldr	r3, [pc, #20]	@ (800ccd8 <clock_setting+0x180>)
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	f883 2020 	strb.w	r2, [r3, #32]

			break;
 800ccca:	e002      	b.n	800ccd2 <clock_setting+0x17a>
			break;
 800cccc:	bf00      	nop
 800ccce:	e000      	b.n	800ccd2 <clock_setting+0x17a>
			break;
 800ccd0:	bf00      	nop

	}

}
 800ccd2:	bf00      	nop
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	200188a0 	.word	0x200188a0
 800ccdc:	58022400 	.word	0x58022400
 800cce0:	aaaaaaab 	.word	0xaaaaaaab
 800cce4:	00000000 	.word	0x00000000

0800cce8 <clock_normal>:


static void clock_normal(void)
{
 800cce8:	b590      	push	{r4, r7, lr}
 800ccea:	b085      	sub	sp, #20
 800ccec:	af02      	add	r7, sp, #8

	// Save the frame into MJPEG_VideoBuffer
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File);
 800ccee:	4976      	ldr	r1, [pc, #472]	@ (800cec8 <clock_normal+0x1e0>)
 800ccf0:	4876      	ldr	r0, [pc, #472]	@ (800cecc <clock_normal+0x1e4>)
 800ccf2:	f7fe fe79 	bl	800b9e8 <AVI_GetFrame>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	4b75      	ldr	r3, [pc, #468]	@ (800ced0 <clock_normal+0x1e8>)
 800ccfc:	709a      	strb	r2, [r3, #2]

	if(video.frameToSkip > 0)
 800ccfe:	4b74      	ldr	r3, [pc, #464]	@ (800ced0 <clock_normal+0x1e8>)
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	dd0a      	ble.n	800cd1c <clock_normal+0x34>
	{

		// Skip frames until the the watch time is
		// synchronized with the actual time

		video.frameToSkip--;
 800cd06:	4b72      	ldr	r3, [pc, #456]	@ (800ced0 <clock_normal+0x1e8>)
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	4a70      	ldr	r2, [pc, #448]	@ (800ced0 <clock_normal+0x1e8>)
 800cd0e:	60d3      	str	r3, [r2, #12]
		AVI_Handel.CurrentImage++;
 800cd10:	4b6e      	ldr	r3, [pc, #440]	@ (800cecc <clock_normal+0x1e4>)
 800cd12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd14:	3301      	adds	r3, #1
 800cd16:	4a6d      	ldr	r2, [pc, #436]	@ (800cecc <clock_normal+0x1e4>)
 800cd18:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if(video.frameToSkip < 0)
			video.frameToSkip = 0;

	}

}
 800cd1a:	e0ca      	b.n	800ceb2 <clock_normal+0x1ca>
	else if(video.FrameType == AVI_VIDEO_FRAME)
 800cd1c:	4b6c      	ldr	r3, [pc, #432]	@ (800ced0 <clock_normal+0x1e8>)
 800cd1e:	789b      	ldrb	r3, [r3, #2]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	f040 80c6 	bne.w	800ceb2 <clock_normal+0x1ca>
		AVI_Handel.CurrentImage++;
 800cd26:	4b69      	ldr	r3, [pc, #420]	@ (800cecc <clock_normal+0x1e4>)
 800cd28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	4a67      	ldr	r2, [pc, #412]	@ (800cecc <clock_normal+0x1e4>)
 800cd2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 800cd30:	4968      	ldr	r1, [pc, #416]	@ (800ced4 <clock_normal+0x1ec>)
 800cd32:	4b66      	ldr	r3, [pc, #408]	@ (800cecc <clock_normal+0x1e4>)
 800cd34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd36:	4b66      	ldr	r3, [pc, #408]	@ (800ced0 <clock_normal+0x1e8>)
 800cd38:	69db      	ldr	r3, [r3, #28]
 800cd3a:	4867      	ldr	r0, [pc, #412]	@ (800ced8 <clock_normal+0x1f0>)
 800cd3c:	f7ff f9f0 	bl	800c120 <JPEG_Decode_DMA>
		while(Jpeg_HWDecodingEnd == 0);
 800cd40:	bf00      	nop
 800cd42:	4b66      	ldr	r3, [pc, #408]	@ (800cedc <clock_normal+0x1f4>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d0fb      	beq.n	800cd42 <clock_normal+0x5a>
		if(video.isfirstFrame == 1)
 800cd4a:	4b61      	ldr	r3, [pc, #388]	@ (800ced0 <clock_normal+0x1e8>)
 800cd4c:	785b      	ldrb	r3, [r3, #1]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d13b      	bne.n	800cdca <clock_normal+0xe2>
			video.isfirstFrame = 0;
 800cd52:	4b5f      	ldr	r3, [pc, #380]	@ (800ced0 <clock_normal+0x1e8>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	705a      	strb	r2, [r3, #1]
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800cd58:	4961      	ldr	r1, [pc, #388]	@ (800cee0 <clock_normal+0x1f8>)
 800cd5a:	485f      	ldr	r0, [pc, #380]	@ (800ced8 <clock_normal+0x1f0>)
 800cd5c:	f7f4 ff82 	bl	8001c64 <HAL_JPEG_GetInfo>
			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800cd60:	4b5f      	ldr	r3, [pc, #380]	@ (800cee0 <clock_normal+0x1f8>)
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	4a5e      	ldr	r2, [pc, #376]	@ (800cee0 <clock_normal+0x1f8>)
 800cd68:	6892      	ldr	r2, [r2, #8]
 800cd6a:	b291      	uxth	r1, r2
 800cd6c:	4a5c      	ldr	r2, [pc, #368]	@ (800cee0 <clock_normal+0x1f8>)
 800cd6e:	6852      	ldr	r2, [r2, #4]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f000 fb45 	bl	800d400 <DMA2D_Init>
			video.width = JPEG_Info.ImageWidth;
 800cd76:	4b5a      	ldr	r3, [pc, #360]	@ (800cee0 <clock_normal+0x1f8>)
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	4b54      	ldr	r3, [pc, #336]	@ (800ced0 <clock_normal+0x1e8>)
 800cd7e:	809a      	strh	r2, [r3, #4]
			video.height = JPEG_Info.ImageHeight;
 800cd80:	4b57      	ldr	r3, [pc, #348]	@ (800cee0 <clock_normal+0x1f8>)
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	4b52      	ldr	r3, [pc, #328]	@ (800ced0 <clock_normal+0x1e8>)
 800cd88:	80da      	strh	r2, [r3, #6]
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 800cd8a:	4b51      	ldr	r3, [pc, #324]	@ (800ced0 <clock_normal+0x1e8>)
 800cd8c:	889b      	ldrh	r3, [r3, #4]
 800cd8e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	da00      	bge.n	800cd98 <clock_normal+0xb0>
 800cd96:	3301      	adds	r3, #1
 800cd98:	105b      	asrs	r3, r3, #1
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	4b4c      	ldr	r3, [pc, #304]	@ (800ced0 <clock_normal+0x1e8>)
 800cd9e:	811a      	strh	r2, [r3, #8]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 800cda0:	4b4b      	ldr	r3, [pc, #300]	@ (800ced0 <clock_normal+0x1e8>)
 800cda2:	88db      	ldrh	r3, [r3, #6]
 800cda4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	da00      	bge.n	800cdae <clock_normal+0xc6>
 800cdac:	3301      	adds	r3, #1
 800cdae:	105b      	asrs	r3, r3, #1
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	4b47      	ldr	r3, [pc, #284]	@ (800ced0 <clock_normal+0x1e8>)
 800cdb4:	815a      	strh	r2, [r3, #10]
			video.frame_time = AVI_Handel.aviInfo.SecPerFrame;
 800cdb6:	4b45      	ldr	r3, [pc, #276]	@ (800cecc <clock_normal+0x1e4>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	4b44      	ldr	r3, [pc, #272]	@ (800ced0 <clock_normal+0x1e8>)
 800cdbe:	821a      	strh	r2, [r3, #16]
			video.tick_offset = HAL_GetTick();
 800cdc0:	f7f4 f84c 	bl	8000e5c <HAL_GetTick>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	4a42      	ldr	r2, [pc, #264]	@ (800ced0 <clock_normal+0x1e8>)
 800cdc8:	6193      	str	r3, [r2, #24]
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)LCD_FRAME_BUFFER, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800cdca:	4b41      	ldr	r3, [pc, #260]	@ (800ced0 <clock_normal+0x1e8>)
 800cdcc:	69db      	ldr	r3, [r3, #28]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	4b43      	ldr	r3, [pc, #268]	@ (800cee0 <clock_normal+0x1f8>)
 800cdd2:	68db      	ldr	r3, [r3, #12]
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	4b42      	ldr	r3, [pc, #264]	@ (800cee0 <clock_normal+0x1f8>)
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	4941      	ldr	r1, [pc, #260]	@ (800cee4 <clock_normal+0x1fc>)
 800cdde:	f000 fb8d 	bl	800d4fc <DMA2D_CopyBuffer>
		video.jpegOutDataAdreess = (video.jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;
 800cde2:	4b3b      	ldr	r3, [pc, #236]	@ (800ced0 <clock_normal+0x1e8>)
 800cde4:	69db      	ldr	r3, [r3, #28]
 800cde6:	4a40      	ldr	r2, [pc, #256]	@ (800cee8 <clock_normal+0x200>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d101      	bne.n	800cdf0 <clock_normal+0x108>
 800cdec:	4b3f      	ldr	r3, [pc, #252]	@ (800ceec <clock_normal+0x204>)
 800cdee:	e000      	b.n	800cdf2 <clock_normal+0x10a>
 800cdf0:	4b3d      	ldr	r3, [pc, #244]	@ (800cee8 <clock_normal+0x200>)
 800cdf2:	4a37      	ldr	r2, [pc, #220]	@ (800ced0 <clock_normal+0x1e8>)
 800cdf4:	61d3      	str	r3, [r2, #28]
		pOut.u8Arr = (uint8_t *)LCD_FRAME_BUFFER;
 800cdf6:	4b3b      	ldr	r3, [pc, #236]	@ (800cee4 <clock_normal+0x1fc>)
 800cdf8:	603b      	str	r3, [r7, #0]
		depth24To16(&pOut, ( video.width * video.height ), 3);
 800cdfa:	4b35      	ldr	r3, [pc, #212]	@ (800ced0 <clock_normal+0x1e8>)
 800cdfc:	889a      	ldrh	r2, [r3, #4]
 800cdfe:	4b34      	ldr	r3, [pc, #208]	@ (800ced0 <clock_normal+0x1e8>)
 800ce00:	88db      	ldrh	r3, [r3, #6]
 800ce02:	fb12 f303 	smulbb	r3, r2, r3
 800ce06:	b299      	uxth	r1, r3
 800ce08:	463b      	mov	r3, r7
 800ce0a:	2203      	movs	r2, #3
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f000 fa1b 	bl	800d248 <depth24To16>
		lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 800ce12:	4b2f      	ldr	r3, [pc, #188]	@ (800ced0 <clock_normal+0x1e8>)
 800ce14:	8918      	ldrh	r0, [r3, #8]
 800ce16:	4b2e      	ldr	r3, [pc, #184]	@ (800ced0 <clock_normal+0x1e8>)
 800ce18:	8959      	ldrh	r1, [r3, #10]
 800ce1a:	4b2d      	ldr	r3, [pc, #180]	@ (800ced0 <clock_normal+0x1e8>)
 800ce1c:	889a      	ldrh	r2, [r3, #4]
 800ce1e:	4b2c      	ldr	r3, [pc, #176]	@ (800ced0 <clock_normal+0x1e8>)
 800ce20:	88dc      	ldrh	r4, [r3, #6]
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	9300      	str	r3, [sp, #0]
 800ce26:	4623      	mov	r3, r4
 800ce28:	f000 fa98 	bl	800d35c <lcd_draw>
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 800ce2c:	f7f4 f816 	bl	8000e5c <HAL_GetTick>
 800ce30:	4602      	mov	r2, r0
 800ce32:	4b27      	ldr	r3, [pc, #156]	@ (800ced0 <clock_normal+0x1e8>)
 800ce34:	699b      	ldr	r3, [r3, #24]
 800ce36:	1ad3      	subs	r3, r2, r3
 800ce38:	4a25      	ldr	r2, [pc, #148]	@ (800ced0 <clock_normal+0x1e8>)
 800ce3a:	6153      	str	r3, [r2, #20]
		float watch_time = ( AVI_Handel.CurrentImage * ( video.frame_time / 1000.0 ) );
 800ce3c:	4b23      	ldr	r3, [pc, #140]	@ (800cecc <clock_normal+0x1e4>)
 800ce3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce40:	ee07 3a90 	vmov	s15, r3
 800ce44:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800ce48:	4b21      	ldr	r3, [pc, #132]	@ (800ced0 <clock_normal+0x1e8>)
 800ce4a:	8a1b      	ldrh	r3, [r3, #16]
 800ce4c:	ee07 3a90 	vmov	s15, r3
 800ce50:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ce54:	ed9f 4b1a 	vldr	d4, [pc, #104]	@ 800cec0 <clock_normal+0x1d8>
 800ce58:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800ce5c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ce60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ce64:	edc7 7a01 	vstr	s15, [r7, #4]
		video.frameToSkip = ( ( video.actual_time - watch_time ) / ( video.frame_time / 1000.0 ) );
 800ce68:	4b19      	ldr	r3, [pc, #100]	@ (800ced0 <clock_normal+0x1e8>)
 800ce6a:	695b      	ldr	r3, [r3, #20]
 800ce6c:	ee07 3a90 	vmov	s15, r3
 800ce70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ce74:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce7c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800ce80:	4b13      	ldr	r3, [pc, #76]	@ (800ced0 <clock_normal+0x1e8>)
 800ce82:	8a1b      	ldrh	r3, [r3, #16]
 800ce84:	ee07 3a90 	vmov	s15, r3
 800ce88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ce8c:	ed9f 4b0c 	vldr	d4, [pc, #48]	@ 800cec0 <clock_normal+0x1d8>
 800ce90:	ee87 6b04 	vdiv.f64	d6, d7, d4
 800ce94:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800ce98:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ce9c:	ee17 2a90 	vmov	r2, s15
 800cea0:	4b0b      	ldr	r3, [pc, #44]	@ (800ced0 <clock_normal+0x1e8>)
 800cea2:	60da      	str	r2, [r3, #12]
		if(video.frameToSkip < 0)
 800cea4:	4b0a      	ldr	r3, [pc, #40]	@ (800ced0 <clock_normal+0x1e8>)
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	da02      	bge.n	800ceb2 <clock_normal+0x1ca>
			video.frameToSkip = 0;
 800ceac:	4b08      	ldr	r3, [pc, #32]	@ (800ced0 <clock_normal+0x1e8>)
 800ceae:	2200      	movs	r2, #0
 800ceb0:	60da      	str	r2, [r3, #12]
}
 800ceb2:	bf00      	nop
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd90      	pop	{r4, r7, pc}
 800ceba:	bf00      	nop
 800cebc:	f3af 8000 	nop.w
 800cec0:	00000000 	.word	0x00000000
 800cec4:	408f4000 	.word	0x408f4000
 800cec8:	20018628 	.word	0x20018628
 800cecc:	20018858 	.word	0x20018858
 800ced0:	200188a0 	.word	0x200188a0
 800ced4:	200003f0 	.word	0x200003f0
 800ced8:	200001e4 	.word	0x200001e4
 800cedc:	200001d0 	.word	0x200001d0
 800cee0:	200002a4 	.word	0x200002a4
 800cee4:	d0a00000 	.word	0xd0a00000
 800cee8:	d0600000 	.word	0xd0600000
 800ceec:	d0800000 	.word	0xd0800000

0800cef0 <show_frame>:


static void show_frame(uint32_t frame_num)
{
 800cef0:	b590      	push	{r4, r7, lr}
 800cef2:	b089      	sub	sp, #36	@ 0x24
 800cef4:	af02      	add	r7, sp, #8
 800cef6:	6078      	str	r0, [r7, #4]

	for(int i = 0 ; i < frame_num ; i++)
 800cef8:	2300      	movs	r3, #0
 800cefa:	617b      	str	r3, [r7, #20]
 800cefc:	e00f      	b.n	800cf1e <show_frame+0x2e>
	{

		// Save the frame into MJPEG_VideoBuffer
		video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File);
 800cefe:	4957      	ldr	r1, [pc, #348]	@ (800d05c <show_frame+0x16c>)
 800cf00:	4857      	ldr	r0, [pc, #348]	@ (800d060 <show_frame+0x170>)
 800cf02:	f7fe fd71 	bl	800b9e8 <AVI_GetFrame>
 800cf06:	4603      	mov	r3, r0
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	4b56      	ldr	r3, [pc, #344]	@ (800d064 <show_frame+0x174>)
 800cf0c:	709a      	strb	r2, [r3, #2]

		AVI_Handel.CurrentImage++;
 800cf0e:	4b54      	ldr	r3, [pc, #336]	@ (800d060 <show_frame+0x170>)
 800cf10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf12:	3301      	adds	r3, #1
 800cf14:	4a52      	ldr	r2, [pc, #328]	@ (800d060 <show_frame+0x170>)
 800cf16:	62d3      	str	r3, [r2, #44]	@ 0x2c
	for(int i = 0 ; i < frame_num ; i++)
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	617b      	str	r3, [r7, #20]
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d8eb      	bhi.n	800cefe <show_frame+0xe>

	}

	for(int i = 0 ; i < 2 ; i++)
 800cf26:	2300      	movs	r3, #0
 800cf28:	613b      	str	r3, [r7, #16]
 800cf2a:	e08d      	b.n	800d048 <show_frame+0x158>
	{

		// Save the frame into MJPEG_VideoBuffer
		video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File);
 800cf2c:	494b      	ldr	r1, [pc, #300]	@ (800d05c <show_frame+0x16c>)
 800cf2e:	484c      	ldr	r0, [pc, #304]	@ (800d060 <show_frame+0x170>)
 800cf30:	f7fe fd5a 	bl	800b9e8 <AVI_GetFrame>
 800cf34:	4603      	mov	r3, r0
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	4b4a      	ldr	r3, [pc, #296]	@ (800d064 <show_frame+0x174>)
 800cf3a:	709a      	strb	r2, [r3, #2]

		if(video.FrameType == AVI_VIDEO_FRAME)
 800cf3c:	4b49      	ldr	r3, [pc, #292]	@ (800d064 <show_frame+0x174>)
 800cf3e:	789b      	ldrb	r3, [r3, #2]
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d17e      	bne.n	800d042 <show_frame+0x152>
		{

			AVI_Handel.CurrentImage++;
 800cf44:	4b46      	ldr	r3, [pc, #280]	@ (800d060 <show_frame+0x170>)
 800cf46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf48:	3301      	adds	r3, #1
 800cf4a:	4a45      	ldr	r2, [pc, #276]	@ (800d060 <show_frame+0x170>)
 800cf4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

			// Decode the frame inside MJPEG_VideoBuffer and put it into jpegOutDataAdreess in the format YCrCb
			JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 800cf4e:	4946      	ldr	r1, [pc, #280]	@ (800d068 <show_frame+0x178>)
 800cf50:	4b43      	ldr	r3, [pc, #268]	@ (800d060 <show_frame+0x170>)
 800cf52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cf54:	4b43      	ldr	r3, [pc, #268]	@ (800d064 <show_frame+0x174>)
 800cf56:	69db      	ldr	r3, [r3, #28]
 800cf58:	4844      	ldr	r0, [pc, #272]	@ (800d06c <show_frame+0x17c>)
 800cf5a:	f7ff f8e1 	bl	800c120 <JPEG_Decode_DMA>

			while(Jpeg_HWDecodingEnd == 0);
 800cf5e:	bf00      	nop
 800cf60:	4b43      	ldr	r3, [pc, #268]	@ (800d070 <show_frame+0x180>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d0fb      	beq.n	800cf60 <show_frame+0x70>

			if(video.isfirstFrame == 1)
 800cf68:	4b3e      	ldr	r3, [pc, #248]	@ (800d064 <show_frame+0x174>)
 800cf6a:	785b      	ldrb	r3, [r3, #1]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d136      	bne.n	800cfde <show_frame+0xee>
			{

				video.isfirstFrame = 0;
 800cf70:	4b3c      	ldr	r3, [pc, #240]	@ (800d064 <show_frame+0x174>)
 800cf72:	2200      	movs	r2, #0
 800cf74:	705a      	strb	r2, [r3, #1]

				HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800cf76:	493f      	ldr	r1, [pc, #252]	@ (800d074 <show_frame+0x184>)
 800cf78:	483c      	ldr	r0, [pc, #240]	@ (800d06c <show_frame+0x17c>)
 800cf7a:	f7f4 fe73 	bl	8001c64 <HAL_JPEG_GetInfo>

				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800cf7e:	4b3d      	ldr	r3, [pc, #244]	@ (800d074 <show_frame+0x184>)
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	4a3b      	ldr	r2, [pc, #236]	@ (800d074 <show_frame+0x184>)
 800cf86:	6892      	ldr	r2, [r2, #8]
 800cf88:	b291      	uxth	r1, r2
 800cf8a:	4a3a      	ldr	r2, [pc, #232]	@ (800d074 <show_frame+0x184>)
 800cf8c:	6852      	ldr	r2, [r2, #4]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f000 fa36 	bl	800d400 <DMA2D_Init>

				video.width = JPEG_Info.ImageWidth;
 800cf94:	4b37      	ldr	r3, [pc, #220]	@ (800d074 <show_frame+0x184>)
 800cf96:	68db      	ldr	r3, [r3, #12]
 800cf98:	b29a      	uxth	r2, r3
 800cf9a:	4b32      	ldr	r3, [pc, #200]	@ (800d064 <show_frame+0x174>)
 800cf9c:	809a      	strh	r2, [r3, #4]
				video.height = JPEG_Info.ImageHeight;
 800cf9e:	4b35      	ldr	r3, [pc, #212]	@ (800d074 <show_frame+0x184>)
 800cfa0:	689b      	ldr	r3, [r3, #8]
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	4b2f      	ldr	r3, [pc, #188]	@ (800d064 <show_frame+0x174>)
 800cfa6:	80da      	strh	r2, [r3, #6]
				video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 800cfa8:	4b2e      	ldr	r3, [pc, #184]	@ (800d064 <show_frame+0x174>)
 800cfaa:	889b      	ldrh	r3, [r3, #4]
 800cfac:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	da00      	bge.n	800cfb6 <show_frame+0xc6>
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	105b      	asrs	r3, r3, #1
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	4b2a      	ldr	r3, [pc, #168]	@ (800d064 <show_frame+0x174>)
 800cfbc:	811a      	strh	r2, [r3, #8]
				video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 800cfbe:	4b29      	ldr	r3, [pc, #164]	@ (800d064 <show_frame+0x174>)
 800cfc0:	88db      	ldrh	r3, [r3, #6]
 800cfc2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	da00      	bge.n	800cfcc <show_frame+0xdc>
 800cfca:	3301      	adds	r3, #1
 800cfcc:	105b      	asrs	r3, r3, #1
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	4b24      	ldr	r3, [pc, #144]	@ (800d064 <show_frame+0x174>)
 800cfd2:	815a      	strh	r2, [r3, #10]

				video.frame_time = AVI_Handel.aviInfo.SecPerFrame;
 800cfd4:	4b22      	ldr	r3, [pc, #136]	@ (800d060 <show_frame+0x170>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	b29a      	uxth	r2, r3
 800cfda:	4b22      	ldr	r3, [pc, #136]	@ (800d064 <show_frame+0x174>)
 800cfdc:	821a      	strh	r2, [r3, #16]

			}

			// Copies the output frame into LCD_FRAME_BUFFER and does the conversion from YCrCb to RGB888
			DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)LCD_FRAME_BUFFER, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800cfde:	4b21      	ldr	r3, [pc, #132]	@ (800d064 <show_frame+0x174>)
 800cfe0:	69db      	ldr	r3, [r3, #28]
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	4b23      	ldr	r3, [pc, #140]	@ (800d074 <show_frame+0x184>)
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	b29a      	uxth	r2, r3
 800cfea:	4b22      	ldr	r3, [pc, #136]	@ (800d074 <show_frame+0x184>)
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	4921      	ldr	r1, [pc, #132]	@ (800d078 <show_frame+0x188>)
 800cff2:	f000 fa83 	bl	800d4fc <DMA2D_CopyBuffer>

			video.jpegOutDataAdreess = (video.jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;
 800cff6:	4b1b      	ldr	r3, [pc, #108]	@ (800d064 <show_frame+0x174>)
 800cff8:	69db      	ldr	r3, [r3, #28]
 800cffa:	4a20      	ldr	r2, [pc, #128]	@ (800d07c <show_frame+0x18c>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d101      	bne.n	800d004 <show_frame+0x114>
 800d000:	4b1f      	ldr	r3, [pc, #124]	@ (800d080 <show_frame+0x190>)
 800d002:	e000      	b.n	800d006 <show_frame+0x116>
 800d004:	4b1d      	ldr	r3, [pc, #116]	@ (800d07c <show_frame+0x18c>)
 800d006:	4a17      	ldr	r2, [pc, #92]	@ (800d064 <show_frame+0x174>)
 800d008:	61d3      	str	r3, [r2, #28]

			// Implements the data conversion from RGB888 to RGB565
			doubleFormat pOut;
			pOut.u8Arr = (uint8_t *)LCD_FRAME_BUFFER;
 800d00a:	4b1b      	ldr	r3, [pc, #108]	@ (800d078 <show_frame+0x188>)
 800d00c:	60fb      	str	r3, [r7, #12]
			depth24To16(&pOut, ( video.width * video.height ), 3);
 800d00e:	4b15      	ldr	r3, [pc, #84]	@ (800d064 <show_frame+0x174>)
 800d010:	889a      	ldrh	r2, [r3, #4]
 800d012:	4b14      	ldr	r3, [pc, #80]	@ (800d064 <show_frame+0x174>)
 800d014:	88db      	ldrh	r3, [r3, #6]
 800d016:	fb12 f303 	smulbb	r3, r2, r3
 800d01a:	b299      	uxth	r1, r3
 800d01c:	f107 030c 	add.w	r3, r7, #12
 800d020:	2203      	movs	r2, #3
 800d022:	4618      	mov	r0, r3
 800d024:	f000 f910 	bl	800d248 <depth24To16>

			lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 800d028:	4b0e      	ldr	r3, [pc, #56]	@ (800d064 <show_frame+0x174>)
 800d02a:	8918      	ldrh	r0, [r3, #8]
 800d02c:	4b0d      	ldr	r3, [pc, #52]	@ (800d064 <show_frame+0x174>)
 800d02e:	8959      	ldrh	r1, [r3, #10]
 800d030:	4b0c      	ldr	r3, [pc, #48]	@ (800d064 <show_frame+0x174>)
 800d032:	889a      	ldrh	r2, [r3, #4]
 800d034:	4b0b      	ldr	r3, [pc, #44]	@ (800d064 <show_frame+0x174>)
 800d036:	88dc      	ldrh	r4, [r3, #6]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	9300      	str	r3, [sp, #0]
 800d03c:	4623      	mov	r3, r4
 800d03e:	f000 f98d 	bl	800d35c <lcd_draw>
	for(int i = 0 ; i < 2 ; i++)
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	3301      	adds	r3, #1
 800d046:	613b      	str	r3, [r7, #16]
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	f77f af6e 	ble.w	800cf2c <show_frame+0x3c>

		}

	}

}
 800d050:	bf00      	nop
 800d052:	bf00      	nop
 800d054:	371c      	adds	r7, #28
 800d056:	46bd      	mov	sp, r7
 800d058:	bd90      	pop	{r4, r7, pc}
 800d05a:	bf00      	nop
 800d05c:	20018628 	.word	0x20018628
 800d060:	20018858 	.word	0x20018858
 800d064:	200188a0 	.word	0x200188a0
 800d068:	200003f0 	.word	0x200003f0
 800d06c:	200001e4 	.word	0x200001e4
 800d070:	200001d0 	.word	0x200001d0
 800d074:	200002a4 	.word	0x200002a4
 800d078:	d0a00000 	.word	0xd0a00000
 800d07c:	d0600000 	.word	0xd0600000
 800d080:	d0800000 	.word	0xd0800000

0800d084 <file_handler>:


static void file_handler(uint8_t openFile)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af02      	add	r7, sp, #8
 800d08a:	4603      	mov	r3, r0
 800d08c:	71fb      	strb	r3, [r7, #7]
	  // Each file takes 30m

     static uint8_t  new_file_flag = 1;


     if(new_file_flag || openFile)
 800d08e:	4b30      	ldr	r3, [pc, #192]	@ (800d150 <file_handler+0xcc>)
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d102      	bne.n	800d09c <file_handler+0x18>
 800d096:	79fb      	ldrb	r3, [r7, #7]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d02e      	beq.n	800d0fa <file_handler+0x76>
     {

    	 if(openFile)
 800d09c:	79fb      	ldrb	r3, [r7, #7]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d002      	beq.n	800d0a8 <file_handler+0x24>
    		 f_close(&MJPEG_File);
 800d0a2:	482c      	ldr	r0, [pc, #176]	@ (800d154 <file_handler+0xd0>)
 800d0a4:	f003 f9a9 	bl	80103fa <f_close>

    	 new_file_flag = 0;
 800d0a8:	4b29      	ldr	r3, [pc, #164]	@ (800d150 <file_handler+0xcc>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	701a      	strb	r2, [r3, #0]

    	 name = file_name[video.file_idx];
 800d0ae:	4b2a      	ldr	r3, [pc, #168]	@ (800d158 <file_handler+0xd4>)
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	4b29      	ldr	r3, [pc, #164]	@ (800d15c <file_handler+0xd8>)
 800d0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ba:	4a29      	ldr	r2, [pc, #164]	@ (800d160 <file_handler+0xdc>)
 800d0bc:	6013      	str	r3, [r2, #0]

    	 // Open the MJPEG avi file with read access
    	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 800d0be:	4b28      	ldr	r3, [pc, #160]	@ (800d160 <file_handler+0xdc>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	4823      	ldr	r0, [pc, #140]	@ (800d154 <file_handler+0xd0>)
 800d0c8:	f002 fe10 	bl	800fcec <f_open>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d112      	bne.n	800d0f8 <file_handler+0x74>
    	 {

    		 video.isfirstFrame = 1;
 800d0d2:	4b21      	ldr	r3, [pc, #132]	@ (800d158 <file_handler+0xd4>)
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	705a      	strb	r2, [r3, #1]

    		 // parse the AVI file Header
    		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 800d0d8:	2300      	movs	r3, #0
 800d0da:	9301      	str	r3, [sp, #4]
 800d0dc:	4b21      	ldr	r3, [pc, #132]	@ (800d164 <file_handler+0xe0>)
 800d0de:	9300      	str	r3, [sp, #0]
 800d0e0:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 800d0e4:	4a20      	ldr	r2, [pc, #128]	@ (800d168 <file_handler+0xe4>)
 800d0e6:	491b      	ldr	r1, [pc, #108]	@ (800d154 <file_handler+0xd0>)
 800d0e8:	4820      	ldr	r0, [pc, #128]	@ (800d16c <file_handler+0xe8>)
 800d0ea:	f7fe fc3d 	bl	800b968 <AVI_ParserInit>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d002      	beq.n	800d0fa <file_handler+0x76>
    			 while(1);
 800d0f4:	bf00      	nop
 800d0f6:	e7fd      	b.n	800d0f4 <file_handler+0x70>

    	 }
    	 else
    	 {

    		 while(1);
 800d0f8:	e7fe      	b.n	800d0f8 <file_handler+0x74>
    	 }

     }

     // Check for the end of the video
     if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 800d0fa:	4b1c      	ldr	r3, [pc, #112]	@ (800d16c <file_handler+0xe8>)
 800d0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0fe:	4b1b      	ldr	r3, [pc, #108]	@ (800d16c <file_handler+0xe8>)
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	429a      	cmp	r2, r3
 800d104:	d31f      	bcc.n	800d146 <file_handler+0xc2>
     {

    	 video.file_idx++;
 800d106:	4b14      	ldr	r3, [pc, #80]	@ (800d158 <file_handler+0xd4>)
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	3301      	adds	r3, #1
 800d10c:	b2da      	uxtb	r2, r3
 800d10e:	4b12      	ldr	r3, [pc, #72]	@ (800d158 <file_handler+0xd4>)
 800d110:	701a      	strb	r2, [r3, #0]
		 video.file_idx %= 24;	// Restart the index every 24 files ( 12h )
 800d112:	4b11      	ldr	r3, [pc, #68]	@ (800d158 <file_handler+0xd4>)
 800d114:	781a      	ldrb	r2, [r3, #0]
 800d116:	4b16      	ldr	r3, [pc, #88]	@ (800d170 <file_handler+0xec>)
 800d118:	fba3 1302 	umull	r1, r3, r3, r2
 800d11c:	0919      	lsrs	r1, r3, #4
 800d11e:	460b      	mov	r3, r1
 800d120:	005b      	lsls	r3, r3, #1
 800d122:	440b      	add	r3, r1
 800d124:	00db      	lsls	r3, r3, #3
 800d126:	1ad3      	subs	r3, r2, r3
 800d128:	b2da      	uxtb	r2, r3
 800d12a:	4b0b      	ldr	r3, [pc, #44]	@ (800d158 <file_handler+0xd4>)
 800d12c:	701a      	strb	r2, [r3, #0]

		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);  /* wait for the Last DMA2D transfer to ends */
 800d12e:	2132      	movs	r1, #50	@ 0x32
 800d130:	4810      	ldr	r0, [pc, #64]	@ (800d174 <file_handler+0xf0>)
 800d132:	f7f4 f8f6 	bl	8001322 <HAL_DMA2D_PollForTransfer>

		 // Close the avi file
		 f_close(&MJPEG_File);
 800d136:	4807      	ldr	r0, [pc, #28]	@ (800d154 <file_handler+0xd0>)
 800d138:	f003 f95f 	bl	80103fa <f_close>

		 parameters_reset();
 800d13c:	f000 f854 	bl	800d1e8 <parameters_reset>

		 new_file_flag = 1;
 800d140:	4b03      	ldr	r3, [pc, #12]	@ (800d150 <file_handler+0xcc>)
 800d142:	2201      	movs	r2, #1
 800d144:	701a      	strb	r2, [r3, #0]

     }

}
 800d146:	bf00      	nop
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	2000000e 	.word	0x2000000e
 800d154:	20018628 	.word	0x20018628
 800d158:	200188a0 	.word	0x200188a0
 800d15c:	2000038c 	.word	0x2000038c
 800d160:	200003ec 	.word	0x200003ec
 800d164:	200183f0 	.word	0x200183f0
 800d168:	200003f0 	.word	0x200003f0
 800d16c:	20018858 	.word	0x20018858
 800d170:	aaaaaaab 	.word	0xaaaaaaab
 800d174:	2000023c 	.word	0x2000023c

0800d178 <user_buttons_handler>:


static void user_buttons_handler(void)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	af00      	add	r7, sp, #0
	static uint8_t first = 1;
	static uint32_t button_timer = 0;


	// Long press enters in setting mode
	if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800d17c:	2108      	movs	r1, #8
 800d17e:	4816      	ldr	r0, [pc, #88]	@ (800d1d8 <user_buttons_handler+0x60>)
 800d180:	f7f4 fcbc 	bl	8001afc <HAL_GPIO_ReadPin>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d121      	bne.n	800d1ce <user_buttons_handler+0x56>
	{

		if(first)
 800d18a:	4b14      	ldr	r3, [pc, #80]	@ (800d1dc <user_buttons_handler+0x64>)
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d007      	beq.n	800d1a2 <user_buttons_handler+0x2a>
		{

			first = 0;
 800d192:	4b12      	ldr	r3, [pc, #72]	@ (800d1dc <user_buttons_handler+0x64>)
 800d194:	2200      	movs	r2, #0
 800d196:	701a      	strb	r2, [r3, #0]
			button_timer = HAL_GetTick();
 800d198:	f7f3 fe60 	bl	8000e5c <HAL_GetTick>
 800d19c:	4603      	mov	r3, r0
 800d19e:	4a10      	ldr	r2, [pc, #64]	@ (800d1e0 <user_buttons_handler+0x68>)
 800d1a0:	6013      	str	r3, [r2, #0]

		}

		if(abs( HAL_GetTick() - button_timer ) >= 3000)
 800d1a2:	f7f3 fe5b 	bl	8000e5c <HAL_GetTick>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	4b0d      	ldr	r3, [pc, #52]	@ (800d1e0 <user_buttons_handler+0x68>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	1ad3      	subs	r3, r2, r3
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	bfb8      	it	lt
 800d1b2:	425b      	neglt	r3, r3
 800d1b4:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	dd0b      	ble.n	800d1d4 <user_buttons_handler+0x5c>
		{

			video.video_mode = SETTING_MODE;
 800d1bc:	4b09      	ldr	r3, [pc, #36]	@ (800d1e4 <user_buttons_handler+0x6c>)
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f883 2020 	strb.w	r2, [r3, #32]
			video.set = SET_IDLE;
 800d1c4:	4b07      	ldr	r3, [pc, #28]	@ (800d1e4 <user_buttons_handler+0x6c>)
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

		first = 1;

	}

}
 800d1cc:	e002      	b.n	800d1d4 <user_buttons_handler+0x5c>
		first = 1;
 800d1ce:	4b03      	ldr	r3, [pc, #12]	@ (800d1dc <user_buttons_handler+0x64>)
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	701a      	strb	r2, [r3, #0]
}
 800d1d4:	bf00      	nop
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	58022400 	.word	0x58022400
 800d1dc:	2000000f 	.word	0x2000000f
 800d1e0:	200188c4 	.word	0x200188c4
 800d1e4:	200188a0 	.word	0x200188a0

0800d1e8 <parameters_reset>:


static void parameters_reset(void)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	af00      	add	r7, sp, #0

	video.width = 0;
 800d1ec:	4b14      	ldr	r3, [pc, #80]	@ (800d240 <parameters_reset+0x58>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	809a      	strh	r2, [r3, #4]
	video.height = 0;
 800d1f2:	4b13      	ldr	r3, [pc, #76]	@ (800d240 <parameters_reset+0x58>)
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	80da      	strh	r2, [r3, #6]
	video.xPos = 0;
 800d1f8:	4b11      	ldr	r3, [pc, #68]	@ (800d240 <parameters_reset+0x58>)
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	811a      	strh	r2, [r3, #8]
	video.yPos = 0;
 800d1fe:	4b10      	ldr	r3, [pc, #64]	@ (800d240 <parameters_reset+0x58>)
 800d200:	2200      	movs	r2, #0
 800d202:	815a      	strh	r2, [r3, #10]

	video.file_idx = 0;
 800d204:	4b0e      	ldr	r3, [pc, #56]	@ (800d240 <parameters_reset+0x58>)
 800d206:	2200      	movs	r2, #0
 800d208:	701a      	strb	r2, [r3, #0]
	video.FrameType = 0;
 800d20a:	4b0d      	ldr	r3, [pc, #52]	@ (800d240 <parameters_reset+0x58>)
 800d20c:	2200      	movs	r2, #0
 800d20e:	709a      	strb	r2, [r3, #2]

	video.frameToSkip = 0;
 800d210:	4b0b      	ldr	r3, [pc, #44]	@ (800d240 <parameters_reset+0x58>)
 800d212:	2200      	movs	r2, #0
 800d214:	60da      	str	r2, [r3, #12]
	video.frame_time = 0;
 800d216:	4b0a      	ldr	r3, [pc, #40]	@ (800d240 <parameters_reset+0x58>)
 800d218:	2200      	movs	r2, #0
 800d21a:	821a      	strh	r2, [r3, #16]
	video.actual_time = 0;
 800d21c:	4b08      	ldr	r3, [pc, #32]	@ (800d240 <parameters_reset+0x58>)
 800d21e:	2200      	movs	r2, #0
 800d220:	615a      	str	r2, [r3, #20]
	video.tick_offset = 0;
 800d222:	4b07      	ldr	r3, [pc, #28]	@ (800d240 <parameters_reset+0x58>)
 800d224:	2200      	movs	r2, #0
 800d226:	619a      	str	r2, [r3, #24]
	video.jpegOutDataAdreess = JPEG_OUTPUT_DATA_BUFFER0;
 800d228:	4b05      	ldr	r3, [pc, #20]	@ (800d240 <parameters_reset+0x58>)
 800d22a:	4a06      	ldr	r2, [pc, #24]	@ (800d244 <parameters_reset+0x5c>)
 800d22c:	61da      	str	r2, [r3, #28]

	//video.video_mode = NORMAL_MODE;
	video.set = SET_IDLE;
 800d22e:	4b04      	ldr	r3, [pc, #16]	@ (800d240 <parameters_reset+0x58>)
 800d230:	2200      	movs	r2, #0
 800d232:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

}
 800d236:	bf00      	nop
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr
 800d240:	200188a0 	.word	0x200188a0
 800d244:	d0600000 	.word	0xd0600000

0800d248 <depth24To16>:


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	460b      	mov	r3, r1
 800d252:	807b      	strh	r3, [r7, #2]
 800d254:	4613      	mov	r3, r2
 800d256:	707b      	strb	r3, [r7, #1]

	uint8_t b;
	uint8_t g;
	uint8_t r;

	int i = 0;
 800d258:	2300      	movs	r3, #0
 800d25a:	60fb      	str	r3, [r7, #12]


	// Only half of the frame is handled per time
	// Alternate the top and bottom half every cycle
    if(swap)
 800d25c:	4b3d      	ldr	r3, [pc, #244]	@ (800d354 <depth24To16+0x10c>)
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d00c      	beq.n	800d27e <depth24To16+0x36>
    {

    	swap = 0;
 800d264:	4b3b      	ldr	r3, [pc, #236]	@ (800d354 <depth24To16+0x10c>)
 800d266:	2200      	movs	r2, #0
 800d268:	701a      	strb	r2, [r3, #0]

    	i = 0;
 800d26a:	2300      	movs	r3, #0
 800d26c:	60fb      	str	r3, [r7, #12]
    	length /= 2;
 800d26e:	887b      	ldrh	r3, [r7, #2]
 800d270:	085b      	lsrs	r3, r3, #1
 800d272:	807b      	strh	r3, [r7, #2]
    	length += 1000;
 800d274:	887b      	ldrh	r3, [r7, #2]
 800d276:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d27a:	807b      	strh	r3, [r7, #2]
 800d27c:	e05e      	b.n	800d33c <depth24To16+0xf4>

    }
    else
    {

    	swap = 1;
 800d27e:	4b35      	ldr	r3, [pc, #212]	@ (800d354 <depth24To16+0x10c>)
 800d280:	2201      	movs	r2, #1
 800d282:	701a      	strb	r2, [r3, #0]

    	i = ( length / 2 ) - 2000;
 800d284:	887b      	ldrh	r3, [r7, #2]
 800d286:	085b      	lsrs	r3, r3, #1
 800d288:	b29b      	uxth	r3, r3
 800d28a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800d28e:	60fb      	str	r3, [r7, #12]

    }

	for( ; i < length ; i++)
 800d290:	e054      	b.n	800d33c <depth24To16+0xf4>
	{

		b = pxArr->u8Arr[i*bpx];
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	787a      	ldrb	r2, [r7, #1]
 800d298:	68f9      	ldr	r1, [r7, #12]
 800d29a:	fb01 f202 	mul.w	r2, r1, r2
 800d29e:	4413      	add	r3, r2
 800d2a0:	781b      	ldrb	r3, [r3, #0]
 800d2a2:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681a      	ldr	r2, [r3, #0]
 800d2a8:	787b      	ldrb	r3, [r7, #1]
 800d2aa:	68f9      	ldr	r1, [r7, #12]
 800d2ac:	fb01 f303 	mul.w	r3, r1, r3
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	4413      	add	r3, r2
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	787b      	ldrb	r3, [r7, #1]
 800d2be:	68f9      	ldr	r1, [r7, #12]
 800d2c0:	fb01 f303 	mul.w	r3, r1, r3
 800d2c4:	3302      	adds	r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 800d2cc:	7a7b      	ldrb	r3, [r7, #9]
 800d2ce:	021b      	lsls	r3, r3, #8
 800d2d0:	b21a      	sxth	r2, r3
 800d2d2:	4b21      	ldr	r3, [pc, #132]	@ (800d358 <depth24To16+0x110>)
 800d2d4:	4013      	ands	r3, r2
 800d2d6:	b21a      	sxth	r2, r3
 800d2d8:	7abb      	ldrb	r3, [r7, #10]
 800d2da:	00db      	lsls	r3, r3, #3
 800d2dc:	b21b      	sxth	r3, r3
 800d2de:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800d2e2:	b21b      	sxth	r3, r3
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	b21a      	sxth	r2, r3
 800d2e8:	7afb      	ldrb	r3, [r7, #11]
 800d2ea:	08db      	lsrs	r3, r3, #3
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	b21b      	sxth	r3, r3
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	b219      	sxth	r1, r3
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	005b      	lsls	r3, r3, #1
 800d2fc:	4413      	add	r3, r2
 800d2fe:	b28a      	uxth	r2, r1
 800d300:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	005b      	lsls	r3, r3, #1
 800d30a:	4413      	add	r3, r2
 800d30c:	881b      	ldrh	r3, [r3, #0]
 800d30e:	021b      	lsls	r3, r3, #8
 800d310:	b21a      	sxth	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6819      	ldr	r1, [r3, #0]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	005b      	lsls	r3, r3, #1
 800d31a:	440b      	add	r3, r1
 800d31c:	881b      	ldrh	r3, [r3, #0]
 800d31e:	0a1b      	lsrs	r3, r3, #8
 800d320:	b29b      	uxth	r3, r3
 800d322:	b21b      	sxth	r3, r3
 800d324:	4313      	orrs	r3, r2
 800d326:	b219      	sxth	r1, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	005b      	lsls	r3, r3, #1
 800d330:	4413      	add	r3, r2
 800d332:	b28a      	uxth	r2, r1
 800d334:	801a      	strh	r2, [r3, #0]
	for( ; i < length ; i++)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	3301      	adds	r3, #1
 800d33a:	60fb      	str	r3, [r7, #12]
 800d33c:	887b      	ldrh	r3, [r7, #2]
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	429a      	cmp	r2, r3
 800d342:	dba6      	blt.n	800d292 <depth24To16+0x4a>

	}

}
 800d344:	bf00      	nop
 800d346:	bf00      	nop
 800d348:	3714      	adds	r7, #20
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr
 800d352:	bf00      	nop
 800d354:	200188c8 	.word	0x200188c8
 800d358:	fffff800 	.word	0xfffff800

0800d35c <lcd_draw>:


static void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 800d35c:	b590      	push	{r4, r7, lr}
 800d35e:	b087      	sub	sp, #28
 800d360:	af00      	add	r7, sp, #0
 800d362:	4604      	mov	r4, r0
 800d364:	4608      	mov	r0, r1
 800d366:	4611      	mov	r1, r2
 800d368:	461a      	mov	r2, r3
 800d36a:	4623      	mov	r3, r4
 800d36c:	80fb      	strh	r3, [r7, #6]
 800d36e:	4603      	mov	r3, r0
 800d370:	80bb      	strh	r3, [r7, #4]
 800d372:	460b      	mov	r3, r1
 800d374:	807b      	strh	r3, [r7, #2]
 800d376:	4613      	mov	r3, r2
 800d378:	803b      	strh	r3, [r7, #0]
	   struct GC9A01_frame frame;


		// Only half of the frame is handled per time
		// Alternate the top and bottom half every cycle
	   	if(swap)
 800d37a:	4b20      	ldr	r3, [pc, #128]	@ (800d3fc <lcd_draw+0xa0>)
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d00b      	beq.n	800d39a <lcd_draw+0x3e>
	   	{

	   		swap = 0;
 800d382:	4b1e      	ldr	r3, [pc, #120]	@ (800d3fc <lcd_draw+0xa0>)
 800d384:	2200      	movs	r2, #0
 800d386:	701a      	strb	r2, [r3, #0]

	        frame.start.X = 0;
 800d388:	2300      	movs	r3, #0
 800d38a:	81bb      	strh	r3, [r7, #12]
	        frame.start.Y = 0;
 800d38c:	2300      	movs	r3, #0
 800d38e:	81fb      	strh	r3, [r7, #14]
	        frame.end.X = 239;
 800d390:	23ef      	movs	r3, #239	@ 0xef
 800d392:	823b      	strh	r3, [r7, #16]
	        frame.end.Y = 119;
 800d394:	2377      	movs	r3, #119	@ 0x77
 800d396:	827b      	strh	r3, [r7, #18]
 800d398:	e00e      	b.n	800d3b8 <lcd_draw+0x5c>

	   	}
	   	else
	   	{

	   		swap = 1;
 800d39a:	4b18      	ldr	r3, [pc, #96]	@ (800d3fc <lcd_draw+0xa0>)
 800d39c:	2201      	movs	r2, #1
 800d39e:	701a      	strb	r2, [r3, #0]

	   		data += ( 240 * 240 );
 800d3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a2:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800d3a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	        frame.start.X = 0;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	81bb      	strh	r3, [r7, #12]
	        frame.start.Y = 120;
 800d3ac:	2378      	movs	r3, #120	@ 0x78
 800d3ae:	81fb      	strh	r3, [r7, #14]
	        frame.end.X = 239;
 800d3b0:	23ef      	movs	r3, #239	@ 0xef
 800d3b2:	823b      	strh	r3, [r7, #16]
	        frame.end.Y = 239;
 800d3b4:	23ef      	movs	r3, #239	@ 0xef
 800d3b6:	827b      	strh	r3, [r7, #18]

	   	}

	   	// Sends the block of data in a single time

	    GC9A01_set_frame(frame);
 800d3b8:	f107 030c 	add.w	r3, r7, #12
 800d3bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d3c0:	f7fe fe55 	bl	800c06e <GC9A01_set_frame>
	    GC9A01_write_command(MEM_WR);
 800d3c4:	202c      	movs	r0, #44	@ 0x2c
 800d3c6:	f7fe fbd1 	bl	800bb6c <GC9A01_write_command>

	    GC9A01_set_data_command(ON);
 800d3ca:	2001      	movs	r0, #1
 800d3cc:	f7fe fb9a 	bl	800bb04 <GC9A01_set_data_command>
	    GC9A01_set_chip_select(OFF);
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	f7fe fbb1 	bl	800bb38 <GC9A01_set_chip_select>

	    uint32_t total_bytes = wd * ht;		// 2 byte per pixel
 800d3d6:	887b      	ldrh	r3, [r7, #2]
 800d3d8:	883a      	ldrh	r2, [r7, #0]
 800d3da:	fb02 f303 	mul.w	r3, r2, r3
 800d3de:	617b      	str	r3, [r7, #20]
	    GC9A01_spi_tx(data, total_bytes);
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d3e8:	f7fe fe7e 	bl	800c0e8 <GC9A01_spi_tx>

	    GC9A01_set_chip_select(ON);
 800d3ec:	2001      	movs	r0, #1
 800d3ee:	f7fe fba3 	bl	800bb38 <GC9A01_set_chip_select>

}
 800d3f2:	bf00      	nop
 800d3f4:	371c      	adds	r7, #28
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd90      	pop	{r4, r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	200188c9 	.word	0x200188c9

0800d400 <DMA2D_Init>:


static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	4603      	mov	r3, r0
 800d408:	603a      	str	r2, [r7, #0]
 800d40a:	80fb      	strh	r3, [r7, #6]
 800d40c:	460b      	mov	r3, r1
 800d40e:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 800d410:	2301      	movs	r3, #1
 800d412:	60fb      	str	r3, [r7, #12]
 800d414:	2300      	movs	r3, #0
 800d416:	60bb      	str	r3, [r7, #8]


  HAL_DMA2D_MspInit(&DMA2D_Handle);
 800d418:	4836      	ldr	r0, [pc, #216]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d41a:	f000 f9f9 	bl	800d810 <HAL_DMA2D_MspInit>

  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	2b01      	cmp	r3, #1
 800d422:	d10d      	bne.n	800d440 <DMA2D_Init+0x40>
  {

    cssMode = DMA2D_CSS_420;
 800d424:	2302      	movs	r3, #2
 800d426:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800d428:	88fb      	ldrh	r3, [r7, #6]
 800d42a:	f003 030f 	and.w	r3, r3, #15
 800d42e:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d025      	beq.n	800d482 <DMA2D_Init+0x82>
    {

      inputLineOffset = 16 - inputLineOffset;
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	f1c3 0310 	rsb	r3, r3, #16
 800d43c:	60bb      	str	r3, [r7, #8]
 800d43e:	e020      	b.n	800d482 <DMA2D_Init+0x82>

    }

  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10d      	bne.n	800d462 <DMA2D_Init+0x62>
  {

    cssMode = DMA2D_NO_CSS;
 800d446:	2300      	movs	r3, #0
 800d448:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 8;
 800d44a:	88fb      	ldrh	r3, [r7, #6]
 800d44c:	f003 0307 	and.w	r3, r3, #7
 800d450:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d014      	beq.n	800d482 <DMA2D_Init+0x82>
    {

      inputLineOffset = 8 - inputLineOffset;
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	f1c3 0308 	rsb	r3, r3, #8
 800d45e:	60bb      	str	r3, [r7, #8]
 800d460:	e00f      	b.n	800d482 <DMA2D_Init+0x82>

    }

  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b02      	cmp	r3, #2
 800d466:	d10c      	bne.n	800d482 <DMA2D_Init+0x82>
  {

    cssMode = DMA2D_CSS_422;
 800d468:	2301      	movs	r3, #1
 800d46a:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800d46c:	88fb      	ldrh	r3, [r7, #6]
 800d46e:	f003 030f 	and.w	r3, r3, #15
 800d472:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d003      	beq.n	800d482 <DMA2D_Init+0x82>
    {

      inputLineOffset = 16 - inputLineOffset;
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	f1c3 0310 	rsb	r3, r3, #16
 800d480:	60bb      	str	r3, [r7, #8]
    }

  }

  // Configure the DMA2D Mode, Color Mode and output offset
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 800d482:	4b1c      	ldr	r3, [pc, #112]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d484:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d488:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 800d48a:	4b1a      	ldr	r3, [pc, #104]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d48c:	2201      	movs	r2, #1
 800d48e:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 800d490:	88fb      	ldrh	r3, [r7, #6]
 800d492:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d496:	461a      	mov	r2, r3
 800d498:	4b16      	ldr	r3, [pc, #88]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d49a:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 800d49c:	4b15      	ldr	r3, [pc, #84]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d49e:	2200      	movs	r2, #0
 800d4a0:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 800d4a2:	4b14      	ldr	r3, [pc, #80]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	615a      	str	r2, [r3, #20]

  // DMA2D Callbacks Configuration
  DMA2D_Handle.XferCpltCallback  = NULL;
 800d4a8:	4b12      	ldr	r3, [pc, #72]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	621a      	str	r2, [r3, #32]

  // Foreground Configuration
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800d4ae:	4b11      	ldr	r3, [pc, #68]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 800d4b4:	4b0f      	ldr	r3, [pc, #60]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d4b6:	22ff      	movs	r2, #255	@ 0xff
 800d4b8:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 800d4ba:	4b0e      	ldr	r3, [pc, #56]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d4bc:	220b      	movs	r2, #11
 800d4be:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 800d4c0:	4a0c      	ldr	r2, [pc, #48]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 800d4c6:	4a0b      	ldr	r2, [pc, #44]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; 		// No ForeGround Red/Blue swap
 800d4cc:	4b09      	ldr	r3, [pc, #36]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 800d4d2:	4b08      	ldr	r3, [pc, #32]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance = DMA2D;
 800d4d8:	4b06      	ldr	r3, [pc, #24]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d4da:	4a07      	ldr	r2, [pc, #28]	@ (800d4f8 <DMA2D_Init+0xf8>)
 800d4dc:	601a      	str	r2, [r3, #0]

  // DMA2D Initialization
  HAL_DMA2D_Init(&DMA2D_Handle);
 800d4de:	4805      	ldr	r0, [pc, #20]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d4e0:	f7f3 fe90 	bl	8001204 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 800d4e4:	2101      	movs	r1, #1
 800d4e6:	4803      	ldr	r0, [pc, #12]	@ (800d4f4 <DMA2D_Init+0xf4>)
 800d4e8:	f7f4 f804 	bl	80014f4 <HAL_DMA2D_ConfigLayer>

}
 800d4ec:	bf00      	nop
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	2000023c 	.word	0x2000023c
 800d4f8:	52001000 	.word	0x52001000

0800d4fc <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t ImageWidth, uint16_t ImageHeight)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b08a      	sub	sp, #40	@ 0x28
 800d500:	af02      	add	r7, sp, #8
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	4611      	mov	r1, r2
 800d508:	461a      	mov	r2, r3
 800d50a:	460b      	mov	r3, r1
 800d50c:	80fb      	strh	r3, [r7, #6]
 800d50e:	4613      	mov	r3, r2
 800d510:	80bb      	strh	r3, [r7, #4]

  uint32_t xPos, yPos, destination;


  // calculate the destination transfer address
  xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 800d512:	4b15      	ldr	r3, [pc, #84]	@ (800d568 <DMA2D_CopyBuffer+0x6c>)
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d51a:	085b      	lsrs	r3, r3, #1
 800d51c:	61fb      	str	r3, [r7, #28]
  yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 800d51e:	4b12      	ldr	r3, [pc, #72]	@ (800d568 <DMA2D_CopyBuffer+0x6c>)
 800d520:	689b      	ldr	r3, [r3, #8]
 800d522:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d526:	085b      	lsrs	r3, r3, #1
 800d528:	61bb      	str	r3, [r7, #24]

  destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 800d52a:	69ba      	ldr	r2, [r7, #24]
 800d52c:	4613      	mov	r3, r2
 800d52e:	011b      	lsls	r3, r3, #4
 800d530:	1a9b      	subs	r3, r3, r2
 800d532:	011b      	lsls	r3, r3, #4
 800d534:	461a      	mov	r2, r3
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	4413      	add	r3, r2
 800d53a:	009a      	lsls	r2, r3, #2
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	4413      	add	r3, r2
 800d540:	617b      	str	r3, [r7, #20]

  // wait for the DMA2D transfer to ends
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 800d542:	f04f 31ff 	mov.w	r1, #4294967295
 800d546:	4809      	ldr	r0, [pc, #36]	@ (800d56c <DMA2D_CopyBuffer+0x70>)
 800d548:	f7f3 feeb 	bl	8001322 <HAL_DMA2D_PollForTransfer>
  // copy the new decoded frame to the LCD Frame buffer
  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 800d54c:	68f9      	ldr	r1, [r7, #12]
 800d54e:	88fa      	ldrh	r2, [r7, #6]
 800d550:	88bb      	ldrh	r3, [r7, #4]
 800d552:	9300      	str	r3, [sp, #0]
 800d554:	4613      	mov	r3, r2
 800d556:	697a      	ldr	r2, [r7, #20]
 800d558:	4804      	ldr	r0, [pc, #16]	@ (800d56c <DMA2D_CopyBuffer+0x70>)
 800d55a:	f7f3 feb7 	bl	80012cc <HAL_DMA2D_Start>

}
 800d55e:	bf00      	nop
 800d560:	3720      	adds	r7, #32
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	200002a4 	.word	0x200002a4
 800d56c:	2000023c 	.word	0x2000023c

0800d570 <SD_Initialize>:


static void SD_Initialize(void)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	af00      	add	r7, sp, #0

  BSP_SD_Init(0);
 800d574:	2000      	movs	r0, #0
 800d576:	f7f2 ffbb 	bl	80004f0 <BSP_SD_Init>

}
 800d57a:	bf00      	nop
 800d57c:	bd80      	pop	{r7, pc}
	...

0800d580 <HAL_JPEG_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef *hjpeg)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef   hmdmaIn;
  static MDMA_HandleTypeDef   hmdmaOut;  
  
  /* Enable JPEG clock */
  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 800d588:	4b54      	ldr	r3, [pc, #336]	@ (800d6dc <HAL_JPEG_MspInit+0x15c>)
 800d58a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d58e:	4a53      	ldr	r2, [pc, #332]	@ (800d6dc <HAL_JPEG_MspInit+0x15c>)
 800d590:	f043 0320 	orr.w	r3, r3, #32
 800d594:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d598:	4b50      	ldr	r3, [pc, #320]	@ (800d6dc <HAL_JPEG_MspInit+0x15c>)
 800d59a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d59e:	f003 0320 	and.w	r3, r3, #32
 800d5a2:	60fb      	str	r3, [r7, #12]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
  
  /* Enable MDMA clock */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800d5a6:	4b4d      	ldr	r3, [pc, #308]	@ (800d6dc <HAL_JPEG_MspInit+0x15c>)
 800d5a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d5ac:	4a4b      	ldr	r2, [pc, #300]	@ (800d6dc <HAL_JPEG_MspInit+0x15c>)
 800d5ae:	f043 0301 	orr.w	r3, r3, #1
 800d5b2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d5b6:	4b49      	ldr	r3, [pc, #292]	@ (800d6dc <HAL_JPEG_MspInit+0x15c>)
 800d5b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d5bc:	f003 0301 	and.w	r3, r3, #1
 800d5c0:	60bb      	str	r3, [r7, #8]
 800d5c2:	68bb      	ldr	r3, [r7, #8]
  
  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 800d5c4:	220f      	movs	r2, #15
 800d5c6:	2107      	movs	r1, #7
 800d5c8:	2079      	movs	r0, #121	@ 0x79
 800d5ca:	f7f3 fd6e 	bl	80010aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(JPEG_IRQn);  
 800d5ce:	2079      	movs	r0, #121	@ 0x79
 800d5d0:	f7f3 fd85 	bl	80010de <HAL_NVIC_EnableIRQ>
  
  /* Input MDMA */
  /* Set the parameters to be configured */ 
  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 800d5d4:	4b42      	ldr	r3, [pc, #264]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d5d6:	2280      	movs	r2, #128	@ 0x80
 800d5d8:	60da      	str	r2, [r3, #12]
  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800d5da:	4b41      	ldr	r3, [pc, #260]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d5dc:	2200      	movs	r2, #0
 800d5de:	611a      	str	r2, [r3, #16]
  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 800d5e0:	4b3f      	ldr	r3, [pc, #252]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d5e2:	2202      	movs	r2, #2
 800d5e4:	615a      	str	r2, [r3, #20]
  hmdmaIn.Init.DestinationInc     = MDMA_DEST_INC_DISABLE;
 800d5e6:	4b3e      	ldr	r3, [pc, #248]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	619a      	str	r2, [r3, #24]
  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 800d5ec:	4b3c      	ldr	r3, [pc, #240]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	61da      	str	r2, [r3, #28]
  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 800d5f2:	4b3b      	ldr	r3, [pc, #236]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d5f4:	2280      	movs	r2, #128	@ 0x80
 800d5f6:	621a      	str	r2, [r3, #32]
  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;   
 800d5f8:	4b39      	ldr	r3, [pc, #228]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d5fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800d5fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 800d600:	4b37      	ldr	r3, [pc, #220]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d602:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800d606:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS; 
 800d608:	4b35      	ldr	r3, [pc, #212]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d60a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800d60e:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 800d610:	4b33      	ldr	r3, [pc, #204]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d612:	2200      	movs	r2, #0
 800d614:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdmaIn.Init.DestBlockAddressOffset  = 0;
 800d616:	4b32      	ldr	r3, [pc, #200]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d618:	2200      	movs	r2, #0
 800d61a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /*Using JPEG Input FIFO Threshold as a trigger for the MDMA*/
  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH; /* Set the MDMA HW trigger to JPEG Input FIFO Threshold flag*/  
 800d61c:	4b30      	ldr	r3, [pc, #192]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d61e:	2211      	movs	r2, #17
 800d620:	605a      	str	r2, [r3, #4]
  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;  
 800d622:	4b2f      	ldr	r3, [pc, #188]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d624:	2200      	movs	r2, #0
 800d626:	609a      	str	r2, [r3, #8]
  hmdmaIn.Init.BufferTransferLength = 32; /*Set the MDMA buffer size to the JPEG FIFO threshold size i.e 32 bytes (8 words)*/
 800d628:	4b2d      	ldr	r3, [pc, #180]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d62a:	2220      	movs	r2, #32
 800d62c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hmdmaIn.Instance = MDMA_Channel1;
 800d62e:	4b2c      	ldr	r3, [pc, #176]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d630:	4a2c      	ldr	r2, [pc, #176]	@ (800d6e4 <HAL_JPEG_MspInit+0x164>)
 800d632:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4a2a      	ldr	r2, [pc, #168]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d638:	631a      	str	r2, [r3, #48]	@ 0x30
 800d63a:	4a29      	ldr	r2, [pc, #164]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6413      	str	r3, [r2, #64]	@ 0x40
  
  /* DeInitialize the DMA Stream */
  HAL_MDMA_DeInit(&hmdmaIn);  
 800d640:	4827      	ldr	r0, [pc, #156]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d642:	f7f6 f95d 	bl	8003900 <HAL_MDMA_DeInit>
  /* Initialize the DMA stream */
  HAL_MDMA_Init(&hmdmaIn);
 800d646:	4826      	ldr	r0, [pc, #152]	@ (800d6e0 <HAL_JPEG_MspInit+0x160>)
 800d648:	f7f6 f90e 	bl	8003868 <HAL_MDMA_Init>
  
  
  /* Output MDMA */
  /* Set the parameters to be configured */ 
  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 800d64c:	4b26      	ldr	r3, [pc, #152]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d64e:	22c0      	movs	r2, #192	@ 0xc0
 800d650:	60da      	str	r2, [r3, #12]
  hmdmaOut.Init.Endianness      = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800d652:	4b25      	ldr	r3, [pc, #148]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d654:	2200      	movs	r2, #0
 800d656:	611a      	str	r2, [r3, #16]
  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 800d658:	4b23      	ldr	r3, [pc, #140]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d65a:	2200      	movs	r2, #0
 800d65c:	615a      	str	r2, [r3, #20]
  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 800d65e:	4b22      	ldr	r3, [pc, #136]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d660:	2208      	movs	r2, #8
 800d662:	619a      	str	r2, [r3, #24]
  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
 800d664:	4b20      	ldr	r3, [pc, #128]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d666:	2220      	movs	r2, #32
 800d668:	61da      	str	r2, [r3, #28]
  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 800d66a:	4b1f      	ldr	r3, [pc, #124]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d66c:	2200      	movs	r2, #0
 800d66e:	621a      	str	r2, [r3, #32]
  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 800d670:	4b1d      	ldr	r3, [pc, #116]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d672:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800d676:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 800d678:	4b1b      	ldr	r3, [pc, #108]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d67a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800d67e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;  
 800d680:	4b19      	ldr	r3, [pc, #100]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d682:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800d686:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 800d688:	4b17      	ldr	r3, [pc, #92]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d68a:	2200      	movs	r2, #0
 800d68c:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdmaOut.Init.DestBlockAddressOffset  = 0;
 800d68e:	4b16      	ldr	r3, [pc, #88]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d690:	2200      	movs	r2, #0
 800d692:	639a      	str	r2, [r3, #56]	@ 0x38
  
  
  /*Using JPEG Output FIFO Threshold as a trigger for the MDMA*/
  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH; /* Set the MDMA HW trigger to JPEG Output FIFO Threshold flag*/ 
 800d694:	4b14      	ldr	r3, [pc, #80]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d696:	2213      	movs	r2, #19
 800d698:	605a      	str	r2, [r3, #4]
  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;    
 800d69a:	4b13      	ldr	r3, [pc, #76]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d69c:	2200      	movs	r2, #0
 800d69e:	609a      	str	r2, [r3, #8]
  hmdmaOut.Init.BufferTransferLength = 32; /*Set the MDMA buffer size to the JPEG FIFO threshold size i.e 32 bytes (8 words)*/
 800d6a0:	4b11      	ldr	r3, [pc, #68]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d6a2:	2220      	movs	r2, #32
 800d6a4:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hmdmaOut.Instance = MDMA_Channel0;
 800d6a6:	4b10      	ldr	r3, [pc, #64]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d6a8:	4a10      	ldr	r2, [pc, #64]	@ (800d6ec <HAL_JPEG_MspInit+0x16c>)
 800d6aa:	601a      	str	r2, [r3, #0]
  /* DeInitialize the DMA Stream */
  HAL_MDMA_DeInit(&hmdmaOut);  
 800d6ac:	480e      	ldr	r0, [pc, #56]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d6ae:	f7f6 f927 	bl	8003900 <HAL_MDMA_DeInit>
  /* Initialize the DMA stream */
  HAL_MDMA_Init(&hmdmaOut);
 800d6b2:	480d      	ldr	r0, [pc, #52]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d6b4:	f7f6 f8d8 	bl	8003868 <HAL_MDMA_Init>
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4a0b      	ldr	r2, [pc, #44]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d6bc:	635a      	str	r2, [r3, #52]	@ 0x34
 800d6be:	4a0a      	ldr	r2, [pc, #40]	@ (800d6e8 <HAL_JPEG_MspInit+0x168>)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6413      	str	r3, [r2, #64]	@ 0x40
  
  
  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 800d6c4:	220f      	movs	r2, #15
 800d6c6:	2108      	movs	r1, #8
 800d6c8:	207a      	movs	r0, #122	@ 0x7a
 800d6ca:	f7f3 fcee 	bl	80010aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800d6ce:	207a      	movs	r0, #122	@ 0x7a
 800d6d0:	f7f3 fd05 	bl	80010de <HAL_NVIC_EnableIRQ>
  
}
 800d6d4:	bf00      	nop
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	58024400 	.word	0x58024400
 800d6e0:	200188cc 	.word	0x200188cc
 800d6e4:	52000080 	.word	0x52000080
 800d6e8:	20018938 	.word	0x20018938
 800d6ec:	52000040 	.word	0x52000040

0800d6f0 <HAL_SPI_MspInit>:
  HAL_MDMA_DeInit(hjpeg->hdmaout);
}


void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b0be      	sub	sp, #248	@ 0xf8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6f8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	605a      	str	r2, [r3, #4]
 800d702:	609a      	str	r2, [r3, #8]
 800d704:	60da      	str	r2, [r3, #12]
 800d706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d708:	f107 0318 	add.w	r3, r7, #24
 800d70c:	22c8      	movs	r2, #200	@ 0xc8
 800d70e:	2100      	movs	r1, #0
 800d710:	4618      	mov	r0, r3
 800d712:	f003 fa9b 	bl	8010c4c <memset>
  if(hspi->Instance==SPI5)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4a39      	ldr	r2, [pc, #228]	@ (800d800 <HAL_SPI_MspInit+0x110>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d16a      	bne.n	800d7f6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800d720:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d724:	f04f 0300 	mov.w	r3, #0
 800d728:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800d72c:	2300      	movs	r3, #0
 800d72e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d732:	f107 0318 	add.w	r3, r7, #24
 800d736:	4618      	mov	r0, r3
 800d738:	f7f7 fc70 	bl	800501c <HAL_RCCEx_PeriphCLKConfig>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d001      	beq.n	800d746 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800d742:	f7fe fdc5 	bl	800c2d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800d746:	4b2f      	ldr	r3, [pc, #188]	@ (800d804 <HAL_SPI_MspInit+0x114>)
 800d748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d74c:	4a2d      	ldr	r2, [pc, #180]	@ (800d804 <HAL_SPI_MspInit+0x114>)
 800d74e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d752:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d756:	4b2b      	ldr	r3, [pc, #172]	@ (800d804 <HAL_SPI_MspInit+0x114>)
 800d758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d75c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d760:	617b      	str	r3, [r7, #20]
 800d762:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800d764:	4b27      	ldr	r3, [pc, #156]	@ (800d804 <HAL_SPI_MspInit+0x114>)
 800d766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d76a:	4a26      	ldr	r2, [pc, #152]	@ (800d804 <HAL_SPI_MspInit+0x114>)
 800d76c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d770:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d774:	4b23      	ldr	r3, [pc, #140]	@ (800d804 <HAL_SPI_MspInit+0x114>)
 800d776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d77a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d77e:	613b      	str	r3, [r7, #16]
 800d780:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800d782:	4b20      	ldr	r3, [pc, #128]	@ (800d804 <HAL_SPI_MspInit+0x114>)
 800d784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d788:	4a1e      	ldr	r2, [pc, #120]	@ (800d804 <HAL_SPI_MspInit+0x114>)
 800d78a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d78e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d792:	4b1c      	ldr	r3, [pc, #112]	@ (800d804 <HAL_SPI_MspInit+0x114>)
 800d794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d798:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d79c:	60fb      	str	r3, [r7, #12]
 800d79e:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7a6:	2302      	movs	r3, #2
 800d7a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800d7b8:	2305      	movs	r3, #5
 800d7ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 800d7be:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	4810      	ldr	r0, [pc, #64]	@ (800d808 <HAL_SPI_MspInit+0x118>)
 800d7c6:	f7f3 ffe9 	bl	800179c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800d7ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800d7ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7d2:	2302      	movs	r3, #2
 800d7d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800d7e4:	2305      	movs	r3, #5
 800d7e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800d7ea:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	4806      	ldr	r0, [pc, #24]	@ (800d80c <HAL_SPI_MspInit+0x11c>)
 800d7f2:	f7f3 ffd3 	bl	800179c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800d7f6:	bf00      	nop
 800d7f8:	37f8      	adds	r7, #248	@ 0xf8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	40015000 	.word	0x40015000
 800d804:	58024400 	.word	0x58024400
 800d808:	58022800 	.word	0x58022800
 800d80c:	58022400 	.word	0x58022400

0800d810 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4a0e      	ldr	r2, [pc, #56]	@ (800d858 <HAL_DMA2D_MspInit+0x48>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d116      	bne.n	800d850 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800d822:	4b0e      	ldr	r3, [pc, #56]	@ (800d85c <HAL_DMA2D_MspInit+0x4c>)
 800d824:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d828:	4a0c      	ldr	r2, [pc, #48]	@ (800d85c <HAL_DMA2D_MspInit+0x4c>)
 800d82a:	f043 0310 	orr.w	r3, r3, #16
 800d82e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d832:	4b0a      	ldr	r3, [pc, #40]	@ (800d85c <HAL_DMA2D_MspInit+0x4c>)
 800d834:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d838:	f003 0310 	and.w	r3, r3, #16
 800d83c:	60fb      	str	r3, [r7, #12]
 800d83e:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800d840:	2200      	movs	r2, #0
 800d842:	2100      	movs	r1, #0
 800d844:	205a      	movs	r0, #90	@ 0x5a
 800d846:	f7f3 fc30 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800d84a:	205a      	movs	r0, #90	@ 0x5a
 800d84c:	f7f3 fc47 	bl	80010de <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800d850:	bf00      	nop
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	52001000 	.word	0x52001000
 800d85c:	58024400 	.word	0x58024400

0800d860 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a0e      	ldr	r2, [pc, #56]	@ (800d8a8 <HAL_TIM_Base_MspInit+0x48>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d116      	bne.n	800d8a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d872:	4b0e      	ldr	r3, [pc, #56]	@ (800d8ac <HAL_TIM_Base_MspInit+0x4c>)
 800d874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d878:	4a0c      	ldr	r2, [pc, #48]	@ (800d8ac <HAL_TIM_Base_MspInit+0x4c>)
 800d87a:	f043 0302 	orr.w	r3, r3, #2
 800d87e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d882:	4b0a      	ldr	r3, [pc, #40]	@ (800d8ac <HAL_TIM_Base_MspInit+0x4c>)
 800d884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d888:	f003 0302 	and.w	r3, r3, #2
 800d88c:	60fb      	str	r3, [r7, #12]
 800d88e:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800d890:	2200      	movs	r2, #0
 800d892:	2100      	movs	r1, #0
 800d894:	201d      	movs	r0, #29
 800d896:	f7f3 fc08 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800d89a:	201d      	movs	r0, #29
 800d89c:	f7f3 fc1f 	bl	80010de <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800d8a0:	bf00      	nop
 800d8a2:	3710      	adds	r7, #16
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	40000400 	.word	0x40000400
 800d8ac:	58024400 	.word	0x58024400

0800d8b0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	af00      	add	r7, sp, #0
}
 800d8b4:	bf00      	nop
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr

0800d8be <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800d8be:	b480      	push	{r7}
 800d8c0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800d8c2:	bf00      	nop
 800d8c4:	e7fd      	b.n	800d8c2 <HardFault_Handler+0x4>

0800d8c6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800d8c6:	b480      	push	{r7}
 800d8c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800d8ca:	bf00      	nop
 800d8cc:	e7fd      	b.n	800d8ca <MemManage_Handler+0x4>

0800d8ce <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800d8ce:	b480      	push	{r7}
 800d8d0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800d8d2:	bf00      	nop
 800d8d4:	e7fd      	b.n	800d8d2 <BusFault_Handler+0x4>

0800d8d6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800d8da:	bf00      	nop
 800d8dc:	e7fd      	b.n	800d8da <UsageFault_Handler+0x4>

0800d8de <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800d8de:	b480      	push	{r7}
 800d8e0:	af00      	add	r7, sp, #0
}
 800d8e2:	bf00      	nop
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	af00      	add	r7, sp, #0
}
 800d8f0:	bf00      	nop
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr

0800d8fa <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800d8fa:	b480      	push	{r7}
 800d8fc:	af00      	add	r7, sp, #0
}
 800d8fe:	bf00      	nop
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	af00      	add	r7, sp, #0

  HAL_IncTick();
 800d90c:	f7f3 fa92 	bl	8000e34 <HAL_IncTick>



}
 800d910:	bf00      	nop
 800d912:	bd80      	pop	{r7, pc}

0800d914 <JPEG_IRQHandler>:
  * @param  None
  * @retval None
  */

void JPEG_IRQHandler(void)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	af00      	add	r7, sp, #0
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 800d918:	4802      	ldr	r0, [pc, #8]	@ (800d924 <JPEG_IRQHandler+0x10>)
 800d91a:	f7f4 fb21 	bl	8001f60 <HAL_JPEG_IRQHandler>
}
 800d91e:	bf00      	nop
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	200001e4 	.word	0x200001e4

0800d928 <MDMA_IRQHandler>:
  * @param  None
  * @retval None
  */

void MDMA_IRQHandler()
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	af00      	add	r7, sp, #0
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 800d92c:	4b05      	ldr	r3, [pc, #20]	@ (800d944 <MDMA_IRQHandler+0x1c>)
 800d92e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d930:	4618      	mov	r0, r3
 800d932:	f7f6 f8e5 	bl	8003b00 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);  
 800d936:	4b03      	ldr	r3, [pc, #12]	@ (800d944 <MDMA_IRQHandler+0x1c>)
 800d938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7f6 f8e0 	bl	8003b00 <HAL_MDMA_IRQHandler>
}
 800d940:	bf00      	nop
 800d942:	bd80      	pop	{r7, pc}
 800d944:	200001e4 	.word	0x200001e4

0800d948 <TIM3_IRQHandler>:



void TIM3_IRQHandler(void)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800d94c:	4802      	ldr	r0, [pc, #8]	@ (800d958 <TIM3_IRQHandler+0x10>)
 800d94e:	f7fc fadf 	bl	8009f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800d952:	bf00      	nop
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	200002b8 	.word	0x200002b8

0800d95c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d964:	4a14      	ldr	r2, [pc, #80]	@ (800d9b8 <_sbrk+0x5c>)
 800d966:	4b15      	ldr	r3, [pc, #84]	@ (800d9bc <_sbrk+0x60>)
 800d968:	1ad3      	subs	r3, r2, r3
 800d96a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d970:	4b13      	ldr	r3, [pc, #76]	@ (800d9c0 <_sbrk+0x64>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d102      	bne.n	800d97e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d978:	4b11      	ldr	r3, [pc, #68]	@ (800d9c0 <_sbrk+0x64>)
 800d97a:	4a12      	ldr	r2, [pc, #72]	@ (800d9c4 <_sbrk+0x68>)
 800d97c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d97e:	4b10      	ldr	r3, [pc, #64]	@ (800d9c0 <_sbrk+0x64>)
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	4413      	add	r3, r2
 800d986:	693a      	ldr	r2, [r7, #16]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d207      	bcs.n	800d99c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d98c:	f003 f976 	bl	8010c7c <__errno>
 800d990:	4603      	mov	r3, r0
 800d992:	220c      	movs	r2, #12
 800d994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d996:	f04f 33ff 	mov.w	r3, #4294967295
 800d99a:	e009      	b.n	800d9b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d99c:	4b08      	ldr	r3, [pc, #32]	@ (800d9c0 <_sbrk+0x64>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d9a2:	4b07      	ldr	r3, [pc, #28]	@ (800d9c0 <_sbrk+0x64>)
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	4a05      	ldr	r2, [pc, #20]	@ (800d9c0 <_sbrk+0x64>)
 800d9ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3718      	adds	r7, #24
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	20020000 	.word	0x20020000
 800d9bc:	00002000 	.word	0x00002000
 800d9c0:	200189a4 	.word	0x200189a4
 800d9c4:	20018b28 	.word	0x20018b28

0800d9c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800d9c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800da00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800d9cc:	f7f3 f938 	bl	8000c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d9d0:	480c      	ldr	r0, [pc, #48]	@ (800da04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800d9d2:	490d      	ldr	r1, [pc, #52]	@ (800da08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800d9d4:	4a0d      	ldr	r2, [pc, #52]	@ (800da0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800d9d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d9d8:	e002      	b.n	800d9e0 <LoopCopyDataInit>

0800d9da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d9da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d9dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d9de:	3304      	adds	r3, #4

0800d9e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d9e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d9e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d9e4:	d3f9      	bcc.n	800d9da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d9e6:	4a0a      	ldr	r2, [pc, #40]	@ (800da10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800d9e8:	4c0a      	ldr	r4, [pc, #40]	@ (800da14 <LoopFillZerobss+0x22>)
  movs r3, #0
 800d9ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d9ec:	e001      	b.n	800d9f2 <LoopFillZerobss>

0800d9ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d9ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d9f0:	3204      	adds	r2, #4

0800d9f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d9f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d9f4:	d3fb      	bcc.n	800d9ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d9f6:	f003 f947 	bl	8010c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d9fa:	f7fe fc43 	bl	800c284 <main>
  bx  lr
 800d9fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800da00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800da04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800da08:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800da0c:	0801163c 	.word	0x0801163c
  ldr r2, =_sbss
 800da10:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800da14:	20018b24 	.word	0x20018b24

0800da18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800da18:	e7fe      	b.n	800da18 <ADC3_IRQHandler>
	...

0800da1c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	4603      	mov	r3, r0
 800da24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800da26:	79fb      	ldrb	r3, [r7, #7]
 800da28:	4a08      	ldr	r2, [pc, #32]	@ (800da4c <disk_status+0x30>)
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	4413      	add	r3, r2
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	79fa      	ldrb	r2, [r7, #7]
 800da34:	4905      	ldr	r1, [pc, #20]	@ (800da4c <disk_status+0x30>)
 800da36:	440a      	add	r2, r1
 800da38:	7a12      	ldrb	r2, [r2, #8]
 800da3a:	4610      	mov	r0, r2
 800da3c:	4798      	blx	r3
 800da3e:	4603      	mov	r3, r0
 800da40:	73fb      	strb	r3, [r7, #15]
  return stat;
 800da42:	7bfb      	ldrb	r3, [r7, #15]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	200189d0 	.word	0x200189d0

0800da50 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800da5a:	2300      	movs	r3, #0
 800da5c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800da5e:	79fb      	ldrb	r3, [r7, #7]
 800da60:	4a0e      	ldr	r2, [pc, #56]	@ (800da9c <disk_initialize+0x4c>)
 800da62:	5cd3      	ldrb	r3, [r2, r3]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d114      	bne.n	800da92 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800da68:	79fb      	ldrb	r3, [r7, #7]
 800da6a:	4a0c      	ldr	r2, [pc, #48]	@ (800da9c <disk_initialize+0x4c>)
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	4413      	add	r3, r2
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	79fa      	ldrb	r2, [r7, #7]
 800da76:	4909      	ldr	r1, [pc, #36]	@ (800da9c <disk_initialize+0x4c>)
 800da78:	440a      	add	r2, r1
 800da7a:	7a12      	ldrb	r2, [r2, #8]
 800da7c:	4610      	mov	r0, r2
 800da7e:	4798      	blx	r3
 800da80:	4603      	mov	r3, r0
 800da82:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800da84:	7bfb      	ldrb	r3, [r7, #15]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d103      	bne.n	800da92 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800da8a:	79fb      	ldrb	r3, [r7, #7]
 800da8c:	4a03      	ldr	r2, [pc, #12]	@ (800da9c <disk_initialize+0x4c>)
 800da8e:	2101      	movs	r1, #1
 800da90:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800da92:	7bfb      	ldrb	r3, [r7, #15]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3710      	adds	r7, #16
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	200189d0 	.word	0x200189d0

0800daa0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800daa0:	b590      	push	{r4, r7, lr}
 800daa2:	b087      	sub	sp, #28
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	60b9      	str	r1, [r7, #8]
 800daa8:	607a      	str	r2, [r7, #4]
 800daaa:	603b      	str	r3, [r7, #0]
 800daac:	4603      	mov	r3, r0
 800daae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dab0:	7bfb      	ldrb	r3, [r7, #15]
 800dab2:	4a0a      	ldr	r2, [pc, #40]	@ (800dadc <disk_read+0x3c>)
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	4413      	add	r3, r2
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	689c      	ldr	r4, [r3, #8]
 800dabc:	7bfb      	ldrb	r3, [r7, #15]
 800dabe:	4a07      	ldr	r2, [pc, #28]	@ (800dadc <disk_read+0x3c>)
 800dac0:	4413      	add	r3, r2
 800dac2:	7a18      	ldrb	r0, [r3, #8]
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	68b9      	ldr	r1, [r7, #8]
 800daca:	47a0      	blx	r4
 800dacc:	4603      	mov	r3, r0
 800dace:	75fb      	strb	r3, [r7, #23]
  return res;
 800dad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	371c      	adds	r7, #28
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd90      	pop	{r4, r7, pc}
 800dada:	bf00      	nop
 800dadc:	200189d0 	.word	0x200189d0

0800dae0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dae0:	b590      	push	{r4, r7, lr}
 800dae2:	b087      	sub	sp, #28
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60b9      	str	r1, [r7, #8]
 800dae8:	607a      	str	r2, [r7, #4]
 800daea:	603b      	str	r3, [r7, #0]
 800daec:	4603      	mov	r3, r0
 800daee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
 800daf2:	4a0a      	ldr	r2, [pc, #40]	@ (800db1c <disk_write+0x3c>)
 800daf4:	009b      	lsls	r3, r3, #2
 800daf6:	4413      	add	r3, r2
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	68dc      	ldr	r4, [r3, #12]
 800dafc:	7bfb      	ldrb	r3, [r7, #15]
 800dafe:	4a07      	ldr	r2, [pc, #28]	@ (800db1c <disk_write+0x3c>)
 800db00:	4413      	add	r3, r2
 800db02:	7a18      	ldrb	r0, [r3, #8]
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	68b9      	ldr	r1, [r7, #8]
 800db0a:	47a0      	blx	r4
 800db0c:	4603      	mov	r3, r0
 800db0e:	75fb      	strb	r3, [r7, #23]
  return res;
 800db10:	7dfb      	ldrb	r3, [r7, #23]
}
 800db12:	4618      	mov	r0, r3
 800db14:	371c      	adds	r7, #28
 800db16:	46bd      	mov	sp, r7
 800db18:	bd90      	pop	{r4, r7, pc}
 800db1a:	bf00      	nop
 800db1c:	200189d0 	.word	0x200189d0

0800db20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	4603      	mov	r3, r0
 800db28:	603a      	str	r2, [r7, #0]
 800db2a:	71fb      	strb	r3, [r7, #7]
 800db2c:	460b      	mov	r3, r1
 800db2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800db30:	79fb      	ldrb	r3, [r7, #7]
 800db32:	4a09      	ldr	r2, [pc, #36]	@ (800db58 <disk_ioctl+0x38>)
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	4413      	add	r3, r2
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	691b      	ldr	r3, [r3, #16]
 800db3c:	79fa      	ldrb	r2, [r7, #7]
 800db3e:	4906      	ldr	r1, [pc, #24]	@ (800db58 <disk_ioctl+0x38>)
 800db40:	440a      	add	r2, r1
 800db42:	7a10      	ldrb	r0, [r2, #8]
 800db44:	79b9      	ldrb	r1, [r7, #6]
 800db46:	683a      	ldr	r2, [r7, #0]
 800db48:	4798      	blx	r3
 800db4a:	4603      	mov	r3, r0
 800db4c:	73fb      	strb	r3, [r7, #15]
  return res;
 800db4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db50:	4618      	mov	r0, r3
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	200189d0 	.word	0x200189d0

0800db5c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800db5c:	b480      	push	{r7}
 800db5e:	af00      	add	r7, sp, #0
  return 0;
 800db60:	2300      	movs	r3, #0
}
 800db62:	4618      	mov	r0, r3
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800db6c:	b480      	push	{r7}
 800db6e:	b085      	sub	sp, #20
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	3301      	adds	r3, #1
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800db7c:	89fb      	ldrh	r3, [r7, #14]
 800db7e:	021b      	lsls	r3, r3, #8
 800db80:	b21a      	sxth	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	b21b      	sxth	r3, r3
 800db88:	4313      	orrs	r3, r2
 800db8a:	b21b      	sxth	r3, r3
 800db8c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800db8e:	89fb      	ldrh	r3, [r7, #14]
}
 800db90:	4618      	mov	r0, r3
 800db92:	3714      	adds	r7, #20
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr

0800db9c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800db9c:	b480      	push	{r7}
 800db9e:	b085      	sub	sp, #20
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	3303      	adds	r3, #3
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	021b      	lsls	r3, r3, #8
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	3202      	adds	r2, #2
 800dbb4:	7812      	ldrb	r2, [r2, #0]
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	021b      	lsls	r3, r3, #8
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	3201      	adds	r2, #1
 800dbc2:	7812      	ldrb	r2, [r2, #0]
 800dbc4:	4313      	orrs	r3, r2
 800dbc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	021b      	lsls	r3, r3, #8
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	7812      	ldrb	r2, [r2, #0]
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	60fb      	str	r3, [r7, #12]
	return rv;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3714      	adds	r7, #20
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr

0800dbe2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800dbe2:	b480      	push	{r7}
 800dbe4:	b083      	sub	sp, #12
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
 800dbea:	460b      	mov	r3, r1
 800dbec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	1c5a      	adds	r2, r3, #1
 800dbf2:	607a      	str	r2, [r7, #4]
 800dbf4:	887a      	ldrh	r2, [r7, #2]
 800dbf6:	b2d2      	uxtb	r2, r2
 800dbf8:	701a      	strb	r2, [r3, #0]
 800dbfa:	887b      	ldrh	r3, [r7, #2]
 800dbfc:	0a1b      	lsrs	r3, r3, #8
 800dbfe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	1c5a      	adds	r2, r3, #1
 800dc04:	607a      	str	r2, [r7, #4]
 800dc06:	887a      	ldrh	r2, [r7, #2]
 800dc08:	b2d2      	uxtb	r2, r2
 800dc0a:	701a      	strb	r2, [r3, #0]
}
 800dc0c:	bf00      	nop
 800dc0e:	370c      	adds	r7, #12
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	1c5a      	adds	r2, r3, #1
 800dc26:	607a      	str	r2, [r7, #4]
 800dc28:	683a      	ldr	r2, [r7, #0]
 800dc2a:	b2d2      	uxtb	r2, r2
 800dc2c:	701a      	strb	r2, [r3, #0]
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	0a1b      	lsrs	r3, r3, #8
 800dc32:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	1c5a      	adds	r2, r3, #1
 800dc38:	607a      	str	r2, [r7, #4]
 800dc3a:	683a      	ldr	r2, [r7, #0]
 800dc3c:	b2d2      	uxtb	r2, r2
 800dc3e:	701a      	strb	r2, [r3, #0]
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	0a1b      	lsrs	r3, r3, #8
 800dc44:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	1c5a      	adds	r2, r3, #1
 800dc4a:	607a      	str	r2, [r7, #4]
 800dc4c:	683a      	ldr	r2, [r7, #0]
 800dc4e:	b2d2      	uxtb	r2, r2
 800dc50:	701a      	strb	r2, [r3, #0]
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	0a1b      	lsrs	r3, r3, #8
 800dc56:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	1c5a      	adds	r2, r3, #1
 800dc5c:	607a      	str	r2, [r7, #4]
 800dc5e:	683a      	ldr	r2, [r7, #0]
 800dc60:	b2d2      	uxtb	r2, r2
 800dc62:	701a      	strb	r2, [r3, #0]
}
 800dc64:	bf00      	nop
 800dc66:	370c      	adds	r7, #12
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr

0800dc70 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800dc70:	b480      	push	{r7}
 800dc72:	b087      	sub	sp, #28
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d00d      	beq.n	800dca6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800dc8a:	693a      	ldr	r2, [r7, #16]
 800dc8c:	1c53      	adds	r3, r2, #1
 800dc8e:	613b      	str	r3, [r7, #16]
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	1c59      	adds	r1, r3, #1
 800dc94:	6179      	str	r1, [r7, #20]
 800dc96:	7812      	ldrb	r2, [r2, #0]
 800dc98:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	607b      	str	r3, [r7, #4]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d1f1      	bne.n	800dc8a <mem_cpy+0x1a>
	}
}
 800dca6:	bf00      	nop
 800dca8:	371c      	adds	r7, #28
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr

0800dcb2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800dcb2:	b480      	push	{r7}
 800dcb4:	b087      	sub	sp, #28
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	60f8      	str	r0, [r7, #12]
 800dcba:	60b9      	str	r1, [r7, #8]
 800dcbc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	1c5a      	adds	r2, r3, #1
 800dcc6:	617a      	str	r2, [r7, #20]
 800dcc8:	68ba      	ldr	r2, [r7, #8]
 800dcca:	b2d2      	uxtb	r2, r2
 800dccc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	3b01      	subs	r3, #1
 800dcd2:	607b      	str	r3, [r7, #4]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d1f3      	bne.n	800dcc2 <mem_set+0x10>
}
 800dcda:	bf00      	nop
 800dcdc:	bf00      	nop
 800dcde:	371c      	adds	r7, #28
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800dce8:	b480      	push	{r7}
 800dcea:	b089      	sub	sp, #36	@ 0x24
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	61fb      	str	r3, [r7, #28]
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	1c5a      	adds	r2, r3, #1
 800dd04:	61fa      	str	r2, [r7, #28]
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	4619      	mov	r1, r3
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	1c5a      	adds	r2, r3, #1
 800dd0e:	61ba      	str	r2, [r7, #24]
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	1acb      	subs	r3, r1, r3
 800dd14:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	607b      	str	r3, [r7, #4]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d002      	beq.n	800dd28 <mem_cmp+0x40>
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d0eb      	beq.n	800dd00 <mem_cmp+0x18>

	return r;
 800dd28:	697b      	ldr	r3, [r7, #20]
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3724      	adds	r7, #36	@ 0x24
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr

0800dd36 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800dd36:	b480      	push	{r7}
 800dd38:	b083      	sub	sp, #12
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
 800dd3e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800dd40:	e002      	b.n	800dd48 <chk_chr+0x12>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	3301      	adds	r3, #1
 800dd46:	607b      	str	r3, [r7, #4]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d005      	beq.n	800dd5c <chk_chr+0x26>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	461a      	mov	r2, r3
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d1f2      	bne.n	800dd42 <chk_chr+0xc>
	return *str;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	781b      	ldrb	r3, [r3, #0]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b085      	sub	sp, #20
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dd76:	2300      	movs	r3, #0
 800dd78:	60bb      	str	r3, [r7, #8]
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	60fb      	str	r3, [r7, #12]
 800dd7e:	e029      	b.n	800ddd4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800dd80:	4a27      	ldr	r2, [pc, #156]	@ (800de20 <chk_lock+0xb4>)
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	011b      	lsls	r3, r3, #4
 800dd86:	4413      	add	r3, r2
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d01d      	beq.n	800ddca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dd8e:	4a24      	ldr	r2, [pc, #144]	@ (800de20 <chk_lock+0xb4>)
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	011b      	lsls	r3, r3, #4
 800dd94:	4413      	add	r3, r2
 800dd96:	681a      	ldr	r2, [r3, #0]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d116      	bne.n	800ddce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800dda0:	4a1f      	ldr	r2, [pc, #124]	@ (800de20 <chk_lock+0xb4>)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	011b      	lsls	r3, r3, #4
 800dda6:	4413      	add	r3, r2
 800dda8:	3304      	adds	r3, #4
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d10c      	bne.n	800ddce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ddb4:	4a1a      	ldr	r2, [pc, #104]	@ (800de20 <chk_lock+0xb4>)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	011b      	lsls	r3, r3, #4
 800ddba:	4413      	add	r3, r2
 800ddbc:	3308      	adds	r3, #8
 800ddbe:	681a      	ldr	r2, [r3, #0]
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d102      	bne.n	800ddce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ddc8:	e007      	b.n	800ddda <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	60fb      	str	r3, [r7, #12]
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d9d2      	bls.n	800dd80 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2b02      	cmp	r3, #2
 800ddde:	d109      	bne.n	800ddf4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d102      	bne.n	800ddec <chk_lock+0x80>
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	2b02      	cmp	r3, #2
 800ddea:	d101      	bne.n	800ddf0 <chk_lock+0x84>
 800ddec:	2300      	movs	r3, #0
 800ddee:	e010      	b.n	800de12 <chk_lock+0xa6>
 800ddf0:	2312      	movs	r3, #18
 800ddf2:	e00e      	b.n	800de12 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d108      	bne.n	800de0c <chk_lock+0xa0>
 800ddfa:	4a09      	ldr	r2, [pc, #36]	@ (800de20 <chk_lock+0xb4>)
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	011b      	lsls	r3, r3, #4
 800de00:	4413      	add	r3, r2
 800de02:	330c      	adds	r3, #12
 800de04:	881b      	ldrh	r3, [r3, #0]
 800de06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de0a:	d101      	bne.n	800de10 <chk_lock+0xa4>
 800de0c:	2310      	movs	r3, #16
 800de0e:	e000      	b.n	800de12 <chk_lock+0xa6>
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3714      	adds	r7, #20
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop
 800de20:	200189b0 	.word	0x200189b0

0800de24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800de24:	b480      	push	{r7}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800de2a:	2300      	movs	r3, #0
 800de2c:	607b      	str	r3, [r7, #4]
 800de2e:	e002      	b.n	800de36 <enq_lock+0x12>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	3301      	adds	r3, #1
 800de34:	607b      	str	r3, [r7, #4]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d806      	bhi.n	800de4a <enq_lock+0x26>
 800de3c:	4a09      	ldr	r2, [pc, #36]	@ (800de64 <enq_lock+0x40>)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	011b      	lsls	r3, r3, #4
 800de42:	4413      	add	r3, r2
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d1f2      	bne.n	800de30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2b02      	cmp	r3, #2
 800de4e:	bf14      	ite	ne
 800de50:	2301      	movne	r3, #1
 800de52:	2300      	moveq	r3, #0
 800de54:	b2db      	uxtb	r3, r3
}
 800de56:	4618      	mov	r0, r3
 800de58:	370c      	adds	r7, #12
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	200189b0 	.word	0x200189b0

0800de68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800de68:	b480      	push	{r7}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800de72:	2300      	movs	r3, #0
 800de74:	60fb      	str	r3, [r7, #12]
 800de76:	e01f      	b.n	800deb8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800de78:	4a41      	ldr	r2, [pc, #260]	@ (800df80 <inc_lock+0x118>)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	011b      	lsls	r3, r3, #4
 800de7e:	4413      	add	r3, r2
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	429a      	cmp	r2, r3
 800de88:	d113      	bne.n	800deb2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800de8a:	4a3d      	ldr	r2, [pc, #244]	@ (800df80 <inc_lock+0x118>)
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	011b      	lsls	r3, r3, #4
 800de90:	4413      	add	r3, r2
 800de92:	3304      	adds	r3, #4
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d109      	bne.n	800deb2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800de9e:	4a38      	ldr	r2, [pc, #224]	@ (800df80 <inc_lock+0x118>)
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	011b      	lsls	r3, r3, #4
 800dea4:	4413      	add	r3, r2
 800dea6:	3308      	adds	r3, #8
 800dea8:	681a      	ldr	r2, [r3, #0]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800deae:	429a      	cmp	r2, r3
 800deb0:	d006      	beq.n	800dec0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	3301      	adds	r3, #1
 800deb6:	60fb      	str	r3, [r7, #12]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2b01      	cmp	r3, #1
 800debc:	d9dc      	bls.n	800de78 <inc_lock+0x10>
 800debe:	e000      	b.n	800dec2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800dec0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2b02      	cmp	r3, #2
 800dec6:	d132      	bne.n	800df2e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dec8:	2300      	movs	r3, #0
 800deca:	60fb      	str	r3, [r7, #12]
 800decc:	e002      	b.n	800ded4 <inc_lock+0x6c>
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	3301      	adds	r3, #1
 800ded2:	60fb      	str	r3, [r7, #12]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d806      	bhi.n	800dee8 <inc_lock+0x80>
 800deda:	4a29      	ldr	r2, [pc, #164]	@ (800df80 <inc_lock+0x118>)
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	011b      	lsls	r3, r3, #4
 800dee0:	4413      	add	r3, r2
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d1f2      	bne.n	800dece <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2b02      	cmp	r3, #2
 800deec:	d101      	bne.n	800def2 <inc_lock+0x8a>
 800deee:	2300      	movs	r3, #0
 800def0:	e040      	b.n	800df74 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681a      	ldr	r2, [r3, #0]
 800def6:	4922      	ldr	r1, [pc, #136]	@ (800df80 <inc_lock+0x118>)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	011b      	lsls	r3, r3, #4
 800defc:	440b      	add	r3, r1
 800defe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	689a      	ldr	r2, [r3, #8]
 800df04:	491e      	ldr	r1, [pc, #120]	@ (800df80 <inc_lock+0x118>)
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	011b      	lsls	r3, r3, #4
 800df0a:	440b      	add	r3, r1
 800df0c:	3304      	adds	r3, #4
 800df0e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	695a      	ldr	r2, [r3, #20]
 800df14:	491a      	ldr	r1, [pc, #104]	@ (800df80 <inc_lock+0x118>)
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	011b      	lsls	r3, r3, #4
 800df1a:	440b      	add	r3, r1
 800df1c:	3308      	adds	r3, #8
 800df1e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800df20:	4a17      	ldr	r2, [pc, #92]	@ (800df80 <inc_lock+0x118>)
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	011b      	lsls	r3, r3, #4
 800df26:	4413      	add	r3, r2
 800df28:	330c      	adds	r3, #12
 800df2a:	2200      	movs	r2, #0
 800df2c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d009      	beq.n	800df48 <inc_lock+0xe0>
 800df34:	4a12      	ldr	r2, [pc, #72]	@ (800df80 <inc_lock+0x118>)
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	011b      	lsls	r3, r3, #4
 800df3a:	4413      	add	r3, r2
 800df3c:	330c      	adds	r3, #12
 800df3e:	881b      	ldrh	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d001      	beq.n	800df48 <inc_lock+0xe0>
 800df44:	2300      	movs	r3, #0
 800df46:	e015      	b.n	800df74 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d108      	bne.n	800df60 <inc_lock+0xf8>
 800df4e:	4a0c      	ldr	r2, [pc, #48]	@ (800df80 <inc_lock+0x118>)
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	011b      	lsls	r3, r3, #4
 800df54:	4413      	add	r3, r2
 800df56:	330c      	adds	r3, #12
 800df58:	881b      	ldrh	r3, [r3, #0]
 800df5a:	3301      	adds	r3, #1
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	e001      	b.n	800df64 <inc_lock+0xfc>
 800df60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800df64:	4906      	ldr	r1, [pc, #24]	@ (800df80 <inc_lock+0x118>)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	011b      	lsls	r3, r3, #4
 800df6a:	440b      	add	r3, r1
 800df6c:	330c      	adds	r3, #12
 800df6e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	3301      	adds	r3, #1
}
 800df74:	4618      	mov	r0, r3
 800df76:	3714      	adds	r7, #20
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr
 800df80:	200189b0 	.word	0x200189b0

0800df84 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800df84:	b480      	push	{r7}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	3b01      	subs	r3, #1
 800df90:	607b      	str	r3, [r7, #4]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d825      	bhi.n	800dfe4 <dec_lock+0x60>
		n = Files[i].ctr;
 800df98:	4a17      	ldr	r2, [pc, #92]	@ (800dff8 <dec_lock+0x74>)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	011b      	lsls	r3, r3, #4
 800df9e:	4413      	add	r3, r2
 800dfa0:	330c      	adds	r3, #12
 800dfa2:	881b      	ldrh	r3, [r3, #0]
 800dfa4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800dfa6:	89fb      	ldrh	r3, [r7, #14]
 800dfa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dfac:	d101      	bne.n	800dfb2 <dec_lock+0x2e>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800dfb2:	89fb      	ldrh	r3, [r7, #14]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <dec_lock+0x3a>
 800dfb8:	89fb      	ldrh	r3, [r7, #14]
 800dfba:	3b01      	subs	r3, #1
 800dfbc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800dfbe:	4a0e      	ldr	r2, [pc, #56]	@ (800dff8 <dec_lock+0x74>)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	011b      	lsls	r3, r3, #4
 800dfc4:	4413      	add	r3, r2
 800dfc6:	330c      	adds	r3, #12
 800dfc8:	89fa      	ldrh	r2, [r7, #14]
 800dfca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800dfcc:	89fb      	ldrh	r3, [r7, #14]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d105      	bne.n	800dfde <dec_lock+0x5a>
 800dfd2:	4a09      	ldr	r2, [pc, #36]	@ (800dff8 <dec_lock+0x74>)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	011b      	lsls	r3, r3, #4
 800dfd8:	4413      	add	r3, r2
 800dfda:	2200      	movs	r2, #0
 800dfdc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	737b      	strb	r3, [r7, #13]
 800dfe2:	e001      	b.n	800dfe8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800dfe4:	2302      	movs	r3, #2
 800dfe6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800dfe8:	7b7b      	ldrb	r3, [r7, #13]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3714      	adds	r7, #20
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr
 800dff6:	bf00      	nop
 800dff8:	200189b0 	.word	0x200189b0

0800dffc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e004:	2300      	movs	r3, #0
 800e006:	60fb      	str	r3, [r7, #12]
 800e008:	e010      	b.n	800e02c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e00a:	4a0d      	ldr	r2, [pc, #52]	@ (800e040 <clear_lock+0x44>)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	011b      	lsls	r3, r3, #4
 800e010:	4413      	add	r3, r2
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	429a      	cmp	r2, r3
 800e018:	d105      	bne.n	800e026 <clear_lock+0x2a>
 800e01a:	4a09      	ldr	r2, [pc, #36]	@ (800e040 <clear_lock+0x44>)
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	011b      	lsls	r3, r3, #4
 800e020:	4413      	add	r3, r2
 800e022:	2200      	movs	r2, #0
 800e024:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	3301      	adds	r3, #1
 800e02a:	60fb      	str	r3, [r7, #12]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2b01      	cmp	r3, #1
 800e030:	d9eb      	bls.n	800e00a <clear_lock+0xe>
	}
}
 800e032:	bf00      	nop
 800e034:	bf00      	nop
 800e036:	3714      	adds	r7, #20
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr
 800e040:	200189b0 	.word	0x200189b0

0800e044 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b086      	sub	sp, #24
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e04c:	2300      	movs	r3, #0
 800e04e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	78db      	ldrb	r3, [r3, #3]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d034      	beq.n	800e0c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e05c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	7858      	ldrb	r0, [r3, #1]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e068:	2301      	movs	r3, #1
 800e06a:	697a      	ldr	r2, [r7, #20]
 800e06c:	f7ff fd38 	bl	800dae0 <disk_write>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d002      	beq.n	800e07c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e076:	2301      	movs	r3, #1
 800e078:	73fb      	strb	r3, [r7, #15]
 800e07a:	e022      	b.n	800e0c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e086:	697a      	ldr	r2, [r7, #20]
 800e088:	1ad2      	subs	r2, r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	69db      	ldr	r3, [r3, #28]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d217      	bcs.n	800e0c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	789b      	ldrb	r3, [r3, #2]
 800e096:	613b      	str	r3, [r7, #16]
 800e098:	e010      	b.n	800e0bc <sync_window+0x78>
					wsect += fs->fsize;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	69db      	ldr	r3, [r3, #28]
 800e09e:	697a      	ldr	r2, [r7, #20]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	7858      	ldrb	r0, [r3, #1]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	697a      	ldr	r2, [r7, #20]
 800e0b2:	f7ff fd15 	bl	800dae0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	613b      	str	r3, [r7, #16]
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d8eb      	bhi.n	800e09a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3718      	adds	r7, #24
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b084      	sub	sp, #16
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0de:	683a      	ldr	r2, [r7, #0]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d01b      	beq.n	800e11c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f7ff ffad 	bl	800e044 <sync_window>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e0ee:	7bfb      	ldrb	r3, [r7, #15]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d113      	bne.n	800e11c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	7858      	ldrb	r0, [r3, #1]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e0fe:	2301      	movs	r3, #1
 800e100:	683a      	ldr	r2, [r7, #0]
 800e102:	f7ff fccd 	bl	800daa0 <disk_read>
 800e106:	4603      	mov	r3, r0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d004      	beq.n	800e116 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e10c:	f04f 33ff 	mov.w	r3, #4294967295
 800e110:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e112:	2301      	movs	r3, #1
 800e114:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	683a      	ldr	r2, [r7, #0]
 800e11a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800e11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3710      	adds	r7, #16
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
	...

0800e128 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b084      	sub	sp, #16
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7ff ff87 	bl	800e044 <sync_window>
 800e136:	4603      	mov	r3, r0
 800e138:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e13a:	7bfb      	ldrb	r3, [r7, #15]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d158      	bne.n	800e1f2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	2b03      	cmp	r3, #3
 800e146:	d148      	bne.n	800e1da <sync_fs+0xb2>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	791b      	ldrb	r3, [r3, #4]
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d144      	bne.n	800e1da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	3334      	adds	r3, #52	@ 0x34
 800e154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e158:	2100      	movs	r1, #0
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7ff fda9 	bl	800dcb2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	3334      	adds	r3, #52	@ 0x34
 800e164:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e168:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7ff fd38 	bl	800dbe2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	3334      	adds	r3, #52	@ 0x34
 800e176:	4921      	ldr	r1, [pc, #132]	@ (800e1fc <sync_fs+0xd4>)
 800e178:	4618      	mov	r0, r3
 800e17a:	f7ff fd4d 	bl	800dc18 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	3334      	adds	r3, #52	@ 0x34
 800e182:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e186:	491e      	ldr	r1, [pc, #120]	@ (800e200 <sync_fs+0xd8>)
 800e188:	4618      	mov	r0, r3
 800e18a:	f7ff fd45 	bl	800dc18 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	3334      	adds	r3, #52	@ 0x34
 800e192:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	695b      	ldr	r3, [r3, #20]
 800e19a:	4619      	mov	r1, r3
 800e19c:	4610      	mov	r0, r2
 800e19e:	f7ff fd3b 	bl	800dc18 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	3334      	adds	r3, #52	@ 0x34
 800e1a6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	691b      	ldr	r3, [r3, #16]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4610      	mov	r0, r2
 800e1b2:	f7ff fd31 	bl	800dc18 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6a1b      	ldr	r3, [r3, #32]
 800e1ba:	1c5a      	adds	r2, r3, #1
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	7858      	ldrb	r0, [r3, #1]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	f7ff fc86 	bl	800dae0 <disk_write>
			fs->fsi_flag = 0;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	785b      	ldrb	r3, [r3, #1]
 800e1de:	2200      	movs	r2, #0
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7ff fc9c 	bl	800db20 <disk_ioctl>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d001      	beq.n	800e1f2 <sync_fs+0xca>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3710      	adds	r7, #16
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	41615252 	.word	0x41615252
 800e200:	61417272 	.word	0x61417272

0800e204 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e204:	b480      	push	{r7}
 800e206:	b083      	sub	sp, #12
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	3b02      	subs	r3, #2
 800e212:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	699b      	ldr	r3, [r3, #24]
 800e218:	3b02      	subs	r3, #2
 800e21a:	683a      	ldr	r2, [r7, #0]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d301      	bcc.n	800e224 <clust2sect+0x20>
 800e220:	2300      	movs	r3, #0
 800e222:	e008      	b.n	800e236 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	895b      	ldrh	r3, [r3, #10]
 800e228:	461a      	mov	r2, r3
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	fb03 f202 	mul.w	r2, r3, r2
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e234:	4413      	add	r3, r2
}
 800e236:	4618      	mov	r0, r3
 800e238:	370c      	adds	r7, #12
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr

0800e242 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e242:	b580      	push	{r7, lr}
 800e244:	b086      	sub	sp, #24
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]
 800e24a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	2b01      	cmp	r3, #1
 800e256:	d904      	bls.n	800e262 <get_fat+0x20>
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	699b      	ldr	r3, [r3, #24]
 800e25c:	683a      	ldr	r2, [r7, #0]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d302      	bcc.n	800e268 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e262:	2301      	movs	r3, #1
 800e264:	617b      	str	r3, [r7, #20]
 800e266:	e08e      	b.n	800e386 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e268:	f04f 33ff 	mov.w	r3, #4294967295
 800e26c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	2b03      	cmp	r3, #3
 800e274:	d061      	beq.n	800e33a <get_fat+0xf8>
 800e276:	2b03      	cmp	r3, #3
 800e278:	dc7b      	bgt.n	800e372 <get_fat+0x130>
 800e27a:	2b01      	cmp	r3, #1
 800e27c:	d002      	beq.n	800e284 <get_fat+0x42>
 800e27e:	2b02      	cmp	r3, #2
 800e280:	d041      	beq.n	800e306 <get_fat+0xc4>
 800e282:	e076      	b.n	800e372 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	60fb      	str	r3, [r7, #12]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	085b      	lsrs	r3, r3, #1
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	4413      	add	r3, r2
 800e290:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	0a5b      	lsrs	r3, r3, #9
 800e29a:	4413      	add	r3, r2
 800e29c:	4619      	mov	r1, r3
 800e29e:	6938      	ldr	r0, [r7, #16]
 800e2a0:	f7ff ff14 	bl	800e0cc <move_window>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d166      	bne.n	800e378 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	1c5a      	adds	r2, r3, #1
 800e2ae:	60fa      	str	r2, [r7, #12]
 800e2b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2b4:	693a      	ldr	r2, [r7, #16]
 800e2b6:	4413      	add	r3, r2
 800e2b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e2bc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	0a5b      	lsrs	r3, r3, #9
 800e2c6:	4413      	add	r3, r2
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	6938      	ldr	r0, [r7, #16]
 800e2cc:	f7ff fefe 	bl	800e0cc <move_window>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d152      	bne.n	800e37c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2dc:	693a      	ldr	r2, [r7, #16]
 800e2de:	4413      	add	r3, r2
 800e2e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e2e4:	021b      	lsls	r3, r3, #8
 800e2e6:	68ba      	ldr	r2, [r7, #8]
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	f003 0301 	and.w	r3, r3, #1
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d002      	beq.n	800e2fc <get_fat+0xba>
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	091b      	lsrs	r3, r3, #4
 800e2fa:	e002      	b.n	800e302 <get_fat+0xc0>
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e302:	617b      	str	r3, [r7, #20]
			break;
 800e304:	e03f      	b.n	800e386 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	0a1b      	lsrs	r3, r3, #8
 800e30e:	4413      	add	r3, r2
 800e310:	4619      	mov	r1, r3
 800e312:	6938      	ldr	r0, [r7, #16]
 800e314:	f7ff feda 	bl	800e0cc <move_window>
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d130      	bne.n	800e380 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	005b      	lsls	r3, r3, #1
 800e328:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e32c:	4413      	add	r3, r2
 800e32e:	4618      	mov	r0, r3
 800e330:	f7ff fc1c 	bl	800db6c <ld_word>
 800e334:	4603      	mov	r3, r0
 800e336:	617b      	str	r3, [r7, #20]
			break;
 800e338:	e025      	b.n	800e386 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	09db      	lsrs	r3, r3, #7
 800e342:	4413      	add	r3, r2
 800e344:	4619      	mov	r1, r3
 800e346:	6938      	ldr	r0, [r7, #16]
 800e348:	f7ff fec0 	bl	800e0cc <move_window>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d118      	bne.n	800e384 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e360:	4413      	add	r3, r2
 800e362:	4618      	mov	r0, r3
 800e364:	f7ff fc1a 	bl	800db9c <ld_dword>
 800e368:	4603      	mov	r3, r0
 800e36a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e36e:	617b      	str	r3, [r7, #20]
			break;
 800e370:	e009      	b.n	800e386 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e372:	2301      	movs	r3, #1
 800e374:	617b      	str	r3, [r7, #20]
 800e376:	e006      	b.n	800e386 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e378:	bf00      	nop
 800e37a:	e004      	b.n	800e386 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e37c:	bf00      	nop
 800e37e:	e002      	b.n	800e386 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e380:	bf00      	nop
 800e382:	e000      	b.n	800e386 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e384:	bf00      	nop
		}
	}

	return val;
 800e386:	697b      	ldr	r3, [r7, #20]
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3718      	adds	r7, #24
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e390:	b590      	push	{r4, r7, lr}
 800e392:	b089      	sub	sp, #36	@ 0x24
 800e394:	af00      	add	r7, sp, #0
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e39c:	2302      	movs	r3, #2
 800e39e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	f240 80d9 	bls.w	800e55a <put_fat+0x1ca>
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	699b      	ldr	r3, [r3, #24]
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	429a      	cmp	r2, r3
 800e3b0:	f080 80d3 	bcs.w	800e55a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	2b03      	cmp	r3, #3
 800e3ba:	f000 8096 	beq.w	800e4ea <put_fat+0x15a>
 800e3be:	2b03      	cmp	r3, #3
 800e3c0:	f300 80cb 	bgt.w	800e55a <put_fat+0x1ca>
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d002      	beq.n	800e3ce <put_fat+0x3e>
 800e3c8:	2b02      	cmp	r3, #2
 800e3ca:	d06e      	beq.n	800e4aa <put_fat+0x11a>
 800e3cc:	e0c5      	b.n	800e55a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	61bb      	str	r3, [r7, #24]
 800e3d2:	69bb      	ldr	r3, [r7, #24]
 800e3d4:	085b      	lsrs	r3, r3, #1
 800e3d6:	69ba      	ldr	r2, [r7, #24]
 800e3d8:	4413      	add	r3, r2
 800e3da:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e3e0:	69bb      	ldr	r3, [r7, #24]
 800e3e2:	0a5b      	lsrs	r3, r3, #9
 800e3e4:	4413      	add	r3, r2
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f7ff fe6f 	bl	800e0cc <move_window>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e3f2:	7ffb      	ldrb	r3, [r7, #31]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f040 80a9 	bne.w	800e54c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e400:	69bb      	ldr	r3, [r7, #24]
 800e402:	1c59      	adds	r1, r3, #1
 800e404:	61b9      	str	r1, [r7, #24]
 800e406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e40a:	4413      	add	r3, r2
 800e40c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	f003 0301 	and.w	r3, r3, #1
 800e414:	2b00      	cmp	r3, #0
 800e416:	d00d      	beq.n	800e434 <put_fat+0xa4>
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	b25b      	sxtb	r3, r3
 800e41e:	f003 030f 	and.w	r3, r3, #15
 800e422:	b25a      	sxtb	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	b2db      	uxtb	r3, r3
 800e428:	011b      	lsls	r3, r3, #4
 800e42a:	b25b      	sxtb	r3, r3
 800e42c:	4313      	orrs	r3, r2
 800e42e:	b25b      	sxtb	r3, r3
 800e430:	b2db      	uxtb	r3, r3
 800e432:	e001      	b.n	800e438 <put_fat+0xa8>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	b2db      	uxtb	r3, r3
 800e438:	697a      	ldr	r2, [r7, #20]
 800e43a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2201      	movs	r2, #1
 800e440:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	0a5b      	lsrs	r3, r3, #9
 800e44a:	4413      	add	r3, r2
 800e44c:	4619      	mov	r1, r3
 800e44e:	68f8      	ldr	r0, [r7, #12]
 800e450:	f7ff fe3c 	bl	800e0cc <move_window>
 800e454:	4603      	mov	r3, r0
 800e456:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e458:	7ffb      	ldrb	r3, [r7, #31]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d178      	bne.n	800e550 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e464:	69bb      	ldr	r3, [r7, #24]
 800e466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e46a:	4413      	add	r3, r2
 800e46c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	f003 0301 	and.w	r3, r3, #1
 800e474:	2b00      	cmp	r3, #0
 800e476:	d003      	beq.n	800e480 <put_fat+0xf0>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	091b      	lsrs	r3, r3, #4
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	e00e      	b.n	800e49e <put_fat+0x10e>
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	b25b      	sxtb	r3, r3
 800e486:	f023 030f 	bic.w	r3, r3, #15
 800e48a:	b25a      	sxtb	r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	0a1b      	lsrs	r3, r3, #8
 800e490:	b25b      	sxtb	r3, r3
 800e492:	f003 030f 	and.w	r3, r3, #15
 800e496:	b25b      	sxtb	r3, r3
 800e498:	4313      	orrs	r3, r2
 800e49a:	b25b      	sxtb	r3, r3
 800e49c:	b2db      	uxtb	r3, r3
 800e49e:	697a      	ldr	r2, [r7, #20]
 800e4a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	70da      	strb	r2, [r3, #3]
			break;
 800e4a8:	e057      	b.n	800e55a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	0a1b      	lsrs	r3, r3, #8
 800e4b2:	4413      	add	r3, r2
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f7ff fe08 	bl	800e0cc <move_window>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e4c0:	7ffb      	ldrb	r3, [r7, #31]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d146      	bne.n	800e554 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	005b      	lsls	r3, r3, #1
 800e4d0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e4d4:	4413      	add	r3, r2
 800e4d6:	687a      	ldr	r2, [r7, #4]
 800e4d8:	b292      	uxth	r2, r2
 800e4da:	4611      	mov	r1, r2
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f7ff fb80 	bl	800dbe2 <st_word>
			fs->wflag = 1;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	70da      	strb	r2, [r3, #3]
			break;
 800e4e8:	e037      	b.n	800e55a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	09db      	lsrs	r3, r3, #7
 800e4f2:	4413      	add	r3, r2
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	68f8      	ldr	r0, [r7, #12]
 800e4f8:	f7ff fde8 	bl	800e0cc <move_window>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e500:	7ffb      	ldrb	r3, [r7, #31]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d128      	bne.n	800e558 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e51a:	4413      	add	r3, r2
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7ff fb3d 	bl	800db9c <ld_dword>
 800e522:	4603      	mov	r3, r0
 800e524:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e528:	4323      	orrs	r3, r4
 800e52a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e53a:	4413      	add	r3, r2
 800e53c:	6879      	ldr	r1, [r7, #4]
 800e53e:	4618      	mov	r0, r3
 800e540:	f7ff fb6a 	bl	800dc18 <st_dword>
			fs->wflag = 1;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2201      	movs	r2, #1
 800e548:	70da      	strb	r2, [r3, #3]
			break;
 800e54a:	e006      	b.n	800e55a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e54c:	bf00      	nop
 800e54e:	e004      	b.n	800e55a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e550:	bf00      	nop
 800e552:	e002      	b.n	800e55a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e554:	bf00      	nop
 800e556:	e000      	b.n	800e55a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e558:	bf00      	nop
		}
	}
	return res;
 800e55a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3724      	adds	r7, #36	@ 0x24
 800e560:	46bd      	mov	sp, r7
 800e562:	bd90      	pop	{r4, r7, pc}

0800e564 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b088      	sub	sp, #32
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60f8      	str	r0, [r7, #12]
 800e56c:	60b9      	str	r1, [r7, #8]
 800e56e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e570:	2300      	movs	r3, #0
 800e572:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	d904      	bls.n	800e58a <remove_chain+0x26>
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	699b      	ldr	r3, [r3, #24]
 800e584:	68ba      	ldr	r2, [r7, #8]
 800e586:	429a      	cmp	r2, r3
 800e588:	d301      	bcc.n	800e58e <remove_chain+0x2a>
 800e58a:	2302      	movs	r3, #2
 800e58c:	e04b      	b.n	800e626 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00c      	beq.n	800e5ae <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e594:	f04f 32ff 	mov.w	r2, #4294967295
 800e598:	6879      	ldr	r1, [r7, #4]
 800e59a:	69b8      	ldr	r0, [r7, #24]
 800e59c:	f7ff fef8 	bl	800e390 <put_fat>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e5a4:	7ffb      	ldrb	r3, [r7, #31]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d001      	beq.n	800e5ae <remove_chain+0x4a>
 800e5aa:	7ffb      	ldrb	r3, [r7, #31]
 800e5ac:	e03b      	b.n	800e626 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e5ae:	68b9      	ldr	r1, [r7, #8]
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	f7ff fe46 	bl	800e242 <get_fat>
 800e5b6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d031      	beq.n	800e622 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	d101      	bne.n	800e5c8 <remove_chain+0x64>
 800e5c4:	2302      	movs	r3, #2
 800e5c6:	e02e      	b.n	800e626 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ce:	d101      	bne.n	800e5d4 <remove_chain+0x70>
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e028      	b.n	800e626 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	68b9      	ldr	r1, [r7, #8]
 800e5d8:	69b8      	ldr	r0, [r7, #24]
 800e5da:	f7ff fed9 	bl	800e390 <put_fat>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e5e2:	7ffb      	ldrb	r3, [r7, #31]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d001      	beq.n	800e5ec <remove_chain+0x88>
 800e5e8:	7ffb      	ldrb	r3, [r7, #31]
 800e5ea:	e01c      	b.n	800e626 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	695a      	ldr	r2, [r3, #20]
 800e5f0:	69bb      	ldr	r3, [r7, #24]
 800e5f2:	699b      	ldr	r3, [r3, #24]
 800e5f4:	3b02      	subs	r3, #2
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d20b      	bcs.n	800e612 <remove_chain+0xae>
			fs->free_clst++;
 800e5fa:	69bb      	ldr	r3, [r7, #24]
 800e5fc:	695b      	ldr	r3, [r3, #20]
 800e5fe:	1c5a      	adds	r2, r3, #1
 800e600:	69bb      	ldr	r3, [r7, #24]
 800e602:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	791b      	ldrb	r3, [r3, #4]
 800e608:	f043 0301 	orr.w	r3, r3, #1
 800e60c:	b2da      	uxtb	r2, r3
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	699b      	ldr	r3, [r3, #24]
 800e61a:	68ba      	ldr	r2, [r7, #8]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d3c6      	bcc.n	800e5ae <remove_chain+0x4a>
 800e620:	e000      	b.n	800e624 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e622:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e624:	2300      	movs	r3, #0
}
 800e626:	4618      	mov	r0, r3
 800e628:	3720      	adds	r7, #32
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}

0800e62e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e62e:	b580      	push	{r7, lr}
 800e630:	b088      	sub	sp, #32
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
 800e636:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10d      	bne.n	800e660 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e644:	693b      	ldr	r3, [r7, #16]
 800e646:	691b      	ldr	r3, [r3, #16]
 800e648:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e64a:	69bb      	ldr	r3, [r7, #24]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d004      	beq.n	800e65a <create_chain+0x2c>
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	699b      	ldr	r3, [r3, #24]
 800e654:	69ba      	ldr	r2, [r7, #24]
 800e656:	429a      	cmp	r2, r3
 800e658:	d31b      	bcc.n	800e692 <create_chain+0x64>
 800e65a:	2301      	movs	r3, #1
 800e65c:	61bb      	str	r3, [r7, #24]
 800e65e:	e018      	b.n	800e692 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f7ff fded 	bl	800e242 <get_fat>
 800e668:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d801      	bhi.n	800e674 <create_chain+0x46>
 800e670:	2301      	movs	r3, #1
 800e672:	e070      	b.n	800e756 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e67a:	d101      	bne.n	800e680 <create_chain+0x52>
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	e06a      	b.n	800e756 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	699b      	ldr	r3, [r3, #24]
 800e684:	68fa      	ldr	r2, [r7, #12]
 800e686:	429a      	cmp	r2, r3
 800e688:	d201      	bcs.n	800e68e <create_chain+0x60>
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	e063      	b.n	800e756 <create_chain+0x128>
		scl = clst;
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e696:	69fb      	ldr	r3, [r7, #28]
 800e698:	3301      	adds	r3, #1
 800e69a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	699b      	ldr	r3, [r3, #24]
 800e6a0:	69fa      	ldr	r2, [r7, #28]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d307      	bcc.n	800e6b6 <create_chain+0x88>
				ncl = 2;
 800e6a6:	2302      	movs	r3, #2
 800e6a8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e6aa:	69fa      	ldr	r2, [r7, #28]
 800e6ac:	69bb      	ldr	r3, [r7, #24]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d901      	bls.n	800e6b6 <create_chain+0x88>
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	e04f      	b.n	800e756 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e6b6:	69f9      	ldr	r1, [r7, #28]
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f7ff fdc2 	bl	800e242 <get_fat>
 800e6be:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d00e      	beq.n	800e6e4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d003      	beq.n	800e6d4 <create_chain+0xa6>
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6d2:	d101      	bne.n	800e6d8 <create_chain+0xaa>
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	e03e      	b.n	800e756 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e6d8:	69fa      	ldr	r2, [r7, #28]
 800e6da:	69bb      	ldr	r3, [r7, #24]
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d1da      	bne.n	800e696 <create_chain+0x68>
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	e038      	b.n	800e756 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e6e4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e6ea:	69f9      	ldr	r1, [r7, #28]
 800e6ec:	6938      	ldr	r0, [r7, #16]
 800e6ee:	f7ff fe4f 	bl	800e390 <put_fat>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e6f6:	7dfb      	ldrb	r3, [r7, #23]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d109      	bne.n	800e710 <create_chain+0xe2>
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d006      	beq.n	800e710 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e702:	69fa      	ldr	r2, [r7, #28]
 800e704:	6839      	ldr	r1, [r7, #0]
 800e706:	6938      	ldr	r0, [r7, #16]
 800e708:	f7ff fe42 	bl	800e390 <put_fat>
 800e70c:	4603      	mov	r3, r0
 800e70e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e710:	7dfb      	ldrb	r3, [r7, #23]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d116      	bne.n	800e744 <create_chain+0x116>
		fs->last_clst = ncl;
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	69fa      	ldr	r2, [r7, #28]
 800e71a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	695a      	ldr	r2, [r3, #20]
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	699b      	ldr	r3, [r3, #24]
 800e724:	3b02      	subs	r3, #2
 800e726:	429a      	cmp	r2, r3
 800e728:	d804      	bhi.n	800e734 <create_chain+0x106>
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	695b      	ldr	r3, [r3, #20]
 800e72e:	1e5a      	subs	r2, r3, #1
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	791b      	ldrb	r3, [r3, #4]
 800e738:	f043 0301 	orr.w	r3, r3, #1
 800e73c:	b2da      	uxtb	r2, r3
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	711a      	strb	r2, [r3, #4]
 800e742:	e007      	b.n	800e754 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e744:	7dfb      	ldrb	r3, [r7, #23]
 800e746:	2b01      	cmp	r3, #1
 800e748:	d102      	bne.n	800e750 <create_chain+0x122>
 800e74a:	f04f 33ff 	mov.w	r3, #4294967295
 800e74e:	e000      	b.n	800e752 <create_chain+0x124>
 800e750:	2301      	movs	r3, #1
 800e752:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e754:	69fb      	ldr	r3, [r7, #28]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3720      	adds	r7, #32
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e75e:	b480      	push	{r7}
 800e760:	b087      	sub	sp, #28
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
 800e766:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e772:	3304      	adds	r3, #4
 800e774:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	0a5b      	lsrs	r3, r3, #9
 800e77a:	68fa      	ldr	r2, [r7, #12]
 800e77c:	8952      	ldrh	r2, [r2, #10]
 800e77e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e782:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	1d1a      	adds	r2, r3, #4
 800e788:	613a      	str	r2, [r7, #16]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d101      	bne.n	800e798 <clmt_clust+0x3a>
 800e794:	2300      	movs	r3, #0
 800e796:	e010      	b.n	800e7ba <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e798:	697a      	ldr	r2, [r7, #20]
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d307      	bcc.n	800e7b0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e7a0:	697a      	ldr	r2, [r7, #20]
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	1ad3      	subs	r3, r2, r3
 800e7a6:	617b      	str	r3, [r7, #20]
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	3304      	adds	r3, #4
 800e7ac:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e7ae:	e7e9      	b.n	800e784 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e7b0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	4413      	add	r3, r2
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	371c      	adds	r7, #28
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr

0800e7c6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b086      	sub	sp, #24
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
 800e7ce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e7dc:	d204      	bcs.n	800e7e8 <dir_sdi+0x22>
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	f003 031f 	and.w	r3, r3, #31
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d001      	beq.n	800e7ec <dir_sdi+0x26>
		return FR_INT_ERR;
 800e7e8:	2302      	movs	r3, #2
 800e7ea:	e063      	b.n	800e8b4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	683a      	ldr	r2, [r7, #0]
 800e7f0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d106      	bne.n	800e80c <dir_sdi+0x46>
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	2b02      	cmp	r3, #2
 800e804:	d902      	bls.n	800e80c <dir_sdi+0x46>
		clst = fs->dirbase;
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e80a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d10c      	bne.n	800e82c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	095b      	lsrs	r3, r3, #5
 800e816:	693a      	ldr	r2, [r7, #16]
 800e818:	8912      	ldrh	r2, [r2, #8]
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d301      	bcc.n	800e822 <dir_sdi+0x5c>
 800e81e:	2302      	movs	r3, #2
 800e820:	e048      	b.n	800e8b4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	61da      	str	r2, [r3, #28]
 800e82a:	e029      	b.n	800e880 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	895b      	ldrh	r3, [r3, #10]
 800e830:	025b      	lsls	r3, r3, #9
 800e832:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e834:	e019      	b.n	800e86a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6979      	ldr	r1, [r7, #20]
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7ff fd01 	bl	800e242 <get_fat>
 800e840:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e848:	d101      	bne.n	800e84e <dir_sdi+0x88>
 800e84a:	2301      	movs	r3, #1
 800e84c:	e032      	b.n	800e8b4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	2b01      	cmp	r3, #1
 800e852:	d904      	bls.n	800e85e <dir_sdi+0x98>
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	699b      	ldr	r3, [r3, #24]
 800e858:	697a      	ldr	r2, [r7, #20]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d301      	bcc.n	800e862 <dir_sdi+0x9c>
 800e85e:	2302      	movs	r3, #2
 800e860:	e028      	b.n	800e8b4 <dir_sdi+0xee>
			ofs -= csz;
 800e862:	683a      	ldr	r2, [r7, #0]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	1ad3      	subs	r3, r2, r3
 800e868:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e86a:	683a      	ldr	r2, [r7, #0]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d2e1      	bcs.n	800e836 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e872:	6979      	ldr	r1, [r7, #20]
 800e874:	6938      	ldr	r0, [r7, #16]
 800e876:	f7ff fcc5 	bl	800e204 <clust2sect>
 800e87a:	4602      	mov	r2, r0
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	697a      	ldr	r2, [r7, #20]
 800e884:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	69db      	ldr	r3, [r3, #28]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d101      	bne.n	800e892 <dir_sdi+0xcc>
 800e88e:	2302      	movs	r3, #2
 800e890:	e010      	b.n	800e8b4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	69da      	ldr	r2, [r3, #28]
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	0a5b      	lsrs	r3, r3, #9
 800e89a:	441a      	add	r2, r3
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8ac:	441a      	add	r2, r3
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e8b2:	2300      	movs	r3, #0
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3718      	adds	r7, #24
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b086      	sub	sp, #24
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	695b      	ldr	r3, [r3, #20]
 800e8d0:	3320      	adds	r3, #32
 800e8d2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	69db      	ldr	r3, [r3, #28]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d003      	beq.n	800e8e4 <dir_next+0x28>
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e8e2:	d301      	bcc.n	800e8e8 <dir_next+0x2c>
 800e8e4:	2304      	movs	r3, #4
 800e8e6:	e0aa      	b.n	800ea3e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	f040 8098 	bne.w	800ea24 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	69db      	ldr	r3, [r3, #28]
 800e8f8:	1c5a      	adds	r2, r3, #1
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	699b      	ldr	r3, [r3, #24]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d10b      	bne.n	800e91e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	095b      	lsrs	r3, r3, #5
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	8912      	ldrh	r2, [r2, #8]
 800e90e:	4293      	cmp	r3, r2
 800e910:	f0c0 8088 	bcc.w	800ea24 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2200      	movs	r2, #0
 800e918:	61da      	str	r2, [r3, #28]
 800e91a:	2304      	movs	r3, #4
 800e91c:	e08f      	b.n	800ea3e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	0a5b      	lsrs	r3, r3, #9
 800e922:	68fa      	ldr	r2, [r7, #12]
 800e924:	8952      	ldrh	r2, [r2, #10]
 800e926:	3a01      	subs	r2, #1
 800e928:	4013      	ands	r3, r2
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d17a      	bne.n	800ea24 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	699b      	ldr	r3, [r3, #24]
 800e934:	4619      	mov	r1, r3
 800e936:	4610      	mov	r0, r2
 800e938:	f7ff fc83 	bl	800e242 <get_fat>
 800e93c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	2b01      	cmp	r3, #1
 800e942:	d801      	bhi.n	800e948 <dir_next+0x8c>
 800e944:	2302      	movs	r3, #2
 800e946:	e07a      	b.n	800ea3e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e94e:	d101      	bne.n	800e954 <dir_next+0x98>
 800e950:	2301      	movs	r3, #1
 800e952:	e074      	b.n	800ea3e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	699b      	ldr	r3, [r3, #24]
 800e958:	697a      	ldr	r2, [r7, #20]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d358      	bcc.n	800ea10 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d104      	bne.n	800e96e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2200      	movs	r2, #0
 800e968:	61da      	str	r2, [r3, #28]
 800e96a:	2304      	movs	r3, #4
 800e96c:	e067      	b.n	800ea3e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	699b      	ldr	r3, [r3, #24]
 800e974:	4619      	mov	r1, r3
 800e976:	4610      	mov	r0, r2
 800e978:	f7ff fe59 	bl	800e62e <create_chain>
 800e97c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d101      	bne.n	800e988 <dir_next+0xcc>
 800e984:	2307      	movs	r3, #7
 800e986:	e05a      	b.n	800ea3e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d101      	bne.n	800e992 <dir_next+0xd6>
 800e98e:	2302      	movs	r3, #2
 800e990:	e055      	b.n	800ea3e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e998:	d101      	bne.n	800e99e <dir_next+0xe2>
 800e99a:	2301      	movs	r3, #1
 800e99c:	e04f      	b.n	800ea3e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e99e:	68f8      	ldr	r0, [r7, #12]
 800e9a0:	f7ff fb50 	bl	800e044 <sync_window>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d001      	beq.n	800e9ae <dir_next+0xf2>
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	e047      	b.n	800ea3e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	3334      	adds	r3, #52	@ 0x34
 800e9b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9b6:	2100      	movs	r1, #0
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7ff f97a 	bl	800dcb2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e9be:	2300      	movs	r3, #0
 800e9c0:	613b      	str	r3, [r7, #16]
 800e9c2:	6979      	ldr	r1, [r7, #20]
 800e9c4:	68f8      	ldr	r0, [r7, #12]
 800e9c6:	f7ff fc1d 	bl	800e204 <clust2sect>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	631a      	str	r2, [r3, #48]	@ 0x30
 800e9d0:	e012      	b.n	800e9f8 <dir_next+0x13c>
						fs->wflag = 1;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f7ff fb33 	bl	800e044 <sync_window>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d001      	beq.n	800e9e8 <dir_next+0x12c>
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	e02a      	b.n	800ea3e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	613b      	str	r3, [r7, #16]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9f2:	1c5a      	adds	r2, r3, #1
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	631a      	str	r2, [r3, #48]	@ 0x30
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	895b      	ldrh	r3, [r3, #10]
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d3e6      	bcc.n	800e9d2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	1ad2      	subs	r2, r2, r3
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	697a      	ldr	r2, [r7, #20]
 800ea14:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ea16:	6979      	ldr	r1, [r7, #20]
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	f7ff fbf3 	bl	800e204 <clust2sect>
 800ea1e:	4602      	mov	r2, r0
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	68ba      	ldr	r2, [r7, #8]
 800ea28:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea36:	441a      	add	r2, r3
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ea3c:	2300      	movs	r3, #0
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3718      	adds	r7, #24
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}

0800ea46 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b086      	sub	sp, #24
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
 800ea4e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ea56:	2100      	movs	r1, #0
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f7ff feb4 	bl	800e7c6 <dir_sdi>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ea62:	7dfb      	ldrb	r3, [r7, #23]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d12b      	bne.n	800eac0 <dir_alloc+0x7a>
		n = 0;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	69db      	ldr	r3, [r3, #28]
 800ea70:	4619      	mov	r1, r3
 800ea72:	68f8      	ldr	r0, [r7, #12]
 800ea74:	f7ff fb2a 	bl	800e0cc <move_window>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ea7c:	7dfb      	ldrb	r3, [r7, #23]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d11d      	bne.n	800eabe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6a1b      	ldr	r3, [r3, #32]
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	2be5      	cmp	r3, #229	@ 0xe5
 800ea8a:	d004      	beq.n	800ea96 <dir_alloc+0x50>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6a1b      	ldr	r3, [r3, #32]
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d107      	bne.n	800eaa6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	613b      	str	r3, [r7, #16]
 800ea9c:	693a      	ldr	r2, [r7, #16]
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d102      	bne.n	800eaaa <dir_alloc+0x64>
 800eaa4:	e00c      	b.n	800eac0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800eaaa:	2101      	movs	r1, #1
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f7ff ff05 	bl	800e8bc <dir_next>
 800eab2:	4603      	mov	r3, r0
 800eab4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800eab6:	7dfb      	ldrb	r3, [r7, #23]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d0d7      	beq.n	800ea6c <dir_alloc+0x26>
 800eabc:	e000      	b.n	800eac0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800eabe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800eac0:	7dfb      	ldrb	r3, [r7, #23]
 800eac2:	2b04      	cmp	r3, #4
 800eac4:	d101      	bne.n	800eaca <dir_alloc+0x84>
 800eac6:	2307      	movs	r3, #7
 800eac8:	75fb      	strb	r3, [r7, #23]
	return res;
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3718      	adds	r7, #24
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	331a      	adds	r3, #26
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7ff f842 	bl	800db6c <ld_word>
 800eae8:	4603      	mov	r3, r0
 800eaea:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	2b03      	cmp	r3, #3
 800eaf2:	d109      	bne.n	800eb08 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	3314      	adds	r3, #20
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7ff f837 	bl	800db6c <ld_word>
 800eafe:	4603      	mov	r3, r0
 800eb00:	041b      	lsls	r3, r3, #16
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	4313      	orrs	r3, r2
 800eb06:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800eb08:	68fb      	ldr	r3, [r7, #12]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b084      	sub	sp, #16
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	60f8      	str	r0, [r7, #12]
 800eb1a:	60b9      	str	r1, [r7, #8]
 800eb1c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	331a      	adds	r3, #26
 800eb22:	687a      	ldr	r2, [r7, #4]
 800eb24:	b292      	uxth	r2, r2
 800eb26:	4611      	mov	r1, r2
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7ff f85a 	bl	800dbe2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	781b      	ldrb	r3, [r3, #0]
 800eb32:	2b03      	cmp	r3, #3
 800eb34:	d109      	bne.n	800eb4a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	f103 0214 	add.w	r2, r3, #20
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	0c1b      	lsrs	r3, r3, #16
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	4619      	mov	r1, r3
 800eb44:	4610      	mov	r0, r2
 800eb46:	f7ff f84c 	bl	800dbe2 <st_word>
	}
}
 800eb4a:	bf00      	nop
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
	...

0800eb54 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800eb54:	b590      	push	{r4, r7, lr}
 800eb56:	b087      	sub	sp, #28
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	331a      	adds	r3, #26
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7ff f802 	bl	800db6c <ld_word>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d001      	beq.n	800eb72 <cmp_lfn+0x1e>
 800eb6e:	2300      	movs	r3, #0
 800eb70:	e059      	b.n	800ec26 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb7a:	1e5a      	subs	r2, r3, #1
 800eb7c:	4613      	mov	r3, r2
 800eb7e:	005b      	lsls	r3, r3, #1
 800eb80:	4413      	add	r3, r2
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	4413      	add	r3, r2
 800eb86:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800eb88:	2301      	movs	r3, #1
 800eb8a:	81fb      	strh	r3, [r7, #14]
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	613b      	str	r3, [r7, #16]
 800eb90:	e033      	b.n	800ebfa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800eb92:	4a27      	ldr	r2, [pc, #156]	@ (800ec30 <cmp_lfn+0xdc>)
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	4413      	add	r3, r2
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	4413      	add	r3, r2
 800eba0:	4618      	mov	r0, r3
 800eba2:	f7fe ffe3 	bl	800db6c <ld_word>
 800eba6:	4603      	mov	r3, r0
 800eba8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ebaa:	89fb      	ldrh	r3, [r7, #14]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d01a      	beq.n	800ebe6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	2bfe      	cmp	r3, #254	@ 0xfe
 800ebb4:	d812      	bhi.n	800ebdc <cmp_lfn+0x88>
 800ebb6:	89bb      	ldrh	r3, [r7, #12]
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f001 feff 	bl	80109bc <ff_wtoupper>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	461c      	mov	r4, r3
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	1c5a      	adds	r2, r3, #1
 800ebc6:	617a      	str	r2, [r7, #20]
 800ebc8:	005b      	lsls	r3, r3, #1
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	4413      	add	r3, r2
 800ebce:	881b      	ldrh	r3, [r3, #0]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f001 fef3 	bl	80109bc <ff_wtoupper>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	429c      	cmp	r4, r3
 800ebda:	d001      	beq.n	800ebe0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ebdc:	2300      	movs	r3, #0
 800ebde:	e022      	b.n	800ec26 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ebe0:	89bb      	ldrh	r3, [r7, #12]
 800ebe2:	81fb      	strh	r3, [r7, #14]
 800ebe4:	e006      	b.n	800ebf4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ebe6:	89bb      	ldrh	r3, [r7, #12]
 800ebe8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d001      	beq.n	800ebf4 <cmp_lfn+0xa0>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	e018      	b.n	800ec26 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	613b      	str	r3, [r7, #16]
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	2b0c      	cmp	r3, #12
 800ebfe:	d9c8      	bls.n	800eb92 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d00b      	beq.n	800ec24 <cmp_lfn+0xd0>
 800ec0c:	89fb      	ldrh	r3, [r7, #14]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d008      	beq.n	800ec24 <cmp_lfn+0xd0>
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	005b      	lsls	r3, r3, #1
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	4413      	add	r3, r2
 800ec1a:	881b      	ldrh	r3, [r3, #0]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d001      	beq.n	800ec24 <cmp_lfn+0xd0>
 800ec20:	2300      	movs	r3, #0
 800ec22:	e000      	b.n	800ec26 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ec24:	2301      	movs	r3, #1
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	371c      	adds	r7, #28
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd90      	pop	{r4, r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	08011274 	.word	0x08011274

0800ec34 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b088      	sub	sp, #32
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	4611      	mov	r1, r2
 800ec40:	461a      	mov	r2, r3
 800ec42:	460b      	mov	r3, r1
 800ec44:	71fb      	strb	r3, [r7, #7]
 800ec46:	4613      	mov	r3, r2
 800ec48:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	330d      	adds	r3, #13
 800ec4e:	79ba      	ldrb	r2, [r7, #6]
 800ec50:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	330b      	adds	r3, #11
 800ec56:	220f      	movs	r2, #15
 800ec58:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	330c      	adds	r3, #12
 800ec5e:	2200      	movs	r2, #0
 800ec60:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	331a      	adds	r3, #26
 800ec66:	2100      	movs	r1, #0
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7fe ffba 	bl	800dbe2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ec6e:	79fb      	ldrb	r3, [r7, #7]
 800ec70:	1e5a      	subs	r2, r3, #1
 800ec72:	4613      	mov	r3, r2
 800ec74:	005b      	lsls	r3, r3, #1
 800ec76:	4413      	add	r3, r2
 800ec78:	009b      	lsls	r3, r3, #2
 800ec7a:	4413      	add	r3, r2
 800ec7c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	82fb      	strh	r3, [r7, #22]
 800ec82:	2300      	movs	r3, #0
 800ec84:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ec86:	8afb      	ldrh	r3, [r7, #22]
 800ec88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d007      	beq.n	800eca0 <put_lfn+0x6c>
 800ec90:	69fb      	ldr	r3, [r7, #28]
 800ec92:	1c5a      	adds	r2, r3, #1
 800ec94:	61fa      	str	r2, [r7, #28]
 800ec96:	005b      	lsls	r3, r3, #1
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	881b      	ldrh	r3, [r3, #0]
 800ec9e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800eca0:	4a17      	ldr	r2, [pc, #92]	@ (800ed00 <put_lfn+0xcc>)
 800eca2:	69bb      	ldr	r3, [r7, #24]
 800eca4:	4413      	add	r3, r2
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	461a      	mov	r2, r3
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	4413      	add	r3, r2
 800ecae:	8afa      	ldrh	r2, [r7, #22]
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fe ff95 	bl	800dbe2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ecb8:	8afb      	ldrh	r3, [r7, #22]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d102      	bne.n	800ecc4 <put_lfn+0x90>
 800ecbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ecc2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ecc4:	69bb      	ldr	r3, [r7, #24]
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	61bb      	str	r3, [r7, #24]
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	2b0c      	cmp	r3, #12
 800ecce:	d9da      	bls.n	800ec86 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ecd0:	8afb      	ldrh	r3, [r7, #22]
 800ecd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d006      	beq.n	800ece8 <put_lfn+0xb4>
 800ecda:	69fb      	ldr	r3, [r7, #28]
 800ecdc:	005b      	lsls	r3, r3, #1
 800ecde:	68fa      	ldr	r2, [r7, #12]
 800ece0:	4413      	add	r3, r2
 800ece2:	881b      	ldrh	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d103      	bne.n	800ecf0 <put_lfn+0xbc>
 800ece8:	79fb      	ldrb	r3, [r7, #7]
 800ecea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	79fa      	ldrb	r2, [r7, #7]
 800ecf4:	701a      	strb	r2, [r3, #0]
}
 800ecf6:	bf00      	nop
 800ecf8:	3720      	adds	r7, #32
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	08011274 	.word	0x08011274

0800ed04 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b08c      	sub	sp, #48	@ 0x30
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	607a      	str	r2, [r7, #4]
 800ed10:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ed12:	220b      	movs	r2, #11
 800ed14:	68b9      	ldr	r1, [r7, #8]
 800ed16:	68f8      	ldr	r0, [r7, #12]
 800ed18:	f7fe ffaa 	bl	800dc70 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	2b05      	cmp	r3, #5
 800ed20:	d929      	bls.n	800ed76 <gen_numname+0x72>
		sr = seq;
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ed26:	e020      	b.n	800ed6a <gen_numname+0x66>
			wc = *lfn++;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	1c9a      	adds	r2, r3, #2
 800ed2c:	607a      	str	r2, [r7, #4]
 800ed2e:	881b      	ldrh	r3, [r3, #0]
 800ed30:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800ed32:	2300      	movs	r3, #0
 800ed34:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed36:	e015      	b.n	800ed64 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	005a      	lsls	r2, r3, #1
 800ed3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ed3e:	f003 0301 	and.w	r3, r3, #1
 800ed42:	4413      	add	r3, r2
 800ed44:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ed46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ed48:	085b      	lsrs	r3, r3, #1
 800ed4a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ed4c:	69fb      	ldr	r3, [r7, #28]
 800ed4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d003      	beq.n	800ed5e <gen_numname+0x5a>
 800ed56:	69fa      	ldr	r2, [r7, #28]
 800ed58:	4b30      	ldr	r3, [pc, #192]	@ (800ee1c <gen_numname+0x118>)
 800ed5a:	4053      	eors	r3, r2
 800ed5c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ed5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed60:	3301      	adds	r3, #1
 800ed62:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed66:	2b0f      	cmp	r3, #15
 800ed68:	d9e6      	bls.n	800ed38 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	881b      	ldrh	r3, [r3, #0]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d1da      	bne.n	800ed28 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ed76:	2307      	movs	r3, #7
 800ed78:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	f003 030f 	and.w	r3, r3, #15
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	3330      	adds	r3, #48	@ 0x30
 800ed86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800ed8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ed8e:	2b39      	cmp	r3, #57	@ 0x39
 800ed90:	d904      	bls.n	800ed9c <gen_numname+0x98>
 800ed92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ed96:	3307      	adds	r3, #7
 800ed98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800ed9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed9e:	1e5a      	subs	r2, r3, #1
 800eda0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800eda2:	3330      	adds	r3, #48	@ 0x30
 800eda4:	443b      	add	r3, r7
 800eda6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800edaa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	091b      	lsrs	r3, r3, #4
 800edb2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1df      	bne.n	800ed7a <gen_numname+0x76>
	ns[i] = '~';
 800edba:	f107 0214 	add.w	r2, r7, #20
 800edbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edc0:	4413      	add	r3, r2
 800edc2:	227e      	movs	r2, #126	@ 0x7e
 800edc4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800edc6:	2300      	movs	r3, #0
 800edc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800edca:	e002      	b.n	800edd2 <gen_numname+0xce>
 800edcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edce:	3301      	adds	r3, #1
 800edd0:	627b      	str	r3, [r7, #36]	@ 0x24
 800edd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800edd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d205      	bcs.n	800ede6 <gen_numname+0xe2>
 800edda:	68fa      	ldr	r2, [r7, #12]
 800eddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edde:	4413      	add	r3, r2
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	2b20      	cmp	r3, #32
 800ede4:	d1f2      	bne.n	800edcc <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ede6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ede8:	2b07      	cmp	r3, #7
 800edea:	d807      	bhi.n	800edfc <gen_numname+0xf8>
 800edec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edee:	1c5a      	adds	r2, r3, #1
 800edf0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800edf2:	3330      	adds	r3, #48	@ 0x30
 800edf4:	443b      	add	r3, r7
 800edf6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800edfa:	e000      	b.n	800edfe <gen_numname+0xfa>
 800edfc:	2120      	movs	r1, #32
 800edfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee00:	1c5a      	adds	r2, r3, #1
 800ee02:	627a      	str	r2, [r7, #36]	@ 0x24
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	4413      	add	r3, r2
 800ee08:	460a      	mov	r2, r1
 800ee0a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ee0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee0e:	2b07      	cmp	r3, #7
 800ee10:	d9e9      	bls.n	800ede6 <gen_numname+0xe2>
}
 800ee12:	bf00      	nop
 800ee14:	bf00      	nop
 800ee16:	3730      	adds	r7, #48	@ 0x30
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	00011021 	.word	0x00011021

0800ee20 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b085      	sub	sp, #20
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ee2c:	230b      	movs	r3, #11
 800ee2e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ee30:	7bfb      	ldrb	r3, [r7, #15]
 800ee32:	b2da      	uxtb	r2, r3
 800ee34:	0852      	lsrs	r2, r2, #1
 800ee36:	01db      	lsls	r3, r3, #7
 800ee38:	4313      	orrs	r3, r2
 800ee3a:	b2da      	uxtb	r2, r3
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	1c59      	adds	r1, r3, #1
 800ee40:	6079      	str	r1, [r7, #4]
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	4413      	add	r3, r2
 800ee46:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	3b01      	subs	r3, #1
 800ee4c:	60bb      	str	r3, [r7, #8]
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d1ed      	bne.n	800ee30 <sum_sfn+0x10>
	return sum;
 800ee54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3714      	adds	r7, #20
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr

0800ee62 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ee62:	b580      	push	{r7, lr}
 800ee64:	b086      	sub	sp, #24
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ee70:	2100      	movs	r1, #0
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f7ff fca7 	bl	800e7c6 <dir_sdi>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ee7c:	7dfb      	ldrb	r3, [r7, #23]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d001      	beq.n	800ee86 <dir_find+0x24>
 800ee82:	7dfb      	ldrb	r3, [r7, #23]
 800ee84:	e0a9      	b.n	800efda <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ee86:	23ff      	movs	r3, #255	@ 0xff
 800ee88:	753b      	strb	r3, [r7, #20]
 800ee8a:	7d3b      	ldrb	r3, [r7, #20]
 800ee8c:	757b      	strb	r3, [r7, #21]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f04f 32ff 	mov.w	r2, #4294967295
 800ee94:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	69db      	ldr	r3, [r3, #28]
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	6938      	ldr	r0, [r7, #16]
 800ee9e:	f7ff f915 	bl	800e0cc <move_window>
 800eea2:	4603      	mov	r3, r0
 800eea4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eea6:	7dfb      	ldrb	r3, [r7, #23]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	f040 8090 	bne.w	800efce <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6a1b      	ldr	r3, [r3, #32]
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800eeb6:	7dbb      	ldrb	r3, [r7, #22]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d102      	bne.n	800eec2 <dir_find+0x60>
 800eebc:	2304      	movs	r3, #4
 800eebe:	75fb      	strb	r3, [r7, #23]
 800eec0:	e08a      	b.n	800efd8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6a1b      	ldr	r3, [r3, #32]
 800eec6:	330b      	adds	r3, #11
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eece:	73fb      	strb	r3, [r7, #15]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	7bfa      	ldrb	r2, [r7, #15]
 800eed4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800eed6:	7dbb      	ldrb	r3, [r7, #22]
 800eed8:	2be5      	cmp	r3, #229	@ 0xe5
 800eeda:	d007      	beq.n	800eeec <dir_find+0x8a>
 800eedc:	7bfb      	ldrb	r3, [r7, #15]
 800eede:	f003 0308 	and.w	r3, r3, #8
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d009      	beq.n	800eefa <dir_find+0x98>
 800eee6:	7bfb      	ldrb	r3, [r7, #15]
 800eee8:	2b0f      	cmp	r3, #15
 800eeea:	d006      	beq.n	800eefa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eeec:	23ff      	movs	r3, #255	@ 0xff
 800eeee:	757b      	strb	r3, [r7, #21]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f04f 32ff 	mov.w	r2, #4294967295
 800eef6:	631a      	str	r2, [r3, #48]	@ 0x30
 800eef8:	e05e      	b.n	800efb8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800eefa:	7bfb      	ldrb	r3, [r7, #15]
 800eefc:	2b0f      	cmp	r3, #15
 800eefe:	d136      	bne.n	800ef6e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ef06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d154      	bne.n	800efb8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ef0e:	7dbb      	ldrb	r3, [r7, #22]
 800ef10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00d      	beq.n	800ef34 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6a1b      	ldr	r3, [r3, #32]
 800ef1c:	7b5b      	ldrb	r3, [r3, #13]
 800ef1e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ef20:	7dbb      	ldrb	r3, [r7, #22]
 800ef22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef26:	75bb      	strb	r3, [r7, #22]
 800ef28:	7dbb      	ldrb	r3, [r7, #22]
 800ef2a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	695a      	ldr	r2, [r3, #20]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ef34:	7dba      	ldrb	r2, [r7, #22]
 800ef36:	7d7b      	ldrb	r3, [r7, #21]
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d115      	bne.n	800ef68 <dir_find+0x106>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6a1b      	ldr	r3, [r3, #32]
 800ef40:	330d      	adds	r3, #13
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	7d3a      	ldrb	r2, [r7, #20]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d10e      	bne.n	800ef68 <dir_find+0x106>
 800ef4a:	693b      	ldr	r3, [r7, #16]
 800ef4c:	68da      	ldr	r2, [r3, #12]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6a1b      	ldr	r3, [r3, #32]
 800ef52:	4619      	mov	r1, r3
 800ef54:	4610      	mov	r0, r2
 800ef56:	f7ff fdfd 	bl	800eb54 <cmp_lfn>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d003      	beq.n	800ef68 <dir_find+0x106>
 800ef60:	7d7b      	ldrb	r3, [r7, #21]
 800ef62:	3b01      	subs	r3, #1
 800ef64:	b2db      	uxtb	r3, r3
 800ef66:	e000      	b.n	800ef6a <dir_find+0x108>
 800ef68:	23ff      	movs	r3, #255	@ 0xff
 800ef6a:	757b      	strb	r3, [r7, #21]
 800ef6c:	e024      	b.n	800efb8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ef6e:	7d7b      	ldrb	r3, [r7, #21]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d109      	bne.n	800ef88 <dir_find+0x126>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6a1b      	ldr	r3, [r3, #32]
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7ff ff51 	bl	800ee20 <sum_sfn>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	461a      	mov	r2, r3
 800ef82:	7d3b      	ldrb	r3, [r7, #20]
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d024      	beq.n	800efd2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ef8e:	f003 0301 	and.w	r3, r3, #1
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d10a      	bne.n	800efac <dir_find+0x14a>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6a18      	ldr	r0, [r3, #32]
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	3324      	adds	r3, #36	@ 0x24
 800ef9e:	220b      	movs	r2, #11
 800efa0:	4619      	mov	r1, r3
 800efa2:	f7fe fea1 	bl	800dce8 <mem_cmp>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d014      	beq.n	800efd6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800efac:	23ff      	movs	r3, #255	@ 0xff
 800efae:	757b      	strb	r3, [r7, #21]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f04f 32ff 	mov.w	r2, #4294967295
 800efb6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800efb8:	2100      	movs	r1, #0
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f7ff fc7e 	bl	800e8bc <dir_next>
 800efc0:	4603      	mov	r3, r0
 800efc2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800efc4:	7dfb      	ldrb	r3, [r7, #23]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	f43f af65 	beq.w	800ee96 <dir_find+0x34>
 800efcc:	e004      	b.n	800efd8 <dir_find+0x176>
		if (res != FR_OK) break;
 800efce:	bf00      	nop
 800efd0:	e002      	b.n	800efd8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800efd2:	bf00      	nop
 800efd4:	e000      	b.n	800efd8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800efd6:	bf00      	nop

	return res;
 800efd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3718      	adds	r7, #24
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
	...

0800efe4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b08c      	sub	sp, #48	@ 0x30
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800eff8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d001      	beq.n	800f004 <dir_register+0x20>
 800f000:	2306      	movs	r3, #6
 800f002:	e0e0      	b.n	800f1c6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f004:	2300      	movs	r3, #0
 800f006:	627b      	str	r3, [r7, #36]	@ 0x24
 800f008:	e002      	b.n	800f010 <dir_register+0x2c>
 800f00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f00c:	3301      	adds	r3, #1
 800f00e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	68da      	ldr	r2, [r3, #12]
 800f014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f016:	005b      	lsls	r3, r3, #1
 800f018:	4413      	add	r3, r2
 800f01a:	881b      	ldrh	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d1f4      	bne.n	800f00a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800f026:	f107 030c 	add.w	r3, r7, #12
 800f02a:	220c      	movs	r2, #12
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7fe fe1f 	bl	800dc70 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f032:	7dfb      	ldrb	r3, [r7, #23]
 800f034:	f003 0301 	and.w	r3, r3, #1
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d032      	beq.n	800f0a2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2240      	movs	r2, #64	@ 0x40
 800f040:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800f044:	2301      	movs	r3, #1
 800f046:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f048:	e016      	b.n	800f078 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800f050:	69fb      	ldr	r3, [r7, #28]
 800f052:	68da      	ldr	r2, [r3, #12]
 800f054:	f107 010c 	add.w	r1, r7, #12
 800f058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f05a:	f7ff fe53 	bl	800ed04 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f7ff feff 	bl	800ee62 <dir_find>
 800f064:	4603      	mov	r3, r0
 800f066:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800f06a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d106      	bne.n	800f080 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f074:	3301      	adds	r3, #1
 800f076:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f07a:	2b63      	cmp	r3, #99	@ 0x63
 800f07c:	d9e5      	bls.n	800f04a <dir_register+0x66>
 800f07e:	e000      	b.n	800f082 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f080:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f084:	2b64      	cmp	r3, #100	@ 0x64
 800f086:	d101      	bne.n	800f08c <dir_register+0xa8>
 800f088:	2307      	movs	r3, #7
 800f08a:	e09c      	b.n	800f1c6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f08c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f090:	2b04      	cmp	r3, #4
 800f092:	d002      	beq.n	800f09a <dir_register+0xb6>
 800f094:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f098:	e095      	b.n	800f1c6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f09a:	7dfa      	ldrb	r2, [r7, #23]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f0a2:	7dfb      	ldrb	r3, [r7, #23]
 800f0a4:	f003 0302 	and.w	r3, r3, #2
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d007      	beq.n	800f0bc <dir_register+0xd8>
 800f0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ae:	330c      	adds	r3, #12
 800f0b0:	4a47      	ldr	r2, [pc, #284]	@ (800f1d0 <dir_register+0x1ec>)
 800f0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0b6:	089b      	lsrs	r3, r3, #2
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	e000      	b.n	800f0be <dir_register+0xda>
 800f0bc:	2301      	movs	r3, #1
 800f0be:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f0c0:	6a39      	ldr	r1, [r7, #32]
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f7ff fcbf 	bl	800ea46 <dir_alloc>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f0ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d148      	bne.n	800f168 <dir_register+0x184>
 800f0d6:	6a3b      	ldr	r3, [r7, #32]
 800f0d8:	3b01      	subs	r3, #1
 800f0da:	623b      	str	r3, [r7, #32]
 800f0dc:	6a3b      	ldr	r3, [r7, #32]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d042      	beq.n	800f168 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	695a      	ldr	r2, [r3, #20]
 800f0e6:	6a3b      	ldr	r3, [r7, #32]
 800f0e8:	015b      	lsls	r3, r3, #5
 800f0ea:	1ad3      	subs	r3, r2, r3
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f7ff fb69 	bl	800e7c6 <dir_sdi>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800f0fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d132      	bne.n	800f168 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	3324      	adds	r3, #36	@ 0x24
 800f106:	4618      	mov	r0, r3
 800f108:	f7ff fe8a 	bl	800ee20 <sum_sfn>
 800f10c:	4603      	mov	r3, r0
 800f10e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	69db      	ldr	r3, [r3, #28]
 800f114:	4619      	mov	r1, r3
 800f116:	69f8      	ldr	r0, [r7, #28]
 800f118:	f7fe ffd8 	bl	800e0cc <move_window>
 800f11c:	4603      	mov	r3, r0
 800f11e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800f122:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f126:	2b00      	cmp	r3, #0
 800f128:	d11d      	bne.n	800f166 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	68d8      	ldr	r0, [r3, #12]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6a19      	ldr	r1, [r3, #32]
 800f132:	6a3b      	ldr	r3, [r7, #32]
 800f134:	b2da      	uxtb	r2, r3
 800f136:	7efb      	ldrb	r3, [r7, #27]
 800f138:	f7ff fd7c 	bl	800ec34 <put_lfn>
				fs->wflag = 1;
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	2201      	movs	r2, #1
 800f140:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f142:	2100      	movs	r1, #0
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f7ff fbb9 	bl	800e8bc <dir_next>
 800f14a:	4603      	mov	r3, r0
 800f14c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800f150:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f154:	2b00      	cmp	r3, #0
 800f156:	d107      	bne.n	800f168 <dir_register+0x184>
 800f158:	6a3b      	ldr	r3, [r7, #32]
 800f15a:	3b01      	subs	r3, #1
 800f15c:	623b      	str	r3, [r7, #32]
 800f15e:	6a3b      	ldr	r3, [r7, #32]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d1d5      	bne.n	800f110 <dir_register+0x12c>
 800f164:	e000      	b.n	800f168 <dir_register+0x184>
				if (res != FR_OK) break;
 800f166:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f168:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d128      	bne.n	800f1c2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	69db      	ldr	r3, [r3, #28]
 800f174:	4619      	mov	r1, r3
 800f176:	69f8      	ldr	r0, [r7, #28]
 800f178:	f7fe ffa8 	bl	800e0cc <move_window>
 800f17c:	4603      	mov	r3, r0
 800f17e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800f182:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f186:	2b00      	cmp	r3, #0
 800f188:	d11b      	bne.n	800f1c2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6a1b      	ldr	r3, [r3, #32]
 800f18e:	2220      	movs	r2, #32
 800f190:	2100      	movs	r1, #0
 800f192:	4618      	mov	r0, r3
 800f194:	f7fe fd8d 	bl	800dcb2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6a18      	ldr	r0, [r3, #32]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	3324      	adds	r3, #36	@ 0x24
 800f1a0:	220b      	movs	r2, #11
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	f7fe fd64 	bl	800dc70 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6a1b      	ldr	r3, [r3, #32]
 800f1b2:	330c      	adds	r3, #12
 800f1b4:	f002 0218 	and.w	r2, r2, #24
 800f1b8:	b2d2      	uxtb	r2, r2
 800f1ba:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	2201      	movs	r2, #1
 800f1c0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f1c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3730      	adds	r7, #48	@ 0x30
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	4ec4ec4f 	.word	0x4ec4ec4f

0800f1d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b08a      	sub	sp, #40	@ 0x28
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	613b      	str	r3, [r7, #16]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	68db      	ldr	r3, [r3, #12]
 800f1ea:	60fb      	str	r3, [r7, #12]
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	617b      	str	r3, [r7, #20]
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	1c5a      	adds	r2, r3, #1
 800f1f8:	61ba      	str	r2, [r7, #24]
 800f1fa:	693a      	ldr	r2, [r7, #16]
 800f1fc:	4413      	add	r3, r2
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f202:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f204:	2b1f      	cmp	r3, #31
 800f206:	d940      	bls.n	800f28a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f208:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f20a:	2b2f      	cmp	r3, #47	@ 0x2f
 800f20c:	d006      	beq.n	800f21c <create_name+0x48>
 800f20e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f210:	2b5c      	cmp	r3, #92	@ 0x5c
 800f212:	d110      	bne.n	800f236 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f214:	e002      	b.n	800f21c <create_name+0x48>
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	3301      	adds	r3, #1
 800f21a:	61bb      	str	r3, [r7, #24]
 800f21c:	693a      	ldr	r2, [r7, #16]
 800f21e:	69bb      	ldr	r3, [r7, #24]
 800f220:	4413      	add	r3, r2
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	2b2f      	cmp	r3, #47	@ 0x2f
 800f226:	d0f6      	beq.n	800f216 <create_name+0x42>
 800f228:	693a      	ldr	r2, [r7, #16]
 800f22a:	69bb      	ldr	r3, [r7, #24]
 800f22c:	4413      	add	r3, r2
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	2b5c      	cmp	r3, #92	@ 0x5c
 800f232:	d0f0      	beq.n	800f216 <create_name+0x42>
			break;
 800f234:	e02a      	b.n	800f28c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	2bfe      	cmp	r3, #254	@ 0xfe
 800f23a:	d901      	bls.n	800f240 <create_name+0x6c>
 800f23c:	2306      	movs	r3, #6
 800f23e:	e17d      	b.n	800f53c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f240:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f242:	b2db      	uxtb	r3, r3
 800f244:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f246:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f248:	2101      	movs	r1, #1
 800f24a:	4618      	mov	r0, r3
 800f24c:	f001 fb7a 	bl	8010944 <ff_convert>
 800f250:	4603      	mov	r3, r0
 800f252:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f254:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f256:	2b00      	cmp	r3, #0
 800f258:	d101      	bne.n	800f25e <create_name+0x8a>
 800f25a:	2306      	movs	r3, #6
 800f25c:	e16e      	b.n	800f53c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f25e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f260:	2b7f      	cmp	r3, #127	@ 0x7f
 800f262:	d809      	bhi.n	800f278 <create_name+0xa4>
 800f264:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f266:	4619      	mov	r1, r3
 800f268:	488d      	ldr	r0, [pc, #564]	@ (800f4a0 <create_name+0x2cc>)
 800f26a:	f7fe fd64 	bl	800dd36 <chk_chr>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d001      	beq.n	800f278 <create_name+0xa4>
 800f274:	2306      	movs	r3, #6
 800f276:	e161      	b.n	800f53c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	1c5a      	adds	r2, r3, #1
 800f27c:	617a      	str	r2, [r7, #20]
 800f27e:	005b      	lsls	r3, r3, #1
 800f280:	68fa      	ldr	r2, [r7, #12]
 800f282:	4413      	add	r3, r2
 800f284:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f286:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f288:	e7b4      	b.n	800f1f4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f28a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f28c:	693a      	ldr	r2, [r7, #16]
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	441a      	add	r2, r3
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f296:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f298:	2b1f      	cmp	r3, #31
 800f29a:	d801      	bhi.n	800f2a0 <create_name+0xcc>
 800f29c:	2304      	movs	r3, #4
 800f29e:	e000      	b.n	800f2a2 <create_name+0xce>
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f2a6:	e011      	b.n	800f2cc <create_name+0xf8>
		w = lfn[di - 1];
 800f2a8:	697a      	ldr	r2, [r7, #20]
 800f2aa:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f2ae:	4413      	add	r3, r2
 800f2b0:	005b      	lsls	r3, r3, #1
 800f2b2:	68fa      	ldr	r2, [r7, #12]
 800f2b4:	4413      	add	r3, r2
 800f2b6:	881b      	ldrh	r3, [r3, #0]
 800f2b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800f2ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f2bc:	2b20      	cmp	r3, #32
 800f2be:	d002      	beq.n	800f2c6 <create_name+0xf2>
 800f2c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f2c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2c4:	d106      	bne.n	800f2d4 <create_name+0x100>
		di--;
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d1ea      	bne.n	800f2a8 <create_name+0xd4>
 800f2d2:	e000      	b.n	800f2d6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f2d4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	005b      	lsls	r3, r3, #1
 800f2da:	68fa      	ldr	r2, [r7, #12]
 800f2dc:	4413      	add	r3, r2
 800f2de:	2200      	movs	r2, #0
 800f2e0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d101      	bne.n	800f2ec <create_name+0x118>
 800f2e8:	2306      	movs	r3, #6
 800f2ea:	e127      	b.n	800f53c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	3324      	adds	r3, #36	@ 0x24
 800f2f0:	220b      	movs	r2, #11
 800f2f2:	2120      	movs	r1, #32
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7fe fcdc 	bl	800dcb2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	61bb      	str	r3, [r7, #24]
 800f2fe:	e002      	b.n	800f306 <create_name+0x132>
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	3301      	adds	r3, #1
 800f304:	61bb      	str	r3, [r7, #24]
 800f306:	69bb      	ldr	r3, [r7, #24]
 800f308:	005b      	lsls	r3, r3, #1
 800f30a:	68fa      	ldr	r2, [r7, #12]
 800f30c:	4413      	add	r3, r2
 800f30e:	881b      	ldrh	r3, [r3, #0]
 800f310:	2b20      	cmp	r3, #32
 800f312:	d0f5      	beq.n	800f300 <create_name+0x12c>
 800f314:	69bb      	ldr	r3, [r7, #24]
 800f316:	005b      	lsls	r3, r3, #1
 800f318:	68fa      	ldr	r2, [r7, #12]
 800f31a:	4413      	add	r3, r2
 800f31c:	881b      	ldrh	r3, [r3, #0]
 800f31e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f320:	d0ee      	beq.n	800f300 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f322:	69bb      	ldr	r3, [r7, #24]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d009      	beq.n	800f33c <create_name+0x168>
 800f328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f32c:	f043 0303 	orr.w	r3, r3, #3
 800f330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f334:	e002      	b.n	800f33c <create_name+0x168>
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	3b01      	subs	r3, #1
 800f33a:	617b      	str	r3, [r7, #20]
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d009      	beq.n	800f356 <create_name+0x182>
 800f342:	697a      	ldr	r2, [r7, #20]
 800f344:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f348:	4413      	add	r3, r2
 800f34a:	005b      	lsls	r3, r3, #1
 800f34c:	68fa      	ldr	r2, [r7, #12]
 800f34e:	4413      	add	r3, r2
 800f350:	881b      	ldrh	r3, [r3, #0]
 800f352:	2b2e      	cmp	r3, #46	@ 0x2e
 800f354:	d1ef      	bne.n	800f336 <create_name+0x162>

	i = b = 0; ni = 8;
 800f356:	2300      	movs	r3, #0
 800f358:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f35c:	2300      	movs	r3, #0
 800f35e:	623b      	str	r3, [r7, #32]
 800f360:	2308      	movs	r3, #8
 800f362:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f364:	69bb      	ldr	r3, [r7, #24]
 800f366:	1c5a      	adds	r2, r3, #1
 800f368:	61ba      	str	r2, [r7, #24]
 800f36a:	005b      	lsls	r3, r3, #1
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	4413      	add	r3, r2
 800f370:	881b      	ldrh	r3, [r3, #0]
 800f372:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f374:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f376:	2b00      	cmp	r3, #0
 800f378:	f000 8090 	beq.w	800f49c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f37c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f37e:	2b20      	cmp	r3, #32
 800f380:	d006      	beq.n	800f390 <create_name+0x1bc>
 800f382:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f384:	2b2e      	cmp	r3, #46	@ 0x2e
 800f386:	d10a      	bne.n	800f39e <create_name+0x1ca>
 800f388:	69ba      	ldr	r2, [r7, #24]
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d006      	beq.n	800f39e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f394:	f043 0303 	orr.w	r3, r3, #3
 800f398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f39c:	e07d      	b.n	800f49a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f39e:	6a3a      	ldr	r2, [r7, #32]
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d203      	bcs.n	800f3ae <create_name+0x1da>
 800f3a6:	69ba      	ldr	r2, [r7, #24]
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d123      	bne.n	800f3f6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	2b0b      	cmp	r3, #11
 800f3b2:	d106      	bne.n	800f3c2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f3b8:	f043 0303 	orr.w	r3, r3, #3
 800f3bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f3c0:	e075      	b.n	800f4ae <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f3c2:	69ba      	ldr	r2, [r7, #24]
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d005      	beq.n	800f3d6 <create_name+0x202>
 800f3ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f3ce:	f043 0303 	orr.w	r3, r3, #3
 800f3d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800f3d6:	69ba      	ldr	r2, [r7, #24]
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d866      	bhi.n	800f4ac <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	61bb      	str	r3, [r7, #24]
 800f3e2:	2308      	movs	r3, #8
 800f3e4:	623b      	str	r3, [r7, #32]
 800f3e6:	230b      	movs	r3, #11
 800f3e8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f3ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f3ee:	009b      	lsls	r3, r3, #2
 800f3f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f3f4:	e051      	b.n	800f49a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f3f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f3f8:	2b7f      	cmp	r3, #127	@ 0x7f
 800f3fa:	d914      	bls.n	800f426 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f3fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f3fe:	2100      	movs	r1, #0
 800f400:	4618      	mov	r0, r3
 800f402:	f001 fa9f 	bl	8010944 <ff_convert>
 800f406:	4603      	mov	r3, r0
 800f408:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f40a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d004      	beq.n	800f41a <create_name+0x246>
 800f410:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f412:	3b80      	subs	r3, #128	@ 0x80
 800f414:	4a23      	ldr	r2, [pc, #140]	@ (800f4a4 <create_name+0x2d0>)
 800f416:	5cd3      	ldrb	r3, [r2, r3]
 800f418:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f41a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f41e:	f043 0302 	orr.w	r3, r3, #2
 800f422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f426:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d007      	beq.n	800f43c <create_name+0x268>
 800f42c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f42e:	4619      	mov	r1, r3
 800f430:	481d      	ldr	r0, [pc, #116]	@ (800f4a8 <create_name+0x2d4>)
 800f432:	f7fe fc80 	bl	800dd36 <chk_chr>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d008      	beq.n	800f44e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f43c:	235f      	movs	r3, #95	@ 0x5f
 800f43e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800f440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f444:	f043 0303 	orr.w	r3, r3, #3
 800f448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f44c:	e01b      	b.n	800f486 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f44e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f450:	2b40      	cmp	r3, #64	@ 0x40
 800f452:	d909      	bls.n	800f468 <create_name+0x294>
 800f454:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f456:	2b5a      	cmp	r3, #90	@ 0x5a
 800f458:	d806      	bhi.n	800f468 <create_name+0x294>
					b |= 2;
 800f45a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f45e:	f043 0302 	orr.w	r3, r3, #2
 800f462:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f466:	e00e      	b.n	800f486 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f468:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f46a:	2b60      	cmp	r3, #96	@ 0x60
 800f46c:	d90b      	bls.n	800f486 <create_name+0x2b2>
 800f46e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f470:	2b7a      	cmp	r3, #122	@ 0x7a
 800f472:	d808      	bhi.n	800f486 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f474:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f478:	f043 0301 	orr.w	r3, r3, #1
 800f47c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f480:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f482:	3b20      	subs	r3, #32
 800f484:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f486:	6a3b      	ldr	r3, [r7, #32]
 800f488:	1c5a      	adds	r2, r3, #1
 800f48a:	623a      	str	r2, [r7, #32]
 800f48c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f48e:	b2d1      	uxtb	r1, r2
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	4413      	add	r3, r2
 800f494:	460a      	mov	r2, r1
 800f496:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f49a:	e763      	b.n	800f364 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f49c:	bf00      	nop
 800f49e:	e006      	b.n	800f4ae <create_name+0x2da>
 800f4a0:	08010f28 	.word	0x08010f28
 800f4a4:	080111f4 	.word	0x080111f4
 800f4a8:	08010f34 	.word	0x08010f34
			if (si > di) break;			/* No extension */
 800f4ac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f4b4:	2be5      	cmp	r3, #229	@ 0xe5
 800f4b6:	d103      	bne.n	800f4c0 <create_name+0x2ec>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2205      	movs	r2, #5
 800f4bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800f4c0:	69fb      	ldr	r3, [r7, #28]
 800f4c2:	2b08      	cmp	r3, #8
 800f4c4:	d104      	bne.n	800f4d0 <create_name+0x2fc>
 800f4c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f4d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f4d4:	f003 030c 	and.w	r3, r3, #12
 800f4d8:	2b0c      	cmp	r3, #12
 800f4da:	d005      	beq.n	800f4e8 <create_name+0x314>
 800f4dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f4e0:	f003 0303 	and.w	r3, r3, #3
 800f4e4:	2b03      	cmp	r3, #3
 800f4e6:	d105      	bne.n	800f4f4 <create_name+0x320>
 800f4e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f4ec:	f043 0302 	orr.w	r3, r3, #2
 800f4f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f4f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f4f8:	f003 0302 	and.w	r3, r3, #2
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d117      	bne.n	800f530 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f500:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f504:	f003 0303 	and.w	r3, r3, #3
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d105      	bne.n	800f518 <create_name+0x344>
 800f50c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f510:	f043 0310 	orr.w	r3, r3, #16
 800f514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f518:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f51c:	f003 030c 	and.w	r3, r3, #12
 800f520:	2b04      	cmp	r3, #4
 800f522:	d105      	bne.n	800f530 <create_name+0x35c>
 800f524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f528:	f043 0308 	orr.w	r3, r3, #8
 800f52c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800f536:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800f53a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3728      	adds	r7, #40	@ 0x28
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b086      	sub	sp, #24
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f558:	e002      	b.n	800f560 <follow_path+0x1c>
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	3301      	adds	r3, #1
 800f55e:	603b      	str	r3, [r7, #0]
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	2b2f      	cmp	r3, #47	@ 0x2f
 800f566:	d0f8      	beq.n	800f55a <follow_path+0x16>
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	2b5c      	cmp	r3, #92	@ 0x5c
 800f56e:	d0f4      	beq.n	800f55a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	2200      	movs	r2, #0
 800f574:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	2b1f      	cmp	r3, #31
 800f57c:	d80a      	bhi.n	800f594 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2280      	movs	r2, #128	@ 0x80
 800f582:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f586:	2100      	movs	r1, #0
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f7ff f91c 	bl	800e7c6 <dir_sdi>
 800f58e:	4603      	mov	r3, r0
 800f590:	75fb      	strb	r3, [r7, #23]
 800f592:	e043      	b.n	800f61c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f594:	463b      	mov	r3, r7
 800f596:	4619      	mov	r1, r3
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f7ff fe1b 	bl	800f1d4 <create_name>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f5a2:	7dfb      	ldrb	r3, [r7, #23]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d134      	bne.n	800f612 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f7ff fc5a 	bl	800ee62 <dir_find>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f5b8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f5ba:	7dfb      	ldrb	r3, [r7, #23]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00a      	beq.n	800f5d6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f5c0:	7dfb      	ldrb	r3, [r7, #23]
 800f5c2:	2b04      	cmp	r3, #4
 800f5c4:	d127      	bne.n	800f616 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f5c6:	7afb      	ldrb	r3, [r7, #11]
 800f5c8:	f003 0304 	and.w	r3, r3, #4
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d122      	bne.n	800f616 <follow_path+0xd2>
 800f5d0:	2305      	movs	r3, #5
 800f5d2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f5d4:	e01f      	b.n	800f616 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f5d6:	7afb      	ldrb	r3, [r7, #11]
 800f5d8:	f003 0304 	and.w	r3, r3, #4
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d11c      	bne.n	800f61a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	799b      	ldrb	r3, [r3, #6]
 800f5e4:	f003 0310 	and.w	r3, r3, #16
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d102      	bne.n	800f5f2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f5ec:	2305      	movs	r3, #5
 800f5ee:	75fb      	strb	r3, [r7, #23]
 800f5f0:	e014      	b.n	800f61c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	695b      	ldr	r3, [r3, #20]
 800f5fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f600:	4413      	add	r3, r2
 800f602:	4619      	mov	r1, r3
 800f604:	68f8      	ldr	r0, [r7, #12]
 800f606:	f7ff fa65 	bl	800ead4 <ld_clust>
 800f60a:	4602      	mov	r2, r0
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f610:	e7c0      	b.n	800f594 <follow_path+0x50>
			if (res != FR_OK) break;
 800f612:	bf00      	nop
 800f614:	e002      	b.n	800f61c <follow_path+0xd8>
				break;
 800f616:	bf00      	nop
 800f618:	e000      	b.n	800f61c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f61a:	bf00      	nop
			}
		}
	}

	return res;
 800f61c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3718      	adds	r7, #24
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}

0800f626 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f626:	b480      	push	{r7}
 800f628:	b087      	sub	sp, #28
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f62e:	f04f 33ff 	mov.w	r3, #4294967295
 800f632:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d031      	beq.n	800f6a0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	617b      	str	r3, [r7, #20]
 800f642:	e002      	b.n	800f64a <get_ldnumber+0x24>
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	3301      	adds	r3, #1
 800f648:	617b      	str	r3, [r7, #20]
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	2b1f      	cmp	r3, #31
 800f650:	d903      	bls.n	800f65a <get_ldnumber+0x34>
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	2b3a      	cmp	r3, #58	@ 0x3a
 800f658:	d1f4      	bne.n	800f644 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	2b3a      	cmp	r3, #58	@ 0x3a
 800f660:	d11c      	bne.n	800f69c <get_ldnumber+0x76>
			tp = *path;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	1c5a      	adds	r2, r3, #1
 800f66c:	60fa      	str	r2, [r7, #12]
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	3b30      	subs	r3, #48	@ 0x30
 800f672:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	2b09      	cmp	r3, #9
 800f678:	d80e      	bhi.n	800f698 <get_ldnumber+0x72>
 800f67a:	68fa      	ldr	r2, [r7, #12]
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d10a      	bne.n	800f698 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d107      	bne.n	800f698 <get_ldnumber+0x72>
					vol = (int)i;
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	3301      	adds	r3, #1
 800f690:	617b      	str	r3, [r7, #20]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	697a      	ldr	r2, [r7, #20]
 800f696:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	e002      	b.n	800f6a2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f69c:	2300      	movs	r3, #0
 800f69e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f6a0:	693b      	ldr	r3, [r7, #16]
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	371c      	adds	r7, #28
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr
	...

0800f6b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	70da      	strb	r2, [r3, #3]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6c6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f6c8:	6839      	ldr	r1, [r7, #0]
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f7fe fcfe 	bl	800e0cc <move_window>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d001      	beq.n	800f6da <check_fs+0x2a>
 800f6d6:	2304      	movs	r3, #4
 800f6d8:	e038      	b.n	800f74c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	3334      	adds	r3, #52	@ 0x34
 800f6de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7fe fa42 	bl	800db6c <ld_word>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d001      	beq.n	800f6f8 <check_fs+0x48>
 800f6f4:	2303      	movs	r3, #3
 800f6f6:	e029      	b.n	800f74c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f6fe:	2be9      	cmp	r3, #233	@ 0xe9
 800f700:	d009      	beq.n	800f716 <check_fs+0x66>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f708:	2beb      	cmp	r3, #235	@ 0xeb
 800f70a:	d11e      	bne.n	800f74a <check_fs+0x9a>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800f712:	2b90      	cmp	r3, #144	@ 0x90
 800f714:	d119      	bne.n	800f74a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	3334      	adds	r3, #52	@ 0x34
 800f71a:	3336      	adds	r3, #54	@ 0x36
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7fe fa3d 	bl	800db9c <ld_dword>
 800f722:	4603      	mov	r3, r0
 800f724:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f728:	4a0a      	ldr	r2, [pc, #40]	@ (800f754 <check_fs+0xa4>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d101      	bne.n	800f732 <check_fs+0x82>
 800f72e:	2300      	movs	r3, #0
 800f730:	e00c      	b.n	800f74c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	3334      	adds	r3, #52	@ 0x34
 800f736:	3352      	adds	r3, #82	@ 0x52
 800f738:	4618      	mov	r0, r3
 800f73a:	f7fe fa2f 	bl	800db9c <ld_dword>
 800f73e:	4603      	mov	r3, r0
 800f740:	4a05      	ldr	r2, [pc, #20]	@ (800f758 <check_fs+0xa8>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d101      	bne.n	800f74a <check_fs+0x9a>
 800f746:	2300      	movs	r3, #0
 800f748:	e000      	b.n	800f74c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f74a:	2302      	movs	r3, #2
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3708      	adds	r7, #8
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	00544146 	.word	0x00544146
 800f758:	33544146 	.word	0x33544146

0800f75c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b096      	sub	sp, #88	@ 0x58
 800f760:	af00      	add	r7, sp, #0
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	4613      	mov	r3, r2
 800f768:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	2200      	movs	r2, #0
 800f76e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	f7ff ff58 	bl	800f626 <get_ldnumber>
 800f776:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	da01      	bge.n	800f782 <find_volume+0x26>
 800f77e:	230b      	movs	r3, #11
 800f780:	e22d      	b.n	800fbde <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f782:	4aa1      	ldr	r2, [pc, #644]	@ (800fa08 <find_volume+0x2ac>)
 800f784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f78a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d101      	bne.n	800f796 <find_volume+0x3a>
 800f792:	230c      	movs	r3, #12
 800f794:	e223      	b.n	800fbde <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f79a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f79c:	79fb      	ldrb	r3, [r7, #7]
 800f79e:	f023 0301 	bic.w	r3, r3, #1
 800f7a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d01a      	beq.n	800f7e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ae:	785b      	ldrb	r3, [r3, #1]
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7fe f933 	bl	800da1c <disk_status>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f7bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f7c0:	f003 0301 	and.w	r3, r3, #1
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d10c      	bne.n	800f7e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f7c8:	79fb      	ldrb	r3, [r7, #7]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d007      	beq.n	800f7de <find_volume+0x82>
 800f7ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f7d2:	f003 0304 	and.w	r3, r3, #4
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d001      	beq.n	800f7de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f7da:	230a      	movs	r3, #10
 800f7dc:	e1ff      	b.n	800fbde <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f7de:	2300      	movs	r3, #0
 800f7e0:	e1fd      	b.n	800fbde <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f7e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7ea:	b2da      	uxtb	r2, r3
 800f7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f2:	785b      	ldrb	r3, [r3, #1]
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7fe f92b 	bl	800da50 <disk_initialize>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f800:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f804:	f003 0301 	and.w	r3, r3, #1
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d001      	beq.n	800f810 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f80c:	2303      	movs	r3, #3
 800f80e:	e1e6      	b.n	800fbde <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f810:	79fb      	ldrb	r3, [r7, #7]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d007      	beq.n	800f826 <find_volume+0xca>
 800f816:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f81a:	f003 0304 	and.w	r3, r3, #4
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d001      	beq.n	800f826 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f822:	230a      	movs	r3, #10
 800f824:	e1db      	b.n	800fbde <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f826:	2300      	movs	r3, #0
 800f828:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f82a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f82c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f82e:	f7ff ff3f 	bl	800f6b0 <check_fs>
 800f832:	4603      	mov	r3, r0
 800f834:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f838:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f83c:	2b02      	cmp	r3, #2
 800f83e:	d149      	bne.n	800f8d4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f840:	2300      	movs	r3, #0
 800f842:	643b      	str	r3, [r7, #64]	@ 0x40
 800f844:	e01e      	b.n	800f884 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f848:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f84c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f84e:	011b      	lsls	r3, r3, #4
 800f850:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f854:	4413      	add	r3, r2
 800f856:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f85a:	3304      	adds	r3, #4
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d006      	beq.n	800f870 <find_volume+0x114>
 800f862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f864:	3308      	adds	r3, #8
 800f866:	4618      	mov	r0, r3
 800f868:	f7fe f998 	bl	800db9c <ld_dword>
 800f86c:	4602      	mov	r2, r0
 800f86e:	e000      	b.n	800f872 <find_volume+0x116>
 800f870:	2200      	movs	r2, #0
 800f872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f874:	009b      	lsls	r3, r3, #2
 800f876:	3358      	adds	r3, #88	@ 0x58
 800f878:	443b      	add	r3, r7
 800f87a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f87e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f880:	3301      	adds	r3, #1
 800f882:	643b      	str	r3, [r7, #64]	@ 0x40
 800f884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f886:	2b03      	cmp	r3, #3
 800f888:	d9dd      	bls.n	800f846 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f88a:	2300      	movs	r3, #0
 800f88c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f88e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f890:	2b00      	cmp	r3, #0
 800f892:	d002      	beq.n	800f89a <find_volume+0x13e>
 800f894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f896:	3b01      	subs	r3, #1
 800f898:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f89a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f89c:	009b      	lsls	r3, r3, #2
 800f89e:	3358      	adds	r3, #88	@ 0x58
 800f8a0:	443b      	add	r3, r7
 800f8a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f8a6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f8a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d005      	beq.n	800f8ba <find_volume+0x15e>
 800f8ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f8b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f8b2:	f7ff fefd 	bl	800f6b0 <check_fs>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	e000      	b.n	800f8bc <find_volume+0x160>
 800f8ba:	2303      	movs	r3, #3
 800f8bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f8c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d905      	bls.n	800f8d4 <find_volume+0x178>
 800f8c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800f8ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f8d0:	2b03      	cmp	r3, #3
 800f8d2:	d9e2      	bls.n	800f89a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f8d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f8d8:	2b04      	cmp	r3, #4
 800f8da:	d101      	bne.n	800f8e0 <find_volume+0x184>
 800f8dc:	2301      	movs	r3, #1
 800f8de:	e17e      	b.n	800fbde <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f8e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d901      	bls.n	800f8ec <find_volume+0x190>
 800f8e8:	230d      	movs	r3, #13
 800f8ea:	e178      	b.n	800fbde <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ee:	3334      	adds	r3, #52	@ 0x34
 800f8f0:	330b      	adds	r3, #11
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fe f93a 	bl	800db6c <ld_word>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8fe:	d001      	beq.n	800f904 <find_volume+0x1a8>
 800f900:	230d      	movs	r3, #13
 800f902:	e16c      	b.n	800fbde <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f906:	3334      	adds	r3, #52	@ 0x34
 800f908:	3316      	adds	r3, #22
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fe f92e 	bl	800db6c <ld_word>
 800f910:	4603      	mov	r3, r0
 800f912:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f916:	2b00      	cmp	r3, #0
 800f918:	d106      	bne.n	800f928 <find_volume+0x1cc>
 800f91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f91c:	3334      	adds	r3, #52	@ 0x34
 800f91e:	3324      	adds	r3, #36	@ 0x24
 800f920:	4618      	mov	r0, r3
 800f922:	f7fe f93b 	bl	800db9c <ld_dword>
 800f926:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f92a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f92c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f930:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f936:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f93a:	789b      	ldrb	r3, [r3, #2]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d005      	beq.n	800f94c <find_volume+0x1f0>
 800f940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f942:	789b      	ldrb	r3, [r3, #2]
 800f944:	2b02      	cmp	r3, #2
 800f946:	d001      	beq.n	800f94c <find_volume+0x1f0>
 800f948:	230d      	movs	r3, #13
 800f94a:	e148      	b.n	800fbde <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f94e:	789b      	ldrb	r3, [r3, #2]
 800f950:	461a      	mov	r2, r3
 800f952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f954:	fb02 f303 	mul.w	r3, r2, r3
 800f958:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f95c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f960:	461a      	mov	r2, r3
 800f962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f964:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f968:	895b      	ldrh	r3, [r3, #10]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d008      	beq.n	800f980 <find_volume+0x224>
 800f96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f970:	895b      	ldrh	r3, [r3, #10]
 800f972:	461a      	mov	r2, r3
 800f974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f976:	895b      	ldrh	r3, [r3, #10]
 800f978:	3b01      	subs	r3, #1
 800f97a:	4013      	ands	r3, r2
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d001      	beq.n	800f984 <find_volume+0x228>
 800f980:	230d      	movs	r3, #13
 800f982:	e12c      	b.n	800fbde <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f986:	3334      	adds	r3, #52	@ 0x34
 800f988:	3311      	adds	r3, #17
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7fe f8ee 	bl	800db6c <ld_word>
 800f990:	4603      	mov	r3, r0
 800f992:	461a      	mov	r2, r3
 800f994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f996:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f99a:	891b      	ldrh	r3, [r3, #8]
 800f99c:	f003 030f 	and.w	r3, r3, #15
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d001      	beq.n	800f9aa <find_volume+0x24e>
 800f9a6:	230d      	movs	r3, #13
 800f9a8:	e119      	b.n	800fbde <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9ac:	3334      	adds	r3, #52	@ 0x34
 800f9ae:	3313      	adds	r3, #19
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7fe f8db 	bl	800db6c <ld_word>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f9ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d106      	bne.n	800f9ce <find_volume+0x272>
 800f9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9c2:	3334      	adds	r3, #52	@ 0x34
 800f9c4:	3320      	adds	r3, #32
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f7fe f8e8 	bl	800db9c <ld_dword>
 800f9cc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9d0:	3334      	adds	r3, #52	@ 0x34
 800f9d2:	330e      	adds	r3, #14
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f7fe f8c9 	bl	800db6c <ld_word>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f9de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d101      	bne.n	800f9e8 <find_volume+0x28c>
 800f9e4:	230d      	movs	r3, #13
 800f9e6:	e0fa      	b.n	800fbde <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f9e8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f9ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9ec:	4413      	add	r3, r2
 800f9ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9f0:	8912      	ldrh	r2, [r2, #8]
 800f9f2:	0912      	lsrs	r2, r2, #4
 800f9f4:	b292      	uxth	r2, r2
 800f9f6:	4413      	add	r3, r2
 800f9f8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f9fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d204      	bcs.n	800fa0c <find_volume+0x2b0>
 800fa02:	230d      	movs	r3, #13
 800fa04:	e0eb      	b.n	800fbde <find_volume+0x482>
 800fa06:	bf00      	nop
 800fa08:	200189a8 	.word	0x200189a8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fa0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fa0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa10:	1ad3      	subs	r3, r2, r3
 800fa12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fa14:	8952      	ldrh	r2, [r2, #10]
 800fa16:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa1a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d101      	bne.n	800fa26 <find_volume+0x2ca>
 800fa22:	230d      	movs	r3, #13
 800fa24:	e0db      	b.n	800fbde <find_volume+0x482>
		fmt = FS_FAT32;
 800fa26:	2303      	movs	r3, #3
 800fa28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fa2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa2e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d802      	bhi.n	800fa3c <find_volume+0x2e0>
 800fa36:	2302      	movs	r3, #2
 800fa38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fa3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa3e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d802      	bhi.n	800fa4c <find_volume+0x2f0>
 800fa46:	2301      	movs	r3, #1
 800fa48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fa4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa4e:	1c9a      	adds	r2, r3, #2
 800fa50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa52:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800fa54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fa58:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fa5a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fa5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa5e:	441a      	add	r2, r3
 800fa60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa62:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800fa64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fa66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa68:	441a      	add	r2, r3
 800fa6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa6c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800fa6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fa72:	2b03      	cmp	r3, #3
 800fa74:	d11e      	bne.n	800fab4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fa76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa78:	3334      	adds	r3, #52	@ 0x34
 800fa7a:	332a      	adds	r3, #42	@ 0x2a
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f7fe f875 	bl	800db6c <ld_word>
 800fa82:	4603      	mov	r3, r0
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d001      	beq.n	800fa8c <find_volume+0x330>
 800fa88:	230d      	movs	r3, #13
 800fa8a:	e0a8      	b.n	800fbde <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fa8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa8e:	891b      	ldrh	r3, [r3, #8]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d001      	beq.n	800fa98 <find_volume+0x33c>
 800fa94:	230d      	movs	r3, #13
 800fa96:	e0a2      	b.n	800fbde <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fa98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa9a:	3334      	adds	r3, #52	@ 0x34
 800fa9c:	332c      	adds	r3, #44	@ 0x2c
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fe f87c 	bl	800db9c <ld_dword>
 800faa4:	4602      	mov	r2, r0
 800faa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800faaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faac:	699b      	ldr	r3, [r3, #24]
 800faae:	009b      	lsls	r3, r3, #2
 800fab0:	647b      	str	r3, [r7, #68]	@ 0x44
 800fab2:	e01f      	b.n	800faf4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fab6:	891b      	ldrh	r3, [r3, #8]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d101      	bne.n	800fac0 <find_volume+0x364>
 800fabc:	230d      	movs	r3, #13
 800fabe:	e08e      	b.n	800fbde <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fac2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fac4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fac6:	441a      	add	r2, r3
 800fac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faca:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800facc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fad0:	2b02      	cmp	r3, #2
 800fad2:	d103      	bne.n	800fadc <find_volume+0x380>
 800fad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fad6:	699b      	ldr	r3, [r3, #24]
 800fad8:	005b      	lsls	r3, r3, #1
 800fada:	e00a      	b.n	800faf2 <find_volume+0x396>
 800fadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fade:	699a      	ldr	r2, [r3, #24]
 800fae0:	4613      	mov	r3, r2
 800fae2:	005b      	lsls	r3, r3, #1
 800fae4:	4413      	add	r3, r2
 800fae6:	085a      	lsrs	r2, r3, #1
 800fae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faea:	699b      	ldr	r3, [r3, #24]
 800faec:	f003 0301 	and.w	r3, r3, #1
 800faf0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800faf2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800faf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faf6:	69da      	ldr	r2, [r3, #28]
 800faf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fafa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800fafe:	0a5b      	lsrs	r3, r3, #9
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d201      	bcs.n	800fb08 <find_volume+0x3ac>
 800fb04:	230d      	movs	r3, #13
 800fb06:	e06a      	b.n	800fbde <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fb08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb0a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb0e:	615a      	str	r2, [r3, #20]
 800fb10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb12:	695a      	ldr	r2, [r3, #20]
 800fb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb16:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800fb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb1a:	2280      	movs	r2, #128	@ 0x80
 800fb1c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fb1e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fb22:	2b03      	cmp	r3, #3
 800fb24:	d149      	bne.n	800fbba <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb28:	3334      	adds	r3, #52	@ 0x34
 800fb2a:	3330      	adds	r3, #48	@ 0x30
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f7fe f81d 	bl	800db6c <ld_word>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	d140      	bne.n	800fbba <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fb38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fb40:	f7fe fac4 	bl	800e0cc <move_window>
 800fb44:	4603      	mov	r3, r0
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d137      	bne.n	800fbba <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fb4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb52:	3334      	adds	r3, #52	@ 0x34
 800fb54:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7fe f807 	bl	800db6c <ld_word>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	461a      	mov	r2, r3
 800fb62:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d127      	bne.n	800fbba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb6c:	3334      	adds	r3, #52	@ 0x34
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7fe f814 	bl	800db9c <ld_dword>
 800fb74:	4603      	mov	r3, r0
 800fb76:	4a1c      	ldr	r2, [pc, #112]	@ (800fbe8 <find_volume+0x48c>)
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d11e      	bne.n	800fbba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb7e:	3334      	adds	r3, #52	@ 0x34
 800fb80:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7fe f809 	bl	800db9c <ld_dword>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	4a17      	ldr	r2, [pc, #92]	@ (800fbec <find_volume+0x490>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d113      	bne.n	800fbba <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb94:	3334      	adds	r3, #52	@ 0x34
 800fb96:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7fd fffe 	bl	800db9c <ld_dword>
 800fba0:	4602      	mov	r2, r0
 800fba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fba4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fba8:	3334      	adds	r3, #52	@ 0x34
 800fbaa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f7fd fff4 	bl	800db9c <ld_dword>
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbb8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fbba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbbc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800fbc0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fbc2:	4b0b      	ldr	r3, [pc, #44]	@ (800fbf0 <find_volume+0x494>)
 800fbc4:	881b      	ldrh	r3, [r3, #0]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	b29a      	uxth	r2, r3
 800fbca:	4b09      	ldr	r3, [pc, #36]	@ (800fbf0 <find_volume+0x494>)
 800fbcc:	801a      	strh	r2, [r3, #0]
 800fbce:	4b08      	ldr	r3, [pc, #32]	@ (800fbf0 <find_volume+0x494>)
 800fbd0:	881a      	ldrh	r2, [r3, #0]
 800fbd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbd4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fbd6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fbd8:	f7fe fa10 	bl	800dffc <clear_lock>
#endif
	return FR_OK;
 800fbdc:	2300      	movs	r3, #0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3758      	adds	r7, #88	@ 0x58
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	41615252 	.word	0x41615252
 800fbec:	61417272 	.word	0x61417272
 800fbf0:	200189ac 	.word	0x200189ac

0800fbf4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b084      	sub	sp, #16
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fbfe:	2309      	movs	r3, #9
 800fc00:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d01c      	beq.n	800fc42 <validate+0x4e>
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d018      	beq.n	800fc42 <validate+0x4e>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d013      	beq.n	800fc42 <validate+0x4e>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	889a      	ldrh	r2, [r3, #4]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	88db      	ldrh	r3, [r3, #6]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d10c      	bne.n	800fc42 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	785b      	ldrb	r3, [r3, #1]
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7fd fef4 	bl	800da1c <disk_status>
 800fc34:	4603      	mov	r3, r0
 800fc36:	f003 0301 	and.w	r3, r3, #1
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d101      	bne.n	800fc42 <validate+0x4e>
			res = FR_OK;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fc42:	7bfb      	ldrb	r3, [r7, #15]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d102      	bne.n	800fc4e <validate+0x5a>
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	e000      	b.n	800fc50 <validate+0x5c>
 800fc4e:	2300      	movs	r3, #0
 800fc50:	683a      	ldr	r2, [r7, #0]
 800fc52:	6013      	str	r3, [r2, #0]
	return res;
 800fc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	3710      	adds	r7, #16
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
	...

0800fc60 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b088      	sub	sp, #32
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fc72:	f107 0310 	add.w	r3, r7, #16
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7ff fcd5 	bl	800f626 <get_ldnumber>
 800fc7c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fc7e:	69fb      	ldr	r3, [r7, #28]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	da01      	bge.n	800fc88 <f_mount+0x28>
 800fc84:	230b      	movs	r3, #11
 800fc86:	e02b      	b.n	800fce0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fc88:	4a17      	ldr	r2, [pc, #92]	@ (800fce8 <f_mount+0x88>)
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc90:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fc92:	69bb      	ldr	r3, [r7, #24]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d005      	beq.n	800fca4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fc98:	69b8      	ldr	r0, [r7, #24]
 800fc9a:	f7fe f9af 	bl	800dffc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	2200      	movs	r2, #0
 800fca2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d002      	beq.n	800fcb0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	2200      	movs	r2, #0
 800fcae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fcb0:	68fa      	ldr	r2, [r7, #12]
 800fcb2:	490d      	ldr	r1, [pc, #52]	@ (800fce8 <f_mount+0x88>)
 800fcb4:	69fb      	ldr	r3, [r7, #28]
 800fcb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d002      	beq.n	800fcc6 <f_mount+0x66>
 800fcc0:	79fb      	ldrb	r3, [r7, #7]
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	d001      	beq.n	800fcca <f_mount+0x6a>
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	e00a      	b.n	800fce0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fcca:	f107 010c 	add.w	r1, r7, #12
 800fcce:	f107 0308 	add.w	r3, r7, #8
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7ff fd41 	bl	800f75c <find_volume>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fcde:	7dfb      	ldrb	r3, [r7, #23]
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3720      	adds	r7, #32
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	200189a8 	.word	0x200189a8

0800fcec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b09a      	sub	sp, #104	@ 0x68
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	60f8      	str	r0, [r7, #12]
 800fcf4:	60b9      	str	r1, [r7, #8]
 800fcf6:	4613      	mov	r3, r2
 800fcf8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d101      	bne.n	800fd04 <f_open+0x18>
 800fd00:	2309      	movs	r3, #9
 800fd02:	e1b9      	b.n	8010078 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fd04:	79fb      	ldrb	r3, [r7, #7]
 800fd06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fd0a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fd0c:	79fa      	ldrb	r2, [r7, #7]
 800fd0e:	f107 0110 	add.w	r1, r7, #16
 800fd12:	f107 0308 	add.w	r3, r7, #8
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7ff fd20 	bl	800f75c <find_volume>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800fd22:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	f040 819d 	bne.w	8010066 <f_open+0x37a>
		dj.obj.fs = fs;
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800fd30:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800fd34:	f000 fdef 	bl	8010916 <ff_memalloc>
 800fd38:	65b8      	str	r0, [r7, #88]	@ 0x58
 800fd3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d101      	bne.n	800fd44 <f_open+0x58>
 800fd40:	2311      	movs	r3, #17
 800fd42:	e199      	b.n	8010078 <f_open+0x38c>
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fd48:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800fd4a:	68ba      	ldr	r2, [r7, #8]
 800fd4c:	f107 0314 	add.w	r3, r7, #20
 800fd50:	4611      	mov	r1, r2
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7ff fbf6 	bl	800f544 <follow_path>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fd5e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d118      	bne.n	800fd98 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fd66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fd6a:	b25b      	sxtb	r3, r3
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	da03      	bge.n	800fd78 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800fd70:	2306      	movs	r3, #6
 800fd72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fd76:	e00f      	b.n	800fd98 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fd78:	79fb      	ldrb	r3, [r7, #7]
 800fd7a:	2b01      	cmp	r3, #1
 800fd7c:	bf8c      	ite	hi
 800fd7e:	2301      	movhi	r3, #1
 800fd80:	2300      	movls	r3, #0
 800fd82:	b2db      	uxtb	r3, r3
 800fd84:	461a      	mov	r2, r3
 800fd86:	f107 0314 	add.w	r3, r7, #20
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7fd ffed 	bl	800dd6c <chk_lock>
 800fd92:	4603      	mov	r3, r0
 800fd94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fd98:	79fb      	ldrb	r3, [r7, #7]
 800fd9a:	f003 031c 	and.w	r3, r3, #28
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d07f      	beq.n	800fea2 <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 800fda2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d017      	beq.n	800fdda <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fdaa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fdae:	2b04      	cmp	r3, #4
 800fdb0:	d10e      	bne.n	800fdd0 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fdb2:	f7fe f837 	bl	800de24 <enq_lock>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d006      	beq.n	800fdca <f_open+0xde>
 800fdbc:	f107 0314 	add.w	r3, r7, #20
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7ff f90f 	bl	800efe4 <dir_register>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	e000      	b.n	800fdcc <f_open+0xe0>
 800fdca:	2312      	movs	r3, #18
 800fdcc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fdd0:	79fb      	ldrb	r3, [r7, #7]
 800fdd2:	f043 0308 	orr.w	r3, r3, #8
 800fdd6:	71fb      	strb	r3, [r7, #7]
 800fdd8:	e010      	b.n	800fdfc <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fdda:	7ebb      	ldrb	r3, [r7, #26]
 800fddc:	f003 0311 	and.w	r3, r3, #17
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d003      	beq.n	800fdec <f_open+0x100>
					res = FR_DENIED;
 800fde4:	2307      	movs	r3, #7
 800fde6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fdea:	e007      	b.n	800fdfc <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fdec:	79fb      	ldrb	r3, [r7, #7]
 800fdee:	f003 0304 	and.w	r3, r3, #4
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d002      	beq.n	800fdfc <f_open+0x110>
 800fdf6:	2308      	movs	r3, #8
 800fdf8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fdfc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d168      	bne.n	800fed6 <f_open+0x1ea>
 800fe04:	79fb      	ldrb	r3, [r7, #7]
 800fe06:	f003 0308 	and.w	r3, r3, #8
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d063      	beq.n	800fed6 <f_open+0x1ea>
				dw = GET_FATTIME();
 800fe0e:	f7fd fea5 	bl	800db5c <get_fattime>
 800fe12:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fe14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe16:	330e      	adds	r3, #14
 800fe18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7fd fefc 	bl	800dc18 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fe20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe22:	3316      	adds	r3, #22
 800fe24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7fd fef6 	bl	800dc18 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fe2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe2e:	330b      	adds	r3, #11
 800fe30:	2220      	movs	r2, #32
 800fe32:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fe38:	4611      	mov	r1, r2
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7fe fe4a 	bl	800ead4 <ld_clust>
 800fe40:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fe46:	2200      	movs	r2, #0
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7fe fe62 	bl	800eb12 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fe4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe50:	331c      	adds	r3, #28
 800fe52:	2100      	movs	r1, #0
 800fe54:	4618      	mov	r0, r3
 800fe56:	f7fd fedf 	bl	800dc18 <st_dword>
					fs->wflag = 1;
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fe60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d037      	beq.n	800fed6 <f_open+0x1ea>
						dw = fs->winsect;
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe6a:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800fe6c:	f107 0314 	add.w	r3, r7, #20
 800fe70:	2200      	movs	r2, #0
 800fe72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7fe fb75 	bl	800e564 <remove_chain>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800fe80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d126      	bne.n	800fed6 <f_open+0x1ea>
							res = move_window(fs, dw);
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7fe f91d 	bl	800e0cc <move_window>
 800fe92:	4603      	mov	r3, r0
 800fe94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fe9c:	3a01      	subs	r2, #1
 800fe9e:	611a      	str	r2, [r3, #16]
 800fea0:	e019      	b.n	800fed6 <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fea2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d115      	bne.n	800fed6 <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800feaa:	7ebb      	ldrb	r3, [r7, #26]
 800feac:	f003 0310 	and.w	r3, r3, #16
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d003      	beq.n	800febc <f_open+0x1d0>
					res = FR_NO_FILE;
 800feb4:	2304      	movs	r3, #4
 800feb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800feba:	e00c      	b.n	800fed6 <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800febc:	79fb      	ldrb	r3, [r7, #7]
 800febe:	f003 0302 	and.w	r3, r3, #2
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d007      	beq.n	800fed6 <f_open+0x1ea>
 800fec6:	7ebb      	ldrb	r3, [r7, #26]
 800fec8:	f003 0301 	and.w	r3, r3, #1
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d002      	beq.n	800fed6 <f_open+0x1ea>
						res = FR_DENIED;
 800fed0:	2307      	movs	r3, #7
 800fed2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fed6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d126      	bne.n	800ff2c <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fede:	79fb      	ldrb	r3, [r7, #7]
 800fee0:	f003 0308 	and.w	r3, r3, #8
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d003      	beq.n	800fef0 <f_open+0x204>
				mode |= FA_MODIFIED;
 800fee8:	79fb      	ldrb	r3, [r7, #7]
 800feea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800feee:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800fef8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fefe:	79fb      	ldrb	r3, [r7, #7]
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	bf8c      	ite	hi
 800ff04:	2301      	movhi	r3, #1
 800ff06:	2300      	movls	r3, #0
 800ff08:	b2db      	uxtb	r3, r3
 800ff0a:	461a      	mov	r2, r3
 800ff0c:	f107 0314 	add.w	r3, r7, #20
 800ff10:	4611      	mov	r1, r2
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7fd ffa8 	bl	800de68 <inc_lock>
 800ff18:	4602      	mov	r2, r0
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	691b      	ldr	r3, [r3, #16]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d102      	bne.n	800ff2c <f_open+0x240>
 800ff26:	2302      	movs	r3, #2
 800ff28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ff2c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	f040 8095 	bne.w	8010060 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ff3a:	4611      	mov	r1, r2
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7fe fdc9 	bl	800ead4 <ld_clust>
 800ff42:	4602      	mov	r2, r0
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ff48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff4a:	331c      	adds	r3, #28
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7fd fe25 	bl	800db9c <ld_dword>
 800ff52:	4602      	mov	r2, r0
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ff5e:	693a      	ldr	r2, [r7, #16]
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	88da      	ldrh	r2, [r3, #6]
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	79fa      	ldrb	r2, [r7, #7]
 800ff70:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	2200      	movs	r2, #0
 800ff76:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2200      	movs	r2, #0
 800ff82:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	3330      	adds	r3, #48	@ 0x30
 800ff88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7fd fe8f 	bl	800dcb2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ff94:	79fb      	ldrb	r3, [r7, #7]
 800ff96:	f003 0320 	and.w	r3, r3, #32
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d060      	beq.n	8010060 <f_open+0x374>
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	68db      	ldr	r3, [r3, #12]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d05c      	beq.n	8010060 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	68da      	ldr	r2, [r3, #12]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	895b      	ldrh	r3, [r3, #10]
 800ffb2:	025b      	lsls	r3, r3, #9
 800ffb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	689b      	ldr	r3, [r3, #8]
 800ffba:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ffc2:	e016      	b.n	800fff2 <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fe f93a 	bl	800e242 <get_fat>
 800ffce:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ffd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d802      	bhi.n	800ffdc <f_open+0x2f0>
 800ffd6:	2302      	movs	r3, #2
 800ffd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ffdc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ffde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffe2:	d102      	bne.n	800ffea <f_open+0x2fe>
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ffea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ffec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ffee:	1ad3      	subs	r3, r2, r3
 800fff0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fff2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d103      	bne.n	8010002 <f_open+0x316>
 800fffa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fffe:	429a      	cmp	r2, r3
 8010000:	d8e0      	bhi.n	800ffc4 <f_open+0x2d8>
				}
				fp->clust = clst;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010006:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010008:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801000c:	2b00      	cmp	r3, #0
 801000e:	d127      	bne.n	8010060 <f_open+0x374>
 8010010:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010016:	2b00      	cmp	r3, #0
 8010018:	d022      	beq.n	8010060 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801001e:	4618      	mov	r0, r3
 8010020:	f7fe f8f0 	bl	800e204 <clust2sect>
 8010024:	64b8      	str	r0, [r7, #72]	@ 0x48
 8010026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010028:	2b00      	cmp	r3, #0
 801002a:	d103      	bne.n	8010034 <f_open+0x348>
						res = FR_INT_ERR;
 801002c:	2302      	movs	r3, #2
 801002e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010032:	e015      	b.n	8010060 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010034:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010036:	0a5a      	lsrs	r2, r3, #9
 8010038:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801003a:	441a      	add	r2, r3
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010040:	693b      	ldr	r3, [r7, #16]
 8010042:	7858      	ldrb	r0, [r3, #1]
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	6a1a      	ldr	r2, [r3, #32]
 801004e:	2301      	movs	r3, #1
 8010050:	f7fd fd26 	bl	800daa0 <disk_read>
 8010054:	4603      	mov	r3, r0
 8010056:	2b00      	cmp	r3, #0
 8010058:	d002      	beq.n	8010060 <f_open+0x374>
 801005a:	2301      	movs	r3, #1
 801005c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8010060:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010062:	f000 fc64 	bl	801092e <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010066:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801006a:	2b00      	cmp	r3, #0
 801006c:	d002      	beq.n	8010074 <f_open+0x388>
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2200      	movs	r2, #0
 8010072:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010074:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8010078:	4618      	mov	r0, r3
 801007a:	3768      	adds	r7, #104	@ 0x68
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b08e      	sub	sp, #56	@ 0x38
 8010084:	af00      	add	r7, sp, #0
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	607a      	str	r2, [r7, #4]
 801008c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	2200      	movs	r2, #0
 8010096:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f107 0214 	add.w	r2, r7, #20
 801009e:	4611      	mov	r1, r2
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7ff fda7 	bl	800fbf4 <validate>
 80100a6:	4603      	mov	r3, r0
 80100a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80100ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d107      	bne.n	80100c4 <f_read+0x44>
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	7d5b      	ldrb	r3, [r3, #21]
 80100b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80100bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d002      	beq.n	80100ca <f_read+0x4a>
 80100c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80100c8:	e115      	b.n	80102f6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	7d1b      	ldrb	r3, [r3, #20]
 80100ce:	f003 0301 	and.w	r3, r3, #1
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d101      	bne.n	80100da <f_read+0x5a>
 80100d6:	2307      	movs	r3, #7
 80100d8:	e10d      	b.n	80102f6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	68da      	ldr	r2, [r3, #12]
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	699b      	ldr	r3, [r3, #24]
 80100e2:	1ad3      	subs	r3, r2, r3
 80100e4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	6a3b      	ldr	r3, [r7, #32]
 80100ea:	429a      	cmp	r2, r3
 80100ec:	f240 80fe 	bls.w	80102ec <f_read+0x26c>
 80100f0:	6a3b      	ldr	r3, [r7, #32]
 80100f2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80100f4:	e0fa      	b.n	80102ec <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	699b      	ldr	r3, [r3, #24]
 80100fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100fe:	2b00      	cmp	r3, #0
 8010100:	f040 80c6 	bne.w	8010290 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	699b      	ldr	r3, [r3, #24]
 8010108:	0a5b      	lsrs	r3, r3, #9
 801010a:	697a      	ldr	r2, [r7, #20]
 801010c:	8952      	ldrh	r2, [r2, #10]
 801010e:	3a01      	subs	r2, #1
 8010110:	4013      	ands	r3, r2
 8010112:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d12f      	bne.n	801017a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	699b      	ldr	r3, [r3, #24]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d103      	bne.n	801012a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	689b      	ldr	r3, [r3, #8]
 8010126:	633b      	str	r3, [r7, #48]	@ 0x30
 8010128:	e013      	b.n	8010152 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801012e:	2b00      	cmp	r3, #0
 8010130:	d007      	beq.n	8010142 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	699b      	ldr	r3, [r3, #24]
 8010136:	4619      	mov	r1, r3
 8010138:	68f8      	ldr	r0, [r7, #12]
 801013a:	f7fe fb10 	bl	800e75e <clmt_clust>
 801013e:	6338      	str	r0, [r7, #48]	@ 0x30
 8010140:	e007      	b.n	8010152 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010142:	68fa      	ldr	r2, [r7, #12]
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	69db      	ldr	r3, [r3, #28]
 8010148:	4619      	mov	r1, r3
 801014a:	4610      	mov	r0, r2
 801014c:	f7fe f879 	bl	800e242 <get_fat>
 8010150:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010154:	2b01      	cmp	r3, #1
 8010156:	d804      	bhi.n	8010162 <f_read+0xe2>
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	2202      	movs	r2, #2
 801015c:	755a      	strb	r2, [r3, #21]
 801015e:	2302      	movs	r3, #2
 8010160:	e0c9      	b.n	80102f6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010168:	d104      	bne.n	8010174 <f_read+0xf4>
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2201      	movs	r2, #1
 801016e:	755a      	strb	r2, [r3, #21]
 8010170:	2301      	movs	r3, #1
 8010172:	e0c0      	b.n	80102f6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010178:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801017a:	697a      	ldr	r2, [r7, #20]
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	69db      	ldr	r3, [r3, #28]
 8010180:	4619      	mov	r1, r3
 8010182:	4610      	mov	r0, r2
 8010184:	f7fe f83e 	bl	800e204 <clust2sect>
 8010188:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801018a:	69bb      	ldr	r3, [r7, #24]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d104      	bne.n	801019a <f_read+0x11a>
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2202      	movs	r2, #2
 8010194:	755a      	strb	r2, [r3, #21]
 8010196:	2302      	movs	r3, #2
 8010198:	e0ad      	b.n	80102f6 <f_read+0x276>
			sect += csect;
 801019a:	69ba      	ldr	r2, [r7, #24]
 801019c:	69fb      	ldr	r3, [r7, #28]
 801019e:	4413      	add	r3, r2
 80101a0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	0a5b      	lsrs	r3, r3, #9
 80101a6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80101a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d039      	beq.n	8010222 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80101ae:	69fa      	ldr	r2, [r7, #28]
 80101b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101b2:	4413      	add	r3, r2
 80101b4:	697a      	ldr	r2, [r7, #20]
 80101b6:	8952      	ldrh	r2, [r2, #10]
 80101b8:	4293      	cmp	r3, r2
 80101ba:	d905      	bls.n	80101c8 <f_read+0x148>
					cc = fs->csize - csect;
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	895b      	ldrh	r3, [r3, #10]
 80101c0:	461a      	mov	r2, r3
 80101c2:	69fb      	ldr	r3, [r7, #28]
 80101c4:	1ad3      	subs	r3, r2, r3
 80101c6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	7858      	ldrb	r0, [r3, #1]
 80101cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ce:	69ba      	ldr	r2, [r7, #24]
 80101d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80101d2:	f7fd fc65 	bl	800daa0 <disk_read>
 80101d6:	4603      	mov	r3, r0
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d004      	beq.n	80101e6 <f_read+0x166>
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	2201      	movs	r2, #1
 80101e0:	755a      	strb	r2, [r3, #21]
 80101e2:	2301      	movs	r3, #1
 80101e4:	e087      	b.n	80102f6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	7d1b      	ldrb	r3, [r3, #20]
 80101ea:	b25b      	sxtb	r3, r3
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	da14      	bge.n	801021a <f_read+0x19a>
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	6a1a      	ldr	r2, [r3, #32]
 80101f4:	69bb      	ldr	r3, [r7, #24]
 80101f6:	1ad3      	subs	r3, r2, r3
 80101f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d90d      	bls.n	801021a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	6a1a      	ldr	r2, [r3, #32]
 8010202:	69bb      	ldr	r3, [r7, #24]
 8010204:	1ad3      	subs	r3, r2, r3
 8010206:	025b      	lsls	r3, r3, #9
 8010208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801020a:	18d0      	adds	r0, r2, r3
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	3330      	adds	r3, #48	@ 0x30
 8010210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010214:	4619      	mov	r1, r3
 8010216:	f7fd fd2b 	bl	800dc70 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801021a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801021c:	025b      	lsls	r3, r3, #9
 801021e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8010220:	e050      	b.n	80102c4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	6a1b      	ldr	r3, [r3, #32]
 8010226:	69ba      	ldr	r2, [r7, #24]
 8010228:	429a      	cmp	r2, r3
 801022a:	d02e      	beq.n	801028a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	7d1b      	ldrb	r3, [r3, #20]
 8010230:	b25b      	sxtb	r3, r3
 8010232:	2b00      	cmp	r3, #0
 8010234:	da18      	bge.n	8010268 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	7858      	ldrb	r0, [r3, #1]
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	6a1a      	ldr	r2, [r3, #32]
 8010244:	2301      	movs	r3, #1
 8010246:	f7fd fc4b 	bl	800dae0 <disk_write>
 801024a:	4603      	mov	r3, r0
 801024c:	2b00      	cmp	r3, #0
 801024e:	d004      	beq.n	801025a <f_read+0x1da>
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	2201      	movs	r2, #1
 8010254:	755a      	strb	r2, [r3, #21]
 8010256:	2301      	movs	r3, #1
 8010258:	e04d      	b.n	80102f6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	7d1b      	ldrb	r3, [r3, #20]
 801025e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010262:	b2da      	uxtb	r2, r3
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	7858      	ldrb	r0, [r3, #1]
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010272:	2301      	movs	r3, #1
 8010274:	69ba      	ldr	r2, [r7, #24]
 8010276:	f7fd fc13 	bl	800daa0 <disk_read>
 801027a:	4603      	mov	r3, r0
 801027c:	2b00      	cmp	r3, #0
 801027e:	d004      	beq.n	801028a <f_read+0x20a>
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2201      	movs	r2, #1
 8010284:	755a      	strb	r2, [r3, #21]
 8010286:	2301      	movs	r3, #1
 8010288:	e035      	b.n	80102f6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	69ba      	ldr	r2, [r7, #24]
 801028e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	699b      	ldr	r3, [r3, #24]
 8010294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010298:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801029c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801029e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d901      	bls.n	80102aa <f_read+0x22a>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	699b      	ldr	r3, [r3, #24]
 80102b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102b8:	4413      	add	r3, r2
 80102ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102bc:	4619      	mov	r1, r3
 80102be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80102c0:	f7fd fcd6 	bl	800dc70 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80102c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80102c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102c8:	4413      	add	r3, r2
 80102ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	699a      	ldr	r2, [r3, #24]
 80102d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102d2:	441a      	add	r2, r3
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	619a      	str	r2, [r3, #24]
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	681a      	ldr	r2, [r3, #0]
 80102dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102de:	441a      	add	r2, r3
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	601a      	str	r2, [r3, #0]
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e8:	1ad3      	subs	r3, r2, r3
 80102ea:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	f47f af01 	bne.w	80100f6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3738      	adds	r7, #56	@ 0x38
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}

080102fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80102fe:	b580      	push	{r7, lr}
 8010300:	b086      	sub	sp, #24
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f107 0208 	add.w	r2, r7, #8
 801030c:	4611      	mov	r1, r2
 801030e:	4618      	mov	r0, r3
 8010310:	f7ff fc70 	bl	800fbf4 <validate>
 8010314:	4603      	mov	r3, r0
 8010316:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010318:	7dfb      	ldrb	r3, [r7, #23]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d168      	bne.n	80103f0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	7d1b      	ldrb	r3, [r3, #20]
 8010322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010326:	2b00      	cmp	r3, #0
 8010328:	d062      	beq.n	80103f0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	7d1b      	ldrb	r3, [r3, #20]
 801032e:	b25b      	sxtb	r3, r3
 8010330:	2b00      	cmp	r3, #0
 8010332:	da15      	bge.n	8010360 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	7858      	ldrb	r0, [r3, #1]
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	6a1a      	ldr	r2, [r3, #32]
 8010342:	2301      	movs	r3, #1
 8010344:	f7fd fbcc 	bl	800dae0 <disk_write>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d001      	beq.n	8010352 <f_sync+0x54>
 801034e:	2301      	movs	r3, #1
 8010350:	e04f      	b.n	80103f2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	7d1b      	ldrb	r3, [r3, #20]
 8010356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801035a:	b2da      	uxtb	r2, r3
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010360:	f7fd fbfc 	bl	800db5c <get_fattime>
 8010364:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010366:	68ba      	ldr	r2, [r7, #8]
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801036c:	4619      	mov	r1, r3
 801036e:	4610      	mov	r0, r2
 8010370:	f7fd feac 	bl	800e0cc <move_window>
 8010374:	4603      	mov	r3, r0
 8010376:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010378:	7dfb      	ldrb	r3, [r7, #23]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d138      	bne.n	80103f0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010382:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	330b      	adds	r3, #11
 8010388:	781a      	ldrb	r2, [r3, #0]
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	330b      	adds	r3, #11
 801038e:	f042 0220 	orr.w	r2, r2, #32
 8010392:	b2d2      	uxtb	r2, r2
 8010394:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	6818      	ldr	r0, [r3, #0]
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	689b      	ldr	r3, [r3, #8]
 801039e:	461a      	mov	r2, r3
 80103a0:	68f9      	ldr	r1, [r7, #12]
 80103a2:	f7fe fbb6 	bl	800eb12 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	f103 021c 	add.w	r2, r3, #28
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	68db      	ldr	r3, [r3, #12]
 80103b0:	4619      	mov	r1, r3
 80103b2:	4610      	mov	r0, r2
 80103b4:	f7fd fc30 	bl	800dc18 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	3316      	adds	r3, #22
 80103bc:	6939      	ldr	r1, [r7, #16]
 80103be:	4618      	mov	r0, r3
 80103c0:	f7fd fc2a 	bl	800dc18 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	3312      	adds	r3, #18
 80103c8:	2100      	movs	r1, #0
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7fd fc09 	bl	800dbe2 <st_word>
					fs->wflag = 1;
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	2201      	movs	r2, #1
 80103d4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	4618      	mov	r0, r3
 80103da:	f7fd fea5 	bl	800e128 <sync_fs>
 80103de:	4603      	mov	r3, r0
 80103e0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	7d1b      	ldrb	r3, [r3, #20]
 80103e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80103ea:	b2da      	uxtb	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80103f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3718      	adds	r7, #24
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b084      	sub	sp, #16
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f7ff ff7b 	bl	80102fe <f_sync>
 8010408:	4603      	mov	r3, r0
 801040a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801040c:	7bfb      	ldrb	r3, [r7, #15]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d118      	bne.n	8010444 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f107 0208 	add.w	r2, r7, #8
 8010418:	4611      	mov	r1, r2
 801041a:	4618      	mov	r0, r3
 801041c:	f7ff fbea 	bl	800fbf4 <validate>
 8010420:	4603      	mov	r3, r0
 8010422:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010424:	7bfb      	ldrb	r3, [r7, #15]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d10c      	bne.n	8010444 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	691b      	ldr	r3, [r3, #16]
 801042e:	4618      	mov	r0, r3
 8010430:	f7fd fda8 	bl	800df84 <dec_lock>
 8010434:	4603      	mov	r3, r0
 8010436:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010438:	7bfb      	ldrb	r3, [r7, #15]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d102      	bne.n	8010444 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2200      	movs	r2, #0
 8010442:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010444:	7bfb      	ldrb	r3, [r7, #15]
}
 8010446:	4618      	mov	r0, r3
 8010448:	3710      	adds	r7, #16
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801044e:	b580      	push	{r7, lr}
 8010450:	b090      	sub	sp, #64	@ 0x40
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
 8010456:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f107 0208 	add.w	r2, r7, #8
 801045e:	4611      	mov	r1, r2
 8010460:	4618      	mov	r0, r3
 8010462:	f7ff fbc7 	bl	800fbf4 <validate>
 8010466:	4603      	mov	r3, r0
 8010468:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801046c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010470:	2b00      	cmp	r3, #0
 8010472:	d103      	bne.n	801047c <f_lseek+0x2e>
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	7d5b      	ldrb	r3, [r3, #21]
 8010478:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801047c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010480:	2b00      	cmp	r3, #0
 8010482:	d002      	beq.n	801048a <f_lseek+0x3c>
 8010484:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010488:	e1e6      	b.n	8010858 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801048e:	2b00      	cmp	r3, #0
 8010490:	f000 80d1 	beq.w	8010636 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	f1b3 3fff 	cmp.w	r3, #4294967295
 801049a:	d15a      	bne.n	8010552 <f_lseek+0x104>
			tbl = fp->cltbl;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104a0:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80104a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104a4:	1d1a      	adds	r2, r3, #4
 80104a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	617b      	str	r3, [r7, #20]
 80104ac:	2302      	movs	r3, #2
 80104ae:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	689b      	ldr	r3, [r3, #8]
 80104b4:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80104b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d03a      	beq.n	8010532 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80104bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104be:	613b      	str	r3, [r7, #16]
 80104c0:	2300      	movs	r3, #0
 80104c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80104c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104c6:	3302      	adds	r3, #2
 80104c8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80104ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104cc:	60fb      	str	r3, [r7, #12]
 80104ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104d0:	3301      	adds	r3, #1
 80104d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80104d8:	4618      	mov	r0, r3
 80104da:	f7fd feb2 	bl	800e242 <get_fat>
 80104de:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80104e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d804      	bhi.n	80104f0 <f_lseek+0xa2>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2202      	movs	r2, #2
 80104ea:	755a      	strb	r2, [r3, #21]
 80104ec:	2302      	movs	r3, #2
 80104ee:	e1b3      	b.n	8010858 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80104f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104f6:	d104      	bne.n	8010502 <f_lseek+0xb4>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2201      	movs	r2, #1
 80104fc:	755a      	strb	r2, [r3, #21]
 80104fe:	2301      	movs	r3, #1
 8010500:	e1aa      	b.n	8010858 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	3301      	adds	r3, #1
 8010506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010508:	429a      	cmp	r2, r3
 801050a:	d0de      	beq.n	80104ca <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801050c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	429a      	cmp	r2, r3
 8010512:	d809      	bhi.n	8010528 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010516:	1d1a      	adds	r2, r3, #4
 8010518:	627a      	str	r2, [r7, #36]	@ 0x24
 801051a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801051c:	601a      	str	r2, [r3, #0]
 801051e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010520:	1d1a      	adds	r2, r3, #4
 8010522:	627a      	str	r2, [r7, #36]	@ 0x24
 8010524:	693a      	ldr	r2, [r7, #16]
 8010526:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	699b      	ldr	r3, [r3, #24]
 801052c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801052e:	429a      	cmp	r2, r3
 8010530:	d3c4      	bcc.n	80104bc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010538:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801053a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	429a      	cmp	r2, r3
 8010540:	d803      	bhi.n	801054a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010544:	2200      	movs	r2, #0
 8010546:	601a      	str	r2, [r3, #0]
 8010548:	e184      	b.n	8010854 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801054a:	2311      	movs	r3, #17
 801054c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8010550:	e180      	b.n	8010854 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	68db      	ldr	r3, [r3, #12]
 8010556:	683a      	ldr	r2, [r7, #0]
 8010558:	429a      	cmp	r2, r3
 801055a:	d902      	bls.n	8010562 <f_lseek+0x114>
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	683a      	ldr	r2, [r7, #0]
 8010566:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	2b00      	cmp	r3, #0
 801056c:	f000 8172 	beq.w	8010854 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	3b01      	subs	r3, #1
 8010574:	4619      	mov	r1, r3
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f7fe f8f1 	bl	800e75e <clmt_clust>
 801057c:	4602      	mov	r2, r0
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010582:	68ba      	ldr	r2, [r7, #8]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	69db      	ldr	r3, [r3, #28]
 8010588:	4619      	mov	r1, r3
 801058a:	4610      	mov	r0, r2
 801058c:	f7fd fe3a 	bl	800e204 <clust2sect>
 8010590:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d104      	bne.n	80105a2 <f_lseek+0x154>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2202      	movs	r2, #2
 801059c:	755a      	strb	r2, [r3, #21]
 801059e:	2302      	movs	r3, #2
 80105a0:	e15a      	b.n	8010858 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	3b01      	subs	r3, #1
 80105a6:	0a5b      	lsrs	r3, r3, #9
 80105a8:	68ba      	ldr	r2, [r7, #8]
 80105aa:	8952      	ldrh	r2, [r2, #10]
 80105ac:	3a01      	subs	r2, #1
 80105ae:	4013      	ands	r3, r2
 80105b0:	69ba      	ldr	r2, [r7, #24]
 80105b2:	4413      	add	r3, r2
 80105b4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	699b      	ldr	r3, [r3, #24]
 80105ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80105be:	2b00      	cmp	r3, #0
 80105c0:	f000 8148 	beq.w	8010854 <f_lseek+0x406>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6a1b      	ldr	r3, [r3, #32]
 80105c8:	69ba      	ldr	r2, [r7, #24]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	f000 8142 	beq.w	8010854 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	7d1b      	ldrb	r3, [r3, #20]
 80105d4:	b25b      	sxtb	r3, r3
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	da18      	bge.n	801060c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	7858      	ldrb	r0, [r3, #1]
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6a1a      	ldr	r2, [r3, #32]
 80105e8:	2301      	movs	r3, #1
 80105ea:	f7fd fa79 	bl	800dae0 <disk_write>
 80105ee:	4603      	mov	r3, r0
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d004      	beq.n	80105fe <f_lseek+0x1b0>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2201      	movs	r2, #1
 80105f8:	755a      	strb	r2, [r3, #21]
 80105fa:	2301      	movs	r3, #1
 80105fc:	e12c      	b.n	8010858 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	7d1b      	ldrb	r3, [r3, #20]
 8010602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010606:	b2da      	uxtb	r2, r3
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	7858      	ldrb	r0, [r3, #1]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010616:	2301      	movs	r3, #1
 8010618:	69ba      	ldr	r2, [r7, #24]
 801061a:	f7fd fa41 	bl	800daa0 <disk_read>
 801061e:	4603      	mov	r3, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d004      	beq.n	801062e <f_lseek+0x1e0>
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2201      	movs	r2, #1
 8010628:	755a      	strb	r2, [r3, #21]
 801062a:	2301      	movs	r3, #1
 801062c:	e114      	b.n	8010858 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	69ba      	ldr	r2, [r7, #24]
 8010632:	621a      	str	r2, [r3, #32]
 8010634:	e10e      	b.n	8010854 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	68db      	ldr	r3, [r3, #12]
 801063a:	683a      	ldr	r2, [r7, #0]
 801063c:	429a      	cmp	r2, r3
 801063e:	d908      	bls.n	8010652 <f_lseek+0x204>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	7d1b      	ldrb	r3, [r3, #20]
 8010644:	f003 0302 	and.w	r3, r3, #2
 8010648:	2b00      	cmp	r3, #0
 801064a:	d102      	bne.n	8010652 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	68db      	ldr	r3, [r3, #12]
 8010650:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	699b      	ldr	r3, [r3, #24]
 8010656:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010658:	2300      	movs	r3, #0
 801065a:	637b      	str	r3, [r7, #52]	@ 0x34
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010660:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	2b00      	cmp	r3, #0
 8010666:	f000 80a7 	beq.w	80107b8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	895b      	ldrh	r3, [r3, #10]
 801066e:	025b      	lsls	r3, r3, #9
 8010670:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010672:	6a3b      	ldr	r3, [r7, #32]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d01b      	beq.n	80106b0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	1e5a      	subs	r2, r3, #1
 801067c:	69fb      	ldr	r3, [r7, #28]
 801067e:	fbb2 f2f3 	udiv	r2, r2, r3
 8010682:	6a3b      	ldr	r3, [r7, #32]
 8010684:	1e59      	subs	r1, r3, #1
 8010686:	69fb      	ldr	r3, [r7, #28]
 8010688:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801068c:	429a      	cmp	r2, r3
 801068e:	d30f      	bcc.n	80106b0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010690:	6a3b      	ldr	r3, [r7, #32]
 8010692:	1e5a      	subs	r2, r3, #1
 8010694:	69fb      	ldr	r3, [r7, #28]
 8010696:	425b      	negs	r3, r3
 8010698:	401a      	ands	r2, r3
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	699b      	ldr	r3, [r3, #24]
 80106a2:	683a      	ldr	r2, [r7, #0]
 80106a4:	1ad3      	subs	r3, r2, r3
 80106a6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	69db      	ldr	r3, [r3, #28]
 80106ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80106ae:	e022      	b.n	80106f6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	689b      	ldr	r3, [r3, #8]
 80106b4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80106b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d119      	bne.n	80106f0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2100      	movs	r1, #0
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7fd ffb4 	bl	800e62e <create_chain>
 80106c6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80106c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106ca:	2b01      	cmp	r3, #1
 80106cc:	d104      	bne.n	80106d8 <f_lseek+0x28a>
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2202      	movs	r2, #2
 80106d2:	755a      	strb	r2, [r3, #21]
 80106d4:	2302      	movs	r3, #2
 80106d6:	e0bf      	b.n	8010858 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80106d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106de:	d104      	bne.n	80106ea <f_lseek+0x29c>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2201      	movs	r2, #1
 80106e4:	755a      	strb	r2, [r3, #21]
 80106e6:	2301      	movs	r3, #1
 80106e8:	e0b6      	b.n	8010858 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80106ee:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80106f4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80106f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d05d      	beq.n	80107b8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80106fc:	e03a      	b.n	8010774 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80106fe:	683a      	ldr	r2, [r7, #0]
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	1ad3      	subs	r3, r2, r3
 8010704:	603b      	str	r3, [r7, #0]
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	699a      	ldr	r2, [r3, #24]
 801070a:	69fb      	ldr	r3, [r7, #28]
 801070c:	441a      	add	r2, r3
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	7d1b      	ldrb	r3, [r3, #20]
 8010716:	f003 0302 	and.w	r3, r3, #2
 801071a:	2b00      	cmp	r3, #0
 801071c:	d00b      	beq.n	8010736 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010722:	4618      	mov	r0, r3
 8010724:	f7fd ff83 	bl	800e62e <create_chain>
 8010728:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801072a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801072c:	2b00      	cmp	r3, #0
 801072e:	d108      	bne.n	8010742 <f_lseek+0x2f4>
							ofs = 0; break;
 8010730:	2300      	movs	r3, #0
 8010732:	603b      	str	r3, [r7, #0]
 8010734:	e022      	b.n	801077c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801073a:	4618      	mov	r0, r3
 801073c:	f7fd fd81 	bl	800e242 <get_fat>
 8010740:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010748:	d104      	bne.n	8010754 <f_lseek+0x306>
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2201      	movs	r2, #1
 801074e:	755a      	strb	r2, [r3, #21]
 8010750:	2301      	movs	r3, #1
 8010752:	e081      	b.n	8010858 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010756:	2b01      	cmp	r3, #1
 8010758:	d904      	bls.n	8010764 <f_lseek+0x316>
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	699b      	ldr	r3, [r3, #24]
 801075e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010760:	429a      	cmp	r2, r3
 8010762:	d304      	bcc.n	801076e <f_lseek+0x320>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2202      	movs	r2, #2
 8010768:	755a      	strb	r2, [r3, #21]
 801076a:	2302      	movs	r3, #2
 801076c:	e074      	b.n	8010858 <f_lseek+0x40a>
					fp->clust = clst;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010772:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010774:	683a      	ldr	r2, [r7, #0]
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	429a      	cmp	r2, r3
 801077a:	d8c0      	bhi.n	80106fe <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	699a      	ldr	r2, [r3, #24]
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	441a      	add	r2, r3
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801078e:	2b00      	cmp	r3, #0
 8010790:	d012      	beq.n	80107b8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010796:	4618      	mov	r0, r3
 8010798:	f7fd fd34 	bl	800e204 <clust2sect>
 801079c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801079e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d104      	bne.n	80107ae <f_lseek+0x360>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2202      	movs	r2, #2
 80107a8:	755a      	strb	r2, [r3, #21]
 80107aa:	2302      	movs	r3, #2
 80107ac:	e054      	b.n	8010858 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	0a5b      	lsrs	r3, r3, #9
 80107b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80107b4:	4413      	add	r3, r2
 80107b6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	699a      	ldr	r2, [r3, #24]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d90a      	bls.n	80107da <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	699a      	ldr	r2, [r3, #24]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	7d1b      	ldrb	r3, [r3, #20]
 80107d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107d4:	b2da      	uxtb	r2, r3
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	699b      	ldr	r3, [r3, #24]
 80107de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d036      	beq.n	8010854 <f_lseek+0x406>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6a1b      	ldr	r3, [r3, #32]
 80107ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80107ec:	429a      	cmp	r2, r3
 80107ee:	d031      	beq.n	8010854 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	7d1b      	ldrb	r3, [r3, #20]
 80107f4:	b25b      	sxtb	r3, r3
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	da18      	bge.n	801082c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	7858      	ldrb	r0, [r3, #1]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6a1a      	ldr	r2, [r3, #32]
 8010808:	2301      	movs	r3, #1
 801080a:	f7fd f969 	bl	800dae0 <disk_write>
 801080e:	4603      	mov	r3, r0
 8010810:	2b00      	cmp	r3, #0
 8010812:	d004      	beq.n	801081e <f_lseek+0x3d0>
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2201      	movs	r2, #1
 8010818:	755a      	strb	r2, [r3, #21]
 801081a:	2301      	movs	r3, #1
 801081c:	e01c      	b.n	8010858 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	7d1b      	ldrb	r3, [r3, #20]
 8010822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010826:	b2da      	uxtb	r2, r3
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	7858      	ldrb	r0, [r3, #1]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010836:	2301      	movs	r3, #1
 8010838:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801083a:	f7fd f931 	bl	800daa0 <disk_read>
 801083e:	4603      	mov	r3, r0
 8010840:	2b00      	cmp	r3, #0
 8010842:	d004      	beq.n	801084e <f_lseek+0x400>
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2201      	movs	r2, #1
 8010848:	755a      	strb	r2, [r3, #21]
 801084a:	2301      	movs	r3, #1
 801084c:	e004      	b.n	8010858 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010852:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010854:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8010858:	4618      	mov	r0, r3
 801085a:	3740      	adds	r7, #64	@ 0x40
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010860:	b480      	push	{r7}
 8010862:	b087      	sub	sp, #28
 8010864:	af00      	add	r7, sp, #0
 8010866:	60f8      	str	r0, [r7, #12]
 8010868:	60b9      	str	r1, [r7, #8]
 801086a:	4613      	mov	r3, r2
 801086c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801086e:	2301      	movs	r3, #1
 8010870:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010872:	2300      	movs	r3, #0
 8010874:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010876:	4b1f      	ldr	r3, [pc, #124]	@ (80108f4 <FATFS_LinkDriverEx+0x94>)
 8010878:	7a5b      	ldrb	r3, [r3, #9]
 801087a:	b2db      	uxtb	r3, r3
 801087c:	2b00      	cmp	r3, #0
 801087e:	d131      	bne.n	80108e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010880:	4b1c      	ldr	r3, [pc, #112]	@ (80108f4 <FATFS_LinkDriverEx+0x94>)
 8010882:	7a5b      	ldrb	r3, [r3, #9]
 8010884:	b2db      	uxtb	r3, r3
 8010886:	461a      	mov	r2, r3
 8010888:	4b1a      	ldr	r3, [pc, #104]	@ (80108f4 <FATFS_LinkDriverEx+0x94>)
 801088a:	2100      	movs	r1, #0
 801088c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801088e:	4b19      	ldr	r3, [pc, #100]	@ (80108f4 <FATFS_LinkDriverEx+0x94>)
 8010890:	7a5b      	ldrb	r3, [r3, #9]
 8010892:	b2db      	uxtb	r3, r3
 8010894:	4a17      	ldr	r2, [pc, #92]	@ (80108f4 <FATFS_LinkDriverEx+0x94>)
 8010896:	009b      	lsls	r3, r3, #2
 8010898:	4413      	add	r3, r2
 801089a:	68fa      	ldr	r2, [r7, #12]
 801089c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801089e:	4b15      	ldr	r3, [pc, #84]	@ (80108f4 <FATFS_LinkDriverEx+0x94>)
 80108a0:	7a5b      	ldrb	r3, [r3, #9]
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	461a      	mov	r2, r3
 80108a6:	4b13      	ldr	r3, [pc, #76]	@ (80108f4 <FATFS_LinkDriverEx+0x94>)
 80108a8:	4413      	add	r3, r2
 80108aa:	79fa      	ldrb	r2, [r7, #7]
 80108ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80108ae:	4b11      	ldr	r3, [pc, #68]	@ (80108f4 <FATFS_LinkDriverEx+0x94>)
 80108b0:	7a5b      	ldrb	r3, [r3, #9]
 80108b2:	b2db      	uxtb	r3, r3
 80108b4:	1c5a      	adds	r2, r3, #1
 80108b6:	b2d1      	uxtb	r1, r2
 80108b8:	4a0e      	ldr	r2, [pc, #56]	@ (80108f4 <FATFS_LinkDriverEx+0x94>)
 80108ba:	7251      	strb	r1, [r2, #9]
 80108bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80108be:	7dbb      	ldrb	r3, [r7, #22]
 80108c0:	3330      	adds	r3, #48	@ 0x30
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	3301      	adds	r3, #1
 80108cc:	223a      	movs	r2, #58	@ 0x3a
 80108ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80108d0:	68bb      	ldr	r3, [r7, #8]
 80108d2:	3302      	adds	r3, #2
 80108d4:	222f      	movs	r2, #47	@ 0x2f
 80108d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	3303      	adds	r3, #3
 80108dc:	2200      	movs	r2, #0
 80108de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80108e0:	2300      	movs	r3, #0
 80108e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80108e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	371c      	adds	r7, #28
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop
 80108f4:	200189d0 	.word	0x200189d0

080108f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010902:	2200      	movs	r2, #0
 8010904:	6839      	ldr	r1, [r7, #0]
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f7ff ffaa 	bl	8010860 <FATFS_LinkDriverEx>
 801090c:	4603      	mov	r3, r0
}
 801090e:	4618      	mov	r0, r3
 8010910:	3708      	adds	r7, #8
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}

08010916 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8010916:	b580      	push	{r7, lr}
 8010918:	b082      	sub	sp, #8
 801091a:	af00      	add	r7, sp, #0
 801091c:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f000 f8d6 	bl	8010ad0 <malloc>
 8010924:	4603      	mov	r3, r0
}
 8010926:	4618      	mov	r0, r3
 8010928:	3708      	adds	r7, #8
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}

0801092e <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 801092e:	b580      	push	{r7, lr}
 8010930:	b082      	sub	sp, #8
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f000 f8d2 	bl	8010ae0 <free>
}
 801093c:	bf00      	nop
 801093e:	3708      	adds	r7, #8
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010944:	b480      	push	{r7}
 8010946:	b085      	sub	sp, #20
 8010948:	af00      	add	r7, sp, #0
 801094a:	4603      	mov	r3, r0
 801094c:	6039      	str	r1, [r7, #0]
 801094e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010950:	88fb      	ldrh	r3, [r7, #6]
 8010952:	2b7f      	cmp	r3, #127	@ 0x7f
 8010954:	d802      	bhi.n	801095c <ff_convert+0x18>
		c = chr;
 8010956:	88fb      	ldrh	r3, [r7, #6]
 8010958:	81fb      	strh	r3, [r7, #14]
 801095a:	e025      	b.n	80109a8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d00b      	beq.n	801097a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010962:	88fb      	ldrh	r3, [r7, #6]
 8010964:	2bff      	cmp	r3, #255	@ 0xff
 8010966:	d805      	bhi.n	8010974 <ff_convert+0x30>
 8010968:	88fb      	ldrh	r3, [r7, #6]
 801096a:	3b80      	subs	r3, #128	@ 0x80
 801096c:	4a12      	ldr	r2, [pc, #72]	@ (80109b8 <ff_convert+0x74>)
 801096e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010972:	e000      	b.n	8010976 <ff_convert+0x32>
 8010974:	2300      	movs	r3, #0
 8010976:	81fb      	strh	r3, [r7, #14]
 8010978:	e016      	b.n	80109a8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801097a:	2300      	movs	r3, #0
 801097c:	81fb      	strh	r3, [r7, #14]
 801097e:	e009      	b.n	8010994 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010980:	89fb      	ldrh	r3, [r7, #14]
 8010982:	4a0d      	ldr	r2, [pc, #52]	@ (80109b8 <ff_convert+0x74>)
 8010984:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010988:	88fa      	ldrh	r2, [r7, #6]
 801098a:	429a      	cmp	r2, r3
 801098c:	d006      	beq.n	801099c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801098e:	89fb      	ldrh	r3, [r7, #14]
 8010990:	3301      	adds	r3, #1
 8010992:	81fb      	strh	r3, [r7, #14]
 8010994:	89fb      	ldrh	r3, [r7, #14]
 8010996:	2b7f      	cmp	r3, #127	@ 0x7f
 8010998:	d9f2      	bls.n	8010980 <ff_convert+0x3c>
 801099a:	e000      	b.n	801099e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801099c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801099e:	89fb      	ldrh	r3, [r7, #14]
 80109a0:	3380      	adds	r3, #128	@ 0x80
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	b2db      	uxtb	r3, r3
 80109a6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80109a8:	89fb      	ldrh	r3, [r7, #14]
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3714      	adds	r7, #20
 80109ae:	46bd      	mov	sp, r7
 80109b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b4:	4770      	bx	lr
 80109b6:	bf00      	nop
 80109b8:	08011284 	.word	0x08011284

080109bc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80109bc:	b480      	push	{r7}
 80109be:	b087      	sub	sp, #28
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	4603      	mov	r3, r0
 80109c4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80109c6:	88fb      	ldrh	r3, [r7, #6]
 80109c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80109cc:	d201      	bcs.n	80109d2 <ff_wtoupper+0x16>
 80109ce:	4b3e      	ldr	r3, [pc, #248]	@ (8010ac8 <ff_wtoupper+0x10c>)
 80109d0:	e000      	b.n	80109d4 <ff_wtoupper+0x18>
 80109d2:	4b3e      	ldr	r3, [pc, #248]	@ (8010acc <ff_wtoupper+0x110>)
 80109d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	1c9a      	adds	r2, r3, #2
 80109da:	617a      	str	r2, [r7, #20]
 80109dc:	881b      	ldrh	r3, [r3, #0]
 80109de:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80109e0:	8a7b      	ldrh	r3, [r7, #18]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d068      	beq.n	8010ab8 <ff_wtoupper+0xfc>
 80109e6:	88fa      	ldrh	r2, [r7, #6]
 80109e8:	8a7b      	ldrh	r3, [r7, #18]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d364      	bcc.n	8010ab8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	1c9a      	adds	r2, r3, #2
 80109f2:	617a      	str	r2, [r7, #20]
 80109f4:	881b      	ldrh	r3, [r3, #0]
 80109f6:	823b      	strh	r3, [r7, #16]
 80109f8:	8a3b      	ldrh	r3, [r7, #16]
 80109fa:	0a1b      	lsrs	r3, r3, #8
 80109fc:	81fb      	strh	r3, [r7, #14]
 80109fe:	8a3b      	ldrh	r3, [r7, #16]
 8010a00:	b2db      	uxtb	r3, r3
 8010a02:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010a04:	88fa      	ldrh	r2, [r7, #6]
 8010a06:	8a79      	ldrh	r1, [r7, #18]
 8010a08:	8a3b      	ldrh	r3, [r7, #16]
 8010a0a:	440b      	add	r3, r1
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	da49      	bge.n	8010aa4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010a10:	89fb      	ldrh	r3, [r7, #14]
 8010a12:	2b08      	cmp	r3, #8
 8010a14:	d84f      	bhi.n	8010ab6 <ff_wtoupper+0xfa>
 8010a16:	a201      	add	r2, pc, #4	@ (adr r2, 8010a1c <ff_wtoupper+0x60>)
 8010a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a1c:	08010a41 	.word	0x08010a41
 8010a20:	08010a53 	.word	0x08010a53
 8010a24:	08010a69 	.word	0x08010a69
 8010a28:	08010a71 	.word	0x08010a71
 8010a2c:	08010a79 	.word	0x08010a79
 8010a30:	08010a81 	.word	0x08010a81
 8010a34:	08010a89 	.word	0x08010a89
 8010a38:	08010a91 	.word	0x08010a91
 8010a3c:	08010a99 	.word	0x08010a99
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010a40:	88fa      	ldrh	r2, [r7, #6]
 8010a42:	8a7b      	ldrh	r3, [r7, #18]
 8010a44:	1ad3      	subs	r3, r2, r3
 8010a46:	005b      	lsls	r3, r3, #1
 8010a48:	697a      	ldr	r2, [r7, #20]
 8010a4a:	4413      	add	r3, r2
 8010a4c:	881b      	ldrh	r3, [r3, #0]
 8010a4e:	80fb      	strh	r3, [r7, #6]
 8010a50:	e027      	b.n	8010aa2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010a52:	88fa      	ldrh	r2, [r7, #6]
 8010a54:	8a7b      	ldrh	r3, [r7, #18]
 8010a56:	1ad3      	subs	r3, r2, r3
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	f003 0301 	and.w	r3, r3, #1
 8010a5e:	b29b      	uxth	r3, r3
 8010a60:	88fa      	ldrh	r2, [r7, #6]
 8010a62:	1ad3      	subs	r3, r2, r3
 8010a64:	80fb      	strh	r3, [r7, #6]
 8010a66:	e01c      	b.n	8010aa2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010a68:	88fb      	ldrh	r3, [r7, #6]
 8010a6a:	3b10      	subs	r3, #16
 8010a6c:	80fb      	strh	r3, [r7, #6]
 8010a6e:	e018      	b.n	8010aa2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010a70:	88fb      	ldrh	r3, [r7, #6]
 8010a72:	3b20      	subs	r3, #32
 8010a74:	80fb      	strh	r3, [r7, #6]
 8010a76:	e014      	b.n	8010aa2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010a78:	88fb      	ldrh	r3, [r7, #6]
 8010a7a:	3b30      	subs	r3, #48	@ 0x30
 8010a7c:	80fb      	strh	r3, [r7, #6]
 8010a7e:	e010      	b.n	8010aa2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010a80:	88fb      	ldrh	r3, [r7, #6]
 8010a82:	3b1a      	subs	r3, #26
 8010a84:	80fb      	strh	r3, [r7, #6]
 8010a86:	e00c      	b.n	8010aa2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010a88:	88fb      	ldrh	r3, [r7, #6]
 8010a8a:	3308      	adds	r3, #8
 8010a8c:	80fb      	strh	r3, [r7, #6]
 8010a8e:	e008      	b.n	8010aa2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010a90:	88fb      	ldrh	r3, [r7, #6]
 8010a92:	3b50      	subs	r3, #80	@ 0x50
 8010a94:	80fb      	strh	r3, [r7, #6]
 8010a96:	e004      	b.n	8010aa2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010a98:	88fb      	ldrh	r3, [r7, #6]
 8010a9a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8010a9e:	80fb      	strh	r3, [r7, #6]
 8010aa0:	bf00      	nop
			}
			break;
 8010aa2:	e008      	b.n	8010ab6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010aa4:	89fb      	ldrh	r3, [r7, #14]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d195      	bne.n	80109d6 <ff_wtoupper+0x1a>
 8010aaa:	8a3b      	ldrh	r3, [r7, #16]
 8010aac:	005b      	lsls	r3, r3, #1
 8010aae:	697a      	ldr	r2, [r7, #20]
 8010ab0:	4413      	add	r3, r2
 8010ab2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010ab4:	e78f      	b.n	80109d6 <ff_wtoupper+0x1a>
			break;
 8010ab6:	bf00      	nop
	}

	return chr;
 8010ab8:	88fb      	ldrh	r3, [r7, #6]
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	371c      	adds	r7, #28
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac4:	4770      	bx	lr
 8010ac6:	bf00      	nop
 8010ac8:	08011384 	.word	0x08011384
 8010acc:	08011578 	.word	0x08011578

08010ad0 <malloc>:
 8010ad0:	4b02      	ldr	r3, [pc, #8]	@ (8010adc <malloc+0xc>)
 8010ad2:	4601      	mov	r1, r0
 8010ad4:	6818      	ldr	r0, [r3, #0]
 8010ad6:	f000 b82d 	b.w	8010b34 <_malloc_r>
 8010ada:	bf00      	nop
 8010adc:	20000010 	.word	0x20000010

08010ae0 <free>:
 8010ae0:	4b02      	ldr	r3, [pc, #8]	@ (8010aec <free+0xc>)
 8010ae2:	4601      	mov	r1, r0
 8010ae4:	6818      	ldr	r0, [r3, #0]
 8010ae6:	f000 b8f5 	b.w	8010cd4 <_free_r>
 8010aea:	bf00      	nop
 8010aec:	20000010 	.word	0x20000010

08010af0 <sbrk_aligned>:
 8010af0:	b570      	push	{r4, r5, r6, lr}
 8010af2:	4e0f      	ldr	r6, [pc, #60]	@ (8010b30 <sbrk_aligned+0x40>)
 8010af4:	460c      	mov	r4, r1
 8010af6:	6831      	ldr	r1, [r6, #0]
 8010af8:	4605      	mov	r5, r0
 8010afa:	b911      	cbnz	r1, 8010b02 <sbrk_aligned+0x12>
 8010afc:	f000 f8ae 	bl	8010c5c <_sbrk_r>
 8010b00:	6030      	str	r0, [r6, #0]
 8010b02:	4621      	mov	r1, r4
 8010b04:	4628      	mov	r0, r5
 8010b06:	f000 f8a9 	bl	8010c5c <_sbrk_r>
 8010b0a:	1c43      	adds	r3, r0, #1
 8010b0c:	d103      	bne.n	8010b16 <sbrk_aligned+0x26>
 8010b0e:	f04f 34ff 	mov.w	r4, #4294967295
 8010b12:	4620      	mov	r0, r4
 8010b14:	bd70      	pop	{r4, r5, r6, pc}
 8010b16:	1cc4      	adds	r4, r0, #3
 8010b18:	f024 0403 	bic.w	r4, r4, #3
 8010b1c:	42a0      	cmp	r0, r4
 8010b1e:	d0f8      	beq.n	8010b12 <sbrk_aligned+0x22>
 8010b20:	1a21      	subs	r1, r4, r0
 8010b22:	4628      	mov	r0, r5
 8010b24:	f000 f89a 	bl	8010c5c <_sbrk_r>
 8010b28:	3001      	adds	r0, #1
 8010b2a:	d1f2      	bne.n	8010b12 <sbrk_aligned+0x22>
 8010b2c:	e7ef      	b.n	8010b0e <sbrk_aligned+0x1e>
 8010b2e:	bf00      	nop
 8010b30:	200189dc 	.word	0x200189dc

08010b34 <_malloc_r>:
 8010b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b38:	1ccd      	adds	r5, r1, #3
 8010b3a:	f025 0503 	bic.w	r5, r5, #3
 8010b3e:	3508      	adds	r5, #8
 8010b40:	2d0c      	cmp	r5, #12
 8010b42:	bf38      	it	cc
 8010b44:	250c      	movcc	r5, #12
 8010b46:	2d00      	cmp	r5, #0
 8010b48:	4606      	mov	r6, r0
 8010b4a:	db01      	blt.n	8010b50 <_malloc_r+0x1c>
 8010b4c:	42a9      	cmp	r1, r5
 8010b4e:	d904      	bls.n	8010b5a <_malloc_r+0x26>
 8010b50:	230c      	movs	r3, #12
 8010b52:	6033      	str	r3, [r6, #0]
 8010b54:	2000      	movs	r0, #0
 8010b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010c30 <_malloc_r+0xfc>
 8010b5e:	f000 f869 	bl	8010c34 <__malloc_lock>
 8010b62:	f8d8 3000 	ldr.w	r3, [r8]
 8010b66:	461c      	mov	r4, r3
 8010b68:	bb44      	cbnz	r4, 8010bbc <_malloc_r+0x88>
 8010b6a:	4629      	mov	r1, r5
 8010b6c:	4630      	mov	r0, r6
 8010b6e:	f7ff ffbf 	bl	8010af0 <sbrk_aligned>
 8010b72:	1c43      	adds	r3, r0, #1
 8010b74:	4604      	mov	r4, r0
 8010b76:	d158      	bne.n	8010c2a <_malloc_r+0xf6>
 8010b78:	f8d8 4000 	ldr.w	r4, [r8]
 8010b7c:	4627      	mov	r7, r4
 8010b7e:	2f00      	cmp	r7, #0
 8010b80:	d143      	bne.n	8010c0a <_malloc_r+0xd6>
 8010b82:	2c00      	cmp	r4, #0
 8010b84:	d04b      	beq.n	8010c1e <_malloc_r+0xea>
 8010b86:	6823      	ldr	r3, [r4, #0]
 8010b88:	4639      	mov	r1, r7
 8010b8a:	4630      	mov	r0, r6
 8010b8c:	eb04 0903 	add.w	r9, r4, r3
 8010b90:	f000 f864 	bl	8010c5c <_sbrk_r>
 8010b94:	4581      	cmp	r9, r0
 8010b96:	d142      	bne.n	8010c1e <_malloc_r+0xea>
 8010b98:	6821      	ldr	r1, [r4, #0]
 8010b9a:	1a6d      	subs	r5, r5, r1
 8010b9c:	4629      	mov	r1, r5
 8010b9e:	4630      	mov	r0, r6
 8010ba0:	f7ff ffa6 	bl	8010af0 <sbrk_aligned>
 8010ba4:	3001      	adds	r0, #1
 8010ba6:	d03a      	beq.n	8010c1e <_malloc_r+0xea>
 8010ba8:	6823      	ldr	r3, [r4, #0]
 8010baa:	442b      	add	r3, r5
 8010bac:	6023      	str	r3, [r4, #0]
 8010bae:	f8d8 3000 	ldr.w	r3, [r8]
 8010bb2:	685a      	ldr	r2, [r3, #4]
 8010bb4:	bb62      	cbnz	r2, 8010c10 <_malloc_r+0xdc>
 8010bb6:	f8c8 7000 	str.w	r7, [r8]
 8010bba:	e00f      	b.n	8010bdc <_malloc_r+0xa8>
 8010bbc:	6822      	ldr	r2, [r4, #0]
 8010bbe:	1b52      	subs	r2, r2, r5
 8010bc0:	d420      	bmi.n	8010c04 <_malloc_r+0xd0>
 8010bc2:	2a0b      	cmp	r2, #11
 8010bc4:	d917      	bls.n	8010bf6 <_malloc_r+0xc2>
 8010bc6:	1961      	adds	r1, r4, r5
 8010bc8:	42a3      	cmp	r3, r4
 8010bca:	6025      	str	r5, [r4, #0]
 8010bcc:	bf18      	it	ne
 8010bce:	6059      	strne	r1, [r3, #4]
 8010bd0:	6863      	ldr	r3, [r4, #4]
 8010bd2:	bf08      	it	eq
 8010bd4:	f8c8 1000 	streq.w	r1, [r8]
 8010bd8:	5162      	str	r2, [r4, r5]
 8010bda:	604b      	str	r3, [r1, #4]
 8010bdc:	4630      	mov	r0, r6
 8010bde:	f000 f82f 	bl	8010c40 <__malloc_unlock>
 8010be2:	f104 000b 	add.w	r0, r4, #11
 8010be6:	1d23      	adds	r3, r4, #4
 8010be8:	f020 0007 	bic.w	r0, r0, #7
 8010bec:	1ac2      	subs	r2, r0, r3
 8010bee:	bf1c      	itt	ne
 8010bf0:	1a1b      	subne	r3, r3, r0
 8010bf2:	50a3      	strne	r3, [r4, r2]
 8010bf4:	e7af      	b.n	8010b56 <_malloc_r+0x22>
 8010bf6:	6862      	ldr	r2, [r4, #4]
 8010bf8:	42a3      	cmp	r3, r4
 8010bfa:	bf0c      	ite	eq
 8010bfc:	f8c8 2000 	streq.w	r2, [r8]
 8010c00:	605a      	strne	r2, [r3, #4]
 8010c02:	e7eb      	b.n	8010bdc <_malloc_r+0xa8>
 8010c04:	4623      	mov	r3, r4
 8010c06:	6864      	ldr	r4, [r4, #4]
 8010c08:	e7ae      	b.n	8010b68 <_malloc_r+0x34>
 8010c0a:	463c      	mov	r4, r7
 8010c0c:	687f      	ldr	r7, [r7, #4]
 8010c0e:	e7b6      	b.n	8010b7e <_malloc_r+0x4a>
 8010c10:	461a      	mov	r2, r3
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	42a3      	cmp	r3, r4
 8010c16:	d1fb      	bne.n	8010c10 <_malloc_r+0xdc>
 8010c18:	2300      	movs	r3, #0
 8010c1a:	6053      	str	r3, [r2, #4]
 8010c1c:	e7de      	b.n	8010bdc <_malloc_r+0xa8>
 8010c1e:	230c      	movs	r3, #12
 8010c20:	6033      	str	r3, [r6, #0]
 8010c22:	4630      	mov	r0, r6
 8010c24:	f000 f80c 	bl	8010c40 <__malloc_unlock>
 8010c28:	e794      	b.n	8010b54 <_malloc_r+0x20>
 8010c2a:	6005      	str	r5, [r0, #0]
 8010c2c:	e7d6      	b.n	8010bdc <_malloc_r+0xa8>
 8010c2e:	bf00      	nop
 8010c30:	200189e0 	.word	0x200189e0

08010c34 <__malloc_lock>:
 8010c34:	4801      	ldr	r0, [pc, #4]	@ (8010c3c <__malloc_lock+0x8>)
 8010c36:	f000 b84b 	b.w	8010cd0 <__retarget_lock_acquire_recursive>
 8010c3a:	bf00      	nop
 8010c3c:	20018b20 	.word	0x20018b20

08010c40 <__malloc_unlock>:
 8010c40:	4801      	ldr	r0, [pc, #4]	@ (8010c48 <__malloc_unlock+0x8>)
 8010c42:	f000 b846 	b.w	8010cd2 <__retarget_lock_release_recursive>
 8010c46:	bf00      	nop
 8010c48:	20018b20 	.word	0x20018b20

08010c4c <memset>:
 8010c4c:	4402      	add	r2, r0
 8010c4e:	4603      	mov	r3, r0
 8010c50:	4293      	cmp	r3, r2
 8010c52:	d100      	bne.n	8010c56 <memset+0xa>
 8010c54:	4770      	bx	lr
 8010c56:	f803 1b01 	strb.w	r1, [r3], #1
 8010c5a:	e7f9      	b.n	8010c50 <memset+0x4>

08010c5c <_sbrk_r>:
 8010c5c:	b538      	push	{r3, r4, r5, lr}
 8010c5e:	4d06      	ldr	r5, [pc, #24]	@ (8010c78 <_sbrk_r+0x1c>)
 8010c60:	2300      	movs	r3, #0
 8010c62:	4604      	mov	r4, r0
 8010c64:	4608      	mov	r0, r1
 8010c66:	602b      	str	r3, [r5, #0]
 8010c68:	f7fc fe78 	bl	800d95c <_sbrk>
 8010c6c:	1c43      	adds	r3, r0, #1
 8010c6e:	d102      	bne.n	8010c76 <_sbrk_r+0x1a>
 8010c70:	682b      	ldr	r3, [r5, #0]
 8010c72:	b103      	cbz	r3, 8010c76 <_sbrk_r+0x1a>
 8010c74:	6023      	str	r3, [r4, #0]
 8010c76:	bd38      	pop	{r3, r4, r5, pc}
 8010c78:	20018b1c 	.word	0x20018b1c

08010c7c <__errno>:
 8010c7c:	4b01      	ldr	r3, [pc, #4]	@ (8010c84 <__errno+0x8>)
 8010c7e:	6818      	ldr	r0, [r3, #0]
 8010c80:	4770      	bx	lr
 8010c82:	bf00      	nop
 8010c84:	20000010 	.word	0x20000010

08010c88 <__libc_init_array>:
 8010c88:	b570      	push	{r4, r5, r6, lr}
 8010c8a:	4d0d      	ldr	r5, [pc, #52]	@ (8010cc0 <__libc_init_array+0x38>)
 8010c8c:	4c0d      	ldr	r4, [pc, #52]	@ (8010cc4 <__libc_init_array+0x3c>)
 8010c8e:	1b64      	subs	r4, r4, r5
 8010c90:	10a4      	asrs	r4, r4, #2
 8010c92:	2600      	movs	r6, #0
 8010c94:	42a6      	cmp	r6, r4
 8010c96:	d109      	bne.n	8010cac <__libc_init_array+0x24>
 8010c98:	4d0b      	ldr	r5, [pc, #44]	@ (8010cc8 <__libc_init_array+0x40>)
 8010c9a:	4c0c      	ldr	r4, [pc, #48]	@ (8010ccc <__libc_init_array+0x44>)
 8010c9c:	f000 f864 	bl	8010d68 <_init>
 8010ca0:	1b64      	subs	r4, r4, r5
 8010ca2:	10a4      	asrs	r4, r4, #2
 8010ca4:	2600      	movs	r6, #0
 8010ca6:	42a6      	cmp	r6, r4
 8010ca8:	d105      	bne.n	8010cb6 <__libc_init_array+0x2e>
 8010caa:	bd70      	pop	{r4, r5, r6, pc}
 8010cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cb0:	4798      	blx	r3
 8010cb2:	3601      	adds	r6, #1
 8010cb4:	e7ee      	b.n	8010c94 <__libc_init_array+0xc>
 8010cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cba:	4798      	blx	r3
 8010cbc:	3601      	adds	r6, #1
 8010cbe:	e7f2      	b.n	8010ca6 <__libc_init_array+0x1e>
 8010cc0:	08011634 	.word	0x08011634
 8010cc4:	08011634 	.word	0x08011634
 8010cc8:	08011634 	.word	0x08011634
 8010ccc:	08011638 	.word	0x08011638

08010cd0 <__retarget_lock_acquire_recursive>:
 8010cd0:	4770      	bx	lr

08010cd2 <__retarget_lock_release_recursive>:
 8010cd2:	4770      	bx	lr

08010cd4 <_free_r>:
 8010cd4:	b538      	push	{r3, r4, r5, lr}
 8010cd6:	4605      	mov	r5, r0
 8010cd8:	2900      	cmp	r1, #0
 8010cda:	d041      	beq.n	8010d60 <_free_r+0x8c>
 8010cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ce0:	1f0c      	subs	r4, r1, #4
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	bfb8      	it	lt
 8010ce6:	18e4      	addlt	r4, r4, r3
 8010ce8:	f7ff ffa4 	bl	8010c34 <__malloc_lock>
 8010cec:	4a1d      	ldr	r2, [pc, #116]	@ (8010d64 <_free_r+0x90>)
 8010cee:	6813      	ldr	r3, [r2, #0]
 8010cf0:	b933      	cbnz	r3, 8010d00 <_free_r+0x2c>
 8010cf2:	6063      	str	r3, [r4, #4]
 8010cf4:	6014      	str	r4, [r2, #0]
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cfc:	f7ff bfa0 	b.w	8010c40 <__malloc_unlock>
 8010d00:	42a3      	cmp	r3, r4
 8010d02:	d908      	bls.n	8010d16 <_free_r+0x42>
 8010d04:	6820      	ldr	r0, [r4, #0]
 8010d06:	1821      	adds	r1, r4, r0
 8010d08:	428b      	cmp	r3, r1
 8010d0a:	bf01      	itttt	eq
 8010d0c:	6819      	ldreq	r1, [r3, #0]
 8010d0e:	685b      	ldreq	r3, [r3, #4]
 8010d10:	1809      	addeq	r1, r1, r0
 8010d12:	6021      	streq	r1, [r4, #0]
 8010d14:	e7ed      	b.n	8010cf2 <_free_r+0x1e>
 8010d16:	461a      	mov	r2, r3
 8010d18:	685b      	ldr	r3, [r3, #4]
 8010d1a:	b10b      	cbz	r3, 8010d20 <_free_r+0x4c>
 8010d1c:	42a3      	cmp	r3, r4
 8010d1e:	d9fa      	bls.n	8010d16 <_free_r+0x42>
 8010d20:	6811      	ldr	r1, [r2, #0]
 8010d22:	1850      	adds	r0, r2, r1
 8010d24:	42a0      	cmp	r0, r4
 8010d26:	d10b      	bne.n	8010d40 <_free_r+0x6c>
 8010d28:	6820      	ldr	r0, [r4, #0]
 8010d2a:	4401      	add	r1, r0
 8010d2c:	1850      	adds	r0, r2, r1
 8010d2e:	4283      	cmp	r3, r0
 8010d30:	6011      	str	r1, [r2, #0]
 8010d32:	d1e0      	bne.n	8010cf6 <_free_r+0x22>
 8010d34:	6818      	ldr	r0, [r3, #0]
 8010d36:	685b      	ldr	r3, [r3, #4]
 8010d38:	6053      	str	r3, [r2, #4]
 8010d3a:	4408      	add	r0, r1
 8010d3c:	6010      	str	r0, [r2, #0]
 8010d3e:	e7da      	b.n	8010cf6 <_free_r+0x22>
 8010d40:	d902      	bls.n	8010d48 <_free_r+0x74>
 8010d42:	230c      	movs	r3, #12
 8010d44:	602b      	str	r3, [r5, #0]
 8010d46:	e7d6      	b.n	8010cf6 <_free_r+0x22>
 8010d48:	6820      	ldr	r0, [r4, #0]
 8010d4a:	1821      	adds	r1, r4, r0
 8010d4c:	428b      	cmp	r3, r1
 8010d4e:	bf04      	itt	eq
 8010d50:	6819      	ldreq	r1, [r3, #0]
 8010d52:	685b      	ldreq	r3, [r3, #4]
 8010d54:	6063      	str	r3, [r4, #4]
 8010d56:	bf04      	itt	eq
 8010d58:	1809      	addeq	r1, r1, r0
 8010d5a:	6021      	streq	r1, [r4, #0]
 8010d5c:	6054      	str	r4, [r2, #4]
 8010d5e:	e7ca      	b.n	8010cf6 <_free_r+0x22>
 8010d60:	bd38      	pop	{r3, r4, r5, pc}
 8010d62:	bf00      	nop
 8010d64:	200189e0 	.word	0x200189e0

08010d68 <_init>:
 8010d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d6a:	bf00      	nop
 8010d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d6e:	bc08      	pop	{r3}
 8010d70:	469e      	mov	lr, r3
 8010d72:	4770      	bx	lr

08010d74 <_fini>:
 8010d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d76:	bf00      	nop
 8010d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d7a:	bc08      	pop	{r3}
 8010d7c:	469e      	mov	lr, r3
 8010d7e:	4770      	bx	lr
