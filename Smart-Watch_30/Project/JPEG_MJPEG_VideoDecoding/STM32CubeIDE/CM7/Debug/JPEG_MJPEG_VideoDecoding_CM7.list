
JPEG_MJPEG_VideoDecoding_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107c4  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  08010a5c  08010a5c  00011a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011310  08011310  00012310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08011314  08011314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000060  20000000  08011318  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00018aa4  20000060  08011378  00013060  2**2
                  ALLOC
  7 ._user_heap_stack 00002404  20018b04  08011378  00013b04  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00013060  2**0
                  CONTENTS, READONLY
  9 .debug_info   000219f8  00000000  00000000  0001308e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004734  00000000  00000000  00034a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001940  00000000  00000000  000391c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001333  00000000  00000000  0003ab00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0004896d  00000000  00000000  0003be33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00027e82  00000000  00000000  000847a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001d2f10  00000000  00000000  000ac622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0027f532  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006b18  00000000  00000000  0027f578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000a8  00000000  00000000  00286090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000060 	.word	0x20000060
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010a44 	.word	0x08010a44

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000064 	.word	0x20000064
 80002d4:	08010a44 	.word	0x08010a44

080002d8 <IS42S32800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800J_ERROR;
 80002e2:	f04f 33ff 	mov.w	r3, #4294967295
 80002e6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4619      	mov	r1, r3
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f000 f832 	bl	8000358 <IS42S32800J_ClockEnable>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d128      	bne.n	800034c <IS42S32800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800J_Delay(1);
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 f8e2 	bl	80004c4 <IS42S32800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4619      	mov	r1, r3
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f000 f84a 	bl	80003a0 <IS42S32800J_Precharge>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d11c      	bne.n	800034c <IS42S32800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	6819      	ldr	r1, [r3, #0]
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	461a      	mov	r2, r3
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f000 f897 	bl	8000450 <IS42S32800J_RefreshMode>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d111      	bne.n	800034c <IS42S32800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8000328:	6839      	ldr	r1, [r7, #0]
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f000 f85c 	bl	80003e8 <IS42S32800J_ModeRegConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d10a      	bne.n	800034c <IS42S32800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	4619      	mov	r1, r3
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f000 f8ad 	bl	800049c <IS42S32800J_RefreshRate>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d101      	bne.n	800034c <IS42S32800J_Init+0x74>
          {
            ret = IS42S32800J_OK;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800034c:	68fb      	ldr	r3, [r7, #12]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8000362:	4b0e      	ldr	r3, [pc, #56]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 8000364:	2201      	movs	r2, #1
 8000366:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000368:	4a0c      	ldr	r2, [pc, #48]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800036e:	4b0b      	ldr	r3, [pc, #44]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 8000370:	2201      	movs	r2, #1
 8000372:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000374:	4b09      	ldr	r3, [pc, #36]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800037a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800037e:	4907      	ldr	r1, [pc, #28]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f009 fb73 	bl	8009a6c <HAL_SDRAM_SendCommand>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d002      	beq.n	8000392 <IS42S32800J_ClockEnable+0x3a>
  {
    return IS42S32800J_ERROR;
 800038c:	f04f 33ff 	mov.w	r3, #4294967295
 8000390:	e000      	b.n	8000394 <IS42S32800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 8000392:	2300      	movs	r3, #0
  }
}
 8000394:	4618      	mov	r0, r3
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	2000007c 	.word	0x2000007c

080003a0 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003ac:	2202      	movs	r2, #2
 80003ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80003b0:	4a0c      	ldr	r2, [pc, #48]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80003bc:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80003c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003c6:	4907      	ldr	r1, [pc, #28]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f009 fb4f 	bl	8009a6c <HAL_SDRAM_SendCommand>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d002      	beq.n	80003da <IS42S32800J_Precharge+0x3a>
  {
    return IS42S32800J_ERROR;
 80003d4:	f04f 33ff 	mov.w	r3, #4294967295
 80003d8:	e000      	b.n	80003dc <IS42S32800J_Precharge+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 80003da:	2300      	movs	r3, #0
  }
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	2000007c 	.word	0x2000007c

080003e8 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80003fa:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8000400:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8000406:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800040c:	4313      	orrs	r3, r2
 800040e:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8000410:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000412:	2204      	movs	r2, #4
 8000414:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a0c      	ldr	r2, [pc, #48]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 800041c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800041e:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000420:	2201      	movs	r2, #1
 8000422:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000424:	4a09      	ldr	r2, [pc, #36]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800042a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800042e:	4907      	ldr	r1, [pc, #28]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f009 fb1b 	bl	8009a6c <HAL_SDRAM_SendCommand>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d002      	beq.n	8000442 <IS42S32800J_ModeRegConfig+0x5a>
  {
    return IS42S32800J_ERROR;
 800043c:	f04f 33ff 	mov.w	r3, #4294967295
 8000440:	e000      	b.n	8000444 <IS42S32800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800J_OK;
 8000442:	2300      	movs	r3, #0
  }
}
 8000444:	4618      	mov	r0, r3
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	2000007c 	.word	0x2000007c

08000450 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800045c:	4a0e      	ldr	r2, [pc, #56]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000462:	4a0d      	ldr	r2, [pc, #52]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000468:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 800046a:	2208      	movs	r2, #8
 800046c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800046e:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000474:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000478:	4907      	ldr	r1, [pc, #28]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 800047a:	68f8      	ldr	r0, [r7, #12]
 800047c:	f009 faf6 	bl	8009a6c <HAL_SDRAM_SendCommand>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <IS42S32800J_RefreshMode+0x3c>
  {
    return IS42S32800J_ERROR;
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	e000      	b.n	800048e <IS42S32800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800J_OK;
 800048c:	2300      	movs	r3, #0
  }
}
 800048e:	4618      	mov	r0, r3
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	2000007c 	.word	0x2000007c

0800049c <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80004a6:	6839      	ldr	r1, [r7, #0]
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f009 fb14 	bl	8009ad6 <HAL_SDRAM_ProgramRefreshRate>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d002      	beq.n	80004ba <IS42S32800J_RefreshRate+0x1e>
  {
    return IS42S32800J_ERROR;
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295
 80004b8:	e000      	b.n	80004bc <IS42S32800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800J_OK;
 80004ba:	2300      	movs	r3, #0
  }
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <IS42S32800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80004cc:	f000 fcc6 	bl	8000e5c <HAL_GetTick>
 80004d0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80004d2:	bf00      	nop
 80004d4:	f000 fcc2 	bl	8000e5c <HAL_GetTick>
 80004d8:	4602      	mov	r2, r0
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	1ad3      	subs	r3, r2, r3
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d8f7      	bhi.n	80004d4 <IS42S32800J_Delay+0x10>
  {
  }
  return IS42S32800J_OK;
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t BSP_SD_Init(uint32_t Instance)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	@ 0x28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;

  if(Instance >= SD_INSTANCES_NBR)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d003      	beq.n	800050a <BSP_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000502:	f06f 0301 	mvn.w	r3, #1
 8000506:	627b      	str	r3, [r7, #36]	@ 0x24
 8000508:	e063      	b.n	80005d2 <BSP_SD_Init+0xe2>
  }
  else
  {
    /* Configure Input mode for SD detection pin */
    SD_DETECT_GPIO_CLK_ENABLE();
 800050a:	4b34      	ldr	r3, [pc, #208]	@ (80005dc <BSP_SD_Init+0xec>)
 800050c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000510:	4a32      	ldr	r2, [pc, #200]	@ (80005dc <BSP_SD_Init+0xec>)
 8000512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000516:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800051a:	4b30      	ldr	r3, [pc, #192]	@ (80005dc <BSP_SD_Init+0xec>)
 800051c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
    gpio_init_structure.Pin = SD_DETECT_PIN;
 8000528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800052c:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 800052e:	2301      	movs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000532:	2302      	movs	r3, #2
 8000534:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	4827      	ldr	r0, [pc, #156]	@ (80005e0 <BSP_SD_Init+0xf0>)
 8000542:	f001 f92b 	bl	800179c <HAL_GPIO_Init>

    if(BSP_SD_IsDetected(Instance) != SD_PRESENT)
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 f876 	bl	8000638 <BSP_SD_IsDetected>
 800054c:	4603      	mov	r3, r0
 800054e:	2b01      	cmp	r3, #1
 8000550:	d003      	beq.n	800055a <BSP_SD_Init+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8000552:	f06f 0306 	mvn.w	r3, #6
 8000556:	627b      	str	r3, [r7, #36]	@ 0x24
 8000558:	e03b      	b.n	80005d2 <BSP_SD_Init+0xe2>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SD initialization */
      SD_MspInit(&hsd_sdmmc[Instance]);
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	4613      	mov	r3, r2
 800055e:	015b      	lsls	r3, r3, #5
 8000560:	1a9b      	subs	r3, r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4a1f      	ldr	r2, [pc, #124]	@ (80005e4 <BSP_SD_Init+0xf4>)
 8000566:	4413      	add	r3, r2
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f929 	bl	80007c0 <SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS   */

      if(ret == BSP_ERROR_NONE)
 800056e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000570:	2b00      	cmp	r3, #0
 8000572:	d12e      	bne.n	80005d2 <BSP_SD_Init+0xe2>
      {
        /* HAL SD initialization and Enable wide operation   */
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	4613      	mov	r3, r2
 8000578:	015b      	lsls	r3, r3, #5
 800057a:	1a9b      	subs	r3, r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4a19      	ldr	r2, [pc, #100]	@ (80005e4 <BSP_SD_Init+0xf4>)
 8000580:	4413      	add	r3, r2
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f830 	bl	80005e8 <MX_SDMMC1_SD_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d003      	beq.n	8000596 <BSP_SD_Init+0xa6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800058e:	f06f 0303 	mvn.w	r3, #3
 8000592:	627b      	str	r3, [r7, #36]	@ 0x24
 8000594:	e01d      	b.n	80005d2 <BSP_SD_Init+0xe2>
        }
#if (USE_SD_BUS_WIDE_4B > 0)
        else if(HAL_SD_ConfigWideBusOperation(&hsd_sdmmc[Instance], SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	4613      	mov	r3, r2
 800059a:	015b      	lsls	r3, r3, #5
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	4a10      	ldr	r2, [pc, #64]	@ (80005e4 <BSP_SD_Init+0xf4>)
 80005a2:	4413      	add	r3, r2
 80005a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005a8:	4618      	mov	r0, r3
 80005aa:	f008 fba3 	bl	8008cf4 <HAL_SD_ConfigWideBusOperation>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d003      	beq.n	80005bc <BSP_SD_Init+0xcc>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80005b4:	f06f 0303 	mvn.w	r3, #3
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80005ba:	e00a      	b.n	80005d2 <BSP_SD_Init+0xe2>
        }
#endif
        else
        {
          /* Switch to High Speed mode if the card support this mode */
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4613      	mov	r3, r2
 80005c0:	015b      	lsls	r3, r3, #5
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4a07      	ldr	r2, [pc, #28]	@ (80005e4 <BSP_SD_Init+0xf4>)
 80005c8:	4413      	add	r3, r2
 80005ca:	2102      	movs	r1, #2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f008 fca3 	bl	8008f18 <HAL_SD_ConfigSpeedBusOperation>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }
    }
  }
  return ret;
 80005d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3728      	adds	r7, #40	@ 0x28
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	58024400 	.word	0x58024400
 80005e0:	58022000 	.word	0x58022000
 80005e4:	2000008c 	.word	0x2000008c

080005e8 <MX_SDMMC1_SD_Init>:
  * @brief  Initializes the SDMMC1 peripheral.
  * @param  hsd SD handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDMMC1_SD_Init(SD_HandleTypeDef *hsd)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  /* uSD device interface configuration */
  hsd->Instance                 = SDMMC1;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000634 <MX_SDMMC1_SD_Init+0x4c>)
 80005f8:	601a      	str	r2, [r3, #0]
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hsd->Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
#if (USE_SD_BUS_WIDE_4B > 0)
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_4B;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800060c:	60da      	str	r2, [r3, #12]
#else
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_1B;
#endif
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
#endif /*USE_SD_TRANSCEIVER*/
#if ( USE_SD_HIGH_PERFORMANCE > 0 )
  hsd->Init.ClockDiv            = SDMMC_HSpeed_CLK_DIV;
#else
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2204      	movs	r2, #4
 8000618:	615a      	str	r2, [r3, #20]
#endif /*USE_SD_HIGH_PERFORMANCE*/

  /* HAL SD initialization   */
  if(HAL_SD_Init(hsd) != HAL_OK)
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f007 fc9a 	bl	8007f54 <HAL_SD_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_SDMMC1_SD_Init+0x42>
  {
    ret = HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	52007000 	.word	0x52007000

08000638 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t BSP_SD_IsDetected(uint32_t Instance)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000640:	f06f 0305 	mvn.w	r3, #5
 8000644:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <BSP_SD_IsDetected+0x1a>
  {
    return BSP_ERROR_WRONG_PARAM;
 800064c:	f06f 0301 	mvn.w	r3, #1
 8000650:	e00f      	b.n	8000672 <BSP_SD_IsDetected+0x3a>
  }
  else
  {
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 8000652:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000656:	4809      	ldr	r0, [pc, #36]	@ (800067c <BSP_SD_IsDetected+0x44>)
 8000658:	f001 fa50 	bl	8001afc <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	60fb      	str	r3, [r7, #12]
    /* Check SD card detect pin */
    if(ret != GPIO_PIN_RESET)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <BSP_SD_IsDetected+0x34>
    {
      ret = (int32_t)SD_NOT_PRESENT;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	e001      	b.n	8000670 <BSP_SD_IsDetected+0x38>
    }
    else
    {
      ret = (int32_t)SD_PRESENT;
 800066c:	2301      	movs	r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000670:	68fb      	ldr	r3, [r7, #12]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	58022000 	.word	0x58022000

08000680 <BSP_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t BSP_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af02      	add	r7, sp, #8
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	2264      	movs	r2, #100	@ 0x64
 8000696:	fb02 f303 	mul.w	r3, r2, r3
 800069a:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d003      	beq.n	80006aa <BSP_SD_ReadBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80006a2:	f06f 0301 	mvn.w	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	e013      	b.n	80006d2 <BSP_SD_ReadBlocks+0x52>
  }
  else
  {
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	015b      	lsls	r3, r3, #5
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4a09      	ldr	r2, [pc, #36]	@ (80006dc <BSP_SD_ReadBlocks+0x5c>)
 80006b6:	1898      	adds	r0, r3, r2
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	68b9      	ldr	r1, [r7, #8]
 80006c2:	f007 fd71 	bl	80081a8 <HAL_SD_ReadBlocks>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <BSP_SD_ReadBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80006cc:	f06f 0303 	mvn.w	r3, #3
 80006d0:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 80006d2:	697b      	ldr	r3, [r7, #20]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000008c 	.word	0x2000008c

080006e0 <BSP_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t BSP_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	2264      	movs	r2, #100	@ 0x64
 80006f6:	fb02 f303 	mul.w	r3, r2, r3
 80006fa:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d003      	beq.n	800070a <BSP_SD_WriteBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000702:	f06f 0301 	mvn.w	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	e013      	b.n	8000732 <BSP_SD_WriteBlocks+0x52>
  }
  else
  {
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	4613      	mov	r3, r2
 800070e:	015b      	lsls	r3, r3, #5
 8000710:	1a9b      	subs	r3, r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4a09      	ldr	r2, [pc, #36]	@ (800073c <BSP_SD_WriteBlocks+0x5c>)
 8000716:	1898      	adds	r0, r3, r2
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	f007 fecb 	bl	80084bc <HAL_SD_WriteBlocks>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <BSP_SD_WriteBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800072c:	f06f 0303 	mvn.w	r3, #3
 8000730:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 8000732:	697b      	ldr	r3, [r7, #20]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000008c 	.word	0x2000008c

08000740 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t BSP_SD_GetCardState(uint32_t Instance)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4613      	mov	r3, r2
 800074c:	015b      	lsls	r3, r3, #5
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4a07      	ldr	r2, [pc, #28]	@ (8000770 <BSP_SD_GetCardState+0x30>)
 8000754:	4413      	add	r3, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f008 fc9a 	bl	8009090 <HAL_SD_GetCardState>
 800075c:	4603      	mov	r3, r0
 800075e:	2b04      	cmp	r3, #4
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2000008c 	.word	0x2000008c

08000774 <BSP_SD_GetCardInfo>:
  * @param  Instance  SD Instance
  * @param  CardInfo  Pointer to HAL_SD_CardInfoTypedef structure
  * @retval BSP status
  */
int32_t BSP_SD_GetCardInfo(uint32_t Instance, BSP_SD_CardInfo *CardInfo)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d003      	beq.n	8000790 <BSP_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000788:	f06f 0301 	mvn.w	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	e010      	b.n	80007b2 <BSP_SD_GetCardInfo+0x3e>
  }
  else
  {
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4613      	mov	r3, r2
 8000794:	015b      	lsls	r3, r3, #5
 8000796:	1a9b      	subs	r3, r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4a08      	ldr	r2, [pc, #32]	@ (80007bc <BSP_SD_GetCardInfo+0x48>)
 800079c:	4413      	add	r3, r2
 800079e:	6839      	ldr	r1, [r7, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f008 fa7b 	bl	8008c9c <HAL_SD_GetCardInfo>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <BSP_SD_GetCardInfo+0x3e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80007ac:	f06f 0303 	mvn.w	r3, #3
 80007b0:	60fb      	str	r3, [r7, #12]
    }
  }
  /* Return BSP status */
  return ret;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	2000008c 	.word	0x2000008c

080007c0 <SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd  SD handle
  * @retval None
  */
static void SD_MspInit(SD_HandleTypeDef *hsd)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	@ 0x30
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4a44      	ldr	r2, [pc, #272]	@ (80008dc <SD_MspInit+0x11c>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	f040 8081 	bne.w	80008d4 <SD_MspInit+0x114>
    therefore Camera must be power down before using the BSP SD
    To power down the camera , Set GPIOJ pin 14 to high
    */

    /* Enable GPIO J clock */
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007d2:	4b43      	ldr	r3, [pc, #268]	@ (80008e0 <SD_MspInit+0x120>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a41      	ldr	r2, [pc, #260]	@ (80008e0 <SD_MspInit+0x120>)
 80007da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b3f      	ldr	r3, [pc, #252]	@ (80008e0 <SD_MspInit+0x120>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007ec:	61bb      	str	r3, [r7, #24]
 80007ee:	69bb      	ldr	r3, [r7, #24]

    gpio_init_structure.Pin       = GPIO_PIN_14;
 80007f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80007f4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4836      	ldr	r0, [pc, #216]	@ (80008e4 <SD_MspInit+0x124>)
 800080a:	f000 ffc7 	bl	800179c <HAL_GPIO_Init>

    /* Set the camera POWER_DOWN pin (active high) */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000814:	4833      	ldr	r0, [pc, #204]	@ (80008e4 <SD_MspInit+0x124>)
 8000816:	f001 f989 	bl	8001b2c <HAL_GPIO_WritePin>
#endif

    /* Enable SDIO clock */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800081a:	4b31      	ldr	r3, [pc, #196]	@ (80008e0 <SD_MspInit+0x120>)
 800081c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000820:	4a2f      	ldr	r2, [pc, #188]	@ (80008e0 <SD_MspInit+0x120>)
 8000822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000826:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800082a:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <SD_MspInit+0x120>)
 800082c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	697b      	ldr	r3, [r7, #20]


    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000838:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <SD_MspInit+0x120>)
 800083a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800083e:	4a28      	ldr	r2, [pc, #160]	@ (80008e0 <SD_MspInit+0x120>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000848:	4b25      	ldr	r3, [pc, #148]	@ (80008e0 <SD_MspInit+0x120>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <SD_MspInit+0x120>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800085c:	4a20      	ldr	r2, [pc, #128]	@ (80008e0 <SD_MspInit+0x120>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000866:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <SD_MspInit+0x120>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000874:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <SD_MspInit+0x120>)
 8000876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800087a:	4a19      	ldr	r2, [pc, #100]	@ (80008e0 <SD_MspInit+0x120>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <SD_MspInit+0x120>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]


    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8000896:	2301      	movs	r3, #1
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800089e:	230c      	movs	r3, #12
 80008a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SD_BUS_WIDE_4B > 0)
    /* SDMMC GPIO CLKIN PB8, D0 PC8, D1 PC9, D2 PC10, D3 PC11, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80008a2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008a6:	61fb      	str	r3, [r7, #28]
    /* SDMMC GPIO CLKIN PB8, D0 PC8, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif

    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	480e      	ldr	r0, [pc, #56]	@ (80008e8 <SD_MspInit+0x128>)
 80008b0:	f000 ff74 	bl	800179c <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
 80008b4:	2304      	movs	r3, #4
 80008b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	480b      	ldr	r0, [pc, #44]	@ (80008ec <SD_MspInit+0x12c>)
 80008c0:	f000 ff6c 	bl	800179c <HAL_GPIO_Init>

    /* NVIC configuration for SDIO interrupts */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	210e      	movs	r1, #14
 80008c8:	2031      	movs	r0, #49	@ 0x31
 80008ca:	f000 fbee 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80008ce:	2031      	movs	r0, #49	@ 0x31
 80008d0:	f000 fc05 	bl	80010de <HAL_NVIC_EnableIRQ>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3730      	adds	r7, #48	@ 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000008c 	.word	0x2000008c
 80008e0:	58024400 	.word	0x58024400
 80008e4:	58022400 	.word	0x58022400
 80008e8:	58020800 	.word	0x58020800
 80008ec:	58020c00 	.word	0x58020c00

080008f0 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800J_Context_t pRegMode;

  if(Instance >=SDRAM_INSTANCES_NBR)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80008fe:	f06f 0301 	mvn.w	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e033      	b.n	800096e <BSP_SDRAM_Init+0x7e>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SDRAM initialization */
      SDRAM_MspInit(&hsdram[0]);
 8000906:	481c      	ldr	r0, [pc, #112]	@ (8000978 <BSP_SDRAM_Init+0x88>)
 8000908:	f000 f884 	bl	8000a14 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800090c:	481a      	ldr	r0, [pc, #104]	@ (8000978 <BSP_SDRAM_Init+0x88>)
 800090e:	f000 f837 	bl	8000980 <MX_SDRAM_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d003      	beq.n	8000920 <BSP_SDRAM_Init+0x30>
    {
      ret = BSP_ERROR_NO_INIT;
 8000918:	f04f 33ff 	mov.w	r3, #4294967295
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	e026      	b.n	800096e <BSP_SDRAM_Init+0x7e>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8000920:	4b16      	ldr	r3, [pc, #88]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000922:	2208      	movs	r2, #8
 8000924:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000928:	2203      	movs	r2, #3
 800092a:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800092c:	4b13      	ldr	r3, [pc, #76]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 800092e:	f240 6203 	movw	r2, #1539	@ 0x603
 8000932:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8000940:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000942:	2230      	movs	r2, #48	@ 0x30
 8000944:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800094c:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 800094e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000952:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8000954:	4909      	ldr	r1, [pc, #36]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000956:	4808      	ldr	r0, [pc, #32]	@ (8000978 <BSP_SDRAM_Init+0x88>)
 8000958:	f7ff fcbe 	bl	80002d8 <IS42S32800J_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <BSP_SDRAM_Init+0x7a>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8000962:	f06f 0304 	mvn.w	r3, #4
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	e001      	b.n	800096e <BSP_SDRAM_Init+0x7e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000108 	.word	0x20000108
 800097c:	2000013c 	.word	0x2000013c

08000980 <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a20      	ldr	r2, [pc, #128]	@ (8000a0c <MX_SDRAM_Init+0x8c>)
 800098c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2201      	movs	r2, #1
 8000992:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2201      	movs	r2, #1
 8000998:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2204      	movs	r2, #4
 800099e:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2220      	movs	r2, #32
 80009a4:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2240      	movs	r2, #64	@ 0x40
 80009aa:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80009b2:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009c0:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_SDRAM_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80009d4:	2307      	movs	r3, #7
 80009d6:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 80009dc:	2307      	movs	r3, #7
 80009de:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4619      	mov	r1, r3
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f008 fff4 	bl	80099e0 <HAL_SDRAM_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_SDRAM_Init+0x82>
  {
    return  HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <MX_SDRAM_Init+0x84>
  }
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3728      	adds	r7, #40	@ 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	52004140 	.word	0x52004140
 8000a10:	20000108 	.word	0x20000108

08000a14 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hsdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b090      	sub	sp, #64	@ 0x40
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a1c:	4b7f      	ldr	r3, [pc, #508]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a22:	4a7e      	ldr	r2, [pc, #504]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a28:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000a2c:	4b7b      	ldr	r3, [pc, #492]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8000a3a:	4b78      	ldr	r3, [pc, #480]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a40:	4a76      	ldr	r2, [pc, #472]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000a4a:	4b74      	ldr	r3, [pc, #464]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a58:	4b70      	ldr	r3, [pc, #448]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	4a6f      	ldr	r2, [pc, #444]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a68:	4b6c      	ldr	r3, [pc, #432]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	623b      	str	r3, [r7, #32]
 8000a74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	4b69      	ldr	r3, [pc, #420]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	4a67      	ldr	r2, [pc, #412]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a86:	4b65      	ldr	r3, [pc, #404]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	61fb      	str	r3, [r7, #28]
 8000a92:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a94:	4b61      	ldr	r3, [pc, #388]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	4a60      	ldr	r2, [pc, #384]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a9c:	f043 0320 	orr.w	r3, r3, #32
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa4:	4b5d      	ldr	r3, [pc, #372]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	f003 0320 	and.w	r3, r3, #32
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab2:	4b5a      	ldr	r3, [pc, #360]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	4a58      	ldr	r2, [pc, #352]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac2:	4b56      	ldr	r3, [pc, #344]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad0:	4b52      	ldr	r3, [pc, #328]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	4a51      	ldr	r2, [pc, #324]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae0:	4b4e      	ldr	r3, [pc, #312]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000aee:	4b4b      	ldr	r3, [pc, #300]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af4:	4a49      	ldr	r2, [pc, #292]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000afe:	4b47      	ldr	r3, [pc, #284]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000b1c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b26:	4619      	mov	r1, r3
 8000b28:	483d      	ldr	r0, [pc, #244]	@ (8000c20 <SDRAM_MspInit+0x20c>)
 8000b2a:	f000 fe37 	bl	800179c <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000b2e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000b34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b38:	4619      	mov	r1, r3
 8000b3a:	483a      	ldr	r0, [pc, #232]	@ (8000c24 <SDRAM_MspInit+0x210>)
 8000b3c:	f000 fe2e 	bl	800179c <HAL_GPIO_Init>
  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000b40:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000b46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4836      	ldr	r0, [pc, #216]	@ (8000c28 <SDRAM_MspInit+0x214>)
 8000b4e:	f000 fe25 	bl	800179c <HAL_GPIO_Init>
  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8000b52:	f248 1337 	movw	r3, #33079	@ 0x8137
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4833      	ldr	r0, [pc, #204]	@ (8000c2c <SDRAM_MspInit+0x218>)
 8000b60:	f000 fe1c 	bl	800179c <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8000b64:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000b6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6e:	4619      	mov	r1, r3
 8000b70:	482f      	ldr	r0, [pc, #188]	@ (8000c30 <SDRAM_MspInit+0x21c>)
 8000b72:	f000 fe13 	bl	800179c <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8000b76:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8000b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;

  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000b7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b80:	4619      	mov	r1, r3
 8000b82:	482c      	ldr	r0, [pc, #176]	@ (8000c34 <SDRAM_MspInit+0x220>)
 8000b84:	f000 fe0a 	bl	800179c <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8000b88:	4b2b      	ldr	r3, [pc, #172]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000b8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b8e:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8000b90:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b96:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8000b98:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000b9a:	2280      	movs	r2, #128	@ 0x80
 8000b9c:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000b9e:	4b26      	ldr	r3, [pc, #152]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8000ba4:	4b24      	ldr	r3, [pc, #144]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000ba6:	f240 2202 	movw	r2, #514	@ 0x202
 8000baa:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bae:	f640 0208 	movw	r2, #2056	@ 0x808
 8000bb2:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8000bb4:	4b20      	ldr	r3, [pc, #128]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bbc:	2280      	movs	r2, #128	@ 0x80
 8000bbe:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bc6:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bd6:	2280      	movs	r2, #128	@ 0x80
 8000bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	639a      	str	r2, [r3, #56]	@ 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000be8:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <SDRAM_MspInit+0x228>)
 8000bea:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bf0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bf2:	4a11      	ldr	r2, [pc, #68]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8000bf8:	480f      	ldr	r0, [pc, #60]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bfa:	f002 fe81 	bl	8003900 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8000bfe:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000c00:	f002 fe32 	bl	8003868 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	210f      	movs	r1, #15
 8000c08:	207a      	movs	r0, #122	@ 0x7a
 8000c0a:	f000 fa4e 	bl	80010aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8000c0e:	207a      	movs	r0, #122	@ 0x7a
 8000c10:	f000 fa65 	bl	80010de <HAL_NVIC_EnableIRQ>
}
 8000c14:	bf00      	nop
 8000c16:	3740      	adds	r7, #64	@ 0x40
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58020c00 	.word	0x58020c00
 8000c24:	58021000 	.word	0x58021000
 8000c28:	58021400 	.word	0x58021400
 8000c2c:	58021800 	.word	0x58021800
 8000c30:	58021c00 	.word	0x58021c00
 8000c34:	58022000 	.word	0x58022000
 8000c38:	2000015c 	.word	0x2000015c
 8000c3c:	52000040 	.word	0x52000040

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c44:	4b37      	ldr	r3, [pc, #220]	@ (8000d24 <SystemInit+0xe4>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4a:	4a36      	ldr	r2, [pc, #216]	@ (8000d24 <SystemInit+0xe4>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c54:	4b34      	ldr	r3, [pc, #208]	@ (8000d28 <SystemInit+0xe8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	2b06      	cmp	r3, #6
 8000c5e:	d807      	bhi.n	8000c70 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c60:	4b31      	ldr	r3, [pc, #196]	@ (8000d28 <SystemInit+0xe8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f023 030f 	bic.w	r3, r3, #15
 8000c68:	4a2f      	ldr	r2, [pc, #188]	@ (8000d28 <SystemInit+0xe8>)
 8000c6a:	f043 0307 	orr.w	r3, r3, #7
 8000c6e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c70:	4b2e      	ldr	r3, [pc, #184]	@ (8000d2c <SystemInit+0xec>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a2d      	ldr	r2, [pc, #180]	@ (8000d2c <SystemInit+0xec>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d2c <SystemInit+0xec>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c82:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <SystemInit+0xec>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4929      	ldr	r1, [pc, #164]	@ (8000d2c <SystemInit+0xec>)
 8000c88:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <SystemInit+0xf0>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c8e:	4b26      	ldr	r3, [pc, #152]	@ (8000d28 <SystemInit+0xe8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d007      	beq.n	8000caa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c9a:	4b23      	ldr	r3, [pc, #140]	@ (8000d28 <SystemInit+0xe8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 030f 	bic.w	r3, r3, #15
 8000ca2:	4a21      	ldr	r2, [pc, #132]	@ (8000d28 <SystemInit+0xe8>)
 8000ca4:	f043 0307 	orr.w	r3, r3, #7
 8000ca8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <SystemInit+0xec>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <SystemInit+0xec>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <SystemInit+0xec>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <SystemInit+0xec>)
 8000cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8000d34 <SystemInit+0xf4>)
 8000cc0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <SystemInit+0xec>)
 8000cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d38 <SystemInit+0xf8>)
 8000cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <SystemInit+0xec>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	@ (8000d3c <SystemInit+0xfc>)
 8000ccc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <SystemInit+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <SystemInit+0xec>)
 8000cd6:	4a19      	ldr	r2, [pc, #100]	@ (8000d3c <SystemInit+0xfc>)
 8000cd8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cda:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <SystemInit+0xec>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <SystemInit+0xec>)
 8000ce2:	4a16      	ldr	r2, [pc, #88]	@ (8000d3c <SystemInit+0xfc>)
 8000ce4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <SystemInit+0xec>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <SystemInit+0xec>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <SystemInit+0xec>)
 8000cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cf6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <SystemInit+0xec>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <SystemInit+0x100>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <SystemInit+0x104>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d0a:	d202      	bcs.n	8000d12 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <SystemInit+0x108>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <SystemInit+0x10c>)
 8000d14:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	52002000 	.word	0x52002000
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d34:	02020200 	.word	0x02020200
 8000d38:	01ff0000 	.word	0x01ff0000
 8000d3c:	01010280 	.word	0x01010280
 8000d40:	5c001000 	.word	0x5c001000
 8000d44:	ffff0000 	.word	0xffff0000
 8000d48:	51008108 	.word	0x51008108
 8000d4c:	52004000 	.word	0x52004000

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d56:	2003      	movs	r0, #3
 8000d58:	f000 f99c 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d5c:	f003 ff9e 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8000d60:	4602      	mov	r2, r0
 8000d62:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <HAL_Init+0x68>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	0a1b      	lsrs	r3, r3, #8
 8000d68:	f003 030f 	and.w	r3, r3, #15
 8000d6c:	4913      	ldr	r1, [pc, #76]	@ (8000dbc <HAL_Init+0x6c>)
 8000d6e:	5ccb      	ldrb	r3, [r1, r3]
 8000d70:	f003 031f 	and.w	r3, r3, #31
 8000d74:	fa22 f303 	lsr.w	r3, r2, r3
 8000d78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_Init+0x68>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	4a0e      	ldr	r2, [pc, #56]	@ (8000dbc <HAL_Init+0x6c>)
 8000d84:	5cd3      	ldrb	r3, [r2, r3]
 8000d86:	f003 031f 	and.w	r3, r3, #31
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d90:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc0 <HAL_Init+0x70>)
 8000d92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d94:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <HAL_Init+0x74>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 f814 	bl	8000dc8 <HAL_InitTick>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e002      	b.n	8000db0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000daa:	f003 f905 	bl	8003fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	58024400 	.word	0x58024400
 8000dbc:	08010c4c 	.word	0x08010c4c
 8000dc0:	20000004 	.word	0x20000004
 8000dc4:	20000000 	.word	0x20000000

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <HAL_InitTick+0x60>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e021      	b.n	8000e20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <HAL_InitTick+0x64>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <HAL_InitTick+0x60>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f981 	bl	80010fa <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f94b 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <HAL_InitTick+0x68>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2000000c 	.word	0x2000000c
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000008 	.word	0x20000008

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	200001c8 	.word	0x200001c8

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200001c8 	.word	0x200001c8

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff ffee 	bl	8000e5c <HAL_GetTick>
 8000e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9a:	bf00      	nop
 8000e9c:	f7ff ffde 	bl	8000e5c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000000c 	.word	0x2000000c

08000ebc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ec0:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <HAL_GetREVID+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	0c1b      	lsrs	r3, r3, #16
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	5c001000 	.word	0x5c001000

08000ed4 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <HAL_EnableCompensationCell+0x1c>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_EnableCompensationCell+0x1c>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6213      	str	r3, [r2, #32]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	58000400 	.word	0x58000400

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x40>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x40>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00
 8000f38:	05fa0000 	.word	0x05fa0000

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	@ (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	@ (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	@ (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	@ 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	@ 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff29 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff40 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff90 	bl	8000fe8 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5f 	bl	8000f94 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff33 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa4 	bl	8001050 <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001118:	f3bf 8f5f 	dmb	sy
}
 800111c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <HAL_MPU_Disable+0x28>)
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_MPU_Disable+0x28>)
 8001124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001128:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800112a:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_MPU_Disable+0x2c>)
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00
 8001140:	e000ed90 	.word	0xe000ed90

08001144 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800114c:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <HAL_MPU_Enable+0x38>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_MPU_Enable+0x3c>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115a:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <HAL_MPU_Enable+0x3c>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001160:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001162:	f3bf 8f4f 	dsb	sy
}
 8001166:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001168:	f3bf 8f6f 	isb	sy
}
 800116c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed90 	.word	0xe000ed90
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	785a      	ldrb	r2, [r3, #1]
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 8001192:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 800119a:	f023 0301 	bic.w	r3, r3, #1
 800119e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80011a0:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7b1b      	ldrb	r3, [r3, #12]
 80011ac:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7adb      	ldrb	r3, [r3, #11]
 80011b2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7a9b      	ldrb	r3, [r3, #10]
 80011ba:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7b5b      	ldrb	r3, [r3, #13]
 80011c2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7b9b      	ldrb	r3, [r3, #14]
 80011ca:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7bdb      	ldrb	r3, [r3, #15]
 80011d2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7a5b      	ldrb	r3, [r3, #9]
 80011da:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7a1b      	ldrb	r3, [r3, #8]
 80011e2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011e4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011ec:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011ee:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011f0:	6113      	str	r3, [r2, #16]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed90 	.word	0xe000ed90

08001204 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e04f      	b.n	80012b6 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f00c f95e 	bl	800d4ec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2202      	movs	r2, #2
 8001234:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <HAL_DMA2D_Init+0xbc>)
 8001240:	4013      	ands	r3, r2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6851      	ldr	r1, [r2, #4]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	69d2      	ldr	r2, [r2, #28]
 800124a:	4311      	orrs	r1, r2
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	430b      	orrs	r3, r1
 8001252:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <HAL_DMA2D_Init+0xc0>)
 800125c:	4013      	ands	r3, r2
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	6891      	ldr	r1, [r2, #8]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6992      	ldr	r2, [r2, #24]
 8001266:	4311      	orrs	r1, r2
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	430b      	orrs	r3, r1
 800126e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001276:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <HAL_DMA2D_Init+0xc4>)
 8001278:	4013      	ands	r3, r2
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68d1      	ldr	r1, [r2, #12]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	430b      	orrs	r3, r1
 8001284:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800128c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	051a      	lsls	r2, r3, #20
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	055b      	lsls	r3, r3, #21
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	fff8ffbf 	.word	0xfff8ffbf
 80012c4:	fffffef8 	.word	0xfffffef8
 80012c8:	ffff0000 	.word	0xffff0000

080012cc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_DMA2D_Start+0x1c>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e018      	b.n	800131a <HAL_DMA2D_Start+0x4e>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2202      	movs	r2, #2
 80012f4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f000 f9a4 	bl	8001650 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d056      	beq.n	80013ec <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800133e:	f7ff fd8d 	bl	8000e5c <HAL_GetTick>
 8001342:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001344:	e04b      	b.n	80013de <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8001354:	2b00      	cmp	r3, #0
 8001356:	d023      	beq.n	80013a0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001366:	f043 0202 	orr.w	r2, r3, #2
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2221      	movs	r2, #33	@ 0x21
 800138a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2204      	movs	r2, #4
 8001390:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0a5      	b.n	80014ec <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a6:	d01a      	beq.n	80013de <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80013a8:	f7ff fd58 	bl	8000e5c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d302      	bcc.n	80013be <HAL_DMA2D_PollForTransfer+0x9c>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10f      	bne.n	80013de <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80013c2:	f043 0220 	orr.w	r2, r3, #32
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2203      	movs	r2, #3
 80013ce:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e086      	b.n	80014ec <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0ac      	beq.n	8001346 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 0320 	and.w	r3, r3, #32
 80013f6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fe:	f003 0320 	and.w	r3, r3, #32
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d061      	beq.n	80014d2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800140e:	f7ff fd25 	bl	8000e5c <HAL_GetTick>
 8001412:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001414:	e056      	b.n	80014c4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8001424:	2b00      	cmp	r3, #0
 8001426:	d02e      	beq.n	8001486 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001436:	f043 0204 	orr.w	r2, r3, #4
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800144c:	f043 0202 	orr.w	r2, r3, #2
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001462:	f043 0201 	orr.w	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2229      	movs	r2, #41	@ 0x29
 8001470:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2204      	movs	r2, #4
 8001476:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e032      	b.n	80014ec <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d01a      	beq.n	80014c4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800148e:	f7ff fce5 	bl	8000e5c <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d302      	bcc.n	80014a4 <HAL_DMA2D_PollForTransfer+0x182>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10f      	bne.n	80014c4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014a8:	f043 0220 	orr.w	r2, r3, #32
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2203      	movs	r2, #3
 80014b4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e013      	b.n	80014ec <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0a1      	beq.n	8001416 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2212      	movs	r2, #18
 80014d8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_DMA2D_ConfigLayer+0x24>
 8001514:	2302      	movs	r3, #2
 8001516:	e092      	b.n	800163e <HAL_DMA2D_ConfigLayer+0x14a>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2202      	movs	r2, #2
 8001524:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	3328      	adds	r3, #40	@ 0x28
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	041b      	lsls	r3, r3, #16
 8001544:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800154c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8001558:	4b3c      	ldr	r3, [pc, #240]	@ (800164c <HAL_DMA2D_ConfigLayer+0x158>)
 800155a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b0a      	cmp	r3, #10
 8001562:	d003      	beq.n	800156c <HAL_DMA2D_ConfigLayer+0x78>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b09      	cmp	r3, #9
 800156a:	d107      	bne.n	800157c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	e005      	b.n	8001588 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	061b      	lsls	r3, r3, #24
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d120      	bne.n	80015d0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	43db      	mvns	r3, r3
 8001598:	ea02 0103 	and.w	r1, r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b0a      	cmp	r3, #10
 80015b6:	d003      	beq.n	80015c0 <HAL_DMA2D_ConfigLayer+0xcc>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b09      	cmp	r3, #9
 80015be:	d135      	bne.n	800162c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80015ce:	e02d      	b.n	800162c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b0b      	cmp	r3, #11
 80015d6:	d109      	bne.n	80015ec <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	049b      	lsls	r3, r3, #18
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80015ea:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	69da      	ldr	r2, [r3, #28]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	ea02 0103 	and.w	r1, r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	430a      	orrs	r2, r1
 8001602:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b0a      	cmp	r3, #10
 8001614:	d003      	beq.n	800161e <HAL_DMA2D_ConfigLayer+0x12a>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b09      	cmp	r3, #9
 800161c:	d106      	bne.n	800162c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800162a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	ff33000f 	.word	0xff33000f

08001650 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001650:	b480      	push	{r7}
 8001652:	b08b      	sub	sp, #44	@ 0x2c
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001664:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	041a      	lsls	r2, r3, #16
 800166c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800166e:	431a      	orrs	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001688:	d174      	bne.n	8001774 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001690:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001698:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80016a0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d108      	bne.n	80016c2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	431a      	orrs	r2, r3
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c0:	e053      	b.n	800176a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d106      	bne.n	80016d8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d6:	e048      	b.n	800176a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d111      	bne.n	8001704 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	0cdb      	lsrs	r3, r3, #19
 80016e4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	0a9b      	lsrs	r3, r3, #10
 80016ea:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	015a      	lsls	r2, r3, #5
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	02db      	lsls	r3, r3, #11
 80016fa:	4313      	orrs	r3, r2
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	4313      	orrs	r3, r2
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
 8001702:	e032      	b.n	800176a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d117      	bne.n	800173c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	0fdb      	lsrs	r3, r3, #31
 8001710:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	0cdb      	lsrs	r3, r3, #19
 8001716:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	0adb      	lsrs	r3, r3, #11
 800171c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	015a      	lsls	r2, r3, #5
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	431a      	orrs	r2, r3
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	03db      	lsls	r3, r3, #15
 8001732:	4313      	orrs	r3, r2
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	4313      	orrs	r3, r2
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
 800173a:	e016      	b.n	800176a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	0f1b      	lsrs	r3, r3, #28
 8001740:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	0d1b      	lsrs	r3, r3, #20
 8001746:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	0b1b      	lsrs	r3, r3, #12
 800174c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	011a      	lsls	r2, r3, #4
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	431a      	orrs	r2, r3
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	031b      	lsls	r3, r3, #12
 8001762:	4313      	orrs	r3, r2
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	4313      	orrs	r3, r2
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001770:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001772:	e00d      	b.n	8001790 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800177c:	d104      	bne.n	8001788 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	615a      	str	r2, [r3, #20]
}
 8001786:	e003      	b.n	8001790 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	60da      	str	r2, [r3, #12]
}
 8001790:	bf00      	nop
 8001792:	372c      	adds	r7, #44	@ 0x2c
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017aa:	4b89      	ldr	r3, [pc, #548]	@ (80019d0 <HAL_GPIO_Init+0x234>)
 80017ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017ae:	e194      	b.n	8001ada <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8186 	beq.w	8001ad4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d005      	beq.n	80017e0 <HAL_GPIO_Init+0x44>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d130      	bne.n	8001842 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001816:	2201      	movs	r2, #1
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f003 0201 	and.w	r2, r3, #1
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b03      	cmp	r3, #3
 800184c:	d017      	beq.n	800187e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d123      	bne.n	80018d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	220f      	movs	r2, #15
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	69b9      	ldr	r1, [r7, #24]
 80018ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0203 	and.w	r2, r3, #3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80e0 	beq.w	8001ad4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001914:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <HAL_GPIO_Init+0x238>)
 8001916:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800191a:	4a2e      	ldr	r2, [pc, #184]	@ (80019d4 <HAL_GPIO_Init+0x238>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001924:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <HAL_GPIO_Init+0x238>)
 8001926:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001932:	4a29      	ldr	r2, [pc, #164]	@ (80019d8 <HAL_GPIO_Init+0x23c>)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	220f      	movs	r2, #15
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a20      	ldr	r2, [pc, #128]	@ (80019dc <HAL_GPIO_Init+0x240>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d052      	beq.n	8001a04 <HAL_GPIO_Init+0x268>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a1f      	ldr	r2, [pc, #124]	@ (80019e0 <HAL_GPIO_Init+0x244>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <HAL_GPIO_Init+0x22e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a1e      	ldr	r2, [pc, #120]	@ (80019e4 <HAL_GPIO_Init+0x248>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d02b      	beq.n	80019c6 <HAL_GPIO_Init+0x22a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a1d      	ldr	r2, [pc, #116]	@ (80019e8 <HAL_GPIO_Init+0x24c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d025      	beq.n	80019c2 <HAL_GPIO_Init+0x226>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a1c      	ldr	r2, [pc, #112]	@ (80019ec <HAL_GPIO_Init+0x250>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d01f      	beq.n	80019be <HAL_GPIO_Init+0x222>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a1b      	ldr	r2, [pc, #108]	@ (80019f0 <HAL_GPIO_Init+0x254>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d019      	beq.n	80019ba <HAL_GPIO_Init+0x21e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a1a      	ldr	r2, [pc, #104]	@ (80019f4 <HAL_GPIO_Init+0x258>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0x21a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <HAL_GPIO_Init+0x25c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00d      	beq.n	80019b2 <HAL_GPIO_Init+0x216>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a18      	ldr	r2, [pc, #96]	@ (80019fc <HAL_GPIO_Init+0x260>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_GPIO_Init+0x212>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <HAL_GPIO_Init+0x264>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_GPIO_Init+0x20e>
 80019a6:	2309      	movs	r3, #9
 80019a8:	e02d      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019aa:	230a      	movs	r3, #10
 80019ac:	e02b      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ae:	2308      	movs	r3, #8
 80019b0:	e029      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019b2:	2307      	movs	r3, #7
 80019b4:	e027      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019b6:	2306      	movs	r3, #6
 80019b8:	e025      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ba:	2305      	movs	r3, #5
 80019bc:	e023      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019be:	2304      	movs	r3, #4
 80019c0:	e021      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019c2:	2303      	movs	r3, #3
 80019c4:	e01f      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e01d      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e01b      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ce:	bf00      	nop
 80019d0:	58000080 	.word	0x58000080
 80019d4:	58024400 	.word	0x58024400
 80019d8:	58000400 	.word	0x58000400
 80019dc:	58020000 	.word	0x58020000
 80019e0:	58020400 	.word	0x58020400
 80019e4:	58020800 	.word	0x58020800
 80019e8:	58020c00 	.word	0x58020c00
 80019ec:	58021000 	.word	0x58021000
 80019f0:	58021400 	.word	0x58021400
 80019f4:	58021800 	.word	0x58021800
 80019f8:	58021c00 	.word	0x58021c00
 80019fc:	58022000 	.word	0x58022000
 8001a00:	58022400 	.word	0x58022400
 8001a04:	2300      	movs	r3, #0
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	f002 0203 	and.w	r2, r2, #3
 8001a0c:	0092      	lsls	r2, r2, #2
 8001a0e:	4093      	lsls	r3, r2
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a16:	4938      	ldr	r1, [pc, #224]	@ (8001af8 <HAL_GPIO_Init+0x35c>)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f47f ae63 	bne.w	80017b0 <HAL_GPIO_Init+0x14>
  }
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	3724      	adds	r7, #36	@ 0x24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	58000400 	.word	0x58000400

08001afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e001      	b.n	8001b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b3c:	787b      	ldrb	r3, [r7, #1]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b48:	e003      	b.n	8001b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	041a      	lsls	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	619a      	str	r2, [r3, #24]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e070      	b.n	8001c54 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f00b fb68 	bl	800d25c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8001bc2:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001be2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8001bf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a19      	ldr	r2, [pc, #100]	@ (8001c5c <HAL_JPEG_Init+0xfc>)
 8001bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a18      	ldr	r2, [pc, #96]	@ (8001c60 <HAL_JPEG_Init+0x100>)
 8001bfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fcdb 	bl	80025c8 <JPEG_Set_HuffEnc_Mem>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e018      	b.n	8001c54 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c30:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	08010e3c 	.word	0x08010e3c
 8001c60:	08010e7c 	.word	0x08010e7c

08001c64 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_JPEG_GetInfo+0x16>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e083      	b.n	8001d86 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d103      	bne.n	8001c94 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2210      	movs	r2, #16
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e017      	b.n	8001cc4 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d103      	bne.n	8001caa <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e00c      	b.n	8001cc4 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d103      	bne.n	8001cc0 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2230      	movs	r2, #48	@ 0x30
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	e001      	b.n	8001cc4 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e060      	b.n	8001d86 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b10      	cmp	r3, #16
 8001ce6:	d003      	beq.n	8001cf0 <HAL_JPEG_GetInfo+0x8c>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b30      	cmp	r3, #48	@ 0x30
 8001cee:	d140      	bne.n	8001d72 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d109      	bne.n	8001d34 <HAL_JPEG_GetInfo+0xd0>
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_JPEG_GetInfo+0xd0>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d103      	bne.n	8001d34 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	e01d      	b.n	8001d70 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d109      	bne.n	8001d4e <HAL_JPEG_GetInfo+0xea>
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d106      	bne.n	8001d4e <HAL_JPEG_GetInfo+0xea>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d103      	bne.n	8001d4e <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	e010      	b.n	8001d70 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d109      	bne.n	8001d68 <HAL_JPEG_GetInfo+0x104>
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_JPEG_GetInfo+0x104>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d103      	bne.n	8001d68 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	e003      	b.n	8001d70 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001d6e:	e003      	b.n	8001d78 <HAL_JPEG_GetInfo+0x114>
 8001d70:	e002      	b.n	8001d78 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2200      	movs	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f001 fd17 	bl	80037ac <JPEG_GetQuality>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_JPEG_Decode_DMA+0x20>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_JPEG_Decode_DMA+0x20>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e04c      	b.n	8001e4c <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_JPEG_Decode_DMA+0x32>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e045      	b.n	8001e4c <HAL_JPEG_Decode_DMA+0xbe>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d134      	bne.n	8001e3e <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de0:	f023 020f 	bic.w	r2, r3, #15
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dec:	f043 020e 	orr.w	r2, r3, #14
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 fe57 	bl	8002acc <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f001 f978 	bl	8003114 <JPEG_DMA_StartProcess>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00f      	beq.n	8001e4a <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2206      	movs	r2, #6
 8001e2e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e006      	b.n	8001e4c <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8001e46:	2302      	movs	r3, #2
 8001e48:	e000      	b.n	8001e4c <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b0c      	cmp	r3, #12
 8001e6c:	d116      	bne.n	8001e9c <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d033      	beq.n	8001ef6 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e92:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	655a      	str	r2, [r3, #84]	@ 0x54
 8001e9a:	e02c      	b.n	8001ef6 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d126      	bne.n	8001ef6 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d009      	beq.n	8001ec6 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f043 0306 	orr.w	r3, r3, #6
 8001ec4:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001ee2:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	43da      	mvns	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3b03      	subs	r3, #3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d813      	bhi.n	8001f9e <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d103      	bne.n	8001f8a <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fe16 	bl	8002bb4 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8001f88:	e00b      	b.n	8001fa2 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d105      	bne.n	8001fa2 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f001 f956 	bl	8003248 <JPEG_DMA_ContinueProcess>
      break;
 8001f9c:	e001      	b.n	8001fa2 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8001f9e:	bf00      	nop
 8001fa0:	e000      	b.n	8001fa4 <HAL_JPEG_IRQHandler+0x44>
      break;
 8001fa2:	bf00      	nop
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b08b      	sub	sp, #44	@ 0x2c
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	e020      	b.n	8002006 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	4413      	add	r3, r2
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8001fce:	6a3a      	ldr	r2, [r7, #32]
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fd8:	d90f      	bls.n	8001ffa <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e055      	b.n	800208a <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3201      	adds	r2, #1
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]
      p++;
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	623b      	str	r3, [r7, #32]
      i--;
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1ee      	bne.n	8001fde <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	3301      	adds	r3, #1
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d9db      	bls.n	8001fc4 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	4413      	add	r3, r2
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6a3a      	ldr	r2, [r7, #32]
 800201a:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	617b      	str	r3, [r7, #20]
  p = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800202a:	e027      	b.n	800207c <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	601a      	str	r2, [r3, #0]
      p++;
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	3301      	adds	r3, #1
 800203c:	623b      	str	r3, [r7, #32]
      code++;
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	3301      	adds	r3, #1
 8002042:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	4413      	add	r3, r2
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	4293      	cmp	r3, r2
 8002052:	d0eb      	beq.n	800202c <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b1f      	cmp	r3, #31
 8002058:	d901      	bls.n	800205e <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e015      	b.n	800208a <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800205e:	2201      	movs	r2, #1
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	429a      	cmp	r2, r3
 800206a:	d301      	bcc.n	8002070 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e00c      	b.n	800208a <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
    si++;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	4413      	add	r3, r2
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1dd      	bne.n	8002044 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	372c      	adds	r7, #44	@ 0x2c
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800209c:	af00      	add	r7, sp, #0
 800209e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80020a2:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80020a6:	6018      	str	r0, [r3, #0]
 80020a8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80020ac:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80020b0:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80020b2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80020b6:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	f107 020c 	add.w	r2, r7, #12
 80020c4:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80020c8:	f7ff ff70 	bl	8001fac <JPEG_Bits_To_SizeCodes>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 80020d2:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80020da:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 80020de:	e075      	b.n	80021cc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 80020e6:	e067      	b.n	80021b8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80020e8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80020ec:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80020f6:	4413      	add	r3, r2
 80020f8:	3310      	adds	r3, #16
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8002100:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8002108:	23a0      	movs	r3, #160	@ 0xa0
 800210a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800210e:	e021      	b.n	8002154 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8002110:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002114:	2bf0      	cmp	r3, #240	@ 0xf0
 8002116:	d103      	bne.n	8002120 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8002118:	23a1      	movs	r3, #161	@ 0xa1
 800211a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800211e:	e019      	b.n	8002154 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8002120:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 800212e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800213a:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	461a      	mov	r2, r3
 8002148:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800214c:	4413      	add	r3, r2
 800214e:	3b01      	subs	r3, #1
 8002150:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8002154:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002158:	2ba1      	cmp	r3, #161	@ 0xa1
 800215a:	d901      	bls.n	8002160 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800215c:	2301      	movs	r3, #1
 800215e:	e035      	b.n	80021cc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002160:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002164:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002168:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800216c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002170:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002174:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800217e:	3328      	adds	r3, #40	@ 0x28
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002186:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800218a:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800218e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8002192:	4413      	add	r3, r2
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	3b01      	subs	r3, #1
 8002198:	b2d9      	uxtb	r1, r3
 800219a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800219e:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80021a8:	4413      	add	r3, r2
 80021aa:	460a      	mov	r2, r1
 80021ac:	701a      	strb	r2, [r3, #0]
      k++;
 80021ae:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80021b2:	3301      	adds	r3, #1
 80021b4:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 80021b8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80021bc:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d38e      	bcc.n	80020e8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 80021dc:	af00      	add	r7, sp, #0
 80021de:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80021e2:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80021e6:	6018      	str	r0, [r3, #0]
 80021e8:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80021ec:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80021f0:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80021f2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80021f6:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8002200:	f107 0208 	add.w	r2, r7, #8
 8002204:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 8002208:	f7ff fed0 	bl	8001fac <JPEG_Bits_To_SizeCodes>
 800220c:	4603      	mov	r3, r0
 800220e:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8002212:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800221a:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800221e:	e048      	b.n	80022b2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 8002226:	e03d      	b.n	80022a4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8002228:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800222c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8002236:	4413      	add	r3, r2
 8002238:	3310      	adds	r3, #16
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8002240:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002244:	2b0b      	cmp	r3, #11
 8002246:	d901      	bls.n	800224c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002248:	2301      	movs	r3, #1
 800224a:	e032      	b.n	80022b2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800224c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002250:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8002254:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8002258:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800225c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002260:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002264:	6819      	ldr	r1, [r3, #0]
 8002266:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800226a:	3302      	adds	r3, #2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8002272:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002276:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800227a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800227e:	4413      	add	r3, r2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3b01      	subs	r3, #1
 8002284:	b2d9      	uxtb	r1, r3
 8002286:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800228a:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002294:	4413      	add	r3, r2
 8002296:	460a      	mov	r2, r1
 8002298:	701a      	strb	r2, [r3, #0]
      k++;
 800229a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800229e:	3301      	adds	r3, #1
 80022a0:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 80022a4:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 80022a8:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d3bb      	bcc.n	8002228 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b09a      	sub	sp, #104	@ 0x68
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d106      	bne.n	80022e4 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 80022de:	3318      	adds	r3, #24
 80022e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80022e2:	e00f      	b.n	8002304 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d106      	bne.n	8002300 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 80022fa:	3318      	adds	r3, #24
 80022fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80022fe:	e001      	b.n	8002304 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e059      	b.n	80023b8 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d055      	beq.n	80023b6 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	68b8      	ldr	r0, [r7, #8]
 8002312:	f7ff ff60 	bl	80021d6 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8002316:	4603      	mov	r3, r0
 8002318:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800231c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8002324:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002328:	e046      	b.n	80023b8 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800232a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800232c:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800232e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002330:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002334:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002338:	3304      	adds	r3, #4
 800233a:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800233c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800233e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002342:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8002344:	230c      	movs	r3, #12
 8002346:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 8002348:	e032      	b.n	80023b0 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800234a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800234c:	3b01      	subs	r3, #1
 800234e:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8002350:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002352:	3b04      	subs	r3, #4
 8002354:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002356:	f107 0214 	add.w	r2, r7, #20
 800235a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800235c:	4413      	add	r3, r2
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002366:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002368:	3302      	adds	r3, #2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	3368      	adds	r3, #104	@ 0x68
 800236e:	443b      	add	r3, r7
 8002370:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	4313      	orrs	r3, r2
 8002378:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800237a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800237c:	3b01      	subs	r3, #1
 800237e:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8002380:	f107 0214 	add.w	r2, r7, #20
 8002384:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002386:	4413      	add	r3, r2
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002392:	3302      	adds	r3, #2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	3368      	adds	r3, #104	@ 0x68
 8002398:	443b      	add	r3, r7
 800239a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	4313      	orrs	r3, r2
 80023a2:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80023a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023a6:	041a      	lsls	r2, r3, #16
 80023a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023aa:	431a      	orrs	r2, r3
 80023ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023ae:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80023b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d8c9      	bhi.n	800234a <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3768      	adds	r7, #104	@ 0x68
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80023cc:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80023d0:	6018      	str	r0, [r3, #0]
 80023d2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80023d6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80023da:	6019      	str	r1, [r3, #0]
 80023dc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80023e0:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80023e4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80023e6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80023ea:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023f6:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80023fa:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d10c      	bne.n	800241e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002404:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002408:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002414:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002418:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800241c:	e01d      	b.n	800245a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800241e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002422:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800242e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8002432:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d10c      	bne.n	8002456 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800243c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002440:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800244c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002450:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8002454:	e001      	b.n	800245a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0a8      	b.n	80025ac <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800245a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800245e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a0 	beq.w	80025aa <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800246a:	f107 0214 	add.w	r2, r7, #20
 800246e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002472:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002476:	4611      	mov	r1, r2
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	f7ff fe0c 	bl	8002096 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800247e:	4603      	mov	r3, r0
 8002480:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 8002484:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800248c:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 8002490:	e08c      	b.n	80025ac <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8002492:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002496:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80024a0:	e00e      	b.n	80024c0 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 80024a2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024a6:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80024aa:	601a      	str	r2, [r3, #0]
      addressDef++;
 80024ac:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024b0:	3304      	adds	r3, #4
 80024b2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80024b6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80024ba:	3301      	adds	r3, #1
 80024bc:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80024c0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d9ec      	bls.n	80024a2 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 80024c8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024cc:	4a3a      	ldr	r2, [pc, #232]	@ (80025b8 <JPEG_Set_HuffAC_Mem+0x1f8>)
 80024ce:	601a      	str	r2, [r3, #0]
    addressDef++;
 80024d0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024d4:	3304      	adds	r3, #4
 80024d6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 80024da:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024de:	4a37      	ldr	r2, [pc, #220]	@ (80025bc <JPEG_Set_HuffAC_Mem+0x1fc>)
 80024e0:	601a      	str	r2, [r3, #0]
    addressDef++;
 80024e2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024e6:	3304      	adds	r3, #4
 80024e8:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 80024ec:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024f0:	4a33      	ldr	r2, [pc, #204]	@ (80025c0 <JPEG_Set_HuffAC_Mem+0x200>)
 80024f2:	601a      	str	r2, [r3, #0]
    addressDef++;
 80024f4:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024f8:	3304      	adds	r3, #4
 80024fa:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 80024fe:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002502:	4a30      	ldr	r2, [pc, #192]	@ (80025c4 <JPEG_Set_HuffAC_Mem+0x204>)
 8002504:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8002506:	23a2      	movs	r3, #162	@ 0xa2
 8002508:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 800250c:	e049      	b.n	80025a2 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800250e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002512:	3b01      	subs	r3, #1
 8002514:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 8002518:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800251c:	3b04      	subs	r3, #4
 800251e:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002522:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002526:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800252a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800252e:	4413      	add	r3, r2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	021b      	lsls	r3, r3, #8
 8002534:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002538:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800253c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8002540:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002544:	3328      	adds	r3, #40	@ 0x28
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8002554:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002558:	3b01      	subs	r3, #1
 800255a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800255e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002562:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8002566:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800256a:	4413      	add	r3, r2
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002574:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002578:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800257c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002580:	3328      	adds	r3, #40	@ 0x28
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8002590:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8002594:	041a      	lsls	r2, r3, #16
 8002596:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800259a:	431a      	orrs	r2, r3
 800259c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80025a0:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80025a2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d8b1      	bhi.n	800250e <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	0fd10fd0 	.word	0x0fd10fd0
 80025bc:	0fd30fd2 	.word	0x0fd30fd2
 80025c0:	0fd50fd4 	.word	0x0fd50fd4
 80025c4:	0fd70fd6 	.word	0x0fd70fd6

080025c8 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f84d 	bl	8002670 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80025de:	461a      	mov	r2, r3
 80025e0:	491f      	ldr	r1, [pc, #124]	@ (8002660 <JPEG_Set_HuffEnc_Mem+0x98>)
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff feec 	bl	80023c0 <JPEG_Set_HuffAC_Mem>
 80025e8:	4603      	mov	r3, r0
 80025ea:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
 80025f4:	e030      	b.n	8002658 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80025fe:	461a      	mov	r2, r3
 8002600:	4918      	ldr	r1, [pc, #96]	@ (8002664 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff fedc 	bl	80023c0 <JPEG_Set_HuffAC_Mem>
 8002608:	4603      	mov	r3, r0
 800260a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	e020      	b.n	8002658 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800261e:	461a      	mov	r2, r3
 8002620:	4911      	ldr	r1, [pc, #68]	@ (8002668 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff fe4a 	bl	80022bc <JPEG_Set_HuffDC_Mem>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	e010      	b.n	8002658 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800263e:	461a      	mov	r2, r3
 8002640:	490a      	ldr	r1, [pc, #40]	@ (800266c <JPEG_Set_HuffEnc_Mem+0xa4>)
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fe3a 	bl	80022bc <JPEG_Set_HuffDC_Mem>
 8002648:	4603      	mov	r3, r0
 800264a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	e000      	b.n	8002658 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	08010c94 	.word	0x08010c94
 8002664:	08010d48 	.word	0x08010d48
 8002668:	08010c5c 	.word	0x08010c5c
 800266c:	08010c78 	.word	0x08010c78

08002670 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8002670:	b480      	push	{r7}
 8002672:	b08b      	sub	sp, #44	@ 0x2c
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8002678:	4b80      	ldr	r3, [pc, #512]	@ (800287c <JPEG_Set_Huff_DHTMem+0x20c>)
 800267a:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800267c:	4b80      	ldr	r3, [pc, #512]	@ (8002880 <JPEG_Set_Huff_DHTMem+0x210>)
 800267e:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8002680:	4b80      	ldr	r3, [pc, #512]	@ (8002884 <JPEG_Set_Huff_DHTMem+0x214>)
 8002682:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8002684:	4b80      	ldr	r3, [pc, #512]	@ (8002888 <JPEG_Set_Huff_DHTMem+0x218>)
 8002686:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002690:	330c      	adds	r3, #12
 8002692:	623b      	str	r3, [r7, #32]
  index = 16;
 8002694:	2310      	movs	r3, #16
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002698:	e01d      	b.n	80026d6 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	3b01      	subs	r3, #1
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	3b02      	subs	r3, #2
 80026a8:	6979      	ldr	r1, [r7, #20]
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80026ae:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	3b03      	subs	r3, #3
 80026b4:	6979      	ldr	r1, [r7, #20]
 80026b6:	5ccb      	ldrb	r3, [r1, r3]
 80026b8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80026ba:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80026bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026be:	3a04      	subs	r2, #4
 80026c0:	6979      	ldr	r1, [r7, #20]
 80026c2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80026c4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	601a      	str	r2, [r3, #0]
    address--;
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	3b04      	subs	r3, #4
 80026ce:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	3b04      	subs	r3, #4
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d8de      	bhi.n	800269a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80026e4:	3318      	adds	r3, #24
 80026e6:	623b      	str	r3, [r7, #32]
  index = 12;
 80026e8:	230c      	movs	r3, #12
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80026ec:	e021      	b.n	8002732 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	3b01      	subs	r3, #1
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4413      	add	r3, r2
 80026f6:	7c1b      	ldrb	r3, [r3, #16]
 80026f8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	3b02      	subs	r3, #2
 80026fe:	6979      	ldr	r1, [r7, #20]
 8002700:	440b      	add	r3, r1
 8002702:	7c1b      	ldrb	r3, [r3, #16]
 8002704:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002706:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	3b03      	subs	r3, #3
 800270c:	6979      	ldr	r1, [r7, #20]
 800270e:	440b      	add	r3, r1
 8002710:	7c1b      	ldrb	r3, [r3, #16]
 8002712:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002714:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8002716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002718:	3a04      	subs	r2, #4
 800271a:	6979      	ldr	r1, [r7, #20]
 800271c:	440a      	add	r2, r1
 800271e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002720:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	601a      	str	r2, [r3, #0]
    address--;
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	3b04      	subs	r3, #4
 800272a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	3b04      	subs	r3, #4
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	2b03      	cmp	r3, #3
 8002736:	d8da      	bhi.n	80026ee <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002740:	3328      	adds	r3, #40	@ 0x28
 8002742:	623b      	str	r3, [r7, #32]
  index = 16;
 8002744:	2310      	movs	r3, #16
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002748:	e01d      	b.n	8002786 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	3b01      	subs	r3, #1
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	3b02      	subs	r3, #2
 8002758:	69f9      	ldr	r1, [r7, #28]
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800275e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	3b03      	subs	r3, #3
 8002764:	69f9      	ldr	r1, [r7, #28]
 8002766:	5ccb      	ldrb	r3, [r1, r3]
 8002768:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800276a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800276c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800276e:	3a04      	subs	r2, #4
 8002770:	69f9      	ldr	r1, [r7, #28]
 8002772:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002774:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	601a      	str	r2, [r3, #0]
    address--;
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	3b04      	subs	r3, #4
 800277e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	3b04      	subs	r3, #4
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	2b03      	cmp	r3, #3
 800278a:	d8de      	bhi.n	800274a <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002794:	33cc      	adds	r3, #204	@ 0xcc
 8002796:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b3b      	ldr	r3, [pc, #236]	@ (800288c <JPEG_Set_Huff_DHTMem+0x21c>)
 800279e:	4013      	ands	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80027a8:	021a      	lsls	r2, r3, #8
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
  *address = value;
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	3b04      	subs	r3, #4
 80027c2:	623b      	str	r3, [r7, #32]
  index = 160;
 80027c4:	23a0      	movs	r3, #160	@ 0xa0
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80027c8:	e021      	b.n	800280e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	3b01      	subs	r3, #1
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	7c1b      	ldrb	r3, [r3, #16]
 80027d4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	3b02      	subs	r3, #2
 80027da:	69f9      	ldr	r1, [r7, #28]
 80027dc:	440b      	add	r3, r1
 80027de:	7c1b      	ldrb	r3, [r3, #16]
 80027e0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80027e2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	3b03      	subs	r3, #3
 80027e8:	69f9      	ldr	r1, [r7, #28]
 80027ea:	440b      	add	r3, r1
 80027ec:	7c1b      	ldrb	r3, [r3, #16]
 80027ee:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80027f0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80027f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f4:	3a04      	subs	r2, #4
 80027f6:	69f9      	ldr	r1, [r7, #28]
 80027f8:	440a      	add	r2, r1
 80027fa:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80027fc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	601a      	str	r2, [r3, #0]
    address--;
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	3b04      	subs	r3, #4
 8002806:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	3b04      	subs	r3, #4
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	2b03      	cmp	r3, #3
 8002812:	d8da      	bhi.n	80027ca <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800281c:	33cc      	adds	r3, #204	@ 0xcc
 800281e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	785b      	ldrb	r3, [r3, #1]
 800282c:	061a      	lsls	r2, r3, #24
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	431a      	orrs	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	041b      	lsls	r3, r3, #16
 8002838:	4313      	orrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800284a:	33dc      	adds	r3, #220	@ 0xdc
 800284c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <JPEG_Set_Huff_DHTMem+0x21c>)
 8002854:	4013      	ands	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	7bdb      	ldrb	r3, [r3, #15]
 800285c:	021a      	lsls	r2, r3, #8
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4313      	orrs	r3, r2
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	7b92      	ldrb	r2, [r2, #14]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  *address = value;
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	3b04      	subs	r3, #4
 8002874:	623b      	str	r3, [r7, #32]
  index = 12;
 8002876:	230c      	movs	r3, #12
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800287a:	e027      	b.n	80028cc <JPEG_Set_Huff_DHTMem+0x25c>
 800287c:	08010c94 	.word	0x08010c94
 8002880:	08010d48 	.word	0x08010d48
 8002884:	08010c5c 	.word	0x08010c5c
 8002888:	08010c78 	.word	0x08010c78
 800288c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	3301      	adds	r3, #1
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	5cd3      	ldrb	r3, [r2, r3]
 8002898:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800289a:	6939      	ldr	r1, [r7, #16]
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	440b      	add	r3, r1
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80028a4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	3b01      	subs	r3, #1
 80028aa:	6939      	ldr	r1, [r7, #16]
 80028ac:	5ccb      	ldrb	r3, [r1, r3]
 80028ae:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80028b0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80028b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b4:	3a02      	subs	r2, #2
 80028b6:	6939      	ldr	r1, [r7, #16]
 80028b8:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80028ba:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	601a      	str	r2, [r3, #0]
    address--;
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	3b04      	subs	r3, #4
 80028c4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	3b04      	subs	r3, #4
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80028cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d8de      	bhi.n	8002890 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80028da:	33dc      	adds	r3, #220	@ 0xdc
 80028dc:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	7c5b      	ldrb	r3, [r3, #17]
 80028ea:	061a      	lsls	r2, r3, #24
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	7c1b      	ldrb	r3, [r3, #16]
 80028f4:	041b      	lsls	r3, r3, #16
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002908:	33e8      	adds	r3, #232	@ 0xe8
 800290a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b6d      	ldr	r3, [pc, #436]	@ (8002ac8 <JPEG_Set_Huff_DHTMem+0x458>)
 8002912:	4013      	ands	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	7edb      	ldrb	r3, [r3, #27]
 800291a:	021a      	lsls	r2, r3, #8
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	7e92      	ldrb	r2, [r2, #26]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	3b04      	subs	r3, #4
 8002932:	623b      	str	r3, [r7, #32]
  index = 8;
 8002934:	2308      	movs	r3, #8
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002938:	e021      	b.n	800297e <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	3301      	adds	r3, #1
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	7c1b      	ldrb	r3, [r3, #16]
 8002944:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002946:	6939      	ldr	r1, [r7, #16]
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	440b      	add	r3, r1
 800294c:	3310      	adds	r3, #16
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002952:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	3b01      	subs	r3, #1
 8002958:	6939      	ldr	r1, [r7, #16]
 800295a:	440b      	add	r3, r1
 800295c:	7c1b      	ldrb	r3, [r3, #16]
 800295e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002960:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8002962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002964:	3a02      	subs	r2, #2
 8002966:	6939      	ldr	r1, [r7, #16]
 8002968:	440a      	add	r2, r1
 800296a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800296c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	601a      	str	r2, [r3, #0]
    address--;
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	3b04      	subs	r3, #4
 8002976:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	3b04      	subs	r3, #4
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	2b03      	cmp	r3, #3
 8002982:	d8da      	bhi.n	800293a <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800298c:	33e8      	adds	r3, #232	@ 0xe8
 800298e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	785b      	ldrb	r3, [r3, #1]
 800299c:	061a      	lsls	r2, r3, #24
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	041b      	lsls	r3, r3, #16
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
  *address = value;
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80029ba:	33f8      	adds	r3, #248	@ 0xf8
 80029bc:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b41      	ldr	r3, [pc, #260]	@ (8002ac8 <JPEG_Set_Huff_DHTMem+0x458>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	7bdb      	ldrb	r3, [r3, #15]
 80029cc:	021a      	lsls	r2, r3, #8
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	7b92      	ldrb	r2, [r2, #14]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  *address = value;
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	3b04      	subs	r3, #4
 80029e4:	623b      	str	r3, [r7, #32]
  index = 12;
 80029e6:	230c      	movs	r3, #12
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80029ea:	e01d      	b.n	8002a28 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	3301      	adds	r3, #1
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
 80029f4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80029f6:	69b9      	ldr	r1, [r7, #24]
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	440b      	add	r3, r1
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002a00:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	3b01      	subs	r3, #1
 8002a06:	69b9      	ldr	r1, [r7, #24]
 8002a08:	5ccb      	ldrb	r3, [r1, r3]
 8002a0a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002a0c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a10:	3a02      	subs	r2, #2
 8002a12:	69b9      	ldr	r1, [r7, #24]
 8002a14:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002a16:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	601a      	str	r2, [r3, #0]
    address--;
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	3b04      	subs	r3, #4
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d8de      	bhi.n	80029ec <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002a36:	33f8      	adds	r3, #248	@ 0xf8
 8002a38:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	7c5b      	ldrb	r3, [r3, #17]
 8002a46:	061a      	lsls	r2, r3, #24
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	7c1b      	ldrb	r3, [r3, #16]
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002a64:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002a68:	623b      	str	r3, [r7, #32]
  index = 160;
 8002a6a:	23a0      	movs	r3, #160	@ 0xa0
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a6e:	e021      	b.n	8002ab4 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	3301      	adds	r3, #1
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	7c1b      	ldrb	r3, [r3, #16]
 8002a7a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002a7c:	69b9      	ldr	r1, [r7, #24]
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	440b      	add	r3, r1
 8002a82:	3310      	adds	r3, #16
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002a88:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	69b9      	ldr	r1, [r7, #24]
 8002a90:	440b      	add	r3, r1
 8002a92:	7c1b      	ldrb	r3, [r3, #16]
 8002a94:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002a96:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8002a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9a:	3a02      	subs	r2, #2
 8002a9c:	69b9      	ldr	r1, [r7, #24]
 8002a9e:	440a      	add	r2, r1
 8002aa0:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002aa2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	601a      	str	r2, [r3, #0]
    address--;
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	3b04      	subs	r3, #4
 8002aac:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	3b04      	subs	r3, #4
 8002ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d8da      	bhi.n	8002a70 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8002aba:	bf00      	nop
 8002abc:	bf00      	nop
 8002abe:	372c      	adds	r7, #44	@ 0x2c
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	ffff0000 	.word	0xffff0000

08002acc <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d108      	bne.n	8002afe <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0208 	orr.w	r2, r2, #8
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	e007      	b.n	8002b0e <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0208 	bic.w	r2, r2, #8
 8002b0c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0201 	bic.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002b2c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b4c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002b5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0201 	orr.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d108      	bne.n	8002b8c <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8002b88:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b8a:	e00d      	b.n	8002ba8 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	d107      	bne.n	8002ba8 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002ba6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d125      	bne.n	8002c14 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d01e      	beq.n	8002c14 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff f841 	bl	8001c64 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3304      	adds	r3, #4
 8002bec:	4619      	mov	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f009 f8f0 	bl	800bdd4 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c12:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d116      	bne.n	8002c4e <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002c2e:	2108      	movs	r1, #8
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f988 	bl	8002f46 <JPEG_ReadInputData>
 8002c36:	e00a      	b.n	8002c4e <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8002c46:	2101      	movs	r1, #1
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f97c 	bl	8002f46 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d116      	bne.n	8002c88 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d004      	beq.n	8002c72 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002c68:	2108      	movs	r1, #8
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f864 	bl	8002d38 <JPEG_StoreOutputData>
 8002c70:	e00a      	b.n	8002c88 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8002c80:	2101      	movs	r1, #1
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f858 	bl	8002d38 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d14b      	bne.n	8002d2e <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0201 	bic.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d107      	bne.n	8002cc2 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002cc0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002cd0:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69d9      	ldr	r1, [r3, #28]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f009 f8bf 	bl	800be68 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf4:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfa:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d103      	bne.n	8002d24 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f009 f8c7 	bl	800beb0 <HAL_JPEG_DecodeCpltCallback>
 8002d22:	e002      	b.n	8002d2a <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff f911 	bl	8001f4c <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d34b      	bcc.n	8002dec <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e031      	b.n	8002dbe <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d60:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	4413      	add	r3, r2
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	0a19      	lsrs	r1, r3, #8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7e:	3301      	adds	r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	b2ca      	uxtb	r2, r1
 8002d84:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	0c19      	lsrs	r1, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	3302      	adds	r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	b2ca      	uxtb	r2, r1
 8002d98:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	0e19      	lsrs	r1, r3, #24
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	3303      	adds	r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	b2ca      	uxtb	r2, r1
 8002dac:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	1d1a      	adds	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d3c9      	bcc.n	8002d5a <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	f040 80b5 	bne.w	8002f3e <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69d9      	ldr	r1, [r3, #28]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f009 f842 	bl	800be68 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8002dea:	e0a8      	b.n	8002f3e <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df4:	429a      	cmp	r2, r3
 8002df6:	f240 80a2 	bls.w	8002f3e <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	e031      	b.n	8002e72 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e14:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	4413      	add	r3, r2
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	0a19      	lsrs	r1, r3, #8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	3301      	adds	r3, #1
 8002e34:	4413      	add	r3, r2
 8002e36:	b2ca      	uxtb	r2, r1
 8002e38:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	0c19      	lsrs	r1, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	3302      	adds	r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	b2ca      	uxtb	r2, r1
 8002e4c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	0e19      	lsrs	r1, r3, #24
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	3303      	adds	r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	b2ca      	uxtb	r2, r1
 8002e60:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	1d1a      	adds	r2, r3, #4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d3c9      	bcc.n	8002e0e <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d10b      	bne.n	8002e9e <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69d9      	ldr	r1, [r3, #28]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	461a      	mov	r2, r3
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f008 ffe9 	bl	800be68 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002e9c:	e04f      	b.n	8002f3e <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb0:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e015      	b.n	8002ee4 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	fa22 f103 	lsr.w	r1, r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	4413      	add	r3, r2
 8002ed0:	b2ca      	uxtb	r2, r1
 8002ed2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d3e5      	bcc.n	8002eb8 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69d9      	ldr	r1, [r3, #28]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f008 ffb6 	bl	800be68 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f1c3 0304 	rsb	r3, r3, #4
 8002f08:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	e013      	b.n	8002f38 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	fa22 f103 	lsr.w	r1, r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f22:	4413      	add	r3, r2
 8002f24:	b2ca      	uxtb	r2, r1
 8002f26:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	3301      	adds	r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d9e8      	bls.n	8002f10 <JPEG_StoreOutputData+0x1d8>
}
 8002f3e:	bf00      	nop
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b088      	sub	sp, #32
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <JPEG_ReadInputData+0x1c>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8002f62:	2101      	movs	r1, #1
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7fe ff75 	bl	8001e54 <HAL_JPEG_Pause>
 8002f6a:	e028      	b.n	8002fbe <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d906      	bls.n	8002f86 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	e01b      	b.n	8002fbe <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d115      	bne.n	8002fbe <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f008 ff27 	bl	800bdec <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d905      	bls.n	8002fb2 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002faa:	f023 0203 	bic.w	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbc:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f040 809f 	bne.w	800310a <JPEG_ReadInputData+0x1c4>
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 809b 	beq.w	800310a <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d335      	bcc.n	800304e <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e02d      	b.n	8003044 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699a      	ldr	r2, [r3, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3301      	adds	r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003008:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6999      	ldr	r1, [r3, #24]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	3302      	adds	r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800301a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	3303      	adds	r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003030:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003032:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	1d1a      	adds	r2, r3, #4
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	3301      	adds	r3, #1
 8003042:	61bb      	str	r3, [r7, #24]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d3cd      	bcc.n	8002fe8 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800304c:	e05d      	b.n	800310a <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d035      	beq.n	80030c0 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8003054:	2300      	movs	r3, #0
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	e02d      	b.n	80030b6 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699a      	ldr	r2, [r3, #24]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	3301      	adds	r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800307a:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6999      	ldr	r1, [r3, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3302      	adds	r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800308c:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3303      	adds	r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80030a2:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80030a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	1d1a      	adds	r2, r3, #4
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	3301      	adds	r3, #1
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d3cd      	bcc.n	800305a <JPEG_ReadInputData+0x114>
}
 80030be:	e024      	b.n	800310a <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	e017      	b.n	80030fa <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4413      	add	r3, r2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	1c5a      	adds	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	3301      	adds	r3, #1
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d3e3      	bcc.n	80030ca <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800310a:	bf00      	nop
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8003114:	b590      	push	{r4, r7, lr}
 8003116:	b087      	sub	sp, #28
 8003118:	af02      	add	r7, sp, #8
 800311a:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003122:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312a:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	429a      	cmp	r2, r3
 8003134:	d804      	bhi.n	8003140 <JPEG_DMA_StartProcess+0x2c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	429a      	cmp	r2, r3
 800313e:	d901      	bls.n	8003144 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e074      	b.n	800322e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003148:	4a3b      	ldr	r2, [pc, #236]	@ (8003238 <JPEG_DMA_StartProcess+0x124>)
 800314a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003150:	4a3a      	ldr	r2, [pc, #232]	@ (800323c <JPEG_DMA_StartProcess+0x128>)
 8003152:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003158:	4a39      	ldr	r2, [pc, #228]	@ (8003240 <JPEG_DMA_StartProcess+0x12c>)
 800315a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003160:	4a36      	ldr	r2, [pc, #216]	@ (800323c <JPEG_DMA_StartProcess+0x128>)
 8003162:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003168:	4a36      	ldr	r2, [pc, #216]	@ (8003244 <JPEG_DMA_StartProcess+0x130>)
 800316a:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <JPEG_DMA_StartProcess+0x64>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d107      	bne.n	8003188 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800317c:	f043 0204 	orr.w	r2, r3, #4
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e052      	b.n	800322e <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003190:	68f9      	ldr	r1, [r7, #12]
 8003192:	fbb3 f1f1 	udiv	r1, r3, r1
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	fb00 f101 	mul.w	r1, r0, r1
 800319c:	1a5b      	subs	r3, r3, r1
 800319e:	1ad2      	subs	r2, r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	fbb3 f1f1 	udiv	r1, r3, r1
 80031b2:	68b8      	ldr	r0, [r7, #8]
 80031b4:	fb00 f101 	mul.w	r1, r0, r1
 80031b8:	1a5b      	subs	r3, r3, r1
 80031ba:	1ad2      	subs	r2, r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3344      	adds	r3, #68	@ 0x44
 80031ca:	4619      	mov	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	461c      	mov	r4, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d6:	2201      	movs	r2, #1
 80031d8:	9200      	str	r2, [sp, #0]
 80031da:	4622      	mov	r2, r4
 80031dc:	f000 fbe8 	bl	80039b0 <HAL_MDMA_Start_IT>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ea:	f043 0204 	orr.w	r2, r3, #4
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e01b      	b.n	800322e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	4619      	mov	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3340      	adds	r3, #64	@ 0x40
 8003206:	461c      	mov	r4, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320c:	2201      	movs	r2, #1
 800320e:	9200      	str	r2, [sp, #0]
 8003210:	4622      	mov	r2, r4
 8003212:	f000 fbcd 	bl	80039b0 <HAL_MDMA_Start_IT>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003220:	f043 0204 	orr.w	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	bd90      	pop	{r4, r7, pc}
 8003236:	bf00      	nop
 8003238:	08003547 	.word	0x08003547
 800323c:	08003735 	.word	0x08003735
 8003240:	08003673 	.word	0x08003673
 8003244:	08003785 	.word	0x08003785

08003248 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d125      	bne.n	80032a8 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01e      	beq.n	80032a8 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7fe fcf7 	bl	8001c64 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3304      	adds	r3, #4
 8003280:	4619      	mov	r1, r3
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f008 fda6 	bl	800bdd4 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032a6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d039      	beq.n	800332a <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ba:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80032e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80032f0:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d104      	bne.n	800330a <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fbd4 	bl	8003ab2 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d105      	bne.n	8003324 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fbc8 	bl	8003ab2 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8003322:	e002      	b.n	800332a <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f804 	bl	8003332 <JPEG_DMA_EndProcess>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800334a:	1ad2      	subs	r2, r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003358:	429a      	cmp	r2, r3
 800335a:	d10a      	bne.n	8003372 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69d9      	ldr	r1, [r3, #28]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003364:	461a      	mov	r2, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f008 fd7e 	bl	800be68 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	d134      	bne.n	80033ea <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69d9      	ldr	r1, [r3, #28]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	461a      	mov	r2, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f008 fd68 	bl	800be68 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b2:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b8:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d103      	bne.n	80033e2 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f008 fd68 	bl	800beb0 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 80033e0:	e00c      	b.n	80033fc <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fe fdb2 	bl	8001f4c <HAL_JPEG_EncodeCpltCallback>
}
 80033e8:	e008      	b.n	80033fc <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f804 	bl	8003404 <JPEG_DMA_PollResidualData>
}
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800340c:	2310      	movs	r3, #16
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	e04f      	b.n	80034b2 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003416:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d146      	bne.n	80034ac <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	d03f      	beq.n	80034ac <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003432:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69da      	ldr	r2, [r3, #28]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	4413      	add	r3, r2
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	0a19      	lsrs	r1, r3, #8
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	3301      	adds	r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	b2ca      	uxtb	r2, r1
 8003456:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	0c19      	lsrs	r1, r3, #16
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	3302      	adds	r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	b2ca      	uxtb	r2, r1
 800346a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	0e19      	lsrs	r1, r3, #24
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	3303      	adds	r3, #3
 800347a:	4413      	add	r3, r2
 800347c:	b2ca      	uxtb	r2, r1
 800347e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	1d1a      	adds	r2, r3, #4
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003492:	429a      	cmp	r2, r3
 8003494:	d10a      	bne.n	80034ac <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69d9      	ldr	r1, [r3, #28]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349e:	461a      	mov	r2, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f008 fce1 	bl	800be68 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1ac      	bne.n	8003412 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034bc:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d004      	beq.n	80034d6 <JPEG_DMA_PollResidualData+0xd2>
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d133      	bne.n	800353e <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0201 	bic.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69d9      	ldr	r1, [r3, #28]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	461a      	mov	r2, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f008 fcb5 	bl	800be68 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003508:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f003 0303 	and.w	r3, r3, #3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d103      	bne.n	8003538 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f008 fcbd 	bl	800beb0 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8003536:	e002      	b.n	800353e <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7fe fd07 	bl	8001f4c <HAL_JPEG_EncodeCpltCallback>
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8003546:	b590      	push	{r4, r7, lr}
 8003548:	b087      	sub	sp, #28
 800354a:	af02      	add	r7, sp, #8
 800354c:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003568:	f248 030c 	movw	r3, #32780	@ 0x800c
 800356c:	4013      	ands	r3, r2
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d17c      	bne.n	800366c <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003578:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8003588:	1ad2      	subs	r2, r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	4619      	mov	r1, r3
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f008 fc29 	bl	800bdec <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d81f      	bhi.n	80035e4 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10d      	bne.n	80035c6 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ae:	f043 0204 	orr.w	r2, r3, #4
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2206      	movs	r2, #6
 80035ba:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f008 fc6c 	bl	800be9c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 80035c4:	e052      	b.n	800366c <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	fbb3 f1f1 	udiv	r1, r3, r1
 80035d4:	68b8      	ldr	r0, [r7, #8]
 80035d6:	fb00 f101 	mul.w	r1, r0, r1
 80035da:	1a5b      	subs	r3, r3, r1
 80035dc:	1ad2      	subs	r2, r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80035e2:	e010      	b.n	8003606 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00c      	beq.n	8003606 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d006      	beq.n	8003606 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	3301      	adds	r3, #1
 8003600:	009a      	lsls	r2, r3, #2
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d124      	bne.n	800365c <JPEG_MDMAInCpltCallback+0x116>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003616:	2b00      	cmp	r3, #0
 8003618:	d020      	beq.n	800365c <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	4619      	mov	r1, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3340      	adds	r3, #64	@ 0x40
 800362a:	461c      	mov	r4, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003630:	2201      	movs	r2, #1
 8003632:	9200      	str	r2, [sp, #0]
 8003634:	4622      	mov	r2, r4
 8003636:	f000 f9bb 	bl	80039b0 <HAL_MDMA_Start_IT>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003644:	f043 0204 	orr.w	r2, r3, #4
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2206      	movs	r2, #6
 8003650:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f008 fc21 	bl	800be9c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800365a:	e007      	b.n	800366c <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}

08003672 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 8003672:	b590      	push	{r4, r7, lr}
 8003674:	b087      	sub	sp, #28
 8003676:	af02      	add	r7, sp, #8
 8003678:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003694:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003698:	4013      	ands	r3, r2
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d147      	bne.n	800372e <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d138      	bne.n	800371e <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80036ba:	1ad2      	subs	r2, r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	69d9      	ldr	r1, [r3, #28]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	461a      	mov	r2, r3
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f008 fbcc 	bl	800be68 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d120      	bne.n	800371e <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3344      	adds	r3, #68	@ 0x44
 80036e6:	4619      	mov	r1, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	461c      	mov	r4, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f2:	2201      	movs	r2, #1
 80036f4:	9200      	str	r2, [sp, #0]
 80036f6:	4622      	mov	r2, r4
 80036f8:	f000 f95a 	bl	80039b0 <HAL_MDMA_Start_IT>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00d      	beq.n	800371e <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003706:	f043 0204 	orr.w	r2, r3, #4
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2206      	movs	r2, #6
 8003712:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f008 fbc0 	bl	800be9c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800371c:	e007      	b.n	800372e <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800372c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	bd90      	pop	{r4, r7, pc}

08003734 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003760:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800376e:	f043 0204 	orr.w	r2, r3, #4
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f008 fb90 	bl	800be9c <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003790:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003796:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff fdc7 	bl	8003332 <JPEG_DMA_EndProcess>
  }
}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b08b      	sub	sp, #44	@ 0x2c
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3350      	adds	r3, #80	@ 0x50
 80037be:	61bb      	str	r3, [r7, #24]

  i = 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80037c4:	e042      	b.n	800384c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	e033      	b.n	800383a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d103      	bne.n	80037ee <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	3364      	adds	r3, #100	@ 0x64
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ec:	e022      	b.n	8003834 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2264      	movs	r2, #100	@ 0x64
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037fa:	6a38      	ldr	r0, [r7, #32]
 80037fc:	69f9      	ldr	r1, [r7, #28]
 80037fe:	4401      	add	r1, r0
 8003800:	4818      	ldr	r0, [pc, #96]	@ (8003864 <JPEG_GetQuality+0xb8>)
 8003802:	5c41      	ldrb	r1, [r0, r1]
 8003804:	440a      	add	r2, r1
 8003806:	7812      	ldrb	r2, [r2, #0]
 8003808:	fbb3 f3f2 	udiv	r3, r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b64      	cmp	r3, #100	@ 0x64
 8003812:	d807      	bhi.n	8003824 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381e:	4413      	add	r3, r2
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
 8003822:	e007      	b.n	8003834 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8003824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003830:	4413      	add	r3, r2
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	3301      	adds	r3, #1
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d9c8      	bls.n	80037d2 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	3304      	adds	r3, #4
 8003844:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	3304      	adds	r3, #4
 800384a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	2b3c      	cmp	r3, #60	@ 0x3c
 8003850:	d9b9      	bls.n	80037c6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	099b      	lsrs	r3, r3, #6
}
 8003856:	4618      	mov	r0, r3
 8003858:	372c      	adds	r7, #44	@ 0x2c
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	08010dfc 	.word	0x08010dfc

08003868 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7fd faf4 	bl	8000e5c <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e03b      	b.n	80038f8 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80038a0:	e00f      	b.n	80038c2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80038a2:	f7fd fadb 	bl	8000e5c <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b05      	cmp	r3, #5
 80038ae:	d908      	bls.n	80038c2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2240      	movs	r2, #64	@ 0x40
 80038b4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2203      	movs	r2, #3
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e01a      	b.n	80038f8 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e8      	bne.n	80038a2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fad9 	bl	8003e88 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e048      	b.n	80039a4 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2200      	movs	r2, #0
 8003928:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2200      	movs	r2, #0
 8003930:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2200      	movs	r2, #0
 8003938:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2200      	movs	r2, #0
 8003940:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2200      	movs	r2, #0
 8003948:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2200      	movs	r2, #0
 8003958:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2200      	movs	r2, #0
 8003960:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2200      	movs	r2, #0
 8003970:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	221f      	movs	r2, #31
 8003978:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e070      	b.n	8003aaa <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_MDMA_Start_IT+0x26>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e069      	b.n	8003aaa <HAL_MDMA_Start_IT+0xfa>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d158      	bne.n	8003a9c <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f9c8 	bl	8003da8 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0206 	orr.w	r2, r2, #6
 8003a26:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0210 	orr.w	r2, r2, #16
 8003a3e:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d007      	beq.n	8003a58 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0208 	orr.w	r2, r2, #8
 8003a56:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0220 	orr.w	r2, r2, #32
 8003a6e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a88:	d10e      	bne.n	8003aa8 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	e005      	b.n	8003aa8 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e000      	b.n	8003aaa <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e017      	b.n	8003af4 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d004      	beq.n	8003ada <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2280      	movs	r2, #128	@ 0x80
 8003ad4:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e00c      	b.n	8003af4 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2204      	movs	r2, #4
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b0c:	4b91      	ldr	r3, [pc, #580]	@ (8003d54 <HAL_MDMA_IRQHandler+0x254>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a91      	ldr	r2, [pc, #580]	@ (8003d58 <HAL_MDMA_IRQHandler+0x258>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	0a9b      	lsrs	r3, r3, #10
 8003b18:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4b8e      	ldr	r3, [pc, #568]	@ (8003d5c <HAL_MDMA_IRQHandler+0x25c>)
 8003b22:	4413      	add	r3, r2
 8003b24:	099b      	lsrs	r3, r3, #6
 8003b26:	f003 031f 	and.w	r3, r3, #31
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8003b32:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 812d 	beq.w	8003d9c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d054      	beq.n	8003bfa <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d04d      	beq.n	8003bfa <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68da      	ldr	r2, [r3, #12]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0202 	bic.w	r2, r2, #2
 8003b6c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	669a      	str	r2, [r3, #104]	@ 0x68
 8003b8c:	e005      	b.n	8003b9a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b92:	f043 0202 	orr.w	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ba8:	f043 0204 	orr.w	r2, r3, #4
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bbe:	f043 0208 	orr.w	r2, r3, #8
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0310 	and.w	r3, r3, #16
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d012      	beq.n	8003c2e <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2210      	movs	r2, #16
 8003c1c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d012      	beq.n	8003c62 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2208      	movs	r2, #8
 8003c50:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d012      	beq.n	8003c96 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2204      	movs	r2, #4
 8003c84:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d039      	beq.n	8003d18 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d032      	beq.n	8003d18 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8003cc0:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d110      	bne.n	8003cf0 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d05c      	beq.n	8003da0 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	4798      	blx	r3
        }
        return;
 8003cee:	e057      	b.n	8003da0 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d040      	beq.n	8003da2 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2204      	movs	r2, #4
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d30d      	bcc.n	8003d60 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f2      	bne.n	8003d38 <HAL_MDMA_IRQHandler+0x238>
 8003d52:	e006      	b.n	8003d62 <HAL_MDMA_IRQHandler+0x262>
 8003d54:	20000000 	.word	0x20000000
 8003d58:	1b4e81b5 	.word	0x1b4e81b5
 8003d5c:	adffffc0 	.word	0xadffffc0
        break;
 8003d60:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003d80:	e003      	b.n	8003d8a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
 8003d9a:	e002      	b.n	8003da2 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8003d9c:	bf00      	nop
 8003d9e:	e000      	b.n	8003da2 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8003da0:	bf00      	nop
    }
  }
}
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695a      	ldr	r2, [r3, #20]
 8003dbc:	4b31      	ldr	r3, [pc, #196]	@ (8003e84 <MDMA_SetConfig+0xdc>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	430b      	orrs	r3, r1
 8003dcc:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	051a      	lsls	r2, r3, #20
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	221f      	movs	r2, #31
 8003dec:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003e04:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e0c:	d002      	beq.n	8003e14 <MDMA_SetConfig+0x6c>
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d108      	bne.n	8003e26 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e22:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e24:	e007      	b.n	8003e36 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003e34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003e3c:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e44:	d002      	beq.n	8003e4c <MDMA_SetConfig+0xa4>
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d108      	bne.n	8003e5e <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003e5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e5c:	e007      	b.n	8003e6e <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003e6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003e78:	bf00      	nop
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	fffe0000 	.word	0xfffe0000

08003e88 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68d9      	ldr	r1, [r3, #12]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003eae:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003eba:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003ec6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8003ed0:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003edc:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003ede:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee8:	d107      	bne.n	8003efa <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8003ef8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	da11      	bge.n	8003f2e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695a      	ldr	r2, [r3, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003f18:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1e:	425b      	negs	r3, r3
 8003f20:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	b292      	uxth	r2, r2
 8003f2a:	621a      	str	r2, [r3, #32]
 8003f2c:	e006      	b.n	8003f3c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f32:	461a      	mov	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	b292      	uxth	r2, r2
 8003f3a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	da15      	bge.n	8003f70 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003f52:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f58:	425b      	negs	r3, r3
 8003f5a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6a19      	ldr	r1, [r3, #32]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	041a      	lsls	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	621a      	str	r2, [r3, #32]
 8003f6e:	e009      	b.n	8003f84 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6a19      	ldr	r1, [r3, #32]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7a:	041a      	lsls	r2, r3, #16
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f8c:	d006      	beq.n	8003f9c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f9a:	e003      	b.n	8003fa4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0

}
 8003fbc:	bf00      	nop
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003fd0:	4b29      	ldr	r3, [pc, #164]	@ (8004078 <HAL_PWREx_ConfigSupply+0xb0>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	2b06      	cmp	r3, #6
 8003fda:	d00a      	beq.n	8003ff2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003fdc:	4b26      	ldr	r3, [pc, #152]	@ (8004078 <HAL_PWREx_ConfigSupply+0xb0>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d001      	beq.n	8003fee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e040      	b.n	8004070 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	e03e      	b.n	8004070 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ff2:	4b21      	ldr	r3, [pc, #132]	@ (8004078 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003ffa:	491f      	ldr	r1, [pc, #124]	@ (8004078 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004002:	f7fc ff2b 	bl	8000e5c <HAL_GetTick>
 8004006:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004008:	e009      	b.n	800401e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800400a:	f7fc ff27 	bl	8000e5c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004018:	d901      	bls.n	800401e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e028      	b.n	8004070 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800401e:	4b16      	ldr	r3, [pc, #88]	@ (8004078 <HAL_PWREx_ConfigSupply+0xb0>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004026:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800402a:	d1ee      	bne.n	800400a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b1e      	cmp	r3, #30
 8004030:	d008      	beq.n	8004044 <HAL_PWREx_ConfigSupply+0x7c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b2e      	cmp	r3, #46	@ 0x2e
 8004036:	d005      	beq.n	8004044 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b1d      	cmp	r3, #29
 800403c:	d002      	beq.n	8004044 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b2d      	cmp	r3, #45	@ 0x2d
 8004042:	d114      	bne.n	800406e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004044:	f7fc ff0a 	bl	8000e5c <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800404a:	e009      	b.n	8004060 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800404c:	f7fc ff06 	bl	8000e5c <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800405a:	d901      	bls.n	8004060 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e007      	b.n	8004070 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004060:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <HAL_PWREx_ConfigSupply+0xb0>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800406c:	d1ee      	bne.n	800404c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	58024800 	.word	0x58024800

0800407c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08c      	sub	sp, #48	@ 0x30
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d102      	bne.n	8004090 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f000 bc48 	b.w	8004920 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8088 	beq.w	80041ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800409e:	4b99      	ldr	r3, [pc, #612]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040a8:	4b96      	ldr	r3, [pc, #600]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80040aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80040ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d007      	beq.n	80040c4 <HAL_RCC_OscConfig+0x48>
 80040b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b6:	2b18      	cmp	r3, #24
 80040b8:	d111      	bne.n	80040de <HAL_RCC_OscConfig+0x62>
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d10c      	bne.n	80040de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d06d      	beq.n	80041ac <HAL_RCC_OscConfig+0x130>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d169      	bne.n	80041ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	f000 bc21 	b.w	8004920 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040e6:	d106      	bne.n	80040f6 <HAL_RCC_OscConfig+0x7a>
 80040e8:	4b86      	ldr	r3, [pc, #536]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a85      	ldr	r2, [pc, #532]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80040ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	e02e      	b.n	8004154 <HAL_RCC_OscConfig+0xd8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x9c>
 80040fe:	4b81      	ldr	r3, [pc, #516]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a80      	ldr	r2, [pc, #512]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b7e      	ldr	r3, [pc, #504]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a7d      	ldr	r2, [pc, #500]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004110:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e01d      	b.n	8004154 <HAL_RCC_OscConfig+0xd8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0xc0>
 8004122:	4b78      	ldr	r3, [pc, #480]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a77      	ldr	r2, [pc, #476]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b75      	ldr	r3, [pc, #468]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a74      	ldr	r2, [pc, #464]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0xd8>
 800413c:	4b71      	ldr	r3, [pc, #452]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a70      	ldr	r2, [pc, #448]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	4b6e      	ldr	r3, [pc, #440]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a6d      	ldr	r2, [pc, #436]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800414e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d013      	beq.n	8004184 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415c:	f7fc fe7e 	bl	8000e5c <HAL_GetTick>
 8004160:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004164:	f7fc fe7a 	bl	8000e5c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	@ 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e3d4      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004176:	4b63      	ldr	r3, [pc, #396]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0xe8>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fc fe6a 	bl	8000e5c <HAL_GetTick>
 8004188:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800418c:	f7fc fe66 	bl	8000e5c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	@ 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e3c0      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800419e:	4b59      	ldr	r3, [pc, #356]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x110>
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80ca 	beq.w	8004350 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041bc:	4b51      	ldr	r3, [pc, #324]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <HAL_RCC_OscConfig+0x166>
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	2b18      	cmp	r3, #24
 80041d6:	d156      	bne.n	8004286 <HAL_RCC_OscConfig+0x20a>
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d151      	bne.n	8004286 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e2:	4b48      	ldr	r3, [pc, #288]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <HAL_RCC_OscConfig+0x17e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e392      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041fa:	4b42      	ldr	r3, [pc, #264]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 0219 	bic.w	r2, r3, #25
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	493f      	ldr	r1, [pc, #252]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fc fe26 	bl	8000e5c <HAL_GetTick>
 8004210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004214:	f7fc fe22 	bl	8000e5c <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e37c      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004226:	4b37      	ldr	r3, [pc, #220]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004232:	f7fc fe43 	bl	8000ebc <HAL_GetREVID>
 8004236:	4603      	mov	r3, r0
 8004238:	f241 0203 	movw	r2, #4099	@ 0x1003
 800423c:	4293      	cmp	r3, r2
 800423e:	d817      	bhi.n	8004270 <HAL_RCC_OscConfig+0x1f4>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	2b40      	cmp	r3, #64	@ 0x40
 8004246:	d108      	bne.n	800425a <HAL_RCC_OscConfig+0x1de>
 8004248:	4b2e      	ldr	r3, [pc, #184]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004250:	4a2c      	ldr	r2, [pc, #176]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004252:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004256:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004258:	e07a      	b.n	8004350 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425a:	4b2a      	ldr	r3, [pc, #168]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	031b      	lsls	r3, r3, #12
 8004268:	4926      	ldr	r1, [pc, #152]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800426e:	e06f      	b.n	8004350 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004270:	4b24      	ldr	r3, [pc, #144]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	061b      	lsls	r3, r3, #24
 800427e:	4921      	ldr	r1, [pc, #132]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004280:	4313      	orrs	r3, r2
 8004282:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004284:	e064      	b.n	8004350 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d047      	beq.n	800431e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800428e:	4b1d      	ldr	r3, [pc, #116]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 0219 	bic.w	r2, r3, #25
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	491a      	ldr	r1, [pc, #104]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 800429c:	4313      	orrs	r3, r2
 800429e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fc fddc 	bl	8000e5c <HAL_GetTick>
 80042a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a8:	f7fc fdd8 	bl	8000e5c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e332      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ba:	4b12      	ldr	r3, [pc, #72]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c6:	f7fc fdf9 	bl	8000ebc <HAL_GetREVID>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d819      	bhi.n	8004308 <HAL_RCC_OscConfig+0x28c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b40      	cmp	r3, #64	@ 0x40
 80042da:	d108      	bne.n	80042ee <HAL_RCC_OscConfig+0x272>
 80042dc:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80042e4:	4a07      	ldr	r2, [pc, #28]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80042e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ea:	6053      	str	r3, [r2, #4]
 80042ec:	e030      	b.n	8004350 <HAL_RCC_OscConfig+0x2d4>
 80042ee:	4b05      	ldr	r3, [pc, #20]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	031b      	lsls	r3, r3, #12
 80042fc:	4901      	ldr	r1, [pc, #4]	@ (8004304 <HAL_RCC_OscConfig+0x288>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	604b      	str	r3, [r1, #4]
 8004302:	e025      	b.n	8004350 <HAL_RCC_OscConfig+0x2d4>
 8004304:	58024400 	.word	0x58024400
 8004308:	4b9a      	ldr	r3, [pc, #616]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	4997      	ldr	r1, [pc, #604]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004318:	4313      	orrs	r3, r2
 800431a:	604b      	str	r3, [r1, #4]
 800431c:	e018      	b.n	8004350 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431e:	4b95      	ldr	r3, [pc, #596]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a94      	ldr	r2, [pc, #592]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432a:	f7fc fd97 	bl	8000e5c <HAL_GetTick>
 800432e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004332:	f7fc fd93 	bl	8000e5c <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e2ed      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004344:	4b8b      	ldr	r3, [pc, #556]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80a9 	beq.w	80044b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800435e:	4b85      	ldr	r3, [pc, #532]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004366:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004368:	4b82      	ldr	r3, [pc, #520]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d007      	beq.n	8004384 <HAL_RCC_OscConfig+0x308>
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b18      	cmp	r3, #24
 8004378:	d13a      	bne.n	80043f0 <HAL_RCC_OscConfig+0x374>
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d135      	bne.n	80043f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004384:	4b7b      	ldr	r3, [pc, #492]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_OscConfig+0x320>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	2b80      	cmp	r3, #128	@ 0x80
 8004396:	d001      	beq.n	800439c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e2c1      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800439c:	f7fc fd8e 	bl	8000ebc <HAL_GetREVID>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d817      	bhi.n	80043da <HAL_RCC_OscConfig+0x35e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d108      	bne.n	80043c4 <HAL_RCC_OscConfig+0x348>
 80043b2:	4b70      	ldr	r3, [pc, #448]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80043ba:	4a6e      	ldr	r2, [pc, #440]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043c2:	e075      	b.n	80044b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	069b      	lsls	r3, r3, #26
 80043d2:	4968      	ldr	r1, [pc, #416]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043d8:	e06a      	b.n	80044b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043da:	4b66      	ldr	r3, [pc, #408]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	061b      	lsls	r3, r3, #24
 80043e8:	4962      	ldr	r1, [pc, #392]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043ee:	e05f      	b.n	80044b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d042      	beq.n	800447e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80043fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fc fd2a 	bl	8000e5c <HAL_GetTick>
 8004408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800440c:	f7fc fd26 	bl	8000e5c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e280      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800441e:	4b55      	ldr	r3, [pc, #340]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800442a:	f7fc fd47 	bl	8000ebc <HAL_GetREVID>
 800442e:	4603      	mov	r3, r0
 8004430:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004434:	4293      	cmp	r3, r2
 8004436:	d817      	bhi.n	8004468 <HAL_RCC_OscConfig+0x3ec>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	2b20      	cmp	r3, #32
 800443e:	d108      	bne.n	8004452 <HAL_RCC_OscConfig+0x3d6>
 8004440:	4b4c      	ldr	r3, [pc, #304]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004448:	4a4a      	ldr	r2, [pc, #296]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 800444a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800444e:	6053      	str	r3, [r2, #4]
 8004450:	e02e      	b.n	80044b0 <HAL_RCC_OscConfig+0x434>
 8004452:	4b48      	ldr	r3, [pc, #288]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	069b      	lsls	r3, r3, #26
 8004460:	4944      	ldr	r1, [pc, #272]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]
 8004466:	e023      	b.n	80044b0 <HAL_RCC_OscConfig+0x434>
 8004468:	4b42      	ldr	r3, [pc, #264]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	061b      	lsls	r3, r3, #24
 8004476:	493f      	ldr	r1, [pc, #252]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004478:	4313      	orrs	r3, r2
 800447a:	60cb      	str	r3, [r1, #12]
 800447c:	e018      	b.n	80044b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800447e:	4b3d      	ldr	r3, [pc, #244]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a3c      	ldr	r2, [pc, #240]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004484:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448a:	f7fc fce7 	bl	8000e5c <HAL_GetTick>
 800448e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004492:	f7fc fce3 	bl	8000e5c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e23d      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044a4:	4b33      	ldr	r3, [pc, #204]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f0      	bne.n	8004492 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d036      	beq.n	800452a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d019      	beq.n	80044f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80044c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fc fcc4 	bl	8000e5c <HAL_GetTick>
 80044d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d8:	f7fc fcc0 	bl	8000e5c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e21a      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044ea:	4b22      	ldr	r3, [pc, #136]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80044ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x45c>
 80044f6:	e018      	b.n	800452a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80044fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7fc fcaa 	bl	8000e5c <HAL_GetTick>
 8004508:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800450c:	f7fc fca6 	bl	8000e5c <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e200      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800451e:	4b15      	ldr	r3, [pc, #84]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d039      	beq.n	80045aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01c      	beq.n	8004578 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800453e:	4b0d      	ldr	r3, [pc, #52]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a0c      	ldr	r2, [pc, #48]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004544:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004548:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800454a:	f7fc fc87 	bl	8000e5c <HAL_GetTick>
 800454e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004552:	f7fc fc83 	bl	8000e5c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e1dd      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <HAL_RCC_OscConfig+0x4f8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x4d6>
 8004570:	e01b      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
 8004572:	bf00      	nop
 8004574:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004578:	4b9b      	ldr	r3, [pc, #620]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a9a      	ldr	r2, [pc, #616]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800457e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004582:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004584:	f7fc fc6a 	bl	8000e5c <HAL_GetTick>
 8004588:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800458c:	f7fc fc66 	bl	8000e5c <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e1c0      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800459e:	4b92      	ldr	r3, [pc, #584]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 8081 	beq.w	80046ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045b8:	4b8c      	ldr	r3, [pc, #560]	@ (80047ec <HAL_RCC_OscConfig+0x770>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a8b      	ldr	r2, [pc, #556]	@ (80047ec <HAL_RCC_OscConfig+0x770>)
 80045be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045c4:	f7fc fc4a 	bl	8000e5c <HAL_GetTick>
 80045c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045cc:	f7fc fc46 	bl	8000e5c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	@ 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e1a0      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045de:	4b83      	ldr	r3, [pc, #524]	@ (80047ec <HAL_RCC_OscConfig+0x770>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d106      	bne.n	8004600 <HAL_RCC_OscConfig+0x584>
 80045f2:	4b7d      	ldr	r3, [pc, #500]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f6:	4a7c      	ldr	r2, [pc, #496]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fe:	e02d      	b.n	800465c <HAL_RCC_OscConfig+0x5e0>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10c      	bne.n	8004622 <HAL_RCC_OscConfig+0x5a6>
 8004608:	4b77      	ldr	r3, [pc, #476]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800460a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460c:	4a76      	ldr	r2, [pc, #472]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800460e:	f023 0301 	bic.w	r3, r3, #1
 8004612:	6713      	str	r3, [r2, #112]	@ 0x70
 8004614:	4b74      	ldr	r3, [pc, #464]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004618:	4a73      	ldr	r2, [pc, #460]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800461a:	f023 0304 	bic.w	r3, r3, #4
 800461e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004620:	e01c      	b.n	800465c <HAL_RCC_OscConfig+0x5e0>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b05      	cmp	r3, #5
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0x5c8>
 800462a:	4b6f      	ldr	r3, [pc, #444]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462e:	4a6e      	ldr	r2, [pc, #440]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004630:	f043 0304 	orr.w	r3, r3, #4
 8004634:	6713      	str	r3, [r2, #112]	@ 0x70
 8004636:	4b6c      	ldr	r3, [pc, #432]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463a:	4a6b      	ldr	r2, [pc, #428]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	6713      	str	r3, [r2, #112]	@ 0x70
 8004642:	e00b      	b.n	800465c <HAL_RCC_OscConfig+0x5e0>
 8004644:	4b68      	ldr	r3, [pc, #416]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004648:	4a67      	ldr	r2, [pc, #412]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004650:	4b65      	ldr	r3, [pc, #404]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004654:	4a64      	ldr	r2, [pc, #400]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004656:	f023 0304 	bic.w	r3, r3, #4
 800465a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d015      	beq.n	8004690 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fc fbfa 	bl	8000e5c <HAL_GetTick>
 8004668:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800466a:	e00a      	b.n	8004682 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466c:	f7fc fbf6 	bl	8000e5c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e14e      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004682:	4b59      	ldr	r3, [pc, #356]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0ee      	beq.n	800466c <HAL_RCC_OscConfig+0x5f0>
 800468e:	e014      	b.n	80046ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004690:	f7fc fbe4 	bl	8000e5c <HAL_GetTick>
 8004694:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004696:	e00a      	b.n	80046ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004698:	f7fc fbe0 	bl	8000e5c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e138      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046ae:	4b4e      	ldr	r3, [pc, #312]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1ee      	bne.n	8004698 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 812d 	beq.w	800491e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80046c4:	4b48      	ldr	r3, [pc, #288]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046cc:	2b18      	cmp	r3, #24
 80046ce:	f000 80bd 	beq.w	800484c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	f040 809e 	bne.w	8004818 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046dc:	4b42      	ldr	r3, [pc, #264]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a41      	ldr	r2, [pc, #260]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80046e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fc fbb8 	bl	8000e5c <HAL_GetTick>
 80046ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fc fbb4 	bl	8000e5c <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e10e      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004702:	4b39      	ldr	r3, [pc, #228]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f0      	bne.n	80046f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800470e:	4b36      	ldr	r3, [pc, #216]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004710:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004712:	4b37      	ldr	r3, [pc, #220]	@ (80047f0 <HAL_RCC_OscConfig+0x774>)
 8004714:	4013      	ands	r3, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800471e:	0112      	lsls	r2, r2, #4
 8004720:	430a      	orrs	r2, r1
 8004722:	4931      	ldr	r1, [pc, #196]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004724:	4313      	orrs	r3, r2
 8004726:	628b      	str	r3, [r1, #40]	@ 0x28
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472c:	3b01      	subs	r3, #1
 800472e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004736:	3b01      	subs	r3, #1
 8004738:	025b      	lsls	r3, r3, #9
 800473a:	b29b      	uxth	r3, r3
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004742:	3b01      	subs	r3, #1
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004750:	3b01      	subs	r3, #1
 8004752:	061b      	lsls	r3, r3, #24
 8004754:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004758:	4923      	ldr	r1, [pc, #140]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800475e:	4b22      	ldr	r3, [pc, #136]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004762:	4a21      	ldr	r2, [pc, #132]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800476a:	4b1f      	ldr	r3, [pc, #124]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800476c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800476e:	4b21      	ldr	r3, [pc, #132]	@ (80047f4 <HAL_RCC_OscConfig+0x778>)
 8004770:	4013      	ands	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004776:	00d2      	lsls	r2, r2, #3
 8004778:	491b      	ldr	r1, [pc, #108]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800477a:	4313      	orrs	r3, r2
 800477c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800477e:	4b1a      	ldr	r3, [pc, #104]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004782:	f023 020c 	bic.w	r2, r3, #12
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	4917      	ldr	r1, [pc, #92]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800478c:	4313      	orrs	r3, r2
 800478e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004790:	4b15      	ldr	r3, [pc, #84]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 8004792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004794:	f023 0202 	bic.w	r2, r3, #2
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479c:	4912      	ldr	r1, [pc, #72]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047a2:	4b11      	ldr	r3, [pc, #68]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	4a10      	ldr	r2, [pc, #64]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ae:	4b0e      	ldr	r3, [pc, #56]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b2:	4a0d      	ldr	r2, [pc, #52]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047ba:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	4a0a      	ldr	r2, [pc, #40]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80047c6:	4b08      	ldr	r3, [pc, #32]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ca:	4a07      	ldr	r2, [pc, #28]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d2:	4b05      	ldr	r3, [pc, #20]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a04      	ldr	r2, [pc, #16]	@ (80047e8 <HAL_RCC_OscConfig+0x76c>)
 80047d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047de:	f7fc fb3d 	bl	8000e5c <HAL_GetTick>
 80047e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047e4:	e011      	b.n	800480a <HAL_RCC_OscConfig+0x78e>
 80047e6:	bf00      	nop
 80047e8:	58024400 	.word	0x58024400
 80047ec:	58024800 	.word	0x58024800
 80047f0:	fffffc0c 	.word	0xfffffc0c
 80047f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f8:	f7fc fb30 	bl	8000e5c <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e08a      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800480a:	4b47      	ldr	r3, [pc, #284]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x77c>
 8004816:	e082      	b.n	800491e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004818:	4b43      	ldr	r3, [pc, #268]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a42      	ldr	r2, [pc, #264]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 800481e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004824:	f7fc fb1a 	bl	8000e5c <HAL_GetTick>
 8004828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482c:	f7fc fb16 	bl	8000e5c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e070      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800483e:	4b3a      	ldr	r3, [pc, #232]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x7b0>
 800484a:	e068      	b.n	800491e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800484c:	4b36      	ldr	r3, [pc, #216]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004852:	4b35      	ldr	r3, [pc, #212]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004856:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	2b01      	cmp	r3, #1
 800485e:	d031      	beq.n	80048c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f003 0203 	and.w	r2, r3, #3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d12a      	bne.n	80048c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d122      	bne.n	80048c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004888:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800488a:	429a      	cmp	r2, r3
 800488c:	d11a      	bne.n	80048c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	0a5b      	lsrs	r3, r3, #9
 8004892:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800489a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800489c:	429a      	cmp	r2, r3
 800489e:	d111      	bne.n	80048c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d108      	bne.n	80048c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	0e1b      	lsrs	r3, r3, #24
 80048b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e02b      	b.n	8004920 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80048c8:	4b17      	ldr	r3, [pc, #92]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 80048ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048cc:	08db      	lsrs	r3, r3, #3
 80048ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d01f      	beq.n	800491e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80048de:	4b12      	ldr	r3, [pc, #72]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 80048e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e2:	4a11      	ldr	r2, [pc, #68]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048ea:	f7fc fab7 	bl	8000e5c <HAL_GetTick>
 80048ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80048f0:	bf00      	nop
 80048f2:	f7fc fab3 	bl	8000e5c <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d0f9      	beq.n	80048f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 8004900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004902:	4b0a      	ldr	r3, [pc, #40]	@ (800492c <HAL_RCC_OscConfig+0x8b0>)
 8004904:	4013      	ands	r3, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800490a:	00d2      	lsls	r2, r2, #3
 800490c:	4906      	ldr	r1, [pc, #24]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 800490e:	4313      	orrs	r3, r2
 8004910:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004912:	4b05      	ldr	r3, [pc, #20]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	4a04      	ldr	r2, [pc, #16]	@ (8004928 <HAL_RCC_OscConfig+0x8ac>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3730      	adds	r7, #48	@ 0x30
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	58024400 	.word	0x58024400
 800492c:	ffff0007 	.word	0xffff0007

08004930 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e19c      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004944:	4b8a      	ldr	r3, [pc, #552]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 030f 	and.w	r3, r3, #15
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d910      	bls.n	8004974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b87      	ldr	r3, [pc, #540]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f023 020f 	bic.w	r2, r3, #15
 800495a:	4985      	ldr	r1, [pc, #532]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	4313      	orrs	r3, r2
 8004960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b83      	ldr	r3, [pc, #524]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e184      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d010      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	4b7b      	ldr	r3, [pc, #492]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800498c:	429a      	cmp	r2, r3
 800498e:	d908      	bls.n	80049a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004990:	4b78      	ldr	r3, [pc, #480]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	4975      	ldr	r1, [pc, #468]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d010      	beq.n	80049d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695a      	ldr	r2, [r3, #20]
 80049b2:	4b70      	ldr	r3, [pc, #448]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d908      	bls.n	80049d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049be:	4b6d      	ldr	r3, [pc, #436]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	496a      	ldr	r1, [pc, #424]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d010      	beq.n	80049fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	4b64      	ldr	r3, [pc, #400]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d908      	bls.n	80049fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049ec:	4b61      	ldr	r3, [pc, #388]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	495e      	ldr	r1, [pc, #376]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d010      	beq.n	8004a2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69da      	ldr	r2, [r3, #28]
 8004a0e:	4b59      	ldr	r3, [pc, #356]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d908      	bls.n	8004a2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a1a:	4b56      	ldr	r3, [pc, #344]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	4953      	ldr	r1, [pc, #332]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d010      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d908      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a48:	4b4a      	ldr	r3, [pc, #296]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f023 020f 	bic.w	r2, r3, #15
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4947      	ldr	r1, [pc, #284]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d055      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a66:	4b43      	ldr	r3, [pc, #268]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	4940      	ldr	r1, [pc, #256]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d107      	bne.n	8004a90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a80:	4b3c      	ldr	r3, [pc, #240]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d121      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0f6      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d107      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a98:	4b36      	ldr	r3, [pc, #216]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d115      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0ea      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d107      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ab0:	4b30      	ldr	r3, [pc, #192]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d109      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0de      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0d6      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ad0:	4b28      	ldr	r3, [pc, #160]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f023 0207 	bic.w	r2, r3, #7
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4925      	ldr	r1, [pc, #148]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae2:	f7fc f9bb 	bl	8000e5c <HAL_GetTick>
 8004ae6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae8:	e00a      	b.n	8004b00 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aea:	f7fc f9b7 	bl	8000e5c <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e0be      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b00:	4b1c      	ldr	r3, [pc, #112]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d1eb      	bne.n	8004aea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d010      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	4b14      	ldr	r3, [pc, #80]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d208      	bcs.n	8004b40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b2e:	4b11      	ldr	r3, [pc, #68]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f023 020f 	bic.w	r2, r3, #15
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	490e      	ldr	r1, [pc, #56]	@ (8004b74 <HAL_RCC_ClockConfig+0x244>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b40:	4b0b      	ldr	r3, [pc, #44]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d214      	bcs.n	8004b78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4e:	4b08      	ldr	r3, [pc, #32]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 020f 	bic.w	r2, r3, #15
 8004b56:	4906      	ldr	r1, [pc, #24]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b04      	ldr	r3, [pc, #16]	@ (8004b70 <HAL_RCC_ClockConfig+0x240>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d005      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e086      	b.n	8004c7e <HAL_RCC_ClockConfig+0x34e>
 8004b70:	52002000 	.word	0x52002000
 8004b74:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d010      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	4b3f      	ldr	r3, [pc, #252]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d208      	bcs.n	8004ba6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b94:	4b3c      	ldr	r3, [pc, #240]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	4939      	ldr	r1, [pc, #228]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d010      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695a      	ldr	r2, [r3, #20]
 8004bb6:	4b34      	ldr	r3, [pc, #208]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d208      	bcs.n	8004bd4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bc2:	4b31      	ldr	r3, [pc, #196]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	492e      	ldr	r1, [pc, #184]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d010      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699a      	ldr	r2, [r3, #24]
 8004be4:	4b28      	ldr	r3, [pc, #160]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d208      	bcs.n	8004c02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bf0:	4b25      	ldr	r3, [pc, #148]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	4922      	ldr	r1, [pc, #136]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d010      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69da      	ldr	r2, [r3, #28]
 8004c12:	4b1d      	ldr	r3, [pc, #116]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d208      	bcs.n	8004c30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	4917      	ldr	r1, [pc, #92]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c30:	f000 f834 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b14      	ldr	r3, [pc, #80]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	4912      	ldr	r1, [pc, #72]	@ (8004c8c <HAL_RCC_ClockConfig+0x35c>)
 8004c42:	5ccb      	ldrb	r3, [r1, r3]
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c88 <HAL_RCC_ClockConfig+0x358>)
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	4a0d      	ldr	r2, [pc, #52]	@ (8004c8c <HAL_RCC_ClockConfig+0x35c>)
 8004c58:	5cd3      	ldrb	r3, [r2, r3]
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
 8004c64:	4a0a      	ldr	r2, [pc, #40]	@ (8004c90 <HAL_RCC_ClockConfig+0x360>)
 8004c66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c68:	4a0a      	ldr	r2, [pc, #40]	@ (8004c94 <HAL_RCC_ClockConfig+0x364>)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c98 <HAL_RCC_ClockConfig+0x368>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fc f8a8 	bl	8000dc8 <HAL_InitTick>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	58024400 	.word	0x58024400
 8004c8c:	08010c4c 	.word	0x08010c4c
 8004c90:	20000004 	.word	0x20000004
 8004c94:	20000000 	.word	0x20000000
 8004c98:	20000008 	.word	0x20000008

08004c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b089      	sub	sp, #36	@ 0x24
 8004ca0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ca2:	4bb3      	ldr	r3, [pc, #716]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004caa:	2b18      	cmp	r3, #24
 8004cac:	f200 8155 	bhi.w	8004f5a <HAL_RCC_GetSysClockFreq+0x2be>
 8004cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004d1d 	.word	0x08004d1d
 8004cbc:	08004f5b 	.word	0x08004f5b
 8004cc0:	08004f5b 	.word	0x08004f5b
 8004cc4:	08004f5b 	.word	0x08004f5b
 8004cc8:	08004f5b 	.word	0x08004f5b
 8004ccc:	08004f5b 	.word	0x08004f5b
 8004cd0:	08004f5b 	.word	0x08004f5b
 8004cd4:	08004f5b 	.word	0x08004f5b
 8004cd8:	08004d43 	.word	0x08004d43
 8004cdc:	08004f5b 	.word	0x08004f5b
 8004ce0:	08004f5b 	.word	0x08004f5b
 8004ce4:	08004f5b 	.word	0x08004f5b
 8004ce8:	08004f5b 	.word	0x08004f5b
 8004cec:	08004f5b 	.word	0x08004f5b
 8004cf0:	08004f5b 	.word	0x08004f5b
 8004cf4:	08004f5b 	.word	0x08004f5b
 8004cf8:	08004d49 	.word	0x08004d49
 8004cfc:	08004f5b 	.word	0x08004f5b
 8004d00:	08004f5b 	.word	0x08004f5b
 8004d04:	08004f5b 	.word	0x08004f5b
 8004d08:	08004f5b 	.word	0x08004f5b
 8004d0c:	08004f5b 	.word	0x08004f5b
 8004d10:	08004f5b 	.word	0x08004f5b
 8004d14:	08004f5b 	.word	0x08004f5b
 8004d18:	08004d4f 	.word	0x08004d4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d1c:	4b94      	ldr	r3, [pc, #592]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d009      	beq.n	8004d3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d28:	4b91      	ldr	r3, [pc, #580]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	08db      	lsrs	r3, r3, #3
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	4a90      	ldr	r2, [pc, #576]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
 8004d38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004d3a:	e111      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d3c:	4b8d      	ldr	r3, [pc, #564]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d3e:	61bb      	str	r3, [r7, #24]
      break;
 8004d40:	e10e      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004d42:	4b8d      	ldr	r3, [pc, #564]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d44:	61bb      	str	r3, [r7, #24]
      break;
 8004d46:	e10b      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004d48:	4b8c      	ldr	r3, [pc, #560]	@ (8004f7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d4a:	61bb      	str	r3, [r7, #24]
      break;
 8004d4c:	e108      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d4e:	4b88      	ldr	r3, [pc, #544]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004d58:	4b85      	ldr	r3, [pc, #532]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d64:	4b82      	ldr	r3, [pc, #520]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d6e:	4b80      	ldr	r3, [pc, #512]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d72:	08db      	lsrs	r3, r3, #3
 8004d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80e1 	beq.w	8004f54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	f000 8083 	beq.w	8004ea0 <HAL_RCC_GetSysClockFreq+0x204>
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	f200 80a1 	bhi.w	8004ee4 <HAL_RCC_GetSysClockFreq+0x248>
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <HAL_RCC_GetSysClockFreq+0x114>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d056      	beq.n	8004e5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004dae:	e099      	b.n	8004ee4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004db0:	4b6f      	ldr	r3, [pc, #444]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d02d      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dbc:	4b6c      	ldr	r3, [pc, #432]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	08db      	lsrs	r3, r3, #3
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	4a6b      	ldr	r2, [pc, #428]	@ (8004f74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dcc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	ee07 3a90 	vmov	s15, r3
 8004dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de6:	4b62      	ldr	r3, [pc, #392]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dfa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004e16:	e087      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004f84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2a:	4b51      	ldr	r3, [pc, #324]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e5a:	e065      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004f88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6e:	4b40      	ldr	r3, [pc, #256]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e9e:	e043      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eaa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004f8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8004eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ec6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ede:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ee2:	e021      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004f88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004f80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004f28:	4b11      	ldr	r3, [pc, #68]	@ (8004f70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2c:	0a5b      	lsrs	r3, r3, #9
 8004f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f32:	3301      	adds	r3, #1
 8004f34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f4c:	ee17 3a90 	vmov	r3, s15
 8004f50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004f52:	e005      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	61bb      	str	r3, [r7, #24]
      break;
 8004f58:	e002      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004f5a:	4b07      	ldr	r3, [pc, #28]	@ (8004f78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f5c:	61bb      	str	r3, [r7, #24]
      break;
 8004f5e:	bf00      	nop
  }

  return sysclockfreq;
 8004f60:	69bb      	ldr	r3, [r7, #24]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3724      	adds	r7, #36	@ 0x24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	58024400 	.word	0x58024400
 8004f74:	03d09000 	.word	0x03d09000
 8004f78:	003d0900 	.word	0x003d0900
 8004f7c:	017d7840 	.word	0x017d7840
 8004f80:	46000000 	.word	0x46000000
 8004f84:	4c742400 	.word	0x4c742400
 8004f88:	4a742400 	.word	0x4a742400
 8004f8c:	4bbebc20 	.word	0x4bbebc20

08004f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f96:	f7ff fe81 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	4b10      	ldr	r3, [pc, #64]	@ (8004fe0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	0a1b      	lsrs	r3, r3, #8
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	490f      	ldr	r1, [pc, #60]	@ (8004fe4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fa8:	5ccb      	ldrb	r3, [r1, r3]
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	4a09      	ldr	r2, [pc, #36]	@ (8004fe4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fbe:	5cd3      	ldrb	r3, [r2, r3]
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fca:	4a07      	ldr	r2, [pc, #28]	@ (8004fe8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004fcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fce:	4a07      	ldr	r2, [pc, #28]	@ (8004fec <HAL_RCC_GetHCLKFreq+0x5c>)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004fd4:	4b04      	ldr	r3, [pc, #16]	@ (8004fe8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	58024400 	.word	0x58024400
 8004fe4:	08010c4c 	.word	0x08010c4c
 8004fe8:	20000004 	.word	0x20000004
 8004fec:	20000000 	.word	0x20000000

08004ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004ff4:	f7ff ffcc 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4b06      	ldr	r3, [pc, #24]	@ (8005014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	091b      	lsrs	r3, r3, #4
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	4904      	ldr	r1, [pc, #16]	@ (8005018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005006:	5ccb      	ldrb	r3, [r1, r3]
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005010:	4618      	mov	r0, r3
 8005012:	bd80      	pop	{r7, pc}
 8005014:	58024400 	.word	0x58024400
 8005018:	08010c4c 	.word	0x08010c4c

0800501c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800501c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005020:	b0cc      	sub	sp, #304	@ 0x130
 8005022:	af00      	add	r7, sp, #0
 8005024:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005028:	2300      	movs	r3, #0
 800502a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800502e:	2300      	movs	r3, #0
 8005030:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005034:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005040:	2500      	movs	r5, #0
 8005042:	ea54 0305 	orrs.w	r3, r4, r5
 8005046:	d049      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800504c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800504e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005052:	d02f      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005054:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005058:	d828      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800505a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800505e:	d01a      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005060:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005064:	d822      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800506a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800506e:	d007      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005070:	e01c      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005072:	4bb8      	ldr	r3, [pc, #736]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005076:	4ab7      	ldr	r2, [pc, #732]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800507c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800507e:	e01a      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005080:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005084:	3308      	adds	r3, #8
 8005086:	2102      	movs	r1, #2
 8005088:	4618      	mov	r0, r3
 800508a:	f002 fba1 	bl	80077d0 <RCCEx_PLL2_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005094:	e00f      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005096:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800509a:	3328      	adds	r3, #40	@ 0x28
 800509c:	2102      	movs	r1, #2
 800509e:	4618      	mov	r0, r3
 80050a0:	f002 fc48 	bl	8007934 <RCCEx_PLL3_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050aa:	e004      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80050b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80050be:	4ba5      	ldr	r3, [pc, #660]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80050c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050cc:	4aa1      	ldr	r2, [pc, #644]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050ce:	430b      	orrs	r3, r1
 80050d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80050d2:	e003      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80050e8:	f04f 0900 	mov.w	r9, #0
 80050ec:	ea58 0309 	orrs.w	r3, r8, r9
 80050f0:	d047      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80050f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f8:	2b04      	cmp	r3, #4
 80050fa:	d82a      	bhi.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80050fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005104 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	08005119 	.word	0x08005119
 8005108:	08005127 	.word	0x08005127
 800510c:	0800513d 	.word	0x0800513d
 8005110:	0800515b 	.word	0x0800515b
 8005114:	0800515b 	.word	0x0800515b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005118:	4b8e      	ldr	r3, [pc, #568]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800511a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511c:	4a8d      	ldr	r2, [pc, #564]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800511e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005122:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005124:	e01a      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005126:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800512a:	3308      	adds	r3, #8
 800512c:	2100      	movs	r1, #0
 800512e:	4618      	mov	r0, r3
 8005130:	f002 fb4e 	bl	80077d0 <RCCEx_PLL2_Config>
 8005134:	4603      	mov	r3, r0
 8005136:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800513a:	e00f      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800513c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005140:	3328      	adds	r3, #40	@ 0x28
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f002 fbf5 	bl	8007934 <RCCEx_PLL3_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005150:	e004      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005158:	e000      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800515a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800515c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005164:	4b7b      	ldr	r3, [pc, #492]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005168:	f023 0107 	bic.w	r1, r3, #7
 800516c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005172:	4a78      	ldr	r2, [pc, #480]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005174:	430b      	orrs	r3, r1
 8005176:	6513      	str	r3, [r2, #80]	@ 0x50
 8005178:	e003      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800517e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005182:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800518e:	f04f 0b00 	mov.w	fp, #0
 8005192:	ea5a 030b 	orrs.w	r3, sl, fp
 8005196:	d04c      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005198:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800519c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800519e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051a2:	d030      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80051a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051a8:	d829      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80051ac:	d02d      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80051ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80051b0:	d825      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051b2:	2b80      	cmp	r3, #128	@ 0x80
 80051b4:	d018      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80051b6:	2b80      	cmp	r3, #128	@ 0x80
 80051b8:	d821      	bhi.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80051be:	2b40      	cmp	r3, #64	@ 0x40
 80051c0:	d007      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80051c2:	e01c      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051c4:	4b63      	ldr	r3, [pc, #396]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c8:	4a62      	ldr	r2, [pc, #392]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051d0:	e01c      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051d6:	3308      	adds	r3, #8
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f002 faf8 	bl	80077d0 <RCCEx_PLL2_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051e6:	e011      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051ec:	3328      	adds	r3, #40	@ 0x28
 80051ee:	2100      	movs	r1, #0
 80051f0:	4618      	mov	r0, r3
 80051f2:	f002 fb9f 	bl	8007934 <RCCEx_PLL3_Config>
 80051f6:	4603      	mov	r3, r0
 80051f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051fc:	e006      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005204:	e002      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005206:	bf00      	nop
 8005208:	e000      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800520a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800520c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005214:	4b4f      	ldr	r3, [pc, #316]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005218:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800521c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005222:	4a4c      	ldr	r2, [pc, #304]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005224:	430b      	orrs	r3, r1
 8005226:	6513      	str	r3, [r2, #80]	@ 0x50
 8005228:	e003      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800522e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800523e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005242:	2300      	movs	r3, #0
 8005244:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005248:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800524c:	460b      	mov	r3, r1
 800524e:	4313      	orrs	r3, r2
 8005250:	d053      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005256:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800525a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800525e:	d035      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005260:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005264:	d82e      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005266:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800526a:	d031      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800526c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005270:	d828      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005272:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005276:	d01a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005278:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800527c:	d822      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005282:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005286:	d007      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005288:	e01c      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800528a:	4b32      	ldr	r3, [pc, #200]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800528c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528e:	4a31      	ldr	r2, [pc, #196]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005294:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005296:	e01c      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005298:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800529c:	3308      	adds	r3, #8
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f002 fa95 	bl	80077d0 <RCCEx_PLL2_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80052ac:	e011      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052b2:	3328      	adds	r3, #40	@ 0x28
 80052b4:	2100      	movs	r1, #0
 80052b6:	4618      	mov	r0, r3
 80052b8:	f002 fb3c 	bl	8007934 <RCCEx_PLL3_Config>
 80052bc:	4603      	mov	r3, r0
 80052be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052c2:	e006      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80052ca:	e002      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80052cc:	bf00      	nop
 80052ce:	e000      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80052d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10b      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80052da:	4b1e      	ldr	r3, [pc, #120]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052de:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80052e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80052ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052ec:	430b      	orrs	r3, r1
 80052ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80052f0:	e003      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80052f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80052fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005306:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800530a:	2300      	movs	r3, #0
 800530c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005310:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005314:	460b      	mov	r3, r1
 8005316:	4313      	orrs	r3, r2
 8005318:	d056      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800531a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800531e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005322:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005326:	d038      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005328:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800532c:	d831      	bhi.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800532e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005332:	d034      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005334:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005338:	d82b      	bhi.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800533a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800533e:	d01d      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005340:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005344:	d825      	bhi.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005346:	2b00      	cmp	r3, #0
 8005348:	d006      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800534a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800534e:	d00a      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005350:	e01f      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005352:	bf00      	nop
 8005354:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005358:	4ba2      	ldr	r3, [pc, #648]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800535a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535c:	4aa1      	ldr	r2, [pc, #644]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800535e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005364:	e01c      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005366:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800536a:	3308      	adds	r3, #8
 800536c:	2100      	movs	r1, #0
 800536e:	4618      	mov	r0, r3
 8005370:	f002 fa2e 	bl	80077d0 <RCCEx_PLL2_Config>
 8005374:	4603      	mov	r3, r0
 8005376:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800537a:	e011      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800537c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005380:	3328      	adds	r3, #40	@ 0x28
 8005382:	2100      	movs	r1, #0
 8005384:	4618      	mov	r0, r3
 8005386:	f002 fad5 	bl	8007934 <RCCEx_PLL3_Config>
 800538a:	4603      	mov	r3, r0
 800538c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005390:	e006      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005398:	e002      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800539a:	bf00      	nop
 800539c:	e000      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800539e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10b      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80053a8:	4b8e      	ldr	r3, [pc, #568]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80053b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053b8:	4a8a      	ldr	r2, [pc, #552]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ba:	430b      	orrs	r3, r1
 80053bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80053be:	e003      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80053d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80053d8:	2300      	movs	r3, #0
 80053da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80053de:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80053e2:	460b      	mov	r3, r1
 80053e4:	4313      	orrs	r3, r2
 80053e6:	d03a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80053e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ee:	2b30      	cmp	r3, #48	@ 0x30
 80053f0:	d01f      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80053f2:	2b30      	cmp	r3, #48	@ 0x30
 80053f4:	d819      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d00c      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	d815      	bhi.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d019      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005402:	2b10      	cmp	r3, #16
 8005404:	d111      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005406:	4b77      	ldr	r3, [pc, #476]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540a:	4a76      	ldr	r2, [pc, #472]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800540c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005412:	e011      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005414:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005418:	3308      	adds	r3, #8
 800541a:	2102      	movs	r1, #2
 800541c:	4618      	mov	r0, r3
 800541e:	f002 f9d7 	bl	80077d0 <RCCEx_PLL2_Config>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005428:	e006      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005430:	e002      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005432:	bf00      	nop
 8005434:	e000      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005438:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005440:	4b68      	ldr	r3, [pc, #416]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005444:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005448:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800544c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800544e:	4a65      	ldr	r2, [pc, #404]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005450:	430b      	orrs	r3, r1
 8005452:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005454:	e003      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005456:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800545a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800545e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800546a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800546e:	2300      	movs	r3, #0
 8005470:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005474:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005478:	460b      	mov	r3, r1
 800547a:	4313      	orrs	r3, r2
 800547c:	d051      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800547e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005484:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005488:	d035      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800548a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800548e:	d82e      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005490:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005494:	d031      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005496:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800549a:	d828      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800549c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054a0:	d01a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80054a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054a6:	d822      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80054ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b0:	d007      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80054b2:	e01c      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b4:	4b4b      	ldr	r3, [pc, #300]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	4a4a      	ldr	r2, [pc, #296]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054c0:	e01c      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054c6:	3308      	adds	r3, #8
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f002 f980 	bl	80077d0 <RCCEx_PLL2_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054d6:	e011      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054dc:	3328      	adds	r3, #40	@ 0x28
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f002 fa27 	bl	8007934 <RCCEx_PLL3_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054ec:	e006      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80054f4:	e002      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054f6:	bf00      	nop
 80054f8:	e000      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005504:	4b37      	ldr	r3, [pc, #220]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005508:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800550c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005512:	4a34      	ldr	r2, [pc, #208]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005514:	430b      	orrs	r3, r1
 8005516:	6513      	str	r3, [r2, #80]	@ 0x50
 8005518:	e003      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800551e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800552e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005532:	2300      	movs	r3, #0
 8005534:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005538:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800553c:	460b      	mov	r3, r1
 800553e:	4313      	orrs	r3, r2
 8005540:	d056      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005546:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800554c:	d033      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800554e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005552:	d82c      	bhi.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005554:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005558:	d02f      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800555a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800555e:	d826      	bhi.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005560:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005564:	d02b      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005566:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800556a:	d820      	bhi.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 800556c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005570:	d012      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005572:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005576:	d81a      	bhi.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d022      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800557c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005580:	d115      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005582:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005586:	3308      	adds	r3, #8
 8005588:	2101      	movs	r1, #1
 800558a:	4618      	mov	r0, r3
 800558c:	f002 f920 	bl	80077d0 <RCCEx_PLL2_Config>
 8005590:	4603      	mov	r3, r0
 8005592:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005596:	e015      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800559c:	3328      	adds	r3, #40	@ 0x28
 800559e:	2101      	movs	r1, #1
 80055a0:	4618      	mov	r0, r3
 80055a2:	f002 f9c7 	bl	8007934 <RCCEx_PLL3_Config>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80055ac:	e00a      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80055b4:	e006      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055b6:	bf00      	nop
 80055b8:	e004      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055ba:	bf00      	nop
 80055bc:	e002      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055be:	bf00      	nop
 80055c0:	e000      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10d      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80055cc:	4b05      	ldr	r3, [pc, #20]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80055d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055da:	4a02      	ldr	r2, [pc, #8]	@ (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055dc:	430b      	orrs	r3, r1
 80055de:	6513      	str	r3, [r2, #80]	@ 0x50
 80055e0:	e006      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80055e2:	bf00      	nop
 80055e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80055f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80055fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005600:	2300      	movs	r3, #0
 8005602:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005606:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800560a:	460b      	mov	r3, r1
 800560c:	4313      	orrs	r3, r2
 800560e:	d055      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005610:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005614:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005618:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800561c:	d033      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800561e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005622:	d82c      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005628:	d02f      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800562e:	d826      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005630:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005634:	d02b      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005636:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800563a:	d820      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800563c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005640:	d012      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005642:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005646:	d81a      	bhi.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d022      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800564c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005650:	d115      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005652:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005656:	3308      	adds	r3, #8
 8005658:	2101      	movs	r1, #1
 800565a:	4618      	mov	r0, r3
 800565c:	f002 f8b8 	bl	80077d0 <RCCEx_PLL2_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005666:	e015      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800566c:	3328      	adds	r3, #40	@ 0x28
 800566e:	2101      	movs	r1, #1
 8005670:	4618      	mov	r0, r3
 8005672:	f002 f95f 	bl	8007934 <RCCEx_PLL3_Config>
 8005676:	4603      	mov	r3, r0
 8005678:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800567c:	e00a      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005684:	e006      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005686:	bf00      	nop
 8005688:	e004      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800568a:	bf00      	nop
 800568c:	e002      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005694:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800569c:	4bb6      	ldr	r3, [pc, #728]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800569e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80056a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056ac:	4ab2      	ldr	r2, [pc, #712]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056ae:	430b      	orrs	r3, r1
 80056b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80056b2:	e003      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056b8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80056bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80056c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056cc:	2300      	movs	r3, #0
 80056ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4313      	orrs	r3, r2
 80056da:	d02a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80056dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d011      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80056e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056ea:	d10a      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056f0:	3308      	adds	r3, #8
 80056f2:	2101      	movs	r1, #1
 80056f4:	4618      	mov	r0, r3
 80056f6:	f002 f86b 	bl	80077d0 <RCCEx_PLL2_Config>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005700:	e004      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005708:	e000      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800570a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800570c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005714:	4b98      	ldr	r3, [pc, #608]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005718:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800571c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005722:	4a95      	ldr	r2, [pc, #596]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005724:	430b      	orrs	r3, r1
 8005726:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005728:	e003      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800572e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005732:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800573e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005742:	2300      	movs	r3, #0
 8005744:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005748:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800574c:	460b      	mov	r3, r1
 800574e:	4313      	orrs	r3, r2
 8005750:	d037      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005752:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800575c:	d00e      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x760>
 800575e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005762:	d816      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005764:	2b00      	cmp	r3, #0
 8005766:	d018      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005768:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800576c:	d111      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800576e:	4b82      	ldr	r3, [pc, #520]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005772:	4a81      	ldr	r2, [pc, #516]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005778:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800577a:	e00f      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800577c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005780:	3308      	adds	r3, #8
 8005782:	2101      	movs	r1, #1
 8005784:	4618      	mov	r0, r3
 8005786:	f002 f823 	bl	80077d0 <RCCEx_PLL2_Config>
 800578a:	4603      	mov	r3, r0
 800578c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005790:	e004      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005798:	e000      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800579a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800579c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057a4:	4b74      	ldr	r3, [pc, #464]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80057ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b2:	4a71      	ldr	r2, [pc, #452]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057b4:	430b      	orrs	r3, r1
 80057b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80057b8:	e003      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80057ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057d2:	2300      	movs	r3, #0
 80057d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80057d8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80057dc:	460b      	mov	r3, r1
 80057de:	4313      	orrs	r3, r2
 80057e0:	d03a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80057e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d81d      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80057ec:	a201      	add	r2, pc, #4	@ (adr r2, 80057f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	08005831 	.word	0x08005831
 80057f8:	08005805 	.word	0x08005805
 80057fc:	08005813 	.word	0x08005813
 8005800:	08005831 	.word	0x08005831
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005804:	4b5c      	ldr	r3, [pc, #368]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	4a5b      	ldr	r2, [pc, #364]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800580a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800580e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005810:	e00f      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005812:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005816:	3308      	adds	r3, #8
 8005818:	2102      	movs	r1, #2
 800581a:	4618      	mov	r0, r3
 800581c:	f001 ffd8 	bl	80077d0 <RCCEx_PLL2_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005826:	e004      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800582e:	e000      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005830:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005832:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800583a:	4b4f      	ldr	r3, [pc, #316]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800583c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800583e:	f023 0103 	bic.w	r1, r3, #3
 8005842:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005848:	4a4b      	ldr	r2, [pc, #300]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800584a:	430b      	orrs	r3, r1
 800584c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800584e:	e003      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005850:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005854:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005858:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005864:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005868:	2300      	movs	r3, #0
 800586a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800586e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005872:	460b      	mov	r3, r1
 8005874:	4313      	orrs	r3, r2
 8005876:	f000 80a0 	beq.w	80059ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800587a:	4b40      	ldr	r3, [pc, #256]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a3f      	ldr	r2, [pc, #252]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005884:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005886:	f7fb fae9 	bl	8000e5c <HAL_GetTick>
 800588a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800588e:	e00b      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005890:	f7fb fae4 	bl	8000e5c <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b64      	cmp	r3, #100	@ 0x64
 800589e:	d903      	bls.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80058a6:	e005      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058a8:	4b34      	ldr	r3, [pc, #208]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0ed      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80058b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d17a      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80058c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80058c8:	4053      	eors	r3, r2
 80058ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d015      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058d2:	4b29      	ldr	r3, [pc, #164]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058de:	4b26      	ldr	r3, [pc, #152]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e2:	4a25      	ldr	r2, [pc, #148]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ea:	4b23      	ldr	r3, [pc, #140]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ee:	4a22      	ldr	r2, [pc, #136]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80058f6:	4a20      	ldr	r2, [pc, #128]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80058fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80058fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005902:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005906:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590a:	d118      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590c:	f7fb faa6 	bl	8000e5c <HAL_GetTick>
 8005910:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005914:	e00d      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005916:	f7fb faa1 	bl	8000e5c <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005920:	1ad2      	subs	r2, r2, r3
 8005922:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005926:	429a      	cmp	r2, r3
 8005928:	d903      	bls.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8005930:	e005      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005932:	4b11      	ldr	r3, [pc, #68]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0eb      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800593e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005942:	2b00      	cmp	r3, #0
 8005944:	d130      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005946:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800594a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800594e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005952:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005956:	d115      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005958:	4b07      	ldr	r3, [pc, #28]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005960:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005964:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005968:	091a      	lsrs	r2, r3, #4
 800596a:	4b05      	ldr	r3, [pc, #20]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800596c:	4013      	ands	r3, r2
 800596e:	4a02      	ldr	r2, [pc, #8]	@ (8005978 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005970:	430b      	orrs	r3, r1
 8005972:	6113      	str	r3, [r2, #16]
 8005974:	e00c      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005976:	bf00      	nop
 8005978:	58024400 	.word	0x58024400
 800597c:	58024800 	.word	0x58024800
 8005980:	00ffffcf 	.word	0x00ffffcf
 8005984:	4bd4      	ldr	r3, [pc, #848]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	4ad3      	ldr	r2, [pc, #844]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800598a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800598e:	6113      	str	r3, [r2, #16]
 8005990:	4bd1      	ldr	r3, [pc, #836]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005992:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005994:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005998:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800599c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a0:	4acd      	ldr	r2, [pc, #820]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80059a2:	430b      	orrs	r3, r1
 80059a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80059a6:	e008      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059ac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80059b0:	e003      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80059ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f002 0301 	and.w	r3, r2, #1
 80059c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059ca:	2300      	movs	r3, #0
 80059cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f000 808b 	beq.w	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80059dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059e4:	2b28      	cmp	r3, #40	@ 0x28
 80059e6:	d86b      	bhi.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80059e8:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80059ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ee:	bf00      	nop
 80059f0:	08005ac9 	.word	0x08005ac9
 80059f4:	08005ac1 	.word	0x08005ac1
 80059f8:	08005ac1 	.word	0x08005ac1
 80059fc:	08005ac1 	.word	0x08005ac1
 8005a00:	08005ac1 	.word	0x08005ac1
 8005a04:	08005ac1 	.word	0x08005ac1
 8005a08:	08005ac1 	.word	0x08005ac1
 8005a0c:	08005ac1 	.word	0x08005ac1
 8005a10:	08005a95 	.word	0x08005a95
 8005a14:	08005ac1 	.word	0x08005ac1
 8005a18:	08005ac1 	.word	0x08005ac1
 8005a1c:	08005ac1 	.word	0x08005ac1
 8005a20:	08005ac1 	.word	0x08005ac1
 8005a24:	08005ac1 	.word	0x08005ac1
 8005a28:	08005ac1 	.word	0x08005ac1
 8005a2c:	08005ac1 	.word	0x08005ac1
 8005a30:	08005aab 	.word	0x08005aab
 8005a34:	08005ac1 	.word	0x08005ac1
 8005a38:	08005ac1 	.word	0x08005ac1
 8005a3c:	08005ac1 	.word	0x08005ac1
 8005a40:	08005ac1 	.word	0x08005ac1
 8005a44:	08005ac1 	.word	0x08005ac1
 8005a48:	08005ac1 	.word	0x08005ac1
 8005a4c:	08005ac1 	.word	0x08005ac1
 8005a50:	08005ac9 	.word	0x08005ac9
 8005a54:	08005ac1 	.word	0x08005ac1
 8005a58:	08005ac1 	.word	0x08005ac1
 8005a5c:	08005ac1 	.word	0x08005ac1
 8005a60:	08005ac1 	.word	0x08005ac1
 8005a64:	08005ac1 	.word	0x08005ac1
 8005a68:	08005ac1 	.word	0x08005ac1
 8005a6c:	08005ac1 	.word	0x08005ac1
 8005a70:	08005ac9 	.word	0x08005ac9
 8005a74:	08005ac1 	.word	0x08005ac1
 8005a78:	08005ac1 	.word	0x08005ac1
 8005a7c:	08005ac1 	.word	0x08005ac1
 8005a80:	08005ac1 	.word	0x08005ac1
 8005a84:	08005ac1 	.word	0x08005ac1
 8005a88:	08005ac1 	.word	0x08005ac1
 8005a8c:	08005ac1 	.word	0x08005ac1
 8005a90:	08005ac9 	.word	0x08005ac9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a98:	3308      	adds	r3, #8
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 fe97 	bl	80077d0 <RCCEx_PLL2_Config>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005aa8:	e00f      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005aaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aae:	3328      	adds	r3, #40	@ 0x28
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f001 ff3e 	bl	8007934 <RCCEx_PLL3_Config>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005abe:	e004      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ac6:	e000      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10b      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ad2:	4b81      	ldr	r3, [pc, #516]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005ada:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ae2:	4a7d      	ldr	r2, [pc, #500]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ae8:	e003      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005aee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005af2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	f002 0302 	and.w	r3, r2, #2
 8005afe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b02:	2300      	movs	r3, #0
 8005b04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005b08:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	d042      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005b12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b18:	2b05      	cmp	r3, #5
 8005b1a:	d825      	bhi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b24 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b22:	bf00      	nop
 8005b24:	08005b71 	.word	0x08005b71
 8005b28:	08005b3d 	.word	0x08005b3d
 8005b2c:	08005b53 	.word	0x08005b53
 8005b30:	08005b71 	.word	0x08005b71
 8005b34:	08005b71 	.word	0x08005b71
 8005b38:	08005b71 	.word	0x08005b71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b40:	3308      	adds	r3, #8
 8005b42:	2101      	movs	r1, #1
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 fe43 	bl	80077d0 <RCCEx_PLL2_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b50:	e00f      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b56:	3328      	adds	r3, #40	@ 0x28
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f001 feea 	bl	8007934 <RCCEx_PLL3_Config>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b66:	e004      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b6e:	e000      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b7a:	4b57      	ldr	r3, [pc, #348]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7e:	f023 0107 	bic.w	r1, r3, #7
 8005b82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b88:	4a53      	ldr	r2, [pc, #332]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b8a:	430b      	orrs	r3, r1
 8005b8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b8e:	e003      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b90:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b94:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	f002 0304 	and.w	r3, r2, #4
 8005ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	d044      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005bb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bc0:	2b05      	cmp	r3, #5
 8005bc2:	d825      	bhi.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bca:	bf00      	nop
 8005bcc:	08005c19 	.word	0x08005c19
 8005bd0:	08005be5 	.word	0x08005be5
 8005bd4:	08005bfb 	.word	0x08005bfb
 8005bd8:	08005c19 	.word	0x08005c19
 8005bdc:	08005c19 	.word	0x08005c19
 8005be0:	08005c19 	.word	0x08005c19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005be4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005be8:	3308      	adds	r3, #8
 8005bea:	2101      	movs	r1, #1
 8005bec:	4618      	mov	r0, r3
 8005bee:	f001 fdef 	bl	80077d0 <RCCEx_PLL2_Config>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005bf8:	e00f      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bfe:	3328      	adds	r3, #40	@ 0x28
 8005c00:	2101      	movs	r1, #1
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 fe96 	bl	8007934 <RCCEx_PLL3_Config>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005c0e:	e004      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c16:	e000      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10b      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c22:	4b2d      	ldr	r3, [pc, #180]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c26:	f023 0107 	bic.w	r1, r3, #7
 8005c2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c32:	4a29      	ldr	r2, [pc, #164]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c34:	430b      	orrs	r3, r1
 8005c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c38:	e003      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	f002 0320 	and.w	r3, r2, #32
 8005c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c52:	2300      	movs	r3, #0
 8005c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	d057      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005c62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c6e:	d035      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c74:	d82c      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c7a:	d031      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c80:	d826      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c86:	d02d      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005c88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c8c:	d820      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c92:	d012      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c98:	d81a      	bhi.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d024      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005c9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ca2:	d115      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ca4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ca8:	3308      	adds	r3, #8
 8005caa:	2100      	movs	r1, #0
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 fd8f 	bl	80077d0 <RCCEx_PLL2_Config>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005cb8:	e017      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cbe:	3328      	adds	r3, #40	@ 0x28
 8005cc0:	2102      	movs	r1, #2
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 fe36 	bl	8007934 <RCCEx_PLL3_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005cce:	e00c      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005cd6:	e008      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005cd8:	58024400 	.word	0x58024400
        break;
 8005cdc:	bf00      	nop
 8005cde:	e004      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ce0:	bf00      	nop
 8005ce2:	e002      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ce4:	bf00      	nop
 8005ce6:	e000      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10b      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cf2:	4bc2      	ldr	r3, [pc, #776]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d02:	4abe      	ldr	r2, [pc, #760]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d04:	430b      	orrs	r3, r1
 8005d06:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d08:	e003      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d22:	2300      	movs	r3, #0
 8005d24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005d28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	d055      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d3a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d3e:	d033      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005d40:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d44:	d82c      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d4a:	d02f      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d50:	d826      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d56:	d02b      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005d58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d5c:	d820      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d62:	d012      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005d64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d68:	d81a      	bhi.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d022      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d72:	d115      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d78:	3308      	adds	r3, #8
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 fd27 	bl	80077d0 <RCCEx_PLL2_Config>
 8005d82:	4603      	mov	r3, r0
 8005d84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d88:	e015      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d8e:	3328      	adds	r3, #40	@ 0x28
 8005d90:	2102      	movs	r1, #2
 8005d92:	4618      	mov	r0, r3
 8005d94:	f001 fdce 	bl	8007934 <RCCEx_PLL3_Config>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d9e:	e00a      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005da6:	e006      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005da8:	bf00      	nop
 8005daa:	e004      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005dac:	bf00      	nop
 8005dae:	e002      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005db0:	bf00      	nop
 8005db2:	e000      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10b      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dbe:	4b8f      	ldr	r3, [pc, #572]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005dc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005dce:	4a8b      	ldr	r2, [pc, #556]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005dd0:	430b      	orrs	r3, r1
 8005dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dd4:	e003      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dda:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005dde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005dea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005dee:	2300      	movs	r3, #0
 8005df0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005df4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	d055      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005dfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e06:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005e0a:	d033      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005e0c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005e10:	d82c      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005e12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e16:	d02f      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e1c:	d826      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005e1e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005e22:	d02b      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005e24:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005e28:	d820      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005e2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e2e:	d012      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005e30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e34:	d81a      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d022      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005e3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e3e:	d115      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e44:	3308      	adds	r3, #8
 8005e46:	2100      	movs	r1, #0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f001 fcc1 	bl	80077d0 <RCCEx_PLL2_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e54:	e015      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e5a:	3328      	adds	r3, #40	@ 0x28
 8005e5c:	2102      	movs	r1, #2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f001 fd68 	bl	8007934 <RCCEx_PLL3_Config>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e6a:	e00a      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e72:	e006      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e74:	bf00      	nop
 8005e76:	e004      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e78:	bf00      	nop
 8005e7a:	e002      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e7c:	bf00      	nop
 8005e7e:	e000      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10b      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005e92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e9a:	4a58      	ldr	r2, [pc, #352]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ea0:	e003      	b.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ea6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005eaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f002 0308 	and.w	r3, r2, #8
 8005eb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ec0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	d01e      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005eca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed6:	d10c      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005edc:	3328      	adds	r3, #40	@ 0x28
 8005ede:	2102      	movs	r1, #2
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f001 fd27 	bl	8007934 <RCCEx_PLL3_Config>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ef2:	4b42      	ldr	r3, [pc, #264]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f02:	4a3e      	ldr	r2, [pc, #248]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f04:	430b      	orrs	r3, r1
 8005f06:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f10:	f002 0310 	and.w	r3, r2, #16
 8005f14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f1e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005f22:	460b      	mov	r3, r1
 8005f24:	4313      	orrs	r3, r2
 8005f26:	d01e      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f34:	d10c      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f3a:	3328      	adds	r3, #40	@ 0x28
 8005f3c:	2102      	movs	r1, #2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 fcf8 	bl	8007934 <RCCEx_PLL3_Config>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f50:	4b2a      	ldr	r3, [pc, #168]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f54:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f60:	4a26      	ldr	r2, [pc, #152]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005f72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f76:	2300      	movs	r3, #0
 8005f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f7c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005f80:	460b      	mov	r3, r1
 8005f82:	4313      	orrs	r3, r2
 8005f84:	d040      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f92:	d022      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8005f94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f98:	d81b      	bhi.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fa2:	d00b      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8005fa4:	e015      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005faa:	3308      	adds	r3, #8
 8005fac:	2100      	movs	r1, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 fc0e 	bl	80077d0 <RCCEx_PLL2_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005fba:	e00f      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fc0:	3328      	adds	r3, #40	@ 0x28
 8005fc2:	2102      	movs	r1, #2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 fcb5 	bl	8007934 <RCCEx_PLL3_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005fd0:	e004      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005fd8:	e000      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8005fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fdc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10d      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fe4:	4b05      	ldr	r3, [pc, #20]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005fec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ff0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ff4:	4a01      	ldr	r2, [pc, #4]	@ (8005ffc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ff6:	430b      	orrs	r3, r1
 8005ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ffa:	e005      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005ffc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006000:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006004:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006010:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006014:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006016:	2300      	movs	r3, #0
 8006018:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800601a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800601e:	460b      	mov	r3, r1
 8006020:	4313      	orrs	r3, r2
 8006022:	d03b      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006024:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800602c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006030:	d01f      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006032:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006036:	d818      	bhi.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006038:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800603c:	d003      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800603e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006042:	d007      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006044:	e011      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006046:	4b64      	ldr	r3, [pc, #400]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604a:	4a63      	ldr	r2, [pc, #396]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800604c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006050:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006052:	e00f      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006054:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006058:	3328      	adds	r3, #40	@ 0x28
 800605a:	2101      	movs	r1, #1
 800605c:	4618      	mov	r0, r3
 800605e:	f001 fc69 	bl	8007934 <RCCEx_PLL3_Config>
 8006062:	4603      	mov	r3, r0
 8006064:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006068:	e004      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006070:	e000      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8006072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006074:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10b      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800607c:	4b56      	ldr	r3, [pc, #344]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800607e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006080:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006084:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006088:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800608c:	4a52      	ldr	r2, [pc, #328]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800608e:	430b      	orrs	r3, r1
 8006090:	6553      	str	r3, [r2, #84]	@ 0x54
 8006092:	e003      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006094:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006098:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800609c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80060a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80060aa:	2300      	movs	r3, #0
 80060ac:	677b      	str	r3, [r7, #116]	@ 0x74
 80060ae:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80060b2:	460b      	mov	r3, r1
 80060b4:	4313      	orrs	r3, r2
 80060b6:	d031      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80060b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80060c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060c6:	d007      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80060c8:	e011      	b.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ca:	4b43      	ldr	r3, [pc, #268]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80060cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ce:	4a42      	ldr	r2, [pc, #264]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80060d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80060d6:	e00e      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060dc:	3308      	adds	r3, #8
 80060de:	2102      	movs	r1, #2
 80060e0:	4618      	mov	r0, r3
 80060e2:	f001 fb75 	bl	80077d0 <RCCEx_PLL2_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80060ec:	e003      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80060fe:	4b36      	ldr	r3, [pc, #216]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006102:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006106:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800610a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610c:	4a32      	ldr	r2, [pc, #200]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800610e:	430b      	orrs	r3, r1
 8006110:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006112:	e003      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006114:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006118:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800611c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006128:	66bb      	str	r3, [r7, #104]	@ 0x68
 800612a:	2300      	movs	r3, #0
 800612c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800612e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006132:	460b      	mov	r3, r1
 8006134:	4313      	orrs	r3, r2
 8006136:	d00c      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006138:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800613c:	3328      	adds	r3, #40	@ 0x28
 800613e:	2102      	movs	r1, #2
 8006140:	4618      	mov	r0, r3
 8006142:	f001 fbf7 	bl	8007934 <RCCEx_PLL3_Config>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006152:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800615e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006160:	2300      	movs	r3, #0
 8006162:	667b      	str	r3, [r7, #100]	@ 0x64
 8006164:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006168:	460b      	mov	r3, r1
 800616a:	4313      	orrs	r3, r2
 800616c:	d03a      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800616e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006176:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800617a:	d018      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800617c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006180:	d811      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006186:	d014      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800618c:	d80b      	bhi.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d011      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006196:	d106      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006198:	4b0f      	ldr	r3, [pc, #60]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800619a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619c:	4a0e      	ldr	r2, [pc, #56]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800619e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80061a4:	e008      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80061ac:	e004      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80061ae:	bf00      	nop
 80061b0:	e002      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80061b2:	bf00      	nop
 80061b4:	e000      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80061b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10d      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061c0:	4b05      	ldr	r3, [pc, #20]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80061c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061c4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061d0:	4a01      	ldr	r2, [pc, #4]	@ (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80061d2:	430b      	orrs	r3, r1
 80061d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80061d6:	e005      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80061d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061e0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80061f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061f2:	2300      	movs	r3, #0
 80061f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80061fa:	460b      	mov	r3, r1
 80061fc:	4313      	orrs	r3, r2
 80061fe:	d009      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006200:	4baa      	ldr	r3, [pc, #680]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006204:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006208:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800620c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800620e:	4aa7      	ldr	r2, [pc, #668]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006210:	430b      	orrs	r3, r1
 8006212:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006214:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006220:	653b      	str	r3, [r7, #80]	@ 0x50
 8006222:	2300      	movs	r3, #0
 8006224:	657b      	str	r3, [r7, #84]	@ 0x54
 8006226:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800622a:	460b      	mov	r3, r1
 800622c:	4313      	orrs	r3, r2
 800622e:	d00a      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006230:	4b9e      	ldr	r3, [pc, #632]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800623c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006240:	4a9a      	ldr	r2, [pc, #616]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006242:	430b      	orrs	r3, r1
 8006244:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006246:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006252:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006254:	2300      	movs	r3, #0
 8006256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006258:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800625c:	460b      	mov	r3, r1
 800625e:	4313      	orrs	r3, r2
 8006260:	d009      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006262:	4b92      	ldr	r3, [pc, #584]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006266:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800626a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800626e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006270:	4a8e      	ldr	r2, [pc, #568]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006272:	430b      	orrs	r3, r1
 8006274:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006276:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006282:	643b      	str	r3, [r7, #64]	@ 0x40
 8006284:	2300      	movs	r3, #0
 8006286:	647b      	str	r3, [r7, #68]	@ 0x44
 8006288:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800628c:	460b      	mov	r3, r1
 800628e:	4313      	orrs	r3, r2
 8006290:	d00e      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006292:	4b86      	ldr	r3, [pc, #536]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	4a85      	ldr	r2, [pc, #532]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006298:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800629c:	6113      	str	r3, [r2, #16]
 800629e:	4b83      	ldr	r3, [pc, #524]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062a0:	6919      	ldr	r1, [r3, #16]
 80062a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80062aa:	4a80      	ldr	r2, [pc, #512]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062ac:	430b      	orrs	r3, r1
 80062ae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80062b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80062bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062be:	2300      	movs	r3, #0
 80062c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80062c6:	460b      	mov	r3, r1
 80062c8:	4313      	orrs	r3, r2
 80062ca:	d009      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80062cc:	4b77      	ldr	r3, [pc, #476]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80062d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062da:	4a74      	ldr	r2, [pc, #464]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062dc:	430b      	orrs	r3, r1
 80062de:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80062ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ee:	2300      	movs	r3, #0
 80062f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062f2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80062f6:	460b      	mov	r3, r1
 80062f8:	4313      	orrs	r3, r2
 80062fa:	d00a      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062fc:	4b6b      	ldr	r3, [pc, #428]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006300:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006304:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800630c:	4a67      	ldr	r2, [pc, #412]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800630e:	430b      	orrs	r3, r1
 8006310:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006312:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631a:	2100      	movs	r1, #0
 800631c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006324:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006328:	460b      	mov	r3, r1
 800632a:	4313      	orrs	r3, r2
 800632c:	d011      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800632e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006332:	3308      	adds	r3, #8
 8006334:	2100      	movs	r1, #0
 8006336:	4618      	mov	r0, r3
 8006338:	f001 fa4a 	bl	80077d0 <RCCEx_PLL2_Config>
 800633c:	4603      	mov	r3, r0
 800633e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006342:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800634e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006352:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	2100      	movs	r1, #0
 800635c:	6239      	str	r1, [r7, #32]
 800635e:	f003 0302 	and.w	r3, r3, #2
 8006362:	627b      	str	r3, [r7, #36]	@ 0x24
 8006364:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006368:	460b      	mov	r3, r1
 800636a:	4313      	orrs	r3, r2
 800636c:	d011      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800636e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006372:	3308      	adds	r3, #8
 8006374:	2101      	movs	r1, #1
 8006376:	4618      	mov	r0, r3
 8006378:	f001 fa2a 	bl	80077d0 <RCCEx_PLL2_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006382:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800638e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	2100      	movs	r1, #0
 800639c:	61b9      	str	r1, [r7, #24]
 800639e:	f003 0304 	and.w	r3, r3, #4
 80063a2:	61fb      	str	r3, [r7, #28]
 80063a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80063a8:	460b      	mov	r3, r1
 80063aa:	4313      	orrs	r3, r2
 80063ac:	d011      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063b2:	3308      	adds	r3, #8
 80063b4:	2102      	movs	r1, #2
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 fa0a 	bl	80077d0 <RCCEx_PLL2_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80063c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80063d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063da:	2100      	movs	r1, #0
 80063dc:	6139      	str	r1, [r7, #16]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80063e8:	460b      	mov	r3, r1
 80063ea:	4313      	orrs	r3, r2
 80063ec:	d011      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063f2:	3328      	adds	r3, #40	@ 0x28
 80063f4:	2100      	movs	r1, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	f001 fa9c 	bl	8007934 <RCCEx_PLL3_Config>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8006402:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800640e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	2100      	movs	r1, #0
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006428:	460b      	mov	r3, r1
 800642a:	4313      	orrs	r3, r2
 800642c:	d011      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800642e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006432:	3328      	adds	r3, #40	@ 0x28
 8006434:	2101      	movs	r1, #1
 8006436:	4618      	mov	r0, r3
 8006438:	f001 fa7c 	bl	8007934 <RCCEx_PLL3_Config>
 800643c:	4603      	mov	r3, r0
 800643e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006442:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800644e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006452:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	2100      	movs	r1, #0
 800645c:	6039      	str	r1, [r7, #0]
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	607b      	str	r3, [r7, #4]
 8006464:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006468:	460b      	mov	r3, r1
 800646a:	4313      	orrs	r3, r2
 800646c:	d011      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800646e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006472:	3328      	adds	r3, #40	@ 0x28
 8006474:	2102      	movs	r1, #2
 8006476:	4618      	mov	r0, r3
 8006478:	f001 fa5c 	bl	8007934 <RCCEx_PLL3_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006482:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800648e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8006492:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	e000      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80064a6:	46bd      	mov	sp, r7
 80064a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ac:	58024400 	.word	0x58024400

080064b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b090      	sub	sp, #64	@ 0x40
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80064ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064be:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80064c2:	430b      	orrs	r3, r1
 80064c4:	f040 8094 	bne.w	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80064c8:	4b9e      	ldr	r3, [pc, #632]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80064d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d4:	2b04      	cmp	r3, #4
 80064d6:	f200 8087 	bhi.w	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80064da:	a201      	add	r2, pc, #4	@ (adr r2, 80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	080064f5 	.word	0x080064f5
 80064e4:	0800651d 	.word	0x0800651d
 80064e8:	08006545 	.word	0x08006545
 80064ec:	080065e1 	.word	0x080065e1
 80064f0:	0800656d 	.word	0x0800656d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064f4:	4b93      	ldr	r3, [pc, #588]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006500:	d108      	bne.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006506:	4618      	mov	r0, r3
 8006508:	f001 f810 	bl	800752c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800650c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006510:	f000 bd45 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006518:	f000 bd41 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800651c:	4b89      	ldr	r3, [pc, #548]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006528:	d108      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800652a:	f107 0318 	add.w	r3, r7, #24
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fd54 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006538:	f000 bd31 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006540:	f000 bd2d 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006544:	4b7f      	ldr	r3, [pc, #508]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800654c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006550:	d108      	bne.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006552:	f107 030c 	add.w	r3, r7, #12
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fe94 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006560:	f000 bd1d 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006568:	f000 bd19 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800656c:	4b75      	ldr	r3, [pc, #468]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800656e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006570:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006574:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006576:	4b73      	ldr	r3, [pc, #460]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b04      	cmp	r3, #4
 8006580:	d10c      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006584:	2b00      	cmp	r3, #0
 8006586:	d109      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006588:	4b6e      	ldr	r3, [pc, #440]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	08db      	lsrs	r3, r3, #3
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	4a6d      	ldr	r2, [pc, #436]	@ (8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006594:	fa22 f303 	lsr.w	r3, r2, r3
 8006598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800659a:	e01f      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800659c:	4b69      	ldr	r3, [pc, #420]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065a8:	d106      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80065aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065b0:	d102      	bne.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80065b2:	4b66      	ldr	r3, [pc, #408]	@ (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80065b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065b6:	e011      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065b8:	4b62      	ldr	r3, [pc, #392]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065c4:	d106      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80065c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065cc:	d102      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80065ce:	4b60      	ldr	r3, [pc, #384]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80065d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065d2:	e003      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80065d4:	2300      	movs	r3, #0
 80065d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80065d8:	f000 bce1 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80065dc:	f000 bcdf 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065e0:	4b5c      	ldr	r3, [pc, #368]	@ (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80065e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065e4:	f000 bcdb 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065ec:	f000 bcd7 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80065f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065f4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80065f8:	430b      	orrs	r3, r1
 80065fa:	f040 80ad 	bne.w	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80065fe:	4b51      	ldr	r3, [pc, #324]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006602:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006606:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800660e:	d056      	beq.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006616:	f200 8090 	bhi.w	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800661a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661c:	2bc0      	cmp	r3, #192	@ 0xc0
 800661e:	f000 8088 	beq.w	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006624:	2bc0      	cmp	r3, #192	@ 0xc0
 8006626:	f200 8088 	bhi.w	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662c:	2b80      	cmp	r3, #128	@ 0x80
 800662e:	d032      	beq.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006632:	2b80      	cmp	r3, #128	@ 0x80
 8006634:	f200 8081 	bhi.w	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800663e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006640:	2b40      	cmp	r3, #64	@ 0x40
 8006642:	d014      	beq.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006644:	e079      	b.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006646:	4b3f      	ldr	r3, [pc, #252]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800664e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006652:	d108      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006658:	4618      	mov	r0, r3
 800665a:	f000 ff67 	bl	800752c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800665e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006662:	f000 bc9c 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800666a:	f000 bc98 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800666e:	4b35      	ldr	r3, [pc, #212]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006676:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800667a:	d108      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800667c:	f107 0318 	add.w	r3, r7, #24
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fcab 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800668a:	f000 bc88 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006692:	f000 bc84 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006696:	4b2b      	ldr	r3, [pc, #172]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800669e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066a2:	d108      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066a4:	f107 030c 	add.w	r3, r7, #12
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fdeb 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066b2:	f000 bc74 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066ba:	f000 bc70 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066be:	4b21      	ldr	r3, [pc, #132]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0304 	and.w	r3, r3, #4
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d10c      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80066d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d109      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066da:	4b1a      	ldr	r3, [pc, #104]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	08db      	lsrs	r3, r3, #3
 80066e0:	f003 0303 	and.w	r3, r3, #3
 80066e4:	4a18      	ldr	r2, [pc, #96]	@ (8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80066e6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066ec:	e01f      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066ee:	4b15      	ldr	r3, [pc, #84]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066fa:	d106      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80066fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006702:	d102      	bne.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006704:	4b11      	ldr	r3, [pc, #68]	@ (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006708:	e011      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800670a:	4b0e      	ldr	r3, [pc, #56]	@ (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006716:	d106      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800671a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800671e:	d102      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006720:	4b0b      	ldr	r3, [pc, #44]	@ (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006724:	e003      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800672a:	f000 bc38 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800672e:	f000 bc36 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006732:	4b08      	ldr	r3, [pc, #32]	@ (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006736:	f000 bc32 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800673e:	f000 bc2e 	b.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006742:	bf00      	nop
 8006744:	58024400 	.word	0x58024400
 8006748:	03d09000 	.word	0x03d09000
 800674c:	003d0900 	.word	0x003d0900
 8006750:	017d7840 	.word	0x017d7840
 8006754:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800675c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006760:	430b      	orrs	r3, r1
 8006762:	f040 809c 	bne.w	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006766:	4b9e      	ldr	r3, [pc, #632]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800676a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800676e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006776:	d054      	beq.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800677e:	f200 808b 	bhi.w	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006784:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006788:	f000 8083 	beq.w	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006792:	f200 8081 	bhi.w	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800679c:	d02f      	beq.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800679e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067a4:	d878      	bhi.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d004      	beq.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067b2:	d012      	beq.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80067b4:	e070      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067b6:	4b8a      	ldr	r3, [pc, #552]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067c2:	d107      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 feaf 	bl	800752c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067d2:	e3e4      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067d4:	2300      	movs	r3, #0
 80067d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067d8:	e3e1      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067da:	4b81      	ldr	r3, [pc, #516]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067e6:	d107      	bne.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067e8:	f107 0318 	add.w	r3, r7, #24
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 fbf5 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067f6:	e3d2      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067fc:	e3cf      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067fe:	4b78      	ldr	r3, [pc, #480]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800680a:	d107      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800680c:	f107 030c 	add.w	r3, r7, #12
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fd37 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800681a:	e3c0      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006820:	e3bd      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006822:	4b6f      	ldr	r3, [pc, #444]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006826:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800682a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800682c:	4b6c      	ldr	r3, [pc, #432]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b04      	cmp	r3, #4
 8006836:	d10c      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800683a:	2b00      	cmp	r3, #0
 800683c:	d109      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800683e:	4b68      	ldr	r3, [pc, #416]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	08db      	lsrs	r3, r3, #3
 8006844:	f003 0303 	and.w	r3, r3, #3
 8006848:	4a66      	ldr	r2, [pc, #408]	@ (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800684a:	fa22 f303 	lsr.w	r3, r2, r3
 800684e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006850:	e01e      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006852:	4b63      	ldr	r3, [pc, #396]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800685a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800685e:	d106      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006862:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006866:	d102      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006868:	4b5f      	ldr	r3, [pc, #380]	@ (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800686a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800686c:	e010      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800686e:	4b5c      	ldr	r3, [pc, #368]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006876:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800687a:	d106      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800687c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800687e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006882:	d102      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006884:	4b59      	ldr	r3, [pc, #356]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006888:	e002      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800688e:	e386      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006890:	e385      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006892:	4b57      	ldr	r3, [pc, #348]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006896:	e382      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800689c:	e37f      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800689e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80068a6:	430b      	orrs	r3, r1
 80068a8:	f040 80a7 	bne.w	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80068ac:	4b4c      	ldr	r3, [pc, #304]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80068b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068bc:	d055      	beq.n	800696a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068c4:	f200 8096 	bhi.w	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80068ce:	f000 8084 	beq.w	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80068d8:	f200 808c 	bhi.w	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068e2:	d030      	beq.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80068e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068ea:	f200 8083 	bhi.w	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d004      	beq.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068fa:	d012      	beq.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80068fc:	e07a      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068fe:	4b38      	ldr	r3, [pc, #224]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006906:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800690a:	d107      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800690c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fe0b 	bl	800752c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800691a:	e340      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006920:	e33d      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006922:	4b2f      	ldr	r3, [pc, #188]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800692a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800692e:	d107      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006930:	f107 0318 	add.w	r3, r7, #24
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fb51 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800693e:	e32e      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006944:	e32b      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006946:	4b26      	ldr	r3, [pc, #152]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800694e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006952:	d107      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006954:	f107 030c 	add.w	r3, r7, #12
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fc93 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006962:	e31c      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006968:	e319      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800696a:	4b1d      	ldr	r3, [pc, #116]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800696c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800696e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006972:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006974:	4b1a      	ldr	r3, [pc, #104]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b04      	cmp	r3, #4
 800697e:	d10c      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006986:	4b16      	ldr	r3, [pc, #88]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	08db      	lsrs	r3, r3, #3
 800698c:	f003 0303 	and.w	r3, r3, #3
 8006990:	4a14      	ldr	r2, [pc, #80]	@ (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006992:	fa22 f303 	lsr.w	r3, r2, r3
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006998:	e01e      	b.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800699a:	4b11      	ldr	r3, [pc, #68]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069a6:	d106      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80069a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069ae:	d102      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069b0:	4b0d      	ldr	r3, [pc, #52]	@ (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069b4:	e010      	b.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069b6:	4b0a      	ldr	r3, [pc, #40]	@ (80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069c2:	d106      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80069c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069ca:	d102      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069cc:	4b07      	ldr	r3, [pc, #28]	@ (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80069ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069d0:	e002      	b.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80069d6:	e2e2      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069d8:	e2e1      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069da:	4b05      	ldr	r3, [pc, #20]	@ (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80069dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069de:	e2de      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069e0:	58024400 	.word	0x58024400
 80069e4:	03d09000 	.word	0x03d09000
 80069e8:	003d0900 	.word	0x003d0900
 80069ec:	017d7840 	.word	0x017d7840
 80069f0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069f8:	e2d1      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80069fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069fe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006a02:	430b      	orrs	r3, r1
 8006a04:	f040 809c 	bne.w	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006a08:	4b93      	ldr	r3, [pc, #588]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a0c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006a10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a18:	d054      	beq.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a20:	f200 808b 	bhi.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a2a:	f000 8083 	beq.w	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a34:	f200 8081 	bhi.w	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a3e:	d02f      	beq.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a46:	d878      	bhi.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d004      	beq.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a54:	d012      	beq.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006a56:	e070      	b.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a58:	4b7f      	ldr	r3, [pc, #508]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a64:	d107      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fd5e 	bl	800752c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a74:	e293      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a7a:	e290      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a7c:	4b76      	ldr	r3, [pc, #472]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a88:	d107      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a8a:	f107 0318 	add.w	r3, r7, #24
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 faa4 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a98:	e281      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a9e:	e27e      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006aa0:	4b6d      	ldr	r3, [pc, #436]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aac:	d107      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aae:	f107 030c 	add.w	r3, r7, #12
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fbe6 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006abc:	e26f      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac2:	e26c      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ac4:	4b64      	ldr	r3, [pc, #400]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ac8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006acc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ace:	4b62      	ldr	r3, [pc, #392]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0304 	and.w	r3, r3, #4
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d10c      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ae0:	4b5d      	ldr	r3, [pc, #372]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	08db      	lsrs	r3, r3, #3
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	4a5c      	ldr	r2, [pc, #368]	@ (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006aec:	fa22 f303 	lsr.w	r3, r2, r3
 8006af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006af2:	e01e      	b.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006af4:	4b58      	ldr	r3, [pc, #352]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b00:	d106      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b08:	d102      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b0a:	4b55      	ldr	r3, [pc, #340]	@ (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b0e:	e010      	b.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b10:	4b51      	ldr	r3, [pc, #324]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b1c:	d106      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b24:	d102      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b26:	4b4f      	ldr	r3, [pc, #316]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b2a:	e002      	b.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006b30:	e235      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b32:	e234      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b34:	4b4c      	ldr	r3, [pc, #304]	@ (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b38:	e231      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b3e:	e22e      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b44:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	f040 808f 	bne.w	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006b4e:	4b42      	ldr	r3, [pc, #264]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b52:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006b56:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b5e:	d06b      	beq.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b66:	d874      	bhi.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b6e:	d056      	beq.n	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b76:	d86c      	bhi.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b7e:	d03b      	beq.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b86:	d864      	bhi.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b8e:	d021      	beq.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b96:	d85c      	bhi.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d004      	beq.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ba4:	d004      	beq.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006ba6:	e054      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006ba8:	f7fe fa22 	bl	8004ff0 <HAL_RCC_GetPCLK1Freq>
 8006bac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006bae:	e1f6      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bb0:	4b29      	ldr	r3, [pc, #164]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bbc:	d107      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bbe:	f107 0318 	add.w	r3, r7, #24
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fa0a 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bcc:	e1e7      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bd2:	e1e4      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bd4:	4b20      	ldr	r3, [pc, #128]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006be0:	d107      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006be2:	f107 030c 	add.w	r3, r7, #12
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fb4c 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bf0:	e1d5      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bf6:	e1d2      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bf8:	4b17      	ldr	r3, [pc, #92]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d109      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c04:	4b14      	ldr	r3, [pc, #80]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	08db      	lsrs	r3, r3, #3
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	4a13      	ldr	r2, [pc, #76]	@ (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006c10:	fa22 f303 	lsr.w	r3, r2, r3
 8006c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c16:	e1c2      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c1c:	e1bf      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c2a:	d102      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c30:	e1b5      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c36:	e1b2      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c38:	4b07      	ldr	r3, [pc, #28]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c44:	d102      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006c46:	4b07      	ldr	r3, [pc, #28]	@ (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c4a:	e1a8      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c50:	e1a5      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c56:	e1a2      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c58:	58024400 	.word	0x58024400
 8006c5c:	03d09000 	.word	0x03d09000
 8006c60:	003d0900 	.word	0x003d0900
 8006c64:	017d7840 	.word	0x017d7840
 8006c68:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c70:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006c74:	430b      	orrs	r3, r1
 8006c76:	d173      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006c78:	4b9c      	ldr	r3, [pc, #624]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c88:	d02f      	beq.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c90:	d863      	bhi.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d004      	beq.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c9e:	d012      	beq.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006ca0:	e05b      	b.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ca2:	4b92      	ldr	r3, [pc, #584]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006caa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cae:	d107      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb0:	f107 0318 	add.w	r3, r7, #24
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 f991 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cbe:	e16e      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc4:	e16b      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cc6:	4b89      	ldr	r3, [pc, #548]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cd2:	d107      	bne.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cd4:	f107 030c 	add.w	r3, r7, #12
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fad3 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ce2:	e15c      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce8:	e159      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cea:	4b80      	ldr	r3, [pc, #512]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006cf2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cf4:	4b7d      	ldr	r3, [pc, #500]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d10c      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d109      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d06:	4b79      	ldr	r3, [pc, #484]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	08db      	lsrs	r3, r3, #3
 8006d0c:	f003 0303 	and.w	r3, r3, #3
 8006d10:	4a77      	ldr	r2, [pc, #476]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006d12:	fa22 f303 	lsr.w	r3, r2, r3
 8006d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d18:	e01e      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d1a:	4b74      	ldr	r3, [pc, #464]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d26:	d106      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d2e:	d102      	bne.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d30:	4b70      	ldr	r3, [pc, #448]	@ (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d34:	e010      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d36:	4b6d      	ldr	r3, [pc, #436]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d42:	d106      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d4a:	d102      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d50:	e002      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d56:	e122      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d58:	e121      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d5e:	e11e      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d64:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	d133      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006d6c:	4b5f      	ldr	r3, [pc, #380]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d74:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d004      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d82:	d012      	beq.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006d84:	e023      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d86:	4b59      	ldr	r3, [pc, #356]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d92:	d107      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fbc7 	bl	800752c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006da2:	e0fc      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006da8:	e0f9      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006daa:	4b50      	ldr	r3, [pc, #320]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006db2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006db6:	d107      	bne.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006db8:	f107 0318 	add.w	r3, r7, #24
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f000 f90d 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dc6:	e0ea      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dcc:	e0e7      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dd2:	e0e4      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dd8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	f040 808d 	bne.w	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006de2:	4b42      	ldr	r3, [pc, #264]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006dea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006df2:	d06b      	beq.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dfa:	d874      	bhi.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e02:	d056      	beq.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e0a:	d86c      	bhi.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e12:	d03b      	beq.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e1a:	d864      	bhi.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e22:	d021      	beq.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e2a:	d85c      	bhi.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d004      	beq.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e38:	d004      	beq.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006e3a:	e054      	b.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006e3c:	f000 f8b8 	bl	8006fb0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e40:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e42:	e0ac      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e44:	4b29      	ldr	r3, [pc, #164]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e50:	d107      	bne.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e52:	f107 0318 	add.w	r3, r7, #24
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f8c0 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e60:	e09d      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e66:	e09a      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e68:	4b20      	ldr	r3, [pc, #128]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e74:	d107      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e76:	f107 030c 	add.w	r3, r7, #12
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 fa02 	bl	8007284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e84:	e08b      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e8a:	e088      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e8c:	4b17      	ldr	r3, [pc, #92]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d109      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e98:	4b14      	ldr	r3, [pc, #80]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	08db      	lsrs	r3, r3, #3
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	4a13      	ldr	r2, [pc, #76]	@ (8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eaa:	e078      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eb0:	e075      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ebe:	d102      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ec4:	e06b      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eca:	e068      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ecc:	4b07      	ldr	r3, [pc, #28]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ed8:	d102      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006eda:	4b07      	ldr	r3, [pc, #28]	@ (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ede:	e05e      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee4:	e05b      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eea:	e058      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006eec:	58024400 	.word	0x58024400
 8006ef0:	03d09000 	.word	0x03d09000
 8006ef4:	003d0900 	.word	0x003d0900
 8006ef8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f00:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006f04:	430b      	orrs	r3, r1
 8006f06:	d148      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006f08:	4b27      	ldr	r3, [pc, #156]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f18:	d02a      	beq.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f20:	d838      	bhi.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d004      	beq.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f2e:	d00d      	beq.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006f30:	e030      	b.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f32:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f3e:	d102      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006f40:	4b1a      	ldr	r3, [pc, #104]	@ (8006fac <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f44:	e02b      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f4a:	e028      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f4c:	4b16      	ldr	r3, [pc, #88]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f58:	d107      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 fae4 	bl	800752c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f68:	e019      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f6e:	e016      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f70:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f7c:	d107      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f7e:	f107 0318 	add.w	r3, r7, #24
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 f82a 	bl	8006fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f8c:	e007      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f92:	e004      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f98:	e001      	b.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3740      	adds	r7, #64	@ 0x40
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	58024400 	.word	0x58024400
 8006fac:	017d7840 	.word	0x017d7840

08006fb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006fb4:	f7fd ffec 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	4b06      	ldr	r3, [pc, #24]	@ (8006fd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	091b      	lsrs	r3, r3, #4
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	4904      	ldr	r1, [pc, #16]	@ (8006fd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006fc6:	5ccb      	ldrb	r3, [r1, r3]
 8006fc8:	f003 031f 	and.w	r3, r3, #31
 8006fcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	58024400 	.word	0x58024400
 8006fd8:	08010c4c 	.word	0x08010c4c

08006fdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b089      	sub	sp, #36	@ 0x24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fe4:	4ba1      	ldr	r3, [pc, #644]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006fee:	4b9f      	ldr	r3, [pc, #636]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff2:	0b1b      	lsrs	r3, r3, #12
 8006ff4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ff8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffe:	091b      	lsrs	r3, r3, #4
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007006:	4b99      	ldr	r3, [pc, #612]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800700a:	08db      	lsrs	r3, r3, #3
 800700c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	fb02 f303 	mul.w	r3, r2, r3
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 8111 	beq.w	800724c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b02      	cmp	r3, #2
 800702e:	f000 8083 	beq.w	8007138 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	2b02      	cmp	r3, #2
 8007036:	f200 80a1 	bhi.w	800717c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d056      	beq.n	80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007046:	e099      	b.n	800717c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007048:	4b88      	ldr	r3, [pc, #544]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d02d      	beq.n	80070b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007054:	4b85      	ldr	r3, [pc, #532]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	08db      	lsrs	r3, r3, #3
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	4a84      	ldr	r2, [pc, #528]	@ (8007270 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007060:	fa22 f303 	lsr.w	r3, r2, r3
 8007064:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	ee07 3a90 	vmov	s15, r3
 800706c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707e:	4b7b      	ldr	r3, [pc, #492]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007092:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070ae:	e087      	b.n	80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c2:	4b6a      	ldr	r3, [pc, #424]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070f2:	e065      	b.n	80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800727c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007106:	4b59      	ldr	r3, [pc, #356]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800710a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007116:	ed97 6a03 	vldr	s12, [r7, #12]
 800711a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800711e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800712a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007136:	e043      	b.n	80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007142:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800714a:	4b48      	ldr	r3, [pc, #288]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715a:	ed97 6a03 	vldr	s12, [r7, #12]
 800715e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800716e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800717a:	e021      	b.n	80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007186:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800727c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800718a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718e:	4b37      	ldr	r3, [pc, #220]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719e:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80071c0:	4b2a      	ldr	r3, [pc, #168]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c4:	0a5b      	lsrs	r3, r3, #9
 80071c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071da:	edd7 6a07 	vldr	s13, [r7, #28]
 80071de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e6:	ee17 2a90 	vmov	r2, s15
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80071ee:	4b1f      	ldr	r3, [pc, #124]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f2:	0c1b      	lsrs	r3, r3, #16
 80071f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071f8:	ee07 3a90 	vmov	s15, r3
 80071fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007200:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007204:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007208:	edd7 6a07 	vldr	s13, [r7, #28]
 800720c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007214:	ee17 2a90 	vmov	r2, s15
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800721c:	4b13      	ldr	r3, [pc, #76]	@ (800726c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800721e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007220:	0e1b      	lsrs	r3, r3, #24
 8007222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007226:	ee07 3a90 	vmov	s15, r3
 800722a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800722e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007236:	edd7 6a07 	vldr	s13, [r7, #28]
 800723a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800723e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007242:	ee17 2a90 	vmov	r2, s15
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800724a:	e008      	b.n	800725e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	609a      	str	r2, [r3, #8]
}
 800725e:	bf00      	nop
 8007260:	3724      	adds	r7, #36	@ 0x24
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	58024400 	.word	0x58024400
 8007270:	03d09000 	.word	0x03d09000
 8007274:	46000000 	.word	0x46000000
 8007278:	4c742400 	.word	0x4c742400
 800727c:	4a742400 	.word	0x4a742400
 8007280:	4bbebc20 	.word	0x4bbebc20

08007284 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007284:	b480      	push	{r7}
 8007286:	b089      	sub	sp, #36	@ 0x24
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800728c:	4ba1      	ldr	r3, [pc, #644]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800728e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007290:	f003 0303 	and.w	r3, r3, #3
 8007294:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007296:	4b9f      	ldr	r3, [pc, #636]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729a:	0d1b      	lsrs	r3, r3, #20
 800729c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072a2:	4b9c      	ldr	r3, [pc, #624]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a6:	0a1b      	lsrs	r3, r3, #8
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80072ae:	4b99      	ldr	r3, [pc, #612]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b2:	08db      	lsrs	r3, r3, #3
 80072b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	fb02 f303 	mul.w	r3, r2, r3
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8111 	beq.w	80074f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	f000 8083 	beq.w	80073e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	f200 80a1 	bhi.w	8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d056      	beq.n	800739c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80072ee:	e099      	b.n	8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072f0:	4b88      	ldr	r3, [pc, #544]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d02d      	beq.n	8007358 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072fc:	4b85      	ldr	r3, [pc, #532]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	08db      	lsrs	r3, r3, #3
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	4a84      	ldr	r2, [pc, #528]	@ (8007518 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007308:	fa22 f303 	lsr.w	r3, r2, r3
 800730c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	ee07 3a90 	vmov	s15, r3
 8007314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007326:	4b7b      	ldr	r3, [pc, #492]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007336:	ed97 6a03 	vldr	s12, [r7, #12]
 800733a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800751c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800733e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800734a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007352:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007356:	e087      	b.n	8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800736a:	4b6a      	ldr	r3, [pc, #424]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737a:	ed97 6a03 	vldr	s12, [r7, #12]
 800737e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800751c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800738a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800738e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800739a:	e065      	b.n	8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ae:	4b59      	ldr	r3, [pc, #356]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073be:	ed97 6a03 	vldr	s12, [r7, #12]
 80073c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800751c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073de:	e043      	b.n	8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80073ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f2:	4b48      	ldr	r3, [pc, #288]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007402:	ed97 6a03 	vldr	s12, [r7, #12]
 8007406:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800751c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800740a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800741a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007422:	e021      	b.n	8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007436:	4b37      	ldr	r3, [pc, #220]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007446:	ed97 6a03 	vldr	s12, [r7, #12]
 800744a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800751c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800744e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800745a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800745e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007466:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007468:	4b2a      	ldr	r3, [pc, #168]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800746a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746c:	0a5b      	lsrs	r3, r3, #9
 800746e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800747e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007482:	edd7 6a07 	vldr	s13, [r7, #28]
 8007486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800748a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800748e:	ee17 2a90 	vmov	r2, s15
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007496:	4b1f      	ldr	r3, [pc, #124]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749a:	0c1b      	lsrs	r3, r3, #16
 800749c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074a0:	ee07 3a90 	vmov	s15, r3
 80074a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80074b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074bc:	ee17 2a90 	vmov	r2, s15
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80074c4:	4b13      	ldr	r3, [pc, #76]	@ (8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c8:	0e1b      	lsrs	r3, r3, #24
 80074ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074de:	edd7 6a07 	vldr	s13, [r7, #28]
 80074e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074ea:	ee17 2a90 	vmov	r2, s15
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80074f2:	e008      	b.n	8007506 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	609a      	str	r2, [r3, #8]
}
 8007506:	bf00      	nop
 8007508:	3724      	adds	r7, #36	@ 0x24
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	58024400 	.word	0x58024400
 8007518:	03d09000 	.word	0x03d09000
 800751c:	46000000 	.word	0x46000000
 8007520:	4c742400 	.word	0x4c742400
 8007524:	4a742400 	.word	0x4a742400
 8007528:	4bbebc20 	.word	0x4bbebc20

0800752c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800752c:	b480      	push	{r7}
 800752e:	b089      	sub	sp, #36	@ 0x24
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007534:	4ba0      	ldr	r3, [pc, #640]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800753e:	4b9e      	ldr	r3, [pc, #632]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007542:	091b      	lsrs	r3, r3, #4
 8007544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007548:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800754a:	4b9b      	ldr	r3, [pc, #620]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800754c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007554:	4b98      	ldr	r3, [pc, #608]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007558:	08db      	lsrs	r3, r3, #3
 800755a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	fb02 f303 	mul.w	r3, r2, r3
 8007564:	ee07 3a90 	vmov	s15, r3
 8007568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 8111 	beq.w	800779a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	2b02      	cmp	r3, #2
 800757c:	f000 8083 	beq.w	8007686 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	2b02      	cmp	r3, #2
 8007584:	f200 80a1 	bhi.w	80076ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d056      	beq.n	8007642 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007594:	e099      	b.n	80076ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007596:	4b88      	ldr	r3, [pc, #544]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d02d      	beq.n	80075fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075a2:	4b85      	ldr	r3, [pc, #532]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	08db      	lsrs	r3, r3, #3
 80075a8:	f003 0303 	and.w	r3, r3, #3
 80075ac:	4a83      	ldr	r2, [pc, #524]	@ (80077bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80075ae:	fa22 f303 	lsr.w	r3, r2, r3
 80075b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	ee07 3a90 	vmov	s15, r3
 80075c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075cc:	4b7a      	ldr	r3, [pc, #488]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d4:	ee07 3a90 	vmov	s15, r3
 80075d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80075e0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075fc:	e087      	b.n	800770e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	ee07 3a90 	vmov	s15, r3
 8007604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007608:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800760c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007610:	4b69      	ldr	r3, [pc, #420]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007618:	ee07 3a90 	vmov	s15, r3
 800761c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007620:	ed97 6a03 	vldr	s12, [r7, #12]
 8007624:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007630:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007640:	e065      	b.n	800770e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	ee07 3a90 	vmov	s15, r3
 8007648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80077c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007654:	4b58      	ldr	r3, [pc, #352]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765c:	ee07 3a90 	vmov	s15, r3
 8007660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007664:	ed97 6a03 	vldr	s12, [r7, #12]
 8007668:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800766c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007674:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007680:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007684:	e043      	b.n	800770e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	ee07 3a90 	vmov	s15, r3
 800768c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007690:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007698:	4b47      	ldr	r3, [pc, #284]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800769a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a0:	ee07 3a90 	vmov	s15, r3
 80076a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ac:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076c8:	e021      	b.n	800770e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	ee07 3a90 	vmov	s15, r3
 80076d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076dc:	4b36      	ldr	r3, [pc, #216]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e4:	ee07 3a90 	vmov	s15, r3
 80076e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80076f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007708:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800770c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800770e:	4b2a      	ldr	r3, [pc, #168]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007712:	0a5b      	lsrs	r3, r3, #9
 8007714:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007718:	ee07 3a90 	vmov	s15, r3
 800771c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007720:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007724:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007728:	edd7 6a07 	vldr	s13, [r7, #28]
 800772c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007734:	ee17 2a90 	vmov	r2, s15
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800773c:	4b1e      	ldr	r3, [pc, #120]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800773e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007740:	0c1b      	lsrs	r3, r3, #16
 8007742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007752:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007756:	edd7 6a07 	vldr	s13, [r7, #28]
 800775a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800775e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007762:	ee17 2a90 	vmov	r2, s15
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800776a:	4b13      	ldr	r3, [pc, #76]	@ (80077b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800776c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800776e:	0e1b      	lsrs	r3, r3, #24
 8007770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007774:	ee07 3a90 	vmov	s15, r3
 8007778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800777c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007780:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007784:	edd7 6a07 	vldr	s13, [r7, #28]
 8007788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800778c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007790:	ee17 2a90 	vmov	r2, s15
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007798:	e008      	b.n	80077ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	609a      	str	r2, [r3, #8]
}
 80077ac:	bf00      	nop
 80077ae:	3724      	adds	r7, #36	@ 0x24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	58024400 	.word	0x58024400
 80077bc:	03d09000 	.word	0x03d09000
 80077c0:	46000000 	.word	0x46000000
 80077c4:	4c742400 	.word	0x4c742400
 80077c8:	4a742400 	.word	0x4a742400
 80077cc:	4bbebc20 	.word	0x4bbebc20

080077d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077de:	4b53      	ldr	r3, [pc, #332]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80077e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d101      	bne.n	80077ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e099      	b.n	8007922 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80077ee:	4b4f      	ldr	r3, [pc, #316]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a4e      	ldr	r2, [pc, #312]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80077f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80077f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077fa:	f7f9 fb2f 	bl	8000e5c <HAL_GetTick>
 80077fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007800:	e008      	b.n	8007814 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007802:	f7f9 fb2b 	bl	8000e5c <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d901      	bls.n	8007814 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e086      	b.n	8007922 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007814:	4b45      	ldr	r3, [pc, #276]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f0      	bne.n	8007802 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007820:	4b42      	ldr	r3, [pc, #264]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007824:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	031b      	lsls	r3, r3, #12
 800782e:	493f      	ldr	r1, [pc, #252]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007830:	4313      	orrs	r3, r2
 8007832:	628b      	str	r3, [r1, #40]	@ 0x28
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	3b01      	subs	r3, #1
 800783a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	3b01      	subs	r3, #1
 8007844:	025b      	lsls	r3, r3, #9
 8007846:	b29b      	uxth	r3, r3
 8007848:	431a      	orrs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	3b01      	subs	r3, #1
 8007850:	041b      	lsls	r3, r3, #16
 8007852:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	3b01      	subs	r3, #1
 800785e:	061b      	lsls	r3, r3, #24
 8007860:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007864:	4931      	ldr	r1, [pc, #196]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007866:	4313      	orrs	r3, r2
 8007868:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800786a:	4b30      	ldr	r3, [pc, #192]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	492d      	ldr	r1, [pc, #180]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007878:	4313      	orrs	r3, r2
 800787a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800787c:	4b2b      	ldr	r3, [pc, #172]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 800787e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007880:	f023 0220 	bic.w	r2, r3, #32
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	4928      	ldr	r1, [pc, #160]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 800788a:	4313      	orrs	r3, r2
 800788c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800788e:	4b27      	ldr	r3, [pc, #156]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007892:	4a26      	ldr	r2, [pc, #152]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007894:	f023 0310 	bic.w	r3, r3, #16
 8007898:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800789a:	4b24      	ldr	r3, [pc, #144]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 800789c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800789e:	4b24      	ldr	r3, [pc, #144]	@ (8007930 <RCCEx_PLL2_Config+0x160>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	69d2      	ldr	r2, [r2, #28]
 80078a6:	00d2      	lsls	r2, r2, #3
 80078a8:	4920      	ldr	r1, [pc, #128]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80078ae:	4b1f      	ldr	r3, [pc, #124]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b2:	4a1e      	ldr	r2, [pc, #120]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078b4:	f043 0310 	orr.w	r3, r3, #16
 80078b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d106      	bne.n	80078ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80078c0:	4b1a      	ldr	r3, [pc, #104]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c4:	4a19      	ldr	r2, [pc, #100]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078cc:	e00f      	b.n	80078ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d106      	bne.n	80078e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80078d4:	4b15      	ldr	r3, [pc, #84]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d8:	4a14      	ldr	r2, [pc, #80]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078e0:	e005      	b.n	80078ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078e2:	4b12      	ldr	r3, [pc, #72]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e6:	4a11      	ldr	r2, [pc, #68]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80078ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80078ee:	4b0f      	ldr	r3, [pc, #60]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a0e      	ldr	r2, [pc, #56]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 80078f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80078f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078fa:	f7f9 faaf 	bl	8000e5c <HAL_GetTick>
 80078fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007900:	e008      	b.n	8007914 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007902:	f7f9 faab 	bl	8000e5c <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	2b02      	cmp	r3, #2
 800790e:	d901      	bls.n	8007914 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e006      	b.n	8007922 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007914:	4b05      	ldr	r3, [pc, #20]	@ (800792c <RCCEx_PLL2_Config+0x15c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0f0      	beq.n	8007902 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007920:	7bfb      	ldrb	r3, [r7, #15]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	58024400 	.word	0x58024400
 8007930:	ffff0007 	.word	0xffff0007

08007934 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007942:	4b53      	ldr	r3, [pc, #332]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	2b03      	cmp	r3, #3
 800794c:	d101      	bne.n	8007952 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e099      	b.n	8007a86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007952:	4b4f      	ldr	r3, [pc, #316]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a4e      	ldr	r2, [pc, #312]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007958:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800795c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800795e:	f7f9 fa7d 	bl	8000e5c <HAL_GetTick>
 8007962:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007964:	e008      	b.n	8007978 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007966:	f7f9 fa79 	bl	8000e5c <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d901      	bls.n	8007978 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e086      	b.n	8007a86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007978:	4b45      	ldr	r3, [pc, #276]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1f0      	bne.n	8007966 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007984:	4b42      	ldr	r3, [pc, #264]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007988:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	051b      	lsls	r3, r3, #20
 8007992:	493f      	ldr	r1, [pc, #252]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007994:	4313      	orrs	r3, r2
 8007996:	628b      	str	r3, [r1, #40]	@ 0x28
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	3b01      	subs	r3, #1
 800799e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	025b      	lsls	r3, r3, #9
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	041b      	lsls	r3, r3, #16
 80079b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	061b      	lsls	r3, r3, #24
 80079c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80079c8:	4931      	ldr	r1, [pc, #196]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079ce:	4b30      	ldr	r3, [pc, #192]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	492d      	ldr	r1, [pc, #180]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	4928      	ldr	r1, [pc, #160]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079f2:	4b27      	ldr	r3, [pc, #156]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f6:	4a26      	ldr	r2, [pc, #152]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 80079f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079fe:	4b24      	ldr	r3, [pc, #144]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a02:	4b24      	ldr	r3, [pc, #144]	@ (8007a94 <RCCEx_PLL3_Config+0x160>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	69d2      	ldr	r2, [r2, #28]
 8007a0a:	00d2      	lsls	r2, r2, #3
 8007a0c:	4920      	ldr	r1, [pc, #128]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007a12:	4b1f      	ldr	r3, [pc, #124]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a16:	4a1e      	ldr	r2, [pc, #120]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d106      	bne.n	8007a32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a24:	4b1a      	ldr	r3, [pc, #104]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a28:	4a19      	ldr	r2, [pc, #100]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a30:	e00f      	b.n	8007a52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d106      	bne.n	8007a46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a38:	4b15      	ldr	r3, [pc, #84]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3c:	4a14      	ldr	r2, [pc, #80]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a44:	e005      	b.n	8007a52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a46:	4b12      	ldr	r3, [pc, #72]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4a:	4a11      	ldr	r2, [pc, #68]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a52:	4b0f      	ldr	r3, [pc, #60]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a0e      	ldr	r2, [pc, #56]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a5e:	f7f9 f9fd 	bl	8000e5c <HAL_GetTick>
 8007a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a64:	e008      	b.n	8007a78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a66:	f7f9 f9f9 	bl	8000e5c <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e006      	b.n	8007a86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a78:	4b05      	ldr	r3, [pc, #20]	@ (8007a90 <RCCEx_PLL3_Config+0x15c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0f0      	beq.n	8007a66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	58024400 	.word	0x58024400
 8007a94:	ffff0007 	.word	0xffff0007

08007a98 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d071      	beq.n	8007b8e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d106      	bne.n	8007ac4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f005 fd3c 	bl	800d53c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f003 0310 	and.w	r3, r3, #16
 8007ad6:	2b10      	cmp	r3, #16
 8007ad8:	d050      	beq.n	8007b7c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	22ca      	movs	r2, #202	@ 0xca
 8007ae0:	625a      	str	r2, [r3, #36]	@ 0x24
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2253      	movs	r2, #83	@ 0x53
 8007ae8:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f9a0 	bl	8007e30 <RTC_EnterInitMode>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d124      	bne.n	8007b44 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	6899      	ldr	r1, [r3, #8]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	4b24      	ldr	r3, [pc, #144]	@ (8007b98 <HAL_RTC_Init+0x100>)
 8007b06:	400b      	ands	r3, r1
 8007b08:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6899      	ldr	r1, [r3, #8]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	0419      	lsls	r1, r3, #16
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f9ac 	bl	8007e98 <RTC_ExitInitMode>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d113      	bne.n	8007b72 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0203 	bic.w	r2, r2, #3
 8007b58:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	69da      	ldr	r2, [r3, #28]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	22ff      	movs	r2, #255	@ 0xff
 8007b78:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b7a:	e001      	b.n	8007b80 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d103      	bne.n	8007b8e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	ff8fffbf 	.word	0xff8fffbf

08007b9c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007b9c:	b590      	push	{r4, r7, lr}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d101      	bne.n	8007bb6 <HAL_RTC_SetTime+0x1a>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	e089      	b.n	8007cca <HAL_RTC_SetTime+0x12e>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	22ca      	movs	r2, #202	@ 0xca
 8007bcc:	625a      	str	r2, [r3, #36]	@ 0x24
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2253      	movs	r2, #83	@ 0x53
 8007bd4:	625a      	str	r2, [r3, #36]	@ 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 f92a 	bl	8007e30 <RTC_EnterInitMode>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007be0:	7cfb      	ldrb	r3, [r7, #19]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d161      	bne.n	8007caa <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d126      	bne.n	8007c3a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d102      	bne.n	8007c00 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f000 f985 	bl	8007f14 <RTC_ByteToBcd2>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	785b      	ldrb	r3, [r3, #1]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 f97e 	bl	8007f14 <RTC_ByteToBcd2>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007c1c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	789b      	ldrb	r3, [r3, #2]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 f976 	bl	8007f14 <RTC_ByteToBcd2>
 8007c28:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007c2a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	78db      	ldrb	r3, [r3, #3]
 8007c32:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007c34:	4313      	orrs	r3, r2
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	e018      	b.n	8007c6c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d102      	bne.n	8007c4e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	785b      	ldrb	r3, [r3, #1]
 8007c58:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007c5a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007c60:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	78db      	ldrb	r3, [r3, #3]
 8007c66:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	6979      	ldr	r1, [r7, #20]
 8007c72:	4b18      	ldr	r3, [pc, #96]	@ (8007cd4 <HAL_RTC_SetTime+0x138>)
 8007c74:	400b      	ands	r3, r1
 8007c76:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007c86:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6899      	ldr	r1, [r3, #8]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	431a      	orrs	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 f8f9 	bl	8007e98 <RTC_ExitInitMode>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	22ff      	movs	r2, #255	@ 0xff
 8007cb0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007cb2:	7cfb      	ldrb	r3, [r7, #19]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d103      	bne.n	8007cc0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007cc8:	7cfb      	ldrb	r3, [r7, #19]
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	371c      	adds	r7, #28
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd90      	pop	{r4, r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	007f7f7f 	.word	0x007f7f7f

08007cd8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007cd8:	b590      	push	{r4, r7, lr}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	60b9      	str	r1, [r7, #8]
 8007ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d101      	bne.n	8007cf2 <HAL_RTC_SetDate+0x1a>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	e073      	b.n	8007dda <HAL_RTC_SetDate+0x102>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10e      	bne.n	8007d26 <HAL_RTC_SetDate+0x4e>
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	785b      	ldrb	r3, [r3, #1]
 8007d0c:	f003 0310 	and.w	r3, r3, #16
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d008      	beq.n	8007d26 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	f023 0310 	bic.w	r3, r3, #16
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	330a      	adds	r3, #10
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d11c      	bne.n	8007d66 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	78db      	ldrb	r3, [r3, #3]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 f8ef 	bl	8007f14 <RTC_ByteToBcd2>
 8007d36:	4603      	mov	r3, r0
 8007d38:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	785b      	ldrb	r3, [r3, #1]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 f8e8 	bl	8007f14 <RTC_ByteToBcd2>
 8007d44:	4603      	mov	r3, r0
 8007d46:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007d48:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	789b      	ldrb	r3, [r3, #2]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 f8e0 	bl	8007f14 <RTC_ByteToBcd2>
 8007d54:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007d56:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007d60:	4313      	orrs	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]
 8007d64:	e00e      	b.n	8007d84 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	78db      	ldrb	r3, [r3, #3]
 8007d6a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007d72:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007d78:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	22ca      	movs	r2, #202	@ 0xca
 8007d8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2253      	movs	r2, #83	@ 0x53
 8007d92:	625a      	str	r2, [r3, #36]	@ 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f84b 	bl	8007e30 <RTC_EnterInitMode>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007d9e:	7cfb      	ldrb	r3, [r7, #19]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	6979      	ldr	r1, [r7, #20]
 8007daa:	4b0e      	ldr	r3, [pc, #56]	@ (8007de4 <HAL_RTC_SetDate+0x10c>)
 8007dac:	400b      	ands	r3, r1
 8007dae:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f000 f871 	bl	8007e98 <RTC_ExitInitMode>
 8007db6:	4603      	mov	r3, r0
 8007db8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	22ff      	movs	r2, #255	@ 0xff
 8007dc0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007dc2:	7cfb      	ldrb	r3, [r7, #19]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d103      	bne.n	8007dd0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007dd8:	7cfb      	ldrb	r3, [r7, #19]


}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	371c      	adds	r7, #28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd90      	pop	{r4, r7, pc}
 8007de2:	bf00      	nop
 8007de4:	00ffff3f 	.word	0x00ffff3f

08007de8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a0d      	ldr	r2, [pc, #52]	@ (8007e2c <HAL_RTC_WaitForSynchro+0x44>)
 8007df6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8007df8:	f7f9 f830 	bl	8000e5c <HAL_GetTick>
 8007dfc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007dfe:	e009      	b.n	8007e14 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e00:	f7f9 f82c 	bl	8000e5c <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e0e:	d901      	bls.n	8007e14 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e007      	b.n	8007e24 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0ee      	beq.n	8007e00 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	0003ff5f 	.word	0x0003ff5f

08007e30 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d120      	bne.n	8007e8c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e52:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007e54:	f7f9 f802 	bl	8000e5c <HAL_GetTick>
 8007e58:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007e5a:	e00d      	b.n	8007e78 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007e5c:	f7f8 fffe 	bl	8000e5c <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e6a:	d905      	bls.n	8007e78 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2203      	movs	r2, #3
 8007e74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d102      	bne.n	8007e8c <RTC_EnterInitMode+0x5c>
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d1e7      	bne.n	8007e5c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
	...

08007e98 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8007f10 <RTC_ExitInitMode+0x78>)
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	4a19      	ldr	r2, [pc, #100]	@ (8007f10 <RTC_ExitInitMode+0x78>)
 8007eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007eae:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007eb0:	4b17      	ldr	r3, [pc, #92]	@ (8007f10 <RTC_ExitInitMode+0x78>)
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10c      	bne.n	8007ed6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7ff ff93 	bl	8007de8 <HAL_RTC_WaitForSynchro>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01e      	beq.n	8007f06 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2203      	movs	r2, #3
 8007ecc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	73fb      	strb	r3, [r7, #15]
 8007ed4:	e017      	b.n	8007f06 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8007f10 <RTC_ExitInitMode+0x78>)
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	4a0d      	ldr	r2, [pc, #52]	@ (8007f10 <RTC_ExitInitMode+0x78>)
 8007edc:	f023 0320 	bic.w	r3, r3, #32
 8007ee0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7ff ff80 	bl	8007de8 <HAL_RTC_WaitForSynchro>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2203      	movs	r2, #3
 8007ef2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007efa:	4b05      	ldr	r3, [pc, #20]	@ (8007f10 <RTC_ExitInitMode+0x78>)
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	4a04      	ldr	r2, [pc, #16]	@ (8007f10 <RTC_ExitInitMode+0x78>)
 8007f00:	f043 0320 	orr.w	r3, r3, #32
 8007f04:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	58004000 	.word	0x58004000

08007f14 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8007f26:	e005      	b.n	8007f34 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8007f2e:	7afb      	ldrb	r3, [r7, #11]
 8007f30:	3b0a      	subs	r3, #10
 8007f32:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8007f34:	7afb      	ldrb	r3, [r7, #11]
 8007f36:	2b09      	cmp	r3, #9
 8007f38:	d8f6      	bhi.n	8007f28 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	011b      	lsls	r3, r3, #4
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	7afb      	ldrb	r3, [r7, #11]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	b2db      	uxtb	r3, r3
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08a      	sub	sp, #40	@ 0x28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e075      	b.n	8008052 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d105      	bne.n	8007f7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f90b 	bl	8008194 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2204      	movs	r2, #4
 8007f82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f868 	bl	800805c <HAL_SD_InitCard>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e05d      	b.n	8008052 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007f96:	f107 0308 	add.w	r3, r7, #8
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fdbf 	bl	8008b20 <HAL_SD_GetCardStatus>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e052      	b.n	8008052 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007fac:	7e3b      	ldrb	r3, [r7, #24]
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007fb2:	7e7b      	ldrb	r3, [r7, #25]
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d10a      	bne.n	8007fd6 <HAL_SD_Init+0x82>
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d102      	bne.n	8007fcc <HAL_SD_Init+0x78>
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d004      	beq.n	8007fd6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fd2:	659a      	str	r2, [r3, #88]	@ 0x58
 8007fd4:	e00b      	b.n	8007fee <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d104      	bne.n	8007fe8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fe4:	659a      	str	r2, [r3, #88]	@ 0x58
 8007fe6:	e002      	b.n	8007fee <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fe7d 	bl	8008cf4 <HAL_SD_ConfigWideBusOperation>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e026      	b.n	8008052 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008004:	f7f8 ff2a 	bl	8000e5c <HAL_GetTick>
 8008008:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800800a:	e011      	b.n	8008030 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800800c:	f7f8 ff26 	bl	8000e5c <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801a:	d109      	bne.n	8008030 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008022:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e010      	b.n	8008052 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 f82d 	bl	8009090 <HAL_SD_GetCardState>
 8008036:	4603      	mov	r3, r0
 8008038:	2b04      	cmp	r3, #4
 800803a:	d1e7      	bne.n	800800c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3728      	adds	r7, #40	@ 0x28
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
	...

0800805c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800805c:	b590      	push	{r4, r7, lr}
 800805e:	b08d      	sub	sp, #52	@ 0x34
 8008060:	af02      	add	r7, sp, #8
 8008062:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008068:	2300      	movs	r3, #0
 800806a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800806c:	2300      	movs	r3, #0
 800806e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008070:	2300      	movs	r3, #0
 8008072:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008074:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008078:	f04f 0100 	mov.w	r1, #0
 800807c:	f7fe fa18 	bl	80064b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008080:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8008082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008084:	2b00      	cmp	r3, #0
 8008086:	d109      	bne.n	800809c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008096:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e070      	b.n	800817e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800809c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809e:	0a1b      	lsrs	r3, r3, #8
 80080a0:	4a39      	ldr	r2, [pc, #228]	@ (8008188 <HAL_SD_InitCard+0x12c>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	091b      	lsrs	r3, r3, #4
 80080a8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681c      	ldr	r4, [r3, #0]
 80080ae:	466a      	mov	r2, sp
 80080b0:	f107 0318 	add.w	r3, r7, #24
 80080b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80080b8:	e882 0003 	stmia.w	r2, {r0, r1}
 80080bc:	f107 030c 	add.w	r3, r7, #12
 80080c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080c2:	4620      	mov	r0, r4
 80080c4:	f002 fa2e 	bl	800a524 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f002 fa71 	bl	800a5b4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	005b      	lsls	r3, r3, #1
 80080dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080de:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80080e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d007      	beq.n	80080fa <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80080ea:	4a28      	ldr	r2, [pc, #160]	@ (800818c <HAL_SD_InitCard+0x130>)
 80080ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f2:	3301      	adds	r3, #1
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7f8 febd 	bl	8000e74 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 f8b6 	bl	800926c <SD_PowerON>
 8008100:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00b      	beq.n	8008120 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e02e      	b.n	800817e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 ffd5 	bl	80090d0 <SD_InitCard>
 8008126:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	431a      	orrs	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e01b      	b.n	800817e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800814e:	4618      	mov	r0, r3
 8008150:	f002 fac6 	bl	800a6e0 <SDMMC_CmdBlockLength>
 8008154:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00f      	beq.n	800817c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a0b      	ldr	r2, [pc, #44]	@ (8008190 <HAL_SD_InitCard+0x134>)
 8008162:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e000      	b.n	800817e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	372c      	adds	r7, #44	@ 0x2c
 8008182:	46bd      	mov	sp, r7
 8008184:	bd90      	pop	{r4, r7, pc}
 8008186:	bf00      	nop
 8008188:	014f8b59 	.word	0x014f8b59
 800818c:	00012110 	.word	0x00012110
 8008190:	1fe00fff 	.word	0x1fe00fff

08008194 <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b092      	sub	sp, #72	@ 0x48
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80081b6:	f7f8 fe51 	bl	8000e5c <HAL_GetTick>
 80081ba:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d107      	bne.n	80081da <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e167      	b.n	80084aa <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	f040 815a 	bne.w	800849c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80081ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	441a      	add	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d907      	bls.n	800820c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008200:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e14e      	b.n	80084aa <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2203      	movs	r2, #3
 8008210:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2200      	movs	r2, #0
 800821a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008220:	2b01      	cmp	r3, #1
 8008222:	d002      	beq.n	800822a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008226:	025b      	lsls	r3, r3, #9
 8008228:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800822a:	f04f 33ff 	mov.w	r3, #4294967295
 800822e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	025b      	lsls	r3, r3, #9
 8008234:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008236:	2390      	movs	r3, #144	@ 0x90
 8008238:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800823a:	2302      	movs	r3, #2
 800823c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800823e:	2300      	movs	r3, #0
 8008240:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008242:	2300      	movs	r3, #0
 8008244:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f107 0214 	add.w	r2, r7, #20
 800824e:	4611      	mov	r1, r2
 8008250:	4618      	mov	r0, r3
 8008252:	f002 fa19 	bl	800a688 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68da      	ldr	r2, [r3, #12]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008264:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d90a      	bls.n	8008282 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2202      	movs	r2, #2
 8008270:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008278:	4618      	mov	r0, r3
 800827a:	f002 fa77 	bl	800a76c <SDMMC_CmdReadMultiBlock>
 800827e:	6478      	str	r0, [r7, #68]	@ 0x44
 8008280:	e009      	b.n	8008296 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2201      	movs	r2, #1
 8008286:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800828e:	4618      	mov	r0, r3
 8008290:	f002 fa49 	bl	800a726 <SDMMC_CmdReadSingleBlock>
 8008294:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008296:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008298:	2b00      	cmp	r3, #0
 800829a:	d012      	beq.n	80082c2 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a84      	ldr	r2, [pc, #528]	@ (80084b4 <HAL_SD_ReadBlocks+0x30c>)
 80082a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082aa:	431a      	orrs	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e0f3      	b.n	80084aa <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80082c6:	e058      	b.n	800837a <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d033      	beq.n	800833e <HAL_SD_ReadBlocks+0x196>
 80082d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082d8:	2b1f      	cmp	r3, #31
 80082da:	d930      	bls.n	800833e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 80082dc:	2300      	movs	r3, #0
 80082de:	643b      	str	r3, [r7, #64]	@ 0x40
 80082e0:	e027      	b.n	8008332 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f002 f946 	bl	800a578 <SDMMC_ReadFIFO>
 80082ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80082ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80082f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082f8:	3301      	adds	r3, #1
 80082fa:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80082fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fe:	0a1b      	lsrs	r3, r3, #8
 8008300:	b2da      	uxtb	r2, r3
 8008302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008304:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008308:	3301      	adds	r3, #1
 800830a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800830c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830e:	0c1b      	lsrs	r3, r3, #16
 8008310:	b2da      	uxtb	r2, r3
 8008312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008314:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008318:	3301      	adds	r3, #1
 800831a:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800831c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800831e:	0e1b      	lsrs	r3, r3, #24
 8008320:	b2da      	uxtb	r2, r3
 8008322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008324:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008328:	3301      	adds	r3, #1
 800832a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 800832c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800832e:	3301      	adds	r3, #1
 8008330:	643b      	str	r3, [r7, #64]	@ 0x40
 8008332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008334:	2b07      	cmp	r3, #7
 8008336:	d9d4      	bls.n	80082e2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800833a:	3b20      	subs	r3, #32
 800833c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800833e:	f7f8 fd8d 	bl	8000e5c <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800834a:	429a      	cmp	r2, r3
 800834c:	d902      	bls.n	8008354 <HAL_SD_ReadBlocks+0x1ac>
 800834e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008350:	2b00      	cmp	r3, #0
 8008352:	d112      	bne.n	800837a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a56      	ldr	r2, [pc, #344]	@ (80084b4 <HAL_SD_ReadBlocks+0x30c>)
 800835a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008360:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e097      	b.n	80084aa <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008380:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008384:	2b00      	cmp	r3, #0
 8008386:	d09f      	beq.n	80082c8 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008396:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800839e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d022      	beq.n	80083ec <HAL_SD_ReadBlocks+0x244>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d91f      	bls.n	80083ec <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d01b      	beq.n	80083ec <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f002 fa41 	bl	800a840 <SDMMC_CmdStopTransfer>
 80083be:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80083c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d012      	beq.n	80083ec <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a3a      	ldr	r2, [pc, #232]	@ (80084b4 <HAL_SD_ReadBlocks+0x30c>)
 80083cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083d4:	431a      	orrs	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e05e      	b.n	80084aa <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083f2:	f003 0308 	and.w	r3, r3, #8
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d012      	beq.n	8008420 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a2d      	ldr	r2, [pc, #180]	@ (80084b4 <HAL_SD_ReadBlocks+0x30c>)
 8008400:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008406:	f043 0208 	orr.w	r2, r3, #8
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2200      	movs	r2, #0
 800841a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e044      	b.n	80084aa <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d012      	beq.n	8008454 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a20      	ldr	r2, [pc, #128]	@ (80084b4 <HAL_SD_ReadBlocks+0x30c>)
 8008434:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800843a:	f043 0202 	orr.w	r2, r3, #2
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e02a      	b.n	80084aa <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800845a:	f003 0320 	and.w	r3, r3, #32
 800845e:	2b00      	cmp	r3, #0
 8008460:	d012      	beq.n	8008488 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a13      	ldr	r2, [pc, #76]	@ (80084b4 <HAL_SD_ReadBlocks+0x30c>)
 8008468:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800846e:	f043 0220 	orr.w	r2, r3, #32
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e010      	b.n	80084aa <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a0a      	ldr	r2, [pc, #40]	@ (80084b8 <HAL_SD_ReadBlocks+0x310>)
 800848e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	e006      	b.n	80084aa <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084a0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
  }
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3748      	adds	r7, #72	@ 0x48
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	1fe00fff 	.word	0x1fe00fff
 80084b8:	18000f3a 	.word	0x18000f3a

080084bc <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b092      	sub	sp, #72	@ 0x48
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
 80084c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80084ca:	f7f8 fcc7 	bl	8000e5c <HAL_GetTick>
 80084ce:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d107      	bne.n	80084ee <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e16b      	b.n	80087c6 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	f040 815e 	bne.w	80087b8 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008502:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	441a      	add	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800850c:	429a      	cmp	r2, r3
 800850e:	d907      	bls.n	8008520 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008514:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e152      	b.n	80087c6 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2203      	movs	r2, #3
 8008524:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2200      	movs	r2, #0
 800852e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008534:	2b01      	cmp	r3, #1
 8008536:	d002      	beq.n	800853e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800853a:	025b      	lsls	r3, r3, #9
 800853c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800853e:	f04f 33ff 	mov.w	r3, #4294967295
 8008542:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	025b      	lsls	r3, r3, #9
 8008548:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800854a:	2390      	movs	r3, #144	@ 0x90
 800854c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800854e:	2300      	movs	r3, #0
 8008550:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008552:	2300      	movs	r3, #0
 8008554:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008556:	2300      	movs	r3, #0
 8008558:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f107 0218 	add.w	r2, r7, #24
 8008562:	4611      	mov	r1, r2
 8008564:	4618      	mov	r0, r3
 8008566:	f002 f88f 	bl	800a688 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68da      	ldr	r2, [r3, #12]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008578:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d90a      	bls.n	8008596 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2220      	movs	r2, #32
 8008584:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800858c:	4618      	mov	r0, r3
 800858e:	f002 f933 	bl	800a7f8 <SDMMC_CmdWriteMultiBlock>
 8008592:	6478      	str	r0, [r7, #68]	@ 0x44
 8008594:	e009      	b.n	80085aa <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2210      	movs	r2, #16
 800859a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80085a2:	4618      	mov	r0, r3
 80085a4:	f002 f905 	bl	800a7b2 <SDMMC_CmdWriteSingleBlock>
 80085a8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80085aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d012      	beq.n	80085d6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a86      	ldr	r2, [pc, #536]	@ (80087d0 <HAL_SD_WriteBlocks+0x314>)
 80085b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085be:	431a      	orrs	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e0f7      	b.n	80087c6 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80085da:	e05c      	b.n	8008696 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d037      	beq.n	800865a <HAL_SD_WriteBlocks+0x19e>
 80085ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085ec:	2b1f      	cmp	r3, #31
 80085ee:	d934      	bls.n	800865a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 80085f0:	2300      	movs	r3, #0
 80085f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80085f4:	e02b      	b.n	800864e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80085f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80085fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085fe:	3301      	adds	r3, #1
 8008600:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	021a      	lsls	r2, r3, #8
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800860e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008610:	3301      	adds	r3, #1
 8008612:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	041a      	lsls	r2, r3, #16
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	4313      	orrs	r3, r2
 800861e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008622:	3301      	adds	r3, #1
 8008624:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	061a      	lsls	r2, r3, #24
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	4313      	orrs	r3, r2
 8008630:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008634:	3301      	adds	r3, #1
 8008636:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f107 0214 	add.w	r2, r7, #20
 8008640:	4611      	mov	r1, r2
 8008642:	4618      	mov	r0, r3
 8008644:	f001 ffa5 	bl	800a592 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8008648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800864a:	3301      	adds	r3, #1
 800864c:	643b      	str	r3, [r7, #64]	@ 0x40
 800864e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008650:	2b07      	cmp	r3, #7
 8008652:	d9d0      	bls.n	80085f6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008656:	3b20      	subs	r3, #32
 8008658:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800865a:	f7f8 fbff 	bl	8000e5c <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008666:	429a      	cmp	r2, r3
 8008668:	d902      	bls.n	8008670 <HAL_SD_WriteBlocks+0x1b4>
 800866a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800866c:	2b00      	cmp	r3, #0
 800866e:	d112      	bne.n	8008696 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a56      	ldr	r2, [pc, #344]	@ (80087d0 <HAL_SD_WriteBlocks+0x314>)
 8008676:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800867c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800867e:	431a      	orrs	r2, r3
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e097      	b.n	80087c6 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800869c:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d09b      	beq.n	80085dc <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086b2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d022      	beq.n	8008708 <HAL_SD_WriteBlocks+0x24c>
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d91f      	bls.n	8008708 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d01b      	beq.n	8008708 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f002 f8b3 	bl	800a840 <SDMMC_CmdStopTransfer>
 80086da:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80086dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d012      	beq.n	8008708 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a3a      	ldr	r2, [pc, #232]	@ (80087d0 <HAL_SD_WriteBlocks+0x314>)
 80086e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086f0:	431a      	orrs	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e05e      	b.n	80087c6 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800870e:	f003 0308 	and.w	r3, r3, #8
 8008712:	2b00      	cmp	r3, #0
 8008714:	d012      	beq.n	800873c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a2d      	ldr	r2, [pc, #180]	@ (80087d0 <HAL_SD_WriteBlocks+0x314>)
 800871c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008722:	f043 0208 	orr.w	r2, r3, #8
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e044      	b.n	80087c6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	2b00      	cmp	r3, #0
 8008748:	d012      	beq.n	8008770 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a20      	ldr	r2, [pc, #128]	@ (80087d0 <HAL_SD_WriteBlocks+0x314>)
 8008750:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008756:	f043 0202 	orr.w	r2, r3, #2
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e02a      	b.n	80087c6 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008776:	f003 0310 	and.w	r3, r3, #16
 800877a:	2b00      	cmp	r3, #0
 800877c:	d012      	beq.n	80087a4 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a13      	ldr	r2, [pc, #76]	@ (80087d0 <HAL_SD_WriteBlocks+0x314>)
 8008784:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800878a:	f043 0210 	orr.w	r2, r3, #16
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e010      	b.n	80087c6 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a0a      	ldr	r2, [pc, #40]	@ (80087d4 <HAL_SD_WriteBlocks+0x318>)
 80087aa:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	e006      	b.n	80087c6 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
  }
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3748      	adds	r7, #72	@ 0x48
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	1fe00fff 	.word	0x1fe00fff
 80087d4:	18000f3a 	.word	0x18000f3a

080087d8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087e6:	0f9b      	lsrs	r3, r3, #30
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087f2:	0e9b      	lsrs	r3, r3, #26
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	f003 030f 	and.w	r3, r3, #15
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008804:	0e1b      	lsrs	r3, r3, #24
 8008806:	b2db      	uxtb	r3, r3
 8008808:	f003 0303 	and.w	r3, r3, #3
 800880c:	b2da      	uxtb	r2, r3
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008816:	0c1b      	lsrs	r3, r3, #16
 8008818:	b2da      	uxtb	r2, r3
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008822:	0a1b      	lsrs	r3, r3, #8
 8008824:	b2da      	uxtb	r2, r3
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800882e:	b2da      	uxtb	r2, r3
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008838:	0d1b      	lsrs	r3, r3, #20
 800883a:	b29a      	uxth	r2, r3
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008844:	0c1b      	lsrs	r3, r3, #16
 8008846:	b2db      	uxtb	r3, r3
 8008848:	f003 030f 	and.w	r3, r3, #15
 800884c:	b2da      	uxtb	r2, r3
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008856:	0bdb      	lsrs	r3, r3, #15
 8008858:	b2db      	uxtb	r3, r3
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	b2da      	uxtb	r2, r3
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008868:	0b9b      	lsrs	r3, r3, #14
 800886a:	b2db      	uxtb	r3, r3
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	b2da      	uxtb	r2, r3
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800887a:	0b5b      	lsrs	r3, r3, #13
 800887c:	b2db      	uxtb	r3, r3
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	b2da      	uxtb	r2, r3
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800888c:	0b1b      	lsrs	r3, r3, #12
 800888e:	b2db      	uxtb	r3, r3
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	b2da      	uxtb	r2, r3
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	2200      	movs	r2, #0
 800889e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d163      	bne.n	8008970 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088ac:	009a      	lsls	r2, r3, #2
 80088ae:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80088b2:	4013      	ands	r3, r2
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80088b8:	0f92      	lsrs	r2, r2, #30
 80088ba:	431a      	orrs	r2, r3
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088c4:	0edb      	lsrs	r3, r3, #27
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	f003 0307 	and.w	r3, r3, #7
 80088cc:	b2da      	uxtb	r2, r3
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088d6:	0e1b      	lsrs	r3, r3, #24
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	f003 0307 	and.w	r3, r3, #7
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088e8:	0d5b      	lsrs	r3, r3, #21
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	f003 0307 	and.w	r3, r3, #7
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088fa:	0c9b      	lsrs	r3, r3, #18
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	f003 0307 	and.w	r3, r3, #7
 8008902:	b2da      	uxtb	r2, r3
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800890c:	0bdb      	lsrs	r3, r3, #15
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 0307 	and.w	r3, r3, #7
 8008914:	b2da      	uxtb	r2, r3
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	7e1b      	ldrb	r3, [r3, #24]
 8008928:	b2db      	uxtb	r3, r3
 800892a:	f003 0307 	and.w	r3, r3, #7
 800892e:	3302      	adds	r3, #2
 8008930:	2201      	movs	r2, #1
 8008932:	fa02 f303 	lsl.w	r3, r2, r3
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800893a:	fb03 f202 	mul.w	r2, r3, r2
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	7a1b      	ldrb	r3, [r3, #8]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	f003 030f 	and.w	r3, r3, #15
 800894c:	2201      	movs	r2, #1
 800894e:	409a      	lsls	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800895c:	0a52      	lsrs	r2, r2, #9
 800895e:	fb03 f202 	mul.w	r2, r3, r2
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800896c:	655a      	str	r2, [r3, #84]	@ 0x54
 800896e:	e031      	b.n	80089d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008974:	2b01      	cmp	r3, #1
 8008976:	d11d      	bne.n	80089b4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800897c:	041b      	lsls	r3, r3, #16
 800897e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008986:	0c1b      	lsrs	r3, r3, #16
 8008988:	431a      	orrs	r2, r3
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	3301      	adds	r3, #1
 8008994:	029a      	lsls	r2, r3, #10
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80089b2:	e00f      	b.n	80089d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a58      	ldr	r2, [pc, #352]	@ (8008b1c <HAL_SD_GetCardCSD+0x344>)
 80089ba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e09d      	b.n	8008b10 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089d8:	0b9b      	lsrs	r3, r3, #14
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	f003 0301 	and.w	r3, r3, #1
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089ea:	09db      	lsrs	r3, r3, #7
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a0c:	0fdb      	lsrs	r3, r3, #31
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a18:	0f5b      	lsrs	r3, r3, #29
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	f003 0303 	and.w	r3, r3, #3
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a2a:	0e9b      	lsrs	r3, r3, #26
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	f003 0307 	and.w	r3, r3, #7
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a3c:	0d9b      	lsrs	r3, r3, #22
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	f003 030f 	and.w	r3, r3, #15
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a4e:	0d5b      	lsrs	r3, r3, #21
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a6a:	0c1b      	lsrs	r3, r3, #16
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	b2da      	uxtb	r2, r3
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a7e:	0bdb      	lsrs	r3, r3, #15
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	b2da      	uxtb	r2, r3
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a92:	0b9b      	lsrs	r3, r3, #14
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008aa6:	0b5b      	lsrs	r3, r3, #13
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008aba:	0b1b      	lsrs	r3, r3, #12
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ace:	0a9b      	lsrs	r3, r3, #10
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	b2da      	uxtb	r2, r3
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ae2:	0a1b      	lsrs	r3, r3, #8
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	f003 0303 	and.w	r3, r3, #3
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008af6:	085b      	lsrs	r3, r3, #1
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	1fe00fff 	.word	0x1fe00fff

08008b20 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b094      	sub	sp, #80	@ 0x50
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d101      	bne.n	8008b40 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e0a7      	b.n	8008c90 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008b40:	f107 0308 	add.w	r3, r7, #8
 8008b44:	4619      	mov	r1, r3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fc1e 	bl	8009388 <SD_SendSDStatus>
 8008b4c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d011      	beq.n	8008b78 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a4f      	ldr	r2, [pc, #316]	@ (8008c98 <HAL_SD_GetCardStatus+0x178>)
 8008b5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b62:	431a      	orrs	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8008b76:	e070      	b.n	8008c5a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	099b      	lsrs	r3, r3, #6
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	f003 0303 	and.w	r3, r3, #3
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	095b      	lsrs	r3, r3, #5
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	0a1b      	lsrs	r3, r3, #8
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	0e1b      	lsrs	r3, r3, #24
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	4313      	orrs	r3, r2
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	061a      	lsls	r2, r3, #24
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	021b      	lsls	r3, r3, #8
 8008bba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008bbe:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	0a1b      	lsrs	r3, r3, #8
 8008bc4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008bc8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	0e1b      	lsrs	r3, r3, #24
 8008bce:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	0a1b      	lsrs	r3, r3, #8
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	0d1b      	lsrs	r3, r3, #20
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	f003 030f 	and.w	r3, r3, #15
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	0c1b      	lsrs	r3, r3, #16
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	0a9b      	lsrs	r3, r3, #10
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	0a1b      	lsrs	r3, r3, #8
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	f003 0303 	and.w	r3, r3, #3
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	091b      	lsrs	r3, r3, #4
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	f003 030f 	and.w	r3, r3, #15
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	f003 030f 	and.w	r3, r3, #15
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	0e1b      	lsrs	r3, r3, #24
 8008c54:	b2da      	uxtb	r2, r3
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008c62:	4618      	mov	r0, r3
 8008c64:	f001 fd3c 	bl	800a6e0 <SDMMC_CmdBlockLength>
 8008c68:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00d      	beq.n	8008c8c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a08      	ldr	r2, [pc, #32]	@ (8008c98 <HAL_SD_GetCardStatus+0x178>)
 8008c76:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c7c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8008c8c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3750      	adds	r7, #80	@ 0x50
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	1fe00fff 	.word	0x1fe00fff

08008c9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008cf4:	b590      	push	{r4, r7, lr}
 8008cf6:	b08d      	sub	sp, #52	@ 0x34
 8008cf8:	af02      	add	r7, sp, #8
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2203      	movs	r2, #3
 8008d08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d10:	2b03      	cmp	r3, #3
 8008d12:	d02e      	beq.n	8008d72 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d1a:	d106      	bne.n	8008d2a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	635a      	str	r2, [r3, #52]	@ 0x34
 8008d28:	e029      	b.n	8008d7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d30:	d10a      	bne.n	8008d48 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fc20 	bl	8009578 <SD_WideBus_Enable>
 8008d38:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	431a      	orrs	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	635a      	str	r2, [r3, #52]	@ 0x34
 8008d46:	e01a      	b.n	8008d7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10a      	bne.n	8008d64 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fc5d 	bl	800960e <SD_WideBus_Disable>
 8008d54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	635a      	str	r2, [r3, #52]	@ 0x34
 8008d62:	e00c      	b.n	8008d7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d68:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8008d70:	e005      	b.n	8008d7e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d76:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d007      	beq.n	8008d96 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a5f      	ldr	r2, [pc, #380]	@ (8008f08 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008d8c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008d94:	e096      	b.n	8008ec4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008d96:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008d9a:	f04f 0100 	mov.w	r1, #0
 8008d9e:	f7fd fb87 	bl	80064b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008da2:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 8083 	beq.w	8008eb2 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	695a      	ldr	r2, [r3, #20]
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	4950      	ldr	r1, [pc, #320]	@ (8008f0c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008dca:	fba1 1303 	umull	r1, r3, r1, r3
 8008dce:	0e1b      	lsrs	r3, r3, #24
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d303      	bcc.n	8008ddc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	61bb      	str	r3, [r7, #24]
 8008dda:	e05a      	b.n	8008e92 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008de4:	d103      	bne.n	8008dee <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	61bb      	str	r3, [r7, #24]
 8008dec:	e051      	b.n	8008e92 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008df6:	d126      	bne.n	8008e46 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10e      	bne.n	8008e1e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	4a43      	ldr	r2, [pc, #268]	@ (8008f10 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d906      	bls.n	8008e16 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	4a40      	ldr	r2, [pc, #256]	@ (8008f0c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e10:	0e5b      	lsrs	r3, r3, #25
 8008e12:	61bb      	str	r3, [r7, #24]
 8008e14:	e03d      	b.n	8008e92 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	61bb      	str	r3, [r7, #24]
 8008e1c:	e039      	b.n	8008e92 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	005b      	lsls	r3, r3, #1
 8008e24:	69fa      	ldr	r2, [r7, #28]
 8008e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e2a:	4a39      	ldr	r2, [pc, #228]	@ (8008f10 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d906      	bls.n	8008e3e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	4a36      	ldr	r2, [pc, #216]	@ (8008f0c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e34:	fba2 2303 	umull	r2, r3, r2, r3
 8008e38:	0e5b      	lsrs	r3, r3, #25
 8008e3a:	61bb      	str	r3, [r7, #24]
 8008e3c:	e029      	b.n	8008e92 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	61bb      	str	r3, [r7, #24]
 8008e44:	e025      	b.n	8008e92 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10e      	bne.n	8008e6c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	4a30      	ldr	r2, [pc, #192]	@ (8008f14 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d906      	bls.n	8008e64 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	4a2c      	ldr	r2, [pc, #176]	@ (8008f0c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e5e:	0e1b      	lsrs	r3, r3, #24
 8008e60:	61bb      	str	r3, [r7, #24]
 8008e62:	e016      	b.n	8008e92 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	695b      	ldr	r3, [r3, #20]
 8008e68:	61bb      	str	r3, [r7, #24]
 8008e6a:	e012      	b.n	8008e92 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	69fa      	ldr	r2, [r7, #28]
 8008e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e78:	4a26      	ldr	r2, [pc, #152]	@ (8008f14 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d906      	bls.n	8008e8c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	4a22      	ldr	r2, [pc, #136]	@ (8008f0c <HAL_SD_ConfigWideBusOperation+0x218>)
 8008e82:	fba2 2303 	umull	r2, r3, r2, r3
 8008e86:	0e1b      	lsrs	r3, r3, #24
 8008e88:	61bb      	str	r3, [r7, #24]
 8008e8a:	e002      	b.n	8008e92 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681c      	ldr	r4, [r3, #0]
 8008e96:	466a      	mov	r2, sp
 8008e98:	f107 0314 	add.w	r3, r7, #20
 8008e9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008ea0:	e882 0003 	stmia.w	r2, {r0, r1}
 8008ea4:	f107 0308 	add.w	r3, r7, #8
 8008ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f001 fb3a 	bl	800a524 <SDMMC_Init>
 8008eb0:	e008      	b.n	8008ec4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eb6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f001 fc07 	bl	800a6e0 <SDMMC_CmdBlockLength>
 8008ed2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00c      	beq.n	8008ef4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a0a      	ldr	r2, [pc, #40]	@ (8008f08 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008ee0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	372c      	adds	r7, #44	@ 0x2c
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd90      	pop	{r4, r7, pc}
 8008f08:	1fe00fff 	.word	0x1fe00fff
 8008f0c:	55e63b89 	.word	0x55e63b89
 8008f10:	02faf080 	.word	0x02faf080
 8008f14:	017d7840 	.word	0x017d7840

08008f18 <HAL_SD_ConfigSpeedBusOperation>:
  *            @arg SDMMC_SPEED_MODE_ULTRA: Ultra high speed mode
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_SD_ConfigSpeedBusOperation(SD_HandleTypeDef *hsd, uint32_t SpeedMode)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008f22:	2300      	movs	r3, #0
 8008f24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SDMMC_SPEED_MODE(SpeedMode));
  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2203      	movs	r2, #3
 8008f2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        status = HAL_ERROR;
        break;
    }
  }
#else
  switch (SpeedMode)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d027      	beq.n	8008f84 <HAL_SD_ConfigSpeedBusOperation+0x6c>
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d85c      	bhi.n	8008ff4 <HAL_SD_ConfigSpeedBusOperation+0xdc>
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d003      	beq.n	8008f48 <HAL_SD_ConfigSpeedBusOperation+0x30>
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d046      	beq.n	8008fd4 <HAL_SD_ConfigSpeedBusOperation+0xbc>
 8008f46:	e055      	b.n	8008ff4 <HAL_SD_ConfigSpeedBusOperation+0xdc>
  {
    case SDMMC_SPEED_MODE_AUTO:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f50:	d008      	beq.n	8008f64 <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008f56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f5a:	d003      	beq.n	8008f64 <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d150      	bne.n	8009006 <HAL_SD_ConfigSpeedBusOperation+0xee>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008f64:	4947      	ldr	r1, [pc, #284]	@ (8009084 <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fc6c 	bl	8009844 <SD_SwitchSpeed>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d049      	beq.n	8009006 <HAL_SD_ConfigSpeedBusOperation+0xee>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f76:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	75fb      	strb	r3, [r7, #23]
      }
      else
      {
        /*Nothing to do, Use defaultSpeed */
      }
      break;
 8008f82:	e040      	b.n	8009006 <HAL_SD_ConfigSpeedBusOperation+0xee>
    }
    case SDMMC_SPEED_MODE_HIGH:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f8c:	d008      	beq.n	8008fa0 <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f96:	d003      	beq.n	8008fa0 <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d10f      	bne.n	8008fc0 <HAL_SD_ConfigSpeedBusOperation+0xa8>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008fa0:	4938      	ldr	r1, [pc, #224]	@ (8009084 <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fc4e 	bl	8009844 <SD_SwitchSpeed>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d011      	beq.n	8008fd2 <HAL_SD_ConfigSpeedBusOperation+0xba>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fb2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	75fb      	strb	r3, [r7, #23]
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008fbe:	e008      	b.n	8008fd2 <HAL_SD_ConfigSpeedBusOperation+0xba>
        }
      }
      else
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008fd0:	e01c      	b.n	800900c <HAL_SD_ConfigSpeedBusOperation+0xf4>
 8008fd2:	e01b      	b.n	800900c <HAL_SD_ConfigSpeedBusOperation+0xf4>
    }
    case SDMMC_SPEED_MODE_DEFAULT:
    {
      /* Switch to default Speed */
      if (SD_SwitchSpeed(hsd, SDMMC_SDR12_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008fd4:	492c      	ldr	r1, [pc, #176]	@ (8009088 <HAL_SD_ConfigSpeedBusOperation+0x170>)
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 fc34 	bl	8009844 <SD_SwitchSpeed>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d013      	beq.n	800900a <HAL_SD_ConfigSpeedBusOperation+0xf2>
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fe6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	75fb      	strb	r3, [r7, #23]
      }

      break;
 8008ff2:	e00a      	b.n	800900a <HAL_SD_ConfigSpeedBusOperation+0xf2>
    }
    case SDMMC_SPEED_MODE_ULTRA: /*not valid without transceiver*/
    default:
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ff8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	75fb      	strb	r3, [r7, #23]
      break;
 8009004:	e002      	b.n	800900c <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 8009006:	bf00      	nop
 8009008:	e000      	b.n	800900c <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 800900a:	bf00      	nop
  }
#endif /* USE_SD_TRANSCEIVER */

  /* Verify that SD card is ready to use after Speed mode switch*/
  tickstart = HAL_GetTick();
 800900c:	f7f7 ff26 	bl	8000e5c <HAL_GetTick>
 8009010:	6138      	str	r0, [r7, #16]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009012:	e011      	b.n	8009038 <HAL_SD_ConfigSpeedBusOperation+0x120>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009014:	f7f7 ff22 	bl	8000e5c <HAL_GetTick>
 8009018:	4602      	mov	r2, r0
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009022:	d109      	bne.n	8009038 <HAL_SD_ConfigSpeedBusOperation+0x120>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800902a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e021      	b.n	800907c <HAL_SD_ConfigSpeedBusOperation+0x164>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f829 	bl	8009090 <HAL_SD_GetCardState>
 800903e:	4603      	mov	r3, r0
 8009040:	2b04      	cmp	r3, #4
 8009042:	d1e7      	bne.n	8009014 <HAL_SD_ConfigSpeedBusOperation+0xfc>
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800904c:	4618      	mov	r0, r3
 800904e:	f001 fb47 	bl	800a6e0 <SDMMC_CmdBlockLength>
 8009052:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00b      	beq.n	8009072 <HAL_SD_ConfigSpeedBusOperation+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a0b      	ldr	r2, [pc, #44]	@ (800908c <HAL_SD_ConfigSpeedBusOperation+0x174>)
 8009060:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	431a      	orrs	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	75fb      	strb	r3, [r7, #23]
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  return status;
 800907a:	7dfb      	ldrb	r3, [r7, #23]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3718      	adds	r7, #24
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	80ffff01 	.word	0x80ffff01
 8009088:	80ffff00 	.word	0x80ffff00
 800908c:	1fe00fff 	.word	0x1fe00fff

08009090 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009098:	2300      	movs	r3, #0
 800909a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800909c:	f107 030c 	add.w	r3, r7, #12
 80090a0:	4619      	mov	r1, r3
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fa40 	bl	8009528 <SD_SendStatus>
 80090a8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d005      	beq.n	80090bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	431a      	orrs	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	0a5b      	lsrs	r3, r3, #9
 80090c0:	f003 030f 	and.w	r3, r3, #15
 80090c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80090c6:	693b      	ldr	r3, [r7, #16]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b090      	sub	sp, #64	@ 0x40
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80090dc:	f7f7 febe 	bl	8000e5c <HAL_GetTick>
 80090e0:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f001 fa75 	bl	800a5d6 <SDMMC_GetPowerState>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d102      	bne.n	80090f8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090f2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80090f6:	e0b5      	b.n	8009264 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d02e      	beq.n	800915e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4618      	mov	r0, r3
 8009106:	f001 fcc0 	bl	800aa8a <SDMMC_CmdSendCID>
 800910a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800910c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <SD_InitCard+0x46>
    {
      return errorstate;
 8009112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009114:	e0a6      	b.n	8009264 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2100      	movs	r1, #0
 800911c:	4618      	mov	r0, r3
 800911e:	f001 faa0 	bl	800a662 <SDMMC_GetResponse>
 8009122:	4602      	mov	r2, r0
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2104      	movs	r1, #4
 800912e:	4618      	mov	r0, r3
 8009130:	f001 fa97 	bl	800a662 <SDMMC_GetResponse>
 8009134:	4602      	mov	r2, r0
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2108      	movs	r1, #8
 8009140:	4618      	mov	r0, r3
 8009142:	f001 fa8e 	bl	800a662 <SDMMC_GetResponse>
 8009146:	4602      	mov	r2, r0
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	210c      	movs	r1, #12
 8009152:	4618      	mov	r0, r3
 8009154:	f001 fa85 	bl	800a662 <SDMMC_GetResponse>
 8009158:	4602      	mov	r2, r0
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009162:	2b03      	cmp	r3, #3
 8009164:	d01d      	beq.n	80091a2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009166:	e019      	b.n	800919c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f107 020a 	add.w	r2, r7, #10
 8009170:	4611      	mov	r1, r2
 8009172:	4618      	mov	r0, r3
 8009174:	f001 fcc8 	bl	800ab08 <SDMMC_CmdSetRelAdd>
 8009178:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800917a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009182:	e06f      	b.n	8009264 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009184:	f7f7 fe6a 	bl	8000e5c <HAL_GetTick>
 8009188:	4602      	mov	r2, r0
 800918a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8009192:	4293      	cmp	r3, r2
 8009194:	d902      	bls.n	800919c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009196:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800919a:	e063      	b.n	8009264 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800919c:	897b      	ldrh	r3, [r7, #10]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d0e2      	beq.n	8009168 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	d036      	beq.n	8009218 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80091aa:	897b      	ldrh	r3, [r7, #10]
 80091ac:	461a      	mov	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091ba:	041b      	lsls	r3, r3, #16
 80091bc:	4619      	mov	r1, r3
 80091be:	4610      	mov	r0, r2
 80091c0:	f001 fc82 	bl	800aac8 <SDMMC_CmdSendCSD>
 80091c4:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80091c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d001      	beq.n	80091d0 <SD_InitCard+0x100>
    {
      return errorstate;
 80091cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ce:	e049      	b.n	8009264 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2100      	movs	r1, #0
 80091d6:	4618      	mov	r0, r3
 80091d8:	f001 fa43 	bl	800a662 <SDMMC_GetResponse>
 80091dc:	4602      	mov	r2, r0
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2104      	movs	r1, #4
 80091e8:	4618      	mov	r0, r3
 80091ea:	f001 fa3a 	bl	800a662 <SDMMC_GetResponse>
 80091ee:	4602      	mov	r2, r0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2108      	movs	r1, #8
 80091fa:	4618      	mov	r0, r3
 80091fc:	f001 fa31 	bl	800a662 <SDMMC_GetResponse>
 8009200:	4602      	mov	r2, r0
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	210c      	movs	r1, #12
 800920c:	4618      	mov	r0, r3
 800920e:	f001 fa28 	bl	800a662 <SDMMC_GetResponse>
 8009212:	4602      	mov	r2, r0
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2104      	movs	r1, #4
 800921e:	4618      	mov	r0, r3
 8009220:	f001 fa1f 	bl	800a662 <SDMMC_GetResponse>
 8009224:	4603      	mov	r3, r0
 8009226:	0d1a      	lsrs	r2, r3, #20
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800922c:	f107 030c 	add.w	r3, r7, #12
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7ff fad0 	bl	80087d8 <HAL_SD_GetCardCSD>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d002      	beq.n	8009244 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800923e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009242:	e00f      	b.n	8009264 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800924c:	041b      	lsls	r3, r3, #16
 800924e:	4619      	mov	r1, r3
 8009250:	4610      	mov	r0, r2
 8009252:	f001 fb31 	bl	800a8b8 <SDMMC_CmdSelDesel>
 8009256:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <SD_InitCard+0x192>
  {
    return errorstate;
 800925e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009260:	e000      	b.n	8009264 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3740      	adds	r7, #64	@ 0x40
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009274:	2300      	movs	r3, #0
 8009276:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4618      	mov	r0, r3
 8009286:	f001 fb3a 	bl	800a8fe <SDMMC_CmdGoIdleState>
 800928a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	e072      	b.n	800937c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4618      	mov	r0, r3
 800929c:	f001 fb4d 	bl	800a93a <SDMMC_CmdOperCond>
 80092a0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092a8:	d10d      	bne.n	80092c6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f001 fb22 	bl	800a8fe <SDMMC_CmdGoIdleState>
 80092ba:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d004      	beq.n	80092cc <SD_PowerON+0x60>
    {
      return errorstate;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	e05a      	b.n	800937c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d137      	bne.n	8009344 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2100      	movs	r1, #0
 80092da:	4618      	mov	r0, r3
 80092dc:	f001 fb4d 	bl	800a97a <SDMMC_CmdAppCommand>
 80092e0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d02d      	beq.n	8009344 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092e8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80092ec:	e046      	b.n	800937c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2100      	movs	r1, #0
 80092f4:	4618      	mov	r0, r3
 80092f6:	f001 fb40 	bl	800a97a <SDMMC_CmdAppCommand>
 80092fa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	e03a      	b.n	800937c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	491e      	ldr	r1, [pc, #120]	@ (8009384 <SD_PowerON+0x118>)
 800930c:	4618      	mov	r0, r3
 800930e:	f001 fb57 	bl	800a9c0 <SDMMC_CmdAppOperCommand>
 8009312:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800931a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800931e:	e02d      	b.n	800937c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2100      	movs	r1, #0
 8009326:	4618      	mov	r0, r3
 8009328:	f001 f99b 	bl	800a662 <SDMMC_GetResponse>
 800932c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	0fdb      	lsrs	r3, r3, #31
 8009332:	2b01      	cmp	r3, #1
 8009334:	d101      	bne.n	800933a <SD_PowerON+0xce>
 8009336:	2301      	movs	r3, #1
 8009338:	e000      	b.n	800933c <SD_PowerON+0xd0>
 800933a:	2300      	movs	r3, #0
 800933c:	613b      	str	r3, [r7, #16]

    count++;
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	3301      	adds	r3, #1
 8009342:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800934a:	4293      	cmp	r3, r2
 800934c:	d802      	bhi.n	8009354 <SD_PowerON+0xe8>
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d0cc      	beq.n	80092ee <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800935a:	4293      	cmp	r3, r2
 800935c:	d902      	bls.n	8009364 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800935e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009362:	e00b      	b.n	800937c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3718      	adds	r7, #24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	c1100000 	.word	0xc1100000

08009388 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b08c      	sub	sp, #48	@ 0x30
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009392:	f7f7 fd63 	bl	8000e5c <HAL_GetTick>
 8009396:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2100      	movs	r1, #0
 80093a2:	4618      	mov	r0, r3
 80093a4:	f001 f95d 	bl	800a662 <SDMMC_GetResponse>
 80093a8:	4603      	mov	r3, r0
 80093aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093b2:	d102      	bne.n	80093ba <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80093b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80093b8:	e0b0      	b.n	800951c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2140      	movs	r1, #64	@ 0x40
 80093c0:	4618      	mov	r0, r3
 80093c2:	f001 f98d 	bl	800a6e0 <SDMMC_CmdBlockLength>
 80093c6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d005      	beq.n	80093da <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	e0a0      	b.n	800951c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093e2:	041b      	lsls	r3, r3, #16
 80093e4:	4619      	mov	r1, r3
 80093e6:	4610      	mov	r0, r2
 80093e8:	f001 fac7 	bl	800a97a <SDMMC_CmdAppCommand>
 80093ec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d005      	beq.n	8009400 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	e08d      	b.n	800951c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009400:	f04f 33ff 	mov.w	r3, #4294967295
 8009404:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009406:	2340      	movs	r3, #64	@ 0x40
 8009408:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800940a:	2360      	movs	r3, #96	@ 0x60
 800940c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800940e:	2302      	movs	r3, #2
 8009410:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009412:	2300      	movs	r3, #0
 8009414:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009416:	2301      	movs	r3, #1
 8009418:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f107 0208 	add.w	r2, r7, #8
 8009422:	4611      	mov	r1, r2
 8009424:	4618      	mov	r0, r3
 8009426:	f001 f92f 	bl	800a688 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4618      	mov	r0, r3
 8009430:	f001 fbaf 	bl	800ab92 <SDMMC_CmdStatusRegister>
 8009434:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d02b      	beq.n	8009494 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8009444:	6a3b      	ldr	r3, [r7, #32]
 8009446:	e069      	b.n	800951c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800944e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d013      	beq.n	800947e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009456:	2300      	movs	r3, #0
 8009458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800945a:	e00d      	b.n	8009478 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4618      	mov	r0, r3
 8009462:	f001 f889 	bl	800a578 <SDMMC_ReadFIFO>
 8009466:	4602      	mov	r2, r0
 8009468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946a:	601a      	str	r2, [r3, #0]
        pData++;
 800946c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946e:	3304      	adds	r3, #4
 8009470:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8009472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009474:	3301      	adds	r3, #1
 8009476:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800947a:	2b07      	cmp	r3, #7
 800947c:	d9ee      	bls.n	800945c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800947e:	f7f7 fced 	bl	8000e5c <HAL_GetTick>
 8009482:	4602      	mov	r2, r0
 8009484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800948c:	d102      	bne.n	8009494 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800948e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009492:	e043      	b.n	800951c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800949a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d0d2      	beq.n	8009448 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094a8:	f003 0308 	and.w	r3, r3, #8
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094b0:	2308      	movs	r3, #8
 80094b2:	e033      	b.n	800951c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ba:	f003 0302 	and.w	r3, r3, #2
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d001      	beq.n	80094c6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094c2:	2302      	movs	r3, #2
 80094c4:	e02a      	b.n	800951c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094cc:	f003 0320 	and.w	r3, r3, #32
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d017      	beq.n	8009504 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80094d4:	2320      	movs	r3, #32
 80094d6:	e021      	b.n	800951c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4618      	mov	r0, r3
 80094de:	f001 f84b 	bl	800a578 <SDMMC_ReadFIFO>
 80094e2:	4602      	mov	r2, r0
 80094e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e6:	601a      	str	r2, [r3, #0]
    pData++;
 80094e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ea:	3304      	adds	r3, #4
 80094ec:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80094ee:	f7f7 fcb5 	bl	8000e5c <HAL_GetTick>
 80094f2:	4602      	mov	r2, r0
 80094f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fc:	d102      	bne.n	8009504 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80094fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009502:	e00b      	b.n	800951c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800950a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1e2      	bne.n	80094d8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a03      	ldr	r2, [pc, #12]	@ (8009524 <SD_SendSDStatus+0x19c>)
 8009518:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3730      	adds	r7, #48	@ 0x30
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	18000f3a 	.word	0x18000f3a

08009528 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d102      	bne.n	800953e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009538:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800953c:	e018      	b.n	8009570 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009546:	041b      	lsls	r3, r3, #16
 8009548:	4619      	mov	r1, r3
 800954a:	4610      	mov	r0, r2
 800954c:	f001 fafe 	bl	800ab4c <SDMMC_CmdSendStatus>
 8009550:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d001      	beq.n	800955c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	e009      	b.n	8009570 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2100      	movs	r1, #0
 8009562:	4618      	mov	r0, r3
 8009564:	f001 f87d 	bl	800a662 <SDMMC_GetResponse>
 8009568:	4602      	mov	r2, r0
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009580:	2300      	movs	r3, #0
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	2300      	movs	r3, #0
 8009586:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2100      	movs	r1, #0
 800958e:	4618      	mov	r0, r3
 8009590:	f001 f867 	bl	800a662 <SDMMC_GetResponse>
 8009594:	4603      	mov	r3, r0
 8009596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800959a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800959e:	d102      	bne.n	80095a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80095a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80095a4:	e02f      	b.n	8009606 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80095a6:	f107 030c 	add.w	r3, r7, #12
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f879 	bl	80096a4 <SD_FindSCR>
 80095b2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d001      	beq.n	80095be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	e023      	b.n	8009606 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d01c      	beq.n	8009602 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095d0:	041b      	lsls	r3, r3, #16
 80095d2:	4619      	mov	r1, r3
 80095d4:	4610      	mov	r0, r2
 80095d6:	f001 f9d0 	bl	800a97a <SDMMC_CmdAppCommand>
 80095da:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	e00f      	b.n	8009606 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2102      	movs	r1, #2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f001 fa07 	bl	800aa00 <SDMMC_CmdBusWidth>
 80095f2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d001      	beq.n	80095fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	e003      	b.n	8009606 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80095fe:	2300      	movs	r3, #0
 8009600:	e001      	b.n	8009606 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009602:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009606:	4618      	mov	r0, r3
 8009608:	3718      	adds	r7, #24
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b086      	sub	sp, #24
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009616:	2300      	movs	r3, #0
 8009618:	60fb      	str	r3, [r7, #12]
 800961a:	2300      	movs	r3, #0
 800961c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2100      	movs	r1, #0
 8009624:	4618      	mov	r0, r3
 8009626:	f001 f81c 	bl	800a662 <SDMMC_GetResponse>
 800962a:	4603      	mov	r3, r0
 800962c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009630:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009634:	d102      	bne.n	800963c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009636:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800963a:	e02f      	b.n	800969c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800963c:	f107 030c 	add.w	r3, r7, #12
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f82e 	bl	80096a4 <SD_FindSCR>
 8009648:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	e023      	b.n	800969c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d01c      	beq.n	8009698 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009666:	041b      	lsls	r3, r3, #16
 8009668:	4619      	mov	r1, r3
 800966a:	4610      	mov	r0, r2
 800966c:	f001 f985 	bl	800a97a <SDMMC_CmdAppCommand>
 8009670:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	e00f      	b.n	800969c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2100      	movs	r1, #0
 8009682:	4618      	mov	r0, r3
 8009684:	f001 f9bc 	bl	800aa00 <SDMMC_CmdBusWidth>
 8009688:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	e003      	b.n	800969c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009694:	2300      	movs	r3, #0
 8009696:	e001      	b.n	800969c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009698:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08e      	sub	sp, #56	@ 0x38
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80096ae:	f7f7 fbd5 	bl	8000e5c <HAL_GetTick>
 80096b2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80096b4:	2300      	movs	r3, #0
 80096b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80096b8:	2300      	movs	r3, #0
 80096ba:	60bb      	str	r3, [r7, #8]
 80096bc:	2300      	movs	r3, #0
 80096be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2108      	movs	r1, #8
 80096ca:	4618      	mov	r0, r3
 80096cc:	f001 f808 	bl	800a6e0 <SDMMC_CmdBlockLength>
 80096d0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80096d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <SD_FindSCR+0x38>
  {
    return errorstate;
 80096d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096da:	e0ad      	b.n	8009838 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096e4:	041b      	lsls	r3, r3, #16
 80096e6:	4619      	mov	r1, r3
 80096e8:	4610      	mov	r0, r2
 80096ea:	f001 f946 	bl	800a97a <SDMMC_CmdAppCommand>
 80096ee:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80096f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <SD_FindSCR+0x56>
  {
    return errorstate;
 80096f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f8:	e09e      	b.n	8009838 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096fa:	f04f 33ff 	mov.w	r3, #4294967295
 80096fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009700:	2308      	movs	r3, #8
 8009702:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009704:	2330      	movs	r3, #48	@ 0x30
 8009706:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009708:	2302      	movs	r3, #2
 800970a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800970c:	2300      	movs	r3, #0
 800970e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009710:	2301      	movs	r3, #1
 8009712:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f107 0210 	add.w	r2, r7, #16
 800971c:	4611      	mov	r1, r2
 800971e:	4618      	mov	r0, r3
 8009720:	f000 ffb2 	bl	800a688 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4618      	mov	r0, r3
 800972a:	f001 f98c 	bl	800aa46 <SDMMC_CmdSendSCR>
 800972e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009732:	2b00      	cmp	r3, #0
 8009734:	d027      	beq.n	8009786 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009738:	e07e      	b.n	8009838 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009740:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d113      	bne.n	8009770 <SD_FindSCR+0xcc>
 8009748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800974a:	2b00      	cmp	r3, #0
 800974c:	d110      	bne.n	8009770 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f000 ff10 	bl	800a578 <SDMMC_ReadFIFO>
 8009758:	4603      	mov	r3, r0
 800975a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4618      	mov	r0, r3
 8009762:	f000 ff09 	bl	800a578 <SDMMC_ReadFIFO>
 8009766:	4603      	mov	r3, r0
 8009768:	60fb      	str	r3, [r7, #12]
      index++;
 800976a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800976c:	3301      	adds	r3, #1
 800976e:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009770:	f7f7 fb74 	bl	8000e5c <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977e:	d102      	bne.n	8009786 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009780:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009784:	e058      	b.n	8009838 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800978c:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009790:	4013      	ands	r3, r2
 8009792:	2b00      	cmp	r3, #0
 8009794:	d0d1      	beq.n	800973a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800979c:	f003 0308 	and.w	r3, r3, #8
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d005      	beq.n	80097b0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2208      	movs	r2, #8
 80097aa:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80097ac:	2308      	movs	r3, #8
 80097ae:	e043      	b.n	8009838 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097b6:	f003 0302 	and.w	r3, r3, #2
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d005      	beq.n	80097ca <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2202      	movs	r2, #2
 80097c4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80097c6:	2302      	movs	r3, #2
 80097c8:	e036      	b.n	8009838 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097d0:	f003 0320 	and.w	r3, r3, #32
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d005      	beq.n	80097e4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2220      	movs	r2, #32
 80097de:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80097e0:	2320      	movs	r3, #32
 80097e2:	e029      	b.n	8009838 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a15      	ldr	r2, [pc, #84]	@ (8009840 <SD_FindSCR+0x19c>)
 80097ea:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	061a      	lsls	r2, r3, #24
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	021b      	lsls	r3, r3, #8
 80097f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80097f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	0a1b      	lsrs	r3, r3, #8
 80097fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009802:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	0e1b      	lsrs	r3, r3, #24
 8009808:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800980a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980c:	601a      	str	r2, [r3, #0]
    scr++;
 800980e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009810:	3304      	adds	r3, #4
 8009812:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	061a      	lsls	r2, r3, #24
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	021b      	lsls	r3, r3, #8
 800981c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009820:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	0a1b      	lsrs	r3, r3, #8
 8009826:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800982a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	0e1b      	lsrs	r3, r3, #24
 8009830:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009834:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3738      	adds	r7, #56	@ 0x38
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	18000f3a 	.word	0x18000f3a

08009844 <SD_SwitchSpeed>:
  * @param  hsd: SD handle
  * @param  SwitchSpeedMode: SD speed mode( SDMMC_SDR12_SWITCH_PATTERN, SDMMC_SDR25_SWITCH_PATTERN)
  * @retval SD Card error state
  */
uint32_t SD_SwitchSpeed(SD_HandleTypeDef *hsd, uint32_t SwitchSpeedMode)
{
 8009844:	b590      	push	{r4, r7, lr}
 8009846:	b09d      	sub	sp, #116	@ 0x74
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800984e:	2300      	movs	r3, #0
 8009850:	66fb      	str	r3, [r7, #108]	@ 0x6c
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 8009852:	f107 0308 	add.w	r3, r7, #8
 8009856:	2240      	movs	r2, #64	@ 0x40
 8009858:	2100      	movs	r1, #0
 800985a:	4618      	mov	r0, r3
 800985c:	f007 f864 	bl	8010928 <memset>
  uint32_t count;
  uint32_t loop = 0 ;
 8009860:	2300      	movs	r3, #0
 8009862:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t Timeout = HAL_GetTick();
 8009864:	f7f7 fafa 	bl	8000e5c <HAL_GetTick>
 8009868:	6638      	str	r0, [r7, #96]	@ 0x60

  if (hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800986e:	2b00      	cmp	r3, #0
 8009870:	d102      	bne.n	8009878 <SD_SwitchSpeed+0x34>
  {
    /* Standard Speed Card <= 12.5Mhz  */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009872:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009876:	e0ad      	b.n	80099d4 <SD_SwitchSpeed+0x190>
  }

  if (hsd->SdCard.CardSpeed >= CARD_HIGH_SPEED)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800987c:	2bff      	cmp	r3, #255	@ 0xff
 800987e:	f240 80a8 	bls.w	80099d2 <SD_SwitchSpeed+0x18e>
  {
    /* Initialize the Data control register */
    hsd->Instance->DCTRL = 0;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2200      	movs	r2, #0
 8009888:	62da      	str	r2, [r3, #44]	@ 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2140      	movs	r1, #64	@ 0x40
 8009890:	4618      	mov	r0, r3
 8009892:	f000 ff25 	bl	800a6e0 <SDMMC_CmdBlockLength>
 8009896:	66f8      	str	r0, [r7, #108]	@ 0x6c

    if (errorstate != HAL_SD_ERROR_NONE)
 8009898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <SD_SwitchSpeed+0x5e>
    {
      return errorstate;
 800989e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098a0:	e098      	b.n	80099d4 <SD_SwitchSpeed+0x190>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80098a2:	f04f 33ff 	mov.w	r3, #4294967295
 80098a6:	64bb      	str	r3, [r7, #72]	@ 0x48
    sdmmc_datainitstructure.DataLength    = 64U;
 80098a8:	2340      	movs	r3, #64	@ 0x40
 80098aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 80098ac:	2360      	movs	r3, #96	@ 0x60
 80098ae:	653b      	str	r3, [r7, #80]	@ 0x50
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80098b0:	2302      	movs	r3, #2
 80098b2:	657b      	str	r3, [r7, #84]	@ 0x54
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80098b4:	2300      	movs	r3, #0
 80098b6:	65bb      	str	r3, [r7, #88]	@ 0x58
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 80098b8:	2301      	movs	r3, #1
 80098ba:	65fb      	str	r3, [r7, #92]	@ 0x5c

    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80098c4:	4611      	mov	r1, r2
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fede 	bl	800a688 <SDMMC_ConfigData>


    errorstate = SDMMC_CmdSwitch(hsd->Instance, SwitchSpeedMode);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f001 f97f 	bl	800abd6 <SDMMC_CmdSwitch>
 80098d8:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (errorstate != HAL_SD_ERROR_NONE)
 80098da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d036      	beq.n	800994e <SD_SwitchSpeed+0x10a>
    {
      return errorstate;
 80098e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098e2:	e077      	b.n	80099d4 <SD_SwitchSpeed+0x190>
    }

    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d01a      	beq.n	8009928 <SD_SwitchSpeed+0xe4>
      {
        for (count = 0U; count < 8U; count++)
 80098f2:	2300      	movs	r3, #0
 80098f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098f6:	e011      	b.n	800991c <SD_SwitchSpeed+0xd8>
        {
          SD_hs[(8U * loop) + count]  = SDMMC_ReadFIFO(hsd->Instance);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6819      	ldr	r1, [r3, #0]
 80098fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098fe:	00da      	lsls	r2, r3, #3
 8009900:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009902:	18d4      	adds	r4, r2, r3
 8009904:	4608      	mov	r0, r1
 8009906:	f000 fe37 	bl	800a578 <SDMMC_ReadFIFO>
 800990a:	4602      	mov	r2, r0
 800990c:	00a3      	lsls	r3, r4, #2
 800990e:	3370      	adds	r3, #112	@ 0x70
 8009910:	443b      	add	r3, r7
 8009912:	f843 2c68 	str.w	r2, [r3, #-104]
        for (count = 0U; count < 8U; count++)
 8009916:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009918:	3301      	adds	r3, #1
 800991a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800991c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800991e:	2b07      	cmp	r3, #7
 8009920:	d9ea      	bls.n	80098f8 <SD_SwitchSpeed+0xb4>
        }
        loop ++;
 8009922:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009924:	3301      	adds	r3, #1
 8009926:	667b      	str	r3, [r7, #100]	@ 0x64
      }

      if ((HAL_GetTick() - Timeout) >=  SDMMC_DATATIMEOUT)
 8009928:	f7f7 fa98 	bl	8000e5c <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009936:	d10a      	bne.n	800994e <SD_SwitchSpeed+0x10a>
      {
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800993e:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_SD_ERROR_TIMEOUT;
 8009948:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800994c:	e042      	b.n	80099d4 <SD_SwitchSpeed+0x190>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009954:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009958:	4013      	ands	r3, r2
 800995a:	2b00      	cmp	r3, #0
 800995c:	d0c2      	beq.n	80098e4 <SD_SwitchSpeed+0xa0>
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009964:	f003 0308 	and.w	r3, r3, #8
 8009968:	2b00      	cmp	r3, #0
 800996a:	d005      	beq.n	8009978 <SD_SwitchSpeed+0x134>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2208      	movs	r2, #8
 8009972:	639a      	str	r2, [r3, #56]	@ 0x38

      return errorstate;
 8009974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009976:	e02d      	b.n	80099d4 <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b00      	cmp	r3, #0
 8009984:	d007      	beq.n	8009996 <SD_SwitchSpeed+0x152>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2202      	movs	r2, #2
 800998c:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;
 800998e:	2302      	movs	r3, #2
 8009990:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 8009992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009994:	e01e      	b.n	80099d4 <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800999c:	f003 0320 	and.w	r3, r3, #32
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d007      	beq.n	80099b4 <SD_SwitchSpeed+0x170>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2220      	movs	r2, #32
 80099aa:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_RX_OVERRUN;
 80099ac:	2320      	movs	r3, #32
 80099ae:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 80099b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099b2:	e00f      	b.n	80099d4 <SD_SwitchSpeed+0x190>
    {
      /* No error flag set */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a08      	ldr	r2, [pc, #32]	@ (80099dc <SD_SwitchSpeed+0x198>)
 80099ba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Test if the switch mode HS is ok */
    if ((((uint8_t *)SD_hs)[13] & 2U) != 2U)
 80099bc:	f107 0308 	add.w	r3, r7, #8
 80099c0:	330d      	adds	r3, #13
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	f003 0302 	and.w	r3, r3, #2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d102      	bne.n	80099d2 <SD_SwitchSpeed+0x18e>
    {
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80099cc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80099d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }

  }

  return errorstate;
 80099d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3774      	adds	r7, #116	@ 0x74
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd90      	pop	{r4, r7, pc}
 80099dc:	18000f3a 	.word	0x18000f3a

080099e0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d101      	bne.n	80099f4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e02b      	b.n	8009a4c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d106      	bne.n	8009a0e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f825 	bl	8009a58 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2202      	movs	r2, #2
 8009a12:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4610      	mov	r0, r2
 8009a22:	f000 fc7d 	bl	800a320 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6818      	ldr	r0, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	f000 fcd1 	bl	800a3d8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009a36:	4b07      	ldr	r3, [pc, #28]	@ (8009a54 <HAL_SDRAM_Init+0x74>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a06      	ldr	r2, [pc, #24]	@ (8009a54 <HAL_SDRAM_Init+0x74>)
 8009a3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a40:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	52004000 	.word	0x52004000

08009a58 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009a7e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d101      	bne.n	8009a8a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009a86:	2302      	movs	r3, #2
 8009a88:	e021      	b.n	8009ace <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009a8a:	7dfb      	ldrb	r3, [r7, #23]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d002      	beq.n	8009a96 <HAL_SDRAM_SendCommand+0x2a>
 8009a90:	7dfb      	ldrb	r3, [r7, #23]
 8009a92:	2b05      	cmp	r3, #5
 8009a94:	d118      	bne.n	8009ac8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2202      	movs	r2, #2
 8009a9a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	68b9      	ldr	r1, [r7, #8]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f000 fd00 	bl	800a4ac <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d104      	bne.n	8009abe <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2205      	movs	r2, #5
 8009ab8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009abc:	e006      	b.n	8009acc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009ac6:	e001      	b.n	8009acc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e000      	b.n	8009ace <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b082      	sub	sp, #8
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
 8009ade:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d101      	bne.n	8009af0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009aec:	2302      	movs	r3, #2
 8009aee:	e016      	b.n	8009b1e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d10f      	bne.n	8009b1c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2202      	movs	r2, #2
 8009b00:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 fcf2 	bl	800a4f4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	e000      	b.n	8009b1e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
	...

08009b28 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d101      	bne.n	8009b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e10f      	b.n	8009d5a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a87      	ldr	r2, [pc, #540]	@ (8009d64 <HAL_SPI_Init+0x23c>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d00f      	beq.n	8009b6a <HAL_SPI_Init+0x42>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a86      	ldr	r2, [pc, #536]	@ (8009d68 <HAL_SPI_Init+0x240>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d00a      	beq.n	8009b6a <HAL_SPI_Init+0x42>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a84      	ldr	r2, [pc, #528]	@ (8009d6c <HAL_SPI_Init+0x244>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d005      	beq.n	8009b6a <HAL_SPI_Init+0x42>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	2b0f      	cmp	r3, #15
 8009b64:	d901      	bls.n	8009b6a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e0f7      	b.n	8009d5a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fbbc 	bl	800a2e8 <SPI_GetPacketSize>
 8009b70:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a7b      	ldr	r2, [pc, #492]	@ (8009d64 <HAL_SPI_Init+0x23c>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d00c      	beq.n	8009b96 <HAL_SPI_Init+0x6e>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a79      	ldr	r2, [pc, #484]	@ (8009d68 <HAL_SPI_Init+0x240>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d007      	beq.n	8009b96 <HAL_SPI_Init+0x6e>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a78      	ldr	r2, [pc, #480]	@ (8009d6c <HAL_SPI_Init+0x244>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d002      	beq.n	8009b96 <HAL_SPI_Init+0x6e>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b08      	cmp	r3, #8
 8009b94:	d811      	bhi.n	8009bba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009b9a:	4a72      	ldr	r2, [pc, #456]	@ (8009d64 <HAL_SPI_Init+0x23c>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d009      	beq.n	8009bb4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a70      	ldr	r2, [pc, #448]	@ (8009d68 <HAL_SPI_Init+0x240>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d004      	beq.n	8009bb4 <HAL_SPI_Init+0x8c>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a6f      	ldr	r2, [pc, #444]	@ (8009d6c <HAL_SPI_Init+0x244>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d104      	bne.n	8009bbe <HAL_SPI_Init+0x96>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b10      	cmp	r3, #16
 8009bb8:	d901      	bls.n	8009bbe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e0cd      	b.n	8009d5a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d106      	bne.n	8009bd8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f003 fbfa 	bl	800d3cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2202      	movs	r2, #2
 8009bdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f022 0201 	bic.w	r2, r2, #1
 8009bee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009bfa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c04:	d119      	bne.n	8009c3a <HAL_SPI_Init+0x112>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c0e:	d103      	bne.n	8009c18 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d008      	beq.n	8009c2a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10c      	bne.n	8009c3a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009c24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c28:	d107      	bne.n	8009c3a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c38:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00f      	beq.n	8009c66 <HAL_SPI_Init+0x13e>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	2b06      	cmp	r3, #6
 8009c4c:	d90b      	bls.n	8009c66 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	430a      	orrs	r2, r1
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	e007      	b.n	8009c76 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	69da      	ldr	r2, [r3, #28]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7e:	431a      	orrs	r2, r3
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	431a      	orrs	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c88:	ea42 0103 	orr.w	r1, r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	68da      	ldr	r2, [r3, #12]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	430a      	orrs	r2, r1
 8009c96:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca0:	431a      	orrs	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca6:	431a      	orrs	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	431a      	orrs	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	431a      	orrs	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	431a      	orrs	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	431a      	orrs	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	431a      	orrs	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009cd6:	ea42 0103 	orr.w	r1, r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	430a      	orrs	r2, r1
 8009ce4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d113      	bne.n	8009d16 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d00:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009d14:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f022 0201 	bic.w	r2, r2, #1
 8009d24:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00a      	beq.n	8009d48 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	430a      	orrs	r2, r1
 8009d46:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	40013000 	.word	0x40013000
 8009d68:	40003800 	.word	0x40003800
 8009d6c:	40003c00 	.word	0x40003c00

08009d70 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b088      	sub	sp, #32
 8009d74:	af02      	add	r7, sp, #8
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	603b      	str	r3, [r7, #0]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3320      	adds	r3, #32
 8009d86:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d88:	f7f7 f868 	bl	8000e5c <HAL_GetTick>
 8009d8c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d001      	beq.n	8009d9e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009d9a:	2302      	movs	r3, #2
 8009d9c:	e1d1      	b.n	800a142 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <HAL_SPI_Transmit+0x3a>
 8009da4:	88fb      	ldrh	r3, [r7, #6]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e1c9      	b.n	800a142 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d101      	bne.n	8009dbc <HAL_SPI_Transmit+0x4c>
 8009db8:	2302      	movs	r3, #2
 8009dba:	e1c2      	b.n	800a142 <HAL_SPI_Transmit+0x3d2>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2203      	movs	r2, #3
 8009dc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	88fa      	ldrh	r2, [r7, #6]
 8009dde:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	88fa      	ldrh	r2, [r7, #6]
 8009de6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009e14:	d108      	bne.n	8009e28 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	e009      	b.n	8009e3c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009e3a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	4b96      	ldr	r3, [pc, #600]	@ (800a09c <HAL_SPI_Transmit+0x32c>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	88f9      	ldrh	r1, [r7, #6]
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	6812      	ldr	r2, [r2, #0]
 8009e4c:	430b      	orrs	r3, r1
 8009e4e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f042 0201 	orr.w	r2, r2, #1
 8009e5e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e68:	d107      	bne.n	8009e7a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	2b0f      	cmp	r3, #15
 8009e80:	d947      	bls.n	8009f12 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009e82:	e03f      	b.n	8009f04 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	f003 0302 	and.w	r3, r3, #2
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d114      	bne.n	8009ebc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	6812      	ldr	r2, [r2, #0]
 8009e9c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ea2:	1d1a      	adds	r2, r3, #4
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009eba:	e023      	b.n	8009f04 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ebc:	f7f6 ffce 	bl	8000e5c <HAL_GetTick>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d803      	bhi.n	8009ed4 <HAL_SPI_Transmit+0x164>
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed2:	d102      	bne.n	8009eda <HAL_SPI_Transmit+0x16a>
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d114      	bne.n	8009f04 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f000 f936 	bl	800a14c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ee6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009f00:	2303      	movs	r3, #3
 8009f02:	e11e      	b.n	800a142 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1b9      	bne.n	8009e84 <HAL_SPI_Transmit+0x114>
 8009f10:	e0f1      	b.n	800a0f6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	2b07      	cmp	r3, #7
 8009f18:	f240 80e6 	bls.w	800a0e8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009f1c:	e05d      	b.n	8009fda <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	f003 0302 	and.w	r3, r3, #2
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d132      	bne.n	8009f92 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d918      	bls.n	8009f6a <HAL_SPI_Transmit+0x1fa>
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d014      	beq.n	8009f6a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6812      	ldr	r2, [r2, #0]
 8009f4a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f50:	1d1a      	adds	r2, r3, #4
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	3b02      	subs	r3, #2
 8009f60:	b29a      	uxth	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009f68:	e037      	b.n	8009fda <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f6e:	881a      	ldrh	r2, [r3, #0]
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f78:	1c9a      	adds	r2, r3, #2
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	3b01      	subs	r3, #1
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009f90:	e023      	b.n	8009fda <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f92:	f7f6 ff63 	bl	8000e5c <HAL_GetTick>
 8009f96:	4602      	mov	r2, r0
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d803      	bhi.n	8009faa <HAL_SPI_Transmit+0x23a>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa8:	d102      	bne.n	8009fb0 <HAL_SPI_Transmit+0x240>
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d114      	bne.n	8009fda <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f000 f8cb 	bl	800a14c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e0b3      	b.n	800a142 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d19b      	bne.n	8009f1e <HAL_SPI_Transmit+0x1ae>
 8009fe6:	e086      	b.n	800a0f6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	695b      	ldr	r3, [r3, #20]
 8009fee:	f003 0302 	and.w	r3, r3, #2
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d154      	bne.n	800a0a0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	2b03      	cmp	r3, #3
 800a000:	d918      	bls.n	800a034 <HAL_SPI_Transmit+0x2c4>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a006:	2b40      	cmp	r3, #64	@ 0x40
 800a008:	d914      	bls.n	800a034 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	6812      	ldr	r2, [r2, #0]
 800a014:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a01a:	1d1a      	adds	r2, r3, #4
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a026:	b29b      	uxth	r3, r3
 800a028:	3b04      	subs	r3, #4
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a032:	e059      	b.n	800a0e8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d917      	bls.n	800a070 <HAL_SPI_Transmit+0x300>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d013      	beq.n	800a070 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a04c:	881a      	ldrh	r2, [r3, #0]
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a056:	1c9a      	adds	r2, r3, #2
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a062:	b29b      	uxth	r3, r3
 800a064:	3b02      	subs	r3, #2
 800a066:	b29a      	uxth	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a06e:	e03b      	b.n	800a0e8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3320      	adds	r3, #32
 800a07a:	7812      	ldrb	r2, [r2, #0]
 800a07c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a082:	1c5a      	adds	r2, r3, #1
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a08e:	b29b      	uxth	r3, r3
 800a090:	3b01      	subs	r3, #1
 800a092:	b29a      	uxth	r2, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a09a:	e025      	b.n	800a0e8 <HAL_SPI_Transmit+0x378>
 800a09c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0a0:	f7f6 fedc 	bl	8000e5c <HAL_GetTick>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d803      	bhi.n	800a0b8 <HAL_SPI_Transmit+0x348>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b6:	d102      	bne.n	800a0be <HAL_SPI_Transmit+0x34e>
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d114      	bne.n	800a0e8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 f844 	bl	800a14c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a0e4:	2303      	movs	r3, #3
 800a0e6:	e02c      	b.n	800a142 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f47f af79 	bne.w	8009fe8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2108      	movs	r1, #8
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 f8c3 	bl	800a28c <SPI_WaitOnFlagUntilTimeout>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d007      	beq.n	800a11c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a112:	f043 0220 	orr.w	r2, r3, #32
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f000 f815 	bl	800a14c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	e000      	b.n	800a142 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a140:	2300      	movs	r3, #0
  }
}
 800a142:	4618      	mov	r0, r3
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop

0800a14c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	699a      	ldr	r2, [r3, #24]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f042 0208 	orr.w	r2, r2, #8
 800a16a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	699a      	ldr	r2, [r3, #24]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f042 0210 	orr.w	r2, r2, #16
 800a17a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 0201 	bic.w	r2, r2, #1
 800a18a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6919      	ldr	r1, [r3, #16]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	4b3c      	ldr	r3, [pc, #240]	@ (800a288 <SPI_CloseTransfer+0x13c>)
 800a198:	400b      	ands	r3, r1
 800a19a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	689a      	ldr	r2, [r3, #8]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a1aa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d014      	beq.n	800a1e2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f003 0320 	and.w	r3, r3, #32
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00f      	beq.n	800a1e2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	699a      	ldr	r2, [r3, #24]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f042 0220 	orr.w	r2, r2, #32
 800a1e0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d014      	beq.n	800a218 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00f      	beq.n	800a218 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1fe:	f043 0204 	orr.w	r2, r3, #4
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	699a      	ldr	r2, [r3, #24]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a216:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00f      	beq.n	800a242 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a228:	f043 0201 	orr.w	r2, r3, #1
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	699a      	ldr	r2, [r3, #24]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a240:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00f      	beq.n	800a26c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a252:	f043 0208 	orr.w	r2, r3, #8
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699a      	ldr	r2, [r3, #24]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a26a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a27c:	bf00      	nop
 800a27e:	3714      	adds	r7, #20
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	fffffc90 	.word	0xfffffc90

0800a28c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	603b      	str	r3, [r7, #0]
 800a298:	4613      	mov	r3, r2
 800a29a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a29c:	e010      	b.n	800a2c0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a29e:	f7f6 fddd 	bl	8000e5c <HAL_GetTick>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d803      	bhi.n	800a2b6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b4:	d102      	bne.n	800a2bc <SPI_WaitOnFlagUntilTimeout+0x30>
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e00f      	b.n	800a2e0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	695a      	ldr	r2, [r3, #20]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	bf0c      	ite	eq
 800a2d0:	2301      	moveq	r3, #1
 800a2d2:	2300      	movne	r3, #0
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	79fb      	ldrb	r3, [r7, #7]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d0df      	beq.n	800a29e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2f4:	095b      	lsrs	r3, r3, #5
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	3301      	adds	r3, #1
 800a300:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	3307      	adds	r3, #7
 800a306:	08db      	lsrs	r3, r3, #3
 800a308:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	fb02 f303 	mul.w	r3, r2, r3
}
 800a312:	4618      	mov	r0, r3
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
	...

0800a320 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d121      	bne.n	800a376 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	4b27      	ldr	r3, [pc, #156]	@ (800a3d4 <FMC_SDRAM_Init+0xb4>)
 800a338:	4013      	ands	r3, r2
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	6851      	ldr	r1, [r2, #4]
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	6892      	ldr	r2, [r2, #8]
 800a342:	4311      	orrs	r1, r2
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	68d2      	ldr	r2, [r2, #12]
 800a348:	4311      	orrs	r1, r2
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	6912      	ldr	r2, [r2, #16]
 800a34e:	4311      	orrs	r1, r2
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	6952      	ldr	r2, [r2, #20]
 800a354:	4311      	orrs	r1, r2
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	6992      	ldr	r2, [r2, #24]
 800a35a:	4311      	orrs	r1, r2
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	69d2      	ldr	r2, [r2, #28]
 800a360:	4311      	orrs	r1, r2
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	6a12      	ldr	r2, [r2, #32]
 800a366:	4311      	orrs	r1, r2
 800a368:	683a      	ldr	r2, [r7, #0]
 800a36a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a36c:	430a      	orrs	r2, r1
 800a36e:	431a      	orrs	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	e026      	b.n	800a3c4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	69d9      	ldr	r1, [r3, #28]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	4319      	orrs	r1, r3
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a38c:	430b      	orrs	r3, r1
 800a38e:	431a      	orrs	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	685a      	ldr	r2, [r3, #4]
 800a398:	4b0e      	ldr	r3, [pc, #56]	@ (800a3d4 <FMC_SDRAM_Init+0xb4>)
 800a39a:	4013      	ands	r3, r2
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	6851      	ldr	r1, [r2, #4]
 800a3a0:	683a      	ldr	r2, [r7, #0]
 800a3a2:	6892      	ldr	r2, [r2, #8]
 800a3a4:	4311      	orrs	r1, r2
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	68d2      	ldr	r2, [r2, #12]
 800a3aa:	4311      	orrs	r1, r2
 800a3ac:	683a      	ldr	r2, [r7, #0]
 800a3ae:	6912      	ldr	r2, [r2, #16]
 800a3b0:	4311      	orrs	r1, r2
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	6952      	ldr	r2, [r2, #20]
 800a3b6:	4311      	orrs	r1, r2
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	6992      	ldr	r2, [r2, #24]
 800a3bc:	430a      	orrs	r2, r1
 800a3be:	431a      	orrs	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	370c      	adds	r7, #12
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	ffff8000 	.word	0xffff8000

0800a3d8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d128      	bne.n	800a43c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	1e59      	subs	r1, r3, #1
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	011b      	lsls	r3, r3, #4
 800a400:	4319      	orrs	r1, r3
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	3b01      	subs	r3, #1
 800a408:	021b      	lsls	r3, r3, #8
 800a40a:	4319      	orrs	r1, r3
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	3b01      	subs	r3, #1
 800a412:	031b      	lsls	r3, r3, #12
 800a414:	4319      	orrs	r1, r3
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	3b01      	subs	r3, #1
 800a41c:	041b      	lsls	r3, r3, #16
 800a41e:	4319      	orrs	r1, r3
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	695b      	ldr	r3, [r3, #20]
 800a424:	3b01      	subs	r3, #1
 800a426:	051b      	lsls	r3, r3, #20
 800a428:	4319      	orrs	r1, r3
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	3b01      	subs	r3, #1
 800a430:	061b      	lsls	r3, r3, #24
 800a432:	430b      	orrs	r3, r1
 800a434:	431a      	orrs	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	609a      	str	r2, [r3, #8]
 800a43a:	e02d      	b.n	800a498 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	689a      	ldr	r2, [r3, #8]
 800a440:	4b19      	ldr	r3, [pc, #100]	@ (800a4a8 <FMC_SDRAM_Timing_Init+0xd0>)
 800a442:	4013      	ands	r3, r2
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	68d2      	ldr	r2, [r2, #12]
 800a448:	3a01      	subs	r2, #1
 800a44a:	0311      	lsls	r1, r2, #12
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	6952      	ldr	r2, [r2, #20]
 800a450:	3a01      	subs	r2, #1
 800a452:	0512      	lsls	r2, r2, #20
 800a454:	430a      	orrs	r2, r1
 800a456:	431a      	orrs	r2, r3
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	1e59      	subs	r1, r3, #1
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	3b01      	subs	r3, #1
 800a470:	011b      	lsls	r3, r3, #4
 800a472:	4319      	orrs	r1, r3
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	3b01      	subs	r3, #1
 800a47a:	021b      	lsls	r3, r3, #8
 800a47c:	4319      	orrs	r1, r3
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	3b01      	subs	r3, #1
 800a484:	041b      	lsls	r3, r3, #16
 800a486:	4319      	orrs	r1, r3
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	699b      	ldr	r3, [r3, #24]
 800a48c:	3b01      	subs	r3, #1
 800a48e:	061b      	lsls	r3, r3, #24
 800a490:	430b      	orrs	r3, r1
 800a492:	431a      	orrs	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	ff0f0fff 	.word	0xff0f0fff

0800a4ac <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	60f8      	str	r0, [r7, #12]
 800a4b4:	60b9      	str	r1, [r7, #8]
 800a4b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	691a      	ldr	r2, [r3, #16]
 800a4bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a4f0 <FMC_SDRAM_SendCommand+0x44>)
 800a4be:	4013      	ands	r3, r2
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	6811      	ldr	r1, [r2, #0]
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	6852      	ldr	r2, [r2, #4]
 800a4c8:	4311      	orrs	r1, r2
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	6892      	ldr	r2, [r2, #8]
 800a4ce:	3a01      	subs	r2, #1
 800a4d0:	0152      	lsls	r2, r2, #5
 800a4d2:	4311      	orrs	r1, r2
 800a4d4:	68ba      	ldr	r2, [r7, #8]
 800a4d6:	68d2      	ldr	r2, [r2, #12]
 800a4d8:	0252      	lsls	r2, r2, #9
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	ffc00000 	.word	0xffc00000

0800a4f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	695a      	ldr	r2, [r3, #20]
 800a502:	4b07      	ldr	r3, [pc, #28]	@ (800a520 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a504:	4013      	ands	r3, r2
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	0052      	lsls	r2, r2, #1
 800a50a:	431a      	orrs	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	ffffc001 	.word	0xffffc001

0800a524 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a524:	b084      	sub	sp, #16
 800a526:	b480      	push	{r7}
 800a528:	b085      	sub	sp, #20
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
 800a52e:	f107 001c 	add.w	r0, r7, #28
 800a532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a536:	2300      	movs	r3, #0
 800a538:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a53a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a53c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a53e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800a542:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800a546:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800a54a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4313      	orrs	r3, r2
 800a550:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	4b07      	ldr	r3, [pc, #28]	@ (800a574 <SDMMC_Init+0x50>)
 800a558:	4013      	ands	r3, r2
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	431a      	orrs	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	b004      	add	sp, #16
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	ffc02c00 	.word	0xffc02c00

0800a578 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a586:	4618      	mov	r0, r3
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a592:	b480      	push	{r7}
 800a594:	b083      	sub	sp, #12
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f043 0203 	orr.w	r2, r3, #3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b083      	sub	sp, #12
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0303 	and.w	r3, r3, #3
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	370c      	adds	r7, #12
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
	...

0800a5f4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a612:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a618:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a61e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	4313      	orrs	r3, r2
 800a624:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68da      	ldr	r2, [r3, #12]
 800a62a:	4b06      	ldr	r3, [pc, #24]	@ (800a644 <SDMMC_SendCommand+0x50>)
 800a62c:	4013      	ands	r3, r2
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	431a      	orrs	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a636:	2300      	movs	r3, #0
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	fffee0c0 	.word	0xfffee0c0

0800a648 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	b2db      	uxtb	r3, r3
}
 800a656:	4618      	mov	r0, r3
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a662:	b480      	push	{r7}
 800a664:	b085      	sub	sp, #20
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	3314      	adds	r3, #20
 800a670:	461a      	mov	r2, r3
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	4413      	add	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a692:	2300      	movs	r3, #0
 800a694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	685a      	ldr	r2, [r3, #4]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a6ae:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a6b4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a6ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	431a      	orrs	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a6d2:	2300      	movs	r3, #0

}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3714      	adds	r7, #20
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b088      	sub	sp, #32
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a6ee:	2310      	movs	r3, #16
 800a6f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a6f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a700:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a702:	f107 0308 	add.w	r3, r7, #8
 800a706:	4619      	mov	r1, r3
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f7ff ff73 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a70e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a712:	2110      	movs	r1, #16
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fa81 	bl	800ac1c <SDMMC_GetCmdResp1>
 800a71a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a71c:	69fb      	ldr	r3, [r7, #28]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3720      	adds	r7, #32
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b088      	sub	sp, #32
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a734:	2311      	movs	r3, #17
 800a736:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a738:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a73c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a73e:	2300      	movs	r3, #0
 800a740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a746:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a748:	f107 0308 	add.w	r3, r7, #8
 800a74c:	4619      	mov	r1, r3
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f7ff ff50 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a754:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a758:	2111      	movs	r1, #17
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fa5e 	bl	800ac1c <SDMMC_GetCmdResp1>
 800a760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a762:	69fb      	ldr	r3, [r7, #28]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3720      	adds	r7, #32
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b088      	sub	sp, #32
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a77a:	2312      	movs	r3, #18
 800a77c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a77e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a784:	2300      	movs	r3, #0
 800a786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a78c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a78e:	f107 0308 	add.w	r3, r7, #8
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7ff ff2d 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a79a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a79e:	2112      	movs	r1, #18
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fa3b 	bl	800ac1c <SDMMC_GetCmdResp1>
 800a7a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7a8:	69fb      	ldr	r3, [r7, #28]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3720      	adds	r7, #32
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b088      	sub	sp, #32
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
 800a7ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a7c0:	2318      	movs	r3, #24
 800a7c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a7c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a7d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7d4:	f107 0308 	add.w	r3, r7, #8
 800a7d8:	4619      	mov	r1, r3
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7ff ff0a 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a7e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7e4:	2118      	movs	r1, #24
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fa18 	bl	800ac1c <SDMMC_GetCmdResp1>
 800a7ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7ee:	69fb      	ldr	r3, [r7, #28]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3720      	adds	r7, #32
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b088      	sub	sp, #32
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a806:	2319      	movs	r3, #25
 800a808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a80a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a80e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a810:	2300      	movs	r3, #0
 800a812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a814:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a818:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a81a:	f107 0308 	add.w	r3, r7, #8
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff fee7 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a82a:	2119      	movs	r1, #25
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f9f5 	bl	800ac1c <SDMMC_GetCmdResp1>
 800a832:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a834:	69fb      	ldr	r3, [r7, #28]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3720      	adds	r7, #32
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a848:	2300      	movs	r3, #0
 800a84a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a84c:	230c      	movs	r3, #12
 800a84e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a850:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a854:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a856:	2300      	movs	r3, #0
 800a858:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a85a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a85e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a878:	f107 0308 	add.w	r3, r7, #8
 800a87c:	4619      	mov	r1, r3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7ff feb8 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a884:	4a0b      	ldr	r2, [pc, #44]	@ (800a8b4 <SDMMC_CmdStopTransfer+0x74>)
 800a886:	210c      	movs	r1, #12
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 f9c7 	bl	800ac1c <SDMMC_GetCmdResp1>
 800a88e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8a2:	d101      	bne.n	800a8a8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a8a8:	69fb      	ldr	r3, [r7, #28]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3720      	adds	r7, #32
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	05f5e100 	.word	0x05f5e100

0800a8b8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b088      	sub	sp, #32
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a8c6:	2307      	movs	r3, #7
 800a8c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8da:	f107 0308 	add.w	r3, r7, #8
 800a8de:	4619      	mov	r1, r3
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f7ff fe87 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a8e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8ea:	2107      	movs	r1, #7
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f995 	bl	800ac1c <SDMMC_GetCmdResp1>
 800a8f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8f4:	69fb      	ldr	r3, [r7, #28]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3720      	adds	r7, #32
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b088      	sub	sp, #32
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a90a:	2300      	movs	r3, #0
 800a90c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a90e:	2300      	movs	r3, #0
 800a910:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a912:	2300      	movs	r3, #0
 800a914:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a916:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a91a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a91c:	f107 0308 	add.w	r3, r7, #8
 800a920:	4619      	mov	r1, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7ff fe66 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fbb9 	bl	800b0a0 <SDMMC_GetCmdError>
 800a92e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a930:	69fb      	ldr	r3, [r7, #28]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3720      	adds	r7, #32
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b088      	sub	sp, #32
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a942:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a946:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a948:	2308      	movs	r3, #8
 800a94a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a94c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a950:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a952:	2300      	movs	r3, #0
 800a954:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a95a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a95c:	f107 0308 	add.w	r3, r7, #8
 800a960:	4619      	mov	r1, r3
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7ff fe46 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fb4b 	bl	800b004 <SDMMC_GetCmdResp7>
 800a96e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a970:	69fb      	ldr	r3, [r7, #28]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3720      	adds	r7, #32
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b088      	sub	sp, #32
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a988:	2337      	movs	r3, #55	@ 0x37
 800a98a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a98c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a990:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a992:	2300      	movs	r3, #0
 800a994:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a996:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a99a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a99c:	f107 0308 	add.w	r3, r7, #8
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7ff fe26 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a9a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9ac:	2137      	movs	r1, #55	@ 0x37
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f934 	bl	800ac1c <SDMMC_GetCmdResp1>
 800a9b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9b6:	69fb      	ldr	r3, [r7, #28]
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3720      	adds	r7, #32
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}

0800a9c0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b088      	sub	sp, #32
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a9ce:	2329      	movs	r3, #41	@ 0x29
 800a9d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a9d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a9e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9e2:	f107 0308 	add.w	r3, r7, #8
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7ff fe03 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fa50 	bl	800ae94 <SDMMC_GetCmdResp3>
 800a9f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9f6:	69fb      	ldr	r3, [r7, #28]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3720      	adds	r7, #32
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b088      	sub	sp, #32
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800aa0e:	2306      	movs	r3, #6
 800aa10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa22:	f107 0308 	add.w	r3, r7, #8
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7ff fde3 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800aa2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa32:	2106      	movs	r1, #6
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 f8f1 	bl	800ac1c <SDMMC_GetCmdResp1>
 800aa3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa3c:	69fb      	ldr	r3, [r7, #28]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3720      	adds	r7, #32
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b088      	sub	sp, #32
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800aa52:	2333      	movs	r3, #51	@ 0x33
 800aa54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa66:	f107 0308 	add.w	r3, r7, #8
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f7ff fdc1 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800aa72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa76:	2133      	movs	r1, #51	@ 0x33
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f8cf 	bl	800ac1c <SDMMC_GetCmdResp1>
 800aa7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa80:	69fb      	ldr	r3, [r7, #28]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3720      	adds	r7, #32
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b088      	sub	sp, #32
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800aa92:	2300      	movs	r3, #0
 800aa94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aa96:	2302      	movs	r3, #2
 800aa98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aa9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800aa9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aaa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aaa8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aaaa:	f107 0308 	add.w	r3, r7, #8
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7ff fd9f 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 f9a2 	bl	800ae00 <SDMMC_GetCmdResp2>
 800aabc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aabe:	69fb      	ldr	r3, [r7, #28]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3720      	adds	r7, #32
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b088      	sub	sp, #32
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aad6:	2309      	movs	r3, #9
 800aad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aada:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800aade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aae0:	2300      	movs	r3, #0
 800aae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aae4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aae8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aaea:	f107 0308 	add.w	r3, r7, #8
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f7ff fd7f 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 f982 	bl	800ae00 <SDMMC_GetCmdResp2>
 800aafc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aafe:	69fb      	ldr	r3, [r7, #28]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3720      	adds	r7, #32
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ab12:	2300      	movs	r3, #0
 800ab14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ab16:	2303      	movs	r3, #3
 800ab18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab20:	2300      	movs	r3, #0
 800ab22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab2a:	f107 0308 	add.w	r3, r7, #8
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f7ff fd5f 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	2103      	movs	r1, #3
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f9ea 	bl	800af14 <SDMMC_GetCmdResp6>
 800ab40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab42:	69fb      	ldr	r3, [r7, #28]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3720      	adds	r7, #32
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b088      	sub	sp, #32
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ab5a:	230d      	movs	r3, #13
 800ab5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab64:	2300      	movs	r3, #0
 800ab66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab6e:	f107 0308 	add.w	r3, r7, #8
 800ab72:	4619      	mov	r1, r3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f7ff fd3d 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ab7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab7e:	210d      	movs	r1, #13
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 f84b 	bl	800ac1c <SDMMC_GetCmdResp1>
 800ab86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab88:	69fb      	ldr	r3, [r7, #28]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3720      	adds	r7, #32
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b088      	sub	sp, #32
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ab9e:	230d      	movs	r3, #13
 800aba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aba2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aba8:	2300      	movs	r3, #0
 800abaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abb2:	f107 0308 	add.w	r3, r7, #8
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff fd1b 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800abbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abc2:	210d      	movs	r1, #13
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f829 	bl	800ac1c <SDMMC_GetCmdResp1>
 800abca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abcc:	69fb      	ldr	r3, [r7, #28]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3720      	adds	r7, #32
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b088      	sub	sp, #32
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800abe4:	2306      	movs	r3, #6
 800abe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abe8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800abec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abee:	2300      	movs	r3, #0
 800abf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800abf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abf8:	f107 0308 	add.w	r3, r7, #8
 800abfc:	4619      	mov	r1, r3
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f7ff fcf8 	bl	800a5f4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800ac04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac08:	2106      	movs	r1, #6
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f806 	bl	800ac1c <SDMMC_GetCmdResp1>
 800ac10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac12:	69fb      	ldr	r3, [r7, #28]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3720      	adds	r7, #32
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b088      	sub	sp, #32
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	460b      	mov	r3, r1
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ac2a:	4b70      	ldr	r3, [pc, #448]	@ (800adec <SDMMC_GetCmdResp1+0x1d0>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a70      	ldr	r2, [pc, #448]	@ (800adf0 <SDMMC_GetCmdResp1+0x1d4>)
 800ac30:	fba2 2303 	umull	r2, r3, r2, r3
 800ac34:	0a5a      	lsrs	r2, r3, #9
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	fb02 f303 	mul.w	r3, r2, r3
 800ac3c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	1e5a      	subs	r2, r3, #1
 800ac42:	61fa      	str	r2, [r7, #28]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d102      	bne.n	800ac4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac4c:	e0c9      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac52:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ac54:	69ba      	ldr	r2, [r7, #24]
 800ac56:	4b67      	ldr	r3, [pc, #412]	@ (800adf4 <SDMMC_GetCmdResp1+0x1d8>)
 800ac58:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d0ef      	beq.n	800ac3e <SDMMC_GetCmdResp1+0x22>
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d1ea      	bne.n	800ac3e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac6c:	f003 0304 	and.w	r3, r3, #4
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d004      	beq.n	800ac7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2204      	movs	r2, #4
 800ac78:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac7a:	2304      	movs	r3, #4
 800ac7c:	e0b1      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d004      	beq.n	800ac94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac90:	2301      	movs	r3, #1
 800ac92:	e0a6      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	4a58      	ldr	r2, [pc, #352]	@ (800adf8 <SDMMC_GetCmdResp1+0x1dc>)
 800ac98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f7ff fcd4 	bl	800a648 <SDMMC_GetCommandResponse>
 800aca0:	4603      	mov	r3, r0
 800aca2:	461a      	mov	r2, r3
 800aca4:	7afb      	ldrb	r3, [r7, #11]
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d001      	beq.n	800acae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800acaa:	2301      	movs	r3, #1
 800acac:	e099      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800acae:	2100      	movs	r1, #0
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f7ff fcd6 	bl	800a662 <SDMMC_GetResponse>
 800acb6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	4b50      	ldr	r3, [pc, #320]	@ (800adfc <SDMMC_GetCmdResp1+0x1e0>)
 800acbc:	4013      	ands	r3, r2
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800acc2:	2300      	movs	r3, #0
 800acc4:	e08d      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	da02      	bge.n	800acd2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800accc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800acd0:	e087      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800acdc:	2340      	movs	r3, #64	@ 0x40
 800acde:	e080      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800acea:	2380      	movs	r3, #128	@ 0x80
 800acec:	e079      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d002      	beq.n	800acfe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800acf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800acfc:	e071      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d002      	beq.n	800ad0e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ad08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad0c:	e069      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d002      	beq.n	800ad1e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ad18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad1c:	e061      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ad28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ad2c:	e059      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d002      	beq.n	800ad3e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ad38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad3c:	e051      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ad48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ad4c:	e049      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d002      	beq.n	800ad5e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ad58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ad5c:	e041      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d002      	beq.n	800ad6e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ad68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad6c:	e039      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d002      	beq.n	800ad7e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ad78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ad7c:	e031      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d002      	beq.n	800ad8e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ad88:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ad8c:	e029      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ad98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ad9c:	e021      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ada8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800adac:	e019      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800adb8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800adbc:	e011      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d002      	beq.n	800adce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800adc8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800adcc:	e009      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f003 0308 	and.w	r3, r3, #8
 800add4:	2b00      	cmp	r3, #0
 800add6:	d002      	beq.n	800adde <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800add8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800addc:	e001      	b.n	800ade2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800adde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3720      	adds	r7, #32
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20000000 	.word	0x20000000
 800adf0:	10624dd3 	.word	0x10624dd3
 800adf4:	00200045 	.word	0x00200045
 800adf8:	002000c5 	.word	0x002000c5
 800adfc:	fdffe008 	.word	0xfdffe008

0800ae00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ae08:	4b1f      	ldr	r3, [pc, #124]	@ (800ae88 <SDMMC_GetCmdResp2+0x88>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a1f      	ldr	r2, [pc, #124]	@ (800ae8c <SDMMC_GetCmdResp2+0x8c>)
 800ae0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae12:	0a5b      	lsrs	r3, r3, #9
 800ae14:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae18:	fb02 f303 	mul.w	r3, r2, r3
 800ae1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	1e5a      	subs	r2, r3, #1
 800ae22:	60fa      	str	r2, [r7, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d102      	bne.n	800ae2e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ae2c:	e026      	b.n	800ae7c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae32:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d0ef      	beq.n	800ae1e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1ea      	bne.n	800ae1e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae4c:	f003 0304 	and.w	r3, r3, #4
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d004      	beq.n	800ae5e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2204      	movs	r2, #4
 800ae58:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae5a:	2304      	movs	r3, #4
 800ae5c:	e00e      	b.n	800ae7c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d004      	beq.n	800ae74 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae70:	2301      	movs	r3, #1
 800ae72:	e003      	b.n	800ae7c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a06      	ldr	r2, [pc, #24]	@ (800ae90 <SDMMC_GetCmdResp2+0x90>)
 800ae78:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3714      	adds	r7, #20
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	20000000 	.word	0x20000000
 800ae8c:	10624dd3 	.word	0x10624dd3
 800ae90:	002000c5 	.word	0x002000c5

0800ae94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ae9c:	4b1a      	ldr	r3, [pc, #104]	@ (800af08 <SDMMC_GetCmdResp3+0x74>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a1a      	ldr	r2, [pc, #104]	@ (800af0c <SDMMC_GetCmdResp3+0x78>)
 800aea2:	fba2 2303 	umull	r2, r3, r2, r3
 800aea6:	0a5b      	lsrs	r3, r3, #9
 800aea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aeac:	fb02 f303 	mul.w	r3, r2, r3
 800aeb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	1e5a      	subs	r2, r3, #1
 800aeb6:	60fa      	str	r2, [r7, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d102      	bne.n	800aec2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aebc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aec0:	e01b      	b.n	800aefa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aec6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d0ef      	beq.n	800aeb2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1ea      	bne.n	800aeb2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aee0:	f003 0304 	and.w	r3, r3, #4
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d004      	beq.n	800aef2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2204      	movs	r2, #4
 800aeec:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aeee:	2304      	movs	r3, #4
 800aef0:	e003      	b.n	800aefa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a06      	ldr	r2, [pc, #24]	@ (800af10 <SDMMC_GetCmdResp3+0x7c>)
 800aef6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop
 800af08:	20000000 	.word	0x20000000
 800af0c:	10624dd3 	.word	0x10624dd3
 800af10:	002000c5 	.word	0x002000c5

0800af14 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b088      	sub	sp, #32
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	460b      	mov	r3, r1
 800af1e:	607a      	str	r2, [r7, #4]
 800af20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800af22:	4b35      	ldr	r3, [pc, #212]	@ (800aff8 <SDMMC_GetCmdResp6+0xe4>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a35      	ldr	r2, [pc, #212]	@ (800affc <SDMMC_GetCmdResp6+0xe8>)
 800af28:	fba2 2303 	umull	r2, r3, r2, r3
 800af2c:	0a5b      	lsrs	r3, r3, #9
 800af2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af32:	fb02 f303 	mul.w	r3, r2, r3
 800af36:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	1e5a      	subs	r2, r3, #1
 800af3c:	61fa      	str	r2, [r7, #28]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d102      	bne.n	800af48 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af42:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800af46:	e052      	b.n	800afee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af4c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800af54:	2b00      	cmp	r3, #0
 800af56:	d0ef      	beq.n	800af38 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1ea      	bne.n	800af38 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af66:	f003 0304 	and.w	r3, r3, #4
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d004      	beq.n	800af78 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2204      	movs	r2, #4
 800af72:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af74:	2304      	movs	r3, #4
 800af76:	e03a      	b.n	800afee <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	2b00      	cmp	r3, #0
 800af82:	d004      	beq.n	800af8e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2201      	movs	r2, #1
 800af88:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e02f      	b.n	800afee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f7ff fb5a 	bl	800a648 <SDMMC_GetCommandResponse>
 800af94:	4603      	mov	r3, r0
 800af96:	461a      	mov	r2, r3
 800af98:	7afb      	ldrb	r3, [r7, #11]
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d001      	beq.n	800afa2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af9e:	2301      	movs	r3, #1
 800afa0:	e025      	b.n	800afee <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	4a16      	ldr	r2, [pc, #88]	@ (800b000 <SDMMC_GetCmdResp6+0xec>)
 800afa6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800afa8:	2100      	movs	r1, #0
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f7ff fb59 	bl	800a662 <SDMMC_GetResponse>
 800afb0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d106      	bne.n	800afca <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	0c1b      	lsrs	r3, r3, #16
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800afc6:	2300      	movs	r3, #0
 800afc8:	e011      	b.n	800afee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800afd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800afd8:	e009      	b.n	800afee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800afe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800afe8:	e001      	b.n	800afee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800afea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3720      	adds	r7, #32
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20000000 	.word	0x20000000
 800affc:	10624dd3 	.word	0x10624dd3
 800b000:	002000c5 	.word	0x002000c5

0800b004 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b004:	b480      	push	{r7}
 800b006:	b085      	sub	sp, #20
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b00c:	4b22      	ldr	r3, [pc, #136]	@ (800b098 <SDMMC_GetCmdResp7+0x94>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a22      	ldr	r2, [pc, #136]	@ (800b09c <SDMMC_GetCmdResp7+0x98>)
 800b012:	fba2 2303 	umull	r2, r3, r2, r3
 800b016:	0a5b      	lsrs	r3, r3, #9
 800b018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b01c:	fb02 f303 	mul.w	r3, r2, r3
 800b020:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	1e5a      	subs	r2, r3, #1
 800b026:	60fa      	str	r2, [r7, #12]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d102      	bne.n	800b032 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b02c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b030:	e02c      	b.n	800b08c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b036:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0ef      	beq.n	800b022 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1ea      	bne.n	800b022 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b050:	f003 0304 	and.w	r3, r3, #4
 800b054:	2b00      	cmp	r3, #0
 800b056:	d004      	beq.n	800b062 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2204      	movs	r2, #4
 800b05c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b05e:	2304      	movs	r3, #4
 800b060:	e014      	b.n	800b08c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b066:	f003 0301 	and.w	r3, r3, #1
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d004      	beq.n	800b078 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2201      	movs	r2, #1
 800b072:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b074:	2301      	movs	r3, #1
 800b076:	e009      	b.n	800b08c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b07c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2240      	movs	r2, #64	@ 0x40
 800b088:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b08a:	2300      	movs	r3, #0

}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	20000000 	.word	0x20000000
 800b09c:	10624dd3 	.word	0x10624dd3

0800b0a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b0a8:	4b11      	ldr	r3, [pc, #68]	@ (800b0f0 <SDMMC_GetCmdError+0x50>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a11      	ldr	r2, [pc, #68]	@ (800b0f4 <SDMMC_GetCmdError+0x54>)
 800b0ae:	fba2 2303 	umull	r2, r3, r2, r3
 800b0b2:	0a5b      	lsrs	r3, r3, #9
 800b0b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0b8:	fb02 f303 	mul.w	r3, r2, r3
 800b0bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	1e5a      	subs	r2, r3, #1
 800b0c2:	60fa      	str	r2, [r7, #12]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d102      	bne.n	800b0ce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b0cc:	e009      	b.n	800b0e2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0f1      	beq.n	800b0be <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a06      	ldr	r2, [pc, #24]	@ (800b0f8 <SDMMC_GetCmdError+0x58>)
 800b0de:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	20000000 	.word	0x20000000
 800b0f4:	10624dd3 	.word	0x10624dd3
 800b0f8:	002000c5 	.word	0x002000c5

0800b0fc <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b087      	sub	sp, #28
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	3b04      	subs	r3, #4
 800b10c:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 800b10e:	2300      	movs	r3, #0
 800b110:	82fb      	strh	r3, [r7, #22]
 800b112:	e02a      	b.n	800b16a <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 800b114:	8afb      	ldrh	r3, [r7, #22]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	4413      	add	r3, r2
 800b11a:	781a      	ldrb	r2, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	429a      	cmp	r2, r3
 800b122:	d11f      	bne.n	800b164 <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 800b124:	8afb      	ldrh	r3, [r7, #22]
 800b126:	3301      	adds	r3, #1
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	4413      	add	r3, r2
 800b12c:	781a      	ldrb	r2, [r3, #0]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	3301      	adds	r3, #1
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	429a      	cmp	r2, r3
 800b136:	d115      	bne.n	800b164 <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 800b138:	8afb      	ldrh	r3, [r7, #22]
 800b13a:	3302      	adds	r3, #2
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	4413      	add	r3, r2
 800b140:	781a      	ldrb	r2, [r3, #0]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	3302      	adds	r3, #2
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	429a      	cmp	r2, r3
 800b14a:	d10b      	bne.n	800b164 <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 800b14c:	8afb      	ldrh	r3, [r7, #22]
 800b14e:	3303      	adds	r3, #3
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	4413      	add	r3, r2
 800b154:	781a      	ldrb	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	3303      	adds	r3, #3
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d101      	bne.n	800b164 <__AVI_SearchID+0x68>
            return i;  
 800b160:	8afb      	ldrh	r3, [r7, #22]
 800b162:	e007      	b.n	800b174 <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 800b164:	8afb      	ldrh	r3, [r7, #22]
 800b166:	3301      	adds	r3, #1
 800b168:	82fb      	strh	r3, [r7, #22]
 800b16a:	8afb      	ldrh	r3, [r7, #22]
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d8d0      	bhi.n	800b114 <__AVI_SearchID+0x18>
  }
  return 0;    
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	371c      	adds	r7, #28
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	3302      	adds	r3, #2
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	021b      	lsls	r3, r3, #8
 800b192:	b21a      	sxth	r2, r3
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	3303      	adds	r3, #3
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	b21b      	sxth	r3, r3
 800b19c:	4313      	orrs	r3, r2
 800b19e:	b21b      	sxth	r3, r3
 800b1a0:	b29a      	uxth	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	3304      	adds	r3, #4
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	3305      	adds	r3, #5
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	021b      	lsls	r3, r3, #8
 800b1b6:	431a      	orrs	r2, r3
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	3306      	adds	r3, #6
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	041b      	lsls	r3, r3, #16
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	3307      	adds	r3, #7
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	061b      	lsls	r3, r3, #24
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a1b      	ldr	r3, [r3, #32]
 800b1d6:	f003 0301 	and.w	r3, r3, #1
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d004      	beq.n	800b1e8 <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6a1b      	ldr	r3, [r3, #32]
 800b1e2:	1c5a      	adds	r2, r3, #1
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	8bdb      	ldrh	r3, [r3, #30]
 800b1ec:	f246 4263 	movw	r2, #25699	@ 0x6463
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d005      	beq.n	800b200 <__AVI_GetStreamInfo+0x80>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	8bdb      	ldrh	r3, [r3, #30]
 800b1f8:	f247 7262 	movw	r2, #30562	@ 0x7762
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d101      	bne.n	800b204 <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	e000      	b.n	800b206 <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 800b204:	230b      	movs	r3, #11
}
 800b206:	4618      	mov	r0, r3
 800b208:	370c      	adds	r7, #12
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
	...

0800b214 <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b08e      	sub	sp, #56	@ 0x38
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 800b220:	2300      	movs	r3, #0
 800b222:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 800b22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a87      	ldr	r2, [pc, #540]	@ (800b450 <__AVI_Init+0x23c>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d001      	beq.n	800b23c <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 800b238:	2301      	movs	r3, #1
 800b23a:	e170      	b.n	800b51e <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 800b23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	4a84      	ldr	r2, [pc, #528]	@ (800b454 <__AVI_Init+0x240>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d001      	beq.n	800b24a <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 800b246:	2302      	movs	r3, #2
 800b248:	e169      	b.n	800b51e <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	330c      	adds	r3, #12
 800b24e:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800b254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a7f      	ldr	r2, [pc, #508]	@ (800b458 <__AVI_Init+0x244>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d001      	beq.n	800b262 <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 800b25e:	2303      	movs	r3, #3
 800b260:	e15d      	b.n	800b51e <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 800b262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	4a7d      	ldr	r2, [pc, #500]	@ (800b45c <__AVI_Init+0x248>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d001      	beq.n	800b270 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 800b26c:	2304      	movs	r3, #4
 800b26e:	e156      	b.n	800b51e <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	330c      	adds	r3, #12
 800b274:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 800b27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a78      	ldr	r2, [pc, #480]	@ (800b460 <__AVI_Init+0x24c>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d001      	beq.n	800b288 <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 800b284:	2305      	movs	r3, #5
 800b286:	e14a      	b.n	800b51e <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 800b288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28a:	689a      	ldr	r2, [r3, #8]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 800b290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b292:	699a      	ldr	r2, [r3, #24]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 800b298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	3308      	adds	r3, #8
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800b2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a6a      	ldr	r2, [pc, #424]	@ (800b458 <__AVI_Init+0x244>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d001      	beq.n	800b2b6 <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e133      	b.n	800b51e <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 800b2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	4a6a      	ldr	r2, [pc, #424]	@ (800b464 <__AVI_Init+0x250>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d001      	beq.n	800b2c4 <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 800b2c0:	2306      	movs	r3, #6
 800b2c2:	e12c      	b.n	800b51e <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	330c      	adds	r3, #12
 800b2c8:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 800b2ca:	6a3b      	ldr	r3, [r7, #32]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a66      	ldr	r2, [pc, #408]	@ (800b468 <__AVI_Init+0x254>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d001      	beq.n	800b2d8 <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 800b2d4:	2307      	movs	r3, #7
 800b2d6:	e122      	b.n	800b51e <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 800b2d8:	6a3b      	ldr	r3, [r7, #32]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	4a63      	ldr	r2, [pc, #396]	@ (800b46c <__AVI_Init+0x258>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d16a      	bne.n	800b3b8 <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 800b2e2:	6a3b      	ldr	r3, [r7, #32]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	4a62      	ldr	r2, [pc, #392]	@ (800b470 <__AVI_Init+0x25c>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d001      	beq.n	800b2f0 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 800b2ec:	230a      	movs	r3, #10
 800b2ee:	e116      	b.n	800b51e <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 800b2f0:	4a60      	ldr	r2, [pc, #384]	@ (800b474 <__AVI_Init+0x260>)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 800b2f6:	4a60      	ldr	r2, [pc, #384]	@ (800b478 <__AVI_Init+0x264>)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	3314      	adds	r3, #20
 800b302:	68ba      	ldr	r2, [r7, #8]
 800b304:	4413      	add	r3, r2
 800b306:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a5b      	ldr	r2, [pc, #364]	@ (800b47c <__AVI_Init+0x268>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d001      	beq.n	800b316 <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 800b312:	2308      	movs	r3, #8
 800b314:	e103      	b.n	800b51e <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	68da      	ldr	r2, [r3, #12]
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	691a      	ldr	r2, [r3, #16]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 800b326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	3308      	adds	r3, #8
 800b32c:	68ba      	ldr	r2, [r7, #8]
 800b32e:	4413      	add	r3, r2
 800b330:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800b336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a47      	ldr	r2, [pc, #284]	@ (800b458 <__AVI_Init+0x244>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d009      	beq.n	800b354 <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2200      	movs	r2, #0
 800b350:	839a      	strh	r2, [r3, #28]
 800b352:	e0b7      	b.n	800b4c4 <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 800b354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	4a42      	ldr	r2, [pc, #264]	@ (800b464 <__AVI_Init+0x250>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d001      	beq.n	800b362 <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 800b35e:	2306      	movs	r3, #6
 800b360:	e0dd      	b.n	800b51e <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	330c      	adds	r3, #12
 800b366:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a3e      	ldr	r2, [pc, #248]	@ (800b468 <__AVI_Init+0x254>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d001      	beq.n	800b376 <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 800b372:	2307      	movs	r3, #7
 800b374:	e0d3      	b.n	800b51e <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800b376:	6a3b      	ldr	r3, [r7, #32]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	4a41      	ldr	r2, [pc, #260]	@ (800b480 <__AVI_Init+0x26c>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d001      	beq.n	800b384 <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 800b380:	230a      	movs	r3, #10
 800b382:	e0cc      	b.n	800b51e <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800b384:	6a3b      	ldr	r3, [r7, #32]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	3314      	adds	r3, #20
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	4413      	add	r3, r2
 800b38e:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a39      	ldr	r2, [pc, #228]	@ (800b47c <__AVI_Init+0x268>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d001      	beq.n	800b39e <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 800b39a:	2308      	movs	r3, #8
 800b39c:	e0bf      	b.n	800b51e <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	68da      	ldr	r2, [r3, #12]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	895a      	ldrh	r2, [r3, #10]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	891a      	ldrh	r2, [r3, #8]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	839a      	strh	r2, [r3, #28]
 800b3b6:	e085      	b.n	800b4c4 <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800b3b8:	6a3b      	ldr	r3, [r7, #32]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	4a30      	ldr	r2, [pc, #192]	@ (800b480 <__AVI_Init+0x26c>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	f040 8080 	bne.w	800b4c4 <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 800b3c4:	4a2f      	ldr	r2, [pc, #188]	@ (800b484 <__AVI_Init+0x270>)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 800b3ca:	4a2f      	ldr	r2, [pc, #188]	@ (800b488 <__AVI_Init+0x274>)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800b3d0:	6a3b      	ldr	r3, [r7, #32]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	3314      	adds	r3, #20
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	4413      	add	r3, r2
 800b3da:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a26      	ldr	r2, [pc, #152]	@ (800b47c <__AVI_Init+0x268>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d001      	beq.n	800b3ea <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 800b3e6:	2308      	movs	r3, #8
 800b3e8:	e099      	b.n	800b51e <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	68da      	ldr	r2, [r3, #12]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	895a      	ldrh	r2, [r3, #10]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	891a      	ldrh	r2, [r3, #8]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 800b402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	3308      	adds	r3, #8
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	4413      	add	r3, r2
 800b40c:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800b412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a10      	ldr	r2, [pc, #64]	@ (800b458 <__AVI_Init+0x244>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d001      	beq.n	800b420 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 800b41c:	2303      	movs	r3, #3
 800b41e:	e07e      	b.n	800b51e <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 800b420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	4a0f      	ldr	r2, [pc, #60]	@ (800b464 <__AVI_Init+0x250>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d001      	beq.n	800b42e <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 800b42a:	2306      	movs	r3, #6
 800b42c:	e077      	b.n	800b51e <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	330c      	adds	r3, #12
 800b432:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a0b      	ldr	r2, [pc, #44]	@ (800b468 <__AVI_Init+0x254>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d001      	beq.n	800b442 <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 800b43e:	2307      	movs	r3, #7
 800b440:	e06d      	b.n	800b51e <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 800b442:	6a3b      	ldr	r3, [r7, #32]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	4a09      	ldr	r2, [pc, #36]	@ (800b46c <__AVI_Init+0x258>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d01f      	beq.n	800b48c <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 800b44c:	230a      	movs	r3, #10
 800b44e:	e066      	b.n	800b51e <__AVI_Init+0x30a>
 800b450:	46464952 	.word	0x46464952
 800b454:	20495641 	.word	0x20495641
 800b458:	5453494c 	.word	0x5453494c
 800b45c:	6c726468 	.word	0x6c726468
 800b460:	68697661 	.word	0x68697661
 800b464:	6c727473 	.word	0x6c727473
 800b468:	68727473 	.word	0x68727473
 800b46c:	73646976 	.word	0x73646976
 800b470:	47504a4d 	.word	0x47504a4d
 800b474:	08010a5c 	.word	0x08010a5c
 800b478:	08010a74 	.word	0x08010a74
 800b47c:	66727473 	.word	0x66727473
 800b480:	73647561 	.word	0x73647561
 800b484:	08010a64 	.word	0x08010a64
 800b488:	08010a6c 	.word	0x08010a6c
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	3314      	adds	r3, #20
 800b492:	68ba      	ldr	r2, [r7, #8]
 800b494:	4413      	add	r3, r2
 800b496:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a22      	ldr	r2, [pc, #136]	@ (800b528 <__AVI_Init+0x314>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d001      	beq.n	800b4a6 <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 800b4a2:	2308      	movs	r3, #8
 800b4a4:	e03b      	b.n	800b51e <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	699b      	ldr	r3, [r3, #24]
 800b4aa:	4a20      	ldr	r2, [pc, #128]	@ (800b52c <__AVI_Init+0x318>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d001      	beq.n	800b4b4 <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 800b4b0:	230a      	movs	r3, #10
 800b4b2:	e034      	b.n	800b51e <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	68da      	ldr	r2, [r3, #12]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	691a      	ldr	r2, [r3, #16]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 800b4c4:	4a1a      	ldr	r2, [pc, #104]	@ (800b530 <__AVI_Init+0x31c>)
 800b4c6:	6879      	ldr	r1, [r7, #4]
 800b4c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4ca:	f7ff fe17 	bl	800b0fc <__AVI_SearchID>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 800b4d2:	8afb      	ldrh	r3, [r7, #22]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d101      	bne.n	800b4dc <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 800b4d8:	2309      	movs	r3, #9
 800b4da:	e020      	b.n	800b51e <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d01a      	beq.n	800b51a <__AVI_Init+0x306>
  {
    tbuf+=offset;
 800b4e4:	8afb      	ldrh	r3, [r7, #22]
 800b4e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4e8:	4413      	add	r3, r2
 800b4ea:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	6879      	ldr	r1, [r7, #4]
 800b4f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4f6:	f7ff fe01 	bl	800b0fc <__AVI_SearchID>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 800b4fe:	8afb      	ldrh	r3, [r7, #22]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d101      	bne.n	800b508 <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 800b504:	230b      	movs	r3, #11
 800b506:	e00a      	b.n	800b51e <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 800b508:	8afb      	ldrh	r3, [r7, #22]
 800b50a:	3304      	adds	r3, #4
 800b50c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b50e:	4413      	add	r3, r2
 800b510:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 800b512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b514:	881a      	ldrh	r2, [r3, #0]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 800b51a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3738      	adds	r7, #56	@ 0x38
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	66727473 	.word	0x66727473
 800b52c:	47504a4d 	.word	0x47504a4d
 800b530:	08010a7c 	.word	0x08010a7c

0800b534 <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b086      	sub	sp, #24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
 800b540:	603b      	str	r3, [r7, #0]
  uint32_t readSize= 0;
 800b542:	2300      	movs	r3, #0
 800b544:	617b      	str	r3, [r7, #20]
  
  pavi->pVideoBuffer = pVideoBuffer;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	683a      	ldr	r2, [r7, #0]
 800b550:	639a      	str	r2, [r3, #56]	@ 0x38

  pavi->pAudioBuffer = pAudioBuffer;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	6a3a      	ldr	r2, [r7, #32]
 800b556:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b55c:	641a      	str	r2, [r3, #64]	@ 0x40
  
  f_lseek(file, 0 );
 800b55e:	2100      	movs	r1, #0
 800b560:	68b8      	ldr	r0, [r7, #8]
 800b562:	f004 fde2 	bl	801012a <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b56a:	f107 0314 	add.w	r3, r7, #20
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	68b8      	ldr	r0, [r7, #8]
 800b572:	f004 fbf3 	bl	800fd5c <f_read>
  if(readSize != VideoBufferSize)
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	683a      	ldr	r2, [r7, #0]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d001      	beq.n	800b582 <AVI_ParserInit+0x4e>
  {
    return 1;
 800b57e:	2301      	movs	r3, #1
 800b580:	e013      	b.n	800b5aa <AVI_ParserInit+0x76>
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b586:	683a      	ldr	r2, [r7, #0]
 800b588:	4619      	mov	r1, r3
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f7ff fe42 	bl	800b214 <__AVI_Init>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d001      	beq.n	800b59a <AVI_ParserInit+0x66>
  {
    return 1;    
 800b596:	2301      	movs	r3, #1
 800b598:	e007      	b.n	800b5aa <AVI_ParserInit+0x76>
  }

  pavi->FileSize= f_size(file);
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	68da      	ldr	r2, [r3, #12]
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;  
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3718      	adds	r7, #24
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
	...

0800b5b4 <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file, uint8_t skipFlag)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	4613      	mov	r3, r2
 800b5c0:	71fb      	strb	r3, [r7, #7]
  uint32_t  offset ;
  uint32_t readSize = 0;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	613b      	str	r3, [r7, #16]
  
  if(pavi->CurrentImage== 0 )
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d124      	bne.n	800b618 <AVI_GetFrame+0x64>
  {
    
    f_lseek(file, 0 ); /* Go to the file start */
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	68b8      	ldr	r0, [r7, #8]
 800b5d2:	f004 fdaa 	bl	801012a <f_lseek>
    /* Read data*/
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5de:	f107 0310 	add.w	r3, r7, #16
 800b5e2:	68b8      	ldr	r0, [r7, #8]
 800b5e4:	f004 fbba 	bl	800fd5c <f_read>
    
    /* Check for "movi" tag */
    offset = __AVI_SearchID(pavi->pVideoBuffer,pavi->VideoBufferSize,(uint8_t*)"movi");
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5f0:	4a49      	ldr	r2, [pc, #292]	@ (800b718 <AVI_GetFrame+0x164>)
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	f7ff fd82 	bl	800b0fc <__AVI_SearchID>
 800b5f8:	6178      	str	r0, [r7, #20]
    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	3304      	adds	r3, #4
 800b602:	4413      	add	r3, r2
 800b604:	4619      	mov	r1, r3
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f7ff fdba 	bl	800b180 <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	330c      	adds	r3, #12
 800b610:	4619      	mov	r1, r3
 800b612:	68b8      	ldr	r0, [r7, #8]
 800b614:	f004 fd89 	bl	801012a <f_lseek>
    
  }

  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	8bdb      	ldrh	r3, [r3, #30]
 800b61c:	f246 4263 	movw	r2, #25699	@ 0x6463
 800b620:	4293      	cmp	r3, r2
 800b622:	d158      	bne.n	800b6d6 <AVI_GetFrame+0x122>
  {
    /* the Frame is a Video Frame */
       
	if(skipFlag == 1)
 800b624:	79fb      	ldrb	r3, [r7, #7]
 800b626:	2b01      	cmp	r3, #1
 800b628:	d11b      	bne.n	800b662 <AVI_GetFrame+0xae>
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6a1a      	ldr	r2, [r3, #32]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	631a      	str	r2, [r3, #48]	@ 0x30

		f_lseek(file, f_tell(file) + pavi->FrameSize);
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	699a      	ldr	r2, [r3, #24]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b63a:	4413      	add	r3, r2
 800b63c:	4619      	mov	r1, r3
 800b63e:	68b8      	ldr	r0, [r7, #8]
 800b640:	f004 fd73 	bl	801012a <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b648:	f107 0310 	add.w	r3, r7, #16
 800b64c:	2208      	movs	r2, #8
 800b64e:	68b8      	ldr	r0, [r7, #8]
 800b650:	f004 fb84 	bl	800fd5c <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b658:	4619      	mov	r1, r3
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff fd90 	bl	800b180 <__AVI_GetStreamInfo>
 800b660:	e037      	b.n	800b6d2 <AVI_GetFrame+0x11e>

	}
	else if(skipFlag == 2)
 800b662:	79fb      	ldrb	r3, [r7, #7]
 800b664:	2b02      	cmp	r3, #2
 800b666:	d11c      	bne.n	800b6a2 <AVI_GetFrame+0xee>
	{

		f_lseek(file, f_tell(file) - pavi->FrameSize - 8 - 8);
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	699a      	ldr	r2, [r3, #24]
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	3b10      	subs	r3, #16
 800b674:	4619      	mov	r1, r3
 800b676:	68b8      	ldr	r0, [r7, #8]
 800b678:	f004 fd57 	bl	801012a <f_lseek>

	    f_read(file,  pavi->pVideoBuffer, 8, (UINT*)&readSize);
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b680:	f107 0310 	add.w	r3, r7, #16
 800b684:	2208      	movs	r2, #8
 800b686:	68b8      	ldr	r0, [r7, #8]
 800b688:	f004 fb68 	bl	800fd5c <f_read>

	    __AVI_GetStreamInfo(pavi,  pavi->pVideoBuffer);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b690:	4619      	mov	r1, r3
 800b692:	68f8      	ldr	r0, [r7, #12]
 800b694:	f7ff fd74 	bl	800b180 <__AVI_GetStreamInfo>

		// Get the previous frame size
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6a1a      	ldr	r2, [r3, #32]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	631a      	str	r2, [r3, #48]	@ 0x30
 800b6a0:	e017      	b.n	800b6d2 <AVI_GetFrame+0x11e>
	}
	else
	{

		/* Get the current frame size */
		pavi->FrameSize = pavi->aviInfo.StreamSize;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6a1a      	ldr	r2, [r3, #32]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Read The current frame + the header of the next frame (8 bytes) */
		f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6b2:	f103 0208 	add.w	r2, r3, #8
 800b6b6:	f107 0310 	add.w	r3, r7, #16
 800b6ba:	68b8      	ldr	r0, [r7, #8]
 800b6bc:	f004 fb4e 	bl	800fd5c <f_read>

		/* Get the info of the next frame */
		__AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	6a1b      	ldr	r3, [r3, #32]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f7ff fd57 	bl	800b180 <__AVI_GetStreamInfo>
    	/* Return VIDEO frame */

	}
    
    return AVI_VIDEO_FRAME;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e01c      	b.n	800b710 <AVI_GetFrame+0x15c>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	8bdb      	ldrh	r3, [r3, #30]
 800b6da:	f247 7262 	movw	r2, #30562	@ 0x7762
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d115      	bne.n	800b70e <AVI_GetFrame+0x15a>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6ea:	f103 0208 	add.w	r2, r3, #8
 800b6ee:	f107 0310 	add.w	r3, r7, #16
 800b6f2:	68b8      	ldr	r0, [r7, #8]
 800b6f4:	f004 fb32 	bl	800fd5c <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6a1b      	ldr	r3, [r3, #32]
 800b700:	4413      	add	r3, r2
 800b702:	4619      	mov	r1, r3
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	f7ff fd3b 	bl	800b180 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 800b70a:	2302      	movs	r3, #2
 800b70c:	e000      	b.n	800b710 <AVI_GetFrame+0x15c>
    
  }
  
  return 0;
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	08010a7c 	.word	0x08010a7c

0800b71c <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d105      	bne.n	800b738 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 800b72c:	2200      	movs	r2, #0
 800b72e:	2120      	movs	r1, #32
 800b730:	4806      	ldr	r0, [pc, #24]	@ (800b74c <GC9A01_set_reset+0x30>)
 800b732:	f7f6 f9fb 	bl	8001b2c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800b736:	e004      	b.n	800b742 <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 800b738:	2201      	movs	r2, #1
 800b73a:	2120      	movs	r1, #32
 800b73c:	4803      	ldr	r0, [pc, #12]	@ (800b74c <GC9A01_set_reset+0x30>)
 800b73e:	f7f6 f9f5 	bl	8001b2c <HAL_GPIO_WritePin>
}
 800b742:	bf00      	nop
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	58022400 	.word	0x58022400

0800b750 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	4603      	mov	r3, r0
 800b758:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800b75a:	79fb      	ldrb	r3, [r7, #7]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d105      	bne.n	800b76c <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 800b760:	2200      	movs	r2, #0
 800b762:	2140      	movs	r1, #64	@ 0x40
 800b764:	4806      	ldr	r0, [pc, #24]	@ (800b780 <GC9A01_set_data_command+0x30>)
 800b766:	f7f6 f9e1 	bl	8001b2c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 800b76a:	e004      	b.n	800b776 <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800b76c:	2201      	movs	r2, #1
 800b76e:	2140      	movs	r1, #64	@ 0x40
 800b770:	4803      	ldr	r0, [pc, #12]	@ (800b780 <GC9A01_set_data_command+0x30>)
 800b772:	f7f6 f9db 	bl	8001b2c <HAL_GPIO_WritePin>
}
 800b776:	bf00      	nop
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	58022400 	.word	0x58022400

0800b784 <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	4603      	mov	r3, r0
 800b78c:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800b78e:	79fb      	ldrb	r3, [r7, #7]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d105      	bne.n	800b7a0 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800b794:	2200      	movs	r2, #0
 800b796:	2102      	movs	r1, #2
 800b798:	4806      	ldr	r0, [pc, #24]	@ (800b7b4 <GC9A01_set_chip_select+0x30>)
 800b79a:	f7f6 f9c7 	bl	8001b2c <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 800b79e:	e004      	b.n	800b7aa <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	2102      	movs	r1, #2
 800b7a4:	4803      	ldr	r0, [pc, #12]	@ (800b7b4 <GC9A01_set_chip_select+0x30>)
 800b7a6:	f7f6 f9c1 	bl	8001b2c <HAL_GPIO_WritePin>
}
 800b7aa:	bf00      	nop
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	58022800 	.word	0x58022800

0800b7b8 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	4603      	mov	r3, r0
 800b7c0:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 800b7c2:	2000      	movs	r0, #0
 800b7c4:	f7ff ffc4 	bl	800b750 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	f7ff ffdb 	bl	800b784 <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 800b7ce:	1dfb      	adds	r3, r7, #7
 800b7d0:	2101      	movs	r1, #1
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f000 faae 	bl	800bd34 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 800b7d8:	2001      	movs	r0, #1
 800b7da:	f7ff ffd3 	bl	800b784 <GC9A01_set_chip_select>
}
 800b7de:	bf00      	nop
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b082      	sub	sp, #8
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 800b7f0:	2001      	movs	r0, #1
 800b7f2:	f7ff ffad 	bl	800b750 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	f7ff ffc4 	bl	800b784 <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	4619      	mov	r1, r3
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 fa96 	bl	800bd34 <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 800b808:	2001      	movs	r0, #1
 800b80a:	f7ff ffbb 	bl	800b784 <GC9A01_set_chip_select>
}
 800b80e:	bf00      	nop
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	4603      	mov	r3, r0
 800b81e:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 800b820:	1dfb      	adds	r3, r7, #7
 800b822:	2101      	movs	r1, #1
 800b824:	4618      	mov	r0, r3
 800b826:	f7ff ffde 	bl	800b7e6 <GC9A01_write_data>
}
 800b82a:	bf00      	nop
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <GC9A01_init>:
void GC9A01_write_continue(uint8_t *data, size_t len) {
    GC9A01_write_command(MEM_WR_CONT);
    GC9A01_write_data(data, len);
}

void GC9A01_init(void) {
 800b832:	b580      	push	{r7, lr}
 800b834:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800b836:	2001      	movs	r0, #1
 800b838:	f7ff ffa4 	bl	800b784 <GC9A01_set_chip_select>
    HAL_Delay(5);
 800b83c:	2005      	movs	r0, #5
 800b83e:	f7f5 fb19 	bl	8000e74 <HAL_Delay>
    GC9A01_set_reset(OFF);
 800b842:	2000      	movs	r0, #0
 800b844:	f7ff ff6a 	bl	800b71c <GC9A01_set_reset>
    HAL_Delay(10);
 800b848:	200a      	movs	r0, #10
 800b84a:	f7f5 fb13 	bl	8000e74 <HAL_Delay>
    GC9A01_set_reset(ON);
 800b84e:	2001      	movs	r0, #1
 800b850:	f7ff ff64 	bl	800b71c <GC9A01_set_reset>
    HAL_Delay(120);
 800b854:	2078      	movs	r0, #120	@ 0x78
 800b856:	f7f5 fb0d 	bl	8000e74 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 800b85a:	20ef      	movs	r0, #239	@ 0xef
 800b85c:	f7ff ffac 	bl	800b7b8 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 800b860:	20eb      	movs	r0, #235	@ 0xeb
 800b862:	f7ff ffa9 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800b866:	2014      	movs	r0, #20
 800b868:	f7ff ffd5 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 800b86c:	20fe      	movs	r0, #254	@ 0xfe
 800b86e:	f7ff ffa3 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800b872:	20ef      	movs	r0, #239	@ 0xef
 800b874:	f7ff ffa0 	bl	800b7b8 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 800b878:	20eb      	movs	r0, #235	@ 0xeb
 800b87a:	f7ff ff9d 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800b87e:	2014      	movs	r0, #20
 800b880:	f7ff ffc9 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 800b884:	2084      	movs	r0, #132	@ 0x84
 800b886:	f7ff ff97 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 800b88a:	2040      	movs	r0, #64	@ 0x40
 800b88c:	f7ff ffc3 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 800b890:	2085      	movs	r0, #133	@ 0x85
 800b892:	f7ff ff91 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800b896:	20ff      	movs	r0, #255	@ 0xff
 800b898:	f7ff ffbd 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 800b89c:	2086      	movs	r0, #134	@ 0x86
 800b89e:	f7ff ff8b 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800b8a2:	20ff      	movs	r0, #255	@ 0xff
 800b8a4:	f7ff ffb7 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 800b8a8:	2087      	movs	r0, #135	@ 0x87
 800b8aa:	f7ff ff85 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800b8ae:	20ff      	movs	r0, #255	@ 0xff
 800b8b0:	f7ff ffb1 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 800b8b4:	2088      	movs	r0, #136	@ 0x88
 800b8b6:	f7ff ff7f 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 800b8ba:	200a      	movs	r0, #10
 800b8bc:	f7ff ffab 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 800b8c0:	2089      	movs	r0, #137	@ 0x89
 800b8c2:	f7ff ff79 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800b8c6:	2021      	movs	r0, #33	@ 0x21
 800b8c8:	f7ff ffa5 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 800b8cc:	208a      	movs	r0, #138	@ 0x8a
 800b8ce:	f7ff ff73 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	f7ff ff9f 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 800b8d8:	208b      	movs	r0, #139	@ 0x8b
 800b8da:	f7ff ff6d 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 800b8de:	2080      	movs	r0, #128	@ 0x80
 800b8e0:	f7ff ff99 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 800b8e4:	208c      	movs	r0, #140	@ 0x8c
 800b8e6:	f7ff ff67 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800b8ea:	2001      	movs	r0, #1
 800b8ec:	f7ff ff93 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 800b8f0:	208d      	movs	r0, #141	@ 0x8d
 800b8f2:	f7ff ff61 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800b8f6:	2001      	movs	r0, #1
 800b8f8:	f7ff ff8d 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 800b8fc:	208e      	movs	r0, #142	@ 0x8e
 800b8fe:	f7ff ff5b 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800b902:	20ff      	movs	r0, #255	@ 0xff
 800b904:	f7ff ff87 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 800b908:	208f      	movs	r0, #143	@ 0x8f
 800b90a:	f7ff ff55 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800b90e:	20ff      	movs	r0, #255	@ 0xff
 800b910:	f7ff ff81 	bl	800b816 <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800b914:	20b6      	movs	r0, #182	@ 0xb6
 800b916:	f7ff ff4f 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800b91a:	2000      	movs	r0, #0
 800b91c:	f7ff ff7b 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800b920:	2000      	movs	r0, #0
 800b922:	f7ff ff78 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800b926:	2036      	movs	r0, #54	@ 0x36
 800b928:	f7ff ff46 	bl	800b7b8 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 800b92c:	2048      	movs	r0, #72	@ 0x48
 800b92e:	f7ff ff72 	bl	800b816 <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800b932:	203a      	movs	r0, #58	@ 0x3a
 800b934:	f7ff ff40 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 800b938:	2005      	movs	r0, #5
 800b93a:	f7ff ff6c 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 800b93e:	2090      	movs	r0, #144	@ 0x90
 800b940:	f7ff ff3a 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800b944:	2008      	movs	r0, #8
 800b946:	f7ff ff66 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800b94a:	2008      	movs	r0, #8
 800b94c:	f7ff ff63 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800b950:	2008      	movs	r0, #8
 800b952:	f7ff ff60 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800b956:	2008      	movs	r0, #8
 800b958:	f7ff ff5d 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 800b95c:	20bd      	movs	r0, #189	@ 0xbd
 800b95e:	f7ff ff2b 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800b962:	2006      	movs	r0, #6
 800b964:	f7ff ff57 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 800b968:	20bc      	movs	r0, #188	@ 0xbc
 800b96a:	f7ff ff25 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800b96e:	2000      	movs	r0, #0
 800b970:	f7ff ff51 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800b974:	20ff      	movs	r0, #255	@ 0xff
 800b976:	f7ff ff1f 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 800b97a:	2060      	movs	r0, #96	@ 0x60
 800b97c:	f7ff ff4b 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800b980:	2001      	movs	r0, #1
 800b982:	f7ff ff48 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800b986:	2004      	movs	r0, #4
 800b988:	f7ff ff45 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 800b98c:	20c3      	movs	r0, #195	@ 0xc3
 800b98e:	f7ff ff13 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 800b992:	2013      	movs	r0, #19
 800b994:	f7ff ff3f 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 800b998:	20c4      	movs	r0, #196	@ 0xc4
 800b99a:	f7ff ff0d 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 800b99e:	2013      	movs	r0, #19
 800b9a0:	f7ff ff39 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 800b9a4:	20c9      	movs	r0, #201	@ 0xc9
 800b9a6:	f7ff ff07 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 800b9aa:	2022      	movs	r0, #34	@ 0x22
 800b9ac:	f7ff ff33 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 800b9b0:	20be      	movs	r0, #190	@ 0xbe
 800b9b2:	f7ff ff01 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 800b9b6:	2011      	movs	r0, #17
 800b9b8:	f7ff ff2d 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 800b9bc:	20e1      	movs	r0, #225	@ 0xe1
 800b9be:	f7ff fefb 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800b9c2:	2010      	movs	r0, #16
 800b9c4:	f7ff ff27 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 800b9c8:	200e      	movs	r0, #14
 800b9ca:	f7ff ff24 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 800b9ce:	20df      	movs	r0, #223	@ 0xdf
 800b9d0:	f7ff fef2 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800b9d4:	2021      	movs	r0, #33	@ 0x21
 800b9d6:	f7ff ff1e 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 800b9da:	200c      	movs	r0, #12
 800b9dc:	f7ff ff1b 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 800b9e0:	2002      	movs	r0, #2
 800b9e2:	f7ff ff18 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 800b9e6:	20f0      	movs	r0, #240	@ 0xf0
 800b9e8:	f7ff fee6 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 800b9ec:	2045      	movs	r0, #69	@ 0x45
 800b9ee:	f7ff ff12 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800b9f2:	2009      	movs	r0, #9
 800b9f4:	f7ff ff0f 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800b9f8:	2008      	movs	r0, #8
 800b9fa:	f7ff ff0c 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800b9fe:	2008      	movs	r0, #8
 800ba00:	f7ff ff09 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800ba04:	2026      	movs	r0, #38	@ 0x26
 800ba06:	f7ff ff06 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 800ba0a:	202a      	movs	r0, #42	@ 0x2a
 800ba0c:	f7ff ff03 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 800ba10:	20f1      	movs	r0, #241	@ 0xf1
 800ba12:	f7ff fed1 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800ba16:	2043      	movs	r0, #67	@ 0x43
 800ba18:	f7ff fefd 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800ba1c:	2070      	movs	r0, #112	@ 0x70
 800ba1e:	f7ff fefa 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800ba22:	2072      	movs	r0, #114	@ 0x72
 800ba24:	f7ff fef7 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 800ba28:	2036      	movs	r0, #54	@ 0x36
 800ba2a:	f7ff fef4 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800ba2e:	2037      	movs	r0, #55	@ 0x37
 800ba30:	f7ff fef1 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800ba34:	206f      	movs	r0, #111	@ 0x6f
 800ba36:	f7ff feee 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 800ba3a:	20f2      	movs	r0, #242	@ 0xf2
 800ba3c:	f7ff febc 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 800ba40:	2045      	movs	r0, #69	@ 0x45
 800ba42:	f7ff fee8 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800ba46:	2009      	movs	r0, #9
 800ba48:	f7ff fee5 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800ba4c:	2008      	movs	r0, #8
 800ba4e:	f7ff fee2 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800ba52:	2008      	movs	r0, #8
 800ba54:	f7ff fedf 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800ba58:	2026      	movs	r0, #38	@ 0x26
 800ba5a:	f7ff fedc 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 800ba5e:	202a      	movs	r0, #42	@ 0x2a
 800ba60:	f7ff fed9 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800ba64:	20f3      	movs	r0, #243	@ 0xf3
 800ba66:	f7ff fea7 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800ba6a:	2043      	movs	r0, #67	@ 0x43
 800ba6c:	f7ff fed3 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800ba70:	2070      	movs	r0, #112	@ 0x70
 800ba72:	f7ff fed0 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800ba76:	2072      	movs	r0, #114	@ 0x72
 800ba78:	f7ff fecd 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 800ba7c:	2036      	movs	r0, #54	@ 0x36
 800ba7e:	f7ff feca 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800ba82:	2037      	movs	r0, #55	@ 0x37
 800ba84:	f7ff fec7 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800ba88:	206f      	movs	r0, #111	@ 0x6f
 800ba8a:	f7ff fec4 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 800ba8e:	20ed      	movs	r0, #237	@ 0xed
 800ba90:	f7ff fe92 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 800ba94:	201b      	movs	r0, #27
 800ba96:	f7ff febe 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 800ba9a:	200b      	movs	r0, #11
 800ba9c:	f7ff febb 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 800baa0:	20ae      	movs	r0, #174	@ 0xae
 800baa2:	f7ff fe89 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 800baa6:	2077      	movs	r0, #119	@ 0x77
 800baa8:	f7ff feb5 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 800baac:	20cd      	movs	r0, #205	@ 0xcd
 800baae:	f7ff fe83 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 800bab2:	2063      	movs	r0, #99	@ 0x63
 800bab4:	f7ff feaf 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 800bab8:	2070      	movs	r0, #112	@ 0x70
 800baba:	f7ff fe7d 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 800babe:	2007      	movs	r0, #7
 800bac0:	f7ff fea9 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800bac4:	2007      	movs	r0, #7
 800bac6:	f7ff fea6 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800baca:	2004      	movs	r0, #4
 800bacc:	f7ff fea3 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 800bad0:	200e      	movs	r0, #14
 800bad2:	f7ff fea0 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800bad6:	200f      	movs	r0, #15
 800bad8:	f7ff fe9d 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800badc:	2009      	movs	r0, #9
 800bade:	f7ff fe9a 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800bae2:	2007      	movs	r0, #7
 800bae4:	f7ff fe97 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bae8:	2008      	movs	r0, #8
 800baea:	f7ff fe94 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 800baee:	2003      	movs	r0, #3
 800baf0:	f7ff fe91 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 800baf4:	20e8      	movs	r0, #232	@ 0xe8
 800baf6:	f7ff fe5f 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 800bafa:	2034      	movs	r0, #52	@ 0x34
 800bafc:	f7ff fe8b 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 800bb00:	2062      	movs	r0, #98	@ 0x62
 800bb02:	f7ff fe59 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800bb06:	2018      	movs	r0, #24
 800bb08:	f7ff fe85 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 800bb0c:	200d      	movs	r0, #13
 800bb0e:	f7ff fe82 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800bb12:	2071      	movs	r0, #113	@ 0x71
 800bb14:	f7ff fe7f 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 800bb18:	20ed      	movs	r0, #237	@ 0xed
 800bb1a:	f7ff fe7c 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bb1e:	2070      	movs	r0, #112	@ 0x70
 800bb20:	f7ff fe79 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bb24:	2070      	movs	r0, #112	@ 0x70
 800bb26:	f7ff fe76 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 800bb2a:	2018      	movs	r0, #24
 800bb2c:	f7ff fe73 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800bb30:	200f      	movs	r0, #15
 800bb32:	f7ff fe70 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800bb36:	2071      	movs	r0, #113	@ 0x71
 800bb38:	f7ff fe6d 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 800bb3c:	20ef      	movs	r0, #239	@ 0xef
 800bb3e:	f7ff fe6a 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bb42:	2070      	movs	r0, #112	@ 0x70
 800bb44:	f7ff fe67 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bb48:	2070      	movs	r0, #112	@ 0x70
 800bb4a:	f7ff fe64 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 800bb4e:	2063      	movs	r0, #99	@ 0x63
 800bb50:	f7ff fe32 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800bb54:	2018      	movs	r0, #24
 800bb56:	f7ff fe5e 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 800bb5a:	2011      	movs	r0, #17
 800bb5c:	f7ff fe5b 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800bb60:	2071      	movs	r0, #113	@ 0x71
 800bb62:	f7ff fe58 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800bb66:	20f1      	movs	r0, #241	@ 0xf1
 800bb68:	f7ff fe55 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bb6c:	2070      	movs	r0, #112	@ 0x70
 800bb6e:	f7ff fe52 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bb72:	2070      	movs	r0, #112	@ 0x70
 800bb74:	f7ff fe4f 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 800bb78:	2018      	movs	r0, #24
 800bb7a:	f7ff fe4c 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 800bb7e:	2013      	movs	r0, #19
 800bb80:	f7ff fe49 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800bb84:	2071      	movs	r0, #113	@ 0x71
 800bb86:	f7ff fe46 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 800bb8a:	20f3      	movs	r0, #243	@ 0xf3
 800bb8c:	f7ff fe43 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bb90:	2070      	movs	r0, #112	@ 0x70
 800bb92:	f7ff fe40 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bb96:	2070      	movs	r0, #112	@ 0x70
 800bb98:	f7ff fe3d 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 800bb9c:	2064      	movs	r0, #100	@ 0x64
 800bb9e:	f7ff fe0b 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 800bba2:	2028      	movs	r0, #40	@ 0x28
 800bba4:	f7ff fe37 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 800bba8:	2029      	movs	r0, #41	@ 0x29
 800bbaa:	f7ff fe34 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800bbae:	20f1      	movs	r0, #241	@ 0xf1
 800bbb0:	f7ff fe31 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800bbb4:	2001      	movs	r0, #1
 800bbb6:	f7ff fe2e 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800bbba:	20f1      	movs	r0, #241	@ 0xf1
 800bbbc:	f7ff fe2b 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	f7ff fe28 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800bbc6:	2007      	movs	r0, #7
 800bbc8:	f7ff fe25 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 800bbcc:	2066      	movs	r0, #102	@ 0x66
 800bbce:	f7ff fdf3 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 800bbd2:	203c      	movs	r0, #60	@ 0x3c
 800bbd4:	f7ff fe1f 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bbd8:	2000      	movs	r0, #0
 800bbda:	f7ff fe1c 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 800bbde:	20cd      	movs	r0, #205	@ 0xcd
 800bbe0:	f7ff fe19 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800bbe4:	2067      	movs	r0, #103	@ 0x67
 800bbe6:	f7ff fe16 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 800bbea:	2045      	movs	r0, #69	@ 0x45
 800bbec:	f7ff fe13 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 800bbf0:	2045      	movs	r0, #69	@ 0x45
 800bbf2:	f7ff fe10 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800bbf6:	2010      	movs	r0, #16
 800bbf8:	f7ff fe0d 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	f7ff fe0a 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bc02:	2000      	movs	r0, #0
 800bc04:	f7ff fe07 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bc08:	2000      	movs	r0, #0
 800bc0a:	f7ff fe04 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 800bc0e:	2067      	movs	r0, #103	@ 0x67
 800bc10:	f7ff fdd2 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bc14:	2000      	movs	r0, #0
 800bc16:	f7ff fdfe 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 800bc1a:	203c      	movs	r0, #60	@ 0x3c
 800bc1c:	f7ff fdfb 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bc20:	2000      	movs	r0, #0
 800bc22:	f7ff fdf8 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bc26:	2000      	movs	r0, #0
 800bc28:	f7ff fdf5 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bc2c:	2000      	movs	r0, #0
 800bc2e:	f7ff fdf2 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800bc32:	2001      	movs	r0, #1
 800bc34:	f7ff fdef 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 800bc38:	2054      	movs	r0, #84	@ 0x54
 800bc3a:	f7ff fdec 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800bc3e:	2010      	movs	r0, #16
 800bc40:	f7ff fde9 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 800bc44:	2032      	movs	r0, #50	@ 0x32
 800bc46:	f7ff fde6 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 800bc4a:	2098      	movs	r0, #152	@ 0x98
 800bc4c:	f7ff fde3 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 800bc50:	2074      	movs	r0, #116	@ 0x74
 800bc52:	f7ff fdb1 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800bc56:	2010      	movs	r0, #16
 800bc58:	f7ff fddd 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 800bc5c:	2085      	movs	r0, #133	@ 0x85
 800bc5e:	f7ff fdda 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800bc62:	2080      	movs	r0, #128	@ 0x80
 800bc64:	f7ff fdd7 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bc68:	2000      	movs	r0, #0
 800bc6a:	f7ff fdd4 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bc6e:	2000      	movs	r0, #0
 800bc70:	f7ff fdd1 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800bc74:	204e      	movs	r0, #78	@ 0x4e
 800bc76:	f7ff fdce 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bc7a:	2000      	movs	r0, #0
 800bc7c:	f7ff fdcb 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 800bc80:	2098      	movs	r0, #152	@ 0x98
 800bc82:	f7ff fd99 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 800bc86:	203e      	movs	r0, #62	@ 0x3e
 800bc88:	f7ff fdc5 	bl	800b816 <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800bc8c:	2007      	movs	r0, #7
 800bc8e:	f7ff fdc2 	bl	800b816 <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 800bc92:	2035      	movs	r0, #53	@ 0x35
 800bc94:	f7ff fd90 	bl	800b7b8 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 800bc98:	2021      	movs	r0, #33	@ 0x21
 800bc9a:	f7ff fd8d 	bl	800b7b8 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 800bc9e:	2011      	movs	r0, #17
 800bca0:	f7ff fd8a 	bl	800b7b8 <GC9A01_write_command>
    HAL_Delay(120);
 800bca4:	2078      	movs	r0, #120	@ 0x78
 800bca6:	f7f5 f8e5 	bl	8000e74 <HAL_Delay>
    GC9A01_write_command(0x29);
 800bcaa:	2029      	movs	r0, #41	@ 0x29
 800bcac:	f7ff fd84 	bl	800b7b8 <GC9A01_write_command>
    HAL_Delay(20);
 800bcb0:	2014      	movs	r0, #20
 800bcb2:	f7f5 f8df 	bl	8000e74 <HAL_Delay>
    
}
 800bcb6:	bf00      	nop
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <GC9A01_set_frame>:

void GC9A01_set_frame(struct GC9A01_frame frame) {
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b084      	sub	sp, #16
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	463b      	mov	r3, r7
 800bcc2:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t data[4];
    
    GC9A01_write_command(COL_ADDR_SET);
 800bcc6:	202a      	movs	r0, #42	@ 0x2a
 800bcc8:	f7ff fd76 	bl	800b7b8 <GC9A01_write_command>
    data[0] = (frame.start.X >> 8) & 0xFF;
 800bccc:	883b      	ldrh	r3, [r7, #0]
 800bcce:	0a1b      	lsrs	r3, r3, #8
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.X & 0xFF;
 800bcd6:	883b      	ldrh	r3, [r7, #0]
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.X >> 8) & 0xFF;
 800bcdc:	88bb      	ldrh	r3, [r7, #4]
 800bcde:	0a1b      	lsrs	r3, r3, #8
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.X & 0xFF;
 800bce6:	88bb      	ldrh	r3, [r7, #4]
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 800bcec:	f107 030c 	add.w	r3, r7, #12
 800bcf0:	2104      	movs	r1, #4
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7ff fd77 	bl	800b7e6 <GC9A01_write_data>

    GC9A01_write_command(ROW_ADDR_SET);
 800bcf8:	202b      	movs	r0, #43	@ 0x2b
 800bcfa:	f7ff fd5d 	bl	800b7b8 <GC9A01_write_command>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 800bcfe:	887b      	ldrh	r3, [r7, #2]
 800bd00:	0a1b      	lsrs	r3, r3, #8
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.Y & 0xFF;
 800bd08:	887b      	ldrh	r3, [r7, #2]
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.Y >> 8) & 0xFF;
 800bd0e:	88fb      	ldrh	r3, [r7, #6]
 800bd10:	0a1b      	lsrs	r3, r3, #8
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.Y & 0xFF;
 800bd18:	88fb      	ldrh	r3, [r7, #6]
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 800bd1e:	f107 030c 	add.w	r3, r7, #12
 800bd22:	2104      	movs	r1, #4
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff fd5e 	bl	800b7e6 <GC9A01_write_data>
    
}
 800bd2a:	bf00      	nop
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
	...

0800bd34 <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 800bd40:	887a      	ldrh	r2, [r7, #2]
 800bd42:	f04f 33ff 	mov.w	r3, #4294967295
 800bd46:	6879      	ldr	r1, [r7, #4]
 800bd48:	4806      	ldr	r0, [pc, #24]	@ (800bd64 <GC9A01_spi_tx+0x30>)
 800bd4a:	f7fe f811 	bl	8009d70 <HAL_SPI_Transmit>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	461a      	mov	r2, r3
 800bd52:	4b05      	ldr	r3, [pc, #20]	@ (800bd68 <GC9A01_spi_tx+0x34>)
 800bd54:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 800bd56:	4b04      	ldr	r3, [pc, #16]	@ (800bd68 <GC9A01_spi_tx+0x34>)
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	2b00      	cmp	r3, #0
		return;

}
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	200002dc 	.word	0x200002dc
 800bd68:	200001cc 	.word	0x200001cc

0800bd6c <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af02      	add	r7, sp, #8
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
 800bd78:	603b      	str	r3, [r7, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 800bd7a:	4a11      	ldr	r2, [pc, #68]	@ (800bdc0 <JPEG_Decode_DMA+0x54>)
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 800bd80:	4a10      	ldr	r2, [pc, #64]	@ (800bdc4 <JPEG_Decode_DMA+0x58>)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	6013      	str	r3, [r2, #0]
  Input_frameIndex=0;
 800bd86:	4b10      	ldr	r3, [pc, #64]	@ (800bdc8 <JPEG_Decode_DMA+0x5c>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	601a      	str	r2, [r3, #0]
  Input_frameSize = FrameSize;
 800bd8c:	4a0f      	ldr	r2, [pc, #60]	@ (800bdcc <JPEG_Decode_DMA+0x60>)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6013      	str	r3, [r2, #0]
  
  Jpeg_HWDecodingEnd = 0;
 800bd92:	4b0f      	ldr	r3, [pc, #60]	@ (800bdd0 <JPEG_Decode_DMA+0x64>)
 800bd94:	2200      	movs	r2, #0
 800bd96:	601a      	str	r2, [r3, #0]
  
  /* Start JPEG decoding with DMA method */
  HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT);
 800bd98:	4b09      	ldr	r3, [pc, #36]	@ (800bdc0 <JPEG_Decode_DMA+0x54>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4b09      	ldr	r3, [pc, #36]	@ (800bdc4 <JPEG_Decode_DMA+0x58>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	461a      	mov	r2, r3
 800bda4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f7f5 ffec 	bl	8001d8e <HAL_JPEG_Decode_DMA>
  
  
  return 0;
 800bdb6:	2300      	movs	r3, #0
  
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	200001d8 	.word	0x200001d8
 800bdc4:	200001d4 	.word	0x200001d4
 800bdc8:	200001e0 	.word	0x200001e0
 800bdcc:	200001dc 	.word	0x200001dc
 800bdd0:	200001d0 	.word	0x200001d0

0800bdd4 <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
}
 800bdde:	bf00      	nop
 800bde0:	370c      	adds	r7, #12
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr
	...

0800bdec <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 800bdf6:	4b19      	ldr	r3, [pc, #100]	@ (800be5c <HAL_JPEG_GetDataCallback+0x70>)
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	4a17      	ldr	r2, [pc, #92]	@ (800be5c <HAL_JPEG_GetDataCallback+0x70>)
 800be00:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 800be02:	4b16      	ldr	r3, [pc, #88]	@ (800be5c <HAL_JPEG_GetDataCallback+0x70>)
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	4b16      	ldr	r3, [pc, #88]	@ (800be60 <HAL_JPEG_GetDataCallback+0x74>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d218      	bcs.n	800be40 <HAL_JPEG_GetDataCallback+0x54>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 800be0e:	4b15      	ldr	r3, [pc, #84]	@ (800be64 <HAL_JPEG_GetDataCallback+0x78>)
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	4413      	add	r3, r2
 800be16:	4a13      	ldr	r2, [pc, #76]	@ (800be64 <HAL_JPEG_GetDataCallback+0x78>)
 800be18:	6013      	str	r3, [r2, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 800be1a:	4b11      	ldr	r3, [pc, #68]	@ (800be60 <HAL_JPEG_GetDataCallback+0x74>)
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	4b0f      	ldr	r3, [pc, #60]	@ (800be5c <HAL_JPEG_GetDataCallback+0x70>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	1ad3      	subs	r3, r2, r3
 800be24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be28:	d303      	bcc.n	800be32 <HAL_JPEG_GetDataCallback+0x46>
    {
      inDataLength = CHUNK_SIZE_IN;
 800be2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800be2e:	60fb      	str	r3, [r7, #12]
 800be30:	e008      	b.n	800be44 <HAL_JPEG_GetDataCallback+0x58>
    }
    else
    {
      inDataLength = Input_frameSize - Input_frameIndex;
 800be32:	4b0b      	ldr	r3, [pc, #44]	@ (800be60 <HAL_JPEG_GetDataCallback+0x74>)
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	4b09      	ldr	r3, [pc, #36]	@ (800be5c <HAL_JPEG_GetDataCallback+0x70>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	1ad3      	subs	r3, r2, r3
 800be3c:	60fb      	str	r3, [r7, #12]
 800be3e:	e001      	b.n	800be44 <HAL_JPEG_GetDataCallback+0x58>
    }    
  }
  else
  {
    inDataLength = 0; 
 800be40:	2300      	movs	r3, #0
 800be42:	60fb      	str	r3, [r7, #12]
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 800be44:	4b07      	ldr	r3, [pc, #28]	@ (800be64 <HAL_JPEG_GetDataCallback+0x78>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	4619      	mov	r1, r3
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f7f6 f859 	bl	8001f04 <HAL_JPEG_ConfigInputBuffer>
  
}
 800be52:	bf00      	nop
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	200001e0 	.word	0x200001e0
 800be60:	200001dc 	.word	0x200001dc
 800be64:	200001d8 	.word	0x200001d8

0800be68 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 800be74:	4b08      	ldr	r3, [pc, #32]	@ (800be98 <HAL_JPEG_DataReadyCallback+0x30>)
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	4413      	add	r3, r2
 800be7c:	4a06      	ldr	r2, [pc, #24]	@ (800be98 <HAL_JPEG_DataReadyCallback+0x30>)
 800be7e:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 800be80:	4b05      	ldr	r3, [pc, #20]	@ (800be98 <HAL_JPEG_DataReadyCallback+0x30>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800be88:	4619      	mov	r1, r3
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f7f6 f84c 	bl	8001f28 <HAL_JPEG_ConfigOutputBuffer>
}
 800be90:	bf00      	nop
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	200001d4 	.word	0x200001d4

0800be9c <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  Error_Handler();
 800bea4:	f000 f83a 	bl	800bf1c <Error_Handler>
}
 800bea8:	bf00      	nop
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1; 
 800beb8:	4b04      	ldr	r3, [pc, #16]	@ (800becc <HAL_JPEG_DecodeCpltCallback+0x1c>)
 800beba:	2201      	movs	r2, #1
 800bebc:	601a      	str	r2, [r3, #0]
}
 800bebe:	bf00      	nop
 800bec0:	370c      	adds	r7, #12
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	200001d0 	.word	0x200001d0

0800bed0 <main>:
static void MX_SPI5_Init(void);
static void MX_GPIO_Init(void);


int main(void)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	af00      	add	r7, sp, #0

  // System configurations
  MPU_Config();							// Parameters configuration for external SDRAM
 800bed4:	f000 f8be 	bl	800c054 <MPU_Config>
  CPU_CACHE_Enable();
 800bed8:	f000 f8fe 	bl	800c0d8 <CPU_CACHE_Enable>
  HAL_Init();
 800bedc:	f7f4 ff38 	bl	8000d50 <HAL_Init>
  SystemClock_Config(); 				// System-Clock; HSE 200MHz, RTC-Clock; LSE 32kHz
 800bee0:	f000 f820 	bl	800bf24 <SystemClock_Config>
  
  // Microcntroller's peripherals initialization
  MX_GPIO_Init();
 800bee4:	f000 f9ba 	bl	800c25c <MX_GPIO_Init>
  MX_SPI5_Init();
 800bee8:	f000 f964 	bl	800c1b4 <MX_SPI5_Init>
  MX_RTC_Init();
 800beec:	f000 fa6e 	bl	800c3cc <MX_RTC_Init>

  // External peripherals initialization
  GC9A01_init();
 800bef0:	f7ff fc9f 	bl	800b832 <GC9A01_init>
  BSP_SDRAM_Init(0);
 800bef4:	2000      	movs	r0, #0
 800bef6:	f7f4 fcfb 	bl	80008f0 <BSP_SDRAM_Init>

  // JPEG initialization
  JPEG_Handle.Instance = JPEG;
 800befa:	4b06      	ldr	r3, [pc, #24]	@ (800bf14 <main+0x44>)
 800befc:	4a06      	ldr	r2, [pc, #24]	@ (800bf18 <main+0x48>)
 800befe:	601a      	str	r2, [r3, #0]
  HAL_JPEG_Init(&JPEG_Handle);    
 800bf00:	4804      	ldr	r0, [pc, #16]	@ (800bf14 <main+0x44>)
 800bf02:	f7f5 fe2d 	bl	8001b60 <HAL_JPEG_Init>

////////////////////////////////////////////////	APPLICATION SECTION

  // Application initialization
  smart_watch_init();
 800bf06:	f000 fb95 	bl	800c634 <smart_watch_init>

  // Application process
  smart_watch_process();
 800bf0a:	f000 fc3b 	bl	800c784 <smart_watch_process>

  while (1);
 800bf0e:	bf00      	nop
 800bf10:	e7fd      	b.n	800bf0e <main+0x3e>
 800bf12:	bf00      	nop
 800bf14:	200001e4 	.word	0x200001e4
 800bf18:	52003000 	.word	0x52003000

0800bf1c <Error_Handler>:

}


void Error_Handler(void)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	af00      	add	r7, sp, #0

  while(1);
 800bf20:	bf00      	nop
 800bf22:	e7fd      	b.n	800bf20 <Error_Handler+0x4>

0800bf24 <SystemClock_Config>:
// PLL_Q                          = 4
// PLL_R                          = 2
// VDD(V)                         = 3.3
// Flash Latency(WS)              = 4
static void SystemClock_Config(void)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b09e      	sub	sp, #120	@ 0x78
 800bf28:	af00      	add	r7, sp, #0

  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800bf30:	2004      	movs	r0, #4
 800bf32:	f7f8 f849 	bl	8003fc8 <HAL_PWREx_ConfigSupply>

  // The voltage scaling allows optimizing the power consumption when the device is
  // clocked below the maximum system frequency
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800bf36:	2300      	movs	r3, #0
 800bf38:	607b      	str	r3, [r7, #4]
 800bf3a:	4b43      	ldr	r3, [pc, #268]	@ (800c048 <SystemClock_Config+0x124>)
 800bf3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf3e:	4a42      	ldr	r2, [pc, #264]	@ (800c048 <SystemClock_Config+0x124>)
 800bf40:	f023 0301 	bic.w	r3, r3, #1
 800bf44:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bf46:	4b40      	ldr	r3, [pc, #256]	@ (800c048 <SystemClock_Config+0x124>)
 800bf48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf4a:	f003 0301 	and.w	r3, r3, #1
 800bf4e:	607b      	str	r3, [r7, #4]
 800bf50:	4b3e      	ldr	r3, [pc, #248]	@ (800c04c <SystemClock_Config+0x128>)
 800bf52:	699b      	ldr	r3, [r3, #24]
 800bf54:	4a3d      	ldr	r2, [pc, #244]	@ (800c04c <SystemClock_Config+0x128>)
 800bf56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf5a:	6193      	str	r3, [r2, #24]
 800bf5c:	4b3b      	ldr	r3, [pc, #236]	@ (800c04c <SystemClock_Config+0x128>)
 800bf5e:	699b      	ldr	r3, [r3, #24]
 800bf60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bf64:	607b      	str	r3, [r7, #4]
 800bf66:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800bf68:	bf00      	nop
 800bf6a:	4b38      	ldr	r3, [pc, #224]	@ (800c04c <SystemClock_Config+0x128>)
 800bf6c:	699b      	ldr	r3, [r3, #24]
 800bf6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf76:	d1f8      	bne.n	800bf6a <SystemClock_Config+0x46>

  // Clocks configurations
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 800bf78:	2305      	movs	r3, #5
 800bf7a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800bf7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800bf80:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800bf82:	2301      	movs	r3, #1
 800bf84:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800bf86:	2300      	movs	r3, #0
 800bf88:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bf8e:	2302      	movs	r3, #2
 800bf90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bf92:	2302      	movs	r3, #2
 800bf94:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800bf96:	2305      	movs	r3, #5
 800bf98:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 70;
 800bf9a:	2346      	movs	r3, #70	@ 0x46
 800bf9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800bfa2:	2302      	movs	r3, #2
 800bfa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800bfa6:	2302      	movs	r3, #2
 800bfa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800bfaa:	2304      	movs	r3, #4
 800bfac:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800bfb2:	2308      	movs	r3, #8
 800bfb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bfb6:	f107 0308 	add.w	r3, r7, #8
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7f8 f85e 	bl	800407c <HAL_RCC_OscConfig>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 800bfc6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800bfce:	f7ff ffa5 	bl	800bf1c <Error_Handler>
  }

  // CLocks assignment to peripheral buses
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800bfd2:	233f      	movs	r3, #63	@ 0x3f
 800bfd4:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bfd6:	2303      	movs	r3, #3
 800bfd8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800bfde:	2308      	movs	r3, #8
 800bfe0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800bfe2:	2340      	movs	r3, #64	@ 0x40
 800bfe4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800bfe6:	2340      	movs	r3, #64	@ 0x40
 800bfe8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800bfea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bfee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800bff0:	2340      	movs	r3, #64	@ 0x40
 800bff2:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800bff4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800bff8:	2104      	movs	r1, #4
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7f8 fc98 	bl	8004930 <HAL_RCC_ClockConfig>
 800c000:	4603      	mov	r3, r0
 800c002:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 800c006:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d001      	beq.n	800c012 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800c00e:	f7ff ff85 	bl	800bf1c <Error_Handler>
        - The activation of the CSI clock
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */
 
  __HAL_RCC_CSI_ENABLE() ;
 800c012:	4b0f      	ldr	r3, [pc, #60]	@ (800c050 <SystemClock_Config+0x12c>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a0e      	ldr	r2, [pc, #56]	@ (800c050 <SystemClock_Config+0x12c>)
 800c018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c01c:	6013      	str	r3, [r2, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800c01e:	4b0c      	ldr	r3, [pc, #48]	@ (800c050 <SystemClock_Config+0x12c>)
 800c020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c024:	4a0a      	ldr	r2, [pc, #40]	@ (800c050 <SystemClock_Config+0x12c>)
 800c026:	f043 0302 	orr.w	r3, r3, #2
 800c02a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800c02e:	4b08      	ldr	r3, [pc, #32]	@ (800c050 <SystemClock_Config+0x12c>)
 800c030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c034:	f003 0302 	and.w	r3, r3, #2
 800c038:	603b      	str	r3, [r7, #0]
 800c03a:	683b      	ldr	r3, [r7, #0]
  HAL_EnableCompensationCell();  
 800c03c:	f7f4 ff4a 	bl	8000ed4 <HAL_EnableCompensationCell>

}
 800c040:	bf00      	nop
 800c042:	3778      	adds	r7, #120	@ 0x78
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	58000400 	.word	0x58000400
 800c04c:	58024800 	.word	0x58024800
 800c050:	58024400 	.word	0x58024400

0800c054 <MPU_Config>:

// Configure the MPU attributes as Write Through for External SDRAM.
// The Base Address is SDRAM_DEVICE_ADDR .
// The Configured Region Size is 32MB because same as SDRAM size.
static void MPU_Config(void)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0

  MPU_Region_InitTypeDef MPU_InitStruct;
  

  HAL_MPU_Disable();
 800c05a:	f7f5 f85b 	bl	8001114 <HAL_MPU_Disable>

  // Configure the MPU as Strongly ordered for not defined regions
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800c05e:	2301      	movs	r3, #1
 800c060:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 800c062:	2300      	movs	r3, #0
 800c064:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800c066:	231f      	movs	r3, #31
 800c068:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800c06a:	2300      	movs	r3, #0
 800c06c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800c06e:	2300      	movs	r3, #0
 800c070:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800c072:	2300      	movs	r3, #0
 800c074:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800c076:	2301      	movs	r3, #1
 800c078:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800c07e:	2300      	movs	r3, #0
 800c080:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800c082:	2387      	movs	r3, #135	@ 0x87
 800c084:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800c086:	2301      	movs	r3, #1
 800c088:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800c08a:	463b      	mov	r3, r7
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7f5 f879 	bl	8001184 <HAL_MPU_ConfigRegion>

  // Configure the MPU attributes as WT for SDRAM
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800c092:	2301      	movs	r3, #1
 800c094:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 800c096:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800c09a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800c09c:	2318      	movs	r3, #24
 800c09e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800c0a0:	2303      	movs	r3, #3
 800c0a2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800c0c0:	463b      	mov	r3, r7
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7f5 f85e 	bl	8001184 <HAL_MPU_ConfigRegion>

  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800c0c8:	2004      	movs	r0, #4
 800c0ca:	f7f5 f83b 	bl	8001144 <HAL_MPU_Enable>

}
 800c0ce:	bf00      	nop
 800c0d0:	3710      	adds	r7, #16
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
	...

0800c0d8 <CPU_CACHE_Enable>:


static void CPU_CACHE_Enable(void)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b085      	sub	sp, #20
 800c0dc:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800c0de:	4b34      	ldr	r3, [pc, #208]	@ (800c1b0 <CPU_CACHE_Enable+0xd8>)
 800c0e0:	695b      	ldr	r3, [r3, #20]
 800c0e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d11b      	bne.n	800c122 <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800c0ea:	f3bf 8f4f 	dsb	sy
}
 800c0ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c0f0:	f3bf 8f6f 	isb	sy
}
 800c0f4:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800c0f6:	4b2e      	ldr	r3, [pc, #184]	@ (800c1b0 <CPU_CACHE_Enable+0xd8>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800c0fe:	f3bf 8f4f 	dsb	sy
}
 800c102:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c104:	f3bf 8f6f 	isb	sy
}
 800c108:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800c10a:	4b29      	ldr	r3, [pc, #164]	@ (800c1b0 <CPU_CACHE_Enable+0xd8>)
 800c10c:	695b      	ldr	r3, [r3, #20]
 800c10e:	4a28      	ldr	r2, [pc, #160]	@ (800c1b0 <CPU_CACHE_Enable+0xd8>)
 800c110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c114:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c116:	f3bf 8f4f 	dsb	sy
}
 800c11a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c11c:	f3bf 8f6f 	isb	sy
}
 800c120:	e000      	b.n	800c124 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800c122:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800c124:	4b22      	ldr	r3, [pc, #136]	@ (800c1b0 <CPU_CACHE_Enable+0xd8>)
 800c126:	695b      	ldr	r3, [r3, #20]
 800c128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d138      	bne.n	800c1a2 <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800c130:	4b1f      	ldr	r3, [pc, #124]	@ (800c1b0 <CPU_CACHE_Enable+0xd8>)
 800c132:	2200      	movs	r2, #0
 800c134:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800c138:	f3bf 8f4f 	dsb	sy
}
 800c13c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800c13e:	4b1c      	ldr	r3, [pc, #112]	@ (800c1b0 <CPU_CACHE_Enable+0xd8>)
 800c140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c144:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	0b5b      	lsrs	r3, r3, #13
 800c14a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c14e:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	08db      	lsrs	r3, r3, #3
 800c154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c158:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	015a      	lsls	r2, r3, #5
 800c15e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800c162:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c168:	4911      	ldr	r1, [pc, #68]	@ (800c1b0 <CPU_CACHE_Enable+0xd8>)
 800c16a:	4313      	orrs	r3, r2
 800c16c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	1e5a      	subs	r2, r3, #1
 800c174:	607a      	str	r2, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d1ef      	bne.n	800c15a <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	1e5a      	subs	r2, r3, #1
 800c17e:	60ba      	str	r2, [r7, #8]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1e5      	bne.n	800c150 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800c184:	f3bf 8f4f 	dsb	sy
}
 800c188:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800c18a:	4b09      	ldr	r3, [pc, #36]	@ (800c1b0 <CPU_CACHE_Enable+0xd8>)
 800c18c:	695b      	ldr	r3, [r3, #20]
 800c18e:	4a08      	ldr	r2, [pc, #32]	@ (800c1b0 <CPU_CACHE_Enable+0xd8>)
 800c190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c194:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c196:	f3bf 8f4f 	dsb	sy
}
 800c19a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c19c:	f3bf 8f6f 	isb	sy
}
 800c1a0:	e000      	b.n	800c1a4 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800c1a2:	bf00      	nop

  SCB_EnableICache();
  SCB_EnableDCache();

}
 800c1a4:	bf00      	nop
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	e000ed00 	.word	0xe000ed00

0800c1b4 <MX_SPI5_Init>:


static void MX_SPI5_Init(void)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800c1b8:	4b26      	ldr	r3, [pc, #152]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c1ba:	4a27      	ldr	r2, [pc, #156]	@ (800c258 <MX_SPI5_Init+0xa4>)
 800c1bc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800c1be:	4b25      	ldr	r3, [pc, #148]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c1c0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800c1c4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800c1c6:	4b23      	ldr	r3, [pc, #140]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800c1cc:	4b21      	ldr	r3, [pc, #132]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c1ce:	2207      	movs	r2, #7
 800c1d0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c1d2:	4b20      	ldr	r3, [pc, #128]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c1d8:	4b1e      	ldr	r3, [pc, #120]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800c1de:	4b1d      	ldr	r3, [pc, #116]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c1e0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800c1e4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c1e6:	4b1b      	ldr	r3, [pc, #108]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c1ec:	4b19      	ldr	r3, [pc, #100]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800c1f2:	4b18      	ldr	r3, [pc, #96]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1f8:	4b16      	ldr	r3, [pc, #88]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800c1fe:	4b15      	ldr	r3, [pc, #84]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c200:	2200      	movs	r2, #0
 800c202:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800c204:	4b13      	ldr	r3, [pc, #76]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c206:	2200      	movs	r2, #0
 800c208:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800c20a:	4b12      	ldr	r3, [pc, #72]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c20c:	2200      	movs	r2, #0
 800c20e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800c210:	4b10      	ldr	r3, [pc, #64]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c212:	2200      	movs	r2, #0
 800c214:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c216:	4b0f      	ldr	r3, [pc, #60]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c218:	2200      	movs	r2, #0
 800c21a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c21c:	4b0d      	ldr	r3, [pc, #52]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c21e:	2200      	movs	r2, #0
 800c220:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800c222:	4b0c      	ldr	r3, [pc, #48]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c224:	2200      	movs	r2, #0
 800c226:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800c228:	4b0a      	ldr	r3, [pc, #40]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c22a:	2200      	movs	r2, #0
 800c22c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800c22e:	4b09      	ldr	r3, [pc, #36]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c230:	2200      	movs	r2, #0
 800c232:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800c234:	4b07      	ldr	r3, [pc, #28]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c236:	2200      	movs	r2, #0
 800c238:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800c23a:	4b06      	ldr	r3, [pc, #24]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c23c:	2200      	movs	r2, #0
 800c23e:	659a      	str	r2, [r3, #88]	@ 0x58

  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800c240:	4804      	ldr	r0, [pc, #16]	@ (800c254 <MX_SPI5_Init+0xa0>)
 800c242:	f7fd fc71 	bl	8009b28 <HAL_SPI_Init>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d001      	beq.n	800c250 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 800c24c:	f7ff fe66 	bl	800bf1c <Error_Handler>
  }


}
 800c250:	bf00      	nop
 800c252:	bd80      	pop	{r7, pc}
 800c254:	200002dc 	.word	0x200002dc
 800c258:	40015000 	.word	0x40015000

0800c25c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b08c      	sub	sp, #48	@ 0x30
 800c260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c262:	f107 031c 	add.w	r3, r7, #28
 800c266:	2200      	movs	r2, #0
 800c268:	601a      	str	r2, [r3, #0]
 800c26a:	605a      	str	r2, [r3, #4]
 800c26c:	609a      	str	r2, [r3, #8]
 800c26e:	60da      	str	r2, [r3, #12]
 800c270:	611a      	str	r2, [r3, #16]


  // GPIO Ports Clock Enable
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c272:	4b53      	ldr	r3, [pc, #332]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c278:	4a51      	ldr	r2, [pc, #324]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c27a:	f043 0304 	orr.w	r3, r3, #4
 800c27e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c282:	4b4f      	ldr	r3, [pc, #316]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c288:	f003 0304 	and.w	r3, r3, #4
 800c28c:	61bb      	str	r3, [r7, #24]
 800c28e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c290:	4b4b      	ldr	r3, [pc, #300]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c296:	4a4a      	ldr	r2, [pc, #296]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c298:	f043 0308 	orr.w	r3, r3, #8
 800c29c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c2a0:	4b47      	ldr	r3, [pc, #284]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c2a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c2a6:	f003 0308 	and.w	r3, r3, #8
 800c2aa:	617b      	str	r3, [r7, #20]
 800c2ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c2ae:	4b44      	ldr	r3, [pc, #272]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c2b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c2b4:	4a42      	ldr	r2, [pc, #264]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c2b6:	f043 0301 	orr.w	r3, r3, #1
 800c2ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c2be:	4b40      	ldr	r3, [pc, #256]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c2c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c2c4:	f003 0301 	and.w	r3, r3, #1
 800c2c8:	613b      	str	r3, [r7, #16]
 800c2ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800c2cc:	4b3c      	ldr	r3, [pc, #240]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c2ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c2d2:	4a3b      	ldr	r2, [pc, #236]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c2d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c2dc:	4b38      	ldr	r3, [pc, #224]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c2de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c2e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2e6:	60fb      	str	r3, [r7, #12]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c2ea:	4b35      	ldr	r3, [pc, #212]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c2ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c2f0:	4a33      	ldr	r2, [pc, #204]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c2f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c2fa:	4b31      	ldr	r3, [pc, #196]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c2fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c304:	60bb      	str	r3, [r7, #8]
 800c306:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800c308:	4b2d      	ldr	r3, [pc, #180]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c30a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c30e:	4a2c      	ldr	r2, [pc, #176]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c310:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c314:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c318:	4b29      	ldr	r3, [pc, #164]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c31a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c31e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c322:	607b      	str	r3, [r7, #4]
 800c324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c326:	4b26      	ldr	r3, [pc, #152]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c32c:	4a24      	ldr	r2, [pc, #144]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c32e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c332:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c336:	4b22      	ldr	r3, [pc, #136]	@ (800c3c0 <MX_GPIO_Init+0x164>)
 800c338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c33c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c340:	603b      	str	r3, [r7, #0]
 800c342:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 800c344:	2200      	movs	r2, #0
 800c346:	2102      	movs	r1, #2
 800c348:	481e      	ldr	r0, [pc, #120]	@ (800c3c4 <MX_GPIO_Init+0x168>)
 800c34a:	f7f5 fbef 	bl	8001b2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 800c34e:	2200      	movs	r2, #0
 800c350:	2161      	movs	r1, #97	@ 0x61
 800c352:	481d      	ldr	r0, [pc, #116]	@ (800c3c8 <MX_GPIO_Init+0x16c>)
 800c354:	f7f5 fbea 	bl	8001b2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, BUTTON_MINUS_Pin|BUTTON_PLUS_Pin|BUTTON_SETTING_Pin, GPIO_PIN_SET);
 800c358:	2201      	movs	r2, #1
 800c35a:	2189      	movs	r1, #137	@ 0x89
 800c35c:	481a      	ldr	r0, [pc, #104]	@ (800c3c8 <MX_GPIO_Init+0x16c>)
 800c35e:	f7f5 fbe5 	bl	8001b2c <HAL_GPIO_WritePin>

  // Configure GPIO pin - GC9A01_CS_Pin
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 800c362:	2302      	movs	r3, #2
 800c364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c366:	2301      	movs	r3, #1
 800c368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c36a:	2300      	movs	r3, #0
 800c36c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c36e:	2300      	movs	r3, #0
 800c370:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 800c372:	f107 031c 	add.w	r3, r7, #28
 800c376:	4619      	mov	r1, r3
 800c378:	4812      	ldr	r0, [pc, #72]	@ (800c3c4 <MX_GPIO_Init+0x168>)
 800c37a:	f7f5 fa0f 	bl	800179c <HAL_GPIO_Init>

  // Configure GPIO pins - GC9A01_BL_Pin ; GC9A01_DC_Pin ; GC9A01_RST_Pin
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 800c37e:	2361      	movs	r3, #97	@ 0x61
 800c380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c382:	2301      	movs	r3, #1
 800c384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c386:	2300      	movs	r3, #0
 800c388:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c38a:	2300      	movs	r3, #0
 800c38c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c38e:	f107 031c 	add.w	r3, r7, #28
 800c392:	4619      	mov	r1, r3
 800c394:	480c      	ldr	r0, [pc, #48]	@ (800c3c8 <MX_GPIO_Init+0x16c>)
 800c396:	f7f5 fa01 	bl	800179c <HAL_GPIO_Init>

  // Configure GPIO pins - BUTTON_MINUS_Pin ; BUTTON_PLUS_Pin ; BUTTON_SETTING_Pin
  GPIO_InitStruct.Pin =  BUTTON_MINUS_Pin|BUTTON_PLUS_Pin|BUTTON_SETTING_Pin;
 800c39a:	2389      	movs	r3, #137	@ 0x89
 800c39c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800c39e:	2311      	movs	r3, #17
 800c3a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c3aa:	f107 031c 	add.w	r3, r7, #28
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	4805      	ldr	r0, [pc, #20]	@ (800c3c8 <MX_GPIO_Init+0x16c>)
 800c3b2:	f7f5 f9f3 	bl	800179c <HAL_GPIO_Init>

}
 800c3b6:	bf00      	nop
 800c3b8:	3730      	adds	r7, #48	@ 0x30
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	58024400 	.word	0x58024400
 800c3c4:	58022800 	.word	0x58022800
 800c3c8:	58022400 	.word	0x58022400

0800c3cc <MX_RTC_Init>:


static void MX_RTC_Init(void)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0

  RTC_TimeTypeDef sTime = {0};
 800c3d2:	1d3b      	adds	r3, r7, #4
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	601a      	str	r2, [r3, #0]
 800c3d8:	605a      	str	r2, [r3, #4]
 800c3da:	609a      	str	r2, [r3, #8]
 800c3dc:	60da      	str	r2, [r3, #12]
 800c3de:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	603b      	str	r3, [r7, #0]


  hrtc.Instance = RTC;
 800c3e4:	4b25      	ldr	r3, [pc, #148]	@ (800c47c <MX_RTC_Init+0xb0>)
 800c3e6:	4a26      	ldr	r2, [pc, #152]	@ (800c480 <MX_RTC_Init+0xb4>)
 800c3e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800c3ea:	4b24      	ldr	r3, [pc, #144]	@ (800c47c <MX_RTC_Init+0xb0>)
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800c3f0:	4b22      	ldr	r3, [pc, #136]	@ (800c47c <MX_RTC_Init+0xb0>)
 800c3f2:	227f      	movs	r2, #127	@ 0x7f
 800c3f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800c3f6:	4b21      	ldr	r3, [pc, #132]	@ (800c47c <MX_RTC_Init+0xb0>)
 800c3f8:	22ff      	movs	r2, #255	@ 0xff
 800c3fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800c3fc:	4b1f      	ldr	r3, [pc, #124]	@ (800c47c <MX_RTC_Init+0xb0>)
 800c3fe:	2200      	movs	r2, #0
 800c400:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800c402:	4b1e      	ldr	r3, [pc, #120]	@ (800c47c <MX_RTC_Init+0xb0>)
 800c404:	2200      	movs	r2, #0
 800c406:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800c408:	4b1c      	ldr	r3, [pc, #112]	@ (800c47c <MX_RTC_Init+0xb0>)
 800c40a:	2200      	movs	r2, #0
 800c40c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800c40e:	4b1b      	ldr	r3, [pc, #108]	@ (800c47c <MX_RTC_Init+0xb0>)
 800c410:	2200      	movs	r2, #0
 800c412:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800c414:	4819      	ldr	r0, [pc, #100]	@ (800c47c <MX_RTC_Init+0xb0>)
 800c416:	f7fb fb3f 	bl	8007a98 <HAL_RTC_Init>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d001      	beq.n	800c424 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800c420:	f7ff fd7c 	bl	800bf1c <Error_Handler>
  }


  sTime.Hours = 0;
 800c424:	2300      	movs	r3, #0
 800c426:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800c428:	2300      	movs	r3, #0
 800c42a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800c42c:	2300      	movs	r3, #0
 800c42e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800c430:	2300      	movs	r3, #0
 800c432:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800c434:	2300      	movs	r3, #0
 800c436:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800c438:	1d3b      	adds	r3, r7, #4
 800c43a:	2200      	movs	r2, #0
 800c43c:	4619      	mov	r1, r3
 800c43e:	480f      	ldr	r0, [pc, #60]	@ (800c47c <MX_RTC_Init+0xb0>)
 800c440:	f7fb fbac 	bl	8007b9c <HAL_RTC_SetTime>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d001      	beq.n	800c44e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800c44a:	f7ff fd67 	bl	800bf1c <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800c44e:	2301      	movs	r3, #1
 800c450:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800c452:	2301      	movs	r3, #1
 800c454:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800c456:	2301      	movs	r3, #1
 800c458:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800c45e:	463b      	mov	r3, r7
 800c460:	2200      	movs	r2, #0
 800c462:	4619      	mov	r1, r3
 800c464:	4805      	ldr	r0, [pc, #20]	@ (800c47c <MX_RTC_Init+0xb0>)
 800c466:	f7fb fc37 	bl	8007cd8 <HAL_RTC_SetDate>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d001      	beq.n	800c474 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800c470:	f7ff fd54 	bl	800bf1c <Error_Handler>
  }

}
 800c474:	bf00      	nop
 800c476:	3718      	adds	r7, #24
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	200002b8 	.word	0x200002b8
 800c480:	58004000 	.word	0x58004000

0800c484 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	4603      	mov	r3, r0
 800c48c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c48e:	4b0c      	ldr	r3, [pc, #48]	@ (800c4c0 <SD_CheckStatus+0x3c>)
 800c490:	2201      	movs	r2, #1
 800c492:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState(0) == BSP_ERROR_NONE)
 800c494:	2000      	movs	r0, #0
 800c496:	f7f4 f953 	bl	8000740 <BSP_SD_GetCardState>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d107      	bne.n	800c4b0 <SD_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 800c4a0:	4b07      	ldr	r3, [pc, #28]	@ (800c4c0 <SD_CheckStatus+0x3c>)
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	f023 0301 	bic.w	r3, r3, #1
 800c4aa:	b2da      	uxtb	r2, r3
 800c4ac:	4b04      	ldr	r3, [pc, #16]	@ (800c4c0 <SD_CheckStatus+0x3c>)
 800c4ae:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800c4b0:	4b03      	ldr	r3, [pc, #12]	@ (800c4c0 <SD_CheckStatus+0x3c>)
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	b2db      	uxtb	r3, r3
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	2000000d 	.word	0x2000000d

0800c4c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c4ce:	79fb      	ldrb	r3, [r7, #7]
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7ff ffd7 	bl	800c484 <SD_CheckStatus>
 800c4d6:	4603      	mov	r3, r0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3708      	adds	r7, #8
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c4ea:	79fb      	ldrb	r3, [r7, #7]
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7ff ffc9 	bl	800c484 <SD_CheckStatus>
 800c4f2:	4603      	mov	r3, r0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3708      	adds	r7, #8
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b086      	sub	sp, #24
 800c500:	af00      	add	r7, sp, #0
 800c502:	60b9      	str	r1, [r7, #8]
 800c504:	607a      	str	r2, [r7, #4]
 800c506:	603b      	str	r3, [r7, #0]
 800c508:	4603      	mov	r3, r0
 800c50a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c50c:	2301      	movs	r3, #1
 800c50e:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_ReadBlocks(0,(uint32_t*)buff, 
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	68b9      	ldr	r1, [r7, #8]
 800c516:	2000      	movs	r0, #0
 800c518:	f7f4 f8b2 	bl	8000680 <BSP_SD_ReadBlocks>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d108      	bne.n	800c534 <SD_read+0x38>
                       (uint32_t) (sector), 
                       count) == BSP_ERROR_NONE)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState(0)!= BSP_ERROR_NONE)
 800c522:	bf00      	nop
 800c524:	2000      	movs	r0, #0
 800c526:	f7f4 f90b 	bl	8000740 <BSP_SD_GetCardState>
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d1f9      	bne.n	800c524 <SD_read+0x28>
    {
    }
    res = RES_OK;
 800c530:	2300      	movs	r3, #0
 800c532:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c534:	7dfb      	ldrb	r3, [r7, #23]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3718      	adds	r7, #24
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b086      	sub	sp, #24
 800c542:	af00      	add	r7, sp, #0
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
 800c548:	603b      	str	r3, [r7, #0]
 800c54a:	4603      	mov	r3, r0
 800c54c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c54e:	2301      	movs	r3, #1
 800c550:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_WriteBlocks(0,(uint32_t*)buff, 
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	68b9      	ldr	r1, [r7, #8]
 800c558:	2000      	movs	r0, #0
 800c55a:	f7f4 f8c1 	bl	80006e0 <BSP_SD_WriteBlocks>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d108      	bne.n	800c576 <SD_write+0x38>
                        (uint32_t)(sector), 
                        count) == BSP_ERROR_NONE)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState(0) != BSP_ERROR_NONE)
 800c564:	bf00      	nop
 800c566:	2000      	movs	r0, #0
 800c568:	f7f4 f8ea 	bl	8000740 <BSP_SD_GetCardState>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1f9      	bne.n	800c566 <SD_write+0x28>
    {
    }    
    res = RES_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c576:	7dfb      	ldrb	r3, [r7, #23]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3718      	adds	r7, #24
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08c      	sub	sp, #48	@ 0x30
 800c584:	af00      	add	r7, sp, #0
 800c586:	4603      	mov	r3, r0
 800c588:	603a      	str	r2, [r7, #0]
 800c58a:	71fb      	strb	r3, [r7, #7]
 800c58c:	460b      	mov	r3, r1
 800c58e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c596:	4b26      	ldr	r3, [pc, #152]	@ (800c630 <SD_ioctl+0xb0>)
 800c598:	781b      	ldrb	r3, [r3, #0]
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	f003 0301 	and.w	r3, r3, #1
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d001      	beq.n	800c5a8 <SD_ioctl+0x28>
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	e03e      	b.n	800c626 <SD_ioctl+0xa6>
  
  switch (cmd)
 800c5a8:	79bb      	ldrb	r3, [r7, #6]
 800c5aa:	2b03      	cmp	r3, #3
 800c5ac:	d836      	bhi.n	800c61c <SD_ioctl+0x9c>
 800c5ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c5b4 <SD_ioctl+0x34>)
 800c5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b4:	0800c5c5 	.word	0x0800c5c5
 800c5b8:	0800c5cd 	.word	0x0800c5cd
 800c5bc:	0800c5e7 	.word	0x0800c5e7
 800c5c0:	0800c603 	.word	0x0800c603
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c5ca:	e02a      	b.n	800c622 <SD_ioctl+0xa2>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800c5cc:	f107 0308 	add.w	r3, r7, #8
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	2000      	movs	r0, #0
 800c5d4:	f7f4 f8ce 	bl	8000774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c5d8:	6a3a      	ldr	r2, [r7, #32]
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c5e4:	e01d      	b.n	800c622 <SD_ioctl+0xa2>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800c5e6:	f107 0308 	add.w	r3, r7, #8
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	f7f4 f8c1 	bl	8000774 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c600:	e00f      	b.n	800c622 <SD_ioctl+0xa2>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800c602:	f107 0308 	add.w	r3, r7, #8
 800c606:	4619      	mov	r1, r3
 800c608:	2000      	movs	r0, #0
 800c60a:	f7f4 f8b3 	bl	8000774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800c60e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	601a      	str	r2, [r3, #0]
  res = RES_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c61a:	e002      	b.n	800c622 <SD_ioctl+0xa2>
  
  default:
    res = RES_PARERR;
 800c61c:	2304      	movs	r3, #4
 800c61e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 800c622:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c626:	4618      	mov	r0, r3
 800c628:	3730      	adds	r7, #48	@ 0x30
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	2000000d 	.word	0x2000000d

0800c634 <smart_watch_init>:

video_t video;													// Video data structure


void smart_watch_init(void)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	af00      	add	r7, sp, #0

	file_name[0] = "video_000.avi";
 800c638:	4b35      	ldr	r3, [pc, #212]	@ (800c710 <smart_watch_init+0xdc>)
 800c63a:	4a36      	ldr	r2, [pc, #216]	@ (800c714 <smart_watch_init+0xe0>)
 800c63c:	601a      	str	r2, [r3, #0]
	file_name[1] = "video_001.avi";
 800c63e:	4b34      	ldr	r3, [pc, #208]	@ (800c710 <smart_watch_init+0xdc>)
 800c640:	4a35      	ldr	r2, [pc, #212]	@ (800c718 <smart_watch_init+0xe4>)
 800c642:	605a      	str	r2, [r3, #4]
	file_name[2] = "video_002.avi";
 800c644:	4b32      	ldr	r3, [pc, #200]	@ (800c710 <smart_watch_init+0xdc>)
 800c646:	4a35      	ldr	r2, [pc, #212]	@ (800c71c <smart_watch_init+0xe8>)
 800c648:	609a      	str	r2, [r3, #8]
	file_name[3] = "video_003.avi";
 800c64a:	4b31      	ldr	r3, [pc, #196]	@ (800c710 <smart_watch_init+0xdc>)
 800c64c:	4a34      	ldr	r2, [pc, #208]	@ (800c720 <smart_watch_init+0xec>)
 800c64e:	60da      	str	r2, [r3, #12]
	file_name[4] = "video_004.avi";
 800c650:	4b2f      	ldr	r3, [pc, #188]	@ (800c710 <smart_watch_init+0xdc>)
 800c652:	4a34      	ldr	r2, [pc, #208]	@ (800c724 <smart_watch_init+0xf0>)
 800c654:	611a      	str	r2, [r3, #16]
	file_name[5] = "video_005.avi";
 800c656:	4b2e      	ldr	r3, [pc, #184]	@ (800c710 <smart_watch_init+0xdc>)
 800c658:	4a33      	ldr	r2, [pc, #204]	@ (800c728 <smart_watch_init+0xf4>)
 800c65a:	615a      	str	r2, [r3, #20]
	file_name[6] = "video_006.avi";
 800c65c:	4b2c      	ldr	r3, [pc, #176]	@ (800c710 <smart_watch_init+0xdc>)
 800c65e:	4a33      	ldr	r2, [pc, #204]	@ (800c72c <smart_watch_init+0xf8>)
 800c660:	619a      	str	r2, [r3, #24]
	file_name[7] = "video_007.avi";
 800c662:	4b2b      	ldr	r3, [pc, #172]	@ (800c710 <smart_watch_init+0xdc>)
 800c664:	4a32      	ldr	r2, [pc, #200]	@ (800c730 <smart_watch_init+0xfc>)
 800c666:	61da      	str	r2, [r3, #28]
	file_name[8] = "video_008.avi";
 800c668:	4b29      	ldr	r3, [pc, #164]	@ (800c710 <smart_watch_init+0xdc>)
 800c66a:	4a32      	ldr	r2, [pc, #200]	@ (800c734 <smart_watch_init+0x100>)
 800c66c:	621a      	str	r2, [r3, #32]
	file_name[9] = "video_009.avi";
 800c66e:	4b28      	ldr	r3, [pc, #160]	@ (800c710 <smart_watch_init+0xdc>)
 800c670:	4a31      	ldr	r2, [pc, #196]	@ (800c738 <smart_watch_init+0x104>)
 800c672:	625a      	str	r2, [r3, #36]	@ 0x24
	file_name[10] = "video_010.avi";
 800c674:	4b26      	ldr	r3, [pc, #152]	@ (800c710 <smart_watch_init+0xdc>)
 800c676:	4a31      	ldr	r2, [pc, #196]	@ (800c73c <smart_watch_init+0x108>)
 800c678:	629a      	str	r2, [r3, #40]	@ 0x28
	file_name[11] = "video_011.avi";
 800c67a:	4b25      	ldr	r3, [pc, #148]	@ (800c710 <smart_watch_init+0xdc>)
 800c67c:	4a30      	ldr	r2, [pc, #192]	@ (800c740 <smart_watch_init+0x10c>)
 800c67e:	62da      	str	r2, [r3, #44]	@ 0x2c
	file_name[12] = "video_012.avi";
 800c680:	4b23      	ldr	r3, [pc, #140]	@ (800c710 <smart_watch_init+0xdc>)
 800c682:	4a30      	ldr	r2, [pc, #192]	@ (800c744 <smart_watch_init+0x110>)
 800c684:	631a      	str	r2, [r3, #48]	@ 0x30
	file_name[13] = "video_013.avi";
 800c686:	4b22      	ldr	r3, [pc, #136]	@ (800c710 <smart_watch_init+0xdc>)
 800c688:	4a2f      	ldr	r2, [pc, #188]	@ (800c748 <smart_watch_init+0x114>)
 800c68a:	635a      	str	r2, [r3, #52]	@ 0x34
	file_name[14] = "video_014.avi";
 800c68c:	4b20      	ldr	r3, [pc, #128]	@ (800c710 <smart_watch_init+0xdc>)
 800c68e:	4a2f      	ldr	r2, [pc, #188]	@ (800c74c <smart_watch_init+0x118>)
 800c690:	639a      	str	r2, [r3, #56]	@ 0x38
	file_name[15] = "video_015.avi";
 800c692:	4b1f      	ldr	r3, [pc, #124]	@ (800c710 <smart_watch_init+0xdc>)
 800c694:	4a2e      	ldr	r2, [pc, #184]	@ (800c750 <smart_watch_init+0x11c>)
 800c696:	63da      	str	r2, [r3, #60]	@ 0x3c
	file_name[16] = "video_016.avi";
 800c698:	4b1d      	ldr	r3, [pc, #116]	@ (800c710 <smart_watch_init+0xdc>)
 800c69a:	4a2e      	ldr	r2, [pc, #184]	@ (800c754 <smart_watch_init+0x120>)
 800c69c:	641a      	str	r2, [r3, #64]	@ 0x40
	file_name[17] = "video_017.avi";
 800c69e:	4b1c      	ldr	r3, [pc, #112]	@ (800c710 <smart_watch_init+0xdc>)
 800c6a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c758 <smart_watch_init+0x124>)
 800c6a2:	645a      	str	r2, [r3, #68]	@ 0x44
	file_name[18] = "video_018.avi";
 800c6a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c710 <smart_watch_init+0xdc>)
 800c6a6:	4a2d      	ldr	r2, [pc, #180]	@ (800c75c <smart_watch_init+0x128>)
 800c6a8:	649a      	str	r2, [r3, #72]	@ 0x48
	file_name[19] = "video_019.avi";
 800c6aa:	4b19      	ldr	r3, [pc, #100]	@ (800c710 <smart_watch_init+0xdc>)
 800c6ac:	4a2c      	ldr	r2, [pc, #176]	@ (800c760 <smart_watch_init+0x12c>)
 800c6ae:	64da      	str	r2, [r3, #76]	@ 0x4c
	file_name[20] = "video_020.avi";
 800c6b0:	4b17      	ldr	r3, [pc, #92]	@ (800c710 <smart_watch_init+0xdc>)
 800c6b2:	4a2c      	ldr	r2, [pc, #176]	@ (800c764 <smart_watch_init+0x130>)
 800c6b4:	651a      	str	r2, [r3, #80]	@ 0x50
	file_name[21] = "video_021.avi";
 800c6b6:	4b16      	ldr	r3, [pc, #88]	@ (800c710 <smart_watch_init+0xdc>)
 800c6b8:	4a2b      	ldr	r2, [pc, #172]	@ (800c768 <smart_watch_init+0x134>)
 800c6ba:	655a      	str	r2, [r3, #84]	@ 0x54
	file_name[22] = "video_022.avi";
 800c6bc:	4b14      	ldr	r3, [pc, #80]	@ (800c710 <smart_watch_init+0xdc>)
 800c6be:	4a2b      	ldr	r2, [pc, #172]	@ (800c76c <smart_watch_init+0x138>)
 800c6c0:	659a      	str	r2, [r3, #88]	@ 0x58
	file_name[23] = "video_023.avi";
 800c6c2:	4b13      	ldr	r3, [pc, #76]	@ (800c710 <smart_watch_init+0xdc>)
 800c6c4:	4a2a      	ldr	r2, [pc, #168]	@ (800c770 <smart_watch_init+0x13c>)
 800c6c6:	65da      	str	r2, [r3, #92]	@ 0x5c


	parameters_reset();
 800c6c8:	f000 fbfc 	bl	800cec4 <parameters_reset>

	video.video_mode = SETTING_MODE;				// First time setting
 800c6cc:	4b29      	ldr	r3, [pc, #164]	@ (800c774 <smart_watch_init+0x140>)
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	// SD card initialization
	// Link the micro SD disk I/O driver
	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800c6d4:	4928      	ldr	r1, [pc, #160]	@ (800c778 <smart_watch_init+0x144>)
 800c6d6:	4829      	ldr	r0, [pc, #164]	@ (800c77c <smart_watch_init+0x148>)
 800c6d8:	f003 ff7c 	bl	80105d4 <FATFS_LinkDriver>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d112      	bne.n	800c708 <smart_watch_init+0xd4>
	{

		// Init the SD Card
	    SD_Initialize();
 800c6e2:	f000 fdb3 	bl	800d24c <SD_Initialize>

	    if(BSP_SD_IsDetected(0))
 800c6e6:	2000      	movs	r0, #0
 800c6e8:	f7f3 ffa6 	bl	8000638 <BSP_SD_IsDetected>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d009      	beq.n	800c706 <smart_watch_init+0xd2>
	    {

	      // Register the file system object to the FatFs module
	      if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	4920      	ldr	r1, [pc, #128]	@ (800c778 <smart_watch_init+0x144>)
 800c6f6:	4822      	ldr	r0, [pc, #136]	@ (800c780 <smart_watch_init+0x14c>)
 800c6f8:	f003 f920 	bl	800f93c <f_mount>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d003      	beq.n	800c70a <smart_watch_init+0xd6>
	      {

	    	  while(1);
 800c702:	bf00      	nop
 800c704:	e7fd      	b.n	800c702 <smart_watch_init+0xce>

	    }
	    else
  		{

  			while(1);
 800c706:	e7fe      	b.n	800c706 <smart_watch_init+0xd2>

  	}
	else
	{

		while(1);
 800c708:	e7fe      	b.n	800c708 <smart_watch_init+0xd4>

	}

}
 800c70a:	bf00      	nop
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	20000364 	.word	0x20000364
 800c714:	08010a84 	.word	0x08010a84
 800c718:	08010a94 	.word	0x08010a94
 800c71c:	08010aa4 	.word	0x08010aa4
 800c720:	08010ab4 	.word	0x08010ab4
 800c724:	08010ac4 	.word	0x08010ac4
 800c728:	08010ad4 	.word	0x08010ad4
 800c72c:	08010ae4 	.word	0x08010ae4
 800c730:	08010af4 	.word	0x08010af4
 800c734:	08010b04 	.word	0x08010b04
 800c738:	08010b14 	.word	0x08010b14
 800c73c:	08010b24 	.word	0x08010b24
 800c740:	08010b34 	.word	0x08010b34
 800c744:	08010b44 	.word	0x08010b44
 800c748:	08010b54 	.word	0x08010b54
 800c74c:	08010b64 	.word	0x08010b64
 800c750:	08010b74 	.word	0x08010b74
 800c754:	08010b84 	.word	0x08010b84
 800c758:	08010b94 	.word	0x08010b94
 800c75c:	08010ba4 	.word	0x08010ba4
 800c760:	08010bb4 	.word	0x08010bb4
 800c764:	08010bc4 	.word	0x08010bc4
 800c768:	08010bd4 	.word	0x08010bd4
 800c76c:	08010be4 	.word	0x08010be4
 800c770:	08010bf4 	.word	0x08010bf4
 800c774:	20018878 	.word	0x20018878
 800c778:	200185fc 	.word	0x200185fc
 800c77c:	08010ebc 	.word	0x08010ebc
 800c780:	200183c8 	.word	0x200183c8

0800c784 <smart_watch_process>:


void smart_watch_process(void)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	af00      	add	r7, sp, #0

	while(1)
	{

		// Check if new file needs to be open
		file_handler(0);
 800c788:	2000      	movs	r0, #0
 800c78a:	f000 fae9 	bl	800cd60 <file_handler>

		// Video processing unit
		mjpeg_video_processing();
 800c78e:	f000 f805 	bl	800c79c <mjpeg_video_processing>

		// Check for user buttons pressed
		user_buttons_handler();
 800c792:	f000 fb5f 	bl	800ce54 <user_buttons_handler>
		file_handler(0);
 800c796:	bf00      	nop
 800c798:	e7f6      	b.n	800c788 <smart_watch_process+0x4>
	...

0800c79c <mjpeg_video_processing>:

////////////////////////////////////////////////////// PRIVATE FUNCTIONS


static void mjpeg_video_processing(void)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	af00      	add	r7, sp, #0

	switch(video.video_mode)
 800c7a0:	4b06      	ldr	r3, [pc, #24]	@ (800c7bc <mjpeg_video_processing+0x20>)
 800c7a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d002      	beq.n	800c7b0 <mjpeg_video_processing+0x14>
	{

		default:
		case SETTING_MODE:

			clock_setting();
 800c7aa:	f000 f809 	bl	800c7c0 <clock_setting>

			break;
 800c7ae:	e002      	b.n	800c7b6 <mjpeg_video_processing+0x1a>

		case NORMAL_MODE:

			clock_normal();
 800c7b0:	f000 f8fa 	bl	800c9a8 <clock_normal>

			break;
 800c7b4:	bf00      	nop

	}

}
 800c7b6:	bf00      	nop
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	20018878 	.word	0x20018878

0800c7c0 <clock_setting>:


static void clock_setting(void)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	af00      	add	r7, sp, #0

	static uint8_t minutes_count = 0;


	switch(video.set)
 800c7c4:	4b73      	ldr	r3, [pc, #460]	@ (800c994 <clock_setting+0x1d4>)
 800c7c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c7ca:	2b03      	cmp	r3, #3
 800c7cc:	f000 80d4 	beq.w	800c978 <clock_setting+0x1b8>
 800c7d0:	2b03      	cmp	r3, #3
 800c7d2:	dc03      	bgt.n	800c7dc <clock_setting+0x1c>
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d010      	beq.n	800c7fa <clock_setting+0x3a>
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	d06a      	beq.n	800c8b2 <clock_setting+0xf2>
	{

		default:
		case SET_IDLE:

			while(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin));
 800c7dc:	bf00      	nop
 800c7de:	2108      	movs	r1, #8
 800c7e0:	486d      	ldr	r0, [pc, #436]	@ (800c998 <clock_setting+0x1d8>)
 800c7e2:	f7f5 f98b 	bl	8001afc <HAL_GPIO_ReadPin>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d0f8      	beq.n	800c7de <clock_setting+0x1e>

			parameters_reset();
 800c7ec:	f000 fb6a 	bl	800cec4 <parameters_reset>

			video.set = SET_HOURS;
 800c7f0:	4b68      	ldr	r3, [pc, #416]	@ (800c994 <clock_setting+0x1d4>)
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

			break;
 800c7f8:	e0ca      	b.n	800c990 <clock_setting+0x1d0>

		case SET_HOURS:

			show_frame(0);
 800c7fa:	2000      	movs	r0, #0
 800c7fc:	f000 f9e8 	bl	800cbd0 <show_frame>

			// If button plus
			if(!HAL_GPIO_ReadPin(BUTTON_PLUS_GPIO_Port, BUTTON_PLUS_Pin))
 800c800:	2180      	movs	r1, #128	@ 0x80
 800c802:	4865      	ldr	r0, [pc, #404]	@ (800c998 <clock_setting+0x1d8>)
 800c804:	f7f5 f97a 	bl	8001afc <HAL_GPIO_ReadPin>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d127      	bne.n	800c85e <clock_setting+0x9e>
			{

				HAL_Delay(200);
 800c80e:	20c8      	movs	r0, #200	@ 0xc8
 800c810:	f7f4 fb30 	bl	8000e74 <HAL_Delay>

				if(video.file_idx % 2)
 800c814:	4b5f      	ldr	r3, [pc, #380]	@ (800c994 <clock_setting+0x1d4>)
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	f003 0301 	and.w	r3, r3, #1
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d006      	beq.n	800c830 <clock_setting+0x70>
					video.file_idx += 1;
 800c822:	4b5c      	ldr	r3, [pc, #368]	@ (800c994 <clock_setting+0x1d4>)
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	3301      	adds	r3, #1
 800c828:	b2da      	uxtb	r2, r3
 800c82a:	4b5a      	ldr	r3, [pc, #360]	@ (800c994 <clock_setting+0x1d4>)
 800c82c:	701a      	strb	r2, [r3, #0]
 800c82e:	e005      	b.n	800c83c <clock_setting+0x7c>
				else
					video.file_idx += 2;
 800c830:	4b58      	ldr	r3, [pc, #352]	@ (800c994 <clock_setting+0x1d4>)
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	3302      	adds	r3, #2
 800c836:	b2da      	uxtb	r2, r3
 800c838:	4b56      	ldr	r3, [pc, #344]	@ (800c994 <clock_setting+0x1d4>)
 800c83a:	701a      	strb	r2, [r3, #0]

				video.file_idx %= 24;
 800c83c:	4b55      	ldr	r3, [pc, #340]	@ (800c994 <clock_setting+0x1d4>)
 800c83e:	781a      	ldrb	r2, [r3, #0]
 800c840:	4b56      	ldr	r3, [pc, #344]	@ (800c99c <clock_setting+0x1dc>)
 800c842:	fba3 1302 	umull	r1, r3, r3, r2
 800c846:	0919      	lsrs	r1, r3, #4
 800c848:	460b      	mov	r3, r1
 800c84a:	005b      	lsls	r3, r3, #1
 800c84c:	440b      	add	r3, r1
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	1ad3      	subs	r3, r2, r3
 800c852:	b2da      	uxtb	r2, r3
 800c854:	4b4f      	ldr	r3, [pc, #316]	@ (800c994 <clock_setting+0x1d4>)
 800c856:	701a      	strb	r2, [r3, #0]

				file_handler(1);
 800c858:	2001      	movs	r0, #1
 800c85a:	f000 fa81 	bl	800cd60 <file_handler>

			}

			// If button minus
			if(!HAL_GPIO_ReadPin(BUTTON_MINUS_GPIO_Port, BUTTON_MINUS_Pin))
 800c85e:	2101      	movs	r1, #1
 800c860:	484d      	ldr	r0, [pc, #308]	@ (800c998 <clock_setting+0x1d8>)
 800c862:	f7f5 f94b 	bl	8001afc <HAL_GPIO_ReadPin>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d113      	bne.n	800c894 <clock_setting+0xd4>
			{

				HAL_Delay(200);
 800c86c:	20c8      	movs	r0, #200	@ 0xc8
 800c86e:	f7f4 fb01 	bl	8000e74 <HAL_Delay>

				if(video.file_idx >= 2)
 800c872:	4b48      	ldr	r3, [pc, #288]	@ (800c994 <clock_setting+0x1d4>)
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b01      	cmp	r3, #1
 800c878:	d906      	bls.n	800c888 <clock_setting+0xc8>
					video.file_idx -= 2;
 800c87a:	4b46      	ldr	r3, [pc, #280]	@ (800c994 <clock_setting+0x1d4>)
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	3b02      	subs	r3, #2
 800c880:	b2da      	uxtb	r2, r3
 800c882:	4b44      	ldr	r3, [pc, #272]	@ (800c994 <clock_setting+0x1d4>)
 800c884:	701a      	strb	r2, [r3, #0]
 800c886:	e002      	b.n	800c88e <clock_setting+0xce>
				else
					video.file_idx = 22;
 800c888:	4b42      	ldr	r3, [pc, #264]	@ (800c994 <clock_setting+0x1d4>)
 800c88a:	2216      	movs	r2, #22
 800c88c:	701a      	strb	r2, [r3, #0]

				file_handler(1);
 800c88e:	2001      	movs	r0, #1
 800c890:	f000 fa66 	bl	800cd60 <file_handler>

			}

			// If button settings
			if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800c894:	2108      	movs	r1, #8
 800c896:	4840      	ldr	r0, [pc, #256]	@ (800c998 <clock_setting+0x1d8>)
 800c898:	f7f5 f930 	bl	8001afc <HAL_GPIO_ReadPin>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d173      	bne.n	800c98a <clock_setting+0x1ca>
			{

				HAL_Delay(200);
 800c8a2:	20c8      	movs	r0, #200	@ 0xc8
 800c8a4:	f7f4 fae6 	bl	8000e74 <HAL_Delay>

				video.set = SET_MINUTES;
 800c8a8:	4b3a      	ldr	r3, [pc, #232]	@ (800c994 <clock_setting+0x1d4>)
 800c8aa:	2202      	movs	r2, #2
 800c8ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

			}

			break;
 800c8b0:	e06b      	b.n	800c98a <clock_setting+0x1ca>

		case SET_MINUTES:

			show_frame(0);
 800c8b2:	2000      	movs	r0, #0
 800c8b4:	f000 f98c 	bl	800cbd0 <show_frame>

			// If button plus
			if(!HAL_GPIO_ReadPin(BUTTON_PLUS_GPIO_Port, BUTTON_PLUS_Pin))
 800c8b8:	2180      	movs	r1, #128	@ 0x80
 800c8ba:	4837      	ldr	r0, [pc, #220]	@ (800c998 <clock_setting+0x1d8>)
 800c8bc:	f7f5 f91e 	bl	8001afc <HAL_GPIO_ReadPin>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d12b      	bne.n	800c91e <clock_setting+0x15e>
			{

				HAL_Delay(200);
 800c8c6:	20c8      	movs	r0, #200	@ 0xc8
 800c8c8:	f7f4 fad4 	bl	8000e74 <HAL_Delay>

				minutes_count++;
 800c8cc:	4b34      	ldr	r3, [pc, #208]	@ (800c9a0 <clock_setting+0x1e0>)
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	b2da      	uxtb	r2, r3
 800c8d4:	4b32      	ldr	r3, [pc, #200]	@ (800c9a0 <clock_setting+0x1e0>)
 800c8d6:	701a      	strb	r2, [r3, #0]

				if(minutes_count > 29)
 800c8d8:	4b31      	ldr	r3, [pc, #196]	@ (800c9a0 <clock_setting+0x1e0>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b1d      	cmp	r3, #29
 800c8de:	d91a      	bls.n	800c916 <clock_setting+0x156>
				{

					minutes_count = 0;
 800c8e0:	4b2f      	ldr	r3, [pc, #188]	@ (800c9a0 <clock_setting+0x1e0>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	701a      	strb	r2, [r3, #0]

					video.file_idx += 1;
 800c8e6:	4b2b      	ldr	r3, [pc, #172]	@ (800c994 <clock_setting+0x1d4>)
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	b2da      	uxtb	r2, r3
 800c8ee:	4b29      	ldr	r3, [pc, #164]	@ (800c994 <clock_setting+0x1d4>)
 800c8f0:	701a      	strb	r2, [r3, #0]
					video.file_idx %= 24;
 800c8f2:	4b28      	ldr	r3, [pc, #160]	@ (800c994 <clock_setting+0x1d4>)
 800c8f4:	781a      	ldrb	r2, [r3, #0]
 800c8f6:	4b29      	ldr	r3, [pc, #164]	@ (800c99c <clock_setting+0x1dc>)
 800c8f8:	fba3 1302 	umull	r1, r3, r3, r2
 800c8fc:	0919      	lsrs	r1, r3, #4
 800c8fe:	460b      	mov	r3, r1
 800c900:	005b      	lsls	r3, r3, #1
 800c902:	440b      	add	r3, r1
 800c904:	00db      	lsls	r3, r3, #3
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	4b22      	ldr	r3, [pc, #136]	@ (800c994 <clock_setting+0x1d4>)
 800c90c:	701a      	strb	r2, [r3, #0]

					file_handler(1);
 800c90e:	2001      	movs	r0, #1
 800c910:	f000 fa26 	bl	800cd60 <file_handler>
 800c914:	e003      	b.n	800c91e <clock_setting+0x15e>

				}
				else
				{

					show_frame(1800);
 800c916:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 800c91a:	f000 f959 	bl	800cbd0 <show_frame>
				}

			}

			// If button minus
			if(!HAL_GPIO_ReadPin(BUTTON_MINUS_GPIO_Port, BUTTON_MINUS_Pin))
 800c91e:	2101      	movs	r1, #1
 800c920:	481d      	ldr	r0, [pc, #116]	@ (800c998 <clock_setting+0x1d8>)
 800c922:	f7f5 f8eb 	bl	8001afc <HAL_GPIO_ReadPin>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d116      	bne.n	800c95a <clock_setting+0x19a>
			{

				HAL_Delay(200);
 800c92c:	20c8      	movs	r0, #200	@ 0xc8
 800c92e:	f7f4 faa1 	bl	8000e74 <HAL_Delay>


				if(video.file_idx % 2)
 800c932:	4b18      	ldr	r3, [pc, #96]	@ (800c994 <clock_setting+0x1d4>)
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	f003 0301 	and.w	r3, r3, #1
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d003      	beq.n	800c948 <clock_setting+0x188>
					minutes_count = 30;
 800c940:	4b17      	ldr	r3, [pc, #92]	@ (800c9a0 <clock_setting+0x1e0>)
 800c942:	221e      	movs	r2, #30
 800c944:	701a      	strb	r2, [r3, #0]
 800c946:	e002      	b.n	800c94e <clock_setting+0x18e>
				else
					minutes_count = 0;
 800c948:	4b15      	ldr	r3, [pc, #84]	@ (800c9a0 <clock_setting+0x1e0>)
 800c94a:	2200      	movs	r2, #0
 800c94c:	701a      	strb	r2, [r3, #0]

				file_handler(1);
 800c94e:	2001      	movs	r0, #1
 800c950:	f000 fa06 	bl	800cd60 <file_handler>

				show_frame(0);
 800c954:	2000      	movs	r0, #0
 800c956:	f000 f93b 	bl	800cbd0 <show_frame>

			}

			// If button settings
			if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800c95a:	2108      	movs	r1, #8
 800c95c:	480e      	ldr	r0, [pc, #56]	@ (800c998 <clock_setting+0x1d8>)
 800c95e:	f7f5 f8cd 	bl	8001afc <HAL_GPIO_ReadPin>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d112      	bne.n	800c98e <clock_setting+0x1ce>
			{

				HAL_Delay(200);
 800c968:	20c8      	movs	r0, #200	@ 0xc8
 800c96a:	f7f4 fa83 	bl	8000e74 <HAL_Delay>

				video.set = SET_START;
 800c96e:	4b09      	ldr	r3, [pc, #36]	@ (800c994 <clock_setting+0x1d4>)
 800c970:	2203      	movs	r2, #3
 800c972:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

			}


			break;
 800c976:	e00a      	b.n	800c98e <clock_setting+0x1ce>

		case SET_START:

			video.set = SET_IDLE;
 800c978:	4b06      	ldr	r3, [pc, #24]	@ (800c994 <clock_setting+0x1d4>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			video.video_mode = NORMAL_MODE;
 800c980:	4b04      	ldr	r3, [pc, #16]	@ (800c994 <clock_setting+0x1d4>)
 800c982:	2201      	movs	r2, #1
 800c984:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

			break;
 800c988:	e002      	b.n	800c990 <clock_setting+0x1d0>
			break;
 800c98a:	bf00      	nop
 800c98c:	e000      	b.n	800c990 <clock_setting+0x1d0>
			break;
 800c98e:	bf00      	nop

	}

}
 800c990:	bf00      	nop
 800c992:	bd80      	pop	{r7, pc}
 800c994:	20018878 	.word	0x20018878
 800c998:	58022400 	.word	0x58022400
 800c99c:	aaaaaaab 	.word	0xaaaaaaab
 800c9a0:	200188a0 	.word	0x200188a0
 800c9a4:	00000000 	.word	0x00000000

0800c9a8 <clock_normal>:


static void clock_normal(void)
{
 800c9a8:	b590      	push	{r4, r7, lr}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af02      	add	r7, sp, #8

	// Save the frame into MJPEG_VideoBuffer
	video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	497d      	ldr	r1, [pc, #500]	@ (800cba8 <clock_normal+0x200>)
 800c9b2:	487e      	ldr	r0, [pc, #504]	@ (800cbac <clock_normal+0x204>)
 800c9b4:	f7fe fdfe 	bl	800b5b4 <AVI_GetFrame>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	b2da      	uxtb	r2, r3
 800c9bc:	4b7c      	ldr	r3, [pc, #496]	@ (800cbb0 <clock_normal+0x208>)
 800c9be:	709a      	strb	r2, [r3, #2]

	if(video.frameToSkip > 0)
 800c9c0:	4b7b      	ldr	r3, [pc, #492]	@ (800cbb0 <clock_normal+0x208>)
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	dd0a      	ble.n	800c9de <clock_normal+0x36>
	{

		// Skip frames until the the watch time is
		// synchronized with the actual time

		video.frameToSkip--;
 800c9c8:	4b79      	ldr	r3, [pc, #484]	@ (800cbb0 <clock_normal+0x208>)
 800c9ca:	68db      	ldr	r3, [r3, #12]
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	4a78      	ldr	r2, [pc, #480]	@ (800cbb0 <clock_normal+0x208>)
 800c9d0:	60d3      	str	r3, [r2, #12]
		AVI_Handel.CurrentImage++;
 800c9d2:	4b76      	ldr	r3, [pc, #472]	@ (800cbac <clock_normal+0x204>)
 800c9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	4a74      	ldr	r2, [pc, #464]	@ (800cbac <clock_normal+0x204>)
 800c9da:	62d3      	str	r3, [r2, #44]	@ 0x2c
		if(video.frameToSkip < 0)
			video.frameToSkip = 0;

	}

}
 800c9dc:	e0db      	b.n	800cb96 <clock_normal+0x1ee>
	else if(video.FrameType == AVI_VIDEO_FRAME)
 800c9de:	4b74      	ldr	r3, [pc, #464]	@ (800cbb0 <clock_normal+0x208>)
 800c9e0:	789b      	ldrb	r3, [r3, #2]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	f040 80d7 	bne.w	800cb96 <clock_normal+0x1ee>
		AVI_Handel.CurrentImage++;
 800c9e8:	4b70      	ldr	r3, [pc, #448]	@ (800cbac <clock_normal+0x204>)
 800c9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	4a6f      	ldr	r2, [pc, #444]	@ (800cbac <clock_normal+0x204>)
 800c9f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
		JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 800c9f2:	4970      	ldr	r1, [pc, #448]	@ (800cbb4 <clock_normal+0x20c>)
 800c9f4:	4b6d      	ldr	r3, [pc, #436]	@ (800cbac <clock_normal+0x204>)
 800c9f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c9f8:	4b6d      	ldr	r3, [pc, #436]	@ (800cbb0 <clock_normal+0x208>)
 800c9fa:	6a1b      	ldr	r3, [r3, #32]
 800c9fc:	486e      	ldr	r0, [pc, #440]	@ (800cbb8 <clock_normal+0x210>)
 800c9fe:	f7ff f9b5 	bl	800bd6c <JPEG_Decode_DMA>
		while(Jpeg_HWDecodingEnd == 0);
 800ca02:	bf00      	nop
 800ca04:	4b6d      	ldr	r3, [pc, #436]	@ (800cbbc <clock_normal+0x214>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d0fb      	beq.n	800ca04 <clock_normal+0x5c>
		if(video.isfirstFrame == 1)
 800ca0c:	4b68      	ldr	r3, [pc, #416]	@ (800cbb0 <clock_normal+0x208>)
 800ca0e:	785b      	ldrb	r3, [r3, #1]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d144      	bne.n	800ca9e <clock_normal+0xf6>
			video.isfirstFrame = 0;
 800ca14:	4b66      	ldr	r3, [pc, #408]	@ (800cbb0 <clock_normal+0x208>)
 800ca16:	2200      	movs	r2, #0
 800ca18:	705a      	strb	r2, [r3, #1]
			HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800ca1a:	4969      	ldr	r1, [pc, #420]	@ (800cbc0 <clock_normal+0x218>)
 800ca1c:	4866      	ldr	r0, [pc, #408]	@ (800cbb8 <clock_normal+0x210>)
 800ca1e:	f7f5 f921 	bl	8001c64 <HAL_JPEG_GetInfo>
			DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800ca22:	4b67      	ldr	r3, [pc, #412]	@ (800cbc0 <clock_normal+0x218>)
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	4a65      	ldr	r2, [pc, #404]	@ (800cbc0 <clock_normal+0x218>)
 800ca2a:	6892      	ldr	r2, [r2, #8]
 800ca2c:	b291      	uxth	r1, r2
 800ca2e:	4a64      	ldr	r2, [pc, #400]	@ (800cbc0 <clock_normal+0x218>)
 800ca30:	6852      	ldr	r2, [r2, #4]
 800ca32:	4618      	mov	r0, r3
 800ca34:	f000 fb52 	bl	800d0dc <DMA2D_Init>
			video.width = JPEG_Info.ImageWidth;
 800ca38:	4b61      	ldr	r3, [pc, #388]	@ (800cbc0 <clock_normal+0x218>)
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	b29a      	uxth	r2, r3
 800ca3e:	4b5c      	ldr	r3, [pc, #368]	@ (800cbb0 <clock_normal+0x208>)
 800ca40:	809a      	strh	r2, [r3, #4]
			video.height = JPEG_Info.ImageHeight;
 800ca42:	4b5f      	ldr	r3, [pc, #380]	@ (800cbc0 <clock_normal+0x218>)
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	b29a      	uxth	r2, r3
 800ca48:	4b59      	ldr	r3, [pc, #356]	@ (800cbb0 <clock_normal+0x208>)
 800ca4a:	80da      	strh	r2, [r3, #6]
			video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 800ca4c:	4b58      	ldr	r3, [pc, #352]	@ (800cbb0 <clock_normal+0x208>)
 800ca4e:	889b      	ldrh	r3, [r3, #4]
 800ca50:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	da00      	bge.n	800ca5a <clock_normal+0xb2>
 800ca58:	3301      	adds	r3, #1
 800ca5a:	105b      	asrs	r3, r3, #1
 800ca5c:	b29a      	uxth	r2, r3
 800ca5e:	4b54      	ldr	r3, [pc, #336]	@ (800cbb0 <clock_normal+0x208>)
 800ca60:	811a      	strh	r2, [r3, #8]
			video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 800ca62:	4b53      	ldr	r3, [pc, #332]	@ (800cbb0 <clock_normal+0x208>)
 800ca64:	88db      	ldrh	r3, [r3, #6]
 800ca66:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	da00      	bge.n	800ca70 <clock_normal+0xc8>
 800ca6e:	3301      	adds	r3, #1
 800ca70:	105b      	asrs	r3, r3, #1
 800ca72:	b29a      	uxth	r2, r3
 800ca74:	4b4e      	ldr	r3, [pc, #312]	@ (800cbb0 <clock_normal+0x208>)
 800ca76:	815a      	strh	r2, [r3, #10]
			video.frame_time = AVI_Handel.aviInfo.SecPerFrame;
 800ca78:	4b4c      	ldr	r3, [pc, #304]	@ (800cbac <clock_normal+0x204>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	4b4c      	ldr	r3, [pc, #304]	@ (800cbb0 <clock_normal+0x208>)
 800ca80:	821a      	strh	r2, [r3, #16]
			video.tick_offset = HAL_GetTick();
 800ca82:	f7f4 f9eb 	bl	8000e5c <HAL_GetTick>
 800ca86:	4603      	mov	r3, r0
 800ca88:	4a49      	ldr	r2, [pc, #292]	@ (800cbb0 <clock_normal+0x208>)
 800ca8a:	6193      	str	r3, [r2, #24]
			video.watch_offset = ( ( AVI_Handel.CurrentImage - 1 ) * video.frame_time );
 800ca8c:	4b47      	ldr	r3, [pc, #284]	@ (800cbac <clock_normal+0x204>)
 800ca8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca90:	3b01      	subs	r3, #1
 800ca92:	4a47      	ldr	r2, [pc, #284]	@ (800cbb0 <clock_normal+0x208>)
 800ca94:	8a12      	ldrh	r2, [r2, #16]
 800ca96:	fb02 f303 	mul.w	r3, r2, r3
 800ca9a:	4a45      	ldr	r2, [pc, #276]	@ (800cbb0 <clock_normal+0x208>)
 800ca9c:	61d3      	str	r3, [r2, #28]
		DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)LCD_FRAME_BUFFER, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800ca9e:	4b44      	ldr	r3, [pc, #272]	@ (800cbb0 <clock_normal+0x208>)
 800caa0:	6a1b      	ldr	r3, [r3, #32]
 800caa2:	4618      	mov	r0, r3
 800caa4:	4b46      	ldr	r3, [pc, #280]	@ (800cbc0 <clock_normal+0x218>)
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	4b45      	ldr	r3, [pc, #276]	@ (800cbc0 <clock_normal+0x218>)
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	b29b      	uxth	r3, r3
 800cab0:	4944      	ldr	r1, [pc, #272]	@ (800cbc4 <clock_normal+0x21c>)
 800cab2:	f000 fb91 	bl	800d1d8 <DMA2D_CopyBuffer>
		video.jpegOutDataAdreess = (video.jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;
 800cab6:	4b3e      	ldr	r3, [pc, #248]	@ (800cbb0 <clock_normal+0x208>)
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	4a43      	ldr	r2, [pc, #268]	@ (800cbc8 <clock_normal+0x220>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d101      	bne.n	800cac4 <clock_normal+0x11c>
 800cac0:	4b42      	ldr	r3, [pc, #264]	@ (800cbcc <clock_normal+0x224>)
 800cac2:	e000      	b.n	800cac6 <clock_normal+0x11e>
 800cac4:	4b40      	ldr	r3, [pc, #256]	@ (800cbc8 <clock_normal+0x220>)
 800cac6:	4a3a      	ldr	r2, [pc, #232]	@ (800cbb0 <clock_normal+0x208>)
 800cac8:	6213      	str	r3, [r2, #32]
		pOut.u8Arr = (uint8_t *)LCD_FRAME_BUFFER;
 800caca:	4b3e      	ldr	r3, [pc, #248]	@ (800cbc4 <clock_normal+0x21c>)
 800cacc:	603b      	str	r3, [r7, #0]
		depth24To16(&pOut, ( video.width * video.height ), 3);
 800cace:	4b38      	ldr	r3, [pc, #224]	@ (800cbb0 <clock_normal+0x208>)
 800cad0:	889a      	ldrh	r2, [r3, #4]
 800cad2:	4b37      	ldr	r3, [pc, #220]	@ (800cbb0 <clock_normal+0x208>)
 800cad4:	88db      	ldrh	r3, [r3, #6]
 800cad6:	fb12 f303 	smulbb	r3, r2, r3
 800cada:	b299      	uxth	r1, r3
 800cadc:	463b      	mov	r3, r7
 800cade:	2203      	movs	r2, #3
 800cae0:	4618      	mov	r0, r3
 800cae2:	f000 fa1f 	bl	800cf24 <depth24To16>
		lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 800cae6:	4b32      	ldr	r3, [pc, #200]	@ (800cbb0 <clock_normal+0x208>)
 800cae8:	8918      	ldrh	r0, [r3, #8]
 800caea:	4b31      	ldr	r3, [pc, #196]	@ (800cbb0 <clock_normal+0x208>)
 800caec:	8959      	ldrh	r1, [r3, #10]
 800caee:	4b30      	ldr	r3, [pc, #192]	@ (800cbb0 <clock_normal+0x208>)
 800caf0:	889a      	ldrh	r2, [r3, #4]
 800caf2:	4b2f      	ldr	r3, [pc, #188]	@ (800cbb0 <clock_normal+0x208>)
 800caf4:	88dc      	ldrh	r4, [r3, #6]
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	9300      	str	r3, [sp, #0]
 800cafa:	4623      	mov	r3, r4
 800cafc:	f000 fa9c 	bl	800d038 <lcd_draw>
		video.actual_time = ( HAL_GetTick() - video.tick_offset );
 800cb00:	f7f4 f9ac 	bl	8000e5c <HAL_GetTick>
 800cb04:	4602      	mov	r2, r0
 800cb06:	4b2a      	ldr	r3, [pc, #168]	@ (800cbb0 <clock_normal+0x208>)
 800cb08:	699b      	ldr	r3, [r3, #24]
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	4a28      	ldr	r2, [pc, #160]	@ (800cbb0 <clock_normal+0x208>)
 800cb0e:	6153      	str	r3, [r2, #20]
		float watch_time = ( AVI_Handel.CurrentImage * ( video.frame_time / 1000.0 ) - video.watch_offset );
 800cb10:	4b26      	ldr	r3, [pc, #152]	@ (800cbac <clock_normal+0x204>)
 800cb12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb14:	ee07 3a90 	vmov	s15, r3
 800cb18:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800cb1c:	4b24      	ldr	r3, [pc, #144]	@ (800cbb0 <clock_normal+0x208>)
 800cb1e:	8a1b      	ldrh	r3, [r3, #16]
 800cb20:	ee07 3a90 	vmov	s15, r3
 800cb24:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800cb28:	ed9f 4b1d 	vldr	d4, [pc, #116]	@ 800cba0 <clock_normal+0x1f8>
 800cb2c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800cb30:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cb34:	4b1e      	ldr	r3, [pc, #120]	@ (800cbb0 <clock_normal+0x208>)
 800cb36:	69db      	ldr	r3, [r3, #28]
 800cb38:	ee07 3a90 	vmov	s15, r3
 800cb3c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cb40:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cb44:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800cb48:	edc7 7a01 	vstr	s15, [r7, #4]
		video.frameToSkip = ( ( video.actual_time - watch_time ) / ( video.frame_time / 1000.0 ) );
 800cb4c:	4b18      	ldr	r3, [pc, #96]	@ (800cbb0 <clock_normal+0x208>)
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	ee07 3a90 	vmov	s15, r3
 800cb54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cb58:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb60:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800cb64:	4b12      	ldr	r3, [pc, #72]	@ (800cbb0 <clock_normal+0x208>)
 800cb66:	8a1b      	ldrh	r3, [r3, #16]
 800cb68:	ee07 3a90 	vmov	s15, r3
 800cb6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cb70:	ed9f 4b0b 	vldr	d4, [pc, #44]	@ 800cba0 <clock_normal+0x1f8>
 800cb74:	ee87 6b04 	vdiv.f64	d6, d7, d4
 800cb78:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800cb7c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800cb80:	ee17 2a90 	vmov	r2, s15
 800cb84:	4b0a      	ldr	r3, [pc, #40]	@ (800cbb0 <clock_normal+0x208>)
 800cb86:	60da      	str	r2, [r3, #12]
		if(video.frameToSkip < 0)
 800cb88:	4b09      	ldr	r3, [pc, #36]	@ (800cbb0 <clock_normal+0x208>)
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	da02      	bge.n	800cb96 <clock_normal+0x1ee>
			video.frameToSkip = 0;
 800cb90:	4b07      	ldr	r3, [pc, #28]	@ (800cbb0 <clock_normal+0x208>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	60da      	str	r2, [r3, #12]
}
 800cb96:	bf00      	nop
 800cb98:	370c      	adds	r7, #12
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd90      	pop	{r4, r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	00000000 	.word	0x00000000
 800cba4:	408f4000 	.word	0x408f4000
 800cba8:	20018600 	.word	0x20018600
 800cbac:	20018830 	.word	0x20018830
 800cbb0:	20018878 	.word	0x20018878
 800cbb4:	200003c8 	.word	0x200003c8
 800cbb8:	200001e4 	.word	0x200001e4
 800cbbc:	200001d0 	.word	0x200001d0
 800cbc0:	200002a4 	.word	0x200002a4
 800cbc4:	d0a00000 	.word	0xd0a00000
 800cbc8:	d0600000 	.word	0xd0600000
 800cbcc:	d0800000 	.word	0xd0800000

0800cbd0 <show_frame>:


static void show_frame(uint32_t frame_num)
{
 800cbd0:	b590      	push	{r4, r7, lr}
 800cbd2:	b089      	sub	sp, #36	@ 0x24
 800cbd4:	af02      	add	r7, sp, #8
 800cbd6:	6078      	str	r0, [r7, #4]

	for(int i = 0 ; i < frame_num ; i++)
 800cbd8:	2300      	movs	r3, #0
 800cbda:	617b      	str	r3, [r7, #20]
 800cbdc:	e00c      	b.n	800cbf8 <show_frame+0x28>
	{

		AVI_GetFrame(&AVI_Handel, &MJPEG_File, 1);
 800cbde:	2201      	movs	r2, #1
 800cbe0:	4955      	ldr	r1, [pc, #340]	@ (800cd38 <show_frame+0x168>)
 800cbe2:	4856      	ldr	r0, [pc, #344]	@ (800cd3c <show_frame+0x16c>)
 800cbe4:	f7fe fce6 	bl	800b5b4 <AVI_GetFrame>

		AVI_Handel.CurrentImage++;
 800cbe8:	4b54      	ldr	r3, [pc, #336]	@ (800cd3c <show_frame+0x16c>)
 800cbea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbec:	3301      	adds	r3, #1
 800cbee:	4a53      	ldr	r2, [pc, #332]	@ (800cd3c <show_frame+0x16c>)
 800cbf0:	62d3      	str	r3, [r2, #44]	@ 0x2c
	for(int i = 0 ; i < frame_num ; i++)
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	617b      	str	r3, [r7, #20]
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d8ee      	bhi.n	800cbde <show_frame+0xe>

	}

	for(int i = 0 ; i < 2 ; i++)
 800cc00:	2300      	movs	r3, #0
 800cc02:	613b      	str	r3, [r7, #16]
 800cc04:	e08e      	b.n	800cd24 <show_frame+0x154>
	{

		// Save the frame into MJPEG_VideoBuffer
		video.FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File, 0);
 800cc06:	2200      	movs	r2, #0
 800cc08:	494b      	ldr	r1, [pc, #300]	@ (800cd38 <show_frame+0x168>)
 800cc0a:	484c      	ldr	r0, [pc, #304]	@ (800cd3c <show_frame+0x16c>)
 800cc0c:	f7fe fcd2 	bl	800b5b4 <AVI_GetFrame>
 800cc10:	4603      	mov	r3, r0
 800cc12:	b2da      	uxtb	r2, r3
 800cc14:	4b4a      	ldr	r3, [pc, #296]	@ (800cd40 <show_frame+0x170>)
 800cc16:	709a      	strb	r2, [r3, #2]

		if(video.FrameType == AVI_VIDEO_FRAME)
 800cc18:	4b49      	ldr	r3, [pc, #292]	@ (800cd40 <show_frame+0x170>)
 800cc1a:	789b      	ldrb	r3, [r3, #2]
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d17e      	bne.n	800cd1e <show_frame+0x14e>
		{

			AVI_Handel.CurrentImage++;
 800cc20:	4b46      	ldr	r3, [pc, #280]	@ (800cd3c <show_frame+0x16c>)
 800cc22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc24:	3301      	adds	r3, #1
 800cc26:	4a45      	ldr	r2, [pc, #276]	@ (800cd3c <show_frame+0x16c>)
 800cc28:	62d3      	str	r3, [r2, #44]	@ 0x2c

			// Decode the frame inside MJPEG_VideoBuffer and put it into jpegOutDataAdreess in the format YCrCb
			JPEG_Decode_DMA(&JPEG_Handle, (uint32_t)MJPEG_VideoBuffer, AVI_Handel.FrameSize, video.jpegOutDataAdreess);
 800cc2a:	4946      	ldr	r1, [pc, #280]	@ (800cd44 <show_frame+0x174>)
 800cc2c:	4b43      	ldr	r3, [pc, #268]	@ (800cd3c <show_frame+0x16c>)
 800cc2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc30:	4b43      	ldr	r3, [pc, #268]	@ (800cd40 <show_frame+0x170>)
 800cc32:	6a1b      	ldr	r3, [r3, #32]
 800cc34:	4844      	ldr	r0, [pc, #272]	@ (800cd48 <show_frame+0x178>)
 800cc36:	f7ff f899 	bl	800bd6c <JPEG_Decode_DMA>

			while(Jpeg_HWDecodingEnd == 0);
 800cc3a:	bf00      	nop
 800cc3c:	4b43      	ldr	r3, [pc, #268]	@ (800cd4c <show_frame+0x17c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d0fb      	beq.n	800cc3c <show_frame+0x6c>

			if(video.isfirstFrame == 1)
 800cc44:	4b3e      	ldr	r3, [pc, #248]	@ (800cd40 <show_frame+0x170>)
 800cc46:	785b      	ldrb	r3, [r3, #1]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d136      	bne.n	800ccba <show_frame+0xea>
			{

				video.isfirstFrame = 0;
 800cc4c:	4b3c      	ldr	r3, [pc, #240]	@ (800cd40 <show_frame+0x170>)
 800cc4e:	2200      	movs	r2, #0
 800cc50:	705a      	strb	r2, [r3, #1]

				HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800cc52:	493f      	ldr	r1, [pc, #252]	@ (800cd50 <show_frame+0x180>)
 800cc54:	483c      	ldr	r0, [pc, #240]	@ (800cd48 <show_frame+0x178>)
 800cc56:	f7f5 f805 	bl	8001c64 <HAL_JPEG_GetInfo>

				DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800cc5a:	4b3d      	ldr	r3, [pc, #244]	@ (800cd50 <show_frame+0x180>)
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	b29b      	uxth	r3, r3
 800cc60:	4a3b      	ldr	r2, [pc, #236]	@ (800cd50 <show_frame+0x180>)
 800cc62:	6892      	ldr	r2, [r2, #8]
 800cc64:	b291      	uxth	r1, r2
 800cc66:	4a3a      	ldr	r2, [pc, #232]	@ (800cd50 <show_frame+0x180>)
 800cc68:	6852      	ldr	r2, [r2, #4]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f000 fa36 	bl	800d0dc <DMA2D_Init>

				video.width = JPEG_Info.ImageWidth;
 800cc70:	4b37      	ldr	r3, [pc, #220]	@ (800cd50 <show_frame+0x180>)
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	4b32      	ldr	r3, [pc, #200]	@ (800cd40 <show_frame+0x170>)
 800cc78:	809a      	strh	r2, [r3, #4]
				video.height = JPEG_Info.ImageHeight;
 800cc7a:	4b35      	ldr	r3, [pc, #212]	@ (800cd50 <show_frame+0x180>)
 800cc7c:	689b      	ldr	r3, [r3, #8]
 800cc7e:	b29a      	uxth	r2, r3
 800cc80:	4b2f      	ldr	r3, [pc, #188]	@ (800cd40 <show_frame+0x170>)
 800cc82:	80da      	strh	r2, [r3, #6]
				video.xPos =  ( ( LCD_Y_SIZE - video.width ) / 2 );					// Center the image in x
 800cc84:	4b2e      	ldr	r3, [pc, #184]	@ (800cd40 <show_frame+0x170>)
 800cc86:	889b      	ldrh	r3, [r3, #4]
 800cc88:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	da00      	bge.n	800cc92 <show_frame+0xc2>
 800cc90:	3301      	adds	r3, #1
 800cc92:	105b      	asrs	r3, r3, #1
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	4b2a      	ldr	r3, [pc, #168]	@ (800cd40 <show_frame+0x170>)
 800cc98:	811a      	strh	r2, [r3, #8]
				video.yPos = ( ( LCD_Y_SIZE - video.height ) / 2 );					// Center the image in y
 800cc9a:	4b29      	ldr	r3, [pc, #164]	@ (800cd40 <show_frame+0x170>)
 800cc9c:	88db      	ldrh	r3, [r3, #6]
 800cc9e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	da00      	bge.n	800cca8 <show_frame+0xd8>
 800cca6:	3301      	adds	r3, #1
 800cca8:	105b      	asrs	r3, r3, #1
 800ccaa:	b29a      	uxth	r2, r3
 800ccac:	4b24      	ldr	r3, [pc, #144]	@ (800cd40 <show_frame+0x170>)
 800ccae:	815a      	strh	r2, [r3, #10]

				video.frame_time = AVI_Handel.aviInfo.SecPerFrame;
 800ccb0:	4b22      	ldr	r3, [pc, #136]	@ (800cd3c <show_frame+0x16c>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	b29a      	uxth	r2, r3
 800ccb6:	4b22      	ldr	r3, [pc, #136]	@ (800cd40 <show_frame+0x170>)
 800ccb8:	821a      	strh	r2, [r3, #16]

			}

			// Copies the output frame into LCD_FRAME_BUFFER and does the conversion from YCrCb to RGB888
			DMA2D_CopyBuffer((uint32_t *)video.jpegOutDataAdreess, (uint32_t *)LCD_FRAME_BUFFER, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800ccba:	4b21      	ldr	r3, [pc, #132]	@ (800cd40 <show_frame+0x170>)
 800ccbc:	6a1b      	ldr	r3, [r3, #32]
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	4b23      	ldr	r3, [pc, #140]	@ (800cd50 <show_frame+0x180>)
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	b29a      	uxth	r2, r3
 800ccc6:	4b22      	ldr	r3, [pc, #136]	@ (800cd50 <show_frame+0x180>)
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	b29b      	uxth	r3, r3
 800cccc:	4921      	ldr	r1, [pc, #132]	@ (800cd54 <show_frame+0x184>)
 800ccce:	f000 fa83 	bl	800d1d8 <DMA2D_CopyBuffer>

			video.jpegOutDataAdreess = (video.jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;
 800ccd2:	4b1b      	ldr	r3, [pc, #108]	@ (800cd40 <show_frame+0x170>)
 800ccd4:	6a1b      	ldr	r3, [r3, #32]
 800ccd6:	4a20      	ldr	r2, [pc, #128]	@ (800cd58 <show_frame+0x188>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d101      	bne.n	800cce0 <show_frame+0x110>
 800ccdc:	4b1f      	ldr	r3, [pc, #124]	@ (800cd5c <show_frame+0x18c>)
 800ccde:	e000      	b.n	800cce2 <show_frame+0x112>
 800cce0:	4b1d      	ldr	r3, [pc, #116]	@ (800cd58 <show_frame+0x188>)
 800cce2:	4a17      	ldr	r2, [pc, #92]	@ (800cd40 <show_frame+0x170>)
 800cce4:	6213      	str	r3, [r2, #32]

			// Implements the data conversion from RGB888 to RGB565
			doubleFormat pOut;
			pOut.u8Arr = (uint8_t *)LCD_FRAME_BUFFER;
 800cce6:	4b1b      	ldr	r3, [pc, #108]	@ (800cd54 <show_frame+0x184>)
 800cce8:	60fb      	str	r3, [r7, #12]
			depth24To16(&pOut, ( video.width * video.height ), 3);
 800ccea:	4b15      	ldr	r3, [pc, #84]	@ (800cd40 <show_frame+0x170>)
 800ccec:	889a      	ldrh	r2, [r3, #4]
 800ccee:	4b14      	ldr	r3, [pc, #80]	@ (800cd40 <show_frame+0x170>)
 800ccf0:	88db      	ldrh	r3, [r3, #6]
 800ccf2:	fb12 f303 	smulbb	r3, r2, r3
 800ccf6:	b299      	uxth	r1, r3
 800ccf8:	f107 030c 	add.w	r3, r7, #12
 800ccfc:	2203      	movs	r2, #3
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f000 f910 	bl	800cf24 <depth24To16>

			lcd_draw(video.xPos, video.yPos, video.width, video.height, pOut.u8Arr);
 800cd04:	4b0e      	ldr	r3, [pc, #56]	@ (800cd40 <show_frame+0x170>)
 800cd06:	8918      	ldrh	r0, [r3, #8]
 800cd08:	4b0d      	ldr	r3, [pc, #52]	@ (800cd40 <show_frame+0x170>)
 800cd0a:	8959      	ldrh	r1, [r3, #10]
 800cd0c:	4b0c      	ldr	r3, [pc, #48]	@ (800cd40 <show_frame+0x170>)
 800cd0e:	889a      	ldrh	r2, [r3, #4]
 800cd10:	4b0b      	ldr	r3, [pc, #44]	@ (800cd40 <show_frame+0x170>)
 800cd12:	88dc      	ldrh	r4, [r3, #6]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	4623      	mov	r3, r4
 800cd1a:	f000 f98d 	bl	800d038 <lcd_draw>
	for(int i = 0 ; i < 2 ; i++)
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	3301      	adds	r3, #1
 800cd22:	613b      	str	r3, [r7, #16]
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	f77f af6d 	ble.w	800cc06 <show_frame+0x36>

		}

	}

}
 800cd2c:	bf00      	nop
 800cd2e:	bf00      	nop
 800cd30:	371c      	adds	r7, #28
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd90      	pop	{r4, r7, pc}
 800cd36:	bf00      	nop
 800cd38:	20018600 	.word	0x20018600
 800cd3c:	20018830 	.word	0x20018830
 800cd40:	20018878 	.word	0x20018878
 800cd44:	200003c8 	.word	0x200003c8
 800cd48:	200001e4 	.word	0x200001e4
 800cd4c:	200001d0 	.word	0x200001d0
 800cd50:	200002a4 	.word	0x200002a4
 800cd54:	d0a00000 	.word	0xd0a00000
 800cd58:	d0600000 	.word	0xd0600000
 800cd5c:	d0800000 	.word	0xd0800000

0800cd60 <file_handler>:


static void file_handler(uint8_t openFile)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af02      	add	r7, sp, #8
 800cd66:	4603      	mov	r3, r0
 800cd68:	71fb      	strb	r3, [r7, #7]
	  // Each file takes 30m

     static uint8_t  new_file_flag = 1;


     if(new_file_flag || openFile)
 800cd6a:	4b30      	ldr	r3, [pc, #192]	@ (800ce2c <file_handler+0xcc>)
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d102      	bne.n	800cd78 <file_handler+0x18>
 800cd72:	79fb      	ldrb	r3, [r7, #7]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d02e      	beq.n	800cdd6 <file_handler+0x76>
     {

    	 if(openFile)
 800cd78:	79fb      	ldrb	r3, [r7, #7]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d002      	beq.n	800cd84 <file_handler+0x24>
    		 f_close(&MJPEG_File);
 800cd7e:	482c      	ldr	r0, [pc, #176]	@ (800ce30 <file_handler+0xd0>)
 800cd80:	f003 f9a9 	bl	80100d6 <f_close>

    	 new_file_flag = 0;
 800cd84:	4b29      	ldr	r3, [pc, #164]	@ (800ce2c <file_handler+0xcc>)
 800cd86:	2200      	movs	r2, #0
 800cd88:	701a      	strb	r2, [r3, #0]

    	 name = file_name[video.file_idx];
 800cd8a:	4b2a      	ldr	r3, [pc, #168]	@ (800ce34 <file_handler+0xd4>)
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	4b29      	ldr	r3, [pc, #164]	@ (800ce38 <file_handler+0xd8>)
 800cd92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd96:	4a29      	ldr	r2, [pc, #164]	@ (800ce3c <file_handler+0xdc>)
 800cd98:	6013      	str	r3, [r2, #0]

    	 // Open the MJPEG avi file with read access
    	 if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 800cd9a:	4b28      	ldr	r3, [pc, #160]	@ (800ce3c <file_handler+0xdc>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	4619      	mov	r1, r3
 800cda2:	4823      	ldr	r0, [pc, #140]	@ (800ce30 <file_handler+0xd0>)
 800cda4:	f002 fe10 	bl	800f9c8 <f_open>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d112      	bne.n	800cdd4 <file_handler+0x74>
    	 {

    		 video.isfirstFrame = 1;
 800cdae:	4b21      	ldr	r3, [pc, #132]	@ (800ce34 <file_handler+0xd4>)
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	705a      	strb	r2, [r3, #1]

    		 // parse the AVI file Header
    		 if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	9301      	str	r3, [sp, #4]
 800cdb8:	4b21      	ldr	r3, [pc, #132]	@ (800ce40 <file_handler+0xe0>)
 800cdba:	9300      	str	r3, [sp, #0]
 800cdbc:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 800cdc0:	4a20      	ldr	r2, [pc, #128]	@ (800ce44 <file_handler+0xe4>)
 800cdc2:	491b      	ldr	r1, [pc, #108]	@ (800ce30 <file_handler+0xd0>)
 800cdc4:	4820      	ldr	r0, [pc, #128]	@ (800ce48 <file_handler+0xe8>)
 800cdc6:	f7fe fbb5 	bl	800b534 <AVI_ParserInit>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d002      	beq.n	800cdd6 <file_handler+0x76>
    			 while(1);
 800cdd0:	bf00      	nop
 800cdd2:	e7fd      	b.n	800cdd0 <file_handler+0x70>

    	 }
    	 else
    	 {

    		 while(1);
 800cdd4:	e7fe      	b.n	800cdd4 <file_handler+0x74>
    	 }

     }

     // Check for the end of the video
     if(AVI_Handel.CurrentImage  >=  AVI_Handel.aviInfo.TotalFrame)
 800cdd6:	4b1c      	ldr	r3, [pc, #112]	@ (800ce48 <file_handler+0xe8>)
 800cdd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdda:	4b1b      	ldr	r3, [pc, #108]	@ (800ce48 <file_handler+0xe8>)
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d31f      	bcc.n	800ce22 <file_handler+0xc2>
     {

    	 video.file_idx++;
 800cde2:	4b14      	ldr	r3, [pc, #80]	@ (800ce34 <file_handler+0xd4>)
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	3301      	adds	r3, #1
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	4b12      	ldr	r3, [pc, #72]	@ (800ce34 <file_handler+0xd4>)
 800cdec:	701a      	strb	r2, [r3, #0]
		 video.file_idx %= 24;	// Restart the index every 24 files ( 12h )
 800cdee:	4b11      	ldr	r3, [pc, #68]	@ (800ce34 <file_handler+0xd4>)
 800cdf0:	781a      	ldrb	r2, [r3, #0]
 800cdf2:	4b16      	ldr	r3, [pc, #88]	@ (800ce4c <file_handler+0xec>)
 800cdf4:	fba3 1302 	umull	r1, r3, r3, r2
 800cdf8:	0919      	lsrs	r1, r3, #4
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	005b      	lsls	r3, r3, #1
 800cdfe:	440b      	add	r3, r1
 800ce00:	00db      	lsls	r3, r3, #3
 800ce02:	1ad3      	subs	r3, r2, r3
 800ce04:	b2da      	uxtb	r2, r3
 800ce06:	4b0b      	ldr	r3, [pc, #44]	@ (800ce34 <file_handler+0xd4>)
 800ce08:	701a      	strb	r2, [r3, #0]

		 HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);  /* wait for the Last DMA2D transfer to ends */
 800ce0a:	2132      	movs	r1, #50	@ 0x32
 800ce0c:	4810      	ldr	r0, [pc, #64]	@ (800ce50 <file_handler+0xf0>)
 800ce0e:	f7f4 fa88 	bl	8001322 <HAL_DMA2D_PollForTransfer>

		 // Close the avi file
		 f_close(&MJPEG_File);
 800ce12:	4807      	ldr	r0, [pc, #28]	@ (800ce30 <file_handler+0xd0>)
 800ce14:	f003 f95f 	bl	80100d6 <f_close>

		 parameters_reset();
 800ce18:	f000 f854 	bl	800cec4 <parameters_reset>

		 new_file_flag = 1;
 800ce1c:	4b03      	ldr	r3, [pc, #12]	@ (800ce2c <file_handler+0xcc>)
 800ce1e:	2201      	movs	r2, #1
 800ce20:	701a      	strb	r2, [r3, #0]

     }

}
 800ce22:	bf00      	nop
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	2000000e 	.word	0x2000000e
 800ce30:	20018600 	.word	0x20018600
 800ce34:	20018878 	.word	0x20018878
 800ce38:	20000364 	.word	0x20000364
 800ce3c:	200003c4 	.word	0x200003c4
 800ce40:	200183c8 	.word	0x200183c8
 800ce44:	200003c8 	.word	0x200003c8
 800ce48:	20018830 	.word	0x20018830
 800ce4c:	aaaaaaab 	.word	0xaaaaaaab
 800ce50:	2000023c 	.word	0x2000023c

0800ce54 <user_buttons_handler>:


static void user_buttons_handler(void)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	af00      	add	r7, sp, #0
	static uint8_t first = 1;
	static uint32_t button_timer = 0;


	// Long press enters in setting mode
	if(!HAL_GPIO_ReadPin(BUTTON_SETTING_GPIO_Port, BUTTON_SETTING_Pin))
 800ce58:	2108      	movs	r1, #8
 800ce5a:	4816      	ldr	r0, [pc, #88]	@ (800ceb4 <user_buttons_handler+0x60>)
 800ce5c:	f7f4 fe4e 	bl	8001afc <HAL_GPIO_ReadPin>
 800ce60:	4603      	mov	r3, r0
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d121      	bne.n	800ceaa <user_buttons_handler+0x56>
	{

		if(first)
 800ce66:	4b14      	ldr	r3, [pc, #80]	@ (800ceb8 <user_buttons_handler+0x64>)
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d007      	beq.n	800ce7e <user_buttons_handler+0x2a>
		{

			first = 0;
 800ce6e:	4b12      	ldr	r3, [pc, #72]	@ (800ceb8 <user_buttons_handler+0x64>)
 800ce70:	2200      	movs	r2, #0
 800ce72:	701a      	strb	r2, [r3, #0]
			button_timer = HAL_GetTick();
 800ce74:	f7f3 fff2 	bl	8000e5c <HAL_GetTick>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	4a10      	ldr	r2, [pc, #64]	@ (800cebc <user_buttons_handler+0x68>)
 800ce7c:	6013      	str	r3, [r2, #0]

		}

		if(abs( HAL_GetTick() - button_timer ) >= 3000)
 800ce7e:	f7f3 ffed 	bl	8000e5c <HAL_GetTick>
 800ce82:	4602      	mov	r2, r0
 800ce84:	4b0d      	ldr	r3, [pc, #52]	@ (800cebc <user_buttons_handler+0x68>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	1ad3      	subs	r3, r2, r3
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	bfb8      	it	lt
 800ce8e:	425b      	neglt	r3, r3
 800ce90:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800ce94:	4293      	cmp	r3, r2
 800ce96:	dd0b      	ble.n	800ceb0 <user_buttons_handler+0x5c>
		{

			video.video_mode = SETTING_MODE;
 800ce98:	4b09      	ldr	r3, [pc, #36]	@ (800cec0 <user_buttons_handler+0x6c>)
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			video.set = SET_IDLE;
 800cea0:	4b07      	ldr	r3, [pc, #28]	@ (800cec0 <user_buttons_handler+0x6c>)
 800cea2:	2200      	movs	r2, #0
 800cea4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

		first = 1;

	}

}
 800cea8:	e002      	b.n	800ceb0 <user_buttons_handler+0x5c>
		first = 1;
 800ceaa:	4b03      	ldr	r3, [pc, #12]	@ (800ceb8 <user_buttons_handler+0x64>)
 800ceac:	2201      	movs	r2, #1
 800ceae:	701a      	strb	r2, [r3, #0]
}
 800ceb0:	bf00      	nop
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	58022400 	.word	0x58022400
 800ceb8:	2000000f 	.word	0x2000000f
 800cebc:	200188a4 	.word	0x200188a4
 800cec0:	20018878 	.word	0x20018878

0800cec4 <parameters_reset>:


static void parameters_reset(void)
{
 800cec4:	b480      	push	{r7}
 800cec6:	af00      	add	r7, sp, #0

	video.width = 0;
 800cec8:	4b14      	ldr	r3, [pc, #80]	@ (800cf1c <parameters_reset+0x58>)
 800ceca:	2200      	movs	r2, #0
 800cecc:	809a      	strh	r2, [r3, #4]
	video.height = 0;
 800cece:	4b13      	ldr	r3, [pc, #76]	@ (800cf1c <parameters_reset+0x58>)
 800ced0:	2200      	movs	r2, #0
 800ced2:	80da      	strh	r2, [r3, #6]
	video.xPos = 0;
 800ced4:	4b11      	ldr	r3, [pc, #68]	@ (800cf1c <parameters_reset+0x58>)
 800ced6:	2200      	movs	r2, #0
 800ced8:	811a      	strh	r2, [r3, #8]
	video.yPos = 0;
 800ceda:	4b10      	ldr	r3, [pc, #64]	@ (800cf1c <parameters_reset+0x58>)
 800cedc:	2200      	movs	r2, #0
 800cede:	815a      	strh	r2, [r3, #10]

	video.file_idx = 0;
 800cee0:	4b0e      	ldr	r3, [pc, #56]	@ (800cf1c <parameters_reset+0x58>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	701a      	strb	r2, [r3, #0]
	video.FrameType = 0;
 800cee6:	4b0d      	ldr	r3, [pc, #52]	@ (800cf1c <parameters_reset+0x58>)
 800cee8:	2200      	movs	r2, #0
 800ceea:	709a      	strb	r2, [r3, #2]

	video.frameToSkip = 0;
 800ceec:	4b0b      	ldr	r3, [pc, #44]	@ (800cf1c <parameters_reset+0x58>)
 800ceee:	2200      	movs	r2, #0
 800cef0:	60da      	str	r2, [r3, #12]
	video.frame_time = 0;
 800cef2:	4b0a      	ldr	r3, [pc, #40]	@ (800cf1c <parameters_reset+0x58>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	821a      	strh	r2, [r3, #16]
	video.actual_time = 0;
 800cef8:	4b08      	ldr	r3, [pc, #32]	@ (800cf1c <parameters_reset+0x58>)
 800cefa:	2200      	movs	r2, #0
 800cefc:	615a      	str	r2, [r3, #20]
	video.tick_offset = 0;
 800cefe:	4b07      	ldr	r3, [pc, #28]	@ (800cf1c <parameters_reset+0x58>)
 800cf00:	2200      	movs	r2, #0
 800cf02:	619a      	str	r2, [r3, #24]
	video.jpegOutDataAdreess = JPEG_OUTPUT_DATA_BUFFER0;
 800cf04:	4b05      	ldr	r3, [pc, #20]	@ (800cf1c <parameters_reset+0x58>)
 800cf06:	4a06      	ldr	r2, [pc, #24]	@ (800cf20 <parameters_reset+0x5c>)
 800cf08:	621a      	str	r2, [r3, #32]

	//video.video_mode = NORMAL_MODE;
	video.set = SET_IDLE;
 800cf0a:	4b04      	ldr	r3, [pc, #16]	@ (800cf1c <parameters_reset+0x58>)
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

}
 800cf12:	bf00      	nop
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	20018878 	.word	0x20018878
 800cf20:	d0600000 	.word	0xd0600000

0800cf24 <depth24To16>:


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b085      	sub	sp, #20
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	807b      	strh	r3, [r7, #2]
 800cf30:	4613      	mov	r3, r2
 800cf32:	707b      	strb	r3, [r7, #1]

	uint8_t b;
	uint8_t g;
	uint8_t r;

	int i = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	60fb      	str	r3, [r7, #12]


	// Only half of the frame is handled per time
	// Alternate the top and bottom half every cycle
    if(swap)
 800cf38:	4b3d      	ldr	r3, [pc, #244]	@ (800d030 <depth24To16+0x10c>)
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d00c      	beq.n	800cf5a <depth24To16+0x36>
    {

    	swap = 0;
 800cf40:	4b3b      	ldr	r3, [pc, #236]	@ (800d030 <depth24To16+0x10c>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	701a      	strb	r2, [r3, #0]

    	i = 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	60fb      	str	r3, [r7, #12]
    	length /= 2;
 800cf4a:	887b      	ldrh	r3, [r7, #2]
 800cf4c:	085b      	lsrs	r3, r3, #1
 800cf4e:	807b      	strh	r3, [r7, #2]
    	length += 1000;
 800cf50:	887b      	ldrh	r3, [r7, #2]
 800cf52:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cf56:	807b      	strh	r3, [r7, #2]
 800cf58:	e05e      	b.n	800d018 <depth24To16+0xf4>

    }
    else
    {

    	swap = 1;
 800cf5a:	4b35      	ldr	r3, [pc, #212]	@ (800d030 <depth24To16+0x10c>)
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	701a      	strb	r2, [r3, #0]

    	i = ( length / 2 ) - 2000;
 800cf60:	887b      	ldrh	r3, [r7, #2]
 800cf62:	085b      	lsrs	r3, r3, #1
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800cf6a:	60fb      	str	r3, [r7, #12]

    }

	for( ; i < length ; i++)
 800cf6c:	e054      	b.n	800d018 <depth24To16+0xf4>
	{

		b = pxArr->u8Arr[i*bpx];
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	787a      	ldrb	r2, [r7, #1]
 800cf74:	68f9      	ldr	r1, [r7, #12]
 800cf76:	fb01 f202 	mul.w	r2, r1, r2
 800cf7a:	4413      	add	r3, r2
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	787b      	ldrb	r3, [r7, #1]
 800cf86:	68f9      	ldr	r1, [r7, #12]
 800cf88:	fb01 f303 	mul.w	r3, r1, r3
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	4413      	add	r3, r2
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	787b      	ldrb	r3, [r7, #1]
 800cf9a:	68f9      	ldr	r1, [r7, #12]
 800cf9c:	fb01 f303 	mul.w	r3, r1, r3
 800cfa0:	3302      	adds	r3, #2
 800cfa2:	4413      	add	r3, r2
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 800cfa8:	7a7b      	ldrb	r3, [r7, #9]
 800cfaa:	021b      	lsls	r3, r3, #8
 800cfac:	b21a      	sxth	r2, r3
 800cfae:	4b21      	ldr	r3, [pc, #132]	@ (800d034 <depth24To16+0x110>)
 800cfb0:	4013      	ands	r3, r2
 800cfb2:	b21a      	sxth	r2, r3
 800cfb4:	7abb      	ldrb	r3, [r7, #10]
 800cfb6:	00db      	lsls	r3, r3, #3
 800cfb8:	b21b      	sxth	r3, r3
 800cfba:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800cfbe:	b21b      	sxth	r3, r3
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	b21a      	sxth	r2, r3
 800cfc4:	7afb      	ldrb	r3, [r7, #11]
 800cfc6:	08db      	lsrs	r3, r3, #3
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	b21b      	sxth	r3, r3
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	b219      	sxth	r1, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	005b      	lsls	r3, r3, #1
 800cfd8:	4413      	add	r3, r2
 800cfda:	b28a      	uxth	r2, r1
 800cfdc:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681a      	ldr	r2, [r3, #0]
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	005b      	lsls	r3, r3, #1
 800cfe6:	4413      	add	r3, r2
 800cfe8:	881b      	ldrh	r3, [r3, #0]
 800cfea:	021b      	lsls	r3, r3, #8
 800cfec:	b21a      	sxth	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6819      	ldr	r1, [r3, #0]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	005b      	lsls	r3, r3, #1
 800cff6:	440b      	add	r3, r1
 800cff8:	881b      	ldrh	r3, [r3, #0]
 800cffa:	0a1b      	lsrs	r3, r3, #8
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	b21b      	sxth	r3, r3
 800d000:	4313      	orrs	r3, r2
 800d002:	b219      	sxth	r1, r3
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	005b      	lsls	r3, r3, #1
 800d00c:	4413      	add	r3, r2
 800d00e:	b28a      	uxth	r2, r1
 800d010:	801a      	strh	r2, [r3, #0]
	for( ; i < length ; i++)
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	3301      	adds	r3, #1
 800d016:	60fb      	str	r3, [r7, #12]
 800d018:	887b      	ldrh	r3, [r7, #2]
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	dba6      	blt.n	800cf6e <depth24To16+0x4a>

	}

}
 800d020:	bf00      	nop
 800d022:	bf00      	nop
 800d024:	3714      	adds	r7, #20
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	200188a8 	.word	0x200188a8
 800d034:	fffff800 	.word	0xfffff800

0800d038 <lcd_draw>:


static void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 800d038:	b590      	push	{r4, r7, lr}
 800d03a:	b087      	sub	sp, #28
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	4604      	mov	r4, r0
 800d040:	4608      	mov	r0, r1
 800d042:	4611      	mov	r1, r2
 800d044:	461a      	mov	r2, r3
 800d046:	4623      	mov	r3, r4
 800d048:	80fb      	strh	r3, [r7, #6]
 800d04a:	4603      	mov	r3, r0
 800d04c:	80bb      	strh	r3, [r7, #4]
 800d04e:	460b      	mov	r3, r1
 800d050:	807b      	strh	r3, [r7, #2]
 800d052:	4613      	mov	r3, r2
 800d054:	803b      	strh	r3, [r7, #0]
	   struct GC9A01_frame frame;


		// Only half of the frame is handled per time
		// Alternate the top and bottom half every cycle
	   	if(swap)
 800d056:	4b20      	ldr	r3, [pc, #128]	@ (800d0d8 <lcd_draw+0xa0>)
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00b      	beq.n	800d076 <lcd_draw+0x3e>
	   	{

	   		swap = 0;
 800d05e:	4b1e      	ldr	r3, [pc, #120]	@ (800d0d8 <lcd_draw+0xa0>)
 800d060:	2200      	movs	r2, #0
 800d062:	701a      	strb	r2, [r3, #0]

	        frame.start.X = 0;
 800d064:	2300      	movs	r3, #0
 800d066:	81bb      	strh	r3, [r7, #12]
	        frame.start.Y = 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	81fb      	strh	r3, [r7, #14]
	        frame.end.X = 239;
 800d06c:	23ef      	movs	r3, #239	@ 0xef
 800d06e:	823b      	strh	r3, [r7, #16]
	        frame.end.Y = 119;
 800d070:	2377      	movs	r3, #119	@ 0x77
 800d072:	827b      	strh	r3, [r7, #18]
 800d074:	e00e      	b.n	800d094 <lcd_draw+0x5c>

	   	}
	   	else
	   	{

	   		swap = 1;
 800d076:	4b18      	ldr	r3, [pc, #96]	@ (800d0d8 <lcd_draw+0xa0>)
 800d078:	2201      	movs	r2, #1
 800d07a:	701a      	strb	r2, [r3, #0]

	   		data += ( 240 * 240 );
 800d07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d07e:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800d082:	62bb      	str	r3, [r7, #40]	@ 0x28

	        frame.start.X = 0;
 800d084:	2300      	movs	r3, #0
 800d086:	81bb      	strh	r3, [r7, #12]
	        frame.start.Y = 120;
 800d088:	2378      	movs	r3, #120	@ 0x78
 800d08a:	81fb      	strh	r3, [r7, #14]
	        frame.end.X = 239;
 800d08c:	23ef      	movs	r3, #239	@ 0xef
 800d08e:	823b      	strh	r3, [r7, #16]
	        frame.end.Y = 239;
 800d090:	23ef      	movs	r3, #239	@ 0xef
 800d092:	827b      	strh	r3, [r7, #18]

	   	}

	   	// Sends the block of data in a single time

	    GC9A01_set_frame(frame);
 800d094:	f107 030c 	add.w	r3, r7, #12
 800d098:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d09c:	f7fe fe0d 	bl	800bcba <GC9A01_set_frame>
	    GC9A01_write_command(MEM_WR);
 800d0a0:	202c      	movs	r0, #44	@ 0x2c
 800d0a2:	f7fe fb89 	bl	800b7b8 <GC9A01_write_command>

	    GC9A01_set_data_command(ON);
 800d0a6:	2001      	movs	r0, #1
 800d0a8:	f7fe fb52 	bl	800b750 <GC9A01_set_data_command>
	    GC9A01_set_chip_select(OFF);
 800d0ac:	2000      	movs	r0, #0
 800d0ae:	f7fe fb69 	bl	800b784 <GC9A01_set_chip_select>

	    uint32_t total_bytes = wd * ht;		// 2 byte per pixel
 800d0b2:	887b      	ldrh	r3, [r7, #2]
 800d0b4:	883a      	ldrh	r2, [r7, #0]
 800d0b6:	fb02 f303 	mul.w	r3, r2, r3
 800d0ba:	617b      	str	r3, [r7, #20]
	    GC9A01_spi_tx(data, total_bytes);
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0c4:	f7fe fe36 	bl	800bd34 <GC9A01_spi_tx>

	    GC9A01_set_chip_select(ON);
 800d0c8:	2001      	movs	r0, #1
 800d0ca:	f7fe fb5b 	bl	800b784 <GC9A01_set_chip_select>

}
 800d0ce:	bf00      	nop
 800d0d0:	371c      	adds	r7, #28
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd90      	pop	{r4, r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	200188a9 	.word	0x200188a9

0800d0dc <DMA2D_Init>:


static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	603a      	str	r2, [r7, #0]
 800d0e6:	80fb      	strh	r3, [r7, #6]
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	80bb      	strh	r3, [r7, #4]

  uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	60fb      	str	r3, [r7, #12]
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	60bb      	str	r3, [r7, #8]


  HAL_DMA2D_MspInit(&DMA2D_Handle);
 800d0f4:	4836      	ldr	r0, [pc, #216]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d0f6:	f000 f9f9 	bl	800d4ec <HAL_DMA2D_MspInit>

  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d10d      	bne.n	800d11c <DMA2D_Init+0x40>
  {

    cssMode = DMA2D_CSS_420;
 800d100:	2302      	movs	r3, #2
 800d102:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800d104:	88fb      	ldrh	r3, [r7, #6]
 800d106:	f003 030f 	and.w	r3, r3, #15
 800d10a:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d025      	beq.n	800d15e <DMA2D_Init+0x82>
    {

      inputLineOffset = 16 - inputLineOffset;
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	f1c3 0310 	rsb	r3, r3, #16
 800d118:	60bb      	str	r3, [r7, #8]
 800d11a:	e020      	b.n	800d15e <DMA2D_Init+0x82>

    }

  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d10d      	bne.n	800d13e <DMA2D_Init+0x62>
  {

    cssMode = DMA2D_NO_CSS;
 800d122:	2300      	movs	r3, #0
 800d124:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 8;
 800d126:	88fb      	ldrh	r3, [r7, #6]
 800d128:	f003 0307 	and.w	r3, r3, #7
 800d12c:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d014      	beq.n	800d15e <DMA2D_Init+0x82>
    {

      inputLineOffset = 8 - inputLineOffset;
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	f1c3 0308 	rsb	r3, r3, #8
 800d13a:	60bb      	str	r3, [r7, #8]
 800d13c:	e00f      	b.n	800d15e <DMA2D_Init+0x82>

    }

  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	2b02      	cmp	r3, #2
 800d142:	d10c      	bne.n	800d15e <DMA2D_Init+0x82>
  {

    cssMode = DMA2D_CSS_422;
 800d144:	2301      	movs	r3, #1
 800d146:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800d148:	88fb      	ldrh	r3, [r7, #6]
 800d14a:	f003 030f 	and.w	r3, r3, #15
 800d14e:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d003      	beq.n	800d15e <DMA2D_Init+0x82>
    {

      inputLineOffset = 16 - inputLineOffset;
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	f1c3 0310 	rsb	r3, r3, #16
 800d15c:	60bb      	str	r3, [r7, #8]
    }

  }

  // Configure the DMA2D Mode, Color Mode and output offset
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 800d15e:	4b1c      	ldr	r3, [pc, #112]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d160:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d164:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 800d166:	4b1a      	ldr	r3, [pc, #104]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d168:	2201      	movs	r2, #1
 800d16a:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_X_SIZE - xsize;
 800d16c:	88fb      	ldrh	r3, [r7, #6]
 800d16e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d172:	461a      	mov	r2, r3
 800d174:	4b16      	ldr	r3, [pc, #88]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d176:	60da      	str	r2, [r3, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  // No Output Alpha Inversion
 800d178:	4b15      	ldr	r3, [pc, #84]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d17a:	2200      	movs	r2, #0
 800d17c:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     // No Output Red & Blue swap
 800d17e:	4b14      	ldr	r3, [pc, #80]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d180:	2200      	movs	r2, #0
 800d182:	615a      	str	r2, [r3, #20]

  // DMA2D Callbacks Configuration
  DMA2D_Handle.XferCpltCallback  = NULL;
 800d184:	4b12      	ldr	r3, [pc, #72]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d186:	2200      	movs	r2, #0
 800d188:	621a      	str	r2, [r3, #32]

  // Foreground Configuration
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800d18a:	4b11      	ldr	r3, [pc, #68]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d18c:	2201      	movs	r2, #1
 800d18e:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 800d190:	4b0f      	ldr	r3, [pc, #60]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d192:	22ff      	movs	r2, #255	@ 0xff
 800d194:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 800d196:	4b0e      	ldr	r3, [pc, #56]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d198:	220b      	movs	r2, #11
 800d19a:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 800d19c:	4a0c      	ldr	r2, [pc, #48]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 800d1a2:	4a0b      	ldr	r2, [pc, #44]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; 		// No ForeGround Red/Blue swap
 800d1a8:	4b09      	ldr	r3, [pc, #36]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; // No ForeGround Alpha inversion
 800d1ae:	4b08      	ldr	r3, [pc, #32]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance = DMA2D;
 800d1b4:	4b06      	ldr	r3, [pc, #24]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d1b6:	4a07      	ldr	r2, [pc, #28]	@ (800d1d4 <DMA2D_Init+0xf8>)
 800d1b8:	601a      	str	r2, [r3, #0]

  // DMA2D Initialization
  HAL_DMA2D_Init(&DMA2D_Handle);
 800d1ba:	4805      	ldr	r0, [pc, #20]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d1bc:	f7f4 f822 	bl	8001204 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 800d1c0:	2101      	movs	r1, #1
 800d1c2:	4803      	ldr	r0, [pc, #12]	@ (800d1d0 <DMA2D_Init+0xf4>)
 800d1c4:	f7f4 f996 	bl	80014f4 <HAL_DMA2D_ConfigLayer>

}
 800d1c8:	bf00      	nop
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	2000023c 	.word	0x2000023c
 800d1d4:	52001000 	.word	0x52001000

0800d1d8 <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t ImageWidth, uint16_t ImageHeight)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b08a      	sub	sp, #40	@ 0x28
 800d1dc:	af02      	add	r7, sp, #8
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	4611      	mov	r1, r2
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	80fb      	strh	r3, [r7, #6]
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	80bb      	strh	r3, [r7, #4]

  uint32_t xPos, yPos, destination;


  // calculate the destination transfer address
  xPos = (LCD_X_SIZE - JPEG_Info.ImageWidth)/2;
 800d1ee:	4b15      	ldr	r3, [pc, #84]	@ (800d244 <DMA2D_CopyBuffer+0x6c>)
 800d1f0:	68db      	ldr	r3, [r3, #12]
 800d1f2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d1f6:	085b      	lsrs	r3, r3, #1
 800d1f8:	61fb      	str	r3, [r7, #28]
  yPos = (LCD_Y_SIZE - JPEG_Info.ImageHeight)/2;
 800d1fa:	4b12      	ldr	r3, [pc, #72]	@ (800d244 <DMA2D_CopyBuffer+0x6c>)
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800d202:	085b      	lsrs	r3, r3, #1
 800d204:	61bb      	str	r3, [r7, #24]

  destination = (uint32_t)pDst + ((yPos * LCD_X_SIZE) + xPos) * 4;
 800d206:	69ba      	ldr	r2, [r7, #24]
 800d208:	4613      	mov	r3, r2
 800d20a:	011b      	lsls	r3, r3, #4
 800d20c:	1a9b      	subs	r3, r3, r2
 800d20e:	011b      	lsls	r3, r3, #4
 800d210:	461a      	mov	r2, r3
 800d212:	69fb      	ldr	r3, [r7, #28]
 800d214:	4413      	add	r3, r2
 800d216:	009a      	lsls	r2, r3, #2
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	4413      	add	r3, r2
 800d21c:	617b      	str	r3, [r7, #20]

  // wait for the DMA2D transfer to ends
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 800d21e:	f04f 31ff 	mov.w	r1, #4294967295
 800d222:	4809      	ldr	r0, [pc, #36]	@ (800d248 <DMA2D_CopyBuffer+0x70>)
 800d224:	f7f4 f87d 	bl	8001322 <HAL_DMA2D_PollForTransfer>
  // copy the new decoded frame to the LCD Frame buffer
  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 800d228:	68f9      	ldr	r1, [r7, #12]
 800d22a:	88fa      	ldrh	r2, [r7, #6]
 800d22c:	88bb      	ldrh	r3, [r7, #4]
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	4613      	mov	r3, r2
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	4804      	ldr	r0, [pc, #16]	@ (800d248 <DMA2D_CopyBuffer+0x70>)
 800d236:	f7f4 f849 	bl	80012cc <HAL_DMA2D_Start>

}
 800d23a:	bf00      	nop
 800d23c:	3720      	adds	r7, #32
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	200002a4 	.word	0x200002a4
 800d248:	2000023c 	.word	0x2000023c

0800d24c <SD_Initialize>:


static void SD_Initialize(void)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	af00      	add	r7, sp, #0

  BSP_SD_Init(0);
 800d250:	2000      	movs	r0, #0
 800d252:	f7f3 f94d 	bl	80004f0 <BSP_SD_Init>

}
 800d256:	bf00      	nop
 800d258:	bd80      	pop	{r7, pc}
	...

0800d25c <HAL_JPEG_MspInit>:

#include "main.h"


void HAL_JPEG_MspInit(JPEG_HandleTypeDef *hjpeg)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]

  static MDMA_HandleTypeDef   hmdmaIn;
  static MDMA_HandleTypeDef   hmdmaOut;  
  

  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 800d264:	4b54      	ldr	r3, [pc, #336]	@ (800d3b8 <HAL_JPEG_MspInit+0x15c>)
 800d266:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d26a:	4a53      	ldr	r2, [pc, #332]	@ (800d3b8 <HAL_JPEG_MspInit+0x15c>)
 800d26c:	f043 0320 	orr.w	r3, r3, #32
 800d270:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d274:	4b50      	ldr	r3, [pc, #320]	@ (800d3b8 <HAL_JPEG_MspInit+0x15c>)
 800d276:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d27a:	f003 0320 	and.w	r3, r3, #32
 800d27e:	60fb      	str	r3, [r7, #12]
 800d280:	68fb      	ldr	r3, [r7, #12]
  
  __HAL_RCC_MDMA_CLK_ENABLE();
 800d282:	4b4d      	ldr	r3, [pc, #308]	@ (800d3b8 <HAL_JPEG_MspInit+0x15c>)
 800d284:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d288:	4a4b      	ldr	r2, [pc, #300]	@ (800d3b8 <HAL_JPEG_MspInit+0x15c>)
 800d28a:	f043 0301 	orr.w	r3, r3, #1
 800d28e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d292:	4b49      	ldr	r3, [pc, #292]	@ (800d3b8 <HAL_JPEG_MspInit+0x15c>)
 800d294:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d298:	f003 0301 	and.w	r3, r3, #1
 800d29c:	60bb      	str	r3, [r7, #8]
 800d29e:	68bb      	ldr	r3, [r7, #8]
  
  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 800d2a0:	220f      	movs	r2, #15
 800d2a2:	2107      	movs	r1, #7
 800d2a4:	2079      	movs	r0, #121	@ 0x79
 800d2a6:	f7f3 ff00 	bl	80010aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(JPEG_IRQn);  
 800d2aa:	2079      	movs	r0, #121	@ 0x79
 800d2ac:	f7f3 ff17 	bl	80010de <HAL_NVIC_EnableIRQ>
  
  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 800d2b0:	4b42      	ldr	r3, [pc, #264]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d2b2:	2280      	movs	r2, #128	@ 0x80
 800d2b4:	60da      	str	r2, [r3, #12]
  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800d2b6:	4b41      	ldr	r3, [pc, #260]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	611a      	str	r2, [r3, #16]
  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 800d2bc:	4b3f      	ldr	r3, [pc, #252]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d2be:	2202      	movs	r2, #2
 800d2c0:	615a      	str	r2, [r3, #20]
  hmdmaIn.Init.DestinationInc     = MDMA_DEST_INC_DISABLE;
 800d2c2:	4b3e      	ldr	r3, [pc, #248]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	619a      	str	r2, [r3, #24]
  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 800d2c8:	4b3c      	ldr	r3, [pc, #240]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	61da      	str	r2, [r3, #28]
  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 800d2ce:	4b3b      	ldr	r3, [pc, #236]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d2d0:	2280      	movs	r2, #128	@ 0x80
 800d2d2:	621a      	str	r2, [r3, #32]
  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;   
 800d2d4:	4b39      	ldr	r3, [pc, #228]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d2d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800d2da:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 800d2dc:	4b37      	ldr	r3, [pc, #220]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d2de:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800d2e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS; 
 800d2e4:	4b35      	ldr	r3, [pc, #212]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d2e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800d2ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 800d2ec:	4b33      	ldr	r3, [pc, #204]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdmaIn.Init.DestBlockAddressOffset  = 0;
 800d2f2:	4b32      	ldr	r3, [pc, #200]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800d2f8:	4b30      	ldr	r3, [pc, #192]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d2fa:	2211      	movs	r2, #17
 800d2fc:	605a      	str	r2, [r3, #4]
  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;  
 800d2fe:	4b2f      	ldr	r3, [pc, #188]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d300:	2200      	movs	r2, #0
 800d302:	609a      	str	r2, [r3, #8]
  hmdmaIn.Init.BufferTransferLength = 32;
 800d304:	4b2d      	ldr	r3, [pc, #180]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d306:	2220      	movs	r2, #32
 800d308:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hmdmaIn.Instance = MDMA_Channel1;
 800d30a:	4b2c      	ldr	r3, [pc, #176]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d30c:	4a2c      	ldr	r2, [pc, #176]	@ (800d3c0 <HAL_JPEG_MspInit+0x164>)
 800d30e:	601a      	str	r2, [r3, #0]
  
  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4a2a      	ldr	r2, [pc, #168]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d314:	631a      	str	r2, [r3, #48]	@ 0x30
 800d316:	4a29      	ldr	r2, [pc, #164]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6413      	str	r3, [r2, #64]	@ 0x40
  
  HAL_MDMA_DeInit(&hmdmaIn);  
 800d31c:	4827      	ldr	r0, [pc, #156]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d31e:	f7f6 faef 	bl	8003900 <HAL_MDMA_DeInit>

  HAL_MDMA_Init(&hmdmaIn);
 800d322:	4826      	ldr	r0, [pc, #152]	@ (800d3bc <HAL_JPEG_MspInit+0x160>)
 800d324:	f7f6 faa0 	bl	8003868 <HAL_MDMA_Init>
  
  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 800d328:	4b26      	ldr	r3, [pc, #152]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d32a:	22c0      	movs	r2, #192	@ 0xc0
 800d32c:	60da      	str	r2, [r3, #12]
  hmdmaOut.Init.Endianness      = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800d32e:	4b25      	ldr	r3, [pc, #148]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d330:	2200      	movs	r2, #0
 800d332:	611a      	str	r2, [r3, #16]
  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 800d334:	4b23      	ldr	r3, [pc, #140]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d336:	2200      	movs	r2, #0
 800d338:	615a      	str	r2, [r3, #20]
  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 800d33a:	4b22      	ldr	r3, [pc, #136]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d33c:	2208      	movs	r2, #8
 800d33e:	619a      	str	r2, [r3, #24]
  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
 800d340:	4b20      	ldr	r3, [pc, #128]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d342:	2220      	movs	r2, #32
 800d344:	61da      	str	r2, [r3, #28]
  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 800d346:	4b1f      	ldr	r3, [pc, #124]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d348:	2200      	movs	r2, #0
 800d34a:	621a      	str	r2, [r3, #32]
  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 800d34c:	4b1d      	ldr	r3, [pc, #116]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d34e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800d352:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 800d354:	4b1b      	ldr	r3, [pc, #108]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d356:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800d35a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;  
 800d35c:	4b19      	ldr	r3, [pc, #100]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d35e:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800d362:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 800d364:	4b17      	ldr	r3, [pc, #92]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d366:	2200      	movs	r2, #0
 800d368:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdmaOut.Init.DestBlockAddressOffset  = 0;
 800d36a:	4b16      	ldr	r3, [pc, #88]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d36c:	2200      	movs	r2, #0
 800d36e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800d370:	4b14      	ldr	r3, [pc, #80]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d372:	2213      	movs	r2, #19
 800d374:	605a      	str	r2, [r3, #4]
  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;    
 800d376:	4b13      	ldr	r3, [pc, #76]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d378:	2200      	movs	r2, #0
 800d37a:	609a      	str	r2, [r3, #8]
  hmdmaOut.Init.BufferTransferLength = 32;
 800d37c:	4b11      	ldr	r3, [pc, #68]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d37e:	2220      	movs	r2, #32
 800d380:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hmdmaOut.Instance = MDMA_Channel0;
 800d382:	4b10      	ldr	r3, [pc, #64]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d384:	4a10      	ldr	r2, [pc, #64]	@ (800d3c8 <HAL_JPEG_MspInit+0x16c>)
 800d386:	601a      	str	r2, [r3, #0]

  HAL_MDMA_DeInit(&hmdmaOut);  
 800d388:	480e      	ldr	r0, [pc, #56]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d38a:	f7f6 fab9 	bl	8003900 <HAL_MDMA_DeInit>

  HAL_MDMA_Init(&hmdmaOut);
 800d38e:	480d      	ldr	r0, [pc, #52]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d390:	f7f6 fa6a 	bl	8003868 <HAL_MDMA_Init>
  
  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	4a0b      	ldr	r2, [pc, #44]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d398:	635a      	str	r2, [r3, #52]	@ 0x34
 800d39a:	4a0a      	ldr	r2, [pc, #40]	@ (800d3c4 <HAL_JPEG_MspInit+0x168>)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6413      	str	r3, [r2, #64]	@ 0x40
  
  
  HAL_NVIC_SetPriority(MDMA_IRQn, 0x08, 0x0F);
 800d3a0:	220f      	movs	r2, #15
 800d3a2:	2108      	movs	r1, #8
 800d3a4:	207a      	movs	r0, #122	@ 0x7a
 800d3a6:	f7f3 fe80 	bl	80010aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800d3aa:	207a      	movs	r0, #122	@ 0x7a
 800d3ac:	f7f3 fe97 	bl	80010de <HAL_NVIC_EnableIRQ>
  
}
 800d3b0:	bf00      	nop
 800d3b2:	3710      	adds	r7, #16
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	58024400 	.word	0x58024400
 800d3bc:	200188ac 	.word	0x200188ac
 800d3c0:	52000080 	.word	0x52000080
 800d3c4:	20018918 	.word	0x20018918
 800d3c8:	52000040 	.word	0x52000040

0800d3cc <HAL_SPI_MspInit>:

}


void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b0be      	sub	sp, #248	@ 0xf8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d3d4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d3d8:	2200      	movs	r2, #0
 800d3da:	601a      	str	r2, [r3, #0]
 800d3dc:	605a      	str	r2, [r3, #4]
 800d3de:	609a      	str	r2, [r3, #8]
 800d3e0:	60da      	str	r2, [r3, #12]
 800d3e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d3e4:	f107 0318 	add.w	r3, r7, #24
 800d3e8:	22c8      	movs	r2, #200	@ 0xc8
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f003 fa9b 	bl	8010928 <memset>
  if(hspi->Instance==SPI5)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4a39      	ldr	r2, [pc, #228]	@ (800d4dc <HAL_SPI_MspInit+0x110>)
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	d16a      	bne.n	800d4d2 <HAL_SPI_MspInit+0x106>
  {

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800d3fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d400:	f04f 0300 	mov.w	r3, #0
 800d404:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800d408:	2300      	movs	r3, #0
 800d40a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d40e:	f107 0318 	add.w	r3, r7, #24
 800d412:	4618      	mov	r0, r3
 800d414:	f7f7 fe02 	bl	800501c <HAL_RCCEx_PeriphCLKConfig>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d001      	beq.n	800d422 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800d41e:	f7fe fd7d 	bl	800bf1c <Error_Handler>
    }

    __HAL_RCC_SPI5_CLK_ENABLE();
 800d422:	4b2f      	ldr	r3, [pc, #188]	@ (800d4e0 <HAL_SPI_MspInit+0x114>)
 800d424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d428:	4a2d      	ldr	r2, [pc, #180]	@ (800d4e0 <HAL_SPI_MspInit+0x114>)
 800d42a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d42e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d432:	4b2b      	ldr	r3, [pc, #172]	@ (800d4e0 <HAL_SPI_MspInit+0x114>)
 800d434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d438:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d43c:	617b      	str	r3, [r7, #20]
 800d43e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800d440:	4b27      	ldr	r3, [pc, #156]	@ (800d4e0 <HAL_SPI_MspInit+0x114>)
 800d442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d446:	4a26      	ldr	r2, [pc, #152]	@ (800d4e0 <HAL_SPI_MspInit+0x114>)
 800d448:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d44c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d450:	4b23      	ldr	r3, [pc, #140]	@ (800d4e0 <HAL_SPI_MspInit+0x114>)
 800d452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d45a:	613b      	str	r3, [r7, #16]
 800d45c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800d45e:	4b20      	ldr	r3, [pc, #128]	@ (800d4e0 <HAL_SPI_MspInit+0x114>)
 800d460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d464:	4a1e      	ldr	r2, [pc, #120]	@ (800d4e0 <HAL_SPI_MspInit+0x114>)
 800d466:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d46a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d46e:	4b1c      	ldr	r3, [pc, #112]	@ (800d4e0 <HAL_SPI_MspInit+0x114>)
 800d470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d478:	60fb      	str	r3, [r7, #12]
 800d47a:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = ARD_D13_Pin;
 800d47c:	2301      	movs	r3, #1
 800d47e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d482:	2302      	movs	r3, #2
 800d484:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d488:	2300      	movs	r3, #0
 800d48a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d48e:	2300      	movs	r3, #0
 800d490:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800d494:	2305      	movs	r3, #5
 800d496:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 800d49a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d49e:	4619      	mov	r1, r3
 800d4a0:	4810      	ldr	r0, [pc, #64]	@ (800d4e4 <HAL_SPI_MspInit+0x118>)
 800d4a2:	f7f4 f97b 	bl	800179c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800d4a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800d4aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4ae:	2302      	movs	r3, #2
 800d4b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800d4c0:	2305      	movs	r3, #5
 800d4c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800d4c6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	4806      	ldr	r0, [pc, #24]	@ (800d4e8 <HAL_SPI_MspInit+0x11c>)
 800d4ce:	f7f4 f965 	bl	800179c <HAL_GPIO_Init>

  }

}
 800d4d2:	bf00      	nop
 800d4d4:	37f8      	adds	r7, #248	@ 0xf8
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	40015000 	.word	0x40015000
 800d4e0:	58024400 	.word	0x58024400
 800d4e4:	58022800 	.word	0x58022800
 800d4e8:	58022400 	.word	0x58022400

0800d4ec <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4a0e      	ldr	r2, [pc, #56]	@ (800d534 <HAL_DMA2D_MspInit+0x48>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d116      	bne.n	800d52c <HAL_DMA2D_MspInit+0x40>
  {

    __HAL_RCC_DMA2D_CLK_ENABLE();
 800d4fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d538 <HAL_DMA2D_MspInit+0x4c>)
 800d500:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d504:	4a0c      	ldr	r2, [pc, #48]	@ (800d538 <HAL_DMA2D_MspInit+0x4c>)
 800d506:	f043 0310 	orr.w	r3, r3, #16
 800d50a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d50e:	4b0a      	ldr	r3, [pc, #40]	@ (800d538 <HAL_DMA2D_MspInit+0x4c>)
 800d510:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d514:	f003 0310 	and.w	r3, r3, #16
 800d518:	60fb      	str	r3, [r7, #12]
 800d51a:	68fb      	ldr	r3, [r7, #12]

    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800d51c:	2200      	movs	r2, #0
 800d51e:	2100      	movs	r1, #0
 800d520:	205a      	movs	r0, #90	@ 0x5a
 800d522:	f7f3 fdc2 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800d526:	205a      	movs	r0, #90	@ 0x5a
 800d528:	f7f3 fdd9 	bl	80010de <HAL_NVIC_EnableIRQ>

  }

}
 800d52c:	bf00      	nop
 800d52e:	3710      	adds	r7, #16
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	52001000 	.word	0x52001000
 800d538:	58024400 	.word	0x58024400

0800d53c <HAL_RTC_MspInit>:


void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b0b4      	sub	sp, #208	@ 0xd0
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d544:	f107 0308 	add.w	r3, r7, #8
 800d548:	22c8      	movs	r2, #200	@ 0xc8
 800d54a:	2100      	movs	r1, #0
 800d54c:	4618      	mov	r0, r3
 800d54e:	f003 f9eb 	bl	8010928 <memset>
  if(hrtc->Instance==RTC)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a10      	ldr	r2, [pc, #64]	@ (800d598 <HAL_RTC_MspInit+0x5c>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d119      	bne.n	800d590 <HAL_RTC_MspInit+0x54>
  {

    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800d55c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800d560:	f04f 0300 	mov.w	r3, #0
 800d564:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d56c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d570:	f107 0308 	add.w	r3, r7, #8
 800d574:	4618      	mov	r0, r3
 800d576:	f7f7 fd51 	bl	800501c <HAL_RCCEx_PeriphCLKConfig>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d001      	beq.n	800d584 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800d580:	f7fe fccc 	bl	800bf1c <Error_Handler>
    }

    __HAL_RCC_RTC_ENABLE();
 800d584:	4b05      	ldr	r3, [pc, #20]	@ (800d59c <HAL_RTC_MspInit+0x60>)
 800d586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d588:	4a04      	ldr	r2, [pc, #16]	@ (800d59c <HAL_RTC_MspInit+0x60>)
 800d58a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d58e:	6713      	str	r3, [r2, #112]	@ 0x70

  }

}
 800d590:	bf00      	nop
 800d592:	37d0      	adds	r7, #208	@ 0xd0
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	58004000 	.word	0x58004000
 800d59c:	58024400 	.word	0x58024400

0800d5a0 <NMI_Handler>:

extern JPEG_HandleTypeDef    JPEG_Handle;


void NMI_Handler(void)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	af00      	add	r7, sp, #0
}
 800d5a4:	bf00      	nop
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <HardFault_Handler>:


void HardFault_Handler(void)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	af00      	add	r7, sp, #0
  while (1)
 800d5b2:	bf00      	nop
 800d5b4:	e7fd      	b.n	800d5b2 <HardFault_Handler+0x4>

0800d5b6 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 800d5b6:	b480      	push	{r7}
 800d5b8:	af00      	add	r7, sp, #0
  while (1)
 800d5ba:	bf00      	nop
 800d5bc:	e7fd      	b.n	800d5ba <MemManage_Handler+0x4>

0800d5be <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 800d5be:	b480      	push	{r7}
 800d5c0:	af00      	add	r7, sp, #0
  while (1)
 800d5c2:	bf00      	nop
 800d5c4:	e7fd      	b.n	800d5c2 <BusFault_Handler+0x4>

0800d5c6 <UsageFault_Handler>:
  }
}


void UsageFault_Handler(void)
{
 800d5c6:	b480      	push	{r7}
 800d5c8:	af00      	add	r7, sp, #0
  while (1)
 800d5ca:	bf00      	nop
 800d5cc:	e7fd      	b.n	800d5ca <UsageFault_Handler+0x4>

0800d5ce <SVC_Handler>:
  }
}


void SVC_Handler(void)
{
 800d5ce:	b480      	push	{r7}
 800d5d0:	af00      	add	r7, sp, #0
}
 800d5d2:	bf00      	nop
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <DebugMon_Handler>:


void DebugMon_Handler(void)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	af00      	add	r7, sp, #0
}
 800d5e0:	bf00      	nop
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr

0800d5ea <PendSV_Handler>:


void PendSV_Handler(void)
{
 800d5ea:	b480      	push	{r7}
 800d5ec:	af00      	add	r7, sp, #0
}
 800d5ee:	bf00      	nop
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr

0800d5f8 <SysTick_Handler>:


void SysTick_Handler(void)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	af00      	add	r7, sp, #0

  HAL_IncTick();
 800d5fc:	f7f3 fc1a 	bl	8000e34 <HAL_IncTick>



}
 800d600:	bf00      	nop
 800d602:	bd80      	pop	{r7, pc}

0800d604 <JPEG_IRQHandler>:


void JPEG_IRQHandler(void)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	af00      	add	r7, sp, #0
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 800d608:	4802      	ldr	r0, [pc, #8]	@ (800d614 <JPEG_IRQHandler+0x10>)
 800d60a:	f7f4 fca9 	bl	8001f60 <HAL_JPEG_IRQHandler>
}
 800d60e:	bf00      	nop
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	200001e4 	.word	0x200001e4

0800d618 <MDMA_IRQHandler>:


void MDMA_IRQHandler()
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	af00      	add	r7, sp, #0
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 800d61c:	4b05      	ldr	r3, [pc, #20]	@ (800d634 <MDMA_IRQHandler+0x1c>)
 800d61e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d620:	4618      	mov	r0, r3
 800d622:	f7f6 fa6d 	bl	8003b00 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);  
 800d626:	4b03      	ldr	r3, [pc, #12]	@ (800d634 <MDMA_IRQHandler+0x1c>)
 800d628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7f6 fa68 	bl	8003b00 <HAL_MDMA_IRQHandler>
}
 800d630:	bf00      	nop
 800d632:	bd80      	pop	{r7, pc}
 800d634:	200001e4 	.word	0x200001e4

0800d638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b086      	sub	sp, #24
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d640:	4a14      	ldr	r2, [pc, #80]	@ (800d694 <_sbrk+0x5c>)
 800d642:	4b15      	ldr	r3, [pc, #84]	@ (800d698 <_sbrk+0x60>)
 800d644:	1ad3      	subs	r3, r2, r3
 800d646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d64c:	4b13      	ldr	r3, [pc, #76]	@ (800d69c <_sbrk+0x64>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d102      	bne.n	800d65a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d654:	4b11      	ldr	r3, [pc, #68]	@ (800d69c <_sbrk+0x64>)
 800d656:	4a12      	ldr	r2, [pc, #72]	@ (800d6a0 <_sbrk+0x68>)
 800d658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d65a:	4b10      	ldr	r3, [pc, #64]	@ (800d69c <_sbrk+0x64>)
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4413      	add	r3, r2
 800d662:	693a      	ldr	r2, [r7, #16]
 800d664:	429a      	cmp	r2, r3
 800d666:	d207      	bcs.n	800d678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d668:	f003 f976 	bl	8010958 <__errno>
 800d66c:	4603      	mov	r3, r0
 800d66e:	220c      	movs	r2, #12
 800d670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d672:	f04f 33ff 	mov.w	r3, #4294967295
 800d676:	e009      	b.n	800d68c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d678:	4b08      	ldr	r3, [pc, #32]	@ (800d69c <_sbrk+0x64>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d67e:	4b07      	ldr	r3, [pc, #28]	@ (800d69c <_sbrk+0x64>)
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4413      	add	r3, r2
 800d686:	4a05      	ldr	r2, [pc, #20]	@ (800d69c <_sbrk+0x64>)
 800d688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d68a:	68fb      	ldr	r3, [r7, #12]
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3718      	adds	r7, #24
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	20020000 	.word	0x20020000
 800d698:	00002000 	.word	0x00002000
 800d69c:	20018984 	.word	0x20018984
 800d6a0:	20018b08 	.word	0x20018b08

0800d6a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800d6a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800d6dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800d6a8:	f7f3 faca 	bl	8000c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d6ac:	480c      	ldr	r0, [pc, #48]	@ (800d6e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800d6ae:	490d      	ldr	r1, [pc, #52]	@ (800d6e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800d6b0:	4a0d      	ldr	r2, [pc, #52]	@ (800d6e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800d6b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d6b4:	e002      	b.n	800d6bc <LoopCopyDataInit>

0800d6b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d6b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d6b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d6ba:	3304      	adds	r3, #4

0800d6bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d6bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d6be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d6c0:	d3f9      	bcc.n	800d6b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d6c2:	4a0a      	ldr	r2, [pc, #40]	@ (800d6ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800d6c4:	4c0a      	ldr	r4, [pc, #40]	@ (800d6f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 800d6c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d6c8:	e001      	b.n	800d6ce <LoopFillZerobss>

0800d6ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d6ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d6cc:	3204      	adds	r2, #4

0800d6ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d6ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d6d0:	d3fb      	bcc.n	800d6ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d6d2:	f003 f947 	bl	8010964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d6d6:	f7fe fbfb 	bl	800bed0 <main>
  bx  lr
 800d6da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d6dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800d6e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d6e4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800d6e8:	08011318 	.word	0x08011318
  ldr r2, =_sbss
 800d6ec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800d6f0:	20018b04 	.word	0x20018b04

0800d6f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d6f4:	e7fe      	b.n	800d6f4 <ADC3_IRQHandler>
	...

0800d6f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	4603      	mov	r3, r0
 800d700:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d702:	79fb      	ldrb	r3, [r7, #7]
 800d704:	4a08      	ldr	r2, [pc, #32]	@ (800d728 <disk_status+0x30>)
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	4413      	add	r3, r2
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	79fa      	ldrb	r2, [r7, #7]
 800d710:	4905      	ldr	r1, [pc, #20]	@ (800d728 <disk_status+0x30>)
 800d712:	440a      	add	r2, r1
 800d714:	7a12      	ldrb	r2, [r2, #8]
 800d716:	4610      	mov	r0, r2
 800d718:	4798      	blx	r3
 800d71a:	4603      	mov	r3, r0
 800d71c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}
 800d728:	200189b0 	.word	0x200189b0

0800d72c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	4603      	mov	r3, r0
 800d734:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d736:	2300      	movs	r3, #0
 800d738:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d73a:	79fb      	ldrb	r3, [r7, #7]
 800d73c:	4a0e      	ldr	r2, [pc, #56]	@ (800d778 <disk_initialize+0x4c>)
 800d73e:	5cd3      	ldrb	r3, [r2, r3]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d114      	bne.n	800d76e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d744:	79fb      	ldrb	r3, [r7, #7]
 800d746:	4a0c      	ldr	r2, [pc, #48]	@ (800d778 <disk_initialize+0x4c>)
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	4413      	add	r3, r2
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	79fa      	ldrb	r2, [r7, #7]
 800d752:	4909      	ldr	r1, [pc, #36]	@ (800d778 <disk_initialize+0x4c>)
 800d754:	440a      	add	r2, r1
 800d756:	7a12      	ldrb	r2, [r2, #8]
 800d758:	4610      	mov	r0, r2
 800d75a:	4798      	blx	r3
 800d75c:	4603      	mov	r3, r0
 800d75e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800d760:	7bfb      	ldrb	r3, [r7, #15]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d103      	bne.n	800d76e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800d766:	79fb      	ldrb	r3, [r7, #7]
 800d768:	4a03      	ldr	r2, [pc, #12]	@ (800d778 <disk_initialize+0x4c>)
 800d76a:	2101      	movs	r1, #1
 800d76c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800d76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3710      	adds	r7, #16
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	200189b0 	.word	0x200189b0

0800d77c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d77c:	b590      	push	{r4, r7, lr}
 800d77e:	b087      	sub	sp, #28
 800d780:	af00      	add	r7, sp, #0
 800d782:	60b9      	str	r1, [r7, #8]
 800d784:	607a      	str	r2, [r7, #4]
 800d786:	603b      	str	r3, [r7, #0]
 800d788:	4603      	mov	r3, r0
 800d78a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
 800d78e:	4a0a      	ldr	r2, [pc, #40]	@ (800d7b8 <disk_read+0x3c>)
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	4413      	add	r3, r2
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	689c      	ldr	r4, [r3, #8]
 800d798:	7bfb      	ldrb	r3, [r7, #15]
 800d79a:	4a07      	ldr	r2, [pc, #28]	@ (800d7b8 <disk_read+0x3c>)
 800d79c:	4413      	add	r3, r2
 800d79e:	7a18      	ldrb	r0, [r3, #8]
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	68b9      	ldr	r1, [r7, #8]
 800d7a6:	47a0      	blx	r4
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800d7ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	371c      	adds	r7, #28
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd90      	pop	{r4, r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	200189b0 	.word	0x200189b0

0800d7bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d7bc:	b590      	push	{r4, r7, lr}
 800d7be:	b087      	sub	sp, #28
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	60b9      	str	r1, [r7, #8]
 800d7c4:	607a      	str	r2, [r7, #4]
 800d7c6:	603b      	str	r3, [r7, #0]
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
 800d7ce:	4a0a      	ldr	r2, [pc, #40]	@ (800d7f8 <disk_write+0x3c>)
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	4413      	add	r3, r2
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	68dc      	ldr	r4, [r3, #12]
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	4a07      	ldr	r2, [pc, #28]	@ (800d7f8 <disk_write+0x3c>)
 800d7dc:	4413      	add	r3, r2
 800d7de:	7a18      	ldrb	r0, [r3, #8]
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	68b9      	ldr	r1, [r7, #8]
 800d7e6:	47a0      	blx	r4
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800d7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	371c      	adds	r7, #28
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd90      	pop	{r4, r7, pc}
 800d7f6:	bf00      	nop
 800d7f8:	200189b0 	.word	0x200189b0

0800d7fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	4603      	mov	r3, r0
 800d804:	603a      	str	r2, [r7, #0]
 800d806:	71fb      	strb	r3, [r7, #7]
 800d808:	460b      	mov	r3, r1
 800d80a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d80c:	79fb      	ldrb	r3, [r7, #7]
 800d80e:	4a09      	ldr	r2, [pc, #36]	@ (800d834 <disk_ioctl+0x38>)
 800d810:	009b      	lsls	r3, r3, #2
 800d812:	4413      	add	r3, r2
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	691b      	ldr	r3, [r3, #16]
 800d818:	79fa      	ldrb	r2, [r7, #7]
 800d81a:	4906      	ldr	r1, [pc, #24]	@ (800d834 <disk_ioctl+0x38>)
 800d81c:	440a      	add	r2, r1
 800d81e:	7a10      	ldrb	r0, [r2, #8]
 800d820:	79b9      	ldrb	r1, [r7, #6]
 800d822:	683a      	ldr	r2, [r7, #0]
 800d824:	4798      	blx	r3
 800d826:	4603      	mov	r3, r0
 800d828:	73fb      	strb	r3, [r7, #15]
  return res;
 800d82a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	200189b0 	.word	0x200189b0

0800d838 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800d838:	b480      	push	{r7}
 800d83a:	af00      	add	r7, sp, #0
  return 0;
 800d83c:	2300      	movs	r3, #0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	3301      	adds	r3, #1
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d858:	89fb      	ldrh	r3, [r7, #14]
 800d85a:	021b      	lsls	r3, r3, #8
 800d85c:	b21a      	sxth	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	b21b      	sxth	r3, r3
 800d864:	4313      	orrs	r3, r2
 800d866:	b21b      	sxth	r3, r3
 800d868:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d86a:	89fb      	ldrh	r3, [r7, #14]
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3714      	adds	r7, #20
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr

0800d878 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d878:	b480      	push	{r7}
 800d87a:	b085      	sub	sp, #20
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	3303      	adds	r3, #3
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	021b      	lsls	r3, r3, #8
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	3202      	adds	r2, #2
 800d890:	7812      	ldrb	r2, [r2, #0]
 800d892:	4313      	orrs	r3, r2
 800d894:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	021b      	lsls	r3, r3, #8
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	3201      	adds	r2, #1
 800d89e:	7812      	ldrb	r2, [r2, #0]
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	021b      	lsls	r3, r3, #8
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	7812      	ldrb	r2, [r2, #0]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	60fb      	str	r3, [r7, #12]
	return rv;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr

0800d8be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d8be:	b480      	push	{r7}
 800d8c0:	b083      	sub	sp, #12
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	1c5a      	adds	r2, r3, #1
 800d8ce:	607a      	str	r2, [r7, #4]
 800d8d0:	887a      	ldrh	r2, [r7, #2]
 800d8d2:	b2d2      	uxtb	r2, r2
 800d8d4:	701a      	strb	r2, [r3, #0]
 800d8d6:	887b      	ldrh	r3, [r7, #2]
 800d8d8:	0a1b      	lsrs	r3, r3, #8
 800d8da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	1c5a      	adds	r2, r3, #1
 800d8e0:	607a      	str	r2, [r7, #4]
 800d8e2:	887a      	ldrh	r2, [r7, #2]
 800d8e4:	b2d2      	uxtb	r2, r2
 800d8e6:	701a      	strb	r2, [r3, #0]
}
 800d8e8:	bf00      	nop
 800d8ea:	370c      	adds	r7, #12
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f2:	4770      	bx	lr

0800d8f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
 800d8fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	1c5a      	adds	r2, r3, #1
 800d902:	607a      	str	r2, [r7, #4]
 800d904:	683a      	ldr	r2, [r7, #0]
 800d906:	b2d2      	uxtb	r2, r2
 800d908:	701a      	strb	r2, [r3, #0]
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	0a1b      	lsrs	r3, r3, #8
 800d90e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	1c5a      	adds	r2, r3, #1
 800d914:	607a      	str	r2, [r7, #4]
 800d916:	683a      	ldr	r2, [r7, #0]
 800d918:	b2d2      	uxtb	r2, r2
 800d91a:	701a      	strb	r2, [r3, #0]
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	0a1b      	lsrs	r3, r3, #8
 800d920:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	1c5a      	adds	r2, r3, #1
 800d926:	607a      	str	r2, [r7, #4]
 800d928:	683a      	ldr	r2, [r7, #0]
 800d92a:	b2d2      	uxtb	r2, r2
 800d92c:	701a      	strb	r2, [r3, #0]
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	0a1b      	lsrs	r3, r3, #8
 800d932:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	1c5a      	adds	r2, r3, #1
 800d938:	607a      	str	r2, [r7, #4]
 800d93a:	683a      	ldr	r2, [r7, #0]
 800d93c:	b2d2      	uxtb	r2, r2
 800d93e:	701a      	strb	r2, [r3, #0]
}
 800d940:	bf00      	nop
 800d942:	370c      	adds	r7, #12
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d94c:	b480      	push	{r7}
 800d94e:	b087      	sub	sp, #28
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00d      	beq.n	800d982 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d966:	693a      	ldr	r2, [r7, #16]
 800d968:	1c53      	adds	r3, r2, #1
 800d96a:	613b      	str	r3, [r7, #16]
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	1c59      	adds	r1, r3, #1
 800d970:	6179      	str	r1, [r7, #20]
 800d972:	7812      	ldrb	r2, [r2, #0]
 800d974:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	3b01      	subs	r3, #1
 800d97a:	607b      	str	r3, [r7, #4]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1f1      	bne.n	800d966 <mem_cpy+0x1a>
	}
}
 800d982:	bf00      	nop
 800d984:	371c      	adds	r7, #28
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr

0800d98e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d98e:	b480      	push	{r7}
 800d990:	b087      	sub	sp, #28
 800d992:	af00      	add	r7, sp, #0
 800d994:	60f8      	str	r0, [r7, #12]
 800d996:	60b9      	str	r1, [r7, #8]
 800d998:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	1c5a      	adds	r2, r3, #1
 800d9a2:	617a      	str	r2, [r7, #20]
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	b2d2      	uxtb	r2, r2
 800d9a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	607b      	str	r3, [r7, #4]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d1f3      	bne.n	800d99e <mem_set+0x10>
}
 800d9b6:	bf00      	nop
 800d9b8:	bf00      	nop
 800d9ba:	371c      	adds	r7, #28
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d9c4:	b480      	push	{r7}
 800d9c6:	b089      	sub	sp, #36	@ 0x24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	61fb      	str	r3, [r7, #28]
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	1c5a      	adds	r2, r3, #1
 800d9e0:	61fa      	str	r2, [r7, #28]
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	1c5a      	adds	r2, r3, #1
 800d9ea:	61ba      	str	r2, [r7, #24]
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	1acb      	subs	r3, r1, r3
 800d9f0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	3b01      	subs	r3, #1
 800d9f6:	607b      	str	r3, [r7, #4]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d002      	beq.n	800da04 <mem_cmp+0x40>
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d0eb      	beq.n	800d9dc <mem_cmp+0x18>

	return r;
 800da04:	697b      	ldr	r3, [r7, #20]
}
 800da06:	4618      	mov	r0, r3
 800da08:	3724      	adds	r7, #36	@ 0x24
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr

0800da12 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800da12:	b480      	push	{r7}
 800da14:	b083      	sub	sp, #12
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
 800da1a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800da1c:	e002      	b.n	800da24 <chk_chr+0x12>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	3301      	adds	r3, #1
 800da22:	607b      	str	r3, [r7, #4]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d005      	beq.n	800da38 <chk_chr+0x26>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	461a      	mov	r2, r3
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	4293      	cmp	r3, r2
 800da36:	d1f2      	bne.n	800da1e <chk_chr+0xc>
	return *str;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	781b      	ldrb	r3, [r3, #0]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	370c      	adds	r7, #12
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800da48:	b480      	push	{r7}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800da52:	2300      	movs	r3, #0
 800da54:	60bb      	str	r3, [r7, #8]
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	60fb      	str	r3, [r7, #12]
 800da5a:	e029      	b.n	800dab0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800da5c:	4a27      	ldr	r2, [pc, #156]	@ (800dafc <chk_lock+0xb4>)
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	011b      	lsls	r3, r3, #4
 800da62:	4413      	add	r3, r2
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d01d      	beq.n	800daa6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800da6a:	4a24      	ldr	r2, [pc, #144]	@ (800dafc <chk_lock+0xb4>)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	011b      	lsls	r3, r3, #4
 800da70:	4413      	add	r3, r2
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d116      	bne.n	800daaa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800da7c:	4a1f      	ldr	r2, [pc, #124]	@ (800dafc <chk_lock+0xb4>)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	011b      	lsls	r3, r3, #4
 800da82:	4413      	add	r3, r2
 800da84:	3304      	adds	r3, #4
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d10c      	bne.n	800daaa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800da90:	4a1a      	ldr	r2, [pc, #104]	@ (800dafc <chk_lock+0xb4>)
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	011b      	lsls	r3, r3, #4
 800da96:	4413      	add	r3, r2
 800da98:	3308      	adds	r3, #8
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d102      	bne.n	800daaa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800daa4:	e007      	b.n	800dab6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800daa6:	2301      	movs	r3, #1
 800daa8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	3301      	adds	r3, #1
 800daae:	60fb      	str	r3, [r7, #12]
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d9d2      	bls.n	800da5c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2b02      	cmp	r3, #2
 800daba:	d109      	bne.n	800dad0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d102      	bne.n	800dac8 <chk_lock+0x80>
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	2b02      	cmp	r3, #2
 800dac6:	d101      	bne.n	800dacc <chk_lock+0x84>
 800dac8:	2300      	movs	r3, #0
 800daca:	e010      	b.n	800daee <chk_lock+0xa6>
 800dacc:	2312      	movs	r3, #18
 800dace:	e00e      	b.n	800daee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d108      	bne.n	800dae8 <chk_lock+0xa0>
 800dad6:	4a09      	ldr	r2, [pc, #36]	@ (800dafc <chk_lock+0xb4>)
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	011b      	lsls	r3, r3, #4
 800dadc:	4413      	add	r3, r2
 800dade:	330c      	adds	r3, #12
 800dae0:	881b      	ldrh	r3, [r3, #0]
 800dae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dae6:	d101      	bne.n	800daec <chk_lock+0xa4>
 800dae8:	2310      	movs	r3, #16
 800daea:	e000      	b.n	800daee <chk_lock+0xa6>
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3714      	adds	r7, #20
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop
 800dafc:	20018990 	.word	0x20018990

0800db00 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800db00:	b480      	push	{r7}
 800db02:	b083      	sub	sp, #12
 800db04:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800db06:	2300      	movs	r3, #0
 800db08:	607b      	str	r3, [r7, #4]
 800db0a:	e002      	b.n	800db12 <enq_lock+0x12>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	3301      	adds	r3, #1
 800db10:	607b      	str	r3, [r7, #4]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2b01      	cmp	r3, #1
 800db16:	d806      	bhi.n	800db26 <enq_lock+0x26>
 800db18:	4a09      	ldr	r2, [pc, #36]	@ (800db40 <enq_lock+0x40>)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	011b      	lsls	r3, r3, #4
 800db1e:	4413      	add	r3, r2
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d1f2      	bne.n	800db0c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2b02      	cmp	r3, #2
 800db2a:	bf14      	ite	ne
 800db2c:	2301      	movne	r3, #1
 800db2e:	2300      	moveq	r3, #0
 800db30:	b2db      	uxtb	r3, r3
}
 800db32:	4618      	mov	r0, r3
 800db34:	370c      	adds	r7, #12
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr
 800db3e:	bf00      	nop
 800db40:	20018990 	.word	0x20018990

0800db44 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800db44:	b480      	push	{r7}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800db4e:	2300      	movs	r3, #0
 800db50:	60fb      	str	r3, [r7, #12]
 800db52:	e01f      	b.n	800db94 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800db54:	4a41      	ldr	r2, [pc, #260]	@ (800dc5c <inc_lock+0x118>)
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	011b      	lsls	r3, r3, #4
 800db5a:	4413      	add	r3, r2
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	429a      	cmp	r2, r3
 800db64:	d113      	bne.n	800db8e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800db66:	4a3d      	ldr	r2, [pc, #244]	@ (800dc5c <inc_lock+0x118>)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	011b      	lsls	r3, r3, #4
 800db6c:	4413      	add	r3, r2
 800db6e:	3304      	adds	r3, #4
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800db76:	429a      	cmp	r2, r3
 800db78:	d109      	bne.n	800db8e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800db7a:	4a38      	ldr	r2, [pc, #224]	@ (800dc5c <inc_lock+0x118>)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	011b      	lsls	r3, r3, #4
 800db80:	4413      	add	r3, r2
 800db82:	3308      	adds	r3, #8
 800db84:	681a      	ldr	r2, [r3, #0]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d006      	beq.n	800db9c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	3301      	adds	r3, #1
 800db92:	60fb      	str	r3, [r7, #12]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d9dc      	bls.n	800db54 <inc_lock+0x10>
 800db9a:	e000      	b.n	800db9e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800db9c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2b02      	cmp	r3, #2
 800dba2:	d132      	bne.n	800dc0a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dba4:	2300      	movs	r3, #0
 800dba6:	60fb      	str	r3, [r7, #12]
 800dba8:	e002      	b.n	800dbb0 <inc_lock+0x6c>
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	3301      	adds	r3, #1
 800dbae:	60fb      	str	r3, [r7, #12]
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d806      	bhi.n	800dbc4 <inc_lock+0x80>
 800dbb6:	4a29      	ldr	r2, [pc, #164]	@ (800dc5c <inc_lock+0x118>)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	011b      	lsls	r3, r3, #4
 800dbbc:	4413      	add	r3, r2
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d1f2      	bne.n	800dbaa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2b02      	cmp	r3, #2
 800dbc8:	d101      	bne.n	800dbce <inc_lock+0x8a>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	e040      	b.n	800dc50 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	4922      	ldr	r1, [pc, #136]	@ (800dc5c <inc_lock+0x118>)
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	011b      	lsls	r3, r3, #4
 800dbd8:	440b      	add	r3, r1
 800dbda:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	689a      	ldr	r2, [r3, #8]
 800dbe0:	491e      	ldr	r1, [pc, #120]	@ (800dc5c <inc_lock+0x118>)
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	011b      	lsls	r3, r3, #4
 800dbe6:	440b      	add	r3, r1
 800dbe8:	3304      	adds	r3, #4
 800dbea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	695a      	ldr	r2, [r3, #20]
 800dbf0:	491a      	ldr	r1, [pc, #104]	@ (800dc5c <inc_lock+0x118>)
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	011b      	lsls	r3, r3, #4
 800dbf6:	440b      	add	r3, r1
 800dbf8:	3308      	adds	r3, #8
 800dbfa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800dbfc:	4a17      	ldr	r2, [pc, #92]	@ (800dc5c <inc_lock+0x118>)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	011b      	lsls	r3, r3, #4
 800dc02:	4413      	add	r3, r2
 800dc04:	330c      	adds	r3, #12
 800dc06:	2200      	movs	r2, #0
 800dc08:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d009      	beq.n	800dc24 <inc_lock+0xe0>
 800dc10:	4a12      	ldr	r2, [pc, #72]	@ (800dc5c <inc_lock+0x118>)
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	011b      	lsls	r3, r3, #4
 800dc16:	4413      	add	r3, r2
 800dc18:	330c      	adds	r3, #12
 800dc1a:	881b      	ldrh	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d001      	beq.n	800dc24 <inc_lock+0xe0>
 800dc20:	2300      	movs	r3, #0
 800dc22:	e015      	b.n	800dc50 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d108      	bne.n	800dc3c <inc_lock+0xf8>
 800dc2a:	4a0c      	ldr	r2, [pc, #48]	@ (800dc5c <inc_lock+0x118>)
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	011b      	lsls	r3, r3, #4
 800dc30:	4413      	add	r3, r2
 800dc32:	330c      	adds	r3, #12
 800dc34:	881b      	ldrh	r3, [r3, #0]
 800dc36:	3301      	adds	r3, #1
 800dc38:	b29a      	uxth	r2, r3
 800dc3a:	e001      	b.n	800dc40 <inc_lock+0xfc>
 800dc3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dc40:	4906      	ldr	r1, [pc, #24]	@ (800dc5c <inc_lock+0x118>)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	011b      	lsls	r3, r3, #4
 800dc46:	440b      	add	r3, r1
 800dc48:	330c      	adds	r3, #12
 800dc4a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	3301      	adds	r3, #1
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3714      	adds	r7, #20
 800dc54:	46bd      	mov	sp, r7
 800dc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5a:	4770      	bx	lr
 800dc5c:	20018990 	.word	0x20018990

0800dc60 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b085      	sub	sp, #20
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	607b      	str	r3, [r7, #4]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d825      	bhi.n	800dcc0 <dec_lock+0x60>
		n = Files[i].ctr;
 800dc74:	4a17      	ldr	r2, [pc, #92]	@ (800dcd4 <dec_lock+0x74>)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	011b      	lsls	r3, r3, #4
 800dc7a:	4413      	add	r3, r2
 800dc7c:	330c      	adds	r3, #12
 800dc7e:	881b      	ldrh	r3, [r3, #0]
 800dc80:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800dc82:	89fb      	ldrh	r3, [r7, #14]
 800dc84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc88:	d101      	bne.n	800dc8e <dec_lock+0x2e>
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800dc8e:	89fb      	ldrh	r3, [r7, #14]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d002      	beq.n	800dc9a <dec_lock+0x3a>
 800dc94:	89fb      	ldrh	r3, [r7, #14]
 800dc96:	3b01      	subs	r3, #1
 800dc98:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800dc9a:	4a0e      	ldr	r2, [pc, #56]	@ (800dcd4 <dec_lock+0x74>)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	011b      	lsls	r3, r3, #4
 800dca0:	4413      	add	r3, r2
 800dca2:	330c      	adds	r3, #12
 800dca4:	89fa      	ldrh	r2, [r7, #14]
 800dca6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800dca8:	89fb      	ldrh	r3, [r7, #14]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d105      	bne.n	800dcba <dec_lock+0x5a>
 800dcae:	4a09      	ldr	r2, [pc, #36]	@ (800dcd4 <dec_lock+0x74>)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	011b      	lsls	r3, r3, #4
 800dcb4:	4413      	add	r3, r2
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	737b      	strb	r3, [r7, #13]
 800dcbe:	e001      	b.n	800dcc4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800dcc4:	7b7b      	ldrb	r3, [r7, #13]
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3714      	adds	r7, #20
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr
 800dcd2:	bf00      	nop
 800dcd4:	20018990 	.word	0x20018990

0800dcd8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b085      	sub	sp, #20
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800dce0:	2300      	movs	r3, #0
 800dce2:	60fb      	str	r3, [r7, #12]
 800dce4:	e010      	b.n	800dd08 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dce6:	4a0d      	ldr	r2, [pc, #52]	@ (800dd1c <clear_lock+0x44>)
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	011b      	lsls	r3, r3, #4
 800dcec:	4413      	add	r3, r2
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d105      	bne.n	800dd02 <clear_lock+0x2a>
 800dcf6:	4a09      	ldr	r2, [pc, #36]	@ (800dd1c <clear_lock+0x44>)
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	011b      	lsls	r3, r3, #4
 800dcfc:	4413      	add	r3, r2
 800dcfe:	2200      	movs	r2, #0
 800dd00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	3301      	adds	r3, #1
 800dd06:	60fb      	str	r3, [r7, #12]
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d9eb      	bls.n	800dce6 <clear_lock+0xe>
	}
}
 800dd0e:	bf00      	nop
 800dd10:	bf00      	nop
 800dd12:	3714      	adds	r7, #20
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr
 800dd1c:	20018990 	.word	0x20018990

0800dd20 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b086      	sub	sp, #24
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	78db      	ldrb	r3, [r3, #3]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d034      	beq.n	800dd9e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd38:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	7858      	ldrb	r0, [r3, #1]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800dd44:	2301      	movs	r3, #1
 800dd46:	697a      	ldr	r2, [r7, #20]
 800dd48:	f7ff fd38 	bl	800d7bc <disk_write>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d002      	beq.n	800dd58 <sync_window+0x38>
			res = FR_DISK_ERR;
 800dd52:	2301      	movs	r3, #1
 800dd54:	73fb      	strb	r3, [r7, #15]
 800dd56:	e022      	b.n	800dd9e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd62:	697a      	ldr	r2, [r7, #20]
 800dd64:	1ad2      	subs	r2, r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	69db      	ldr	r3, [r3, #28]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d217      	bcs.n	800dd9e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	789b      	ldrb	r3, [r3, #2]
 800dd72:	613b      	str	r3, [r7, #16]
 800dd74:	e010      	b.n	800dd98 <sync_window+0x78>
					wsect += fs->fsize;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	69db      	ldr	r3, [r3, #28]
 800dd7a:	697a      	ldr	r2, [r7, #20]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	7858      	ldrb	r0, [r3, #1]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	697a      	ldr	r2, [r7, #20]
 800dd8e:	f7ff fd15 	bl	800d7bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	3b01      	subs	r3, #1
 800dd96:	613b      	str	r3, [r7, #16]
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d8eb      	bhi.n	800dd76 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800dd9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3718      	adds	r7, #24
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddba:	683a      	ldr	r2, [r7, #0]
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d01b      	beq.n	800ddf8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f7ff ffad 	bl	800dd20 <sync_window>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ddca:	7bfb      	ldrb	r3, [r7, #15]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d113      	bne.n	800ddf8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	7858      	ldrb	r0, [r3, #1]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ddda:	2301      	movs	r3, #1
 800dddc:	683a      	ldr	r2, [r7, #0]
 800ddde:	f7ff fccd 	bl	800d77c <disk_read>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d004      	beq.n	800ddf2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dde8:	f04f 33ff 	mov.w	r3, #4294967295
 800ddec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	683a      	ldr	r2, [r7, #0]
 800ddf6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800ddf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3710      	adds	r7, #16
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
	...

0800de04 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f7ff ff87 	bl	800dd20 <sync_window>
 800de12:	4603      	mov	r3, r0
 800de14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800de16:	7bfb      	ldrb	r3, [r7, #15]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d158      	bne.n	800dece <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	2b03      	cmp	r3, #3
 800de22:	d148      	bne.n	800deb6 <sync_fs+0xb2>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	791b      	ldrb	r3, [r3, #4]
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d144      	bne.n	800deb6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	3334      	adds	r3, #52	@ 0x34
 800de30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de34:	2100      	movs	r1, #0
 800de36:	4618      	mov	r0, r3
 800de38:	f7ff fda9 	bl	800d98e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	3334      	adds	r3, #52	@ 0x34
 800de40:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800de44:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800de48:	4618      	mov	r0, r3
 800de4a:	f7ff fd38 	bl	800d8be <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	3334      	adds	r3, #52	@ 0x34
 800de52:	4921      	ldr	r1, [pc, #132]	@ (800ded8 <sync_fs+0xd4>)
 800de54:	4618      	mov	r0, r3
 800de56:	f7ff fd4d 	bl	800d8f4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	3334      	adds	r3, #52	@ 0x34
 800de5e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800de62:	491e      	ldr	r1, [pc, #120]	@ (800dedc <sync_fs+0xd8>)
 800de64:	4618      	mov	r0, r3
 800de66:	f7ff fd45 	bl	800d8f4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	3334      	adds	r3, #52	@ 0x34
 800de6e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	695b      	ldr	r3, [r3, #20]
 800de76:	4619      	mov	r1, r3
 800de78:	4610      	mov	r0, r2
 800de7a:	f7ff fd3b 	bl	800d8f4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	3334      	adds	r3, #52	@ 0x34
 800de82:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	691b      	ldr	r3, [r3, #16]
 800de8a:	4619      	mov	r1, r3
 800de8c:	4610      	mov	r0, r2
 800de8e:	f7ff fd31 	bl	800d8f4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a1b      	ldr	r3, [r3, #32]
 800de96:	1c5a      	adds	r2, r3, #1
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	7858      	ldrb	r0, [r3, #1]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800deaa:	2301      	movs	r3, #1
 800deac:	f7ff fc86 	bl	800d7bc <disk_write>
			fs->fsi_flag = 0;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2200      	movs	r2, #0
 800deb4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	785b      	ldrb	r3, [r3, #1]
 800deba:	2200      	movs	r2, #0
 800debc:	2100      	movs	r1, #0
 800debe:	4618      	mov	r0, r3
 800dec0:	f7ff fc9c 	bl	800d7fc <disk_ioctl>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d001      	beq.n	800dece <sync_fs+0xca>
 800deca:	2301      	movs	r3, #1
 800decc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dece:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3710      	adds	r7, #16
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	41615252 	.word	0x41615252
 800dedc:	61417272 	.word	0x61417272

0800dee0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	3b02      	subs	r3, #2
 800deee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	699b      	ldr	r3, [r3, #24]
 800def4:	3b02      	subs	r3, #2
 800def6:	683a      	ldr	r2, [r7, #0]
 800def8:	429a      	cmp	r2, r3
 800defa:	d301      	bcc.n	800df00 <clust2sect+0x20>
 800defc:	2300      	movs	r3, #0
 800defe:	e008      	b.n	800df12 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	895b      	ldrh	r3, [r3, #10]
 800df04:	461a      	mov	r2, r3
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	fb03 f202 	mul.w	r2, r3, r2
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df10:	4413      	add	r3, r2
}
 800df12:	4618      	mov	r0, r3
 800df14:	370c      	adds	r7, #12
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr

0800df1e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800df1e:	b580      	push	{r7, lr}
 800df20:	b086      	sub	sp, #24
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]
 800df26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	2b01      	cmp	r3, #1
 800df32:	d904      	bls.n	800df3e <get_fat+0x20>
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	699b      	ldr	r3, [r3, #24]
 800df38:	683a      	ldr	r2, [r7, #0]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d302      	bcc.n	800df44 <get_fat+0x26>
		val = 1;	/* Internal error */
 800df3e:	2301      	movs	r3, #1
 800df40:	617b      	str	r3, [r7, #20]
 800df42:	e08e      	b.n	800e062 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800df44:	f04f 33ff 	mov.w	r3, #4294967295
 800df48:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	2b03      	cmp	r3, #3
 800df50:	d061      	beq.n	800e016 <get_fat+0xf8>
 800df52:	2b03      	cmp	r3, #3
 800df54:	dc7b      	bgt.n	800e04e <get_fat+0x130>
 800df56:	2b01      	cmp	r3, #1
 800df58:	d002      	beq.n	800df60 <get_fat+0x42>
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	d041      	beq.n	800dfe2 <get_fat+0xc4>
 800df5e:	e076      	b.n	800e04e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	60fb      	str	r3, [r7, #12]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	085b      	lsrs	r3, r3, #1
 800df68:	68fa      	ldr	r2, [r7, #12]
 800df6a:	4413      	add	r3, r2
 800df6c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df6e:	693b      	ldr	r3, [r7, #16]
 800df70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	0a5b      	lsrs	r3, r3, #9
 800df76:	4413      	add	r3, r2
 800df78:	4619      	mov	r1, r3
 800df7a:	6938      	ldr	r0, [r7, #16]
 800df7c:	f7ff ff14 	bl	800dda8 <move_window>
 800df80:	4603      	mov	r3, r0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d166      	bne.n	800e054 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	1c5a      	adds	r2, r3, #1
 800df8a:	60fa      	str	r2, [r7, #12]
 800df8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df90:	693a      	ldr	r2, [r7, #16]
 800df92:	4413      	add	r3, r2
 800df94:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800df98:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	0a5b      	lsrs	r3, r3, #9
 800dfa2:	4413      	add	r3, r2
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	6938      	ldr	r0, [r7, #16]
 800dfa8:	f7ff fefe 	bl	800dda8 <move_window>
 800dfac:	4603      	mov	r3, r0
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d152      	bne.n	800e058 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfb8:	693a      	ldr	r2, [r7, #16]
 800dfba:	4413      	add	r3, r2
 800dfbc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dfc0:	021b      	lsls	r3, r3, #8
 800dfc2:	68ba      	ldr	r2, [r7, #8]
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	f003 0301 	and.w	r3, r3, #1
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d002      	beq.n	800dfd8 <get_fat+0xba>
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	091b      	lsrs	r3, r3, #4
 800dfd6:	e002      	b.n	800dfde <get_fat+0xc0>
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dfde:	617b      	str	r3, [r7, #20]
			break;
 800dfe0:	e03f      	b.n	800e062 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	0a1b      	lsrs	r3, r3, #8
 800dfea:	4413      	add	r3, r2
 800dfec:	4619      	mov	r1, r3
 800dfee:	6938      	ldr	r0, [r7, #16]
 800dff0:	f7ff feda 	bl	800dda8 <move_window>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d130      	bne.n	800e05c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	005b      	lsls	r3, r3, #1
 800e004:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e008:	4413      	add	r3, r2
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7ff fc1c 	bl	800d848 <ld_word>
 800e010:	4603      	mov	r3, r0
 800e012:	617b      	str	r3, [r7, #20]
			break;
 800e014:	e025      	b.n	800e062 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	09db      	lsrs	r3, r3, #7
 800e01e:	4413      	add	r3, r2
 800e020:	4619      	mov	r1, r3
 800e022:	6938      	ldr	r0, [r7, #16]
 800e024:	f7ff fec0 	bl	800dda8 <move_window>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d118      	bne.n	800e060 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e03c:	4413      	add	r3, r2
 800e03e:	4618      	mov	r0, r3
 800e040:	f7ff fc1a 	bl	800d878 <ld_dword>
 800e044:	4603      	mov	r3, r0
 800e046:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e04a:	617b      	str	r3, [r7, #20]
			break;
 800e04c:	e009      	b.n	800e062 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e04e:	2301      	movs	r3, #1
 800e050:	617b      	str	r3, [r7, #20]
 800e052:	e006      	b.n	800e062 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e054:	bf00      	nop
 800e056:	e004      	b.n	800e062 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e058:	bf00      	nop
 800e05a:	e002      	b.n	800e062 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e05c:	bf00      	nop
 800e05e:	e000      	b.n	800e062 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e060:	bf00      	nop
		}
	}

	return val;
 800e062:	697b      	ldr	r3, [r7, #20]
}
 800e064:	4618      	mov	r0, r3
 800e066:	3718      	adds	r7, #24
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e06c:	b590      	push	{r4, r7, lr}
 800e06e:	b089      	sub	sp, #36	@ 0x24
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	60b9      	str	r1, [r7, #8]
 800e076:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e078:	2302      	movs	r3, #2
 800e07a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	2b01      	cmp	r3, #1
 800e080:	f240 80d9 	bls.w	800e236 <put_fat+0x1ca>
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	699b      	ldr	r3, [r3, #24]
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	f080 80d3 	bcs.w	800e236 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	2b03      	cmp	r3, #3
 800e096:	f000 8096 	beq.w	800e1c6 <put_fat+0x15a>
 800e09a:	2b03      	cmp	r3, #3
 800e09c:	f300 80cb 	bgt.w	800e236 <put_fat+0x1ca>
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d002      	beq.n	800e0aa <put_fat+0x3e>
 800e0a4:	2b02      	cmp	r3, #2
 800e0a6:	d06e      	beq.n	800e186 <put_fat+0x11a>
 800e0a8:	e0c5      	b.n	800e236 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	61bb      	str	r3, [r7, #24]
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	085b      	lsrs	r3, r3, #1
 800e0b2:	69ba      	ldr	r2, [r7, #24]
 800e0b4:	4413      	add	r3, r2
 800e0b6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e0bc:	69bb      	ldr	r3, [r7, #24]
 800e0be:	0a5b      	lsrs	r3, r3, #9
 800e0c0:	4413      	add	r3, r2
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	68f8      	ldr	r0, [r7, #12]
 800e0c6:	f7ff fe6f 	bl	800dda8 <move_window>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e0ce:	7ffb      	ldrb	r3, [r7, #31]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	f040 80a9 	bne.w	800e228 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	1c59      	adds	r1, r3, #1
 800e0e0:	61b9      	str	r1, [r7, #24]
 800e0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0e6:	4413      	add	r3, r2
 800e0e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	f003 0301 	and.w	r3, r3, #1
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00d      	beq.n	800e110 <put_fat+0xa4>
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	b25b      	sxtb	r3, r3
 800e0fa:	f003 030f 	and.w	r3, r3, #15
 800e0fe:	b25a      	sxtb	r2, r3
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	b2db      	uxtb	r3, r3
 800e104:	011b      	lsls	r3, r3, #4
 800e106:	b25b      	sxtb	r3, r3
 800e108:	4313      	orrs	r3, r2
 800e10a:	b25b      	sxtb	r3, r3
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	e001      	b.n	800e114 <put_fat+0xa8>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	b2db      	uxtb	r3, r3
 800e114:	697a      	ldr	r2, [r7, #20]
 800e116:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	2201      	movs	r2, #1
 800e11c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	0a5b      	lsrs	r3, r3, #9
 800e126:	4413      	add	r3, r2
 800e128:	4619      	mov	r1, r3
 800e12a:	68f8      	ldr	r0, [r7, #12]
 800e12c:	f7ff fe3c 	bl	800dda8 <move_window>
 800e130:	4603      	mov	r3, r0
 800e132:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e134:	7ffb      	ldrb	r3, [r7, #31]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d178      	bne.n	800e22c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e146:	4413      	add	r3, r2
 800e148:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	f003 0301 	and.w	r3, r3, #1
 800e150:	2b00      	cmp	r3, #0
 800e152:	d003      	beq.n	800e15c <put_fat+0xf0>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	091b      	lsrs	r3, r3, #4
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	e00e      	b.n	800e17a <put_fat+0x10e>
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	781b      	ldrb	r3, [r3, #0]
 800e160:	b25b      	sxtb	r3, r3
 800e162:	f023 030f 	bic.w	r3, r3, #15
 800e166:	b25a      	sxtb	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	0a1b      	lsrs	r3, r3, #8
 800e16c:	b25b      	sxtb	r3, r3
 800e16e:	f003 030f 	and.w	r3, r3, #15
 800e172:	b25b      	sxtb	r3, r3
 800e174:	4313      	orrs	r3, r2
 800e176:	b25b      	sxtb	r3, r3
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	697a      	ldr	r2, [r7, #20]
 800e17c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2201      	movs	r2, #1
 800e182:	70da      	strb	r2, [r3, #3]
			break;
 800e184:	e057      	b.n	800e236 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	0a1b      	lsrs	r3, r3, #8
 800e18e:	4413      	add	r3, r2
 800e190:	4619      	mov	r1, r3
 800e192:	68f8      	ldr	r0, [r7, #12]
 800e194:	f7ff fe08 	bl	800dda8 <move_window>
 800e198:	4603      	mov	r3, r0
 800e19a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e19c:	7ffb      	ldrb	r3, [r7, #31]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d146      	bne.n	800e230 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	005b      	lsls	r3, r3, #1
 800e1ac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e1b0:	4413      	add	r3, r2
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	b292      	uxth	r2, r2
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7ff fb80 	bl	800d8be <st_word>
			fs->wflag = 1;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	70da      	strb	r2, [r3, #3]
			break;
 800e1c4:	e037      	b.n	800e236 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	09db      	lsrs	r3, r3, #7
 800e1ce:	4413      	add	r3, r2
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	f7ff fde8 	bl	800dda8 <move_window>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e1dc:	7ffb      	ldrb	r3, [r7, #31]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d128      	bne.n	800e234 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	009b      	lsls	r3, r3, #2
 800e1f2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e1f6:	4413      	add	r3, r2
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7ff fb3d 	bl	800d878 <ld_dword>
 800e1fe:	4603      	mov	r3, r0
 800e200:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e204:	4323      	orrs	r3, r4
 800e206:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e216:	4413      	add	r3, r2
 800e218:	6879      	ldr	r1, [r7, #4]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7ff fb6a 	bl	800d8f4 <st_dword>
			fs->wflag = 1;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2201      	movs	r2, #1
 800e224:	70da      	strb	r2, [r3, #3]
			break;
 800e226:	e006      	b.n	800e236 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e228:	bf00      	nop
 800e22a:	e004      	b.n	800e236 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e22c:	bf00      	nop
 800e22e:	e002      	b.n	800e236 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e230:	bf00      	nop
 800e232:	e000      	b.n	800e236 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e234:	bf00      	nop
		}
	}
	return res;
 800e236:	7ffb      	ldrb	r3, [r7, #31]
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3724      	adds	r7, #36	@ 0x24
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd90      	pop	{r4, r7, pc}

0800e240 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b088      	sub	sp, #32
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e24c:	2300      	movs	r3, #0
 800e24e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d904      	bls.n	800e266 <remove_chain+0x26>
 800e25c:	69bb      	ldr	r3, [r7, #24]
 800e25e:	699b      	ldr	r3, [r3, #24]
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	429a      	cmp	r2, r3
 800e264:	d301      	bcc.n	800e26a <remove_chain+0x2a>
 800e266:	2302      	movs	r3, #2
 800e268:	e04b      	b.n	800e302 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d00c      	beq.n	800e28a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e270:	f04f 32ff 	mov.w	r2, #4294967295
 800e274:	6879      	ldr	r1, [r7, #4]
 800e276:	69b8      	ldr	r0, [r7, #24]
 800e278:	f7ff fef8 	bl	800e06c <put_fat>
 800e27c:	4603      	mov	r3, r0
 800e27e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e280:	7ffb      	ldrb	r3, [r7, #31]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <remove_chain+0x4a>
 800e286:	7ffb      	ldrb	r3, [r7, #31]
 800e288:	e03b      	b.n	800e302 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e28a:	68b9      	ldr	r1, [r7, #8]
 800e28c:	68f8      	ldr	r0, [r7, #12]
 800e28e:	f7ff fe46 	bl	800df1e <get_fat>
 800e292:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d031      	beq.n	800e2fe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d101      	bne.n	800e2a4 <remove_chain+0x64>
 800e2a0:	2302      	movs	r3, #2
 800e2a2:	e02e      	b.n	800e302 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2aa:	d101      	bne.n	800e2b0 <remove_chain+0x70>
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	e028      	b.n	800e302 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	68b9      	ldr	r1, [r7, #8]
 800e2b4:	69b8      	ldr	r0, [r7, #24]
 800e2b6:	f7ff fed9 	bl	800e06c <put_fat>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e2be:	7ffb      	ldrb	r3, [r7, #31]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d001      	beq.n	800e2c8 <remove_chain+0x88>
 800e2c4:	7ffb      	ldrb	r3, [r7, #31]
 800e2c6:	e01c      	b.n	800e302 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	695a      	ldr	r2, [r3, #20]
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	699b      	ldr	r3, [r3, #24]
 800e2d0:	3b02      	subs	r3, #2
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d20b      	bcs.n	800e2ee <remove_chain+0xae>
			fs->free_clst++;
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	695b      	ldr	r3, [r3, #20]
 800e2da:	1c5a      	adds	r2, r3, #1
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e2e0:	69bb      	ldr	r3, [r7, #24]
 800e2e2:	791b      	ldrb	r3, [r3, #4]
 800e2e4:	f043 0301 	orr.w	r3, r3, #1
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	69bb      	ldr	r3, [r7, #24]
 800e2ec:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e2f2:	69bb      	ldr	r3, [r7, #24]
 800e2f4:	699b      	ldr	r3, [r3, #24]
 800e2f6:	68ba      	ldr	r2, [r7, #8]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d3c6      	bcc.n	800e28a <remove_chain+0x4a>
 800e2fc:	e000      	b.n	800e300 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e2fe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e300:	2300      	movs	r3, #0
}
 800e302:	4618      	mov	r0, r3
 800e304:	3720      	adds	r7, #32
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e30a:	b580      	push	{r7, lr}
 800e30c:	b088      	sub	sp, #32
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
 800e312:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d10d      	bne.n	800e33c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	691b      	ldr	r3, [r3, #16]
 800e324:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e326:	69bb      	ldr	r3, [r7, #24]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d004      	beq.n	800e336 <create_chain+0x2c>
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	699b      	ldr	r3, [r3, #24]
 800e330:	69ba      	ldr	r2, [r7, #24]
 800e332:	429a      	cmp	r2, r3
 800e334:	d31b      	bcc.n	800e36e <create_chain+0x64>
 800e336:	2301      	movs	r3, #1
 800e338:	61bb      	str	r3, [r7, #24]
 800e33a:	e018      	b.n	800e36e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e33c:	6839      	ldr	r1, [r7, #0]
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7ff fded 	bl	800df1e <get_fat>
 800e344:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d801      	bhi.n	800e350 <create_chain+0x46>
 800e34c:	2301      	movs	r3, #1
 800e34e:	e070      	b.n	800e432 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e356:	d101      	bne.n	800e35c <create_chain+0x52>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	e06a      	b.n	800e432 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	699b      	ldr	r3, [r3, #24]
 800e360:	68fa      	ldr	r2, [r7, #12]
 800e362:	429a      	cmp	r2, r3
 800e364:	d201      	bcs.n	800e36a <create_chain+0x60>
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	e063      	b.n	800e432 <create_chain+0x128>
		scl = clst;
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e36e:	69bb      	ldr	r3, [r7, #24]
 800e370:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	3301      	adds	r3, #1
 800e376:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	699b      	ldr	r3, [r3, #24]
 800e37c:	69fa      	ldr	r2, [r7, #28]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d307      	bcc.n	800e392 <create_chain+0x88>
				ncl = 2;
 800e382:	2302      	movs	r3, #2
 800e384:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e386:	69fa      	ldr	r2, [r7, #28]
 800e388:	69bb      	ldr	r3, [r7, #24]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d901      	bls.n	800e392 <create_chain+0x88>
 800e38e:	2300      	movs	r3, #0
 800e390:	e04f      	b.n	800e432 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e392:	69f9      	ldr	r1, [r7, #28]
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f7ff fdc2 	bl	800df1e <get_fat>
 800e39a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d00e      	beq.n	800e3c0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2b01      	cmp	r3, #1
 800e3a6:	d003      	beq.n	800e3b0 <create_chain+0xa6>
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ae:	d101      	bne.n	800e3b4 <create_chain+0xaa>
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	e03e      	b.n	800e432 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e3b4:	69fa      	ldr	r2, [r7, #28]
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d1da      	bne.n	800e372 <create_chain+0x68>
 800e3bc:	2300      	movs	r3, #0
 800e3be:	e038      	b.n	800e432 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e3c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e3c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c6:	69f9      	ldr	r1, [r7, #28]
 800e3c8:	6938      	ldr	r0, [r7, #16]
 800e3ca:	f7ff fe4f 	bl	800e06c <put_fat>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e3d2:	7dfb      	ldrb	r3, [r7, #23]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d109      	bne.n	800e3ec <create_chain+0xe2>
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d006      	beq.n	800e3ec <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e3de:	69fa      	ldr	r2, [r7, #28]
 800e3e0:	6839      	ldr	r1, [r7, #0]
 800e3e2:	6938      	ldr	r0, [r7, #16]
 800e3e4:	f7ff fe42 	bl	800e06c <put_fat>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e3ec:	7dfb      	ldrb	r3, [r7, #23]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d116      	bne.n	800e420 <create_chain+0x116>
		fs->last_clst = ncl;
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	69fa      	ldr	r2, [r7, #28]
 800e3f6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	695a      	ldr	r2, [r3, #20]
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	699b      	ldr	r3, [r3, #24]
 800e400:	3b02      	subs	r3, #2
 800e402:	429a      	cmp	r2, r3
 800e404:	d804      	bhi.n	800e410 <create_chain+0x106>
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	695b      	ldr	r3, [r3, #20]
 800e40a:	1e5a      	subs	r2, r3, #1
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	791b      	ldrb	r3, [r3, #4]
 800e414:	f043 0301 	orr.w	r3, r3, #1
 800e418:	b2da      	uxtb	r2, r3
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	711a      	strb	r2, [r3, #4]
 800e41e:	e007      	b.n	800e430 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e420:	7dfb      	ldrb	r3, [r7, #23]
 800e422:	2b01      	cmp	r3, #1
 800e424:	d102      	bne.n	800e42c <create_chain+0x122>
 800e426:	f04f 33ff 	mov.w	r3, #4294967295
 800e42a:	e000      	b.n	800e42e <create_chain+0x124>
 800e42c:	2301      	movs	r3, #1
 800e42e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e430:	69fb      	ldr	r3, [r7, #28]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3720      	adds	r7, #32
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e43a:	b480      	push	{r7}
 800e43c:	b087      	sub	sp, #28
 800e43e:	af00      	add	r7, sp, #0
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e44e:	3304      	adds	r3, #4
 800e450:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	0a5b      	lsrs	r3, r3, #9
 800e456:	68fa      	ldr	r2, [r7, #12]
 800e458:	8952      	ldrh	r2, [r2, #10]
 800e45a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e45e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e460:	693b      	ldr	r3, [r7, #16]
 800e462:	1d1a      	adds	r2, r3, #4
 800e464:	613a      	str	r2, [r7, #16]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d101      	bne.n	800e474 <clmt_clust+0x3a>
 800e470:	2300      	movs	r3, #0
 800e472:	e010      	b.n	800e496 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e474:	697a      	ldr	r2, [r7, #20]
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	429a      	cmp	r2, r3
 800e47a:	d307      	bcc.n	800e48c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e47c:	697a      	ldr	r2, [r7, #20]
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	1ad3      	subs	r3, r2, r3
 800e482:	617b      	str	r3, [r7, #20]
 800e484:	693b      	ldr	r3, [r7, #16]
 800e486:	3304      	adds	r3, #4
 800e488:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e48a:	e7e9      	b.n	800e460 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e48c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e48e:	693b      	ldr	r3, [r7, #16]
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	4413      	add	r3, r2
}
 800e496:	4618      	mov	r0, r3
 800e498:	371c      	adds	r7, #28
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr

0800e4a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e4a2:	b580      	push	{r7, lr}
 800e4a4:	b086      	sub	sp, #24
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	6078      	str	r0, [r7, #4]
 800e4aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e4b8:	d204      	bcs.n	800e4c4 <dir_sdi+0x22>
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	f003 031f 	and.w	r3, r3, #31
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d001      	beq.n	800e4c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e4c4:	2302      	movs	r3, #2
 800e4c6:	e063      	b.n	800e590 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	683a      	ldr	r2, [r7, #0]
 800e4cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	689b      	ldr	r3, [r3, #8]
 800e4d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d106      	bne.n	800e4e8 <dir_sdi+0x46>
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	d902      	bls.n	800e4e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d10c      	bne.n	800e508 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	095b      	lsrs	r3, r3, #5
 800e4f2:	693a      	ldr	r2, [r7, #16]
 800e4f4:	8912      	ldrh	r2, [r2, #8]
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d301      	bcc.n	800e4fe <dir_sdi+0x5c>
 800e4fa:	2302      	movs	r3, #2
 800e4fc:	e048      	b.n	800e590 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	61da      	str	r2, [r3, #28]
 800e506:	e029      	b.n	800e55c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	895b      	ldrh	r3, [r3, #10]
 800e50c:	025b      	lsls	r3, r3, #9
 800e50e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e510:	e019      	b.n	800e546 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6979      	ldr	r1, [r7, #20]
 800e516:	4618      	mov	r0, r3
 800e518:	f7ff fd01 	bl	800df1e <get_fat>
 800e51c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e524:	d101      	bne.n	800e52a <dir_sdi+0x88>
 800e526:	2301      	movs	r3, #1
 800e528:	e032      	b.n	800e590 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d904      	bls.n	800e53a <dir_sdi+0x98>
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	699b      	ldr	r3, [r3, #24]
 800e534:	697a      	ldr	r2, [r7, #20]
 800e536:	429a      	cmp	r2, r3
 800e538:	d301      	bcc.n	800e53e <dir_sdi+0x9c>
 800e53a:	2302      	movs	r3, #2
 800e53c:	e028      	b.n	800e590 <dir_sdi+0xee>
			ofs -= csz;
 800e53e:	683a      	ldr	r2, [r7, #0]
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	1ad3      	subs	r3, r2, r3
 800e544:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e546:	683a      	ldr	r2, [r7, #0]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d2e1      	bcs.n	800e512 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e54e:	6979      	ldr	r1, [r7, #20]
 800e550:	6938      	ldr	r0, [r7, #16]
 800e552:	f7ff fcc5 	bl	800dee0 <clust2sect>
 800e556:	4602      	mov	r2, r0
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	697a      	ldr	r2, [r7, #20]
 800e560:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	69db      	ldr	r3, [r3, #28]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d101      	bne.n	800e56e <dir_sdi+0xcc>
 800e56a:	2302      	movs	r3, #2
 800e56c:	e010      	b.n	800e590 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	69da      	ldr	r2, [r3, #28]
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	0a5b      	lsrs	r3, r3, #9
 800e576:	441a      	add	r2, r3
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e588:	441a      	add	r2, r3
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e58e:	2300      	movs	r3, #0
}
 800e590:	4618      	mov	r0, r3
 800e592:	3718      	adds	r7, #24
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b086      	sub	sp, #24
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	695b      	ldr	r3, [r3, #20]
 800e5ac:	3320      	adds	r3, #32
 800e5ae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	69db      	ldr	r3, [r3, #28]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d003      	beq.n	800e5c0 <dir_next+0x28>
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e5be:	d301      	bcc.n	800e5c4 <dir_next+0x2c>
 800e5c0:	2304      	movs	r3, #4
 800e5c2:	e0aa      	b.n	800e71a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	f040 8098 	bne.w	800e700 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	69db      	ldr	r3, [r3, #28]
 800e5d4:	1c5a      	adds	r2, r3, #1
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	699b      	ldr	r3, [r3, #24]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d10b      	bne.n	800e5fa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	095b      	lsrs	r3, r3, #5
 800e5e6:	68fa      	ldr	r2, [r7, #12]
 800e5e8:	8912      	ldrh	r2, [r2, #8]
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	f0c0 8088 	bcc.w	800e700 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	61da      	str	r2, [r3, #28]
 800e5f6:	2304      	movs	r3, #4
 800e5f8:	e08f      	b.n	800e71a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	0a5b      	lsrs	r3, r3, #9
 800e5fe:	68fa      	ldr	r2, [r7, #12]
 800e600:	8952      	ldrh	r2, [r2, #10]
 800e602:	3a01      	subs	r2, #1
 800e604:	4013      	ands	r3, r2
 800e606:	2b00      	cmp	r3, #0
 800e608:	d17a      	bne.n	800e700 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	699b      	ldr	r3, [r3, #24]
 800e610:	4619      	mov	r1, r3
 800e612:	4610      	mov	r0, r2
 800e614:	f7ff fc83 	bl	800df1e <get_fat>
 800e618:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d801      	bhi.n	800e624 <dir_next+0x8c>
 800e620:	2302      	movs	r3, #2
 800e622:	e07a      	b.n	800e71a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e62a:	d101      	bne.n	800e630 <dir_next+0x98>
 800e62c:	2301      	movs	r3, #1
 800e62e:	e074      	b.n	800e71a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	699b      	ldr	r3, [r3, #24]
 800e634:	697a      	ldr	r2, [r7, #20]
 800e636:	429a      	cmp	r2, r3
 800e638:	d358      	bcc.n	800e6ec <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d104      	bne.n	800e64a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2200      	movs	r2, #0
 800e644:	61da      	str	r2, [r3, #28]
 800e646:	2304      	movs	r3, #4
 800e648:	e067      	b.n	800e71a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	699b      	ldr	r3, [r3, #24]
 800e650:	4619      	mov	r1, r3
 800e652:	4610      	mov	r0, r2
 800e654:	f7ff fe59 	bl	800e30a <create_chain>
 800e658:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d101      	bne.n	800e664 <dir_next+0xcc>
 800e660:	2307      	movs	r3, #7
 800e662:	e05a      	b.n	800e71a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	2b01      	cmp	r3, #1
 800e668:	d101      	bne.n	800e66e <dir_next+0xd6>
 800e66a:	2302      	movs	r3, #2
 800e66c:	e055      	b.n	800e71a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e674:	d101      	bne.n	800e67a <dir_next+0xe2>
 800e676:	2301      	movs	r3, #1
 800e678:	e04f      	b.n	800e71a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e67a:	68f8      	ldr	r0, [r7, #12]
 800e67c:	f7ff fb50 	bl	800dd20 <sync_window>
 800e680:	4603      	mov	r3, r0
 800e682:	2b00      	cmp	r3, #0
 800e684:	d001      	beq.n	800e68a <dir_next+0xf2>
 800e686:	2301      	movs	r3, #1
 800e688:	e047      	b.n	800e71a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	3334      	adds	r3, #52	@ 0x34
 800e68e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e692:	2100      	movs	r1, #0
 800e694:	4618      	mov	r0, r3
 800e696:	f7ff f97a 	bl	800d98e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e69a:	2300      	movs	r3, #0
 800e69c:	613b      	str	r3, [r7, #16]
 800e69e:	6979      	ldr	r1, [r7, #20]
 800e6a0:	68f8      	ldr	r0, [r7, #12]
 800e6a2:	f7ff fc1d 	bl	800dee0 <clust2sect>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	631a      	str	r2, [r3, #48]	@ 0x30
 800e6ac:	e012      	b.n	800e6d4 <dir_next+0x13c>
						fs->wflag = 1;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e6b4:	68f8      	ldr	r0, [r7, #12]
 800e6b6:	f7ff fb33 	bl	800dd20 <sync_window>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d001      	beq.n	800e6c4 <dir_next+0x12c>
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	e02a      	b.n	800e71a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	613b      	str	r3, [r7, #16]
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6ce:	1c5a      	adds	r2, r3, #1
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	631a      	str	r2, [r3, #48]	@ 0x30
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	895b      	ldrh	r3, [r3, #10]
 800e6d8:	461a      	mov	r2, r3
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d3e6      	bcc.n	800e6ae <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	1ad2      	subs	r2, r2, r3
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	697a      	ldr	r2, [r7, #20]
 800e6f0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e6f2:	6979      	ldr	r1, [r7, #20]
 800e6f4:	68f8      	ldr	r0, [r7, #12]
 800e6f6:	f7ff fbf3 	bl	800dee0 <clust2sect>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	68ba      	ldr	r2, [r7, #8]
 800e704:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e712:	441a      	add	r2, r3
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e718:	2300      	movs	r3, #0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3718      	adds	r7, #24
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b086      	sub	sp, #24
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
 800e72a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e732:	2100      	movs	r1, #0
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f7ff feb4 	bl	800e4a2 <dir_sdi>
 800e73a:	4603      	mov	r3, r0
 800e73c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e73e:	7dfb      	ldrb	r3, [r7, #23]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d12b      	bne.n	800e79c <dir_alloc+0x7a>
		n = 0;
 800e744:	2300      	movs	r3, #0
 800e746:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	69db      	ldr	r3, [r3, #28]
 800e74c:	4619      	mov	r1, r3
 800e74e:	68f8      	ldr	r0, [r7, #12]
 800e750:	f7ff fb2a 	bl	800dda8 <move_window>
 800e754:	4603      	mov	r3, r0
 800e756:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e758:	7dfb      	ldrb	r3, [r7, #23]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d11d      	bne.n	800e79a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6a1b      	ldr	r3, [r3, #32]
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	2be5      	cmp	r3, #229	@ 0xe5
 800e766:	d004      	beq.n	800e772 <dir_alloc+0x50>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6a1b      	ldr	r3, [r3, #32]
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d107      	bne.n	800e782 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	3301      	adds	r3, #1
 800e776:	613b      	str	r3, [r7, #16]
 800e778:	693a      	ldr	r2, [r7, #16]
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d102      	bne.n	800e786 <dir_alloc+0x64>
 800e780:	e00c      	b.n	800e79c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e782:	2300      	movs	r3, #0
 800e784:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e786:	2101      	movs	r1, #1
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f7ff ff05 	bl	800e598 <dir_next>
 800e78e:	4603      	mov	r3, r0
 800e790:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e792:	7dfb      	ldrb	r3, [r7, #23]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d0d7      	beq.n	800e748 <dir_alloc+0x26>
 800e798:	e000      	b.n	800e79c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e79a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e79c:	7dfb      	ldrb	r3, [r7, #23]
 800e79e:	2b04      	cmp	r3, #4
 800e7a0:	d101      	bne.n	800e7a6 <dir_alloc+0x84>
 800e7a2:	2307      	movs	r3, #7
 800e7a4:	75fb      	strb	r3, [r7, #23]
	return res;
 800e7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3718      	adds	r7, #24
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	331a      	adds	r3, #26
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7ff f842 	bl	800d848 <ld_word>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	2b03      	cmp	r3, #3
 800e7ce:	d109      	bne.n	800e7e4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	3314      	adds	r3, #20
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7ff f837 	bl	800d848 <ld_word>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	041b      	lsls	r3, r3, #16
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}

0800e7ee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b084      	sub	sp, #16
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	60f8      	str	r0, [r7, #12]
 800e7f6:	60b9      	str	r1, [r7, #8]
 800e7f8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	331a      	adds	r3, #26
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	b292      	uxth	r2, r2
 800e802:	4611      	mov	r1, r2
 800e804:	4618      	mov	r0, r3
 800e806:	f7ff f85a 	bl	800d8be <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	2b03      	cmp	r3, #3
 800e810:	d109      	bne.n	800e826 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	f103 0214 	add.w	r2, r3, #20
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	0c1b      	lsrs	r3, r3, #16
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	4619      	mov	r1, r3
 800e820:	4610      	mov	r0, r2
 800e822:	f7ff f84c 	bl	800d8be <st_word>
	}
}
 800e826:	bf00      	nop
 800e828:	3710      	adds	r7, #16
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
	...

0800e830 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e830:	b590      	push	{r4, r7, lr}
 800e832:	b087      	sub	sp, #28
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	331a      	adds	r3, #26
 800e83e:	4618      	mov	r0, r3
 800e840:	f7ff f802 	bl	800d848 <ld_word>
 800e844:	4603      	mov	r3, r0
 800e846:	2b00      	cmp	r3, #0
 800e848:	d001      	beq.n	800e84e <cmp_lfn+0x1e>
 800e84a:	2300      	movs	r3, #0
 800e84c:	e059      	b.n	800e902 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e856:	1e5a      	subs	r2, r3, #1
 800e858:	4613      	mov	r3, r2
 800e85a:	005b      	lsls	r3, r3, #1
 800e85c:	4413      	add	r3, r2
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	4413      	add	r3, r2
 800e862:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e864:	2301      	movs	r3, #1
 800e866:	81fb      	strh	r3, [r7, #14]
 800e868:	2300      	movs	r3, #0
 800e86a:	613b      	str	r3, [r7, #16]
 800e86c:	e033      	b.n	800e8d6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e86e:	4a27      	ldr	r2, [pc, #156]	@ (800e90c <cmp_lfn+0xdc>)
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	4413      	add	r3, r2
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	461a      	mov	r2, r3
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	4413      	add	r3, r2
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7fe ffe3 	bl	800d848 <ld_word>
 800e882:	4603      	mov	r3, r0
 800e884:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e886:	89fb      	ldrh	r3, [r7, #14]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d01a      	beq.n	800e8c2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	2bfe      	cmp	r3, #254	@ 0xfe
 800e890:	d812      	bhi.n	800e8b8 <cmp_lfn+0x88>
 800e892:	89bb      	ldrh	r3, [r7, #12]
 800e894:	4618      	mov	r0, r3
 800e896:	f001 feff 	bl	8010698 <ff_wtoupper>
 800e89a:	4603      	mov	r3, r0
 800e89c:	461c      	mov	r4, r3
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	1c5a      	adds	r2, r3, #1
 800e8a2:	617a      	str	r2, [r7, #20]
 800e8a4:	005b      	lsls	r3, r3, #1
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	4413      	add	r3, r2
 800e8aa:	881b      	ldrh	r3, [r3, #0]
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f001 fef3 	bl	8010698 <ff_wtoupper>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	429c      	cmp	r4, r3
 800e8b6:	d001      	beq.n	800e8bc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	e022      	b.n	800e902 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e8bc:	89bb      	ldrh	r3, [r7, #12]
 800e8be:	81fb      	strh	r3, [r7, #14]
 800e8c0:	e006      	b.n	800e8d0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e8c2:	89bb      	ldrh	r3, [r7, #12]
 800e8c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d001      	beq.n	800e8d0 <cmp_lfn+0xa0>
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	e018      	b.n	800e902 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	613b      	str	r3, [r7, #16]
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	2b0c      	cmp	r3, #12
 800e8da:	d9c8      	bls.n	800e86e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d00b      	beq.n	800e900 <cmp_lfn+0xd0>
 800e8e8:	89fb      	ldrh	r3, [r7, #14]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d008      	beq.n	800e900 <cmp_lfn+0xd0>
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	005b      	lsls	r3, r3, #1
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	4413      	add	r3, r2
 800e8f6:	881b      	ldrh	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d001      	beq.n	800e900 <cmp_lfn+0xd0>
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	e000      	b.n	800e902 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e900:	2301      	movs	r3, #1
}
 800e902:	4618      	mov	r0, r3
 800e904:	371c      	adds	r7, #28
 800e906:	46bd      	mov	sp, r7
 800e908:	bd90      	pop	{r4, r7, pc}
 800e90a:	bf00      	nop
 800e90c:	08010f50 	.word	0x08010f50

0800e910 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b088      	sub	sp, #32
 800e914:	af00      	add	r7, sp, #0
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	60b9      	str	r1, [r7, #8]
 800e91a:	4611      	mov	r1, r2
 800e91c:	461a      	mov	r2, r3
 800e91e:	460b      	mov	r3, r1
 800e920:	71fb      	strb	r3, [r7, #7]
 800e922:	4613      	mov	r3, r2
 800e924:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	330d      	adds	r3, #13
 800e92a:	79ba      	ldrb	r2, [r7, #6]
 800e92c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	330b      	adds	r3, #11
 800e932:	220f      	movs	r2, #15
 800e934:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	330c      	adds	r3, #12
 800e93a:	2200      	movs	r2, #0
 800e93c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	331a      	adds	r3, #26
 800e942:	2100      	movs	r1, #0
 800e944:	4618      	mov	r0, r3
 800e946:	f7fe ffba 	bl	800d8be <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e94a:	79fb      	ldrb	r3, [r7, #7]
 800e94c:	1e5a      	subs	r2, r3, #1
 800e94e:	4613      	mov	r3, r2
 800e950:	005b      	lsls	r3, r3, #1
 800e952:	4413      	add	r3, r2
 800e954:	009b      	lsls	r3, r3, #2
 800e956:	4413      	add	r3, r2
 800e958:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e95a:	2300      	movs	r3, #0
 800e95c:	82fb      	strh	r3, [r7, #22]
 800e95e:	2300      	movs	r3, #0
 800e960:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e962:	8afb      	ldrh	r3, [r7, #22]
 800e964:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e968:	4293      	cmp	r3, r2
 800e96a:	d007      	beq.n	800e97c <put_lfn+0x6c>
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	1c5a      	adds	r2, r3, #1
 800e970:	61fa      	str	r2, [r7, #28]
 800e972:	005b      	lsls	r3, r3, #1
 800e974:	68fa      	ldr	r2, [r7, #12]
 800e976:	4413      	add	r3, r2
 800e978:	881b      	ldrh	r3, [r3, #0]
 800e97a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e97c:	4a17      	ldr	r2, [pc, #92]	@ (800e9dc <put_lfn+0xcc>)
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	4413      	add	r3, r2
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	461a      	mov	r2, r3
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	4413      	add	r3, r2
 800e98a:	8afa      	ldrh	r2, [r7, #22]
 800e98c:	4611      	mov	r1, r2
 800e98e:	4618      	mov	r0, r3
 800e990:	f7fe ff95 	bl	800d8be <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e994:	8afb      	ldrh	r3, [r7, #22]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d102      	bne.n	800e9a0 <put_lfn+0x90>
 800e99a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e99e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	3301      	adds	r3, #1
 800e9a4:	61bb      	str	r3, [r7, #24]
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	2b0c      	cmp	r3, #12
 800e9aa:	d9da      	bls.n	800e962 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e9ac:	8afb      	ldrh	r3, [r7, #22]
 800e9ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d006      	beq.n	800e9c4 <put_lfn+0xb4>
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	005b      	lsls	r3, r3, #1
 800e9ba:	68fa      	ldr	r2, [r7, #12]
 800e9bc:	4413      	add	r3, r2
 800e9be:	881b      	ldrh	r3, [r3, #0]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d103      	bne.n	800e9cc <put_lfn+0xbc>
 800e9c4:	79fb      	ldrb	r3, [r7, #7]
 800e9c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9ca:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	79fa      	ldrb	r2, [r7, #7]
 800e9d0:	701a      	strb	r2, [r3, #0]
}
 800e9d2:	bf00      	nop
 800e9d4:	3720      	adds	r7, #32
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	08010f50 	.word	0x08010f50

0800e9e0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b08c      	sub	sp, #48	@ 0x30
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	60f8      	str	r0, [r7, #12]
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	607a      	str	r2, [r7, #4]
 800e9ec:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e9ee:	220b      	movs	r2, #11
 800e9f0:	68b9      	ldr	r1, [r7, #8]
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f7fe ffaa 	bl	800d94c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	2b05      	cmp	r3, #5
 800e9fc:	d929      	bls.n	800ea52 <gen_numname+0x72>
		sr = seq;
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ea02:	e020      	b.n	800ea46 <gen_numname+0x66>
			wc = *lfn++;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	1c9a      	adds	r2, r3, #2
 800ea08:	607a      	str	r2, [r7, #4]
 800ea0a:	881b      	ldrh	r3, [r3, #0]
 800ea0c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800ea0e:	2300      	movs	r3, #0
 800ea10:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea12:	e015      	b.n	800ea40 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	005a      	lsls	r2, r3, #1
 800ea18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ea1a:	f003 0301 	and.w	r3, r3, #1
 800ea1e:	4413      	add	r3, r2
 800ea20:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ea22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ea24:	085b      	lsrs	r3, r3, #1
 800ea26:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ea28:	69fb      	ldr	r3, [r7, #28]
 800ea2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d003      	beq.n	800ea3a <gen_numname+0x5a>
 800ea32:	69fa      	ldr	r2, [r7, #28]
 800ea34:	4b30      	ldr	r3, [pc, #192]	@ (800eaf8 <gen_numname+0x118>)
 800ea36:	4053      	eors	r3, r2
 800ea38:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ea3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea42:	2b0f      	cmp	r3, #15
 800ea44:	d9e6      	bls.n	800ea14 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	881b      	ldrh	r3, [r3, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1da      	bne.n	800ea04 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ea52:	2307      	movs	r3, #7
 800ea54:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	f003 030f 	and.w	r3, r3, #15
 800ea5e:	b2db      	uxtb	r3, r3
 800ea60:	3330      	adds	r3, #48	@ 0x30
 800ea62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800ea66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea6a:	2b39      	cmp	r3, #57	@ 0x39
 800ea6c:	d904      	bls.n	800ea78 <gen_numname+0x98>
 800ea6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea72:	3307      	adds	r3, #7
 800ea74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800ea78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea7a:	1e5a      	subs	r2, r3, #1
 800ea7c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ea7e:	3330      	adds	r3, #48	@ 0x30
 800ea80:	443b      	add	r3, r7
 800ea82:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ea86:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	091b      	lsrs	r3, r3, #4
 800ea8e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d1df      	bne.n	800ea56 <gen_numname+0x76>
	ns[i] = '~';
 800ea96:	f107 0214 	add.w	r2, r7, #20
 800ea9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea9c:	4413      	add	r3, r2
 800ea9e:	227e      	movs	r2, #126	@ 0x7e
 800eaa0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	627b      	str	r3, [r7, #36]	@ 0x24
 800eaa6:	e002      	b.n	800eaae <gen_numname+0xce>
 800eaa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaaa:	3301      	adds	r3, #1
 800eaac:	627b      	str	r3, [r7, #36]	@ 0x24
 800eaae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d205      	bcs.n	800eac2 <gen_numname+0xe2>
 800eab6:	68fa      	ldr	r2, [r7, #12]
 800eab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaba:	4413      	add	r3, r2
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	2b20      	cmp	r3, #32
 800eac0:	d1f2      	bne.n	800eaa8 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac4:	2b07      	cmp	r3, #7
 800eac6:	d807      	bhi.n	800ead8 <gen_numname+0xf8>
 800eac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaca:	1c5a      	adds	r2, r3, #1
 800eacc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800eace:	3330      	adds	r3, #48	@ 0x30
 800ead0:	443b      	add	r3, r7
 800ead2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ead6:	e000      	b.n	800eada <gen_numname+0xfa>
 800ead8:	2120      	movs	r1, #32
 800eada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eadc:	1c5a      	adds	r2, r3, #1
 800eade:	627a      	str	r2, [r7, #36]	@ 0x24
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	4413      	add	r3, r2
 800eae4:	460a      	mov	r2, r1
 800eae6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800eae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaea:	2b07      	cmp	r3, #7
 800eaec:	d9e9      	bls.n	800eac2 <gen_numname+0xe2>
}
 800eaee:	bf00      	nop
 800eaf0:	bf00      	nop
 800eaf2:	3730      	adds	r7, #48	@ 0x30
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	00011021 	.word	0x00011021

0800eafc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b085      	sub	sp, #20
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800eb04:	2300      	movs	r3, #0
 800eb06:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800eb08:	230b      	movs	r3, #11
 800eb0a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800eb0c:	7bfb      	ldrb	r3, [r7, #15]
 800eb0e:	b2da      	uxtb	r2, r3
 800eb10:	0852      	lsrs	r2, r2, #1
 800eb12:	01db      	lsls	r3, r3, #7
 800eb14:	4313      	orrs	r3, r2
 800eb16:	b2da      	uxtb	r2, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	1c59      	adds	r1, r3, #1
 800eb1c:	6079      	str	r1, [r7, #4]
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	4413      	add	r3, r2
 800eb22:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	3b01      	subs	r3, #1
 800eb28:	60bb      	str	r3, [r7, #8]
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d1ed      	bne.n	800eb0c <sum_sfn+0x10>
	return sum;
 800eb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3714      	adds	r7, #20
 800eb36:	46bd      	mov	sp, r7
 800eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3c:	4770      	bx	lr

0800eb3e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800eb3e:	b580      	push	{r7, lr}
 800eb40:	b086      	sub	sp, #24
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800eb4c:	2100      	movs	r1, #0
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f7ff fca7 	bl	800e4a2 <dir_sdi>
 800eb54:	4603      	mov	r3, r0
 800eb56:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800eb58:	7dfb      	ldrb	r3, [r7, #23]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d001      	beq.n	800eb62 <dir_find+0x24>
 800eb5e:	7dfb      	ldrb	r3, [r7, #23]
 800eb60:	e0a9      	b.n	800ecb6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eb62:	23ff      	movs	r3, #255	@ 0xff
 800eb64:	753b      	strb	r3, [r7, #20]
 800eb66:	7d3b      	ldrb	r3, [r7, #20]
 800eb68:	757b      	strb	r3, [r7, #21]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb70:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	69db      	ldr	r3, [r3, #28]
 800eb76:	4619      	mov	r1, r3
 800eb78:	6938      	ldr	r0, [r7, #16]
 800eb7a:	f7ff f915 	bl	800dda8 <move_window>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eb82:	7dfb      	ldrb	r3, [r7, #23]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f040 8090 	bne.w	800ecaa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6a1b      	ldr	r3, [r3, #32]
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800eb92:	7dbb      	ldrb	r3, [r7, #22]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d102      	bne.n	800eb9e <dir_find+0x60>
 800eb98:	2304      	movs	r3, #4
 800eb9a:	75fb      	strb	r3, [r7, #23]
 800eb9c:	e08a      	b.n	800ecb4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6a1b      	ldr	r3, [r3, #32]
 800eba2:	330b      	adds	r3, #11
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ebaa:	73fb      	strb	r3, [r7, #15]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	7bfa      	ldrb	r2, [r7, #15]
 800ebb0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ebb2:	7dbb      	ldrb	r3, [r7, #22]
 800ebb4:	2be5      	cmp	r3, #229	@ 0xe5
 800ebb6:	d007      	beq.n	800ebc8 <dir_find+0x8a>
 800ebb8:	7bfb      	ldrb	r3, [r7, #15]
 800ebba:	f003 0308 	and.w	r3, r3, #8
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d009      	beq.n	800ebd6 <dir_find+0x98>
 800ebc2:	7bfb      	ldrb	r3, [r7, #15]
 800ebc4:	2b0f      	cmp	r3, #15
 800ebc6:	d006      	beq.n	800ebd6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ebc8:	23ff      	movs	r3, #255	@ 0xff
 800ebca:	757b      	strb	r3, [r7, #21]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f04f 32ff 	mov.w	r2, #4294967295
 800ebd2:	631a      	str	r2, [r3, #48]	@ 0x30
 800ebd4:	e05e      	b.n	800ec94 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
 800ebd8:	2b0f      	cmp	r3, #15
 800ebda:	d136      	bne.n	800ec4a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ebe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d154      	bne.n	800ec94 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ebea:	7dbb      	ldrb	r3, [r7, #22]
 800ebec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d00d      	beq.n	800ec10 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6a1b      	ldr	r3, [r3, #32]
 800ebf8:	7b5b      	ldrb	r3, [r3, #13]
 800ebfa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ebfc:	7dbb      	ldrb	r3, [r7, #22]
 800ebfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec02:	75bb      	strb	r3, [r7, #22]
 800ec04:	7dbb      	ldrb	r3, [r7, #22]
 800ec06:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	695a      	ldr	r2, [r3, #20]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ec10:	7dba      	ldrb	r2, [r7, #22]
 800ec12:	7d7b      	ldrb	r3, [r7, #21]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d115      	bne.n	800ec44 <dir_find+0x106>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6a1b      	ldr	r3, [r3, #32]
 800ec1c:	330d      	adds	r3, #13
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	7d3a      	ldrb	r2, [r7, #20]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d10e      	bne.n	800ec44 <dir_find+0x106>
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	68da      	ldr	r2, [r3, #12]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6a1b      	ldr	r3, [r3, #32]
 800ec2e:	4619      	mov	r1, r3
 800ec30:	4610      	mov	r0, r2
 800ec32:	f7ff fdfd 	bl	800e830 <cmp_lfn>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d003      	beq.n	800ec44 <dir_find+0x106>
 800ec3c:	7d7b      	ldrb	r3, [r7, #21]
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	e000      	b.n	800ec46 <dir_find+0x108>
 800ec44:	23ff      	movs	r3, #255	@ 0xff
 800ec46:	757b      	strb	r3, [r7, #21]
 800ec48:	e024      	b.n	800ec94 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ec4a:	7d7b      	ldrb	r3, [r7, #21]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d109      	bne.n	800ec64 <dir_find+0x126>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6a1b      	ldr	r3, [r3, #32]
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7ff ff51 	bl	800eafc <sum_sfn>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	7d3b      	ldrb	r3, [r7, #20]
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d024      	beq.n	800ecae <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ec6a:	f003 0301 	and.w	r3, r3, #1
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10a      	bne.n	800ec88 <dir_find+0x14a>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6a18      	ldr	r0, [r3, #32]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	3324      	adds	r3, #36	@ 0x24
 800ec7a:	220b      	movs	r2, #11
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	f7fe fea1 	bl	800d9c4 <mem_cmp>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d014      	beq.n	800ecb2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ec88:	23ff      	movs	r3, #255	@ 0xff
 800ec8a:	757b      	strb	r3, [r7, #21]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec92:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ec94:	2100      	movs	r1, #0
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7ff fc7e 	bl	800e598 <dir_next>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800eca0:	7dfb      	ldrb	r3, [r7, #23]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	f43f af65 	beq.w	800eb72 <dir_find+0x34>
 800eca8:	e004      	b.n	800ecb4 <dir_find+0x176>
		if (res != FR_OK) break;
 800ecaa:	bf00      	nop
 800ecac:	e002      	b.n	800ecb4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ecae:	bf00      	nop
 800ecb0:	e000      	b.n	800ecb4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ecb2:	bf00      	nop

	return res;
 800ecb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3718      	adds	r7, #24
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
	...

0800ecc0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b08c      	sub	sp, #48	@ 0x30
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ecd4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d001      	beq.n	800ece0 <dir_register+0x20>
 800ecdc:	2306      	movs	r3, #6
 800ecde:	e0e0      	b.n	800eea2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ece0:	2300      	movs	r3, #0
 800ece2:	627b      	str	r3, [r7, #36]	@ 0x24
 800ece4:	e002      	b.n	800ecec <dir_register+0x2c>
 800ece6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ece8:	3301      	adds	r3, #1
 800ecea:	627b      	str	r3, [r7, #36]	@ 0x24
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	68da      	ldr	r2, [r3, #12]
 800ecf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecf2:	005b      	lsls	r3, r3, #1
 800ecf4:	4413      	add	r3, r2
 800ecf6:	881b      	ldrh	r3, [r3, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d1f4      	bne.n	800ece6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800ed02:	f107 030c 	add.w	r3, r7, #12
 800ed06:	220c      	movs	r2, #12
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7fe fe1f 	bl	800d94c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ed0e:	7dfb      	ldrb	r3, [r7, #23]
 800ed10:	f003 0301 	and.w	r3, r3, #1
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d032      	beq.n	800ed7e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2240      	movs	r2, #64	@ 0x40
 800ed1c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800ed20:	2301      	movs	r3, #1
 800ed22:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed24:	e016      	b.n	800ed54 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800ed2c:	69fb      	ldr	r3, [r7, #28]
 800ed2e:	68da      	ldr	r2, [r3, #12]
 800ed30:	f107 010c 	add.w	r1, r7, #12
 800ed34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed36:	f7ff fe53 	bl	800e9e0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f7ff feff 	bl	800eb3e <dir_find>
 800ed40:	4603      	mov	r3, r0
 800ed42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800ed46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d106      	bne.n	800ed5c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ed4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed50:	3301      	adds	r3, #1
 800ed52:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed56:	2b63      	cmp	r3, #99	@ 0x63
 800ed58:	d9e5      	bls.n	800ed26 <dir_register+0x66>
 800ed5a:	e000      	b.n	800ed5e <dir_register+0x9e>
			if (res != FR_OK) break;
 800ed5c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ed5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed60:	2b64      	cmp	r3, #100	@ 0x64
 800ed62:	d101      	bne.n	800ed68 <dir_register+0xa8>
 800ed64:	2307      	movs	r3, #7
 800ed66:	e09c      	b.n	800eea2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ed68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ed6c:	2b04      	cmp	r3, #4
 800ed6e:	d002      	beq.n	800ed76 <dir_register+0xb6>
 800ed70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ed74:	e095      	b.n	800eea2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ed76:	7dfa      	ldrb	r2, [r7, #23]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ed7e:	7dfb      	ldrb	r3, [r7, #23]
 800ed80:	f003 0302 	and.w	r3, r3, #2
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d007      	beq.n	800ed98 <dir_register+0xd8>
 800ed88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed8a:	330c      	adds	r3, #12
 800ed8c:	4a47      	ldr	r2, [pc, #284]	@ (800eeac <dir_register+0x1ec>)
 800ed8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ed92:	089b      	lsrs	r3, r3, #2
 800ed94:	3301      	adds	r3, #1
 800ed96:	e000      	b.n	800ed9a <dir_register+0xda>
 800ed98:	2301      	movs	r3, #1
 800ed9a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ed9c:	6a39      	ldr	r1, [r7, #32]
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f7ff fcbf 	bl	800e722 <dir_alloc>
 800eda4:	4603      	mov	r3, r0
 800eda6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800edaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d148      	bne.n	800ee44 <dir_register+0x184>
 800edb2:	6a3b      	ldr	r3, [r7, #32]
 800edb4:	3b01      	subs	r3, #1
 800edb6:	623b      	str	r3, [r7, #32]
 800edb8:	6a3b      	ldr	r3, [r7, #32]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d042      	beq.n	800ee44 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	695a      	ldr	r2, [r3, #20]
 800edc2:	6a3b      	ldr	r3, [r7, #32]
 800edc4:	015b      	lsls	r3, r3, #5
 800edc6:	1ad3      	subs	r3, r2, r3
 800edc8:	4619      	mov	r1, r3
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7ff fb69 	bl	800e4a2 <dir_sdi>
 800edd0:	4603      	mov	r3, r0
 800edd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800edd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d132      	bne.n	800ee44 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	3324      	adds	r3, #36	@ 0x24
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7ff fe8a 	bl	800eafc <sum_sfn>
 800ede8:	4603      	mov	r3, r0
 800edea:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	69db      	ldr	r3, [r3, #28]
 800edf0:	4619      	mov	r1, r3
 800edf2:	69f8      	ldr	r0, [r7, #28]
 800edf4:	f7fe ffd8 	bl	800dda8 <move_window>
 800edf8:	4603      	mov	r3, r0
 800edfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800edfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d11d      	bne.n	800ee42 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ee06:	69fb      	ldr	r3, [r7, #28]
 800ee08:	68d8      	ldr	r0, [r3, #12]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6a19      	ldr	r1, [r3, #32]
 800ee0e:	6a3b      	ldr	r3, [r7, #32]
 800ee10:	b2da      	uxtb	r2, r3
 800ee12:	7efb      	ldrb	r3, [r7, #27]
 800ee14:	f7ff fd7c 	bl	800e910 <put_lfn>
				fs->wflag = 1;
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ee1e:	2100      	movs	r1, #0
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f7ff fbb9 	bl	800e598 <dir_next>
 800ee26:	4603      	mov	r3, r0
 800ee28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800ee2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d107      	bne.n	800ee44 <dir_register+0x184>
 800ee34:	6a3b      	ldr	r3, [r7, #32]
 800ee36:	3b01      	subs	r3, #1
 800ee38:	623b      	str	r3, [r7, #32]
 800ee3a:	6a3b      	ldr	r3, [r7, #32]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d1d5      	bne.n	800edec <dir_register+0x12c>
 800ee40:	e000      	b.n	800ee44 <dir_register+0x184>
				if (res != FR_OK) break;
 800ee42:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ee44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d128      	bne.n	800ee9e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	69db      	ldr	r3, [r3, #28]
 800ee50:	4619      	mov	r1, r3
 800ee52:	69f8      	ldr	r0, [r7, #28]
 800ee54:	f7fe ffa8 	bl	800dda8 <move_window>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ee5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d11b      	bne.n	800ee9e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6a1b      	ldr	r3, [r3, #32]
 800ee6a:	2220      	movs	r2, #32
 800ee6c:	2100      	movs	r1, #0
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fe fd8d 	bl	800d98e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6a18      	ldr	r0, [r3, #32]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	3324      	adds	r3, #36	@ 0x24
 800ee7c:	220b      	movs	r2, #11
 800ee7e:	4619      	mov	r1, r3
 800ee80:	f7fe fd64 	bl	800d94c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6a1b      	ldr	r3, [r3, #32]
 800ee8e:	330c      	adds	r3, #12
 800ee90:	f002 0218 	and.w	r2, r2, #24
 800ee94:	b2d2      	uxtb	r2, r2
 800ee96:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ee9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3730      	adds	r7, #48	@ 0x30
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	4ec4ec4f 	.word	0x4ec4ec4f

0800eeb0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b08a      	sub	sp, #40	@ 0x28
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	613b      	str	r3, [r7, #16]
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	60fb      	str	r3, [r7, #12]
 800eec8:	2300      	movs	r3, #0
 800eeca:	617b      	str	r3, [r7, #20]
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800eed0:	69bb      	ldr	r3, [r7, #24]
 800eed2:	1c5a      	adds	r2, r3, #1
 800eed4:	61ba      	str	r2, [r7, #24]
 800eed6:	693a      	ldr	r2, [r7, #16]
 800eed8:	4413      	add	r3, r2
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800eede:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eee0:	2b1f      	cmp	r3, #31
 800eee2:	d940      	bls.n	800ef66 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800eee4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eee6:	2b2f      	cmp	r3, #47	@ 0x2f
 800eee8:	d006      	beq.n	800eef8 <create_name+0x48>
 800eeea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eeec:	2b5c      	cmp	r3, #92	@ 0x5c
 800eeee:	d110      	bne.n	800ef12 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eef0:	e002      	b.n	800eef8 <create_name+0x48>
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	3301      	adds	r3, #1
 800eef6:	61bb      	str	r3, [r7, #24]
 800eef8:	693a      	ldr	r2, [r7, #16]
 800eefa:	69bb      	ldr	r3, [r7, #24]
 800eefc:	4413      	add	r3, r2
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	2b2f      	cmp	r3, #47	@ 0x2f
 800ef02:	d0f6      	beq.n	800eef2 <create_name+0x42>
 800ef04:	693a      	ldr	r2, [r7, #16]
 800ef06:	69bb      	ldr	r3, [r7, #24]
 800ef08:	4413      	add	r3, r2
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ef0e:	d0f0      	beq.n	800eef2 <create_name+0x42>
			break;
 800ef10:	e02a      	b.n	800ef68 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	2bfe      	cmp	r3, #254	@ 0xfe
 800ef16:	d901      	bls.n	800ef1c <create_name+0x6c>
 800ef18:	2306      	movs	r3, #6
 800ef1a:	e17d      	b.n	800f218 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ef1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ef22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef24:	2101      	movs	r1, #1
 800ef26:	4618      	mov	r0, r3
 800ef28:	f001 fb7a 	bl	8010620 <ff_convert>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ef30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d101      	bne.n	800ef3a <create_name+0x8a>
 800ef36:	2306      	movs	r3, #6
 800ef38:	e16e      	b.n	800f218 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ef3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef3c:	2b7f      	cmp	r3, #127	@ 0x7f
 800ef3e:	d809      	bhi.n	800ef54 <create_name+0xa4>
 800ef40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef42:	4619      	mov	r1, r3
 800ef44:	488d      	ldr	r0, [pc, #564]	@ (800f17c <create_name+0x2cc>)
 800ef46:	f7fe fd64 	bl	800da12 <chk_chr>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d001      	beq.n	800ef54 <create_name+0xa4>
 800ef50:	2306      	movs	r3, #6
 800ef52:	e161      	b.n	800f218 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	1c5a      	adds	r2, r3, #1
 800ef58:	617a      	str	r2, [r7, #20]
 800ef5a:	005b      	lsls	r3, r3, #1
 800ef5c:	68fa      	ldr	r2, [r7, #12]
 800ef5e:	4413      	add	r3, r2
 800ef60:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ef62:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ef64:	e7b4      	b.n	800eed0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ef66:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ef68:	693a      	ldr	r2, [r7, #16]
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	441a      	add	r2, r3
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ef72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef74:	2b1f      	cmp	r3, #31
 800ef76:	d801      	bhi.n	800ef7c <create_name+0xcc>
 800ef78:	2304      	movs	r3, #4
 800ef7a:	e000      	b.n	800ef7e <create_name+0xce>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ef82:	e011      	b.n	800efa8 <create_name+0xf8>
		w = lfn[di - 1];
 800ef84:	697a      	ldr	r2, [r7, #20]
 800ef86:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ef8a:	4413      	add	r3, r2
 800ef8c:	005b      	lsls	r3, r3, #1
 800ef8e:	68fa      	ldr	r2, [r7, #12]
 800ef90:	4413      	add	r3, r2
 800ef92:	881b      	ldrh	r3, [r3, #0]
 800ef94:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ef96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef98:	2b20      	cmp	r3, #32
 800ef9a:	d002      	beq.n	800efa2 <create_name+0xf2>
 800ef9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800efa0:	d106      	bne.n	800efb0 <create_name+0x100>
		di--;
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	3b01      	subs	r3, #1
 800efa6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d1ea      	bne.n	800ef84 <create_name+0xd4>
 800efae:	e000      	b.n	800efb2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800efb0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	005b      	lsls	r3, r3, #1
 800efb6:	68fa      	ldr	r2, [r7, #12]
 800efb8:	4413      	add	r3, r2
 800efba:	2200      	movs	r2, #0
 800efbc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d101      	bne.n	800efc8 <create_name+0x118>
 800efc4:	2306      	movs	r3, #6
 800efc6:	e127      	b.n	800f218 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	3324      	adds	r3, #36	@ 0x24
 800efcc:	220b      	movs	r2, #11
 800efce:	2120      	movs	r1, #32
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7fe fcdc 	bl	800d98e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800efd6:	2300      	movs	r3, #0
 800efd8:	61bb      	str	r3, [r7, #24]
 800efda:	e002      	b.n	800efe2 <create_name+0x132>
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	3301      	adds	r3, #1
 800efe0:	61bb      	str	r3, [r7, #24]
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	005b      	lsls	r3, r3, #1
 800efe6:	68fa      	ldr	r2, [r7, #12]
 800efe8:	4413      	add	r3, r2
 800efea:	881b      	ldrh	r3, [r3, #0]
 800efec:	2b20      	cmp	r3, #32
 800efee:	d0f5      	beq.n	800efdc <create_name+0x12c>
 800eff0:	69bb      	ldr	r3, [r7, #24]
 800eff2:	005b      	lsls	r3, r3, #1
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	4413      	add	r3, r2
 800eff8:	881b      	ldrh	r3, [r3, #0]
 800effa:	2b2e      	cmp	r3, #46	@ 0x2e
 800effc:	d0ee      	beq.n	800efdc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800effe:	69bb      	ldr	r3, [r7, #24]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d009      	beq.n	800f018 <create_name+0x168>
 800f004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f008:	f043 0303 	orr.w	r3, r3, #3
 800f00c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f010:	e002      	b.n	800f018 <create_name+0x168>
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	3b01      	subs	r3, #1
 800f016:	617b      	str	r3, [r7, #20]
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d009      	beq.n	800f032 <create_name+0x182>
 800f01e:	697a      	ldr	r2, [r7, #20]
 800f020:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f024:	4413      	add	r3, r2
 800f026:	005b      	lsls	r3, r3, #1
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	4413      	add	r3, r2
 800f02c:	881b      	ldrh	r3, [r3, #0]
 800f02e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f030:	d1ef      	bne.n	800f012 <create_name+0x162>

	i = b = 0; ni = 8;
 800f032:	2300      	movs	r3, #0
 800f034:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f038:	2300      	movs	r3, #0
 800f03a:	623b      	str	r3, [r7, #32]
 800f03c:	2308      	movs	r3, #8
 800f03e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f040:	69bb      	ldr	r3, [r7, #24]
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	61ba      	str	r2, [r7, #24]
 800f046:	005b      	lsls	r3, r3, #1
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	4413      	add	r3, r2
 800f04c:	881b      	ldrh	r3, [r3, #0]
 800f04e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f050:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f052:	2b00      	cmp	r3, #0
 800f054:	f000 8090 	beq.w	800f178 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f058:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f05a:	2b20      	cmp	r3, #32
 800f05c:	d006      	beq.n	800f06c <create_name+0x1bc>
 800f05e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f060:	2b2e      	cmp	r3, #46	@ 0x2e
 800f062:	d10a      	bne.n	800f07a <create_name+0x1ca>
 800f064:	69ba      	ldr	r2, [r7, #24]
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d006      	beq.n	800f07a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f06c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f070:	f043 0303 	orr.w	r3, r3, #3
 800f074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f078:	e07d      	b.n	800f176 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f07a:	6a3a      	ldr	r2, [r7, #32]
 800f07c:	69fb      	ldr	r3, [r7, #28]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d203      	bcs.n	800f08a <create_name+0x1da>
 800f082:	69ba      	ldr	r2, [r7, #24]
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	429a      	cmp	r2, r3
 800f088:	d123      	bne.n	800f0d2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f08a:	69fb      	ldr	r3, [r7, #28]
 800f08c:	2b0b      	cmp	r3, #11
 800f08e:	d106      	bne.n	800f09e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f094:	f043 0303 	orr.w	r3, r3, #3
 800f098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f09c:	e075      	b.n	800f18a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f09e:	69ba      	ldr	r2, [r7, #24]
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d005      	beq.n	800f0b2 <create_name+0x202>
 800f0a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0aa:	f043 0303 	orr.w	r3, r3, #3
 800f0ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800f0b2:	69ba      	ldr	r2, [r7, #24]
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d866      	bhi.n	800f188 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	61bb      	str	r3, [r7, #24]
 800f0be:	2308      	movs	r3, #8
 800f0c0:	623b      	str	r3, [r7, #32]
 800f0c2:	230b      	movs	r3, #11
 800f0c4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f0c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f0ca:	009b      	lsls	r3, r3, #2
 800f0cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f0d0:	e051      	b.n	800f176 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f0d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0d4:	2b7f      	cmp	r3, #127	@ 0x7f
 800f0d6:	d914      	bls.n	800f102 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f0d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0da:	2100      	movs	r1, #0
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f001 fa9f 	bl	8010620 <ff_convert>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f0e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d004      	beq.n	800f0f6 <create_name+0x246>
 800f0ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0ee:	3b80      	subs	r3, #128	@ 0x80
 800f0f0:	4a23      	ldr	r2, [pc, #140]	@ (800f180 <create_name+0x2d0>)
 800f0f2:	5cd3      	ldrb	r3, [r2, r3]
 800f0f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f0f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f0fa:	f043 0302 	orr.w	r3, r3, #2
 800f0fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f102:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f104:	2b00      	cmp	r3, #0
 800f106:	d007      	beq.n	800f118 <create_name+0x268>
 800f108:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f10a:	4619      	mov	r1, r3
 800f10c:	481d      	ldr	r0, [pc, #116]	@ (800f184 <create_name+0x2d4>)
 800f10e:	f7fe fc80 	bl	800da12 <chk_chr>
 800f112:	4603      	mov	r3, r0
 800f114:	2b00      	cmp	r3, #0
 800f116:	d008      	beq.n	800f12a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f118:	235f      	movs	r3, #95	@ 0x5f
 800f11a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800f11c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f120:	f043 0303 	orr.w	r3, r3, #3
 800f124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f128:	e01b      	b.n	800f162 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f12a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f12c:	2b40      	cmp	r3, #64	@ 0x40
 800f12e:	d909      	bls.n	800f144 <create_name+0x294>
 800f130:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f132:	2b5a      	cmp	r3, #90	@ 0x5a
 800f134:	d806      	bhi.n	800f144 <create_name+0x294>
					b |= 2;
 800f136:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f13a:	f043 0302 	orr.w	r3, r3, #2
 800f13e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f142:	e00e      	b.n	800f162 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f144:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f146:	2b60      	cmp	r3, #96	@ 0x60
 800f148:	d90b      	bls.n	800f162 <create_name+0x2b2>
 800f14a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f14c:	2b7a      	cmp	r3, #122	@ 0x7a
 800f14e:	d808      	bhi.n	800f162 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f150:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f154:	f043 0301 	orr.w	r3, r3, #1
 800f158:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f15c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f15e:	3b20      	subs	r3, #32
 800f160:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f162:	6a3b      	ldr	r3, [r7, #32]
 800f164:	1c5a      	adds	r2, r3, #1
 800f166:	623a      	str	r2, [r7, #32]
 800f168:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f16a:	b2d1      	uxtb	r1, r2
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	4413      	add	r3, r2
 800f170:	460a      	mov	r2, r1
 800f172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f176:	e763      	b.n	800f040 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f178:	bf00      	nop
 800f17a:	e006      	b.n	800f18a <create_name+0x2da>
 800f17c:	08010c04 	.word	0x08010c04
 800f180:	08010ed0 	.word	0x08010ed0
 800f184:	08010c10 	.word	0x08010c10
			if (si > di) break;			/* No extension */
 800f188:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f190:	2be5      	cmp	r3, #229	@ 0xe5
 800f192:	d103      	bne.n	800f19c <create_name+0x2ec>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2205      	movs	r2, #5
 800f198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	2b08      	cmp	r3, #8
 800f1a0:	d104      	bne.n	800f1ac <create_name+0x2fc>
 800f1a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f1a6:	009b      	lsls	r3, r3, #2
 800f1a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f1ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f1b0:	f003 030c 	and.w	r3, r3, #12
 800f1b4:	2b0c      	cmp	r3, #12
 800f1b6:	d005      	beq.n	800f1c4 <create_name+0x314>
 800f1b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f1bc:	f003 0303 	and.w	r3, r3, #3
 800f1c0:	2b03      	cmp	r3, #3
 800f1c2:	d105      	bne.n	800f1d0 <create_name+0x320>
 800f1c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1c8:	f043 0302 	orr.w	r3, r3, #2
 800f1cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1d4:	f003 0302 	and.w	r3, r3, #2
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d117      	bne.n	800f20c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f1dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f1e0:	f003 0303 	and.w	r3, r3, #3
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d105      	bne.n	800f1f4 <create_name+0x344>
 800f1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1ec:	f043 0310 	orr.w	r3, r3, #16
 800f1f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f1f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f1f8:	f003 030c 	and.w	r3, r3, #12
 800f1fc:	2b04      	cmp	r3, #4
 800f1fe:	d105      	bne.n	800f20c <create_name+0x35c>
 800f200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f204:	f043 0308 	orr.w	r3, r3, #8
 800f208:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800f212:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800f216:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f218:	4618      	mov	r0, r3
 800f21a:	3728      	adds	r7, #40	@ 0x28
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}

0800f220 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b086      	sub	sp, #24
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f234:	e002      	b.n	800f23c <follow_path+0x1c>
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	3301      	adds	r3, #1
 800f23a:	603b      	str	r3, [r7, #0]
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	2b2f      	cmp	r3, #47	@ 0x2f
 800f242:	d0f8      	beq.n	800f236 <follow_path+0x16>
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	2b5c      	cmp	r3, #92	@ 0x5c
 800f24a:	d0f4      	beq.n	800f236 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	2200      	movs	r2, #0
 800f250:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	2b1f      	cmp	r3, #31
 800f258:	d80a      	bhi.n	800f270 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2280      	movs	r2, #128	@ 0x80
 800f25e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f262:	2100      	movs	r1, #0
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7ff f91c 	bl	800e4a2 <dir_sdi>
 800f26a:	4603      	mov	r3, r0
 800f26c:	75fb      	strb	r3, [r7, #23]
 800f26e:	e043      	b.n	800f2f8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f270:	463b      	mov	r3, r7
 800f272:	4619      	mov	r1, r3
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f7ff fe1b 	bl	800eeb0 <create_name>
 800f27a:	4603      	mov	r3, r0
 800f27c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f27e:	7dfb      	ldrb	r3, [r7, #23]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d134      	bne.n	800f2ee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7ff fc5a 	bl	800eb3e <dir_find>
 800f28a:	4603      	mov	r3, r0
 800f28c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f294:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f296:	7dfb      	ldrb	r3, [r7, #23]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d00a      	beq.n	800f2b2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f29c:	7dfb      	ldrb	r3, [r7, #23]
 800f29e:	2b04      	cmp	r3, #4
 800f2a0:	d127      	bne.n	800f2f2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f2a2:	7afb      	ldrb	r3, [r7, #11]
 800f2a4:	f003 0304 	and.w	r3, r3, #4
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d122      	bne.n	800f2f2 <follow_path+0xd2>
 800f2ac:	2305      	movs	r3, #5
 800f2ae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f2b0:	e01f      	b.n	800f2f2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f2b2:	7afb      	ldrb	r3, [r7, #11]
 800f2b4:	f003 0304 	and.w	r3, r3, #4
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d11c      	bne.n	800f2f6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	799b      	ldrb	r3, [r3, #6]
 800f2c0:	f003 0310 	and.w	r3, r3, #16
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d102      	bne.n	800f2ce <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f2c8:	2305      	movs	r3, #5
 800f2ca:	75fb      	strb	r3, [r7, #23]
 800f2cc:	e014      	b.n	800f2f8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	695b      	ldr	r3, [r3, #20]
 800f2d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2dc:	4413      	add	r3, r2
 800f2de:	4619      	mov	r1, r3
 800f2e0:	68f8      	ldr	r0, [r7, #12]
 800f2e2:	f7ff fa65 	bl	800e7b0 <ld_clust>
 800f2e6:	4602      	mov	r2, r0
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f2ec:	e7c0      	b.n	800f270 <follow_path+0x50>
			if (res != FR_OK) break;
 800f2ee:	bf00      	nop
 800f2f0:	e002      	b.n	800f2f8 <follow_path+0xd8>
				break;
 800f2f2:	bf00      	nop
 800f2f4:	e000      	b.n	800f2f8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f2f6:	bf00      	nop
			}
		}
	}

	return res;
 800f2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3718      	adds	r7, #24
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f302:	b480      	push	{r7}
 800f304:	b087      	sub	sp, #28
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f30a:	f04f 33ff 	mov.w	r3, #4294967295
 800f30e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d031      	beq.n	800f37c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	617b      	str	r3, [r7, #20]
 800f31e:	e002      	b.n	800f326 <get_ldnumber+0x24>
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	3301      	adds	r3, #1
 800f324:	617b      	str	r3, [r7, #20]
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	2b1f      	cmp	r3, #31
 800f32c:	d903      	bls.n	800f336 <get_ldnumber+0x34>
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	2b3a      	cmp	r3, #58	@ 0x3a
 800f334:	d1f4      	bne.n	800f320 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	2b3a      	cmp	r3, #58	@ 0x3a
 800f33c:	d11c      	bne.n	800f378 <get_ldnumber+0x76>
			tp = *path;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	1c5a      	adds	r2, r3, #1
 800f348:	60fa      	str	r2, [r7, #12]
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	3b30      	subs	r3, #48	@ 0x30
 800f34e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	2b09      	cmp	r3, #9
 800f354:	d80e      	bhi.n	800f374 <get_ldnumber+0x72>
 800f356:	68fa      	ldr	r2, [r7, #12]
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d10a      	bne.n	800f374 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d107      	bne.n	800f374 <get_ldnumber+0x72>
					vol = (int)i;
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	3301      	adds	r3, #1
 800f36c:	617b      	str	r3, [r7, #20]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	697a      	ldr	r2, [r7, #20]
 800f372:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	e002      	b.n	800f37e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f378:	2300      	movs	r3, #0
 800f37a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f37c:	693b      	ldr	r3, [r7, #16]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	371c      	adds	r7, #28
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr
	...

0800f38c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b082      	sub	sp, #8
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2200      	movs	r2, #0
 800f39a:	70da      	strb	r2, [r3, #3]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f04f 32ff 	mov.w	r2, #4294967295
 800f3a2:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f3a4:	6839      	ldr	r1, [r7, #0]
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f7fe fcfe 	bl	800dda8 <move_window>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d001      	beq.n	800f3b6 <check_fs+0x2a>
 800f3b2:	2304      	movs	r3, #4
 800f3b4:	e038      	b.n	800f428 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	3334      	adds	r3, #52	@ 0x34
 800f3ba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fe fa42 	bl	800d848 <ld_word>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d001      	beq.n	800f3d4 <check_fs+0x48>
 800f3d0:	2303      	movs	r3, #3
 800f3d2:	e029      	b.n	800f428 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f3da:	2be9      	cmp	r3, #233	@ 0xe9
 800f3dc:	d009      	beq.n	800f3f2 <check_fs+0x66>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f3e4:	2beb      	cmp	r3, #235	@ 0xeb
 800f3e6:	d11e      	bne.n	800f426 <check_fs+0x9a>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800f3ee:	2b90      	cmp	r3, #144	@ 0x90
 800f3f0:	d119      	bne.n	800f426 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	3334      	adds	r3, #52	@ 0x34
 800f3f6:	3336      	adds	r3, #54	@ 0x36
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7fe fa3d 	bl	800d878 <ld_dword>
 800f3fe:	4603      	mov	r3, r0
 800f400:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f404:	4a0a      	ldr	r2, [pc, #40]	@ (800f430 <check_fs+0xa4>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d101      	bne.n	800f40e <check_fs+0x82>
 800f40a:	2300      	movs	r3, #0
 800f40c:	e00c      	b.n	800f428 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	3334      	adds	r3, #52	@ 0x34
 800f412:	3352      	adds	r3, #82	@ 0x52
 800f414:	4618      	mov	r0, r3
 800f416:	f7fe fa2f 	bl	800d878 <ld_dword>
 800f41a:	4603      	mov	r3, r0
 800f41c:	4a05      	ldr	r2, [pc, #20]	@ (800f434 <check_fs+0xa8>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d101      	bne.n	800f426 <check_fs+0x9a>
 800f422:	2300      	movs	r3, #0
 800f424:	e000      	b.n	800f428 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f426:	2302      	movs	r3, #2
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3708      	adds	r7, #8
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	00544146 	.word	0x00544146
 800f434:	33544146 	.word	0x33544146

0800f438 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b096      	sub	sp, #88	@ 0x58
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	4613      	mov	r3, r2
 800f444:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	2200      	movs	r2, #0
 800f44a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	f7ff ff58 	bl	800f302 <get_ldnumber>
 800f452:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f456:	2b00      	cmp	r3, #0
 800f458:	da01      	bge.n	800f45e <find_volume+0x26>
 800f45a:	230b      	movs	r3, #11
 800f45c:	e22d      	b.n	800f8ba <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f45e:	4aa1      	ldr	r2, [pc, #644]	@ (800f6e4 <find_volume+0x2ac>)
 800f460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f466:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d101      	bne.n	800f472 <find_volume+0x3a>
 800f46e:	230c      	movs	r3, #12
 800f470:	e223      	b.n	800f8ba <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f476:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f478:	79fb      	ldrb	r3, [r7, #7]
 800f47a:	f023 0301 	bic.w	r3, r3, #1
 800f47e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d01a      	beq.n	800f4be <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f48a:	785b      	ldrb	r3, [r3, #1]
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7fe f933 	bl	800d6f8 <disk_status>
 800f492:	4603      	mov	r3, r0
 800f494:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f498:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f49c:	f003 0301 	and.w	r3, r3, #1
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d10c      	bne.n	800f4be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f4a4:	79fb      	ldrb	r3, [r7, #7]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d007      	beq.n	800f4ba <find_volume+0x82>
 800f4aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f4ae:	f003 0304 	and.w	r3, r3, #4
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d001      	beq.n	800f4ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f4b6:	230a      	movs	r3, #10
 800f4b8:	e1ff      	b.n	800f8ba <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	e1fd      	b.n	800f8ba <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f4c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4c6:	b2da      	uxtb	r2, r3
 800f4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ce:	785b      	ldrb	r3, [r3, #1]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7fe f92b 	bl	800d72c <disk_initialize>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f4dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f4e0:	f003 0301 	and.w	r3, r3, #1
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d001      	beq.n	800f4ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f4e8:	2303      	movs	r3, #3
 800f4ea:	e1e6      	b.n	800f8ba <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f4ec:	79fb      	ldrb	r3, [r7, #7]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d007      	beq.n	800f502 <find_volume+0xca>
 800f4f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f4f6:	f003 0304 	and.w	r3, r3, #4
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d001      	beq.n	800f502 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f4fe:	230a      	movs	r3, #10
 800f500:	e1db      	b.n	800f8ba <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f506:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f508:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f50a:	f7ff ff3f 	bl	800f38c <check_fs>
 800f50e:	4603      	mov	r3, r0
 800f510:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f514:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f518:	2b02      	cmp	r3, #2
 800f51a:	d149      	bne.n	800f5b0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f51c:	2300      	movs	r3, #0
 800f51e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f520:	e01e      	b.n	800f560 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f524:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f52a:	011b      	lsls	r3, r3, #4
 800f52c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f530:	4413      	add	r3, r2
 800f532:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f536:	3304      	adds	r3, #4
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d006      	beq.n	800f54c <find_volume+0x114>
 800f53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f540:	3308      	adds	r3, #8
 800f542:	4618      	mov	r0, r3
 800f544:	f7fe f998 	bl	800d878 <ld_dword>
 800f548:	4602      	mov	r2, r0
 800f54a:	e000      	b.n	800f54e <find_volume+0x116>
 800f54c:	2200      	movs	r2, #0
 800f54e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f550:	009b      	lsls	r3, r3, #2
 800f552:	3358      	adds	r3, #88	@ 0x58
 800f554:	443b      	add	r3, r7
 800f556:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f55a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f55c:	3301      	adds	r3, #1
 800f55e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f560:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f562:	2b03      	cmp	r3, #3
 800f564:	d9dd      	bls.n	800f522 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f566:	2300      	movs	r3, #0
 800f568:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f56a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d002      	beq.n	800f576 <find_volume+0x13e>
 800f570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f572:	3b01      	subs	r3, #1
 800f574:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f578:	009b      	lsls	r3, r3, #2
 800f57a:	3358      	adds	r3, #88	@ 0x58
 800f57c:	443b      	add	r3, r7
 800f57e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f582:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f586:	2b00      	cmp	r3, #0
 800f588:	d005      	beq.n	800f596 <find_volume+0x15e>
 800f58a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f58c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f58e:	f7ff fefd 	bl	800f38c <check_fs>
 800f592:	4603      	mov	r3, r0
 800f594:	e000      	b.n	800f598 <find_volume+0x160>
 800f596:	2303      	movs	r3, #3
 800f598:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f59c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f5a0:	2b01      	cmp	r3, #1
 800f5a2:	d905      	bls.n	800f5b0 <find_volume+0x178>
 800f5a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800f5aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5ac:	2b03      	cmp	r3, #3
 800f5ae:	d9e2      	bls.n	800f576 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f5b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f5b4:	2b04      	cmp	r3, #4
 800f5b6:	d101      	bne.n	800f5bc <find_volume+0x184>
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	e17e      	b.n	800f8ba <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f5bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	d901      	bls.n	800f5c8 <find_volume+0x190>
 800f5c4:	230d      	movs	r3, #13
 800f5c6:	e178      	b.n	800f8ba <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ca:	3334      	adds	r3, #52	@ 0x34
 800f5cc:	330b      	adds	r3, #11
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fe f93a 	bl	800d848 <ld_word>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f5da:	d001      	beq.n	800f5e0 <find_volume+0x1a8>
 800f5dc:	230d      	movs	r3, #13
 800f5de:	e16c      	b.n	800f8ba <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e2:	3334      	adds	r3, #52	@ 0x34
 800f5e4:	3316      	adds	r3, #22
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7fe f92e 	bl	800d848 <ld_word>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f5f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d106      	bne.n	800f604 <find_volume+0x1cc>
 800f5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f8:	3334      	adds	r3, #52	@ 0x34
 800f5fa:	3324      	adds	r3, #36	@ 0x24
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fe f93b 	bl	800d878 <ld_dword>
 800f602:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f606:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f608:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f60c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f612:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f616:	789b      	ldrb	r3, [r3, #2]
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d005      	beq.n	800f628 <find_volume+0x1f0>
 800f61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f61e:	789b      	ldrb	r3, [r3, #2]
 800f620:	2b02      	cmp	r3, #2
 800f622:	d001      	beq.n	800f628 <find_volume+0x1f0>
 800f624:	230d      	movs	r3, #13
 800f626:	e148      	b.n	800f8ba <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f62a:	789b      	ldrb	r3, [r3, #2]
 800f62c:	461a      	mov	r2, r3
 800f62e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f630:	fb02 f303 	mul.w	r3, r2, r3
 800f634:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f63c:	461a      	mov	r2, r3
 800f63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f640:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f644:	895b      	ldrh	r3, [r3, #10]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d008      	beq.n	800f65c <find_volume+0x224>
 800f64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f64c:	895b      	ldrh	r3, [r3, #10]
 800f64e:	461a      	mov	r2, r3
 800f650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f652:	895b      	ldrh	r3, [r3, #10]
 800f654:	3b01      	subs	r3, #1
 800f656:	4013      	ands	r3, r2
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d001      	beq.n	800f660 <find_volume+0x228>
 800f65c:	230d      	movs	r3, #13
 800f65e:	e12c      	b.n	800f8ba <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f662:	3334      	adds	r3, #52	@ 0x34
 800f664:	3311      	adds	r3, #17
 800f666:	4618      	mov	r0, r3
 800f668:	f7fe f8ee 	bl	800d848 <ld_word>
 800f66c:	4603      	mov	r3, r0
 800f66e:	461a      	mov	r2, r3
 800f670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f672:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f676:	891b      	ldrh	r3, [r3, #8]
 800f678:	f003 030f 	and.w	r3, r3, #15
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d001      	beq.n	800f686 <find_volume+0x24e>
 800f682:	230d      	movs	r3, #13
 800f684:	e119      	b.n	800f8ba <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f688:	3334      	adds	r3, #52	@ 0x34
 800f68a:	3313      	adds	r3, #19
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7fe f8db 	bl	800d848 <ld_word>
 800f692:	4603      	mov	r3, r0
 800f694:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d106      	bne.n	800f6aa <find_volume+0x272>
 800f69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f69e:	3334      	adds	r3, #52	@ 0x34
 800f6a0:	3320      	adds	r3, #32
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fe f8e8 	bl	800d878 <ld_dword>
 800f6a8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ac:	3334      	adds	r3, #52	@ 0x34
 800f6ae:	330e      	adds	r3, #14
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7fe f8c9 	bl	800d848 <ld_word>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f6ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d101      	bne.n	800f6c4 <find_volume+0x28c>
 800f6c0:	230d      	movs	r3, #13
 800f6c2:	e0fa      	b.n	800f8ba <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f6c4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f6c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6c8:	4413      	add	r3, r2
 800f6ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f6cc:	8912      	ldrh	r2, [r2, #8]
 800f6ce:	0912      	lsrs	r2, r2, #4
 800f6d0:	b292      	uxth	r2, r2
 800f6d2:	4413      	add	r3, r2
 800f6d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f6d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d204      	bcs.n	800f6e8 <find_volume+0x2b0>
 800f6de:	230d      	movs	r3, #13
 800f6e0:	e0eb      	b.n	800f8ba <find_volume+0x482>
 800f6e2:	bf00      	nop
 800f6e4:	20018988 	.word	0x20018988
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f6e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ec:	1ad3      	subs	r3, r2, r3
 800f6ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f6f0:	8952      	ldrh	r2, [r2, #10]
 800f6f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6f6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d101      	bne.n	800f702 <find_volume+0x2ca>
 800f6fe:	230d      	movs	r3, #13
 800f700:	e0db      	b.n	800f8ba <find_volume+0x482>
		fmt = FS_FAT32;
 800f702:	2303      	movs	r3, #3
 800f704:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f70a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f70e:	4293      	cmp	r3, r2
 800f710:	d802      	bhi.n	800f718 <find_volume+0x2e0>
 800f712:	2302      	movs	r3, #2
 800f714:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f71a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f71e:	4293      	cmp	r3, r2
 800f720:	d802      	bhi.n	800f728 <find_volume+0x2f0>
 800f722:	2301      	movs	r3, #1
 800f724:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f72a:	1c9a      	adds	r2, r3, #2
 800f72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f72e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f732:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f734:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f736:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f73a:	441a      	add	r2, r3
 800f73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f73e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f740:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f744:	441a      	add	r2, r3
 800f746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f748:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800f74a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f74e:	2b03      	cmp	r3, #3
 800f750:	d11e      	bne.n	800f790 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f754:	3334      	adds	r3, #52	@ 0x34
 800f756:	332a      	adds	r3, #42	@ 0x2a
 800f758:	4618      	mov	r0, r3
 800f75a:	f7fe f875 	bl	800d848 <ld_word>
 800f75e:	4603      	mov	r3, r0
 800f760:	2b00      	cmp	r3, #0
 800f762:	d001      	beq.n	800f768 <find_volume+0x330>
 800f764:	230d      	movs	r3, #13
 800f766:	e0a8      	b.n	800f8ba <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f76a:	891b      	ldrh	r3, [r3, #8]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d001      	beq.n	800f774 <find_volume+0x33c>
 800f770:	230d      	movs	r3, #13
 800f772:	e0a2      	b.n	800f8ba <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f776:	3334      	adds	r3, #52	@ 0x34
 800f778:	332c      	adds	r3, #44	@ 0x2c
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7fe f87c 	bl	800d878 <ld_dword>
 800f780:	4602      	mov	r2, r0
 800f782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f784:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f788:	699b      	ldr	r3, [r3, #24]
 800f78a:	009b      	lsls	r3, r3, #2
 800f78c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f78e:	e01f      	b.n	800f7d0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f792:	891b      	ldrh	r3, [r3, #8]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d101      	bne.n	800f79c <find_volume+0x364>
 800f798:	230d      	movs	r3, #13
 800f79a:	e08e      	b.n	800f8ba <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f79e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f7a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7a2:	441a      	add	r2, r3
 800f7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7a6:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f7a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f7ac:	2b02      	cmp	r3, #2
 800f7ae:	d103      	bne.n	800f7b8 <find_volume+0x380>
 800f7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b2:	699b      	ldr	r3, [r3, #24]
 800f7b4:	005b      	lsls	r3, r3, #1
 800f7b6:	e00a      	b.n	800f7ce <find_volume+0x396>
 800f7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ba:	699a      	ldr	r2, [r3, #24]
 800f7bc:	4613      	mov	r3, r2
 800f7be:	005b      	lsls	r3, r3, #1
 800f7c0:	4413      	add	r3, r2
 800f7c2:	085a      	lsrs	r2, r3, #1
 800f7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7c6:	699b      	ldr	r3, [r3, #24]
 800f7c8:	f003 0301 	and.w	r3, r3, #1
 800f7cc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f7ce:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d2:	69da      	ldr	r2, [r3, #28]
 800f7d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f7d6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f7da:	0a5b      	lsrs	r3, r3, #9
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d201      	bcs.n	800f7e4 <find_volume+0x3ac>
 800f7e0:	230d      	movs	r3, #13
 800f7e2:	e06a      	b.n	800f8ba <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f7ea:	615a      	str	r2, [r3, #20]
 800f7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ee:	695a      	ldr	r2, [r3, #20]
 800f7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f6:	2280      	movs	r2, #128	@ 0x80
 800f7f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f7fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f7fe:	2b03      	cmp	r3, #3
 800f800:	d149      	bne.n	800f896 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f804:	3334      	adds	r3, #52	@ 0x34
 800f806:	3330      	adds	r3, #48	@ 0x30
 800f808:	4618      	mov	r0, r3
 800f80a:	f7fe f81d 	bl	800d848 <ld_word>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b01      	cmp	r3, #1
 800f812:	d140      	bne.n	800f896 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f814:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f816:	3301      	adds	r3, #1
 800f818:	4619      	mov	r1, r3
 800f81a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f81c:	f7fe fac4 	bl	800dda8 <move_window>
 800f820:	4603      	mov	r3, r0
 800f822:	2b00      	cmp	r3, #0
 800f824:	d137      	bne.n	800f896 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f828:	2200      	movs	r2, #0
 800f82a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f82e:	3334      	adds	r3, #52	@ 0x34
 800f830:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f834:	4618      	mov	r0, r3
 800f836:	f7fe f807 	bl	800d848 <ld_word>
 800f83a:	4603      	mov	r3, r0
 800f83c:	461a      	mov	r2, r3
 800f83e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f842:	429a      	cmp	r2, r3
 800f844:	d127      	bne.n	800f896 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f848:	3334      	adds	r3, #52	@ 0x34
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fe f814 	bl	800d878 <ld_dword>
 800f850:	4603      	mov	r3, r0
 800f852:	4a1c      	ldr	r2, [pc, #112]	@ (800f8c4 <find_volume+0x48c>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d11e      	bne.n	800f896 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f85a:	3334      	adds	r3, #52	@ 0x34
 800f85c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f860:	4618      	mov	r0, r3
 800f862:	f7fe f809 	bl	800d878 <ld_dword>
 800f866:	4603      	mov	r3, r0
 800f868:	4a17      	ldr	r2, [pc, #92]	@ (800f8c8 <find_volume+0x490>)
 800f86a:	4293      	cmp	r3, r2
 800f86c:	d113      	bne.n	800f896 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f870:	3334      	adds	r3, #52	@ 0x34
 800f872:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f876:	4618      	mov	r0, r3
 800f878:	f7fd fffe 	bl	800d878 <ld_dword>
 800f87c:	4602      	mov	r2, r0
 800f87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f880:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f884:	3334      	adds	r3, #52	@ 0x34
 800f886:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fd fff4 	bl	800d878 <ld_dword>
 800f890:	4602      	mov	r2, r0
 800f892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f894:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f898:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f89c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f89e:	4b0b      	ldr	r3, [pc, #44]	@ (800f8cc <find_volume+0x494>)
 800f8a0:	881b      	ldrh	r3, [r3, #0]
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	b29a      	uxth	r2, r3
 800f8a6:	4b09      	ldr	r3, [pc, #36]	@ (800f8cc <find_volume+0x494>)
 800f8a8:	801a      	strh	r2, [r3, #0]
 800f8aa:	4b08      	ldr	r3, [pc, #32]	@ (800f8cc <find_volume+0x494>)
 800f8ac:	881a      	ldrh	r2, [r3, #0]
 800f8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8b0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f8b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f8b4:	f7fe fa10 	bl	800dcd8 <clear_lock>
#endif
	return FR_OK;
 800f8b8:	2300      	movs	r3, #0
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3758      	adds	r7, #88	@ 0x58
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	41615252 	.word	0x41615252
 800f8c8:	61417272 	.word	0x61417272
 800f8cc:	2001898c 	.word	0x2001898c

0800f8d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b084      	sub	sp, #16
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f8da:	2309      	movs	r3, #9
 800f8dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d01c      	beq.n	800f91e <validate+0x4e>
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d018      	beq.n	800f91e <validate+0x4e>
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d013      	beq.n	800f91e <validate+0x4e>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	889a      	ldrh	r2, [r3, #4]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	88db      	ldrh	r3, [r3, #6]
 800f900:	429a      	cmp	r2, r3
 800f902:	d10c      	bne.n	800f91e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	785b      	ldrb	r3, [r3, #1]
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7fd fef4 	bl	800d6f8 <disk_status>
 800f910:	4603      	mov	r3, r0
 800f912:	f003 0301 	and.w	r3, r3, #1
 800f916:	2b00      	cmp	r3, #0
 800f918:	d101      	bne.n	800f91e <validate+0x4e>
			res = FR_OK;
 800f91a:	2300      	movs	r3, #0
 800f91c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f91e:	7bfb      	ldrb	r3, [r7, #15]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d102      	bne.n	800f92a <validate+0x5a>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	e000      	b.n	800f92c <validate+0x5c>
 800f92a:	2300      	movs	r3, #0
 800f92c:	683a      	ldr	r2, [r7, #0]
 800f92e:	6013      	str	r3, [r2, #0]
	return res;
 800f930:	7bfb      	ldrb	r3, [r7, #15]
}
 800f932:	4618      	mov	r0, r3
 800f934:	3710      	adds	r7, #16
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
	...

0800f93c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b088      	sub	sp, #32
 800f940:	af00      	add	r7, sp, #0
 800f942:	60f8      	str	r0, [r7, #12]
 800f944:	60b9      	str	r1, [r7, #8]
 800f946:	4613      	mov	r3, r2
 800f948:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f94e:	f107 0310 	add.w	r3, r7, #16
 800f952:	4618      	mov	r0, r3
 800f954:	f7ff fcd5 	bl	800f302 <get_ldnumber>
 800f958:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f95a:	69fb      	ldr	r3, [r7, #28]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	da01      	bge.n	800f964 <f_mount+0x28>
 800f960:	230b      	movs	r3, #11
 800f962:	e02b      	b.n	800f9bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f964:	4a17      	ldr	r2, [pc, #92]	@ (800f9c4 <f_mount+0x88>)
 800f966:	69fb      	ldr	r3, [r7, #28]
 800f968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f96c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f96e:	69bb      	ldr	r3, [r7, #24]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d005      	beq.n	800f980 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f974:	69b8      	ldr	r0, [r7, #24]
 800f976:	f7fe f9af 	bl	800dcd8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f97a:	69bb      	ldr	r3, [r7, #24]
 800f97c:	2200      	movs	r2, #0
 800f97e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d002      	beq.n	800f98c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	2200      	movs	r2, #0
 800f98a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	490d      	ldr	r1, [pc, #52]	@ (800f9c4 <f_mount+0x88>)
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d002      	beq.n	800f9a2 <f_mount+0x66>
 800f99c:	79fb      	ldrb	r3, [r7, #7]
 800f99e:	2b01      	cmp	r3, #1
 800f9a0:	d001      	beq.n	800f9a6 <f_mount+0x6a>
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	e00a      	b.n	800f9bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f9a6:	f107 010c 	add.w	r1, r7, #12
 800f9aa:	f107 0308 	add.w	r3, r7, #8
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7ff fd41 	bl	800f438 <find_volume>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f9ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3720      	adds	r7, #32
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	20018988 	.word	0x20018988

0800f9c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b09a      	sub	sp, #104	@ 0x68
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	4613      	mov	r3, r2
 800f9d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d101      	bne.n	800f9e0 <f_open+0x18>
 800f9dc:	2309      	movs	r3, #9
 800f9de:	e1b9      	b.n	800fd54 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f9e0:	79fb      	ldrb	r3, [r7, #7]
 800f9e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f9e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f9e8:	79fa      	ldrb	r2, [r7, #7]
 800f9ea:	f107 0110 	add.w	r1, r7, #16
 800f9ee:	f107 0308 	add.w	r3, r7, #8
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7ff fd20 	bl	800f438 <find_volume>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800f9fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	f040 819d 	bne.w	800fd42 <f_open+0x37a>
		dj.obj.fs = fs;
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800fa0c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800fa10:	f000 fdef 	bl	80105f2 <ff_memalloc>
 800fa14:	65b8      	str	r0, [r7, #88]	@ 0x58
 800fa16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d101      	bne.n	800fa20 <f_open+0x58>
 800fa1c:	2311      	movs	r3, #17
 800fa1e:	e199      	b.n	800fd54 <f_open+0x38c>
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fa24:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800fa26:	68ba      	ldr	r2, [r7, #8]
 800fa28:	f107 0314 	add.w	r3, r7, #20
 800fa2c:	4611      	mov	r1, r2
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7ff fbf6 	bl	800f220 <follow_path>
 800fa34:	4603      	mov	r3, r0
 800fa36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fa3a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d118      	bne.n	800fa74 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fa42:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fa46:	b25b      	sxtb	r3, r3
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	da03      	bge.n	800fa54 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800fa4c:	2306      	movs	r3, #6
 800fa4e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fa52:	e00f      	b.n	800fa74 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fa54:	79fb      	ldrb	r3, [r7, #7]
 800fa56:	2b01      	cmp	r3, #1
 800fa58:	bf8c      	ite	hi
 800fa5a:	2301      	movhi	r3, #1
 800fa5c:	2300      	movls	r3, #0
 800fa5e:	b2db      	uxtb	r3, r3
 800fa60:	461a      	mov	r2, r3
 800fa62:	f107 0314 	add.w	r3, r7, #20
 800fa66:	4611      	mov	r1, r2
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7fd ffed 	bl	800da48 <chk_lock>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fa74:	79fb      	ldrb	r3, [r7, #7]
 800fa76:	f003 031c 	and.w	r3, r3, #28
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d07f      	beq.n	800fb7e <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 800fa7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d017      	beq.n	800fab6 <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fa86:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa8a:	2b04      	cmp	r3, #4
 800fa8c:	d10e      	bne.n	800faac <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fa8e:	f7fe f837 	bl	800db00 <enq_lock>
 800fa92:	4603      	mov	r3, r0
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d006      	beq.n	800faa6 <f_open+0xde>
 800fa98:	f107 0314 	add.w	r3, r7, #20
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f7ff f90f 	bl	800ecc0 <dir_register>
 800faa2:	4603      	mov	r3, r0
 800faa4:	e000      	b.n	800faa8 <f_open+0xe0>
 800faa6:	2312      	movs	r3, #18
 800faa8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800faac:	79fb      	ldrb	r3, [r7, #7]
 800faae:	f043 0308 	orr.w	r3, r3, #8
 800fab2:	71fb      	strb	r3, [r7, #7]
 800fab4:	e010      	b.n	800fad8 <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fab6:	7ebb      	ldrb	r3, [r7, #26]
 800fab8:	f003 0311 	and.w	r3, r3, #17
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d003      	beq.n	800fac8 <f_open+0x100>
					res = FR_DENIED;
 800fac0:	2307      	movs	r3, #7
 800fac2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fac6:	e007      	b.n	800fad8 <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fac8:	79fb      	ldrb	r3, [r7, #7]
 800faca:	f003 0304 	and.w	r3, r3, #4
 800face:	2b00      	cmp	r3, #0
 800fad0:	d002      	beq.n	800fad8 <f_open+0x110>
 800fad2:	2308      	movs	r3, #8
 800fad4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fad8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d168      	bne.n	800fbb2 <f_open+0x1ea>
 800fae0:	79fb      	ldrb	r3, [r7, #7]
 800fae2:	f003 0308 	and.w	r3, r3, #8
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d063      	beq.n	800fbb2 <f_open+0x1ea>
				dw = GET_FATTIME();
 800faea:	f7fd fea5 	bl	800d838 <get_fattime>
 800faee:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800faf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800faf2:	330e      	adds	r3, #14
 800faf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fd fefc 	bl	800d8f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fafc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fafe:	3316      	adds	r3, #22
 800fb00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fd fef6 	bl	800d8f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fb08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb0a:	330b      	adds	r3, #11
 800fb0c:	2220      	movs	r2, #32
 800fb0e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb14:	4611      	mov	r1, r2
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fe fe4a 	bl	800e7b0 <ld_clust>
 800fb1c:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fb22:	2200      	movs	r2, #0
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7fe fe62 	bl	800e7ee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fb2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb2c:	331c      	adds	r3, #28
 800fb2e:	2100      	movs	r1, #0
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7fd fedf 	bl	800d8f4 <st_dword>
					fs->wflag = 1;
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	2201      	movs	r2, #1
 800fb3a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fb3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d037      	beq.n	800fbb2 <f_open+0x1ea>
						dw = fs->winsect;
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb46:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800fb48:	f107 0314 	add.w	r3, r7, #20
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7fe fb75 	bl	800e240 <remove_chain>
 800fb56:	4603      	mov	r3, r0
 800fb58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800fb5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d126      	bne.n	800fbb2 <f_open+0x1ea>
							res = move_window(fs, dw);
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fe f91d 	bl	800dda8 <move_window>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fb78:	3a01      	subs	r2, #1
 800fb7a:	611a      	str	r2, [r3, #16]
 800fb7c:	e019      	b.n	800fbb2 <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fb7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d115      	bne.n	800fbb2 <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fb86:	7ebb      	ldrb	r3, [r7, #26]
 800fb88:	f003 0310 	and.w	r3, r3, #16
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d003      	beq.n	800fb98 <f_open+0x1d0>
					res = FR_NO_FILE;
 800fb90:	2304      	movs	r3, #4
 800fb92:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fb96:	e00c      	b.n	800fbb2 <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fb98:	79fb      	ldrb	r3, [r7, #7]
 800fb9a:	f003 0302 	and.w	r3, r3, #2
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d007      	beq.n	800fbb2 <f_open+0x1ea>
 800fba2:	7ebb      	ldrb	r3, [r7, #26]
 800fba4:	f003 0301 	and.w	r3, r3, #1
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d002      	beq.n	800fbb2 <f_open+0x1ea>
						res = FR_DENIED;
 800fbac:	2307      	movs	r3, #7
 800fbae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fbb2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d126      	bne.n	800fc08 <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fbba:	79fb      	ldrb	r3, [r7, #7]
 800fbbc:	f003 0308 	and.w	r3, r3, #8
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d003      	beq.n	800fbcc <f_open+0x204>
				mode |= FA_MODIFIED;
 800fbc4:	79fb      	ldrb	r3, [r7, #7]
 800fbc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbca:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800fbd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fbda:	79fb      	ldrb	r3, [r7, #7]
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	bf8c      	ite	hi
 800fbe0:	2301      	movhi	r3, #1
 800fbe2:	2300      	movls	r3, #0
 800fbe4:	b2db      	uxtb	r3, r3
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	f107 0314 	add.w	r3, r7, #20
 800fbec:	4611      	mov	r1, r2
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7fd ffa8 	bl	800db44 <inc_lock>
 800fbf4:	4602      	mov	r2, r0
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	691b      	ldr	r3, [r3, #16]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d102      	bne.n	800fc08 <f_open+0x240>
 800fc02:	2302      	movs	r3, #2
 800fc04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fc08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	f040 8095 	bne.w	800fd3c <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fc16:	4611      	mov	r1, r2
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fe fdc9 	bl	800e7b0 <ld_clust>
 800fc1e:	4602      	mov	r2, r0
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fc24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc26:	331c      	adds	r3, #28
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7fd fe25 	bl	800d878 <ld_dword>
 800fc2e:	4602      	mov	r2, r0
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	2200      	movs	r2, #0
 800fc38:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fc3a:	693a      	ldr	r2, [r7, #16]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	88da      	ldrh	r2, [r3, #6]
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	79fa      	ldrb	r2, [r7, #7]
 800fc4c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	2200      	movs	r2, #0
 800fc52:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2200      	movs	r2, #0
 800fc58:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	3330      	adds	r3, #48	@ 0x30
 800fc64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc68:	2100      	movs	r1, #0
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fd fe8f 	bl	800d98e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fc70:	79fb      	ldrb	r3, [r7, #7]
 800fc72:	f003 0320 	and.w	r3, r3, #32
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d060      	beq.n	800fd3c <f_open+0x374>
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	68db      	ldr	r3, [r3, #12]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d05c      	beq.n	800fd3c <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	68da      	ldr	r2, [r3, #12]
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	895b      	ldrh	r3, [r3, #10]
 800fc8e:	025b      	lsls	r3, r3, #9
 800fc90:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	689b      	ldr	r3, [r3, #8]
 800fc96:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fc9e:	e016      	b.n	800fcce <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7fe f93a 	bl	800df1e <get_fat>
 800fcaa:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fcac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d802      	bhi.n	800fcb8 <f_open+0x2f0>
 800fcb2:	2302      	movs	r3, #2
 800fcb4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fcb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fcba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcbe:	d102      	bne.n	800fcc6 <f_open+0x2fe>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fcc6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fcc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcca:	1ad3      	subs	r3, r2, r3
 800fccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fcce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d103      	bne.n	800fcde <f_open+0x316>
 800fcd6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fcd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d8e0      	bhi.n	800fca0 <f_open+0x2d8>
				}
				fp->clust = clst;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fce2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fce4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d127      	bne.n	800fd3c <f_open+0x374>
 800fcec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fcee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d022      	beq.n	800fd3c <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7fe f8f0 	bl	800dee0 <clust2sect>
 800fd00:	64b8      	str	r0, [r7, #72]	@ 0x48
 800fd02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d103      	bne.n	800fd10 <f_open+0x348>
						res = FR_INT_ERR;
 800fd08:	2302      	movs	r3, #2
 800fd0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fd0e:	e015      	b.n	800fd3c <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fd10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd12:	0a5a      	lsrs	r2, r3, #9
 800fd14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd16:	441a      	add	r2, r3
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	7858      	ldrb	r0, [r3, #1]
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	6a1a      	ldr	r2, [r3, #32]
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	f7fd fd26 	bl	800d77c <disk_read>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d002      	beq.n	800fd3c <f_open+0x374>
 800fd36:	2301      	movs	r3, #1
 800fd38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800fd3c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fd3e:	f000 fc64 	bl	801060a <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fd42:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d002      	beq.n	800fd50 <f_open+0x388>
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fd50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3768      	adds	r7, #104	@ 0x68
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b08e      	sub	sp, #56	@ 0x38
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	60f8      	str	r0, [r7, #12]
 800fd64:	60b9      	str	r1, [r7, #8]
 800fd66:	607a      	str	r2, [r7, #4]
 800fd68:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	2200      	movs	r2, #0
 800fd72:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f107 0214 	add.w	r2, r7, #20
 800fd7a:	4611      	mov	r1, r2
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7ff fda7 	bl	800f8d0 <validate>
 800fd82:	4603      	mov	r3, r0
 800fd84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fd88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d107      	bne.n	800fda0 <f_read+0x44>
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	7d5b      	ldrb	r3, [r3, #21]
 800fd94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fd98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d002      	beq.n	800fda6 <f_read+0x4a>
 800fda0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fda4:	e115      	b.n	800ffd2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	7d1b      	ldrb	r3, [r3, #20]
 800fdaa:	f003 0301 	and.w	r3, r3, #1
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d101      	bne.n	800fdb6 <f_read+0x5a>
 800fdb2:	2307      	movs	r3, #7
 800fdb4:	e10d      	b.n	800ffd2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	68da      	ldr	r2, [r3, #12]
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	699b      	ldr	r3, [r3, #24]
 800fdbe:	1ad3      	subs	r3, r2, r3
 800fdc0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	6a3b      	ldr	r3, [r7, #32]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	f240 80fe 	bls.w	800ffc8 <f_read+0x26c>
 800fdcc:	6a3b      	ldr	r3, [r7, #32]
 800fdce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fdd0:	e0fa      	b.n	800ffc8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	699b      	ldr	r3, [r3, #24]
 800fdd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	f040 80c6 	bne.w	800ff6c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	699b      	ldr	r3, [r3, #24]
 800fde4:	0a5b      	lsrs	r3, r3, #9
 800fde6:	697a      	ldr	r2, [r7, #20]
 800fde8:	8952      	ldrh	r2, [r2, #10]
 800fdea:	3a01      	subs	r2, #1
 800fdec:	4013      	ands	r3, r2
 800fdee:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d12f      	bne.n	800fe56 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	699b      	ldr	r3, [r3, #24]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d103      	bne.n	800fe06 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	689b      	ldr	r3, [r3, #8]
 800fe02:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe04:	e013      	b.n	800fe2e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d007      	beq.n	800fe1e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	699b      	ldr	r3, [r3, #24]
 800fe12:	4619      	mov	r1, r3
 800fe14:	68f8      	ldr	r0, [r7, #12]
 800fe16:	f7fe fb10 	bl	800e43a <clmt_clust>
 800fe1a:	6338      	str	r0, [r7, #48]	@ 0x30
 800fe1c:	e007      	b.n	800fe2e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fe1e:	68fa      	ldr	r2, [r7, #12]
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	69db      	ldr	r3, [r3, #28]
 800fe24:	4619      	mov	r1, r3
 800fe26:	4610      	mov	r0, r2
 800fe28:	f7fe f879 	bl	800df1e <get_fat>
 800fe2c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fe2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d804      	bhi.n	800fe3e <f_read+0xe2>
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	2202      	movs	r2, #2
 800fe38:	755a      	strb	r2, [r3, #21]
 800fe3a:	2302      	movs	r3, #2
 800fe3c:	e0c9      	b.n	800ffd2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe44:	d104      	bne.n	800fe50 <f_read+0xf4>
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	755a      	strb	r2, [r3, #21]
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	e0c0      	b.n	800ffd2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe54:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fe56:	697a      	ldr	r2, [r7, #20]
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	69db      	ldr	r3, [r3, #28]
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	4610      	mov	r0, r2
 800fe60:	f7fe f83e 	bl	800dee0 <clust2sect>
 800fe64:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fe66:	69bb      	ldr	r3, [r7, #24]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d104      	bne.n	800fe76 <f_read+0x11a>
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2202      	movs	r2, #2
 800fe70:	755a      	strb	r2, [r3, #21]
 800fe72:	2302      	movs	r3, #2
 800fe74:	e0ad      	b.n	800ffd2 <f_read+0x276>
			sect += csect;
 800fe76:	69ba      	ldr	r2, [r7, #24]
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	4413      	add	r3, r2
 800fe7c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	0a5b      	lsrs	r3, r3, #9
 800fe82:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fe84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d039      	beq.n	800fefe <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fe8a:	69fa      	ldr	r2, [r7, #28]
 800fe8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe8e:	4413      	add	r3, r2
 800fe90:	697a      	ldr	r2, [r7, #20]
 800fe92:	8952      	ldrh	r2, [r2, #10]
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d905      	bls.n	800fea4 <f_read+0x148>
					cc = fs->csize - csect;
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	895b      	ldrh	r3, [r3, #10]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	69fb      	ldr	r3, [r7, #28]
 800fea0:	1ad3      	subs	r3, r2, r3
 800fea2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	7858      	ldrb	r0, [r3, #1]
 800fea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feaa:	69ba      	ldr	r2, [r7, #24]
 800feac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800feae:	f7fd fc65 	bl	800d77c <disk_read>
 800feb2:	4603      	mov	r3, r0
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d004      	beq.n	800fec2 <f_read+0x166>
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2201      	movs	r2, #1
 800febc:	755a      	strb	r2, [r3, #21]
 800febe:	2301      	movs	r3, #1
 800fec0:	e087      	b.n	800ffd2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	7d1b      	ldrb	r3, [r3, #20]
 800fec6:	b25b      	sxtb	r3, r3
 800fec8:	2b00      	cmp	r3, #0
 800feca:	da14      	bge.n	800fef6 <f_read+0x19a>
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	6a1a      	ldr	r2, [r3, #32]
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	1ad3      	subs	r3, r2, r3
 800fed4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d90d      	bls.n	800fef6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	6a1a      	ldr	r2, [r3, #32]
 800fede:	69bb      	ldr	r3, [r7, #24]
 800fee0:	1ad3      	subs	r3, r2, r3
 800fee2:	025b      	lsls	r3, r3, #9
 800fee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fee6:	18d0      	adds	r0, r2, r3
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	3330      	adds	r3, #48	@ 0x30
 800feec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fef0:	4619      	mov	r1, r3
 800fef2:	f7fd fd2b 	bl	800d94c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef8:	025b      	lsls	r3, r3, #9
 800fefa:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800fefc:	e050      	b.n	800ffa0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6a1b      	ldr	r3, [r3, #32]
 800ff02:	69ba      	ldr	r2, [r7, #24]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d02e      	beq.n	800ff66 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	7d1b      	ldrb	r3, [r3, #20]
 800ff0c:	b25b      	sxtb	r3, r3
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	da18      	bge.n	800ff44 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	7858      	ldrb	r0, [r3, #1]
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	6a1a      	ldr	r2, [r3, #32]
 800ff20:	2301      	movs	r3, #1
 800ff22:	f7fd fc4b 	bl	800d7bc <disk_write>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d004      	beq.n	800ff36 <f_read+0x1da>
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2201      	movs	r2, #1
 800ff30:	755a      	strb	r2, [r3, #21]
 800ff32:	2301      	movs	r3, #1
 800ff34:	e04d      	b.n	800ffd2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	7d1b      	ldrb	r3, [r3, #20]
 800ff3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff3e:	b2da      	uxtb	r2, r3
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	7858      	ldrb	r0, [r3, #1]
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ff4e:	2301      	movs	r3, #1
 800ff50:	69ba      	ldr	r2, [r7, #24]
 800ff52:	f7fd fc13 	bl	800d77c <disk_read>
 800ff56:	4603      	mov	r3, r0
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d004      	beq.n	800ff66 <f_read+0x20a>
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	2201      	movs	r2, #1
 800ff60:	755a      	strb	r2, [r3, #21]
 800ff62:	2301      	movs	r3, #1
 800ff64:	e035      	b.n	800ffd2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	69ba      	ldr	r2, [r7, #24]
 800ff6a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	699b      	ldr	r3, [r3, #24]
 800ff70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff74:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ff78:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ff7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d901      	bls.n	800ff86 <f_read+0x22a>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	699b      	ldr	r3, [r3, #24]
 800ff90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff94:	4413      	add	r3, r2
 800ff96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff98:	4619      	mov	r1, r3
 800ff9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ff9c:	f7fd fcd6 	bl	800d94c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ffa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffa4:	4413      	add	r3, r2
 800ffa6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	699a      	ldr	r2, [r3, #24]
 800ffac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffae:	441a      	add	r2, r3
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	619a      	str	r2, [r3, #24]
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	681a      	ldr	r2, [r3, #0]
 800ffb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffba:	441a      	add	r2, r3
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	601a      	str	r2, [r3, #0]
 800ffc0:	687a      	ldr	r2, [r7, #4]
 800ffc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffc4:	1ad3      	subs	r3, r2, r3
 800ffc6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	f47f af01 	bne.w	800fdd2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ffd0:	2300      	movs	r3, #0
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3738      	adds	r7, #56	@ 0x38
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}

0800ffda <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ffda:	b580      	push	{r7, lr}
 800ffdc:	b086      	sub	sp, #24
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f107 0208 	add.w	r2, r7, #8
 800ffe8:	4611      	mov	r1, r2
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7ff fc70 	bl	800f8d0 <validate>
 800fff0:	4603      	mov	r3, r0
 800fff2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fff4:	7dfb      	ldrb	r3, [r7, #23]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d168      	bne.n	80100cc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	7d1b      	ldrb	r3, [r3, #20]
 800fffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010002:	2b00      	cmp	r3, #0
 8010004:	d062      	beq.n	80100cc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	7d1b      	ldrb	r3, [r3, #20]
 801000a:	b25b      	sxtb	r3, r3
 801000c:	2b00      	cmp	r3, #0
 801000e:	da15      	bge.n	801003c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	7858      	ldrb	r0, [r3, #1]
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6a1a      	ldr	r2, [r3, #32]
 801001e:	2301      	movs	r3, #1
 8010020:	f7fd fbcc 	bl	800d7bc <disk_write>
 8010024:	4603      	mov	r3, r0
 8010026:	2b00      	cmp	r3, #0
 8010028:	d001      	beq.n	801002e <f_sync+0x54>
 801002a:	2301      	movs	r3, #1
 801002c:	e04f      	b.n	80100ce <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	7d1b      	ldrb	r3, [r3, #20]
 8010032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010036:	b2da      	uxtb	r2, r3
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801003c:	f7fd fbfc 	bl	800d838 <get_fattime>
 8010040:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010042:	68ba      	ldr	r2, [r7, #8]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010048:	4619      	mov	r1, r3
 801004a:	4610      	mov	r0, r2
 801004c:	f7fd feac 	bl	800dda8 <move_window>
 8010050:	4603      	mov	r3, r0
 8010052:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010054:	7dfb      	ldrb	r3, [r7, #23]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d138      	bne.n	80100cc <f_sync+0xf2>
					dir = fp->dir_ptr;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801005e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	330b      	adds	r3, #11
 8010064:	781a      	ldrb	r2, [r3, #0]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	330b      	adds	r3, #11
 801006a:	f042 0220 	orr.w	r2, r2, #32
 801006e:	b2d2      	uxtb	r2, r2
 8010070:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6818      	ldr	r0, [r3, #0]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	689b      	ldr	r3, [r3, #8]
 801007a:	461a      	mov	r2, r3
 801007c:	68f9      	ldr	r1, [r7, #12]
 801007e:	f7fe fbb6 	bl	800e7ee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f103 021c 	add.w	r2, r3, #28
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	4619      	mov	r1, r3
 801008e:	4610      	mov	r0, r2
 8010090:	f7fd fc30 	bl	800d8f4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	3316      	adds	r3, #22
 8010098:	6939      	ldr	r1, [r7, #16]
 801009a:	4618      	mov	r0, r3
 801009c:	f7fd fc2a 	bl	800d8f4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	3312      	adds	r3, #18
 80100a4:	2100      	movs	r1, #0
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7fd fc09 	bl	800d8be <st_word>
					fs->wflag = 1;
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	2201      	movs	r2, #1
 80100b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7fd fea5 	bl	800de04 <sync_fs>
 80100ba:	4603      	mov	r3, r0
 80100bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	7d1b      	ldrb	r3, [r3, #20]
 80100c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80100c6:	b2da      	uxtb	r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80100cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	3718      	adds	r7, #24
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80100d6:	b580      	push	{r7, lr}
 80100d8:	b084      	sub	sp, #16
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f7ff ff7b 	bl	800ffda <f_sync>
 80100e4:	4603      	mov	r3, r0
 80100e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80100e8:	7bfb      	ldrb	r3, [r7, #15]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d118      	bne.n	8010120 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f107 0208 	add.w	r2, r7, #8
 80100f4:	4611      	mov	r1, r2
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7ff fbea 	bl	800f8d0 <validate>
 80100fc:	4603      	mov	r3, r0
 80100fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010100:	7bfb      	ldrb	r3, [r7, #15]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d10c      	bne.n	8010120 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	691b      	ldr	r3, [r3, #16]
 801010a:	4618      	mov	r0, r3
 801010c:	f7fd fda8 	bl	800dc60 <dec_lock>
 8010110:	4603      	mov	r3, r0
 8010112:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010114:	7bfb      	ldrb	r3, [r7, #15]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d102      	bne.n	8010120 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2200      	movs	r2, #0
 801011e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010120:	7bfb      	ldrb	r3, [r7, #15]
}
 8010122:	4618      	mov	r0, r3
 8010124:	3710      	adds	r7, #16
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}

0801012a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801012a:	b580      	push	{r7, lr}
 801012c:	b090      	sub	sp, #64	@ 0x40
 801012e:	af00      	add	r7, sp, #0
 8010130:	6078      	str	r0, [r7, #4]
 8010132:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f107 0208 	add.w	r2, r7, #8
 801013a:	4611      	mov	r1, r2
 801013c:	4618      	mov	r0, r3
 801013e:	f7ff fbc7 	bl	800f8d0 <validate>
 8010142:	4603      	mov	r3, r0
 8010144:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010148:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801014c:	2b00      	cmp	r3, #0
 801014e:	d103      	bne.n	8010158 <f_lseek+0x2e>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	7d5b      	ldrb	r3, [r3, #21]
 8010154:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010158:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801015c:	2b00      	cmp	r3, #0
 801015e:	d002      	beq.n	8010166 <f_lseek+0x3c>
 8010160:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010164:	e1e6      	b.n	8010534 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801016a:	2b00      	cmp	r3, #0
 801016c:	f000 80d1 	beq.w	8010312 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010176:	d15a      	bne.n	801022e <f_lseek+0x104>
			tbl = fp->cltbl;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801017c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801017e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010180:	1d1a      	adds	r2, r3, #4
 8010182:	627a      	str	r2, [r7, #36]	@ 0x24
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	617b      	str	r3, [r7, #20]
 8010188:	2302      	movs	r3, #2
 801018a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	689b      	ldr	r3, [r3, #8]
 8010190:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8010192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010194:	2b00      	cmp	r3, #0
 8010196:	d03a      	beq.n	801020e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801019a:	613b      	str	r3, [r7, #16]
 801019c:	2300      	movs	r3, #0
 801019e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80101a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101a2:	3302      	adds	r3, #2
 80101a4:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80101a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101a8:	60fb      	str	r3, [r7, #12]
 80101aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ac:	3301      	adds	r3, #1
 80101ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7fd feb2 	bl	800df1e <get_fat>
 80101ba:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80101bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101be:	2b01      	cmp	r3, #1
 80101c0:	d804      	bhi.n	80101cc <f_lseek+0xa2>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2202      	movs	r2, #2
 80101c6:	755a      	strb	r2, [r3, #21]
 80101c8:	2302      	movs	r3, #2
 80101ca:	e1b3      	b.n	8010534 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80101cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101d2:	d104      	bne.n	80101de <f_lseek+0xb4>
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2201      	movs	r2, #1
 80101d8:	755a      	strb	r2, [r3, #21]
 80101da:	2301      	movs	r3, #1
 80101dc:	e1aa      	b.n	8010534 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	3301      	adds	r3, #1
 80101e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d0de      	beq.n	80101a6 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80101e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d809      	bhi.n	8010204 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80101f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101f2:	1d1a      	adds	r2, r3, #4
 80101f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80101f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101f8:	601a      	str	r2, [r3, #0]
 80101fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101fc:	1d1a      	adds	r2, r3, #4
 80101fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8010200:	693a      	ldr	r2, [r7, #16]
 8010202:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	699b      	ldr	r3, [r3, #24]
 8010208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801020a:	429a      	cmp	r2, r3
 801020c:	d3c4      	bcc.n	8010198 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010212:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010214:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010216:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	429a      	cmp	r2, r3
 801021c:	d803      	bhi.n	8010226 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801021e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010220:	2200      	movs	r2, #0
 8010222:	601a      	str	r2, [r3, #0]
 8010224:	e184      	b.n	8010530 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010226:	2311      	movs	r3, #17
 8010228:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801022c:	e180      	b.n	8010530 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	683a      	ldr	r2, [r7, #0]
 8010234:	429a      	cmp	r2, r3
 8010236:	d902      	bls.n	801023e <f_lseek+0x114>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	68db      	ldr	r3, [r3, #12]
 801023c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	683a      	ldr	r2, [r7, #0]
 8010242:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	2b00      	cmp	r3, #0
 8010248:	f000 8172 	beq.w	8010530 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	3b01      	subs	r3, #1
 8010250:	4619      	mov	r1, r3
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f7fe f8f1 	bl	800e43a <clmt_clust>
 8010258:	4602      	mov	r2, r0
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	69db      	ldr	r3, [r3, #28]
 8010264:	4619      	mov	r1, r3
 8010266:	4610      	mov	r0, r2
 8010268:	f7fd fe3a 	bl	800dee0 <clust2sect>
 801026c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d104      	bne.n	801027e <f_lseek+0x154>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2202      	movs	r2, #2
 8010278:	755a      	strb	r2, [r3, #21]
 801027a:	2302      	movs	r3, #2
 801027c:	e15a      	b.n	8010534 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	3b01      	subs	r3, #1
 8010282:	0a5b      	lsrs	r3, r3, #9
 8010284:	68ba      	ldr	r2, [r7, #8]
 8010286:	8952      	ldrh	r2, [r2, #10]
 8010288:	3a01      	subs	r2, #1
 801028a:	4013      	ands	r3, r2
 801028c:	69ba      	ldr	r2, [r7, #24]
 801028e:	4413      	add	r3, r2
 8010290:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	699b      	ldr	r3, [r3, #24]
 8010296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801029a:	2b00      	cmp	r3, #0
 801029c:	f000 8148 	beq.w	8010530 <f_lseek+0x406>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6a1b      	ldr	r3, [r3, #32]
 80102a4:	69ba      	ldr	r2, [r7, #24]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	f000 8142 	beq.w	8010530 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	7d1b      	ldrb	r3, [r3, #20]
 80102b0:	b25b      	sxtb	r3, r3
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	da18      	bge.n	80102e8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	7858      	ldrb	r0, [r3, #1]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6a1a      	ldr	r2, [r3, #32]
 80102c4:	2301      	movs	r3, #1
 80102c6:	f7fd fa79 	bl	800d7bc <disk_write>
 80102ca:	4603      	mov	r3, r0
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d004      	beq.n	80102da <f_lseek+0x1b0>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2201      	movs	r2, #1
 80102d4:	755a      	strb	r2, [r3, #21]
 80102d6:	2301      	movs	r3, #1
 80102d8:	e12c      	b.n	8010534 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	7d1b      	ldrb	r3, [r3, #20]
 80102de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102e2:	b2da      	uxtb	r2, r3
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	7858      	ldrb	r0, [r3, #1]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80102f2:	2301      	movs	r3, #1
 80102f4:	69ba      	ldr	r2, [r7, #24]
 80102f6:	f7fd fa41 	bl	800d77c <disk_read>
 80102fa:	4603      	mov	r3, r0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d004      	beq.n	801030a <f_lseek+0x1e0>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2201      	movs	r2, #1
 8010304:	755a      	strb	r2, [r3, #21]
 8010306:	2301      	movs	r3, #1
 8010308:	e114      	b.n	8010534 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	69ba      	ldr	r2, [r7, #24]
 801030e:	621a      	str	r2, [r3, #32]
 8010310:	e10e      	b.n	8010530 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	68db      	ldr	r3, [r3, #12]
 8010316:	683a      	ldr	r2, [r7, #0]
 8010318:	429a      	cmp	r2, r3
 801031a:	d908      	bls.n	801032e <f_lseek+0x204>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	7d1b      	ldrb	r3, [r3, #20]
 8010320:	f003 0302 	and.w	r3, r3, #2
 8010324:	2b00      	cmp	r3, #0
 8010326:	d102      	bne.n	801032e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	68db      	ldr	r3, [r3, #12]
 801032c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	699b      	ldr	r3, [r3, #24]
 8010332:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010334:	2300      	movs	r3, #0
 8010336:	637b      	str	r3, [r7, #52]	@ 0x34
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801033c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	f000 80a7 	beq.w	8010494 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	895b      	ldrh	r3, [r3, #10]
 801034a:	025b      	lsls	r3, r3, #9
 801034c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801034e:	6a3b      	ldr	r3, [r7, #32]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d01b      	beq.n	801038c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	1e5a      	subs	r2, r3, #1
 8010358:	69fb      	ldr	r3, [r7, #28]
 801035a:	fbb2 f2f3 	udiv	r2, r2, r3
 801035e:	6a3b      	ldr	r3, [r7, #32]
 8010360:	1e59      	subs	r1, r3, #1
 8010362:	69fb      	ldr	r3, [r7, #28]
 8010364:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010368:	429a      	cmp	r2, r3
 801036a:	d30f      	bcc.n	801038c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801036c:	6a3b      	ldr	r3, [r7, #32]
 801036e:	1e5a      	subs	r2, r3, #1
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	425b      	negs	r3, r3
 8010374:	401a      	ands	r2, r3
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	699b      	ldr	r3, [r3, #24]
 801037e:	683a      	ldr	r2, [r7, #0]
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	69db      	ldr	r3, [r3, #28]
 8010388:	63bb      	str	r3, [r7, #56]	@ 0x38
 801038a:	e022      	b.n	80103d2 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	689b      	ldr	r3, [r3, #8]
 8010390:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010394:	2b00      	cmp	r3, #0
 8010396:	d119      	bne.n	80103cc <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2100      	movs	r1, #0
 801039c:	4618      	mov	r0, r3
 801039e:	f7fd ffb4 	bl	800e30a <create_chain>
 80103a2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80103a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	d104      	bne.n	80103b4 <f_lseek+0x28a>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2202      	movs	r2, #2
 80103ae:	755a      	strb	r2, [r3, #21]
 80103b0:	2302      	movs	r3, #2
 80103b2:	e0bf      	b.n	8010534 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80103b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ba:	d104      	bne.n	80103c6 <f_lseek+0x29c>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2201      	movs	r2, #1
 80103c0:	755a      	strb	r2, [r3, #21]
 80103c2:	2301      	movs	r3, #1
 80103c4:	e0b6      	b.n	8010534 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80103ca:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80103d0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80103d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d05d      	beq.n	8010494 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80103d8:	e03a      	b.n	8010450 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80103da:	683a      	ldr	r2, [r7, #0]
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	1ad3      	subs	r3, r2, r3
 80103e0:	603b      	str	r3, [r7, #0]
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	699a      	ldr	r2, [r3, #24]
 80103e6:	69fb      	ldr	r3, [r7, #28]
 80103e8:	441a      	add	r2, r3
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	7d1b      	ldrb	r3, [r3, #20]
 80103f2:	f003 0302 	and.w	r3, r3, #2
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d00b      	beq.n	8010412 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80103fe:	4618      	mov	r0, r3
 8010400:	f7fd ff83 	bl	800e30a <create_chain>
 8010404:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010408:	2b00      	cmp	r3, #0
 801040a:	d108      	bne.n	801041e <f_lseek+0x2f4>
							ofs = 0; break;
 801040c:	2300      	movs	r3, #0
 801040e:	603b      	str	r3, [r7, #0]
 8010410:	e022      	b.n	8010458 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010416:	4618      	mov	r0, r3
 8010418:	f7fd fd81 	bl	800df1e <get_fat>
 801041c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801041e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010424:	d104      	bne.n	8010430 <f_lseek+0x306>
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2201      	movs	r2, #1
 801042a:	755a      	strb	r2, [r3, #21]
 801042c:	2301      	movs	r3, #1
 801042e:	e081      	b.n	8010534 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010432:	2b01      	cmp	r3, #1
 8010434:	d904      	bls.n	8010440 <f_lseek+0x316>
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	699b      	ldr	r3, [r3, #24]
 801043a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801043c:	429a      	cmp	r2, r3
 801043e:	d304      	bcc.n	801044a <f_lseek+0x320>
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2202      	movs	r2, #2
 8010444:	755a      	strb	r2, [r3, #21]
 8010446:	2302      	movs	r3, #2
 8010448:	e074      	b.n	8010534 <f_lseek+0x40a>
					fp->clust = clst;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801044e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010450:	683a      	ldr	r2, [r7, #0]
 8010452:	69fb      	ldr	r3, [r7, #28]
 8010454:	429a      	cmp	r2, r3
 8010456:	d8c0      	bhi.n	80103da <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	699a      	ldr	r2, [r3, #24]
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	441a      	add	r2, r3
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801046a:	2b00      	cmp	r3, #0
 801046c:	d012      	beq.n	8010494 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010472:	4618      	mov	r0, r3
 8010474:	f7fd fd34 	bl	800dee0 <clust2sect>
 8010478:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801047a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801047c:	2b00      	cmp	r3, #0
 801047e:	d104      	bne.n	801048a <f_lseek+0x360>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2202      	movs	r2, #2
 8010484:	755a      	strb	r2, [r3, #21]
 8010486:	2302      	movs	r3, #2
 8010488:	e054      	b.n	8010534 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	0a5b      	lsrs	r3, r3, #9
 801048e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010490:	4413      	add	r3, r2
 8010492:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	699a      	ldr	r2, [r3, #24]
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	68db      	ldr	r3, [r3, #12]
 801049c:	429a      	cmp	r2, r3
 801049e:	d90a      	bls.n	80104b6 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	699a      	ldr	r2, [r3, #24]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	7d1b      	ldrb	r3, [r3, #20]
 80104ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104b0:	b2da      	uxtb	r2, r3
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	699b      	ldr	r3, [r3, #24]
 80104ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d036      	beq.n	8010530 <f_lseek+0x406>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6a1b      	ldr	r3, [r3, #32]
 80104c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d031      	beq.n	8010530 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	7d1b      	ldrb	r3, [r3, #20]
 80104d0:	b25b      	sxtb	r3, r3
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	da18      	bge.n	8010508 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	7858      	ldrb	r0, [r3, #1]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6a1a      	ldr	r2, [r3, #32]
 80104e4:	2301      	movs	r3, #1
 80104e6:	f7fd f969 	bl	800d7bc <disk_write>
 80104ea:	4603      	mov	r3, r0
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d004      	beq.n	80104fa <f_lseek+0x3d0>
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2201      	movs	r2, #1
 80104f4:	755a      	strb	r2, [r3, #21]
 80104f6:	2301      	movs	r3, #1
 80104f8:	e01c      	b.n	8010534 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	7d1b      	ldrb	r3, [r3, #20]
 80104fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010502:	b2da      	uxtb	r2, r3
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	7858      	ldrb	r0, [r3, #1]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010512:	2301      	movs	r3, #1
 8010514:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010516:	f7fd f931 	bl	800d77c <disk_read>
 801051a:	4603      	mov	r3, r0
 801051c:	2b00      	cmp	r3, #0
 801051e:	d004      	beq.n	801052a <f_lseek+0x400>
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2201      	movs	r2, #1
 8010524:	755a      	strb	r2, [r3, #21]
 8010526:	2301      	movs	r3, #1
 8010528:	e004      	b.n	8010534 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801052e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010530:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8010534:	4618      	mov	r0, r3
 8010536:	3740      	adds	r7, #64	@ 0x40
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801053c:	b480      	push	{r7}
 801053e:	b087      	sub	sp, #28
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	4613      	mov	r3, r2
 8010548:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801054a:	2301      	movs	r3, #1
 801054c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801054e:	2300      	movs	r3, #0
 8010550:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010552:	4b1f      	ldr	r3, [pc, #124]	@ (80105d0 <FATFS_LinkDriverEx+0x94>)
 8010554:	7a5b      	ldrb	r3, [r3, #9]
 8010556:	b2db      	uxtb	r3, r3
 8010558:	2b00      	cmp	r3, #0
 801055a:	d131      	bne.n	80105c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801055c:	4b1c      	ldr	r3, [pc, #112]	@ (80105d0 <FATFS_LinkDriverEx+0x94>)
 801055e:	7a5b      	ldrb	r3, [r3, #9]
 8010560:	b2db      	uxtb	r3, r3
 8010562:	461a      	mov	r2, r3
 8010564:	4b1a      	ldr	r3, [pc, #104]	@ (80105d0 <FATFS_LinkDriverEx+0x94>)
 8010566:	2100      	movs	r1, #0
 8010568:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801056a:	4b19      	ldr	r3, [pc, #100]	@ (80105d0 <FATFS_LinkDriverEx+0x94>)
 801056c:	7a5b      	ldrb	r3, [r3, #9]
 801056e:	b2db      	uxtb	r3, r3
 8010570:	4a17      	ldr	r2, [pc, #92]	@ (80105d0 <FATFS_LinkDriverEx+0x94>)
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	4413      	add	r3, r2
 8010576:	68fa      	ldr	r2, [r7, #12]
 8010578:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801057a:	4b15      	ldr	r3, [pc, #84]	@ (80105d0 <FATFS_LinkDriverEx+0x94>)
 801057c:	7a5b      	ldrb	r3, [r3, #9]
 801057e:	b2db      	uxtb	r3, r3
 8010580:	461a      	mov	r2, r3
 8010582:	4b13      	ldr	r3, [pc, #76]	@ (80105d0 <FATFS_LinkDriverEx+0x94>)
 8010584:	4413      	add	r3, r2
 8010586:	79fa      	ldrb	r2, [r7, #7]
 8010588:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801058a:	4b11      	ldr	r3, [pc, #68]	@ (80105d0 <FATFS_LinkDriverEx+0x94>)
 801058c:	7a5b      	ldrb	r3, [r3, #9]
 801058e:	b2db      	uxtb	r3, r3
 8010590:	1c5a      	adds	r2, r3, #1
 8010592:	b2d1      	uxtb	r1, r2
 8010594:	4a0e      	ldr	r2, [pc, #56]	@ (80105d0 <FATFS_LinkDriverEx+0x94>)
 8010596:	7251      	strb	r1, [r2, #9]
 8010598:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801059a:	7dbb      	ldrb	r3, [r7, #22]
 801059c:	3330      	adds	r3, #48	@ 0x30
 801059e:	b2da      	uxtb	r2, r3
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	3301      	adds	r3, #1
 80105a8:	223a      	movs	r2, #58	@ 0x3a
 80105aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	3302      	adds	r3, #2
 80105b0:	222f      	movs	r2, #47	@ 0x2f
 80105b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	3303      	adds	r3, #3
 80105b8:	2200      	movs	r2, #0
 80105ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80105bc:	2300      	movs	r3, #0
 80105be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80105c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	371c      	adds	r7, #28
 80105c6:	46bd      	mov	sp, r7
 80105c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105cc:	4770      	bx	lr
 80105ce:	bf00      	nop
 80105d0:	200189b0 	.word	0x200189b0

080105d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80105de:	2200      	movs	r2, #0
 80105e0:	6839      	ldr	r1, [r7, #0]
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f7ff ffaa 	bl	801053c <FATFS_LinkDriverEx>
 80105e8:	4603      	mov	r3, r0
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3708      	adds	r7, #8
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}

080105f2 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80105f2:	b580      	push	{r7, lr}
 80105f4:	b082      	sub	sp, #8
 80105f6:	af00      	add	r7, sp, #0
 80105f8:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80105fa:	6878      	ldr	r0, [r7, #4]
 80105fc:	f000 f8d6 	bl	80107ac <malloc>
 8010600:	4603      	mov	r3, r0
}
 8010602:	4618      	mov	r0, r3
 8010604:	3708      	adds	r7, #8
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}

0801060a <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 801060a:	b580      	push	{r7, lr}
 801060c:	b082      	sub	sp, #8
 801060e:	af00      	add	r7, sp, #0
 8010610:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 f8d2 	bl	80107bc <free>
}
 8010618:	bf00      	nop
 801061a:	3708      	adds	r7, #8
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010620:	b480      	push	{r7}
 8010622:	b085      	sub	sp, #20
 8010624:	af00      	add	r7, sp, #0
 8010626:	4603      	mov	r3, r0
 8010628:	6039      	str	r1, [r7, #0]
 801062a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801062c:	88fb      	ldrh	r3, [r7, #6]
 801062e:	2b7f      	cmp	r3, #127	@ 0x7f
 8010630:	d802      	bhi.n	8010638 <ff_convert+0x18>
		c = chr;
 8010632:	88fb      	ldrh	r3, [r7, #6]
 8010634:	81fb      	strh	r3, [r7, #14]
 8010636:	e025      	b.n	8010684 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d00b      	beq.n	8010656 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801063e:	88fb      	ldrh	r3, [r7, #6]
 8010640:	2bff      	cmp	r3, #255	@ 0xff
 8010642:	d805      	bhi.n	8010650 <ff_convert+0x30>
 8010644:	88fb      	ldrh	r3, [r7, #6]
 8010646:	3b80      	subs	r3, #128	@ 0x80
 8010648:	4a12      	ldr	r2, [pc, #72]	@ (8010694 <ff_convert+0x74>)
 801064a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801064e:	e000      	b.n	8010652 <ff_convert+0x32>
 8010650:	2300      	movs	r3, #0
 8010652:	81fb      	strh	r3, [r7, #14]
 8010654:	e016      	b.n	8010684 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010656:	2300      	movs	r3, #0
 8010658:	81fb      	strh	r3, [r7, #14]
 801065a:	e009      	b.n	8010670 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801065c:	89fb      	ldrh	r3, [r7, #14]
 801065e:	4a0d      	ldr	r2, [pc, #52]	@ (8010694 <ff_convert+0x74>)
 8010660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010664:	88fa      	ldrh	r2, [r7, #6]
 8010666:	429a      	cmp	r2, r3
 8010668:	d006      	beq.n	8010678 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801066a:	89fb      	ldrh	r3, [r7, #14]
 801066c:	3301      	adds	r3, #1
 801066e:	81fb      	strh	r3, [r7, #14]
 8010670:	89fb      	ldrh	r3, [r7, #14]
 8010672:	2b7f      	cmp	r3, #127	@ 0x7f
 8010674:	d9f2      	bls.n	801065c <ff_convert+0x3c>
 8010676:	e000      	b.n	801067a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010678:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801067a:	89fb      	ldrh	r3, [r7, #14]
 801067c:	3380      	adds	r3, #128	@ 0x80
 801067e:	b29b      	uxth	r3, r3
 8010680:	b2db      	uxtb	r3, r3
 8010682:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010684:	89fb      	ldrh	r3, [r7, #14]
}
 8010686:	4618      	mov	r0, r3
 8010688:	3714      	adds	r7, #20
 801068a:	46bd      	mov	sp, r7
 801068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010690:	4770      	bx	lr
 8010692:	bf00      	nop
 8010694:	08010f60 	.word	0x08010f60

08010698 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010698:	b480      	push	{r7}
 801069a:	b087      	sub	sp, #28
 801069c:	af00      	add	r7, sp, #0
 801069e:	4603      	mov	r3, r0
 80106a0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80106a2:	88fb      	ldrh	r3, [r7, #6]
 80106a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80106a8:	d201      	bcs.n	80106ae <ff_wtoupper+0x16>
 80106aa:	4b3e      	ldr	r3, [pc, #248]	@ (80107a4 <ff_wtoupper+0x10c>)
 80106ac:	e000      	b.n	80106b0 <ff_wtoupper+0x18>
 80106ae:	4b3e      	ldr	r3, [pc, #248]	@ (80107a8 <ff_wtoupper+0x110>)
 80106b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	1c9a      	adds	r2, r3, #2
 80106b6:	617a      	str	r2, [r7, #20]
 80106b8:	881b      	ldrh	r3, [r3, #0]
 80106ba:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80106bc:	8a7b      	ldrh	r3, [r7, #18]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d068      	beq.n	8010794 <ff_wtoupper+0xfc>
 80106c2:	88fa      	ldrh	r2, [r7, #6]
 80106c4:	8a7b      	ldrh	r3, [r7, #18]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d364      	bcc.n	8010794 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	1c9a      	adds	r2, r3, #2
 80106ce:	617a      	str	r2, [r7, #20]
 80106d0:	881b      	ldrh	r3, [r3, #0]
 80106d2:	823b      	strh	r3, [r7, #16]
 80106d4:	8a3b      	ldrh	r3, [r7, #16]
 80106d6:	0a1b      	lsrs	r3, r3, #8
 80106d8:	81fb      	strh	r3, [r7, #14]
 80106da:	8a3b      	ldrh	r3, [r7, #16]
 80106dc:	b2db      	uxtb	r3, r3
 80106de:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80106e0:	88fa      	ldrh	r2, [r7, #6]
 80106e2:	8a79      	ldrh	r1, [r7, #18]
 80106e4:	8a3b      	ldrh	r3, [r7, #16]
 80106e6:	440b      	add	r3, r1
 80106e8:	429a      	cmp	r2, r3
 80106ea:	da49      	bge.n	8010780 <ff_wtoupper+0xe8>
			switch (cmd) {
 80106ec:	89fb      	ldrh	r3, [r7, #14]
 80106ee:	2b08      	cmp	r3, #8
 80106f0:	d84f      	bhi.n	8010792 <ff_wtoupper+0xfa>
 80106f2:	a201      	add	r2, pc, #4	@ (adr r2, 80106f8 <ff_wtoupper+0x60>)
 80106f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f8:	0801071d 	.word	0x0801071d
 80106fc:	0801072f 	.word	0x0801072f
 8010700:	08010745 	.word	0x08010745
 8010704:	0801074d 	.word	0x0801074d
 8010708:	08010755 	.word	0x08010755
 801070c:	0801075d 	.word	0x0801075d
 8010710:	08010765 	.word	0x08010765
 8010714:	0801076d 	.word	0x0801076d
 8010718:	08010775 	.word	0x08010775
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801071c:	88fa      	ldrh	r2, [r7, #6]
 801071e:	8a7b      	ldrh	r3, [r7, #18]
 8010720:	1ad3      	subs	r3, r2, r3
 8010722:	005b      	lsls	r3, r3, #1
 8010724:	697a      	ldr	r2, [r7, #20]
 8010726:	4413      	add	r3, r2
 8010728:	881b      	ldrh	r3, [r3, #0]
 801072a:	80fb      	strh	r3, [r7, #6]
 801072c:	e027      	b.n	801077e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801072e:	88fa      	ldrh	r2, [r7, #6]
 8010730:	8a7b      	ldrh	r3, [r7, #18]
 8010732:	1ad3      	subs	r3, r2, r3
 8010734:	b29b      	uxth	r3, r3
 8010736:	f003 0301 	and.w	r3, r3, #1
 801073a:	b29b      	uxth	r3, r3
 801073c:	88fa      	ldrh	r2, [r7, #6]
 801073e:	1ad3      	subs	r3, r2, r3
 8010740:	80fb      	strh	r3, [r7, #6]
 8010742:	e01c      	b.n	801077e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010744:	88fb      	ldrh	r3, [r7, #6]
 8010746:	3b10      	subs	r3, #16
 8010748:	80fb      	strh	r3, [r7, #6]
 801074a:	e018      	b.n	801077e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801074c:	88fb      	ldrh	r3, [r7, #6]
 801074e:	3b20      	subs	r3, #32
 8010750:	80fb      	strh	r3, [r7, #6]
 8010752:	e014      	b.n	801077e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010754:	88fb      	ldrh	r3, [r7, #6]
 8010756:	3b30      	subs	r3, #48	@ 0x30
 8010758:	80fb      	strh	r3, [r7, #6]
 801075a:	e010      	b.n	801077e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801075c:	88fb      	ldrh	r3, [r7, #6]
 801075e:	3b1a      	subs	r3, #26
 8010760:	80fb      	strh	r3, [r7, #6]
 8010762:	e00c      	b.n	801077e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010764:	88fb      	ldrh	r3, [r7, #6]
 8010766:	3308      	adds	r3, #8
 8010768:	80fb      	strh	r3, [r7, #6]
 801076a:	e008      	b.n	801077e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801076c:	88fb      	ldrh	r3, [r7, #6]
 801076e:	3b50      	subs	r3, #80	@ 0x50
 8010770:	80fb      	strh	r3, [r7, #6]
 8010772:	e004      	b.n	801077e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010774:	88fb      	ldrh	r3, [r7, #6]
 8010776:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801077a:	80fb      	strh	r3, [r7, #6]
 801077c:	bf00      	nop
			}
			break;
 801077e:	e008      	b.n	8010792 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010780:	89fb      	ldrh	r3, [r7, #14]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d195      	bne.n	80106b2 <ff_wtoupper+0x1a>
 8010786:	8a3b      	ldrh	r3, [r7, #16]
 8010788:	005b      	lsls	r3, r3, #1
 801078a:	697a      	ldr	r2, [r7, #20]
 801078c:	4413      	add	r3, r2
 801078e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010790:	e78f      	b.n	80106b2 <ff_wtoupper+0x1a>
			break;
 8010792:	bf00      	nop
	}

	return chr;
 8010794:	88fb      	ldrh	r3, [r7, #6]
}
 8010796:	4618      	mov	r0, r3
 8010798:	371c      	adds	r7, #28
 801079a:	46bd      	mov	sp, r7
 801079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a0:	4770      	bx	lr
 80107a2:	bf00      	nop
 80107a4:	08011060 	.word	0x08011060
 80107a8:	08011254 	.word	0x08011254

080107ac <malloc>:
 80107ac:	4b02      	ldr	r3, [pc, #8]	@ (80107b8 <malloc+0xc>)
 80107ae:	4601      	mov	r1, r0
 80107b0:	6818      	ldr	r0, [r3, #0]
 80107b2:	f000 b82d 	b.w	8010810 <_malloc_r>
 80107b6:	bf00      	nop
 80107b8:	20000010 	.word	0x20000010

080107bc <free>:
 80107bc:	4b02      	ldr	r3, [pc, #8]	@ (80107c8 <free+0xc>)
 80107be:	4601      	mov	r1, r0
 80107c0:	6818      	ldr	r0, [r3, #0]
 80107c2:	f000 b8f5 	b.w	80109b0 <_free_r>
 80107c6:	bf00      	nop
 80107c8:	20000010 	.word	0x20000010

080107cc <sbrk_aligned>:
 80107cc:	b570      	push	{r4, r5, r6, lr}
 80107ce:	4e0f      	ldr	r6, [pc, #60]	@ (801080c <sbrk_aligned+0x40>)
 80107d0:	460c      	mov	r4, r1
 80107d2:	6831      	ldr	r1, [r6, #0]
 80107d4:	4605      	mov	r5, r0
 80107d6:	b911      	cbnz	r1, 80107de <sbrk_aligned+0x12>
 80107d8:	f000 f8ae 	bl	8010938 <_sbrk_r>
 80107dc:	6030      	str	r0, [r6, #0]
 80107de:	4621      	mov	r1, r4
 80107e0:	4628      	mov	r0, r5
 80107e2:	f000 f8a9 	bl	8010938 <_sbrk_r>
 80107e6:	1c43      	adds	r3, r0, #1
 80107e8:	d103      	bne.n	80107f2 <sbrk_aligned+0x26>
 80107ea:	f04f 34ff 	mov.w	r4, #4294967295
 80107ee:	4620      	mov	r0, r4
 80107f0:	bd70      	pop	{r4, r5, r6, pc}
 80107f2:	1cc4      	adds	r4, r0, #3
 80107f4:	f024 0403 	bic.w	r4, r4, #3
 80107f8:	42a0      	cmp	r0, r4
 80107fa:	d0f8      	beq.n	80107ee <sbrk_aligned+0x22>
 80107fc:	1a21      	subs	r1, r4, r0
 80107fe:	4628      	mov	r0, r5
 8010800:	f000 f89a 	bl	8010938 <_sbrk_r>
 8010804:	3001      	adds	r0, #1
 8010806:	d1f2      	bne.n	80107ee <sbrk_aligned+0x22>
 8010808:	e7ef      	b.n	80107ea <sbrk_aligned+0x1e>
 801080a:	bf00      	nop
 801080c:	200189bc 	.word	0x200189bc

08010810 <_malloc_r>:
 8010810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010814:	1ccd      	adds	r5, r1, #3
 8010816:	f025 0503 	bic.w	r5, r5, #3
 801081a:	3508      	adds	r5, #8
 801081c:	2d0c      	cmp	r5, #12
 801081e:	bf38      	it	cc
 8010820:	250c      	movcc	r5, #12
 8010822:	2d00      	cmp	r5, #0
 8010824:	4606      	mov	r6, r0
 8010826:	db01      	blt.n	801082c <_malloc_r+0x1c>
 8010828:	42a9      	cmp	r1, r5
 801082a:	d904      	bls.n	8010836 <_malloc_r+0x26>
 801082c:	230c      	movs	r3, #12
 801082e:	6033      	str	r3, [r6, #0]
 8010830:	2000      	movs	r0, #0
 8010832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010836:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801090c <_malloc_r+0xfc>
 801083a:	f000 f869 	bl	8010910 <__malloc_lock>
 801083e:	f8d8 3000 	ldr.w	r3, [r8]
 8010842:	461c      	mov	r4, r3
 8010844:	bb44      	cbnz	r4, 8010898 <_malloc_r+0x88>
 8010846:	4629      	mov	r1, r5
 8010848:	4630      	mov	r0, r6
 801084a:	f7ff ffbf 	bl	80107cc <sbrk_aligned>
 801084e:	1c43      	adds	r3, r0, #1
 8010850:	4604      	mov	r4, r0
 8010852:	d158      	bne.n	8010906 <_malloc_r+0xf6>
 8010854:	f8d8 4000 	ldr.w	r4, [r8]
 8010858:	4627      	mov	r7, r4
 801085a:	2f00      	cmp	r7, #0
 801085c:	d143      	bne.n	80108e6 <_malloc_r+0xd6>
 801085e:	2c00      	cmp	r4, #0
 8010860:	d04b      	beq.n	80108fa <_malloc_r+0xea>
 8010862:	6823      	ldr	r3, [r4, #0]
 8010864:	4639      	mov	r1, r7
 8010866:	4630      	mov	r0, r6
 8010868:	eb04 0903 	add.w	r9, r4, r3
 801086c:	f000 f864 	bl	8010938 <_sbrk_r>
 8010870:	4581      	cmp	r9, r0
 8010872:	d142      	bne.n	80108fa <_malloc_r+0xea>
 8010874:	6821      	ldr	r1, [r4, #0]
 8010876:	1a6d      	subs	r5, r5, r1
 8010878:	4629      	mov	r1, r5
 801087a:	4630      	mov	r0, r6
 801087c:	f7ff ffa6 	bl	80107cc <sbrk_aligned>
 8010880:	3001      	adds	r0, #1
 8010882:	d03a      	beq.n	80108fa <_malloc_r+0xea>
 8010884:	6823      	ldr	r3, [r4, #0]
 8010886:	442b      	add	r3, r5
 8010888:	6023      	str	r3, [r4, #0]
 801088a:	f8d8 3000 	ldr.w	r3, [r8]
 801088e:	685a      	ldr	r2, [r3, #4]
 8010890:	bb62      	cbnz	r2, 80108ec <_malloc_r+0xdc>
 8010892:	f8c8 7000 	str.w	r7, [r8]
 8010896:	e00f      	b.n	80108b8 <_malloc_r+0xa8>
 8010898:	6822      	ldr	r2, [r4, #0]
 801089a:	1b52      	subs	r2, r2, r5
 801089c:	d420      	bmi.n	80108e0 <_malloc_r+0xd0>
 801089e:	2a0b      	cmp	r2, #11
 80108a0:	d917      	bls.n	80108d2 <_malloc_r+0xc2>
 80108a2:	1961      	adds	r1, r4, r5
 80108a4:	42a3      	cmp	r3, r4
 80108a6:	6025      	str	r5, [r4, #0]
 80108a8:	bf18      	it	ne
 80108aa:	6059      	strne	r1, [r3, #4]
 80108ac:	6863      	ldr	r3, [r4, #4]
 80108ae:	bf08      	it	eq
 80108b0:	f8c8 1000 	streq.w	r1, [r8]
 80108b4:	5162      	str	r2, [r4, r5]
 80108b6:	604b      	str	r3, [r1, #4]
 80108b8:	4630      	mov	r0, r6
 80108ba:	f000 f82f 	bl	801091c <__malloc_unlock>
 80108be:	f104 000b 	add.w	r0, r4, #11
 80108c2:	1d23      	adds	r3, r4, #4
 80108c4:	f020 0007 	bic.w	r0, r0, #7
 80108c8:	1ac2      	subs	r2, r0, r3
 80108ca:	bf1c      	itt	ne
 80108cc:	1a1b      	subne	r3, r3, r0
 80108ce:	50a3      	strne	r3, [r4, r2]
 80108d0:	e7af      	b.n	8010832 <_malloc_r+0x22>
 80108d2:	6862      	ldr	r2, [r4, #4]
 80108d4:	42a3      	cmp	r3, r4
 80108d6:	bf0c      	ite	eq
 80108d8:	f8c8 2000 	streq.w	r2, [r8]
 80108dc:	605a      	strne	r2, [r3, #4]
 80108de:	e7eb      	b.n	80108b8 <_malloc_r+0xa8>
 80108e0:	4623      	mov	r3, r4
 80108e2:	6864      	ldr	r4, [r4, #4]
 80108e4:	e7ae      	b.n	8010844 <_malloc_r+0x34>
 80108e6:	463c      	mov	r4, r7
 80108e8:	687f      	ldr	r7, [r7, #4]
 80108ea:	e7b6      	b.n	801085a <_malloc_r+0x4a>
 80108ec:	461a      	mov	r2, r3
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	42a3      	cmp	r3, r4
 80108f2:	d1fb      	bne.n	80108ec <_malloc_r+0xdc>
 80108f4:	2300      	movs	r3, #0
 80108f6:	6053      	str	r3, [r2, #4]
 80108f8:	e7de      	b.n	80108b8 <_malloc_r+0xa8>
 80108fa:	230c      	movs	r3, #12
 80108fc:	6033      	str	r3, [r6, #0]
 80108fe:	4630      	mov	r0, r6
 8010900:	f000 f80c 	bl	801091c <__malloc_unlock>
 8010904:	e794      	b.n	8010830 <_malloc_r+0x20>
 8010906:	6005      	str	r5, [r0, #0]
 8010908:	e7d6      	b.n	80108b8 <_malloc_r+0xa8>
 801090a:	bf00      	nop
 801090c:	200189c0 	.word	0x200189c0

08010910 <__malloc_lock>:
 8010910:	4801      	ldr	r0, [pc, #4]	@ (8010918 <__malloc_lock+0x8>)
 8010912:	f000 b84b 	b.w	80109ac <__retarget_lock_acquire_recursive>
 8010916:	bf00      	nop
 8010918:	20018b00 	.word	0x20018b00

0801091c <__malloc_unlock>:
 801091c:	4801      	ldr	r0, [pc, #4]	@ (8010924 <__malloc_unlock+0x8>)
 801091e:	f000 b846 	b.w	80109ae <__retarget_lock_release_recursive>
 8010922:	bf00      	nop
 8010924:	20018b00 	.word	0x20018b00

08010928 <memset>:
 8010928:	4402      	add	r2, r0
 801092a:	4603      	mov	r3, r0
 801092c:	4293      	cmp	r3, r2
 801092e:	d100      	bne.n	8010932 <memset+0xa>
 8010930:	4770      	bx	lr
 8010932:	f803 1b01 	strb.w	r1, [r3], #1
 8010936:	e7f9      	b.n	801092c <memset+0x4>

08010938 <_sbrk_r>:
 8010938:	b538      	push	{r3, r4, r5, lr}
 801093a:	4d06      	ldr	r5, [pc, #24]	@ (8010954 <_sbrk_r+0x1c>)
 801093c:	2300      	movs	r3, #0
 801093e:	4604      	mov	r4, r0
 8010940:	4608      	mov	r0, r1
 8010942:	602b      	str	r3, [r5, #0]
 8010944:	f7fc fe78 	bl	800d638 <_sbrk>
 8010948:	1c43      	adds	r3, r0, #1
 801094a:	d102      	bne.n	8010952 <_sbrk_r+0x1a>
 801094c:	682b      	ldr	r3, [r5, #0]
 801094e:	b103      	cbz	r3, 8010952 <_sbrk_r+0x1a>
 8010950:	6023      	str	r3, [r4, #0]
 8010952:	bd38      	pop	{r3, r4, r5, pc}
 8010954:	20018afc 	.word	0x20018afc

08010958 <__errno>:
 8010958:	4b01      	ldr	r3, [pc, #4]	@ (8010960 <__errno+0x8>)
 801095a:	6818      	ldr	r0, [r3, #0]
 801095c:	4770      	bx	lr
 801095e:	bf00      	nop
 8010960:	20000010 	.word	0x20000010

08010964 <__libc_init_array>:
 8010964:	b570      	push	{r4, r5, r6, lr}
 8010966:	4d0d      	ldr	r5, [pc, #52]	@ (801099c <__libc_init_array+0x38>)
 8010968:	4c0d      	ldr	r4, [pc, #52]	@ (80109a0 <__libc_init_array+0x3c>)
 801096a:	1b64      	subs	r4, r4, r5
 801096c:	10a4      	asrs	r4, r4, #2
 801096e:	2600      	movs	r6, #0
 8010970:	42a6      	cmp	r6, r4
 8010972:	d109      	bne.n	8010988 <__libc_init_array+0x24>
 8010974:	4d0b      	ldr	r5, [pc, #44]	@ (80109a4 <__libc_init_array+0x40>)
 8010976:	4c0c      	ldr	r4, [pc, #48]	@ (80109a8 <__libc_init_array+0x44>)
 8010978:	f000 f864 	bl	8010a44 <_init>
 801097c:	1b64      	subs	r4, r4, r5
 801097e:	10a4      	asrs	r4, r4, #2
 8010980:	2600      	movs	r6, #0
 8010982:	42a6      	cmp	r6, r4
 8010984:	d105      	bne.n	8010992 <__libc_init_array+0x2e>
 8010986:	bd70      	pop	{r4, r5, r6, pc}
 8010988:	f855 3b04 	ldr.w	r3, [r5], #4
 801098c:	4798      	blx	r3
 801098e:	3601      	adds	r6, #1
 8010990:	e7ee      	b.n	8010970 <__libc_init_array+0xc>
 8010992:	f855 3b04 	ldr.w	r3, [r5], #4
 8010996:	4798      	blx	r3
 8010998:	3601      	adds	r6, #1
 801099a:	e7f2      	b.n	8010982 <__libc_init_array+0x1e>
 801099c:	08011310 	.word	0x08011310
 80109a0:	08011310 	.word	0x08011310
 80109a4:	08011310 	.word	0x08011310
 80109a8:	08011314 	.word	0x08011314

080109ac <__retarget_lock_acquire_recursive>:
 80109ac:	4770      	bx	lr

080109ae <__retarget_lock_release_recursive>:
 80109ae:	4770      	bx	lr

080109b0 <_free_r>:
 80109b0:	b538      	push	{r3, r4, r5, lr}
 80109b2:	4605      	mov	r5, r0
 80109b4:	2900      	cmp	r1, #0
 80109b6:	d041      	beq.n	8010a3c <_free_r+0x8c>
 80109b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109bc:	1f0c      	subs	r4, r1, #4
 80109be:	2b00      	cmp	r3, #0
 80109c0:	bfb8      	it	lt
 80109c2:	18e4      	addlt	r4, r4, r3
 80109c4:	f7ff ffa4 	bl	8010910 <__malloc_lock>
 80109c8:	4a1d      	ldr	r2, [pc, #116]	@ (8010a40 <_free_r+0x90>)
 80109ca:	6813      	ldr	r3, [r2, #0]
 80109cc:	b933      	cbnz	r3, 80109dc <_free_r+0x2c>
 80109ce:	6063      	str	r3, [r4, #4]
 80109d0:	6014      	str	r4, [r2, #0]
 80109d2:	4628      	mov	r0, r5
 80109d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109d8:	f7ff bfa0 	b.w	801091c <__malloc_unlock>
 80109dc:	42a3      	cmp	r3, r4
 80109de:	d908      	bls.n	80109f2 <_free_r+0x42>
 80109e0:	6820      	ldr	r0, [r4, #0]
 80109e2:	1821      	adds	r1, r4, r0
 80109e4:	428b      	cmp	r3, r1
 80109e6:	bf01      	itttt	eq
 80109e8:	6819      	ldreq	r1, [r3, #0]
 80109ea:	685b      	ldreq	r3, [r3, #4]
 80109ec:	1809      	addeq	r1, r1, r0
 80109ee:	6021      	streq	r1, [r4, #0]
 80109f0:	e7ed      	b.n	80109ce <_free_r+0x1e>
 80109f2:	461a      	mov	r2, r3
 80109f4:	685b      	ldr	r3, [r3, #4]
 80109f6:	b10b      	cbz	r3, 80109fc <_free_r+0x4c>
 80109f8:	42a3      	cmp	r3, r4
 80109fa:	d9fa      	bls.n	80109f2 <_free_r+0x42>
 80109fc:	6811      	ldr	r1, [r2, #0]
 80109fe:	1850      	adds	r0, r2, r1
 8010a00:	42a0      	cmp	r0, r4
 8010a02:	d10b      	bne.n	8010a1c <_free_r+0x6c>
 8010a04:	6820      	ldr	r0, [r4, #0]
 8010a06:	4401      	add	r1, r0
 8010a08:	1850      	adds	r0, r2, r1
 8010a0a:	4283      	cmp	r3, r0
 8010a0c:	6011      	str	r1, [r2, #0]
 8010a0e:	d1e0      	bne.n	80109d2 <_free_r+0x22>
 8010a10:	6818      	ldr	r0, [r3, #0]
 8010a12:	685b      	ldr	r3, [r3, #4]
 8010a14:	6053      	str	r3, [r2, #4]
 8010a16:	4408      	add	r0, r1
 8010a18:	6010      	str	r0, [r2, #0]
 8010a1a:	e7da      	b.n	80109d2 <_free_r+0x22>
 8010a1c:	d902      	bls.n	8010a24 <_free_r+0x74>
 8010a1e:	230c      	movs	r3, #12
 8010a20:	602b      	str	r3, [r5, #0]
 8010a22:	e7d6      	b.n	80109d2 <_free_r+0x22>
 8010a24:	6820      	ldr	r0, [r4, #0]
 8010a26:	1821      	adds	r1, r4, r0
 8010a28:	428b      	cmp	r3, r1
 8010a2a:	bf04      	itt	eq
 8010a2c:	6819      	ldreq	r1, [r3, #0]
 8010a2e:	685b      	ldreq	r3, [r3, #4]
 8010a30:	6063      	str	r3, [r4, #4]
 8010a32:	bf04      	itt	eq
 8010a34:	1809      	addeq	r1, r1, r0
 8010a36:	6021      	streq	r1, [r4, #0]
 8010a38:	6054      	str	r4, [r2, #4]
 8010a3a:	e7ca      	b.n	80109d2 <_free_r+0x22>
 8010a3c:	bd38      	pop	{r3, r4, r5, pc}
 8010a3e:	bf00      	nop
 8010a40:	200189c0 	.word	0x200189c0

08010a44 <_init>:
 8010a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a46:	bf00      	nop
 8010a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a4a:	bc08      	pop	{r3}
 8010a4c:	469e      	mov	lr, r3
 8010a4e:	4770      	bx	lr

08010a50 <_fini>:
 8010a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a52:	bf00      	nop
 8010a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a56:	bc08      	pop	{r3}
 8010a58:	469e      	mov	lr, r3
 8010a5a:	4770      	bx	lr
