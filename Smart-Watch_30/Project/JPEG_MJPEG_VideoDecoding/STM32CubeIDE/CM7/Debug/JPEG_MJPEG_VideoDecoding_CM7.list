
JPEG_MJPEG_VideoDecoding_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010734  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  080109cc  080109cc  000119cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011280  08011280  00012280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08011284  08011284  00012284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000006c  20000000  08011288  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00018a50  2000006c  080112f4  0001306c  2**2
                  ALLOC
  7 ._user_heap_stack 00002404  20018abc  080112f4  00013abc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0001306c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00025b4b  00000000  00000000  0001309a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004a6f  00000000  00000000  00038be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001db0  00000000  00000000  0003d658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000016d7  00000000  00000000  0003f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00047ef1  00000000  00000000  00040adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002c2dd  00000000  00000000  000889d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001ccefb  00000000  00000000  000b4cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00281ba8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008008  00000000  00000000  00281bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000a3  00000000  00000000  00289bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2000006c 	.word	0x2000006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080109b4 	.word	0x080109b4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000070 	.word	0x20000070
 80002d4:	080109b4 	.word	0x080109b4

080002d8 <IS42S32800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800J_ERROR;
 80002e2:	f04f 33ff 	mov.w	r3, #4294967295
 80002e6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4619      	mov	r1, r3
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f000 f832 	bl	8000358 <IS42S32800J_ClockEnable>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d128      	bne.n	800034c <IS42S32800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800J_Delay(1);
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 f8e2 	bl	80004c4 <IS42S32800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4619      	mov	r1, r3
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f000 f84a 	bl	80003a0 <IS42S32800J_Precharge>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d11c      	bne.n	800034c <IS42S32800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	6819      	ldr	r1, [r3, #0]
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	461a      	mov	r2, r3
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f000 f897 	bl	8000450 <IS42S32800J_RefreshMode>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d111      	bne.n	800034c <IS42S32800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8000328:	6839      	ldr	r1, [r7, #0]
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f000 f85c 	bl	80003e8 <IS42S32800J_ModeRegConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d10a      	bne.n	800034c <IS42S32800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	4619      	mov	r1, r3
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f000 f8ad 	bl	800049c <IS42S32800J_RefreshRate>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d101      	bne.n	800034c <IS42S32800J_Init+0x74>
          {
            ret = IS42S32800J_OK;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800034c:	68fb      	ldr	r3, [r7, #12]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8000362:	4b0e      	ldr	r3, [pc, #56]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 8000364:	2201      	movs	r2, #1
 8000366:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000368:	4a0c      	ldr	r2, [pc, #48]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800036e:	4b0b      	ldr	r3, [pc, #44]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 8000370:	2201      	movs	r2, #1
 8000372:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000374:	4b09      	ldr	r3, [pc, #36]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800037a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800037e:	4907      	ldr	r1, [pc, #28]	@ (800039c <IS42S32800J_ClockEnable+0x44>)
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f009 f92f 	bl	80095e4 <HAL_SDRAM_SendCommand>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d002      	beq.n	8000392 <IS42S32800J_ClockEnable+0x3a>
  {
    return IS42S32800J_ERROR;
 800038c:	f04f 33ff 	mov.w	r3, #4294967295
 8000390:	e000      	b.n	8000394 <IS42S32800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 8000392:	2300      	movs	r3, #0
  }
}
 8000394:	4618      	mov	r0, r3
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000088 	.word	0x20000088

080003a0 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003ac:	2202      	movs	r2, #2
 80003ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80003b0:	4a0c      	ldr	r2, [pc, #48]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80003bc:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80003c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003c6:	4907      	ldr	r1, [pc, #28]	@ (80003e4 <IS42S32800J_Precharge+0x44>)
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f009 f90b 	bl	80095e4 <HAL_SDRAM_SendCommand>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d002      	beq.n	80003da <IS42S32800J_Precharge+0x3a>
  {
    return IS42S32800J_ERROR;
 80003d4:	f04f 33ff 	mov.w	r3, #4294967295
 80003d8:	e000      	b.n	80003dc <IS42S32800J_Precharge+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 80003da:	2300      	movs	r3, #0
  }
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000088 	.word	0x20000088

080003e8 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80003fa:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8000400:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8000406:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800040c:	4313      	orrs	r3, r2
 800040e:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8000410:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000412:	2204      	movs	r2, #4
 8000414:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a0c      	ldr	r2, [pc, #48]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 800041c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800041e:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000420:	2201      	movs	r2, #1
 8000422:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000424:	4a09      	ldr	r2, [pc, #36]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800042a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800042e:	4907      	ldr	r1, [pc, #28]	@ (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f009 f8d7 	bl	80095e4 <HAL_SDRAM_SendCommand>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d002      	beq.n	8000442 <IS42S32800J_ModeRegConfig+0x5a>
  {
    return IS42S32800J_ERROR;
 800043c:	f04f 33ff 	mov.w	r3, #4294967295
 8000440:	e000      	b.n	8000444 <IS42S32800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800J_OK;
 8000442:	2300      	movs	r3, #0
  }
}
 8000444:	4618      	mov	r0, r3
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000088 	.word	0x20000088

08000450 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800045c:	4a0e      	ldr	r2, [pc, #56]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000462:	4a0d      	ldr	r2, [pc, #52]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000468:	4b0b      	ldr	r3, [pc, #44]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 800046a:	2208      	movs	r2, #8
 800046c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800046e:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000474:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000478:	4907      	ldr	r1, [pc, #28]	@ (8000498 <IS42S32800J_RefreshMode+0x48>)
 800047a:	68f8      	ldr	r0, [r7, #12]
 800047c:	f009 f8b2 	bl	80095e4 <HAL_SDRAM_SendCommand>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <IS42S32800J_RefreshMode+0x3c>
  {
    return IS42S32800J_ERROR;
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	e000      	b.n	800048e <IS42S32800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800J_OK;
 800048c:	2300      	movs	r3, #0
  }
}
 800048e:	4618      	mov	r0, r3
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000088 	.word	0x20000088

0800049c <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80004a6:	6839      	ldr	r1, [r7, #0]
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f009 f8d0 	bl	800964e <HAL_SDRAM_ProgramRefreshRate>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d002      	beq.n	80004ba <IS42S32800J_RefreshRate+0x1e>
  {
    return IS42S32800J_ERROR;
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295
 80004b8:	e000      	b.n	80004bc <IS42S32800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800J_OK;
 80004ba:	2300      	movs	r3, #0
  }
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <IS42S32800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80004cc:	f000 fcc6 	bl	8000e5c <HAL_GetTick>
 80004d0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80004d2:	bf00      	nop
 80004d4:	f000 fcc2 	bl	8000e5c <HAL_GetTick>
 80004d8:	4602      	mov	r2, r0
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	1ad3      	subs	r3, r2, r3
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d8f7      	bhi.n	80004d4 <IS42S32800J_Delay+0x10>
  {
  }
  return IS42S32800J_OK;
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t BSP_SD_Init(uint32_t Instance)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	@ 0x28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;

  if(Instance >= SD_INSTANCES_NBR)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d003      	beq.n	800050a <BSP_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000502:	f06f 0301 	mvn.w	r3, #1
 8000506:	627b      	str	r3, [r7, #36]	@ 0x24
 8000508:	e063      	b.n	80005d2 <BSP_SD_Init+0xe2>
  }
  else
  {
    /* Configure Input mode for SD detection pin */
    SD_DETECT_GPIO_CLK_ENABLE();
 800050a:	4b34      	ldr	r3, [pc, #208]	@ (80005dc <BSP_SD_Init+0xec>)
 800050c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000510:	4a32      	ldr	r2, [pc, #200]	@ (80005dc <BSP_SD_Init+0xec>)
 8000512:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000516:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800051a:	4b30      	ldr	r3, [pc, #192]	@ (80005dc <BSP_SD_Init+0xec>)
 800051c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
    gpio_init_structure.Pin = SD_DETECT_PIN;
 8000528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800052c:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 800052e:	2301      	movs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000532:	2302      	movs	r3, #2
 8000534:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4619      	mov	r1, r3
 8000540:	4827      	ldr	r0, [pc, #156]	@ (80005e0 <BSP_SD_Init+0xf0>)
 8000542:	f001 f92b 	bl	800179c <HAL_GPIO_Init>

    if(BSP_SD_IsDetected(Instance) != SD_PRESENT)
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 f876 	bl	8000638 <BSP_SD_IsDetected>
 800054c:	4603      	mov	r3, r0
 800054e:	2b01      	cmp	r3, #1
 8000550:	d003      	beq.n	800055a <BSP_SD_Init+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8000552:	f06f 0306 	mvn.w	r3, #6
 8000556:	627b      	str	r3, [r7, #36]	@ 0x24
 8000558:	e03b      	b.n	80005d2 <BSP_SD_Init+0xe2>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SD initialization */
      SD_MspInit(&hsd_sdmmc[Instance]);
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	4613      	mov	r3, r2
 800055e:	015b      	lsls	r3, r3, #5
 8000560:	1a9b      	subs	r3, r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4a1f      	ldr	r2, [pc, #124]	@ (80005e4 <BSP_SD_Init+0xf4>)
 8000566:	4413      	add	r3, r2
 8000568:	4618      	mov	r0, r3
 800056a:	f000 f929 	bl	80007c0 <SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS   */

      if(ret == BSP_ERROR_NONE)
 800056e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000570:	2b00      	cmp	r3, #0
 8000572:	d12e      	bne.n	80005d2 <BSP_SD_Init+0xe2>
      {
        /* HAL SD initialization and Enable wide operation   */
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	4613      	mov	r3, r2
 8000578:	015b      	lsls	r3, r3, #5
 800057a:	1a9b      	subs	r3, r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4a19      	ldr	r2, [pc, #100]	@ (80005e4 <BSP_SD_Init+0xf4>)
 8000580:	4413      	add	r3, r2
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f830 	bl	80005e8 <MX_SDMMC1_SD_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d003      	beq.n	8000596 <BSP_SD_Init+0xa6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800058e:	f06f 0303 	mvn.w	r3, #3
 8000592:	627b      	str	r3, [r7, #36]	@ 0x24
 8000594:	e01d      	b.n	80005d2 <BSP_SD_Init+0xe2>
        }
#if (USE_SD_BUS_WIDE_4B > 0)
        else if(HAL_SD_ConfigWideBusOperation(&hsd_sdmmc[Instance], SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	4613      	mov	r3, r2
 800059a:	015b      	lsls	r3, r3, #5
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	4a10      	ldr	r2, [pc, #64]	@ (80005e4 <BSP_SD_Init+0xf4>)
 80005a2:	4413      	add	r3, r2
 80005a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005a8:	4618      	mov	r0, r3
 80005aa:	f008 f95f 	bl	800886c <HAL_SD_ConfigWideBusOperation>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d003      	beq.n	80005bc <BSP_SD_Init+0xcc>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80005b4:	f06f 0303 	mvn.w	r3, #3
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80005ba:	e00a      	b.n	80005d2 <BSP_SD_Init+0xe2>
        }
#endif
        else
        {
          /* Switch to High Speed mode if the card support this mode */
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4613      	mov	r3, r2
 80005c0:	015b      	lsls	r3, r3, #5
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4a07      	ldr	r2, [pc, #28]	@ (80005e4 <BSP_SD_Init+0xf4>)
 80005c8:	4413      	add	r3, r2
 80005ca:	2102      	movs	r1, #2
 80005cc:	4618      	mov	r0, r3
 80005ce:	f008 fa5f 	bl	8008a90 <HAL_SD_ConfigSpeedBusOperation>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }
    }
  }
  return ret;
 80005d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3728      	adds	r7, #40	@ 0x28
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	58024400 	.word	0x58024400
 80005e0:	58022000 	.word	0x58022000
 80005e4:	20000098 	.word	0x20000098

080005e8 <MX_SDMMC1_SD_Init>:
  * @brief  Initializes the SDMMC1 peripheral.
  * @param  hsd SD handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDMMC1_SD_Init(SD_HandleTypeDef *hsd)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  /* uSD device interface configuration */
  hsd->Instance                 = SDMMC1;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000634 <MX_SDMMC1_SD_Init+0x4c>)
 80005f8:	601a      	str	r2, [r3, #0]
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hsd->Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
#if (USE_SD_BUS_WIDE_4B > 0)
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_4B;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800060c:	60da      	str	r2, [r3, #12]
#else
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_1B;
#endif
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
#endif /*USE_SD_TRANSCEIVER*/
#if ( USE_SD_HIGH_PERFORMANCE > 0 )
  hsd->Init.ClockDiv            = SDMMC_HSpeed_CLK_DIV;
#else
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2204      	movs	r2, #4
 8000618:	615a      	str	r2, [r3, #20]
#endif /*USE_SD_HIGH_PERFORMANCE*/

  /* HAL SD initialization   */
  if(HAL_SD_Init(hsd) != HAL_OK)
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f007 fa56 	bl	8007acc <HAL_SD_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_SDMMC1_SD_Init+0x42>
  {
    ret = HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	52007000 	.word	0x52007000

08000638 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t BSP_SD_IsDetected(uint32_t Instance)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000640:	f06f 0305 	mvn.w	r3, #5
 8000644:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <BSP_SD_IsDetected+0x1a>
  {
    return BSP_ERROR_WRONG_PARAM;
 800064c:	f06f 0301 	mvn.w	r3, #1
 8000650:	e00f      	b.n	8000672 <BSP_SD_IsDetected+0x3a>
  }
  else
  {
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 8000652:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000656:	4809      	ldr	r0, [pc, #36]	@ (800067c <BSP_SD_IsDetected+0x44>)
 8000658:	f001 fa50 	bl	8001afc <HAL_GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	60fb      	str	r3, [r7, #12]
    /* Check SD card detect pin */
    if(ret != GPIO_PIN_RESET)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <BSP_SD_IsDetected+0x34>
    {
      ret = (int32_t)SD_NOT_PRESENT;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	e001      	b.n	8000670 <BSP_SD_IsDetected+0x38>
    }
    else
    {
      ret = (int32_t)SD_PRESENT;
 800066c:	2301      	movs	r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000670:	68fb      	ldr	r3, [r7, #12]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	58022000 	.word	0x58022000

08000680 <BSP_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t BSP_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af02      	add	r7, sp, #8
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	2264      	movs	r2, #100	@ 0x64
 8000696:	fb02 f303 	mul.w	r3, r2, r3
 800069a:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d003      	beq.n	80006aa <BSP_SD_ReadBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80006a2:	f06f 0301 	mvn.w	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	e013      	b.n	80006d2 <BSP_SD_ReadBlocks+0x52>
  }
  else
  {
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	015b      	lsls	r3, r3, #5
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4a09      	ldr	r2, [pc, #36]	@ (80006dc <BSP_SD_ReadBlocks+0x5c>)
 80006b6:	1898      	adds	r0, r3, r2
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	68b9      	ldr	r1, [r7, #8]
 80006c2:	f007 fb2d 	bl	8007d20 <HAL_SD_ReadBlocks>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <BSP_SD_ReadBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80006cc:	f06f 0303 	mvn.w	r3, #3
 80006d0:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 80006d2:	697b      	ldr	r3, [r7, #20]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000098 	.word	0x20000098

080006e0 <BSP_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t BSP_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
 80006ec:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	2264      	movs	r2, #100	@ 0x64
 80006f6:	fb02 f303 	mul.w	r3, r2, r3
 80006fa:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d003      	beq.n	800070a <BSP_SD_WriteBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000702:	f06f 0301 	mvn.w	r3, #1
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	e013      	b.n	8000732 <BSP_SD_WriteBlocks+0x52>
  }
  else
  {
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	4613      	mov	r3, r2
 800070e:	015b      	lsls	r3, r3, #5
 8000710:	1a9b      	subs	r3, r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4a09      	ldr	r2, [pc, #36]	@ (800073c <BSP_SD_WriteBlocks+0x5c>)
 8000716:	1898      	adds	r0, r3, r2
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	f007 fc87 	bl	8008034 <HAL_SD_WriteBlocks>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <BSP_SD_WriteBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800072c:	f06f 0303 	mvn.w	r3, #3
 8000730:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 8000732:	697b      	ldr	r3, [r7, #20]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000098 	.word	0x20000098

08000740 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t BSP_SD_GetCardState(uint32_t Instance)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4613      	mov	r3, r2
 800074c:	015b      	lsls	r3, r3, #5
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4a07      	ldr	r2, [pc, #28]	@ (8000770 <BSP_SD_GetCardState+0x30>)
 8000754:	4413      	add	r3, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f008 fa56 	bl	8008c08 <HAL_SD_GetCardState>
 800075c:	4603      	mov	r3, r0
 800075e:	2b04      	cmp	r3, #4
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000098 	.word	0x20000098

08000774 <BSP_SD_GetCardInfo>:
  * @param  Instance  SD Instance
  * @param  CardInfo  Pointer to HAL_SD_CardInfoTypedef structure
  * @retval BSP status
  */
int32_t BSP_SD_GetCardInfo(uint32_t Instance, BSP_SD_CardInfo *CardInfo)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d003      	beq.n	8000790 <BSP_SD_GetCardInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000788:	f06f 0301 	mvn.w	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	e010      	b.n	80007b2 <BSP_SD_GetCardInfo+0x3e>
  }
  else
  {
    if(HAL_SD_GetCardInfo(&hsd_sdmmc[Instance], CardInfo) != HAL_OK)
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	4613      	mov	r3, r2
 8000794:	015b      	lsls	r3, r3, #5
 8000796:	1a9b      	subs	r3, r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4a08      	ldr	r2, [pc, #32]	@ (80007bc <BSP_SD_GetCardInfo+0x48>)
 800079c:	4413      	add	r3, r2
 800079e:	6839      	ldr	r1, [r7, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f008 f837 	bl	8008814 <HAL_SD_GetCardInfo>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <BSP_SD_GetCardInfo+0x3e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80007ac:	f06f 0303 	mvn.w	r3, #3
 80007b0:	60fb      	str	r3, [r7, #12]
    }
  }
  /* Return BSP status */
  return ret;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000098 	.word	0x20000098

080007c0 <SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd  SD handle
  * @retval None
  */
static void SD_MspInit(SD_HandleTypeDef *hsd)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	@ 0x30
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4a44      	ldr	r2, [pc, #272]	@ (80008dc <SD_MspInit+0x11c>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	f040 8081 	bne.w	80008d4 <SD_MspInit+0x114>
    therefore Camera must be power down before using the BSP SD
    To power down the camera , Set GPIOJ pin 14 to high
    */

    /* Enable GPIO J clock */
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80007d2:	4b43      	ldr	r3, [pc, #268]	@ (80008e0 <SD_MspInit+0x120>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a41      	ldr	r2, [pc, #260]	@ (80008e0 <SD_MspInit+0x120>)
 80007da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b3f      	ldr	r3, [pc, #252]	@ (80008e0 <SD_MspInit+0x120>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007ec:	61bb      	str	r3, [r7, #24]
 80007ee:	69bb      	ldr	r3, [r7, #24]

    gpio_init_structure.Pin       = GPIO_PIN_14;
 80007f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80007f4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4836      	ldr	r0, [pc, #216]	@ (80008e4 <SD_MspInit+0x124>)
 800080a:	f000 ffc7 	bl	800179c <HAL_GPIO_Init>

    /* Set the camera POWER_DOWN pin (active high) */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000814:	4833      	ldr	r0, [pc, #204]	@ (80008e4 <SD_MspInit+0x124>)
 8000816:	f001 f989 	bl	8001b2c <HAL_GPIO_WritePin>
#endif

    /* Enable SDIO clock */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800081a:	4b31      	ldr	r3, [pc, #196]	@ (80008e0 <SD_MspInit+0x120>)
 800081c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000820:	4a2f      	ldr	r2, [pc, #188]	@ (80008e0 <SD_MspInit+0x120>)
 8000822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000826:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800082a:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <SD_MspInit+0x120>)
 800082c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	697b      	ldr	r3, [r7, #20]


    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000838:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <SD_MspInit+0x120>)
 800083a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800083e:	4a28      	ldr	r2, [pc, #160]	@ (80008e0 <SD_MspInit+0x120>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000848:	4b25      	ldr	r3, [pc, #148]	@ (80008e0 <SD_MspInit+0x120>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <SD_MspInit+0x120>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800085c:	4a20      	ldr	r2, [pc, #128]	@ (80008e0 <SD_MspInit+0x120>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000866:	4b1e      	ldr	r3, [pc, #120]	@ (80008e0 <SD_MspInit+0x120>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000874:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <SD_MspInit+0x120>)
 8000876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800087a:	4a19      	ldr	r2, [pc, #100]	@ (80008e0 <SD_MspInit+0x120>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <SD_MspInit+0x120>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]


    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8000896:	2301      	movs	r3, #1
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 800089e:	230c      	movs	r3, #12
 80008a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SD_BUS_WIDE_4B > 0)
    /* SDMMC GPIO CLKIN PB8, D0 PC8, D1 PC9, D2 PC10, D3 PC11, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80008a2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008a6:	61fb      	str	r3, [r7, #28]
    /* SDMMC GPIO CLKIN PB8, D0 PC8, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif

    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	480e      	ldr	r0, [pc, #56]	@ (80008e8 <SD_MspInit+0x128>)
 80008b0:	f000 ff74 	bl	800179c <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
 80008b4:	2304      	movs	r3, #4
 80008b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	480b      	ldr	r0, [pc, #44]	@ (80008ec <SD_MspInit+0x12c>)
 80008c0:	f000 ff6c 	bl	800179c <HAL_GPIO_Init>

    /* NVIC configuration for SDIO interrupts */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	210e      	movs	r1, #14
 80008c8:	2031      	movs	r0, #49	@ 0x31
 80008ca:	f000 fbee 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80008ce:	2031      	movs	r0, #49	@ 0x31
 80008d0:	f000 fc05 	bl	80010de <HAL_NVIC_EnableIRQ>
  }
}
 80008d4:	bf00      	nop
 80008d6:	3730      	adds	r7, #48	@ 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000098 	.word	0x20000098
 80008e0:	58024400 	.word	0x58024400
 80008e4:	58022400 	.word	0x58022400
 80008e8:	58020800 	.word	0x58020800
 80008ec:	58020c00 	.word	0x58020c00

080008f0 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800J_Context_t pRegMode;

  if(Instance >=SDRAM_INSTANCES_NBR)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80008fe:	f06f 0301 	mvn.w	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e033      	b.n	800096e <BSP_SDRAM_Init+0x7e>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SDRAM initialization */
      SDRAM_MspInit(&hsdram[0]);
 8000906:	481c      	ldr	r0, [pc, #112]	@ (8000978 <BSP_SDRAM_Init+0x88>)
 8000908:	f000 f884 	bl	8000a14 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800090c:	481a      	ldr	r0, [pc, #104]	@ (8000978 <BSP_SDRAM_Init+0x88>)
 800090e:	f000 f837 	bl	8000980 <MX_SDRAM_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d003      	beq.n	8000920 <BSP_SDRAM_Init+0x30>
    {
      ret = BSP_ERROR_NO_INIT;
 8000918:	f04f 33ff 	mov.w	r3, #4294967295
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	e026      	b.n	800096e <BSP_SDRAM_Init+0x7e>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8000920:	4b16      	ldr	r3, [pc, #88]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000922:	2208      	movs	r2, #8
 8000924:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8000926:	4b15      	ldr	r3, [pc, #84]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000928:	2203      	movs	r2, #3
 800092a:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800092c:	4b13      	ldr	r3, [pc, #76]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 800092e:	f240 6203 	movw	r2, #1539	@ 0x603
 8000932:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8000940:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000942:	2230      	movs	r2, #48	@ 0x30
 8000944:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800094c:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 800094e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000952:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8000954:	4909      	ldr	r1, [pc, #36]	@ (800097c <BSP_SDRAM_Init+0x8c>)
 8000956:	4808      	ldr	r0, [pc, #32]	@ (8000978 <BSP_SDRAM_Init+0x88>)
 8000958:	f7ff fcbe 	bl	80002d8 <IS42S32800J_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <BSP_SDRAM_Init+0x7a>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8000962:	f06f 0304 	mvn.w	r3, #4
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	e001      	b.n	800096e <BSP_SDRAM_Init+0x7e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800096e:	68fb      	ldr	r3, [r7, #12]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000114 	.word	0x20000114
 800097c:	20000148 	.word	0x20000148

08000980 <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a20      	ldr	r2, [pc, #128]	@ (8000a0c <MX_SDRAM_Init+0x8c>)
 800098c:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2201      	movs	r2, #1
 8000992:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2201      	movs	r2, #1
 8000998:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2204      	movs	r2, #4
 800099e:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2220      	movs	r2, #32
 80009a4:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2240      	movs	r2, #64	@ 0x40
 80009aa:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80009b2:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009c0:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_SDRAM_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80009d4:	2307      	movs	r3, #7
 80009d6:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 80009dc:	2307      	movs	r3, #7
 80009de:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4619      	mov	r1, r3
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f008 fdb0 	bl	8009558 <HAL_SDRAM_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_SDRAM_Init+0x82>
  {
    return  HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <MX_SDRAM_Init+0x84>
  }
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3728      	adds	r7, #40	@ 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	52004140 	.word	0x52004140
 8000a10:	20000114 	.word	0x20000114

08000a14 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hsdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b090      	sub	sp, #64	@ 0x40
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a1c:	4b7f      	ldr	r3, [pc, #508]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a22:	4a7e      	ldr	r2, [pc, #504]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a28:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000a2c:	4b7b      	ldr	r3, [pc, #492]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8000a3a:	4b78      	ldr	r3, [pc, #480]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a40:	4a76      	ldr	r2, [pc, #472]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000a4a:	4b74      	ldr	r3, [pc, #464]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a58:	4b70      	ldr	r3, [pc, #448]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	4a6f      	ldr	r2, [pc, #444]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a68:	4b6c      	ldr	r3, [pc, #432]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	623b      	str	r3, [r7, #32]
 8000a74:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a76:	4b69      	ldr	r3, [pc, #420]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	4a67      	ldr	r2, [pc, #412]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a86:	4b65      	ldr	r3, [pc, #404]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	61fb      	str	r3, [r7, #28]
 8000a92:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a94:	4b61      	ldr	r3, [pc, #388]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	4a60      	ldr	r2, [pc, #384]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000a9c:	f043 0320 	orr.w	r3, r3, #32
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa4:	4b5d      	ldr	r3, [pc, #372]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	f003 0320 	and.w	r3, r3, #32
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab2:	4b5a      	ldr	r3, [pc, #360]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	4a58      	ldr	r2, [pc, #352]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac2:	4b56      	ldr	r3, [pc, #344]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad0:	4b52      	ldr	r3, [pc, #328]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	4a51      	ldr	r2, [pc, #324]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae0:	4b4e      	ldr	r3, [pc, #312]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000aee:	4b4b      	ldr	r3, [pc, #300]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af4:	4a49      	ldr	r2, [pc, #292]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000afe:	4b47      	ldr	r3, [pc, #284]	@ (8000c1c <SDRAM_MspInit+0x208>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8000b1c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b26:	4619      	mov	r1, r3
 8000b28:	483d      	ldr	r0, [pc, #244]	@ (8000c20 <SDRAM_MspInit+0x20c>)
 8000b2a:	f000 fe37 	bl	800179c <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8000b2e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8000b34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b38:	4619      	mov	r1, r3
 8000b3a:	483a      	ldr	r0, [pc, #232]	@ (8000c24 <SDRAM_MspInit+0x210>)
 8000b3c:	f000 fe2e 	bl	800179c <HAL_GPIO_Init>
  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8000b40:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8000b46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4836      	ldr	r0, [pc, #216]	@ (8000c28 <SDRAM_MspInit+0x214>)
 8000b4e:	f000 fe25 	bl	800179c <HAL_GPIO_Init>
  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8000b52:	f248 1337 	movw	r3, #33079	@ 0x8137
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8000b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4833      	ldr	r0, [pc, #204]	@ (8000c2c <SDRAM_MspInit+0x218>)
 8000b60:	f000 fe1c 	bl	800179c <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8000b64:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8000b6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6e:	4619      	mov	r1, r3
 8000b70:	482f      	ldr	r0, [pc, #188]	@ (8000c30 <SDRAM_MspInit+0x21c>)
 8000b72:	f000 fe13 	bl	800179c <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8000b76:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8000b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;

  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8000b7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b80:	4619      	mov	r1, r3
 8000b82:	482c      	ldr	r0, [pc, #176]	@ (8000c34 <SDRAM_MspInit+0x220>)
 8000b84:	f000 fe0a 	bl	800179c <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8000b88:	4b2b      	ldr	r3, [pc, #172]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000b8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b8e:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8000b90:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b96:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8000b98:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000b9a:	2280      	movs	r2, #128	@ 0x80
 8000b9c:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000b9e:	4b26      	ldr	r3, [pc, #152]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8000ba4:	4b24      	ldr	r3, [pc, #144]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000ba6:	f240 2202 	movw	r2, #514	@ 0x202
 8000baa:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bae:	f640 0208 	movw	r2, #2056	@ 0x808
 8000bb2:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8000bb4:	4b20      	ldr	r3, [pc, #128]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bbc:	2280      	movs	r2, #128	@ 0x80
 8000bbe:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000bc6:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bd6:	2280      	movs	r2, #128	@ 0x80
 8000bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8000bda:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	639a      	str	r2, [r3, #56]	@ 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8000be6:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000be8:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <SDRAM_MspInit+0x228>)
 8000bea:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bf0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bf2:	4a11      	ldr	r2, [pc, #68]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8000bf8:	480f      	ldr	r0, [pc, #60]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000bfa:	f002 fe9b 	bl	8003934 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8000bfe:	480e      	ldr	r0, [pc, #56]	@ (8000c38 <SDRAM_MspInit+0x224>)
 8000c00:	f002 fe4c 	bl	800389c <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	210f      	movs	r1, #15
 8000c08:	207a      	movs	r0, #122	@ 0x7a
 8000c0a:	f000 fa4e 	bl	80010aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8000c0e:	207a      	movs	r0, #122	@ 0x7a
 8000c10:	f000 fa65 	bl	80010de <HAL_NVIC_EnableIRQ>
}
 8000c14:	bf00      	nop
 8000c16:	3740      	adds	r7, #64	@ 0x40
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	58020c00 	.word	0x58020c00
 8000c24:	58021000 	.word	0x58021000
 8000c28:	58021400 	.word	0x58021400
 8000c2c:	58021800 	.word	0x58021800
 8000c30:	58021c00 	.word	0x58021c00
 8000c34:	58022000 	.word	0x58022000
 8000c38:	20000168 	.word	0x20000168
 8000c3c:	52000040 	.word	0x52000040

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c44:	4b37      	ldr	r3, [pc, #220]	@ (8000d24 <SystemInit+0xe4>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4a:	4a36      	ldr	r2, [pc, #216]	@ (8000d24 <SystemInit+0xe4>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c54:	4b34      	ldr	r3, [pc, #208]	@ (8000d28 <SystemInit+0xe8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	2b06      	cmp	r3, #6
 8000c5e:	d807      	bhi.n	8000c70 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c60:	4b31      	ldr	r3, [pc, #196]	@ (8000d28 <SystemInit+0xe8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f023 030f 	bic.w	r3, r3, #15
 8000c68:	4a2f      	ldr	r2, [pc, #188]	@ (8000d28 <SystemInit+0xe8>)
 8000c6a:	f043 0307 	orr.w	r3, r3, #7
 8000c6e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c70:	4b2e      	ldr	r3, [pc, #184]	@ (8000d2c <SystemInit+0xec>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a2d      	ldr	r2, [pc, #180]	@ (8000d2c <SystemInit+0xec>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d2c <SystemInit+0xec>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c82:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <SystemInit+0xec>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4929      	ldr	r1, [pc, #164]	@ (8000d2c <SystemInit+0xec>)
 8000c88:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <SystemInit+0xf0>)
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c8e:	4b26      	ldr	r3, [pc, #152]	@ (8000d28 <SystemInit+0xe8>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d007      	beq.n	8000caa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c9a:	4b23      	ldr	r3, [pc, #140]	@ (8000d28 <SystemInit+0xe8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 030f 	bic.w	r3, r3, #15
 8000ca2:	4a21      	ldr	r2, [pc, #132]	@ (8000d28 <SystemInit+0xe8>)
 8000ca4:	f043 0307 	orr.w	r3, r3, #7
 8000ca8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <SystemInit+0xec>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <SystemInit+0xec>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <SystemInit+0xec>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <SystemInit+0xec>)
 8000cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8000d34 <SystemInit+0xf4>)
 8000cc0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <SystemInit+0xec>)
 8000cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d38 <SystemInit+0xf8>)
 8000cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <SystemInit+0xec>)
 8000cca:	4a1c      	ldr	r2, [pc, #112]	@ (8000d3c <SystemInit+0xfc>)
 8000ccc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <SystemInit+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <SystemInit+0xec>)
 8000cd6:	4a19      	ldr	r2, [pc, #100]	@ (8000d3c <SystemInit+0xfc>)
 8000cd8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cda:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <SystemInit+0xec>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <SystemInit+0xec>)
 8000ce2:	4a16      	ldr	r2, [pc, #88]	@ (8000d3c <SystemInit+0xfc>)
 8000ce4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <SystemInit+0xec>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <SystemInit+0xec>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <SystemInit+0xec>)
 8000cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cf6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <SystemInit+0xec>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <SystemInit+0x100>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <SystemInit+0x104>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d0a:	d202      	bcs.n	8000d12 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <SystemInit+0x108>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <SystemInit+0x10c>)
 8000d14:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	52002000 	.word	0x52002000
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d34:	02020200 	.word	0x02020200
 8000d38:	01ff0000 	.word	0x01ff0000
 8000d3c:	01010280 	.word	0x01010280
 8000d40:	5c001000 	.word	0x5c001000
 8000d44:	ffff0000 	.word	0xffff0000
 8000d48:	51008108 	.word	0x51008108
 8000d4c:	52004000 	.word	0x52004000

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d56:	2003      	movs	r0, #3
 8000d58:	f000 f99c 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d5c:	f003 ffb8 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8000d60:	4602      	mov	r2, r0
 8000d62:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <HAL_Init+0x68>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	0a1b      	lsrs	r3, r3, #8
 8000d68:	f003 030f 	and.w	r3, r3, #15
 8000d6c:	4913      	ldr	r1, [pc, #76]	@ (8000dbc <HAL_Init+0x6c>)
 8000d6e:	5ccb      	ldrb	r3, [r1, r3]
 8000d70:	f003 031f 	and.w	r3, r3, #31
 8000d74:	fa22 f303 	lsr.w	r3, r2, r3
 8000d78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_Init+0x68>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	4a0e      	ldr	r2, [pc, #56]	@ (8000dbc <HAL_Init+0x6c>)
 8000d84:	5cd3      	ldrb	r3, [r2, r3]
 8000d86:	f003 031f 	and.w	r3, r3, #31
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d90:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc0 <HAL_Init+0x70>)
 8000d92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d94:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <HAL_Init+0x74>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 f814 	bl	8000dc8 <HAL_InitTick>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e002      	b.n	8000db0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000daa:	f003 f91f 	bl	8003fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	58024400 	.word	0x58024400
 8000dbc:	08010bbc 	.word	0x08010bbc
 8000dc0:	20000004 	.word	0x20000004
 8000dc4:	20000000 	.word	0x20000000

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <HAL_InitTick+0x60>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e021      	b.n	8000e20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <HAL_InitTick+0x64>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <HAL_InitTick+0x60>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f981 	bl	80010fa <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f94b 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <HAL_InitTick+0x68>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2000000c 	.word	0x2000000c
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000008 	.word	0x20000008

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	200001d4 	.word	0x200001d4

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200001d4 	.word	0x200001d4

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff ffee 	bl	8000e5c <HAL_GetTick>
 8000e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9a:	bf00      	nop
 8000e9c:	f7ff ffde 	bl	8000e5c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000000c 	.word	0x2000000c

08000ebc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ec0:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <HAL_GetREVID+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	0c1b      	lsrs	r3, r3, #16
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	5c001000 	.word	0x5c001000

08000ed4 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <HAL_EnableCompensationCell+0x1c>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_EnableCompensationCell+0x1c>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6213      	str	r3, [r2, #32]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	58000400 	.word	0x58000400

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x40>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x40>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00
 8000f38:	05fa0000 	.word	0x05fa0000

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	@ (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	@ (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	@ (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	@ 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	@ 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff29 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff40 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff90 	bl	8000fe8 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5f 	bl	8000f94 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff33 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa4 	bl	8001050 <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001118:	f3bf 8f5f 	dmb	sy
}
 800111c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800111e:	4b07      	ldr	r3, [pc, #28]	@ (800113c <HAL_MPU_Disable+0x28>)
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_MPU_Disable+0x28>)
 8001124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001128:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800112a:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_MPU_Disable+0x2c>)
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00
 8001140:	e000ed90 	.word	0xe000ed90

08001144 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800114c:	4a0b      	ldr	r2, [pc, #44]	@ (800117c <HAL_MPU_Enable+0x38>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_MPU_Enable+0x3c>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115a:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <HAL_MPU_Enable+0x3c>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001160:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001162:	f3bf 8f4f 	dsb	sy
}
 8001166:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001168:	f3bf 8f6f 	isb	sy
}
 800116c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed90 	.word	0xe000ed90
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	785a      	ldrb	r2, [r3, #1]
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 8001192:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 800119a:	f023 0301 	bic.w	r3, r3, #1
 800119e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80011a0:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7b1b      	ldrb	r3, [r3, #12]
 80011ac:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7adb      	ldrb	r3, [r3, #11]
 80011b2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7a9b      	ldrb	r3, [r3, #10]
 80011ba:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7b5b      	ldrb	r3, [r3, #13]
 80011c2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7b9b      	ldrb	r3, [r3, #14]
 80011ca:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7bdb      	ldrb	r3, [r3, #15]
 80011d2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7a5b      	ldrb	r3, [r3, #9]
 80011da:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7a1b      	ldrb	r3, [r3, #8]
 80011e2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011e4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011ec:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011ee:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011f0:	6113      	str	r3, [r2, #16]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed90 	.word	0xe000ed90

08001204 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e04f      	b.n	80012b6 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d106      	bne.n	8001230 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f00c f8d8 	bl	800d3e0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2202      	movs	r2, #2
 8001234:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <HAL_DMA2D_Init+0xbc>)
 8001240:	4013      	ands	r3, r2
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6851      	ldr	r1, [r2, #4]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	69d2      	ldr	r2, [r2, #28]
 800124a:	4311      	orrs	r1, r2
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6812      	ldr	r2, [r2, #0]
 8001250:	430b      	orrs	r3, r1
 8001252:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <HAL_DMA2D_Init+0xc0>)
 800125c:	4013      	ands	r3, r2
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	6891      	ldr	r1, [r2, #8]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6992      	ldr	r2, [r2, #24]
 8001266:	4311      	orrs	r1, r2
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	430b      	orrs	r3, r1
 800126e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001276:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <HAL_DMA2D_Init+0xc4>)
 8001278:	4013      	ands	r3, r2
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68d1      	ldr	r1, [r2, #12]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	430b      	orrs	r3, r1
 8001284:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800128c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	051a      	lsls	r2, r3, #20
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	055b      	lsls	r3, r3, #21
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	fff8ffbf 	.word	0xfff8ffbf
 80012c4:	fffffef8 	.word	0xfffffef8
 80012c8:	ffff0000 	.word	0xffff0000

080012cc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_DMA2D_Start+0x1c>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e018      	b.n	800131a <HAL_DMA2D_Start+0x4e>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2202      	movs	r2, #2
 80012f4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f000 f9a4 	bl	8001650 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d056      	beq.n	80013ec <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800133e:	f7ff fd8d 	bl	8000e5c <HAL_GetTick>
 8001342:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001344:	e04b      	b.n	80013de <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8001354:	2b00      	cmp	r3, #0
 8001356:	d023      	beq.n	80013a0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0320 	and.w	r3, r3, #32
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001366:	f043 0202 	orr.w	r2, r3, #2
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2221      	movs	r2, #33	@ 0x21
 800138a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2204      	movs	r2, #4
 8001390:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0a5      	b.n	80014ec <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a6:	d01a      	beq.n	80013de <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80013a8:	f7ff fd58 	bl	8000e5c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d302      	bcc.n	80013be <HAL_DMA2D_PollForTransfer+0x9c>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10f      	bne.n	80013de <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80013c2:	f043 0220 	orr.w	r2, r3, #32
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2203      	movs	r2, #3
 80013ce:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e086      	b.n	80014ec <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0ac      	beq.n	8001346 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 0320 	and.w	r3, r3, #32
 80013f6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fe:	f003 0320 	and.w	r3, r3, #32
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d061      	beq.n	80014d2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800140e:	f7ff fd25 	bl	8000e5c <HAL_GetTick>
 8001412:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001414:	e056      	b.n	80014c4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8001424:	2b00      	cmp	r3, #0
 8001426:	d02e      	beq.n	8001486 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001436:	f043 0204 	orr.w	r2, r3, #4
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800144c:	f043 0202 	orr.w	r2, r3, #2
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001462:	f043 0201 	orr.w	r2, r3, #1
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2229      	movs	r2, #41	@ 0x29
 8001470:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2204      	movs	r2, #4
 8001476:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e032      	b.n	80014ec <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d01a      	beq.n	80014c4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800148e:	f7ff fce5 	bl	8000e5c <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d302      	bcc.n	80014a4 <HAL_DMA2D_PollForTransfer+0x182>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10f      	bne.n	80014c4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014a8:	f043 0220 	orr.w	r2, r3, #32
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2203      	movs	r2, #3
 80014b4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e013      	b.n	80014ec <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0a1      	beq.n	8001416 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2212      	movs	r2, #18
 80014d8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_DMA2D_ConfigLayer+0x24>
 8001514:	2302      	movs	r3, #2
 8001516:	e092      	b.n	800163e <HAL_DMA2D_ConfigLayer+0x14a>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2202      	movs	r2, #2
 8001524:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	4613      	mov	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	3328      	adds	r3, #40	@ 0x28
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	041b      	lsls	r3, r3, #16
 8001544:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800154c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8001558:	4b3c      	ldr	r3, [pc, #240]	@ (800164c <HAL_DMA2D_ConfigLayer+0x158>)
 800155a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b0a      	cmp	r3, #10
 8001562:	d003      	beq.n	800156c <HAL_DMA2D_ConfigLayer+0x78>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b09      	cmp	r3, #9
 800156a:	d107      	bne.n	800157c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	e005      	b.n	8001588 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	061b      	lsls	r3, r3, #24
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d120      	bne.n	80015d0 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	43db      	mvns	r3, r3
 8001598:	ea02 0103 	and.w	r1, r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b0a      	cmp	r3, #10
 80015b6:	d003      	beq.n	80015c0 <HAL_DMA2D_ConfigLayer+0xcc>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b09      	cmp	r3, #9
 80015be:	d135      	bne.n	800162c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80015ce:	e02d      	b.n	800162c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b0b      	cmp	r3, #11
 80015d6:	d109      	bne.n	80015ec <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	049b      	lsls	r3, r3, #18
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80015ea:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	69da      	ldr	r2, [r3, #28]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	ea02 0103 	and.w	r1, r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	430a      	orrs	r2, r1
 8001602:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b0a      	cmp	r3, #10
 8001614:	d003      	beq.n	800161e <HAL_DMA2D_ConfigLayer+0x12a>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b09      	cmp	r3, #9
 800161c:	d106      	bne.n	800162c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800162a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	ff33000f 	.word	0xff33000f

08001650 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8001650:	b480      	push	{r7}
 8001652:	b08b      	sub	sp, #44	@ 0x2c
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001664:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	041a      	lsls	r2, r3, #16
 800166c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800166e:	431a      	orrs	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001688:	d174      	bne.n	8001774 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001690:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001698:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80016a0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d108      	bne.n	80016c2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	431a      	orrs	r2, r3
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
 80016c0:	e053      	b.n	800176a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d106      	bne.n	80016d8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d6:	e048      	b.n	800176a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d111      	bne.n	8001704 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	0cdb      	lsrs	r3, r3, #19
 80016e4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	0a9b      	lsrs	r3, r3, #10
 80016ea:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	015a      	lsls	r2, r3, #5
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	02db      	lsls	r3, r3, #11
 80016fa:	4313      	orrs	r3, r2
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	4313      	orrs	r3, r2
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
 8001702:	e032      	b.n	800176a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d117      	bne.n	800173c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	0fdb      	lsrs	r3, r3, #31
 8001710:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	0cdb      	lsrs	r3, r3, #19
 8001716:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	0adb      	lsrs	r3, r3, #11
 800171c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	08db      	lsrs	r3, r3, #3
 8001722:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	015a      	lsls	r2, r3, #5
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	431a      	orrs	r2, r3
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	03db      	lsls	r3, r3, #15
 8001732:	4313      	orrs	r3, r2
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	4313      	orrs	r3, r2
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
 800173a:	e016      	b.n	800176a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800173c:	6a3b      	ldr	r3, [r7, #32]
 800173e:	0f1b      	lsrs	r3, r3, #28
 8001740:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	0d1b      	lsrs	r3, r3, #20
 8001746:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	0b1b      	lsrs	r3, r3, #12
 800174c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	011a      	lsls	r2, r3, #4
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	431a      	orrs	r2, r3
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	031b      	lsls	r3, r3, #12
 8001762:	4313      	orrs	r3, r2
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	4313      	orrs	r3, r2
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001770:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001772:	e00d      	b.n	8001790 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800177c:	d104      	bne.n	8001788 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	615a      	str	r2, [r3, #20]
}
 8001786:	e003      	b.n	8001790 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	60da      	str	r2, [r3, #12]
}
 8001790:	bf00      	nop
 8001792:	372c      	adds	r7, #44	@ 0x2c
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017aa:	4b89      	ldr	r3, [pc, #548]	@ (80019d0 <HAL_GPIO_Init+0x234>)
 80017ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017ae:	e194      	b.n	8001ada <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2101      	movs	r1, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8186 	beq.w	8001ad4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d005      	beq.n	80017e0 <HAL_GPIO_Init+0x44>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d130      	bne.n	8001842 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	2203      	movs	r2, #3
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001816:	2201      	movs	r2, #1
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	f003 0201 	and.w	r2, r3, #1
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b03      	cmp	r3, #3
 800184c:	d017      	beq.n	800187e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d123      	bne.n	80018d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	220f      	movs	r2, #15
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	08da      	lsrs	r2, r3, #3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3208      	adds	r2, #8
 80018cc:	69b9      	ldr	r1, [r7, #24]
 80018ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0203 	and.w	r2, r3, #3
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 80e0 	beq.w	8001ad4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001914:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <HAL_GPIO_Init+0x238>)
 8001916:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800191a:	4a2e      	ldr	r2, [pc, #184]	@ (80019d4 <HAL_GPIO_Init+0x238>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001924:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <HAL_GPIO_Init+0x238>)
 8001926:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001932:	4a29      	ldr	r2, [pc, #164]	@ (80019d8 <HAL_GPIO_Init+0x23c>)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	089b      	lsrs	r3, r3, #2
 8001938:	3302      	adds	r3, #2
 800193a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	220f      	movs	r2, #15
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a20      	ldr	r2, [pc, #128]	@ (80019dc <HAL_GPIO_Init+0x240>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d052      	beq.n	8001a04 <HAL_GPIO_Init+0x268>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a1f      	ldr	r2, [pc, #124]	@ (80019e0 <HAL_GPIO_Init+0x244>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d031      	beq.n	80019ca <HAL_GPIO_Init+0x22e>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a1e      	ldr	r2, [pc, #120]	@ (80019e4 <HAL_GPIO_Init+0x248>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d02b      	beq.n	80019c6 <HAL_GPIO_Init+0x22a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a1d      	ldr	r2, [pc, #116]	@ (80019e8 <HAL_GPIO_Init+0x24c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d025      	beq.n	80019c2 <HAL_GPIO_Init+0x226>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a1c      	ldr	r2, [pc, #112]	@ (80019ec <HAL_GPIO_Init+0x250>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d01f      	beq.n	80019be <HAL_GPIO_Init+0x222>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a1b      	ldr	r2, [pc, #108]	@ (80019f0 <HAL_GPIO_Init+0x254>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d019      	beq.n	80019ba <HAL_GPIO_Init+0x21e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a1a      	ldr	r2, [pc, #104]	@ (80019f4 <HAL_GPIO_Init+0x258>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0x21a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a19      	ldr	r2, [pc, #100]	@ (80019f8 <HAL_GPIO_Init+0x25c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00d      	beq.n	80019b2 <HAL_GPIO_Init+0x216>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a18      	ldr	r2, [pc, #96]	@ (80019fc <HAL_GPIO_Init+0x260>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_GPIO_Init+0x212>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a17      	ldr	r2, [pc, #92]	@ (8001a00 <HAL_GPIO_Init+0x264>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_GPIO_Init+0x20e>
 80019a6:	2309      	movs	r3, #9
 80019a8:	e02d      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019aa:	230a      	movs	r3, #10
 80019ac:	e02b      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ae:	2308      	movs	r3, #8
 80019b0:	e029      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019b2:	2307      	movs	r3, #7
 80019b4:	e027      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019b6:	2306      	movs	r3, #6
 80019b8:	e025      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ba:	2305      	movs	r3, #5
 80019bc:	e023      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019be:	2304      	movs	r3, #4
 80019c0:	e021      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019c2:	2303      	movs	r3, #3
 80019c4:	e01f      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e01d      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e01b      	b.n	8001a06 <HAL_GPIO_Init+0x26a>
 80019ce:	bf00      	nop
 80019d0:	58000080 	.word	0x58000080
 80019d4:	58024400 	.word	0x58024400
 80019d8:	58000400 	.word	0x58000400
 80019dc:	58020000 	.word	0x58020000
 80019e0:	58020400 	.word	0x58020400
 80019e4:	58020800 	.word	0x58020800
 80019e8:	58020c00 	.word	0x58020c00
 80019ec:	58021000 	.word	0x58021000
 80019f0:	58021400 	.word	0x58021400
 80019f4:	58021800 	.word	0x58021800
 80019f8:	58021c00 	.word	0x58021c00
 80019fc:	58022000 	.word	0x58022000
 8001a00:	58022400 	.word	0x58022400
 8001a04:	2300      	movs	r3, #0
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	f002 0203 	and.w	r2, r2, #3
 8001a0c:	0092      	lsls	r2, r2, #2
 8001a0e:	4093      	lsls	r3, r2
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a16:	4938      	ldr	r1, [pc, #224]	@ (8001af8 <HAL_GPIO_Init+0x35c>)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f47f ae63 	bne.w	80017b0 <HAL_GPIO_Init+0x14>
  }
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	3724      	adds	r7, #36	@ 0x24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	58000400 	.word	0x58000400

08001afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691a      	ldr	r2, [r3, #16]
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e001      	b.n	8001b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b3c:	787b      	ldrb	r3, [r7, #1]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b42:	887a      	ldrh	r2, [r7, #2]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b48:	e003      	b.n	8001b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b4a:	887b      	ldrh	r3, [r7, #2]
 8001b4c:	041a      	lsls	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	619a      	str	r2, [r3, #24]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b085      	sub	sp, #20
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	460b      	mov	r3, r1
 8001b68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b70:	887a      	ldrh	r2, [r7, #2]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4013      	ands	r3, r2
 8001b76:	041a      	lsls	r2, r3, #16
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	400b      	ands	r3, r1
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	619a      	str	r2, [r3, #24]
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e070      	b.n	8001c88 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f00b fac8 	bl	800d150 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8001bf6:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c06:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c16:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8001c26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a19      	ldr	r2, [pc, #100]	@ (8001c90 <HAL_JPEG_Init+0xfc>)
 8001c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a18      	ldr	r2, [pc, #96]	@ (8001c94 <HAL_JPEG_Init+0x100>)
 8001c32:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fcdb 	bl	80025fc <JPEG_Set_HuffEnc_Mem>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d004      	beq.n	8001c56 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e018      	b.n	8001c88 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c64:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	08010dac 	.word	0x08010dac
 8001c94:	08010dec 	.word	0x08010dec

08001c98 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_JPEG_GetInfo+0x16>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e083      	b.n	8001dba <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d103      	bne.n	8001cc8 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	e017      	b.n	8001cf8 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d103      	bne.n	8001cde <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e00c      	b.n	8001cf8 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d103      	bne.n	8001cf4 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2230      	movs	r2, #48	@ 0x30
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e001      	b.n	8001cf8 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e060      	b.n	8001dba <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	0c1b      	lsrs	r3, r3, #16
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0c1b      	lsrs	r3, r3, #16
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b10      	cmp	r3, #16
 8001d1a:	d003      	beq.n	8001d24 <HAL_JPEG_GetInfo+0x8c>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b30      	cmp	r3, #48	@ 0x30
 8001d22:	d140      	bne.n	8001da6 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d109      	bne.n	8001d68 <HAL_JPEG_GetInfo+0xd0>
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_JPEG_GetInfo+0xd0>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d103      	bne.n	8001d68 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2202      	movs	r2, #2
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	e01d      	b.n	8001da4 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <HAL_JPEG_GetInfo+0xea>
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d106      	bne.n	8001d82 <HAL_JPEG_GetInfo+0xea>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d103      	bne.n	8001d82 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	e010      	b.n	8001da4 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d109      	bne.n	8001d9c <HAL_JPEG_GetInfo+0x104>
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_JPEG_GetInfo+0x104>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d103      	bne.n	8001d9c <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2201      	movs	r2, #1
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	e003      	b.n	8001da4 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8001da2:	e003      	b.n	8001dac <HAL_JPEG_GetInfo+0x114>
 8001da4:	e002      	b.n	8001dac <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2200      	movs	r2, #0
 8001daa:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f001 fd17 	bl	80037e0 <JPEG_GetQuality>
 8001db2:	4602      	mov	r2, r0
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_JPEG_Decode_DMA+0x20>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_JPEG_Decode_DMA+0x20>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e04c      	b.n	8001e80 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_JPEG_Decode_DMA+0x32>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e045      	b.n	8001e80 <HAL_JPEG_Decode_DMA+0xbe>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d134      	bne.n	8001e72 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e14:	f023 020f 	bic.w	r2, r3, #15
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e20:	f043 020e 	orr.w	r2, r3, #14
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	f000 fe57 	bl	8002b00 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f001 f978 	bl	8003148 <JPEG_DMA_StartProcess>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00f      	beq.n	8001e7e <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2206      	movs	r2, #6
 8001e62:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e006      	b.n	8001e80 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e000      	b.n	8001e80 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d116      	bne.n	8001ed0 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d033      	beq.n	8001f2a <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ece:	e02c      	b.n	8001f2a <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d126      	bne.n	8001f2a <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f043 0306 	orr.w	r3, r3, #6
 8001ef8:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d009      	beq.n	8001f18 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f08:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001f16:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	43da      	mvns	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	400a      	ands	r2, r1
 8001f28:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d813      	bhi.n	8001fd2 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d103      	bne.n	8001fbe <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fe16 	bl	8002be8 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 8001fbc:	e00b      	b.n	8001fd6 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b0c      	cmp	r3, #12
 8001fc8:	d105      	bne.n	8001fd6 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f001 f956 	bl	800327c <JPEG_DMA_ContinueProcess>
      break;
 8001fd0:	e001      	b.n	8001fd6 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 8001fd2:	bf00      	nop
 8001fd4:	e000      	b.n	8001fd8 <HAL_JPEG_IRQHandler+0x44>
      break;
 8001fd6:	bf00      	nop
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b08b      	sub	sp, #44	@ 0x2c
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	e020      	b.n	800203a <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 8002002:	6a3a      	ldr	r2, [r7, #32]
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	4413      	add	r3, r2
 8002008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800200c:	d90f      	bls.n	800202e <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e055      	b.n	80020be <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	b2da      	uxtb	r2, r3
 8002016:	68b9      	ldr	r1, [r7, #8]
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	440b      	add	r3, r1
 800201c:	3201      	adds	r2, #1
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]
      p++;
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	3301      	adds	r3, #1
 8002026:	623b      	str	r3, [r7, #32]
      i--;
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	3b01      	subs	r3, #1
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1ee      	bne.n	8002012 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	3301      	adds	r3, #1
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d9db      	bls.n	8001ff8 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	4413      	add	r3, r2
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6a3a      	ldr	r2, [r7, #32]
 800204e:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	617b      	str	r3, [r7, #20]
  p = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800205e:	e027      	b.n	80020b0 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	601a      	str	r2, [r3, #0]
      p++;
 800206c:	6a3b      	ldr	r3, [r7, #32]
 800206e:	3301      	adds	r3, #1
 8002070:	623b      	str	r3, [r7, #32]
      code++;
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	3301      	adds	r3, #1
 8002076:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	4413      	add	r3, r2
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	4293      	cmp	r3, r2
 8002086:	d0eb      	beq.n	8002060 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2b1f      	cmp	r3, #31
 800208c:	d901      	bls.n	8002092 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e015      	b.n	80020be <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8002092:	2201      	movs	r2, #1
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	429a      	cmp	r2, r3
 800209e:	d301      	bcc.n	80020a4 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e00c      	b.n	80020be <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	61bb      	str	r3, [r7, #24]
    si++;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	4413      	add	r3, r2
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1dd      	bne.n	8002078 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	372c      	adds	r7, #44	@ 0x2c
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80020d6:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80020da:	6018      	str	r0, [r3, #0]
 80020dc:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80020e0:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80020e4:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80020e6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80020ea:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	f107 0308 	add.w	r3, r7, #8
 80020f4:	f107 020c 	add.w	r2, r7, #12
 80020f8:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 80020fc:	f7ff ff70 	bl	8001fe0 <JPEG_Bits_To_SizeCodes>
 8002100:	4603      	mov	r3, r0
 8002102:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 8002106:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800210e:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 8002112:	e075      	b.n	8002200 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 800211a:	e067      	b.n	80021ec <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800211c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002120:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800212a:	4413      	add	r3, r2
 800212c:	3310      	adds	r3, #16
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 8002134:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002138:	2b00      	cmp	r3, #0
 800213a:	d103      	bne.n	8002144 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800213c:	23a0      	movs	r3, #160	@ 0xa0
 800213e:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8002142:	e021      	b.n	8002188 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8002144:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002148:	2bf0      	cmp	r3, #240	@ 0xf0
 800214a:	d103      	bne.n	8002154 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800214c:	23a1      	movs	r3, #161	@ 0xa1
 800214e:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8002152:	e019      	b.n	8002188 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 8002154:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 8002162:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800216e:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	461a      	mov	r2, r3
 800217c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002180:	4413      	add	r3, r2
 8002182:	3b01      	subs	r3, #1
 8002184:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8002188:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800218c:	2ba1      	cmp	r3, #161	@ 0xa1
 800218e:	d901      	bls.n	8002194 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8002190:	2301      	movs	r3, #1
 8002192:	e035      	b.n	8002200 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002194:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8002198:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800219c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80021a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021a4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80021a8:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80021ac:	6819      	ldr	r1, [r3, #0]
 80021ae:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80021b2:	3328      	adds	r3, #40	@ 0x28
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	440b      	add	r3, r1
 80021b8:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80021ba:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80021be:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 80021c2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80021c6:	4413      	add	r3, r2
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b2d9      	uxtb	r1, r3
 80021ce:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80021d2:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 80021dc:	4413      	add	r3, r2
 80021de:	460a      	mov	r2, r1
 80021e0:	701a      	strb	r2, [r3, #0]
      k++;
 80021e2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80021e6:	3301      	adds	r3, #1
 80021e8:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 80021ec:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 80021f0:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d38e      	bcc.n	800211c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 8002210:	af00      	add	r7, sp, #0
 8002212:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002216:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800221a:	6018      	str	r0, [r3, #0]
 800221c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002220:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002224:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8002226:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800222a:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8002234:	f107 0208 	add.w	r2, r7, #8
 8002238:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 800223c:	f7ff fed0 	bl	8001fe0 <JPEG_Bits_To_SizeCodes>
 8002240:	4603      	mov	r3, r0
 8002242:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 8002246:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800224e:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 8002252:	e048      	b.n	80022e6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 800225a:	e03d      	b.n	80022d8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800225c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002260:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800226a:	4413      	add	r3, r2
 800226c:	3310      	adds	r3, #16
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8002274:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8002278:	2b0b      	cmp	r3, #11
 800227a:	d901      	bls.n	8002280 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800227c:	2301      	movs	r3, #1
 800227e:	e032      	b.n	80022e6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8002280:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002284:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 8002288:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800228c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002290:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8002294:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8002298:	6819      	ldr	r1, [r3, #0]
 800229a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800229e:	3302      	adds	r3, #2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80022a6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80022aa:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 80022ae:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80022b2:	4413      	add	r3, r2
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b2d9      	uxtb	r1, r3
 80022ba:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 80022be:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 80022c8:	4413      	add	r3, r2
 80022ca:	460a      	mov	r2, r1
 80022cc:	701a      	strb	r2, [r3, #0]
      k++;
 80022ce:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80022d2:	3301      	adds	r3, #1
 80022d4:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 80022d8:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 80022dc:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d3bb      	bcc.n	800225c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b09a      	sub	sp, #104	@ 0x68
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	d106      	bne.n	8002318 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 8002312:	3318      	adds	r3, #24
 8002314:	663b      	str	r3, [r7, #96]	@ 0x60
 8002316:	e00f      	b.n	8002338 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	429a      	cmp	r2, r3
 8002324:	d106      	bne.n	8002334 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800232e:	3318      	adds	r3, #24
 8002330:	663b      	str	r3, [r7, #96]	@ 0x60
 8002332:	e001      	b.n	8002338 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e059      	b.n	80023ec <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d055      	beq.n	80023ea <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800233e:	f107 0314 	add.w	r3, r7, #20
 8002342:	4619      	mov	r1, r3
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	f7ff ff60 	bl	800220a <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800234a:	4603      	mov	r3, r0
 800234c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 8002350:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8002358:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800235c:	e046      	b.n	80023ec <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800235e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002360:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8002362:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002364:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002368:	601a      	str	r2, [r3, #0]
    addressDef++;
 800236a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800236c:	3304      	adds	r3, #4
 800236e:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 8002370:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002372:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 8002376:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8002378:	230c      	movs	r3, #12
 800237a:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 800237c:	e032      	b.n	80023e4 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800237e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002380:	3b01      	subs	r3, #1
 8002382:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 8002384:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002386:	3b04      	subs	r3, #4
 8002388:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800238a:	f107 0214 	add.w	r2, r7, #20
 800238e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002390:	4413      	add	r3, r2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800239a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800239c:	3302      	adds	r3, #2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	3368      	adds	r3, #104	@ 0x68
 80023a2:	443b      	add	r3, r7
 80023a4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	4313      	orrs	r3, r2
 80023ac:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 80023ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023b0:	3b01      	subs	r3, #1
 80023b2:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80023b4:	f107 0214 	add.w	r2, r7, #20
 80023b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023ba:	4413      	add	r3, r2
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80023c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023c6:	3302      	adds	r3, #2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	3368      	adds	r3, #104	@ 0x68
 80023cc:	443b      	add	r3, r7
 80023ce:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	4313      	orrs	r3, r2
 80023d6:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80023d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023da:	041a      	lsls	r2, r3, #16
 80023dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023de:	431a      	orrs	r2, r3
 80023e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023e2:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80023e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d8c9      	bhi.n	800237e <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3768      	adds	r7, #104	@ 0x68
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002400:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002404:	6018      	str	r0, [r3, #0]
 8002406:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800240a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800240e:	6019      	str	r1, [r3, #0]
 8002410:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002414:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002418:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800241a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800241e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800242a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800242e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d10c      	bne.n	8002452 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002438:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800243c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002448:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800244c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8002450:	e01d      	b.n	800248e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8002452:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002456:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8002462:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 8002466:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d10c      	bne.n	800248a <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8002470:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002474:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 8002480:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8002484:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8002488:	e001      	b.n	800248e <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e0a8      	b.n	80025e0 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800248e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002492:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80a0 	beq.w	80025de <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800249e:	f107 0214 	add.w	r2, r7, #20
 80024a2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80024a6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80024aa:	4611      	mov	r1, r2
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	f7ff fe0c 	bl	80020ca <JPEG_ACHuff_BitsVals_To_SizeCodes>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 80024b8:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 80024c0:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 80024c4:	e08c      	b.n	80025e0 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 80024c6:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80024ca:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80024d4:	e00e      	b.n	80024f4 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 80024d6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024da:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 80024de:	601a      	str	r2, [r3, #0]
      addressDef++;
 80024e0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80024e4:	3304      	adds	r3, #4
 80024e6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 80024ea:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80024ee:	3301      	adds	r3, #1
 80024f0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80024f4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d9ec      	bls.n	80024d6 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 80024fc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002500:	4a3a      	ldr	r2, [pc, #232]	@ (80025ec <JPEG_Set_HuffAC_Mem+0x1f8>)
 8002502:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002504:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002508:	3304      	adds	r3, #4
 800250a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 800250e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002512:	4a37      	ldr	r2, [pc, #220]	@ (80025f0 <JPEG_Set_HuffAC_Mem+0x1fc>)
 8002514:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002516:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800251a:	3304      	adds	r3, #4
 800251c:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 8002520:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002524:	4a33      	ldr	r2, [pc, #204]	@ (80025f4 <JPEG_Set_HuffAC_Mem+0x200>)
 8002526:	601a      	str	r2, [r3, #0]
    addressDef++;
 8002528:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800252c:	3304      	adds	r3, #4
 800252e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 8002532:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8002536:	4a30      	ldr	r2, [pc, #192]	@ (80025f8 <JPEG_Set_HuffAC_Mem+0x204>)
 8002538:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800253a:	23a2      	movs	r3, #162	@ 0xa2
 800253c:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 8002540:	e049      	b.n	80025d6 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8002542:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002546:	3b01      	subs	r3, #1
 8002548:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 800254c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002550:	3b04      	subs	r3, #4
 8002552:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002556:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800255a:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800255e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002562:	4413      	add	r3, r2
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800256c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002570:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 8002574:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002578:	3328      	adds	r3, #40	@ 0x28
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 8002588:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800258c:	3b01      	subs	r3, #1
 800258e:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8002592:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 8002596:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800259a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800259e:	4413      	add	r3, r2
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80025a8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 80025ac:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 80025b0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80025b4:	3328      	adds	r3, #40	@ 0x28
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80025c4:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80025c8:	041a      	lsls	r2, r3, #16
 80025ca:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 80025ce:	431a      	orrs	r2, r3
 80025d0:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80025d4:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 80025d6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d8b1      	bhi.n	8002542 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	0fd10fd0 	.word	0x0fd10fd0
 80025f0:	0fd30fd2 	.word	0x0fd30fd2
 80025f4:	0fd50fd4 	.word	0x0fd50fd4
 80025f8:	0fd70fd6 	.word	0x0fd70fd6

080025fc <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f84d 	bl	80026a4 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8002612:	461a      	mov	r2, r3
 8002614:	491f      	ldr	r1, [pc, #124]	@ (8002694 <JPEG_Set_HuffEnc_Mem+0x98>)
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff feec 	bl	80023f4 <JPEG_Set_HuffAC_Mem>
 800261c:	4603      	mov	r3, r0
 800261e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	e030      	b.n	800268c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8002632:	461a      	mov	r2, r3
 8002634:	4918      	ldr	r1, [pc, #96]	@ (8002698 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff fedc 	bl	80023f4 <JPEG_Set_HuffAC_Mem>
 800263c:	4603      	mov	r3, r0
 800263e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	e020      	b.n	800268c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8002652:	461a      	mov	r2, r3
 8002654:	4911      	ldr	r1, [pc, #68]	@ (800269c <JPEG_Set_HuffEnc_Mem+0xa0>)
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fe4a 	bl	80022f0 <JPEG_Set_HuffDC_Mem>
 800265c:	4603      	mov	r3, r0
 800265e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	e010      	b.n	800268c <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8002672:	461a      	mov	r2, r3
 8002674:	490a      	ldr	r1, [pc, #40]	@ (80026a0 <JPEG_Set_HuffEnc_Mem+0xa4>)
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff fe3a 	bl	80022f0 <JPEG_Set_HuffDC_Mem>
 800267c:	4603      	mov	r3, r0
 800267e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	e000      	b.n	800268c <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	08010c04 	.word	0x08010c04
 8002698:	08010cb8 	.word	0x08010cb8
 800269c:	08010bcc 	.word	0x08010bcc
 80026a0:	08010be8 	.word	0x08010be8

080026a4 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b08b      	sub	sp, #44	@ 0x2c
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 80026ac:	4b80      	ldr	r3, [pc, #512]	@ (80028b0 <JPEG_Set_Huff_DHTMem+0x20c>)
 80026ae:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 80026b0:	4b80      	ldr	r3, [pc, #512]	@ (80028b4 <JPEG_Set_Huff_DHTMem+0x210>)
 80026b2:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 80026b4:	4b80      	ldr	r3, [pc, #512]	@ (80028b8 <JPEG_Set_Huff_DHTMem+0x214>)
 80026b6:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 80026b8:	4b80      	ldr	r3, [pc, #512]	@ (80028bc <JPEG_Set_Huff_DHTMem+0x218>)
 80026ba:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80026c4:	330c      	adds	r3, #12
 80026c6:	623b      	str	r3, [r7, #32]
  index = 16;
 80026c8:	2310      	movs	r3, #16
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80026cc:	e01d      	b.n	800270a <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	3b01      	subs	r3, #1
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	5cd3      	ldrb	r3, [r2, r3]
 80026d6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	3b02      	subs	r3, #2
 80026dc:	6979      	ldr	r1, [r7, #20]
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80026e2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	3b03      	subs	r3, #3
 80026e8:	6979      	ldr	r1, [r7, #20]
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80026ee:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 80026f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f2:	3a04      	subs	r2, #4
 80026f4:	6979      	ldr	r1, [r7, #20]
 80026f6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80026f8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	601a      	str	r2, [r3, #0]
    address--;
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	3b04      	subs	r3, #4
 8002702:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	3b04      	subs	r3, #4
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	2b03      	cmp	r3, #3
 800270e:	d8de      	bhi.n	80026ce <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002718:	3318      	adds	r3, #24
 800271a:	623b      	str	r3, [r7, #32]
  index = 12;
 800271c:	230c      	movs	r3, #12
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002720:	e021      	b.n	8002766 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	3b01      	subs	r3, #1
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4413      	add	r3, r2
 800272a:	7c1b      	ldrb	r3, [r3, #16]
 800272c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	3b02      	subs	r3, #2
 8002732:	6979      	ldr	r1, [r7, #20]
 8002734:	440b      	add	r3, r1
 8002736:	7c1b      	ldrb	r3, [r3, #16]
 8002738:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800273a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	3b03      	subs	r3, #3
 8002740:	6979      	ldr	r1, [r7, #20]
 8002742:	440b      	add	r3, r1
 8002744:	7c1b      	ldrb	r3, [r3, #16]
 8002746:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002748:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800274a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800274c:	3a04      	subs	r2, #4
 800274e:	6979      	ldr	r1, [r7, #20]
 8002750:	440a      	add	r2, r1
 8002752:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002754:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	601a      	str	r2, [r3, #0]
    address--;
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	3b04      	subs	r3, #4
 800275e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	3b04      	subs	r3, #4
 8002764:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	2b03      	cmp	r3, #3
 800276a:	d8da      	bhi.n	8002722 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002774:	3328      	adds	r3, #40	@ 0x28
 8002776:	623b      	str	r3, [r7, #32]
  index = 16;
 8002778:	2310      	movs	r3, #16
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800277c:	e01d      	b.n	80027ba <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	3b01      	subs	r3, #1
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	5cd3      	ldrb	r3, [r2, r3]
 8002786:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8002788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278a:	3b02      	subs	r3, #2
 800278c:	69f9      	ldr	r1, [r7, #28]
 800278e:	5ccb      	ldrb	r3, [r1, r3]
 8002790:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8002792:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	3b03      	subs	r3, #3
 8002798:	69f9      	ldr	r1, [r7, #28]
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800279e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80027a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027a2:	3a04      	subs	r2, #4
 80027a4:	69f9      	ldr	r1, [r7, #28]
 80027a6:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80027a8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	601a      	str	r2, [r3, #0]
    address--;
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	3b04      	subs	r3, #4
 80027b2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	3b04      	subs	r3, #4
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d8de      	bhi.n	800277e <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80027c8:	33cc      	adds	r3, #204	@ 0xcc
 80027ca:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b3b      	ldr	r3, [pc, #236]	@ (80028c0 <JPEG_Set_Huff_DHTMem+0x21c>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 80027dc:	021a      	lsls	r2, r3, #8
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
  *address = value;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	3b04      	subs	r3, #4
 80027f6:	623b      	str	r3, [r7, #32]
  index = 160;
 80027f8:	23a0      	movs	r3, #160	@ 0xa0
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80027fc:	e021      	b.n	8002842 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	3b01      	subs	r3, #1
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	4413      	add	r3, r2
 8002806:	7c1b      	ldrb	r3, [r3, #16]
 8002808:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	3b02      	subs	r3, #2
 800280e:	69f9      	ldr	r1, [r7, #28]
 8002810:	440b      	add	r3, r1
 8002812:	7c1b      	ldrb	r3, [r3, #16]
 8002814:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002816:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	3b03      	subs	r3, #3
 800281c:	69f9      	ldr	r1, [r7, #28]
 800281e:	440b      	add	r3, r1
 8002820:	7c1b      	ldrb	r3, [r3, #16]
 8002822:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8002824:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8002826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002828:	3a04      	subs	r2, #4
 800282a:	69f9      	ldr	r1, [r7, #28]
 800282c:	440a      	add	r2, r1
 800282e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8002830:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	601a      	str	r2, [r3, #0]
    address--;
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	3b04      	subs	r3, #4
 800283a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	3b04      	subs	r3, #4
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	2b03      	cmp	r3, #3
 8002846:	d8da      	bhi.n	80027fe <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002850:	33cc      	adds	r3, #204	@ 0xcc
 8002852:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	b29b      	uxth	r3, r3
 800285a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	785b      	ldrb	r3, [r3, #1]
 8002860:	061a      	lsls	r2, r3, #24
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	431a      	orrs	r2, r3
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800287e:	33dc      	adds	r3, #220	@ 0xdc
 8002880:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <JPEG_Set_Huff_DHTMem+0x21c>)
 8002888:	4013      	ands	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	7bdb      	ldrb	r3, [r3, #15]
 8002890:	021a      	lsls	r2, r3, #8
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4313      	orrs	r3, r2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	7b92      	ldrb	r2, [r2, #14]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	3b04      	subs	r3, #4
 80028a8:	623b      	str	r3, [r7, #32]
  index = 12;
 80028aa:	230c      	movs	r3, #12
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80028ae:	e027      	b.n	8002900 <JPEG_Set_Huff_DHTMem+0x25c>
 80028b0:	08010c04 	.word	0x08010c04
 80028b4:	08010cb8 	.word	0x08010cb8
 80028b8:	08010bcc 	.word	0x08010bcc
 80028bc:	08010be8 	.word	0x08010be8
 80028c0:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	3301      	adds	r3, #1
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80028ce:	6939      	ldr	r1, [r7, #16]
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	440b      	add	r3, r1
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80028d8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	3b01      	subs	r3, #1
 80028de:	6939      	ldr	r1, [r7, #16]
 80028e0:	5ccb      	ldrb	r3, [r1, r3]
 80028e2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 80028e4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 80028e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e8:	3a02      	subs	r2, #2
 80028ea:	6939      	ldr	r1, [r7, #16]
 80028ec:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80028ee:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	601a      	str	r2, [r3, #0]
    address--;
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	3b04      	subs	r3, #4
 80028f8:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	3b04      	subs	r3, #4
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	2b03      	cmp	r3, #3
 8002904:	d8de      	bhi.n	80028c4 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800290e:	33dc      	adds	r3, #220	@ 0xdc
 8002910:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	7c5b      	ldrb	r3, [r3, #17]
 800291e:	061a      	lsls	r2, r3, #24
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	431a      	orrs	r2, r3
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	7c1b      	ldrb	r3, [r3, #16]
 8002928:	041b      	lsls	r3, r3, #16
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800293c:	33e8      	adds	r3, #232	@ 0xe8
 800293e:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b6d      	ldr	r3, [pc, #436]	@ (8002afc <JPEG_Set_Huff_DHTMem+0x458>)
 8002946:	4013      	ands	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	7edb      	ldrb	r3, [r3, #27]
 800294e:	021a      	lsls	r2, r3, #8
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	7e92      	ldrb	r2, [r2, #26]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	3b04      	subs	r3, #4
 8002966:	623b      	str	r3, [r7, #32]
  index = 8;
 8002968:	2308      	movs	r3, #8
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800296c:	e021      	b.n	80029b2 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	3301      	adds	r3, #1
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	7c1b      	ldrb	r3, [r3, #16]
 8002978:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800297a:	6939      	ldr	r1, [r7, #16]
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	440b      	add	r3, r1
 8002980:	3310      	adds	r3, #16
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002986:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	3b01      	subs	r3, #1
 800298c:	6939      	ldr	r1, [r7, #16]
 800298e:	440b      	add	r3, r1
 8002990:	7c1b      	ldrb	r3, [r3, #16]
 8002992:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8002994:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8002996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002998:	3a02      	subs	r2, #2
 800299a:	6939      	ldr	r1, [r7, #16]
 800299c:	440a      	add	r2, r1
 800299e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80029a0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	601a      	str	r2, [r3, #0]
    address--;
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	3b04      	subs	r3, #4
 80029aa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	3b04      	subs	r3, #4
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d8da      	bhi.n	800296e <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80029c0:	33e8      	adds	r3, #232	@ 0xe8
 80029c2:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	785b      	ldrb	r3, [r3, #1]
 80029d0:	061a      	lsls	r2, r3, #24
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	4313      	orrs	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
  *address = value;
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80029ee:	33f8      	adds	r3, #248	@ 0xf8
 80029f0:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b41      	ldr	r3, [pc, #260]	@ (8002afc <JPEG_Set_Huff_DHTMem+0x458>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	7bdb      	ldrb	r3, [r3, #15]
 8002a00:	021a      	lsls	r2, r3, #8
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	7b92      	ldrb	r2, [r2, #14]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  *address = value;
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	3b04      	subs	r3, #4
 8002a18:	623b      	str	r3, [r7, #32]
  index = 12;
 8002a1a:	230c      	movs	r3, #12
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a1e:	e01d      	b.n	8002a5c <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	3301      	adds	r3, #1
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002a2a:	69b9      	ldr	r1, [r7, #24]
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	440b      	add	r3, r1
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002a34:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	69b9      	ldr	r1, [r7, #24]
 8002a3c:	5ccb      	ldrb	r3, [r1, r3]
 8002a3e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8002a40:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 8002a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a44:	3a02      	subs	r2, #2
 8002a46:	69b9      	ldr	r1, [r7, #24]
 8002a48:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8002a4a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	601a      	str	r2, [r3, #0]
    address--;
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	3b04      	subs	r3, #4
 8002a54:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	3b04      	subs	r3, #4
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d8de      	bhi.n	8002a20 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002a6a:	33f8      	adds	r3, #248	@ 0xf8
 8002a6c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	7c5b      	ldrb	r3, [r3, #17]
 8002a7a:	061a      	lsls	r2, r3, #24
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	7c1b      	ldrb	r3, [r3, #16]
 8002a84:	041b      	lsls	r3, r3, #16
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8002a98:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8002a9c:	623b      	str	r3, [r7, #32]
  index = 160;
 8002a9e:	23a0      	movs	r3, #160	@ 0xa0
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002aa2:	e021      	b.n	8002ae8 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4413      	add	r3, r2
 8002aac:	7c1b      	ldrb	r3, [r3, #16]
 8002aae:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002ab0:	69b9      	ldr	r1, [r7, #24]
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3310      	adds	r3, #16
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002abc:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	69b9      	ldr	r1, [r7, #24]
 8002ac4:	440b      	add	r3, r1
 8002ac6:	7c1b      	ldrb	r3, [r3, #16]
 8002ac8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8002aca:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8002acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ace:	3a02      	subs	r2, #2
 8002ad0:	69b9      	ldr	r1, [r7, #24]
 8002ad2:	440a      	add	r2, r1
 8002ad4:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8002ad6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	601a      	str	r2, [r3, #0]
    address--;
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	3b04      	subs	r3, #4
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d8da      	bhi.n	8002aa4 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8002aee:	bf00      	nop
 8002af0:	bf00      	nop
 8002af2:	372c      	adds	r7, #44	@ 0x2c
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	ffff0000 	.word	0xffff0000

08002b00 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d108      	bne.n	8002b32 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0208 	orr.w	r2, r2, #8
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	e007      	b.n	8002b42 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0208 	bic.w	r2, r2, #8
 8002b40:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002b60:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b70:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b80:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002b90:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0201 	orr.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba6:	f003 030c 	and.w	r3, r3, #12
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d108      	bne.n	8002bc0 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 8002bbc:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8002bbe:	e00d      	b.n	8002bdc <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	d107      	bne.n	8002bdc <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002bda:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d125      	bne.n	8002c48 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d01e      	beq.n	8002c48 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff f841 	bl	8001c98 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f009 fb42 	bl	800c2ac <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c36:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c46:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d116      	bne.n	8002c82 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d004      	beq.n	8002c6c <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002c62:	2108      	movs	r1, #8
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f988 	bl	8002f7a <JPEG_ReadInputData>
 8002c6a:	e00a      	b.n	8002c82 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f97c 	bl	8002f7a <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d116      	bne.n	8002cbc <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d004      	beq.n	8002ca6 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8002c9c:	2108      	movs	r1, #8
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f864 	bl	8002d6c <JPEG_StoreOutputData>
 8002ca4:	e00a      	b.n	8002cbc <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f858 	bl	8002d6c <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d14b      	bne.n	8002d62 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d107      	bne.n	8002cf6 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8002cf4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8002d04:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69d9      	ldr	r1, [r3, #28]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	461a      	mov	r2, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f009 fb11 	bl	800c340 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d103      	bne.n	8002d58 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f009 fb19 	bl	800c388 <HAL_JPEG_DecodeCpltCallback>
 8002d56:	e002      	b.n	8002d5e <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff f911 	bl	8001f80 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d34b      	bcc.n	8002e20 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	e031      	b.n	8002df2 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d94:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	4413      	add	r3, r2
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	0a19      	lsrs	r1, r3, #8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	3301      	adds	r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	b2ca      	uxtb	r2, r1
 8002db8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	0c19      	lsrs	r1, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	b2ca      	uxtb	r2, r1
 8002dcc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	0e19      	lsrs	r1, r3, #24
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dda:	3303      	adds	r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	b2ca      	uxtb	r2, r1
 8002de0:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de6:	1d1a      	adds	r2, r3, #4
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	3301      	adds	r3, #1
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d3c9      	bcc.n	8002d8e <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	429a      	cmp	r2, r3
 8002e04:	f040 80b5 	bne.w	8002f72 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69d9      	ldr	r1, [r3, #28]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	461a      	mov	r2, r3
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f009 fa94 	bl	800c340 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e1e:	e0a8      	b.n	8002f72 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	f240 80a2 	bls.w	8002f72 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	089b      	lsrs	r3, r3, #2
 8002e3a:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	e031      	b.n	8002ea6 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e48:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	4413      	add	r3, r2
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	0a19      	lsrs	r1, r3, #8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	3301      	adds	r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	b2ca      	uxtb	r2, r1
 8002e6c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	0c19      	lsrs	r1, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	b2ca      	uxtb	r2, r1
 8002e80:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	0e19      	lsrs	r1, r3, #24
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69da      	ldr	r2, [r3, #28]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	3303      	adds	r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	b2ca      	uxtb	r2, r1
 8002e94:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9a:	1d1a      	adds	r2, r3, #4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d3c9      	bcc.n	8002e42 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d10b      	bne.n	8002ed2 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69d9      	ldr	r1, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f009 fa3b 	bl	800c340 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002ed0:	e04f      	b.n	8002f72 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee4:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e015      	b.n	8002f18 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	fa22 f103 	lsr.w	r1, r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	4413      	add	r3, r2
 8002f04:	b2ca      	uxtb	r2, r1
 8002f06:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	3301      	adds	r3, #1
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d3e5      	bcc.n	8002eec <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69d9      	ldr	r1, [r3, #28]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f009 fa08 	bl	800c340 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f1c3 0304 	rsb	r3, r3, #4
 8002f3c:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e013      	b.n	8002f6c <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	fa22 f103 	lsr.w	r1, r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	4413      	add	r3, r2
 8002f58:	b2ca      	uxtb	r2, r1
 8002f5a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d9e8      	bls.n	8002f44 <JPEG_StoreOutputData+0x1d8>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b088      	sub	sp, #32
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <JPEG_ReadInputData+0x1c>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d104      	bne.n	8002fa0 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8002f96:	2101      	movs	r1, #1
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7fe ff75 	bl	8001e88 <HAL_JPEG_Pause>
 8002f9e:	e028      	b.n	8002ff2 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d906      	bls.n	8002fba <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	61fb      	str	r3, [r7, #28]
 8002fb8:	e01b      	b.n	8002ff2 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d115      	bne.n	8002ff2 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f009 f979 	bl	800c2c4 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d905      	bls.n	8002fe6 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fde:	f023 0203 	bic.w	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 809f 	bne.w	800313e <JPEG_ReadInputData+0x1c4>
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 809b 	beq.w	800313e <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	089b      	lsrs	r3, r3, #2
 800300c:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d335      	bcc.n	8003082 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 8003016:	2300      	movs	r3, #0
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	e02d      	b.n	8003078 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4413      	add	r3, r2
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699a      	ldr	r2, [r3, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3301      	adds	r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800303c:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6999      	ldr	r1, [r3, #24]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	3302      	adds	r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800304e:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3303      	adds	r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8003064:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003066:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	1d1a      	adds	r2, r3, #4
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	3301      	adds	r3, #1
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d3cd      	bcc.n	800301c <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 8003080:	e05d      	b.n	800313e <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d035      	beq.n	80030f4 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	e02d      	b.n	80030ea <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699a      	ldr	r2, [r3, #24]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699a      	ldr	r2, [r3, #24]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3301      	adds	r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80030ae:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6999      	ldr	r1, [r3, #24]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	3302      	adds	r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80030c0:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699a      	ldr	r2, [r3, #24]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3303      	adds	r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80030d6:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80030d8:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	1d1a      	adds	r2, r3, #4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	3301      	adds	r3, #1
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d3cd      	bcc.n	800308e <JPEG_ReadInputData+0x114>
}
 80030f2:	e024      	b.n	800313e <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	e017      	b.n	800312e <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699a      	ldr	r2, [r3, #24]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4413      	add	r3, r2
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	3301      	adds	r3, #1
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	429a      	cmp	r2, r3
 8003134:	d3e3      	bcc.n	80030fe <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800313e:	bf00      	nop
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b087      	sub	sp, #28
 800314c:	af02      	add	r7, sp, #8
 800314e:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003156:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315e:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	429a      	cmp	r2, r3
 8003168:	d804      	bhi.n	8003174 <JPEG_DMA_StartProcess+0x2c>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	429a      	cmp	r2, r3
 8003172:	d901      	bls.n	8003178 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e074      	b.n	8003262 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317c:	4a3b      	ldr	r2, [pc, #236]	@ (800326c <JPEG_DMA_StartProcess+0x124>)
 800317e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003184:	4a3a      	ldr	r2, [pc, #232]	@ (8003270 <JPEG_DMA_StartProcess+0x128>)
 8003186:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800318c:	4a39      	ldr	r2, [pc, #228]	@ (8003274 <JPEG_DMA_StartProcess+0x12c>)
 800318e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003194:	4a36      	ldr	r2, [pc, #216]	@ (8003270 <JPEG_DMA_StartProcess+0x128>)
 8003196:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319c:	4a36      	ldr	r2, [pc, #216]	@ (8003278 <JPEG_DMA_StartProcess+0x130>)
 800319e:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <JPEG_DMA_StartProcess+0x64>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b0:	f043 0204 	orr.w	r2, r3, #4
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e052      	b.n	8003262 <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c4:	68f9      	ldr	r1, [r7, #12]
 80031c6:	fbb3 f1f1 	udiv	r1, r3, r1
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	fb00 f101 	mul.w	r1, r0, r1
 80031d0:	1a5b      	subs	r3, r3, r1
 80031d2:	1ad2      	subs	r2, r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	fbb3 f1f1 	udiv	r1, r3, r1
 80031e6:	68b8      	ldr	r0, [r7, #8]
 80031e8:	fb00 f101 	mul.w	r1, r0, r1
 80031ec:	1a5b      	subs	r3, r3, r1
 80031ee:	1ad2      	subs	r2, r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3344      	adds	r3, #68	@ 0x44
 80031fe:	4619      	mov	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	461c      	mov	r4, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320a:	2201      	movs	r2, #1
 800320c:	9200      	str	r2, [sp, #0]
 800320e:	4622      	mov	r2, r4
 8003210:	f000 fbe8 	bl	80039e4 <HAL_MDMA_Start_IT>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321e:	f043 0204 	orr.w	r2, r3, #4
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e01b      	b.n	8003262 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	4619      	mov	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3340      	adds	r3, #64	@ 0x40
 800323a:	461c      	mov	r4, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003240:	2201      	movs	r2, #1
 8003242:	9200      	str	r2, [sp, #0]
 8003244:	4622      	mov	r2, r4
 8003246:	f000 fbcd 	bl	80039e4 <HAL_MDMA_Start_IT>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d007      	beq.n	8003260 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003254:	f043 0204 	orr.w	r2, r3, #4
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	bd90      	pop	{r4, r7, pc}
 800326a:	bf00      	nop
 800326c:	0800357b 	.word	0x0800357b
 8003270:	08003769 	.word	0x08003769
 8003274:	080036a7 	.word	0x080036a7
 8003278:	080037b9 	.word	0x080037b9

0800327c <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d125      	bne.n	80032dc <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01e      	beq.n	80032dc <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3304      	adds	r3, #4
 80032a2:	4619      	mov	r1, r3
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7fe fcf7 	bl	8001c98 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	4619      	mov	r1, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f008 fff8 	bl	800c2ac <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032ca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032da:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d039      	beq.n	800335e <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ee:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003314:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003324:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d104      	bne.n	800333e <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fbd4 	bl	8003ae6 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d105      	bne.n	8003358 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fbc8 	bl	8003ae6 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 8003356:	e002      	b.n	800335e <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f804 	bl	8003366 <JPEG_DMA_EndProcess>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800337e:	1ad2      	subs	r2, r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	429a      	cmp	r2, r3
 800338e:	d10a      	bne.n	80033a6 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69d9      	ldr	r1, [r3, #28]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	461a      	mov	r2, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f008 ffd0 	bl	800c340 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d134      	bne.n	800341e <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69d9      	ldr	r1, [r3, #28]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	461a      	mov	r2, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f008 ffba 	bl	800c340 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e6:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ec:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d103      	bne.n	8003416 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f008 ffba 	bl	800c388 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8003414:	e00c      	b.n	8003430 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fe fdb2 	bl	8001f80 <HAL_JPEG_EncodeCpltCallback>
}
 800341c:	e008      	b.n	8003430 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f804 	bl	8003438 <JPEG_DMA_PollResidualData>
}
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8003440:	2310      	movs	r3, #16
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e04f      	b.n	80034e6 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d146      	bne.n	80034e0 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2b00      	cmp	r3, #0
 800345e:	d03f      	beq.n	80034e0 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69da      	ldr	r2, [r3, #28]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	4413      	add	r3, r2
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	0a19      	lsrs	r1, r3, #8
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69da      	ldr	r2, [r3, #28]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	3301      	adds	r3, #1
 8003486:	4413      	add	r3, r2
 8003488:	b2ca      	uxtb	r2, r1
 800348a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	0c19      	lsrs	r1, r3, #16
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	3302      	adds	r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	b2ca      	uxtb	r2, r1
 800349e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	0e19      	lsrs	r1, r3, #24
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	3303      	adds	r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	b2ca      	uxtb	r2, r1
 80034b2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	1d1a      	adds	r2, r3, #4
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d10a      	bne.n	80034e0 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69d9      	ldr	r1, [r3, #28]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	461a      	mov	r2, r3
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f008 ff33 	bl	800c340 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ac      	bne.n	8003446 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f0:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f8:	f003 0310 	and.w	r3, r3, #16
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d004      	beq.n	800350a <JPEG_DMA_PollResidualData+0xd2>
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d133      	bne.n	8003572 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0201 	bic.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69d9      	ldr	r1, [r3, #28]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	461a      	mov	r2, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f008 ff07 	bl	800c340 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353c:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003542:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d103      	bne.n	800356c <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f008 ff0f 	bl	800c388 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800356a:	e002      	b.n	8003572 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7fe fd07 	bl	8001f80 <HAL_JPEG_EncodeCpltCallback>
}
 8003572:	bf00      	nop
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800357a:	b590      	push	{r4, r7, lr}
 800357c:	b087      	sub	sp, #28
 800357e:	af02      	add	r7, sp, #8
 8003580:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003596:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800359c:	f248 030c 	movw	r3, #32780	@ 0x800c
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b0c      	cmp	r3, #12
 80035a4:	d17c      	bne.n	80036a0 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80035bc:	1ad2      	subs	r2, r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4619      	mov	r1, r3
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f008 fe7b 	bl	800c2c4 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d81f      	bhi.n	8003618 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10d      	bne.n	80035fa <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e2:	f043 0204 	orr.w	r2, r3, #4
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2206      	movs	r2, #6
 80035ee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f008 febe 	bl	800c374 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 80035f8:	e052      	b.n	80036a0 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	fbb3 f1f1 	udiv	r1, r3, r1
 8003608:	68b8      	ldr	r0, [r7, #8]
 800360a:	fb00 f101 	mul.w	r1, r0, r1
 800360e:	1a5b      	subs	r3, r3, r1
 8003610:	1ad2      	subs	r2, r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	629a      	str	r2, [r3, #40]	@ 0x28
 8003616:	e010      	b.n	800363a <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00c      	beq.n	800363a <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d006      	beq.n	800363a <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	3301      	adds	r3, #1
 8003634:	009a      	lsls	r2, r3, #2
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d124      	bne.n	8003690 <JPEG_MDMAInCpltCallback+0x116>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364a:	2b00      	cmp	r3, #0
 800364c:	d020      	beq.n	8003690 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	4619      	mov	r1, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3340      	adds	r3, #64	@ 0x40
 800365e:	461c      	mov	r4, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003664:	2201      	movs	r2, #1
 8003666:	9200      	str	r2, [sp, #0]
 8003668:	4622      	mov	r2, r4
 800366a:	f000 f9bb 	bl	80039e4 <HAL_MDMA_Start_IT>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003678:	f043 0204 	orr.w	r2, r3, #4
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2206      	movs	r2, #6
 8003684:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f008 fe73 	bl	800c374 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800368e:	e007      	b.n	80036a0 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd90      	pop	{r4, r7, pc}

080036a6 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 80036a6:	b590      	push	{r4, r7, lr}
 80036a8:	b087      	sub	sp, #28
 80036aa:	af02      	add	r7, sp, #8
 80036ac:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80036c2:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036c8:	f248 030c 	movw	r3, #32780	@ 0x800c
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d147      	bne.n	8003762 <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d138      	bne.n	8003752 <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80036ee:	1ad2      	subs	r2, r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	69d9      	ldr	r1, [r3, #28]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	461a      	mov	r2, r3
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f008 fe1e 	bl	800c340 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d120      	bne.n	8003752 <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3344      	adds	r3, #68	@ 0x44
 800371a:	4619      	mov	r1, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	461c      	mov	r4, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003726:	2201      	movs	r2, #1
 8003728:	9200      	str	r2, [sp, #0]
 800372a:	4622      	mov	r2, r4
 800372c:	f000 f95a 	bl	80039e4 <HAL_MDMA_Start_IT>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00d      	beq.n	8003752 <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800373a:	f043 0204 	orr.w	r2, r3, #4
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2206      	movs	r2, #6
 8003746:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f008 fe12 	bl	800c374 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8003750:	e007      	b.n	8003762 <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8003760:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	bd90      	pop	{r4, r7, pc}

08003768 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8003794:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a2:	f043 0204 	orr.w	r2, r3, #4
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f008 fde2 	bl	800c374 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 80037b0:	bf00      	nop
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c4:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7ff fdc7 	bl	8003366 <JPEG_DMA_EndProcess>
  }
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b08b      	sub	sp, #44	@ 0x2c
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3350      	adds	r3, #80	@ 0x50
 80037f2:	61bb      	str	r3, [r7, #24]

  i = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80037f8:	e042      	b.n	8003880 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 8003800:	2300      	movs	r3, #0
 8003802:	61fb      	str	r3, [r7, #28]
 8003804:	e033      	b.n	800386e <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d103      	bne.n	8003822 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800381a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381c:	3364      	adds	r3, #100	@ 0x64
 800381e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003820:	e022      	b.n	8003868 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2264      	movs	r2, #100	@ 0x64
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800382e:	6a38      	ldr	r0, [r7, #32]
 8003830:	69f9      	ldr	r1, [r7, #28]
 8003832:	4401      	add	r1, r0
 8003834:	4818      	ldr	r0, [pc, #96]	@ (8003898 <JPEG_GetQuality+0xb8>)
 8003836:	5c41      	ldrb	r1, [r0, r1]
 8003838:	440a      	add	r2, r1
 800383a:	7812      	ldrb	r2, [r2, #0]
 800383c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b64      	cmp	r3, #100	@ 0x64
 8003846:	d807      	bhi.n	8003858 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003852:	4413      	add	r3, r2
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24
 8003856:	e007      	b.n	8003868 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 8003858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003864:	4413      	add	r3, r2
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	3301      	adds	r3, #1
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d9c8      	bls.n	8003806 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	3304      	adds	r3, #4
 8003878:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	3304      	adds	r3, #4
 800387e:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	2b3c      	cmp	r3, #60	@ 0x3c
 8003884:	d9b9      	bls.n	80037fa <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	099b      	lsrs	r3, r3, #6
}
 800388a:	4618      	mov	r0, r3
 800388c:	372c      	adds	r7, #44	@ 0x2c
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	08010d6c 	.word	0x08010d6c

0800389c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7fd fada 	bl	8000e5c <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e03b      	b.n	800392c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80038d4:	e00f      	b.n	80038f6 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80038d6:	f7fd fac1 	bl	8000e5c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b05      	cmp	r3, #5
 80038e2:	d908      	bls.n	80038f6 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2240      	movs	r2, #64	@ 0x40
 80038e8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2203      	movs	r2, #3
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e01a      	b.n	800392c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e8      	bne.n	80038d6 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fad9 	bl	8003ebc <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e048      	b.n	80039d8 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0201 	bic.w	r2, r2, #1
 8003954:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2200      	movs	r2, #0
 800395c:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2200      	movs	r2, #0
 800396c:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2200      	movs	r2, #0
 800397c:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2200      	movs	r2, #0
 800398c:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2200      	movs	r2, #0
 8003994:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2200      	movs	r2, #0
 800399c:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2200      	movs	r2, #0
 80039a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	221f      	movs	r2, #31
 80039ac:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e070      	b.n	8003ade <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_MDMA_Start_IT+0x26>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e069      	b.n	8003ade <HAL_MDMA_Start_IT+0xfa>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d158      	bne.n	8003ad0 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0201 	bic.w	r2, r2, #1
 8003a3a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f9c8 	bl	8003ddc <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0206 	orr.w	r2, r2, #6
 8003a5a:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0210 	orr.w	r2, r2, #16
 8003a72:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0208 	orr.w	r2, r2, #8
 8003a8a:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0220 	orr.w	r2, r2, #32
 8003aa2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003abc:	d10e      	bne.n	8003adc <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	e005      	b.n	8003adc <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e000      	b.n	8003ade <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e017      	b.n	8003b28 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d004      	beq.n	8003b0e <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2280      	movs	r2, #128	@ 0x80
 8003b08:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e00c      	b.n	8003b28 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2204      	movs	r2, #4
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0201 	bic.w	r2, r2, #1
 8003b24:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b40:	4b91      	ldr	r3, [pc, #580]	@ (8003d88 <HAL_MDMA_IRQHandler+0x254>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a91      	ldr	r2, [pc, #580]	@ (8003d8c <HAL_MDMA_IRQHandler+0x258>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	0a9b      	lsrs	r3, r3, #10
 8003b4c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	4b8e      	ldr	r3, [pc, #568]	@ (8003d90 <HAL_MDMA_IRQHandler+0x25c>)
 8003b56:	4413      	add	r3, r2
 8003b58:	099b      	lsrs	r3, r3, #6
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	2201      	movs	r2, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8003b66:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 812d 	beq.w	8003dd0 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d054      	beq.n	8003c2e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d04d      	beq.n	8003c2e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0202 	bic.w	r2, r2, #2
 8003ba0:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d106      	bne.n	8003bc2 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bb8:	f043 0201 	orr.w	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	669a      	str	r2, [r3, #104]	@ 0x68
 8003bc0:	e005      	b.n	8003bce <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bc6:	f043 0202 	orr.w	r2, r3, #2
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bdc:	f043 0204 	orr.w	r2, r3, #4
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bf2:	f043 0208 	orr.w	r2, r3, #8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c08:	f043 0210 	orr.w	r2, r3, #16
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d005      	beq.n	8003c26 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c1e:	f043 0220 	orr.w	r2, r3, #32
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d012      	beq.n	8003c62 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2210      	movs	r2, #16
 8003c50:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d012      	beq.n	8003c96 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2208      	movs	r2, #8
 8003c84:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d012      	beq.n	8003cca <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d039      	beq.n	8003d4c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d032      	beq.n	8003d4c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8003cf4:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d110      	bne.n	8003d24 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d05c      	beq.n	8003dd4 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4798      	blx	r3
        }
        return;
 8003d22:	e057      	b.n	8003dd4 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d040      	beq.n	8003dd6 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2204      	movs	r2, #4
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d30d      	bcc.n	8003d94 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f2      	bne.n	8003d6c <HAL_MDMA_IRQHandler+0x238>
 8003d86:	e006      	b.n	8003d96 <HAL_MDMA_IRQHandler+0x262>
 8003d88:	20000000 	.word	0x20000000
 8003d8c:	1b4e81b5 	.word	0x1b4e81b5
 8003d90:	adffffc0 	.word	0xadffffc0
        break;
 8003d94:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2203      	movs	r2, #3
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003db4:	e003      	b.n	8003dbe <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d007      	beq.n	8003dd6 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	4798      	blx	r3
 8003dce:	e002      	b.n	8003dd6 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 8003dd0:	bf00      	nop
 8003dd2:	e000      	b.n	8003dd6 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 8003dd4:	bf00      	nop
    }
  }
}
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	4b31      	ldr	r3, [pc, #196]	@ (8003eb8 <MDMA_SetConfig+0xdc>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	f3c2 0110 	ubfx	r1, r2, #0, #17
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	051a      	lsls	r2, r3, #20
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	221f      	movs	r2, #31
 8003e20:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003e38:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e40:	d002      	beq.n	8003e48 <MDMA_SetConfig+0x6c>
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d108      	bne.n	8003e5a <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e56:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e58:	e007      	b.n	8003e6a <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003e68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003e70:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e78:	d002      	beq.n	8003e80 <MDMA_SetConfig+0xa4>
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d108      	bne.n	8003e92 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003e8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e90:	e007      	b.n	8003ea2 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003ea0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003eac:	bf00      	nop
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	fffe0000 	.word	0xfffe0000

08003ebc <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68d9      	ldr	r1, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003ee2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8003eee:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8003efa:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f00:	3b01      	subs	r3, #1
 8003f02:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8003f04:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8003f10:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8003f12:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f1c:	d107      	bne.n	8003f2e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8003f2c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	da11      	bge.n	8003f62 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003f4c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f52:	425b      	negs	r3, r3
 8003f54:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	b292      	uxth	r2, r2
 8003f5e:	621a      	str	r2, [r3, #32]
 8003f60:	e006      	b.n	8003f70 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f66:	461a      	mov	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	b292      	uxth	r2, r2
 8003f6e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	da15      	bge.n	8003fa4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003f86:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8c:	425b      	negs	r3, r3
 8003f8e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6a19      	ldr	r1, [r3, #32]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	041a      	lsls	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	621a      	str	r2, [r3, #32]
 8003fa2:	e009      	b.n	8003fb8 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6a19      	ldr	r1, [r3, #32]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fae:	041a      	lsls	r2, r3, #16
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc0:	d006      	beq.n	8003fd0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fce:	e003      	b.n	8003fd8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003fe0:	bf00      	nop
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0

}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004004:	4b29      	ldr	r3, [pc, #164]	@ (80040ac <HAL_PWREx_ConfigSupply+0xb0>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	2b06      	cmp	r3, #6
 800400e:	d00a      	beq.n	8004026 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004010:	4b26      	ldr	r3, [pc, #152]	@ (80040ac <HAL_PWREx_ConfigSupply+0xb0>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	429a      	cmp	r2, r3
 800401c:	d001      	beq.n	8004022 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e040      	b.n	80040a4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e03e      	b.n	80040a4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004026:	4b21      	ldr	r3, [pc, #132]	@ (80040ac <HAL_PWREx_ConfigSupply+0xb0>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800402e:	491f      	ldr	r1, [pc, #124]	@ (80040ac <HAL_PWREx_ConfigSupply+0xb0>)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4313      	orrs	r3, r2
 8004034:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004036:	f7fc ff11 	bl	8000e5c <HAL_GetTick>
 800403a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800403c:	e009      	b.n	8004052 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800403e:	f7fc ff0d 	bl	8000e5c <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800404c:	d901      	bls.n	8004052 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e028      	b.n	80040a4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004052:	4b16      	ldr	r3, [pc, #88]	@ (80040ac <HAL_PWREx_ConfigSupply+0xb0>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800405a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800405e:	d1ee      	bne.n	800403e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b1e      	cmp	r3, #30
 8004064:	d008      	beq.n	8004078 <HAL_PWREx_ConfigSupply+0x7c>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b2e      	cmp	r3, #46	@ 0x2e
 800406a:	d005      	beq.n	8004078 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b1d      	cmp	r3, #29
 8004070:	d002      	beq.n	8004078 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b2d      	cmp	r3, #45	@ 0x2d
 8004076:	d114      	bne.n	80040a2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004078:	f7fc fef0 	bl	8000e5c <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800407e:	e009      	b.n	8004094 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004080:	f7fc feec 	bl	8000e5c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800408e:	d901      	bls.n	8004094 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e007      	b.n	80040a4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004094:	4b05      	ldr	r3, [pc, #20]	@ (80040ac <HAL_PWREx_ConfigSupply+0xb0>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a0:	d1ee      	bne.n	8004080 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	58024800 	.word	0x58024800

080040b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08c      	sub	sp, #48	@ 0x30
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d102      	bne.n	80040c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f000 bc48 	b.w	8004954 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8088 	beq.w	80041e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040d2:	4b99      	ldr	r3, [pc, #612]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040dc:	4b96      	ldr	r3, [pc, #600]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 80040de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80040e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d007      	beq.n	80040f8 <HAL_RCC_OscConfig+0x48>
 80040e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ea:	2b18      	cmp	r3, #24
 80040ec:	d111      	bne.n	8004112 <HAL_RCC_OscConfig+0x62>
 80040ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d10c      	bne.n	8004112 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f8:	4b8f      	ldr	r3, [pc, #572]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d06d      	beq.n	80041e0 <HAL_RCC_OscConfig+0x130>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d169      	bne.n	80041e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f000 bc21 	b.w	8004954 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800411a:	d106      	bne.n	800412a <HAL_RCC_OscConfig+0x7a>
 800411c:	4b86      	ldr	r3, [pc, #536]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a85      	ldr	r2, [pc, #532]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004122:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	e02e      	b.n	8004188 <HAL_RCC_OscConfig+0xd8>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10c      	bne.n	800414c <HAL_RCC_OscConfig+0x9c>
 8004132:	4b81      	ldr	r3, [pc, #516]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a80      	ldr	r2, [pc, #512]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	4b7e      	ldr	r3, [pc, #504]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a7d      	ldr	r2, [pc, #500]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004144:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e01d      	b.n	8004188 <HAL_RCC_OscConfig+0xd8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004154:	d10c      	bne.n	8004170 <HAL_RCC_OscConfig+0xc0>
 8004156:	4b78      	ldr	r3, [pc, #480]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a77      	ldr	r2, [pc, #476]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 800415c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4b75      	ldr	r3, [pc, #468]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a74      	ldr	r2, [pc, #464]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e00b      	b.n	8004188 <HAL_RCC_OscConfig+0xd8>
 8004170:	4b71      	ldr	r3, [pc, #452]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a70      	ldr	r2, [pc, #448]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	4b6e      	ldr	r3, [pc, #440]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a6d      	ldr	r2, [pc, #436]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d013      	beq.n	80041b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fc fe64 	bl	8000e5c <HAL_GetTick>
 8004194:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004198:	f7fc fe60 	bl	8000e5c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	@ 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e3d4      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041aa:	4b63      	ldr	r3, [pc, #396]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0xe8>
 80041b6:	e014      	b.n	80041e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fc fe50 	bl	8000e5c <HAL_GetTick>
 80041bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c0:	f7fc fe4c 	bl	8000e5c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	@ 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e3c0      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041d2:	4b59      	ldr	r3, [pc, #356]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x110>
 80041de:	e000      	b.n	80041e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80ca 	beq.w	8004384 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041f0:	4b51      	ldr	r3, [pc, #324]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 80041fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <HAL_RCC_OscConfig+0x166>
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	2b18      	cmp	r3, #24
 800420a:	d156      	bne.n	80042ba <HAL_RCC_OscConfig+0x20a>
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d151      	bne.n	80042ba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004216:	4b48      	ldr	r3, [pc, #288]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_RCC_OscConfig+0x17e>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e392      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800422e:	4b42      	ldr	r3, [pc, #264]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 0219 	bic.w	r2, r3, #25
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	493f      	ldr	r1, [pc, #252]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 800423c:	4313      	orrs	r3, r2
 800423e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fc fe0c 	bl	8000e5c <HAL_GetTick>
 8004244:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004248:	f7fc fe08 	bl	8000e5c <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e37c      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800425a:	4b37      	ldr	r3, [pc, #220]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004266:	f7fc fe29 	bl	8000ebc <HAL_GetREVID>
 800426a:	4603      	mov	r3, r0
 800426c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004270:	4293      	cmp	r3, r2
 8004272:	d817      	bhi.n	80042a4 <HAL_RCC_OscConfig+0x1f4>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2b40      	cmp	r3, #64	@ 0x40
 800427a:	d108      	bne.n	800428e <HAL_RCC_OscConfig+0x1de>
 800427c:	4b2e      	ldr	r3, [pc, #184]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004284:	4a2c      	ldr	r2, [pc, #176]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004286:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800428a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800428c:	e07a      	b.n	8004384 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428e:	4b2a      	ldr	r3, [pc, #168]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	031b      	lsls	r3, r3, #12
 800429c:	4926      	ldr	r1, [pc, #152]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a2:	e06f      	b.n	8004384 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a4:	4b24      	ldr	r3, [pc, #144]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	061b      	lsls	r3, r3, #24
 80042b2:	4921      	ldr	r1, [pc, #132]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b8:	e064      	b.n	8004384 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d047      	beq.n	8004352 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f023 0219 	bic.w	r2, r3, #25
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	491a      	ldr	r1, [pc, #104]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fc fdc2 	bl	8000e5c <HAL_GetTick>
 80042d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042dc:	f7fc fdbe 	bl	8000e5c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e332      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ee:	4b12      	ldr	r3, [pc, #72]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fa:	f7fc fddf 	bl	8000ebc <HAL_GetREVID>
 80042fe:	4603      	mov	r3, r0
 8004300:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004304:	4293      	cmp	r3, r2
 8004306:	d819      	bhi.n	800433c <HAL_RCC_OscConfig+0x28c>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b40      	cmp	r3, #64	@ 0x40
 800430e:	d108      	bne.n	8004322 <HAL_RCC_OscConfig+0x272>
 8004310:	4b09      	ldr	r3, [pc, #36]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004318:	4a07      	ldr	r2, [pc, #28]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 800431a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800431e:	6053      	str	r3, [r2, #4]
 8004320:	e030      	b.n	8004384 <HAL_RCC_OscConfig+0x2d4>
 8004322:	4b05      	ldr	r3, [pc, #20]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	031b      	lsls	r3, r3, #12
 8004330:	4901      	ldr	r1, [pc, #4]	@ (8004338 <HAL_RCC_OscConfig+0x288>)
 8004332:	4313      	orrs	r3, r2
 8004334:	604b      	str	r3, [r1, #4]
 8004336:	e025      	b.n	8004384 <HAL_RCC_OscConfig+0x2d4>
 8004338:	58024400 	.word	0x58024400
 800433c:	4b9a      	ldr	r3, [pc, #616]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	4997      	ldr	r1, [pc, #604]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	604b      	str	r3, [r1, #4]
 8004350:	e018      	b.n	8004384 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004352:	4b95      	ldr	r3, [pc, #596]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a94      	ldr	r2, [pc, #592]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435e:	f7fc fd7d 	bl	8000e5c <HAL_GetTick>
 8004362:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004366:	f7fc fd79 	bl	8000e5c <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e2ed      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004378:	4b8b      	ldr	r3, [pc, #556]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1f0      	bne.n	8004366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80a9 	beq.w	80044e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004392:	4b85      	ldr	r3, [pc, #532]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800439a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800439c:	4b82      	ldr	r3, [pc, #520]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d007      	beq.n	80043b8 <HAL_RCC_OscConfig+0x308>
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b18      	cmp	r3, #24
 80043ac:	d13a      	bne.n	8004424 <HAL_RCC_OscConfig+0x374>
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d135      	bne.n	8004424 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043b8:	4b7b      	ldr	r3, [pc, #492]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_RCC_OscConfig+0x320>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	2b80      	cmp	r3, #128	@ 0x80
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e2c1      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043d0:	f7fc fd74 	bl	8000ebc <HAL_GetREVID>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80043da:	4293      	cmp	r3, r2
 80043dc:	d817      	bhi.n	800440e <HAL_RCC_OscConfig+0x35e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d108      	bne.n	80043f8 <HAL_RCC_OscConfig+0x348>
 80043e6:	4b70      	ldr	r3, [pc, #448]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80043ee:	4a6e      	ldr	r2, [pc, #440]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 80043f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80043f4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043f6:	e075      	b.n	80044e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043f8:	4b6b      	ldr	r3, [pc, #428]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	069b      	lsls	r3, r3, #26
 8004406:	4968      	ldr	r1, [pc, #416]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004408:	4313      	orrs	r3, r2
 800440a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800440c:	e06a      	b.n	80044e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800440e:	4b66      	ldr	r3, [pc, #408]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	061b      	lsls	r3, r3, #24
 800441c:	4962      	ldr	r1, [pc, #392]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 800441e:	4313      	orrs	r3, r2
 8004420:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004422:	e05f      	b.n	80044e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	69db      	ldr	r3, [r3, #28]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d042      	beq.n	80044b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800442c:	4b5e      	ldr	r3, [pc, #376]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a5d      	ldr	r2, [pc, #372]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fc fd10 	bl	8000e5c <HAL_GetTick>
 800443c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004440:	f7fc fd0c 	bl	8000e5c <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e280      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004452:	4b55      	ldr	r3, [pc, #340]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800445e:	f7fc fd2d 	bl	8000ebc <HAL_GetREVID>
 8004462:	4603      	mov	r3, r0
 8004464:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004468:	4293      	cmp	r3, r2
 800446a:	d817      	bhi.n	800449c <HAL_RCC_OscConfig+0x3ec>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	2b20      	cmp	r3, #32
 8004472:	d108      	bne.n	8004486 <HAL_RCC_OscConfig+0x3d6>
 8004474:	4b4c      	ldr	r3, [pc, #304]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800447c:	4a4a      	ldr	r2, [pc, #296]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 800447e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004482:	6053      	str	r3, [r2, #4]
 8004484:	e02e      	b.n	80044e4 <HAL_RCC_OscConfig+0x434>
 8004486:	4b48      	ldr	r3, [pc, #288]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	069b      	lsls	r3, r3, #26
 8004494:	4944      	ldr	r1, [pc, #272]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004496:	4313      	orrs	r3, r2
 8004498:	604b      	str	r3, [r1, #4]
 800449a:	e023      	b.n	80044e4 <HAL_RCC_OscConfig+0x434>
 800449c:	4b42      	ldr	r3, [pc, #264]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	061b      	lsls	r3, r3, #24
 80044aa:	493f      	ldr	r1, [pc, #252]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60cb      	str	r3, [r1, #12]
 80044b0:	e018      	b.n	80044e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80044b2:	4b3d      	ldr	r3, [pc, #244]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a3c      	ldr	r2, [pc, #240]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 80044b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fc fccd 	bl	8000e5c <HAL_GetTick>
 80044c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80044c6:	f7fc fcc9 	bl	8000e5c <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e23d      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044d8:	4b33      	ldr	r3, [pc, #204]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f0      	bne.n	80044c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d036      	beq.n	800455e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d019      	beq.n	800452c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044f8:	4b2b      	ldr	r3, [pc, #172]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 80044fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044fc:	4a2a      	ldr	r2, [pc, #168]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 80044fe:	f043 0301 	orr.w	r3, r3, #1
 8004502:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7fc fcaa 	bl	8000e5c <HAL_GetTick>
 8004508:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800450c:	f7fc fca6 	bl	8000e5c <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e21a      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800451e:	4b22      	ldr	r3, [pc, #136]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x45c>
 800452a:	e018      	b.n	800455e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800452c:	4b1e      	ldr	r3, [pc, #120]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 800452e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004530:	4a1d      	ldr	r2, [pc, #116]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004532:	f023 0301 	bic.w	r3, r3, #1
 8004536:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fc fc90 	bl	8000e5c <HAL_GetTick>
 800453c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004540:	f7fc fc8c 	bl	8000e5c <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e200      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004552:	4b15      	ldr	r3, [pc, #84]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f0      	bne.n	8004540 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d039      	beq.n	80045de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d01c      	beq.n	80045ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004572:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a0c      	ldr	r2, [pc, #48]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 8004578:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800457c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800457e:	f7fc fc6d 	bl	8000e5c <HAL_GetTick>
 8004582:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004586:	f7fc fc69 	bl	8000e5c <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e1dd      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004598:	4b03      	ldr	r3, [pc, #12]	@ (80045a8 <HAL_RCC_OscConfig+0x4f8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x4d6>
 80045a4:	e01b      	b.n	80045de <HAL_RCC_OscConfig+0x52e>
 80045a6:	bf00      	nop
 80045a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045ac:	4b9b      	ldr	r3, [pc, #620]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a9a      	ldr	r2, [pc, #616]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80045b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045b8:	f7fc fc50 	bl	8000e5c <HAL_GetTick>
 80045bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045c0:	f7fc fc4c 	bl	8000e5c <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e1c0      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045d2:	4b92      	ldr	r3, [pc, #584]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8081 	beq.w	80046ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045ec:	4b8c      	ldr	r3, [pc, #560]	@ (8004820 <HAL_RCC_OscConfig+0x770>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a8b      	ldr	r2, [pc, #556]	@ (8004820 <HAL_RCC_OscConfig+0x770>)
 80045f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045f8:	f7fc fc30 	bl	8000e5c <HAL_GetTick>
 80045fc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004600:	f7fc fc2c 	bl	8000e5c <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	@ 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e1a0      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004612:	4b83      	ldr	r3, [pc, #524]	@ (8004820 <HAL_RCC_OscConfig+0x770>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d106      	bne.n	8004634 <HAL_RCC_OscConfig+0x584>
 8004626:	4b7d      	ldr	r3, [pc, #500]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462a:	4a7c      	ldr	r2, [pc, #496]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	6713      	str	r3, [r2, #112]	@ 0x70
 8004632:	e02d      	b.n	8004690 <HAL_RCC_OscConfig+0x5e0>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10c      	bne.n	8004656 <HAL_RCC_OscConfig+0x5a6>
 800463c:	4b77      	ldr	r3, [pc, #476]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004640:	4a76      	ldr	r2, [pc, #472]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	6713      	str	r3, [r2, #112]	@ 0x70
 8004648:	4b74      	ldr	r3, [pc, #464]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464c:	4a73      	ldr	r2, [pc, #460]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 800464e:	f023 0304 	bic.w	r3, r3, #4
 8004652:	6713      	str	r3, [r2, #112]	@ 0x70
 8004654:	e01c      	b.n	8004690 <HAL_RCC_OscConfig+0x5e0>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b05      	cmp	r3, #5
 800465c:	d10c      	bne.n	8004678 <HAL_RCC_OscConfig+0x5c8>
 800465e:	4b6f      	ldr	r3, [pc, #444]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004662:	4a6e      	ldr	r2, [pc, #440]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004664:	f043 0304 	orr.w	r3, r3, #4
 8004668:	6713      	str	r3, [r2, #112]	@ 0x70
 800466a:	4b6c      	ldr	r3, [pc, #432]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466e:	4a6b      	ldr	r2, [pc, #428]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	6713      	str	r3, [r2, #112]	@ 0x70
 8004676:	e00b      	b.n	8004690 <HAL_RCC_OscConfig+0x5e0>
 8004678:	4b68      	ldr	r3, [pc, #416]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467c:	4a67      	ldr	r2, [pc, #412]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	6713      	str	r3, [r2, #112]	@ 0x70
 8004684:	4b65      	ldr	r3, [pc, #404]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004688:	4a64      	ldr	r2, [pc, #400]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 800468a:	f023 0304 	bic.w	r3, r3, #4
 800468e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d015      	beq.n	80046c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7fc fbe0 	bl	8000e5c <HAL_GetTick>
 800469c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a0:	f7fc fbdc 	bl	8000e5c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e14e      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046b6:	4b59      	ldr	r3, [pc, #356]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0ee      	beq.n	80046a0 <HAL_RCC_OscConfig+0x5f0>
 80046c2:	e014      	b.n	80046ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c4:	f7fc fbca 	bl	8000e5c <HAL_GetTick>
 80046c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046ca:	e00a      	b.n	80046e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046cc:	f7fc fbc6 	bl	8000e5c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046da:	4293      	cmp	r3, r2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e138      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046e2:	4b4e      	ldr	r3, [pc, #312]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80046e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1ee      	bne.n	80046cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 812d 	beq.w	8004952 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80046f8:	4b48      	ldr	r3, [pc, #288]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004700:	2b18      	cmp	r3, #24
 8004702:	f000 80bd 	beq.w	8004880 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	2b02      	cmp	r3, #2
 800470c:	f040 809e 	bne.w	800484c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004710:	4b42      	ldr	r3, [pc, #264]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a41      	ldr	r2, [pc, #260]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800471a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fc fb9e 	bl	8000e5c <HAL_GetTick>
 8004720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004724:	f7fc fb9a 	bl	8000e5c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e10e      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004736:	4b39      	ldr	r3, [pc, #228]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004742:	4b36      	ldr	r3, [pc, #216]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004744:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004746:	4b37      	ldr	r3, [pc, #220]	@ (8004824 <HAL_RCC_OscConfig+0x774>)
 8004748:	4013      	ands	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004752:	0112      	lsls	r2, r2, #4
 8004754:	430a      	orrs	r2, r1
 8004756:	4931      	ldr	r1, [pc, #196]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	628b      	str	r3, [r1, #40]	@ 0x28
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004760:	3b01      	subs	r3, #1
 8004762:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476a:	3b01      	subs	r3, #1
 800476c:	025b      	lsls	r3, r3, #9
 800476e:	b29b      	uxth	r3, r3
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004776:	3b01      	subs	r3, #1
 8004778:	041b      	lsls	r3, r3, #16
 800477a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004784:	3b01      	subs	r3, #1
 8004786:	061b      	lsls	r3, r3, #24
 8004788:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800478c:	4923      	ldr	r1, [pc, #140]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 800478e:	4313      	orrs	r3, r2
 8004790:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004792:	4b22      	ldr	r3, [pc, #136]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	4a21      	ldr	r2, [pc, #132]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004798:	f023 0301 	bic.w	r3, r3, #1
 800479c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800479e:	4b1f      	ldr	r3, [pc, #124]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80047a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047a2:	4b21      	ldr	r3, [pc, #132]	@ (8004828 <HAL_RCC_OscConfig+0x778>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80047aa:	00d2      	lsls	r2, r2, #3
 80047ac:	491b      	ldr	r1, [pc, #108]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80047b2:	4b1a      	ldr	r3, [pc, #104]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80047b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b6:	f023 020c 	bic.w	r2, r3, #12
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	4917      	ldr	r1, [pc, #92]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80047c4:	4b15      	ldr	r3, [pc, #84]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	f023 0202 	bic.w	r2, r3, #2
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d0:	4912      	ldr	r1, [pc, #72]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047d6:	4b11      	ldr	r3, [pc, #68]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	4a10      	ldr	r2, [pc, #64]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80047dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e2:	4b0e      	ldr	r3, [pc, #56]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80047e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e6:	4a0d      	ldr	r2, [pc, #52]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80047e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047ee:	4b0b      	ldr	r3, [pc, #44]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	4a0a      	ldr	r2, [pc, #40]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80047f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80047fa:	4b08      	ldr	r3, [pc, #32]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 80047fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fe:	4a07      	ldr	r2, [pc, #28]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004800:	f043 0301 	orr.w	r3, r3, #1
 8004804:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004806:	4b05      	ldr	r3, [pc, #20]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a04      	ldr	r2, [pc, #16]	@ (800481c <HAL_RCC_OscConfig+0x76c>)
 800480c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fc fb23 	bl	8000e5c <HAL_GetTick>
 8004816:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004818:	e011      	b.n	800483e <HAL_RCC_OscConfig+0x78e>
 800481a:	bf00      	nop
 800481c:	58024400 	.word	0x58024400
 8004820:	58024800 	.word	0x58024800
 8004824:	fffffc0c 	.word	0xfffffc0c
 8004828:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482c:	f7fc fb16 	bl	8000e5c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e08a      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800483e:	4b47      	ldr	r3, [pc, #284]	@ (800495c <HAL_RCC_OscConfig+0x8ac>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x77c>
 800484a:	e082      	b.n	8004952 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484c:	4b43      	ldr	r3, [pc, #268]	@ (800495c <HAL_RCC_OscConfig+0x8ac>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a42      	ldr	r2, [pc, #264]	@ (800495c <HAL_RCC_OscConfig+0x8ac>)
 8004852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fc fb00 	bl	8000e5c <HAL_GetTick>
 800485c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004860:	f7fc fafc 	bl	8000e5c <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e070      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004872:	4b3a      	ldr	r3, [pc, #232]	@ (800495c <HAL_RCC_OscConfig+0x8ac>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x7b0>
 800487e:	e068      	b.n	8004952 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004880:	4b36      	ldr	r3, [pc, #216]	@ (800495c <HAL_RCC_OscConfig+0x8ac>)
 8004882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004884:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004886:	4b35      	ldr	r3, [pc, #212]	@ (800495c <HAL_RCC_OscConfig+0x8ac>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	2b01      	cmp	r3, #1
 8004892:	d031      	beq.n	80048f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f003 0203 	and.w	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d12a      	bne.n	80048f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	091b      	lsrs	r3, r3, #4
 80048a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d122      	bne.n	80048f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d11a      	bne.n	80048f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	0a5b      	lsrs	r3, r3, #9
 80048c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d111      	bne.n	80048f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	0c1b      	lsrs	r3, r3, #16
 80048d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d108      	bne.n	80048f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	0e1b      	lsrs	r3, r3, #24
 80048ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e02b      	b.n	8004954 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80048fc:	4b17      	ldr	r3, [pc, #92]	@ (800495c <HAL_RCC_OscConfig+0x8ac>)
 80048fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004900:	08db      	lsrs	r3, r3, #3
 8004902:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004906:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	429a      	cmp	r2, r3
 8004910:	d01f      	beq.n	8004952 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004912:	4b12      	ldr	r3, [pc, #72]	@ (800495c <HAL_RCC_OscConfig+0x8ac>)
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	4a11      	ldr	r2, [pc, #68]	@ (800495c <HAL_RCC_OscConfig+0x8ac>)
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800491e:	f7fc fa9d 	bl	8000e5c <HAL_GetTick>
 8004922:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004924:	bf00      	nop
 8004926:	f7fc fa99 	bl	8000e5c <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	4293      	cmp	r3, r2
 8004930:	d0f9      	beq.n	8004926 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004932:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <HAL_RCC_OscConfig+0x8ac>)
 8004934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004936:	4b0a      	ldr	r3, [pc, #40]	@ (8004960 <HAL_RCC_OscConfig+0x8b0>)
 8004938:	4013      	ands	r3, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800493e:	00d2      	lsls	r2, r2, #3
 8004940:	4906      	ldr	r1, [pc, #24]	@ (800495c <HAL_RCC_OscConfig+0x8ac>)
 8004942:	4313      	orrs	r3, r2
 8004944:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004946:	4b05      	ldr	r3, [pc, #20]	@ (800495c <HAL_RCC_OscConfig+0x8ac>)
 8004948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494a:	4a04      	ldr	r2, [pc, #16]	@ (800495c <HAL_RCC_OscConfig+0x8ac>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3730      	adds	r7, #48	@ 0x30
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	58024400 	.word	0x58024400
 8004960:	ffff0007 	.word	0xffff0007

08004964 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e19c      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004978:	4b8a      	ldr	r3, [pc, #552]	@ (8004ba4 <HAL_RCC_ClockConfig+0x240>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d910      	bls.n	80049a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b87      	ldr	r3, [pc, #540]	@ (8004ba4 <HAL_RCC_ClockConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f023 020f 	bic.w	r2, r3, #15
 800498e:	4985      	ldr	r1, [pc, #532]	@ (8004ba4 <HAL_RCC_ClockConfig+0x240>)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	4313      	orrs	r3, r2
 8004994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b83      	ldr	r3, [pc, #524]	@ (8004ba4 <HAL_RCC_ClockConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e184      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d010      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	4b7b      	ldr	r3, [pc, #492]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d908      	bls.n	80049d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049c4:	4b78      	ldr	r3, [pc, #480]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	4975      	ldr	r1, [pc, #468]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d010      	beq.n	8004a04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695a      	ldr	r2, [r3, #20]
 80049e6:	4b70      	ldr	r3, [pc, #448]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d908      	bls.n	8004a04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049f2:	4b6d      	ldr	r3, [pc, #436]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	496a      	ldr	r1, [pc, #424]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d010      	beq.n	8004a32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699a      	ldr	r2, [r3, #24]
 8004a14:	4b64      	ldr	r3, [pc, #400]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d908      	bls.n	8004a32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a20:	4b61      	ldr	r3, [pc, #388]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	495e      	ldr	r1, [pc, #376]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d010      	beq.n	8004a60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69da      	ldr	r2, [r3, #28]
 8004a42:	4b59      	ldr	r3, [pc, #356]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d908      	bls.n	8004a60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a4e:	4b56      	ldr	r3, [pc, #344]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	4953      	ldr	r1, [pc, #332]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d010      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	4b4d      	ldr	r3, [pc, #308]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d908      	bls.n	8004a8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7c:	4b4a      	ldr	r3, [pc, #296]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f023 020f 	bic.w	r2, r3, #15
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4947      	ldr	r1, [pc, #284]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d055      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a9a:	4b43      	ldr	r3, [pc, #268]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	4940      	ldr	r1, [pc, #256]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ab4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d121      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0f6      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b03      	cmp	r3, #3
 8004aca:	d107      	bne.n	8004adc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004acc:	4b36      	ldr	r3, [pc, #216]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d115      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0ea      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d107      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ae4:	4b30      	ldr	r3, [pc, #192]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0de      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004af4:	4b2c      	ldr	r3, [pc, #176]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0d6      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b04:	4b28      	ldr	r3, [pc, #160]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f023 0207 	bic.w	r2, r3, #7
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4925      	ldr	r1, [pc, #148]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b16:	f7fc f9a1 	bl	8000e5c <HAL_GetTick>
 8004b1a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1c:	e00a      	b.n	8004b34 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b1e:	f7fc f99d 	bl	8000e5c <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e0be      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b34:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d1eb      	bne.n	8004b1e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d010      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	4b14      	ldr	r3, [pc, #80]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d208      	bcs.n	8004b74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b62:	4b11      	ldr	r3, [pc, #68]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f023 020f 	bic.w	r2, r3, #15
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	490e      	ldr	r1, [pc, #56]	@ (8004ba8 <HAL_RCC_ClockConfig+0x244>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <HAL_RCC_ClockConfig+0x240>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d214      	bcs.n	8004bac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b08      	ldr	r3, [pc, #32]	@ (8004ba4 <HAL_RCC_ClockConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f023 020f 	bic.w	r2, r3, #15
 8004b8a:	4906      	ldr	r1, [pc, #24]	@ (8004ba4 <HAL_RCC_ClockConfig+0x240>)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b92:	4b04      	ldr	r3, [pc, #16]	@ (8004ba4 <HAL_RCC_ClockConfig+0x240>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d005      	beq.n	8004bac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e086      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x34e>
 8004ba4:	52002000 	.word	0x52002000
 8004ba8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d010      	beq.n	8004bda <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8004cbc <HAL_RCC_ClockConfig+0x358>)
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d208      	bcs.n	8004bda <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bc8:	4b3c      	ldr	r3, [pc, #240]	@ (8004cbc <HAL_RCC_ClockConfig+0x358>)
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	4939      	ldr	r1, [pc, #228]	@ (8004cbc <HAL_RCC_ClockConfig+0x358>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d010      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695a      	ldr	r2, [r3, #20]
 8004bea:	4b34      	ldr	r3, [pc, #208]	@ (8004cbc <HAL_RCC_ClockConfig+0x358>)
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d208      	bcs.n	8004c08 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bf6:	4b31      	ldr	r3, [pc, #196]	@ (8004cbc <HAL_RCC_ClockConfig+0x358>)
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	492e      	ldr	r1, [pc, #184]	@ (8004cbc <HAL_RCC_ClockConfig+0x358>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d010      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699a      	ldr	r2, [r3, #24]
 8004c18:	4b28      	ldr	r3, [pc, #160]	@ (8004cbc <HAL_RCC_ClockConfig+0x358>)
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d208      	bcs.n	8004c36 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c24:	4b25      	ldr	r3, [pc, #148]	@ (8004cbc <HAL_RCC_ClockConfig+0x358>)
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	4922      	ldr	r1, [pc, #136]	@ (8004cbc <HAL_RCC_ClockConfig+0x358>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d010      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69da      	ldr	r2, [r3, #28]
 8004c46:	4b1d      	ldr	r3, [pc, #116]	@ (8004cbc <HAL_RCC_ClockConfig+0x358>)
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d208      	bcs.n	8004c64 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c52:	4b1a      	ldr	r3, [pc, #104]	@ (8004cbc <HAL_RCC_ClockConfig+0x358>)
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	4917      	ldr	r1, [pc, #92]	@ (8004cbc <HAL_RCC_ClockConfig+0x358>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c64:	f000 f834 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	4b14      	ldr	r3, [pc, #80]	@ (8004cbc <HAL_RCC_ClockConfig+0x358>)
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	0a1b      	lsrs	r3, r3, #8
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	4912      	ldr	r1, [pc, #72]	@ (8004cc0 <HAL_RCC_ClockConfig+0x35c>)
 8004c76:	5ccb      	ldrb	r3, [r1, r3]
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c82:	4b0e      	ldr	r3, [pc, #56]	@ (8004cbc <HAL_RCC_ClockConfig+0x358>)
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8004cc0 <HAL_RCC_ClockConfig+0x35c>)
 8004c8c:	5cd3      	ldrb	r3, [r2, r3]
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
 8004c98:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <HAL_RCC_ClockConfig+0x360>)
 8004c9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc8 <HAL_RCC_ClockConfig+0x364>)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <HAL_RCC_ClockConfig+0x368>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fc f88e 	bl	8000dc8 <HAL_InitTick>
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	58024400 	.word	0x58024400
 8004cc0:	08010bbc 	.word	0x08010bbc
 8004cc4:	20000004 	.word	0x20000004
 8004cc8:	20000000 	.word	0x20000000
 8004ccc:	20000008 	.word	0x20000008

08004cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b089      	sub	sp, #36	@ 0x24
 8004cd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cd6:	4bb3      	ldr	r3, [pc, #716]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cde:	2b18      	cmp	r3, #24
 8004ce0:	f200 8155 	bhi.w	8004f8e <HAL_RCC_GetSysClockFreq+0x2be>
 8004ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cec <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cea:	bf00      	nop
 8004cec:	08004d51 	.word	0x08004d51
 8004cf0:	08004f8f 	.word	0x08004f8f
 8004cf4:	08004f8f 	.word	0x08004f8f
 8004cf8:	08004f8f 	.word	0x08004f8f
 8004cfc:	08004f8f 	.word	0x08004f8f
 8004d00:	08004f8f 	.word	0x08004f8f
 8004d04:	08004f8f 	.word	0x08004f8f
 8004d08:	08004f8f 	.word	0x08004f8f
 8004d0c:	08004d77 	.word	0x08004d77
 8004d10:	08004f8f 	.word	0x08004f8f
 8004d14:	08004f8f 	.word	0x08004f8f
 8004d18:	08004f8f 	.word	0x08004f8f
 8004d1c:	08004f8f 	.word	0x08004f8f
 8004d20:	08004f8f 	.word	0x08004f8f
 8004d24:	08004f8f 	.word	0x08004f8f
 8004d28:	08004f8f 	.word	0x08004f8f
 8004d2c:	08004d7d 	.word	0x08004d7d
 8004d30:	08004f8f 	.word	0x08004f8f
 8004d34:	08004f8f 	.word	0x08004f8f
 8004d38:	08004f8f 	.word	0x08004f8f
 8004d3c:	08004f8f 	.word	0x08004f8f
 8004d40:	08004f8f 	.word	0x08004f8f
 8004d44:	08004f8f 	.word	0x08004f8f
 8004d48:	08004f8f 	.word	0x08004f8f
 8004d4c:	08004d83 	.word	0x08004d83
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d50:	4b94      	ldr	r3, [pc, #592]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d009      	beq.n	8004d70 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d5c:	4b91      	ldr	r3, [pc, #580]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	08db      	lsrs	r3, r3, #3
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	4a90      	ldr	r2, [pc, #576]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d68:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004d6e:	e111      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d70:	4b8d      	ldr	r3, [pc, #564]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d72:	61bb      	str	r3, [r7, #24]
      break;
 8004d74:	e10e      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004d76:	4b8d      	ldr	r3, [pc, #564]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d78:	61bb      	str	r3, [r7, #24]
      break;
 8004d7a:	e10b      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004d7c:	4b8c      	ldr	r3, [pc, #560]	@ (8004fb0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d7e:	61bb      	str	r3, [r7, #24]
      break;
 8004d80:	e108      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d82:	4b88      	ldr	r3, [pc, #544]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004d8c:	4b85      	ldr	r3, [pc, #532]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d96:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d98:	4b82      	ldr	r3, [pc, #520]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004da2:	4b80      	ldr	r3, [pc, #512]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da6:	08db      	lsrs	r3, r3, #3
 8004da8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	fb02 f303 	mul.w	r3, r2, r3
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80e1 	beq.w	8004f88 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	f000 8083 	beq.w	8004ed4 <HAL_RCC_GetSysClockFreq+0x204>
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	f200 80a1 	bhi.w	8004f18 <HAL_RCC_GetSysClockFreq+0x248>
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0x114>
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d056      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004de2:	e099      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004de4:	4b6f      	ldr	r3, [pc, #444]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d02d      	beq.n	8004e4c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004df0:	4b6c      	ldr	r3, [pc, #432]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	08db      	lsrs	r3, r3, #3
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	4a6b      	ldr	r2, [pc, #428]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004e00:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1a:	4b62      	ldr	r3, [pc, #392]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e2e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004fb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004e4a:	e087      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004fb8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5e:	4b51      	ldr	r3, [pc, #324]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e72:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004fb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e8e:	e065      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004fbc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea2:	4b40      	ldr	r3, [pc, #256]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eb6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004fb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ece:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ed2:	e043      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ede:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004fc0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004efa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004fb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f16:	e021      	b.n	8004f5c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f22:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004fbc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f3e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004fb4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f5a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004f5c:	4b11      	ldr	r3, [pc, #68]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f60:	0a5b      	lsrs	r3, r3, #9
 8004f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f66:	3301      	adds	r3, #1
 8004f68:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	ee07 3a90 	vmov	s15, r3
 8004f70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f74:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f80:	ee17 3a90 	vmov	r3, s15
 8004f84:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004f86:	e005      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61bb      	str	r3, [r7, #24]
      break;
 8004f8c:	e002      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004f8e:	4b07      	ldr	r3, [pc, #28]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f90:	61bb      	str	r3, [r7, #24]
      break;
 8004f92:	bf00      	nop
  }

  return sysclockfreq;
 8004f94:	69bb      	ldr	r3, [r7, #24]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3724      	adds	r7, #36	@ 0x24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	58024400 	.word	0x58024400
 8004fa8:	03d09000 	.word	0x03d09000
 8004fac:	003d0900 	.word	0x003d0900
 8004fb0:	017d7840 	.word	0x017d7840
 8004fb4:	46000000 	.word	0x46000000
 8004fb8:	4c742400 	.word	0x4c742400
 8004fbc:	4a742400 	.word	0x4a742400
 8004fc0:	4bbebc20 	.word	0x4bbebc20

08004fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fca:	f7ff fe81 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	4b10      	ldr	r3, [pc, #64]	@ (8005014 <HAL_RCC_GetHCLKFreq+0x50>)
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	0a1b      	lsrs	r3, r3, #8
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	490f      	ldr	r1, [pc, #60]	@ (8005018 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fdc:	5ccb      	ldrb	r3, [r1, r3]
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8005014 <HAL_RCC_GetHCLKFreq+0x50>)
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	4a09      	ldr	r2, [pc, #36]	@ (8005018 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ff2:	5cd3      	ldrb	r3, [r2, r3]
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffe:	4a07      	ldr	r2, [pc, #28]	@ (800501c <HAL_RCC_GetHCLKFreq+0x58>)
 8005000:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005002:	4a07      	ldr	r2, [pc, #28]	@ (8005020 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005008:	4b04      	ldr	r3, [pc, #16]	@ (800501c <HAL_RCC_GetHCLKFreq+0x58>)
 800500a:	681b      	ldr	r3, [r3, #0]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	58024400 	.word	0x58024400
 8005018:	08010bbc 	.word	0x08010bbc
 800501c:	20000004 	.word	0x20000004
 8005020:	20000000 	.word	0x20000000

08005024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005028:	f7ff ffcc 	bl	8004fc4 <HAL_RCC_GetHCLKFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b06      	ldr	r3, [pc, #24]	@ (8005048 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	091b      	lsrs	r3, r3, #4
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4904      	ldr	r1, [pc, #16]	@ (800504c <HAL_RCC_GetPCLK1Freq+0x28>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005044:	4618      	mov	r0, r3
 8005046:	bd80      	pop	{r7, pc}
 8005048:	58024400 	.word	0x58024400
 800504c:	08010bbc 	.word	0x08010bbc

08005050 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005054:	b0cc      	sub	sp, #304	@ 0x130
 8005056:	af00      	add	r7, sp, #0
 8005058:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800505c:	2300      	movs	r3, #0
 800505e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005062:	2300      	movs	r3, #0
 8005064:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005068:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005074:	2500      	movs	r5, #0
 8005076:	ea54 0305 	orrs.w	r3, r4, r5
 800507a:	d049      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800507c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005082:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005086:	d02f      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005088:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800508c:	d828      	bhi.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800508e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005092:	d01a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005094:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005098:	d822      	bhi.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800509e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050a2:	d007      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050a4:	e01c      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a6:	4bb8      	ldr	r3, [pc, #736]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050aa:	4ab7      	ldr	r2, [pc, #732]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050b2:	e01a      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050b8:	3308      	adds	r3, #8
 80050ba:	2102      	movs	r1, #2
 80050bc:	4618      	mov	r0, r3
 80050be:	f002 fba1 	bl	8007804 <RCCEx_PLL2_Config>
 80050c2:	4603      	mov	r3, r0
 80050c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050c8:	e00f      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050ce:	3328      	adds	r3, #40	@ 0x28
 80050d0:	2102      	movs	r1, #2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f002 fc48 	bl	8007968 <RCCEx_PLL3_Config>
 80050d8:	4603      	mov	r3, r0
 80050da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050de:	e004      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80050e6:	e000      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80050e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80050f2:	4ba5      	ldr	r3, [pc, #660]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80050fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005100:	4aa1      	ldr	r2, [pc, #644]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005102:	430b      	orrs	r3, r1
 8005104:	6513      	str	r3, [r2, #80]	@ 0x50
 8005106:	e003      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800510c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005110:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800511c:	f04f 0900 	mov.w	r9, #0
 8005120:	ea58 0309 	orrs.w	r3, r8, r9
 8005124:	d047      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005126:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800512a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512c:	2b04      	cmp	r3, #4
 800512e:	d82a      	bhi.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005130:	a201      	add	r2, pc, #4	@ (adr r2, 8005138 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	0800514d 	.word	0x0800514d
 800513c:	0800515b 	.word	0x0800515b
 8005140:	08005171 	.word	0x08005171
 8005144:	0800518f 	.word	0x0800518f
 8005148:	0800518f 	.word	0x0800518f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800514c:	4b8e      	ldr	r3, [pc, #568]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800514e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005150:	4a8d      	ldr	r2, [pc, #564]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005156:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005158:	e01a      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800515a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800515e:	3308      	adds	r3, #8
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f002 fb4e 	bl	8007804 <RCCEx_PLL2_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800516e:	e00f      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005170:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005174:	3328      	adds	r3, #40	@ 0x28
 8005176:	2100      	movs	r1, #0
 8005178:	4618      	mov	r0, r3
 800517a:	f002 fbf5 	bl	8007968 <RCCEx_PLL3_Config>
 800517e:	4603      	mov	r3, r0
 8005180:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005184:	e004      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800518c:	e000      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800518e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005190:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005198:	4b7b      	ldr	r3, [pc, #492]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800519a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519c:	f023 0107 	bic.w	r1, r3, #7
 80051a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051a6:	4a78      	ldr	r2, [pc, #480]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051a8:	430b      	orrs	r3, r1
 80051aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80051ac:	e003      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80051b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80051b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80051c2:	f04f 0b00 	mov.w	fp, #0
 80051c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80051ca:	d04c      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80051cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80051d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051d6:	d030      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80051d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051dc:	d829      	bhi.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051de:	2bc0      	cmp	r3, #192	@ 0xc0
 80051e0:	d02d      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80051e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80051e4:	d825      	bhi.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051e6:	2b80      	cmp	r3, #128	@ 0x80
 80051e8:	d018      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80051ea:	2b80      	cmp	r3, #128	@ 0x80
 80051ec:	d821      	bhi.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80051f2:	2b40      	cmp	r3, #64	@ 0x40
 80051f4:	d007      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80051f6:	e01c      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f8:	4b63      	ldr	r3, [pc, #396]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fc:	4a62      	ldr	r2, [pc, #392]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005204:	e01c      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005206:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800520a:	3308      	adds	r3, #8
 800520c:	2100      	movs	r1, #0
 800520e:	4618      	mov	r0, r3
 8005210:	f002 faf8 	bl	8007804 <RCCEx_PLL2_Config>
 8005214:	4603      	mov	r3, r0
 8005216:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800521a:	e011      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800521c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005220:	3328      	adds	r3, #40	@ 0x28
 8005222:	2100      	movs	r1, #0
 8005224:	4618      	mov	r0, r3
 8005226:	f002 fb9f 	bl	8007968 <RCCEx_PLL3_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005230:	e006      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005238:	e002      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800523a:	bf00      	nop
 800523c:	e000      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800523e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005240:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005248:	4b4f      	ldr	r3, [pc, #316]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800524a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800524c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005250:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005256:	4a4c      	ldr	r2, [pc, #304]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005258:	430b      	orrs	r3, r1
 800525a:	6513      	str	r3, [r2, #80]	@ 0x50
 800525c:	e003      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005262:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005266:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005272:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005276:	2300      	movs	r3, #0
 8005278:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800527c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005280:	460b      	mov	r3, r1
 8005282:	4313      	orrs	r3, r2
 8005284:	d053      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005286:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800528a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800528e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005292:	d035      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005294:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005298:	d82e      	bhi.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800529a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800529e:	d031      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80052a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80052a4:	d828      	bhi.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80052a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052aa:	d01a      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80052ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052b0:	d822      	bhi.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80052b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052ba:	d007      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80052bc:	e01c      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052be:	4b32      	ldr	r3, [pc, #200]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c2:	4a31      	ldr	r2, [pc, #196]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052ca:	e01c      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052d0:	3308      	adds	r3, #8
 80052d2:	2100      	movs	r1, #0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f002 fa95 	bl	8007804 <RCCEx_PLL2_Config>
 80052da:	4603      	mov	r3, r0
 80052dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80052e0:	e011      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052e6:	3328      	adds	r3, #40	@ 0x28
 80052e8:	2100      	movs	r1, #0
 80052ea:	4618      	mov	r0, r3
 80052ec:	f002 fb3c 	bl	8007968 <RCCEx_PLL3_Config>
 80052f0:	4603      	mov	r3, r0
 80052f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052f6:	e006      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80052fe:	e002      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005300:	bf00      	nop
 8005302:	e000      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005306:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10b      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800530e:	4b1e      	ldr	r3, [pc, #120]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005312:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800531a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800531e:	4a1a      	ldr	r2, [pc, #104]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005320:	430b      	orrs	r3, r1
 8005322:	6593      	str	r3, [r2, #88]	@ 0x58
 8005324:	e003      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005326:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800532a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800532e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800533a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800533e:	2300      	movs	r3, #0
 8005340:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005344:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005348:	460b      	mov	r3, r1
 800534a:	4313      	orrs	r3, r2
 800534c:	d056      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800534e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005356:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800535a:	d038      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800535c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005360:	d831      	bhi.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005362:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005366:	d034      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005368:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800536c:	d82b      	bhi.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800536e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005372:	d01d      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005374:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005378:	d825      	bhi.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d006      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800537e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005382:	d00a      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005384:	e01f      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005386:	bf00      	nop
 8005388:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800538c:	4ba2      	ldr	r3, [pc, #648]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800538e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005390:	4aa1      	ldr	r2, [pc, #644]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005398:	e01c      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800539a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800539e:	3308      	adds	r3, #8
 80053a0:	2100      	movs	r1, #0
 80053a2:	4618      	mov	r0, r3
 80053a4:	f002 fa2e 	bl	8007804 <RCCEx_PLL2_Config>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053ae:	e011      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053b4:	3328      	adds	r3, #40	@ 0x28
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f002 fad5 	bl	8007968 <RCCEx_PLL3_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053c4:	e006      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80053cc:	e002      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80053ce:	bf00      	nop
 80053d0:	e000      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80053d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10b      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80053dc:	4b8e      	ldr	r3, [pc, #568]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80053e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80053ec:	4a8a      	ldr	r2, [pc, #552]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ee:	430b      	orrs	r3, r1
 80053f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80053f2:	e003      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80053f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005408:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800540c:	2300      	movs	r3, #0
 800540e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005412:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005416:	460b      	mov	r3, r1
 8005418:	4313      	orrs	r3, r2
 800541a:	d03a      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800541c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005422:	2b30      	cmp	r3, #48	@ 0x30
 8005424:	d01f      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005426:	2b30      	cmp	r3, #48	@ 0x30
 8005428:	d819      	bhi.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800542a:	2b20      	cmp	r3, #32
 800542c:	d00c      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800542e:	2b20      	cmp	r3, #32
 8005430:	d815      	bhi.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d019      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005436:	2b10      	cmp	r3, #16
 8005438:	d111      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800543a:	4b77      	ldr	r3, [pc, #476]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800543c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543e:	4a76      	ldr	r2, [pc, #472]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005444:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005446:	e011      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005448:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800544c:	3308      	adds	r3, #8
 800544e:	2102      	movs	r1, #2
 8005450:	4618      	mov	r0, r3
 8005452:	f002 f9d7 	bl	8007804 <RCCEx_PLL2_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800545c:	e006      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005464:	e002      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005466:	bf00      	nop
 8005468:	e000      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800546a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10a      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005474:	4b68      	ldr	r3, [pc, #416]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005478:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800547c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005482:	4a65      	ldr	r2, [pc, #404]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005484:	430b      	orrs	r3, r1
 8005486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005488:	e003      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800548e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005492:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800549e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80054a2:	2300      	movs	r3, #0
 80054a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80054a8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80054ac:	460b      	mov	r3, r1
 80054ae:	4313      	orrs	r3, r2
 80054b0:	d051      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80054b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054bc:	d035      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80054be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054c2:	d82e      	bhi.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054c8:	d031      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80054ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054ce:	d828      	bhi.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054d4:	d01a      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80054d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054da:	d822      	bhi.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80054e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054e4:	d007      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80054e6:	e01c      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e8:	4b4b      	ldr	r3, [pc, #300]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ec:	4a4a      	ldr	r2, [pc, #296]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054f4:	e01c      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054fa:	3308      	adds	r3, #8
 80054fc:	2100      	movs	r1, #0
 80054fe:	4618      	mov	r0, r3
 8005500:	f002 f980 	bl	8007804 <RCCEx_PLL2_Config>
 8005504:	4603      	mov	r3, r0
 8005506:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800550a:	e011      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800550c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005510:	3328      	adds	r3, #40	@ 0x28
 8005512:	2100      	movs	r1, #0
 8005514:	4618      	mov	r0, r3
 8005516:	f002 fa27 	bl	8007968 <RCCEx_PLL3_Config>
 800551a:	4603      	mov	r3, r0
 800551c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005520:	e006      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005528:	e002      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800552a:	bf00      	nop
 800552c:	e000      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800552e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005530:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005538:	4b37      	ldr	r3, [pc, #220]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800553a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800553c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005540:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005544:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005546:	4a34      	ldr	r2, [pc, #208]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005548:	430b      	orrs	r3, r1
 800554a:	6513      	str	r3, [r2, #80]	@ 0x50
 800554c:	e003      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005552:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005562:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005566:	2300      	movs	r3, #0
 8005568:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800556c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005570:	460b      	mov	r3, r1
 8005572:	4313      	orrs	r3, r2
 8005574:	d056      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005576:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800557a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800557c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005580:	d033      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005582:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005586:	d82c      	bhi.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005588:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800558c:	d02f      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800558e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005592:	d826      	bhi.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005594:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005598:	d02b      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800559a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800559e:	d820      	bhi.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055a4:	d012      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80055a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055aa:	d81a      	bhi.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d022      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80055b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055b4:	d115      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055ba:	3308      	adds	r3, #8
 80055bc:	2101      	movs	r1, #1
 80055be:	4618      	mov	r0, r3
 80055c0:	f002 f920 	bl	8007804 <RCCEx_PLL2_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80055ca:	e015      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80055d0:	3328      	adds	r3, #40	@ 0x28
 80055d2:	2101      	movs	r1, #1
 80055d4:	4618      	mov	r0, r3
 80055d6:	f002 f9c7 	bl	8007968 <RCCEx_PLL3_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80055e0:	e00a      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80055e8:	e006      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055ea:	bf00      	nop
 80055ec:	e004      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055ee:	bf00      	nop
 80055f0:	e002      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055f2:	bf00      	nop
 80055f4:	e000      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10d      	bne.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005600:	4b05      	ldr	r3, [pc, #20]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005604:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005608:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800560c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800560e:	4a02      	ldr	r2, [pc, #8]	@ (8005618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005610:	430b      	orrs	r3, r1
 8005612:	6513      	str	r3, [r2, #80]	@ 0x50
 8005614:	e006      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005616:	bf00      	nop
 8005618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005620:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005624:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005630:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005634:	2300      	movs	r3, #0
 8005636:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800563a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800563e:	460b      	mov	r3, r1
 8005640:	4313      	orrs	r3, r2
 8005642:	d055      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005644:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005648:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800564c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005650:	d033      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005652:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005656:	d82c      	bhi.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800565c:	d02f      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005662:	d826      	bhi.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005664:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005668:	d02b      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800566a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800566e:	d820      	bhi.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005674:	d012      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005676:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800567a:	d81a      	bhi.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d022      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005680:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005684:	d115      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800568a:	3308      	adds	r3, #8
 800568c:	2101      	movs	r1, #1
 800568e:	4618      	mov	r0, r3
 8005690:	f002 f8b8 	bl	8007804 <RCCEx_PLL2_Config>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800569a:	e015      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800569c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056a0:	3328      	adds	r3, #40	@ 0x28
 80056a2:	2101      	movs	r1, #1
 80056a4:	4618      	mov	r0, r3
 80056a6:	f002 f95f 	bl	8007968 <RCCEx_PLL3_Config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80056b0:	e00a      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80056b8:	e006      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056ba:	bf00      	nop
 80056bc:	e004      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056be:	bf00      	nop
 80056c0:	e002      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056c2:	bf00      	nop
 80056c4:	e000      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10b      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80056d0:	4bb6      	ldr	r3, [pc, #728]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80056d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056e0:	4ab2      	ldr	r2, [pc, #712]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80056e2:	430b      	orrs	r3, r1
 80056e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80056e6:	e003      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80056ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80056f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80056fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005700:	2300      	movs	r3, #0
 8005702:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005706:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800570a:	460b      	mov	r3, r1
 800570c:	4313      	orrs	r3, r2
 800570e:	d02a      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005710:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005716:	2b00      	cmp	r3, #0
 8005718:	d011      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800571a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800571e:	d10a      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005720:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005724:	3308      	adds	r3, #8
 8005726:	2101      	movs	r1, #1
 8005728:	4618      	mov	r0, r3
 800572a:	f002 f86b 	bl	8007804 <RCCEx_PLL2_Config>
 800572e:	4603      	mov	r3, r0
 8005730:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005734:	e004      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800573c:	e000      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800573e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005740:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005748:	4b98      	ldr	r3, [pc, #608]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800574a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800574c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005750:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005756:	4a95      	ldr	r2, [pc, #596]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005758:	430b      	orrs	r3, r1
 800575a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800575c:	e003      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005762:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005766:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005772:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005776:	2300      	movs	r3, #0
 8005778:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800577c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005780:	460b      	mov	r3, r1
 8005782:	4313      	orrs	r3, r2
 8005784:	d037      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005786:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800578a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800578c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005790:	d00e      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005796:	d816      	bhi.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d018      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800579c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057a0:	d111      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a2:	4b82      	ldr	r3, [pc, #520]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a6:	4a81      	ldr	r2, [pc, #516]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80057ae:	e00f      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057b4:	3308      	adds	r3, #8
 80057b6:	2101      	movs	r1, #1
 80057b8:	4618      	mov	r0, r3
 80057ba:	f002 f823 	bl	8007804 <RCCEx_PLL2_Config>
 80057be:	4603      	mov	r3, r0
 80057c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80057c4:	e004      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80057cc:	e000      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80057ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057d8:	4b74      	ldr	r3, [pc, #464]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057dc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80057e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e6:	4a71      	ldr	r2, [pc, #452]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80057e8:	430b      	orrs	r3, r1
 80057ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80057ec:	e003      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80057f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005802:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005806:	2300      	movs	r3, #0
 8005808:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800580c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005810:	460b      	mov	r3, r1
 8005812:	4313      	orrs	r3, r2
 8005814:	d03a      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005816:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800581a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800581c:	2b03      	cmp	r3, #3
 800581e:	d81d      	bhi.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005820:	a201      	add	r2, pc, #4	@ (adr r2, 8005828 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005826:	bf00      	nop
 8005828:	08005865 	.word	0x08005865
 800582c:	08005839 	.word	0x08005839
 8005830:	08005847 	.word	0x08005847
 8005834:	08005865 	.word	0x08005865
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005838:	4b5c      	ldr	r3, [pc, #368]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800583a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583c:	4a5b      	ldr	r2, [pc, #364]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800583e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005844:	e00f      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005846:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800584a:	3308      	adds	r3, #8
 800584c:	2102      	movs	r1, #2
 800584e:	4618      	mov	r0, r3
 8005850:	f001 ffd8 	bl	8007804 <RCCEx_PLL2_Config>
 8005854:	4603      	mov	r3, r0
 8005856:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800585a:	e004      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005862:	e000      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005866:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10a      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800586e:	4b4f      	ldr	r3, [pc, #316]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005872:	f023 0103 	bic.w	r1, r3, #3
 8005876:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800587a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800587c:	4a4b      	ldr	r2, [pc, #300]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800587e:	430b      	orrs	r3, r1
 8005880:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005882:	e003      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005884:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005888:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800588c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005894:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005898:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800589c:	2300      	movs	r3, #0
 800589e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80058a6:	460b      	mov	r3, r1
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f000 80a0 	beq.w	80059ee <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058ae:	4b40      	ldr	r3, [pc, #256]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a3f      	ldr	r2, [pc, #252]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80058b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058ba:	f7fb facf 	bl	8000e5c <HAL_GetTick>
 80058be:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058c2:	e00b      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c4:	f7fb faca 	bl	8000e5c <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b64      	cmp	r3, #100	@ 0x64
 80058d2:	d903      	bls.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80058da:	e005      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058dc:	4b34      	ldr	r3, [pc, #208]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0ed      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80058e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d17a      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058f0:	4b2e      	ldr	r3, [pc, #184]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80058f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80058f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80058fc:	4053      	eors	r3, r2
 80058fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005902:	2b00      	cmp	r3, #0
 8005904:	d015      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005906:	4b29      	ldr	r3, [pc, #164]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800590e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005912:	4b26      	ldr	r3, [pc, #152]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005916:	4a25      	ldr	r2, [pc, #148]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800591c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800591e:	4b23      	ldr	r3, [pc, #140]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005922:	4a22      	ldr	r2, [pc, #136]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005924:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005928:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800592a:	4a20      	ldr	r2, [pc, #128]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800592c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005930:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005936:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800593a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800593e:	d118      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005940:	f7fb fa8c 	bl	8000e5c <HAL_GetTick>
 8005944:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005948:	e00d      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800594a:	f7fb fa87 	bl	8000e5c <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005954:	1ad2      	subs	r2, r2, r3
 8005956:	f241 3388 	movw	r3, #5000	@ 0x1388
 800595a:	429a      	cmp	r2, r3
 800595c:	d903      	bls.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8005964:	e005      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005966:	4b11      	ldr	r3, [pc, #68]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0eb      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005972:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005976:	2b00      	cmp	r3, #0
 8005978:	d130      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800597a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800597e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005986:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800598a:	d115      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800598c:	4b07      	ldr	r3, [pc, #28]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005994:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005998:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800599c:	091a      	lsrs	r2, r3, #4
 800599e:	4b05      	ldr	r3, [pc, #20]	@ (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	4a02      	ldr	r2, [pc, #8]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6113      	str	r3, [r2, #16]
 80059a8:	e00c      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80059aa:	bf00      	nop
 80059ac:	58024400 	.word	0x58024400
 80059b0:	58024800 	.word	0x58024800
 80059b4:	00ffffcf 	.word	0x00ffffcf
 80059b8:	4bd4      	ldr	r3, [pc, #848]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	4ad3      	ldr	r2, [pc, #844]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80059be:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80059c2:	6113      	str	r3, [r2, #16]
 80059c4:	4bd1      	ldr	r3, [pc, #836]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80059c6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80059c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d4:	4acd      	ldr	r2, [pc, #820]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80059d6:	430b      	orrs	r3, r1
 80059d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80059da:	e008      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059e0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80059e4:	e003      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80059ea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80059ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f002 0301 	and.w	r3, r2, #1
 80059fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059fe:	2300      	movs	r3, #0
 8005a00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a08:	460b      	mov	r3, r1
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f000 808b 	beq.w	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005a10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a18:	2b28      	cmp	r3, #40	@ 0x28
 8005a1a:	d86b      	bhi.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a24 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005afd 	.word	0x08005afd
 8005a28:	08005af5 	.word	0x08005af5
 8005a2c:	08005af5 	.word	0x08005af5
 8005a30:	08005af5 	.word	0x08005af5
 8005a34:	08005af5 	.word	0x08005af5
 8005a38:	08005af5 	.word	0x08005af5
 8005a3c:	08005af5 	.word	0x08005af5
 8005a40:	08005af5 	.word	0x08005af5
 8005a44:	08005ac9 	.word	0x08005ac9
 8005a48:	08005af5 	.word	0x08005af5
 8005a4c:	08005af5 	.word	0x08005af5
 8005a50:	08005af5 	.word	0x08005af5
 8005a54:	08005af5 	.word	0x08005af5
 8005a58:	08005af5 	.word	0x08005af5
 8005a5c:	08005af5 	.word	0x08005af5
 8005a60:	08005af5 	.word	0x08005af5
 8005a64:	08005adf 	.word	0x08005adf
 8005a68:	08005af5 	.word	0x08005af5
 8005a6c:	08005af5 	.word	0x08005af5
 8005a70:	08005af5 	.word	0x08005af5
 8005a74:	08005af5 	.word	0x08005af5
 8005a78:	08005af5 	.word	0x08005af5
 8005a7c:	08005af5 	.word	0x08005af5
 8005a80:	08005af5 	.word	0x08005af5
 8005a84:	08005afd 	.word	0x08005afd
 8005a88:	08005af5 	.word	0x08005af5
 8005a8c:	08005af5 	.word	0x08005af5
 8005a90:	08005af5 	.word	0x08005af5
 8005a94:	08005af5 	.word	0x08005af5
 8005a98:	08005af5 	.word	0x08005af5
 8005a9c:	08005af5 	.word	0x08005af5
 8005aa0:	08005af5 	.word	0x08005af5
 8005aa4:	08005afd 	.word	0x08005afd
 8005aa8:	08005af5 	.word	0x08005af5
 8005aac:	08005af5 	.word	0x08005af5
 8005ab0:	08005af5 	.word	0x08005af5
 8005ab4:	08005af5 	.word	0x08005af5
 8005ab8:	08005af5 	.word	0x08005af5
 8005abc:	08005af5 	.word	0x08005af5
 8005ac0:	08005af5 	.word	0x08005af5
 8005ac4:	08005afd 	.word	0x08005afd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ac8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005acc:	3308      	adds	r3, #8
 8005ace:	2101      	movs	r1, #1
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 fe97 	bl	8007804 <RCCEx_PLL2_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005adc:	e00f      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ae2:	3328      	adds	r3, #40	@ 0x28
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f001 ff3e 	bl	8007968 <RCCEx_PLL3_Config>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005af2:	e004      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005afa:	e000      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005afe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10b      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b06:	4b81      	ldr	r3, [pc, #516]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b0a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005b0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b16:	4a7d      	ldr	r2, [pc, #500]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b1c:	e003      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2e:	f002 0302 	and.w	r3, r2, #2
 8005b32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b36:	2300      	movs	r3, #0
 8005b38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005b3c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005b40:	460b      	mov	r3, r1
 8005b42:	4313      	orrs	r3, r2
 8005b44:	d042      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b4c:	2b05      	cmp	r3, #5
 8005b4e:	d825      	bhi.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005b50:	a201      	add	r2, pc, #4	@ (adr r2, 8005b58 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005ba5 	.word	0x08005ba5
 8005b5c:	08005b71 	.word	0x08005b71
 8005b60:	08005b87 	.word	0x08005b87
 8005b64:	08005ba5 	.word	0x08005ba5
 8005b68:	08005ba5 	.word	0x08005ba5
 8005b6c:	08005ba5 	.word	0x08005ba5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b74:	3308      	adds	r3, #8
 8005b76:	2101      	movs	r1, #1
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f001 fe43 	bl	8007804 <RCCEx_PLL2_Config>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b84:	e00f      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b8a:	3328      	adds	r3, #40	@ 0x28
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f001 feea 	bl	8007968 <RCCEx_PLL3_Config>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b9a:	e004      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ba2:	e000      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005bae:	4b57      	ldr	r3, [pc, #348]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb2:	f023 0107 	bic.w	r1, r3, #7
 8005bb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bbc:	4a53      	ldr	r2, [pc, #332]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8005bc2:	e003      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bc8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f002 0304 	and.w	r3, r2, #4
 8005bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005be2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4313      	orrs	r3, r2
 8005bea:	d044      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005bec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bf4:	2b05      	cmp	r3, #5
 8005bf6:	d825      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8005c00 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfe:	bf00      	nop
 8005c00:	08005c4d 	.word	0x08005c4d
 8005c04:	08005c19 	.word	0x08005c19
 8005c08:	08005c2f 	.word	0x08005c2f
 8005c0c:	08005c4d 	.word	0x08005c4d
 8005c10:	08005c4d 	.word	0x08005c4d
 8005c14:	08005c4d 	.word	0x08005c4d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	2101      	movs	r1, #1
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 fdef 	bl	8007804 <RCCEx_PLL2_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005c2c:	e00f      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c32:	3328      	adds	r3, #40	@ 0x28
 8005c34:	2101      	movs	r1, #1
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 fe96 	bl	8007968 <RCCEx_PLL3_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005c42:	e004      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c4a:	e000      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c56:	4b2d      	ldr	r3, [pc, #180]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c5a:	f023 0107 	bic.w	r1, r3, #7
 8005c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c66:	4a29      	ldr	r2, [pc, #164]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c6c:	e003      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f002 0320 	and.w	r3, r2, #32
 8005c82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c86:	2300      	movs	r3, #0
 8005c88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c90:	460b      	mov	r3, r1
 8005c92:	4313      	orrs	r3, r2
 8005c94:	d057      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ca2:	d035      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ca8:	d82c      	bhi.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cae:	d031      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb4:	d826      	bhi.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005cb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005cba:	d02d      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005cbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005cc0:	d820      	bhi.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005cc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cc6:	d012      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005cc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ccc:	d81a      	bhi.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d024      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005cd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cd6:	d115      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cdc:	3308      	adds	r3, #8
 8005cde:	2100      	movs	r1, #0
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f001 fd8f 	bl	8007804 <RCCEx_PLL2_Config>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005cec:	e017      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cf2:	3328      	adds	r3, #40	@ 0x28
 8005cf4:	2102      	movs	r1, #2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 fe36 	bl	8007968 <RCCEx_PLL3_Config>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d02:	e00c      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005d0a:	e008      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005d0c:	58024400 	.word	0x58024400
        break;
 8005d10:	bf00      	nop
 8005d12:	e004      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005d14:	bf00      	nop
 8005d16:	e002      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005d18:	bf00      	nop
 8005d1a:	e000      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10b      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d26:	4bc2      	ldr	r3, [pc, #776]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005d2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d36:	4abe      	ldr	r2, [pc, #760]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d3c:	e003      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d42:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d56:	2300      	movs	r3, #0
 8005d58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005d5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005d60:	460b      	mov	r3, r1
 8005d62:	4313      	orrs	r3, r2
 8005d64:	d055      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005d66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d6e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d72:	d033      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005d74:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005d78:	d82c      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d7e:	d02f      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005d80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d84:	d826      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d8a:	d02b      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005d8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d90:	d820      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d96:	d012      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d9c:	d81a      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d022      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005da6:	d115      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005da8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dac:	3308      	adds	r3, #8
 8005dae:	2100      	movs	r1, #0
 8005db0:	4618      	mov	r0, r3
 8005db2:	f001 fd27 	bl	8007804 <RCCEx_PLL2_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005dbc:	e015      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005dbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dc2:	3328      	adds	r3, #40	@ 0x28
 8005dc4:	2102      	movs	r1, #2
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 fdce 	bl	8007968 <RCCEx_PLL3_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005dd2:	e00a      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005dda:	e006      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005ddc:	bf00      	nop
 8005dde:	e004      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005de0:	bf00      	nop
 8005de2:	e002      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005de4:	bf00      	nop
 8005de6:	e000      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8005de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10b      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005df2:	4b8f      	ldr	r3, [pc, #572]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e02:	4a8b      	ldr	r2, [pc, #556]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005e04:	430b      	orrs	r3, r1
 8005e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e08:	e003      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005e12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005e1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e22:	2300      	movs	r3, #0
 8005e24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e28:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	d055      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e3a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005e3e:	d033      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005e40:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005e44:	d82c      	bhi.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005e46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e4a:	d02f      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e50:	d826      	bhi.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005e52:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005e56:	d02b      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005e58:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005e5c:	d820      	bhi.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005e5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e62:	d012      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005e64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e68:	d81a      	bhi.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d022      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005e6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e72:	d115      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e78:	3308      	adds	r3, #8
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 fcc1 	bl	8007804 <RCCEx_PLL2_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e88:	e015      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e8e:	3328      	adds	r3, #40	@ 0x28
 8005e90:	2102      	movs	r1, #2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f001 fd68 	bl	8007968 <RCCEx_PLL3_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e9e:	e00a      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ea6:	e006      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005ea8:	bf00      	nop
 8005eaa:	e004      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005eac:	bf00      	nop
 8005eae:	e002      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005eb0:	bf00      	nop
 8005eb2:	e000      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10b      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005ebe:	4b5c      	ldr	r3, [pc, #368]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec2:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005ec6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ece:	4a58      	ldr	r2, [pc, #352]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ed4:	e003      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005eda:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005ede:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	f002 0308 	and.w	r3, r2, #8
 8005eea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ef4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4313      	orrs	r3, r2
 8005efc:	d01e      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005efe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f0a:	d10c      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f10:	3328      	adds	r3, #40	@ 0x28
 8005f12:	2102      	movs	r1, #2
 8005f14:	4618      	mov	r0, r3
 8005f16:	f001 fd27 	bl	8007968 <RCCEx_PLL3_Config>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005f26:	4b42      	ldr	r3, [pc, #264]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f36:	4a3e      	ldr	r2, [pc, #248]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f38:	430b      	orrs	r3, r1
 8005f3a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f002 0310 	and.w	r3, r2, #16
 8005f48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005f52:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005f56:	460b      	mov	r3, r1
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	d01e      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f68:	d10c      	bne.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f6e:	3328      	adds	r3, #40	@ 0x28
 8005f70:	2102      	movs	r1, #2
 8005f72:	4618      	mov	r0, r3
 8005f74:	f001 fcf8 	bl	8007968 <RCCEx_PLL3_Config>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f84:	4b2a      	ldr	r3, [pc, #168]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f88:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f94:	4a26      	ldr	r2, [pc, #152]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005f96:	430b      	orrs	r3, r1
 8005f98:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005fa6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005faa:	2300      	movs	r3, #0
 8005fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fb0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	d040      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005fc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fc6:	d022      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8005fc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fcc:	d81b      	bhi.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8005fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fd6:	d00b      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8005fd8:	e015      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fde:	3308      	adds	r3, #8
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f001 fc0e 	bl	8007804 <RCCEx_PLL2_Config>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005fee:	e00f      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ff0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ff4:	3328      	adds	r3, #40	@ 0x28
 8005ff6:	2102      	movs	r1, #2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f001 fcb5 	bl	8007968 <RCCEx_PLL3_Config>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006004:	e004      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800600c:	e000      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800600e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006010:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10d      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006018:	4b05      	ldr	r3, [pc, #20]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800601a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006020:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006024:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006028:	4a01      	ldr	r2, [pc, #4]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800602a:	430b      	orrs	r3, r1
 800602c:	6593      	str	r3, [r2, #88]	@ 0x58
 800602e:	e005      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8006030:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006034:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006038:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800603c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006048:	67bb      	str	r3, [r7, #120]	@ 0x78
 800604a:	2300      	movs	r3, #0
 800604c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800604e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006052:	460b      	mov	r3, r1
 8006054:	4313      	orrs	r3, r2
 8006056:	d03b      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006058:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800605c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006060:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006064:	d01f      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8006066:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800606a:	d818      	bhi.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800606c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006070:	d003      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006072:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006076:	d007      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8006078:	e011      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800607a:	4b64      	ldr	r3, [pc, #400]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800607c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607e:	4a63      	ldr	r2, [pc, #396]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006084:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006086:	e00f      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800608c:	3328      	adds	r3, #40	@ 0x28
 800608e:	2101      	movs	r1, #1
 8006090:	4618      	mov	r0, r3
 8006092:	f001 fc69 	bl	8007968 <RCCEx_PLL3_Config>
 8006096:	4603      	mov	r3, r0
 8006098:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 800609c:	e004      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060a4:	e000      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80060a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10b      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060b0:	4b56      	ldr	r3, [pc, #344]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80060b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80060b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060c0:	4a52      	ldr	r2, [pc, #328]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80060c2:	430b      	orrs	r3, r1
 80060c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80060c6:	e003      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060cc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80060d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80060dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80060de:	2300      	movs	r3, #0
 80060e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80060e2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80060e6:	460b      	mov	r3, r1
 80060e8:	4313      	orrs	r3, r2
 80060ea:	d031      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80060ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80060f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060fa:	d007      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80060fc:	e011      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060fe:	4b43      	ldr	r3, [pc, #268]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006102:	4a42      	ldr	r2, [pc, #264]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006108:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800610a:	e00e      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800610c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006110:	3308      	adds	r3, #8
 8006112:	2102      	movs	r1, #2
 8006114:	4618      	mov	r0, r3
 8006116:	f001 fb75 	bl	8007804 <RCCEx_PLL2_Config>
 800611a:	4603      	mov	r3, r0
 800611c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006120:	e003      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800612a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006132:	4b36      	ldr	r3, [pc, #216]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006136:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800613a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800613e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006140:	4a32      	ldr	r2, [pc, #200]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006142:	430b      	orrs	r3, r1
 8006144:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006146:	e003      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006148:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800614c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800615c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800615e:	2300      	movs	r3, #0
 8006160:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006162:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006166:	460b      	mov	r3, r1
 8006168:	4313      	orrs	r3, r2
 800616a:	d00c      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800616c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006170:	3328      	adds	r3, #40	@ 0x28
 8006172:	2102      	movs	r1, #2
 8006174:	4618      	mov	r0, r3
 8006176:	f001 fbf7 	bl	8007968 <RCCEx_PLL3_Config>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006186:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006192:	663b      	str	r3, [r7, #96]	@ 0x60
 8006194:	2300      	movs	r3, #0
 8006196:	667b      	str	r3, [r7, #100]	@ 0x64
 8006198:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800619c:	460b      	mov	r3, r1
 800619e:	4313      	orrs	r3, r2
 80061a0:	d03a      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80061a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061ae:	d018      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80061b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061b4:	d811      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80061b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ba:	d014      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80061bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061c0:	d80b      	bhi.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d011      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80061c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ca:	d106      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061cc:	4b0f      	ldr	r3, [pc, #60]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80061ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d0:	4a0e      	ldr	r2, [pc, #56]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80061d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80061d8:	e008      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80061e0:	e004      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80061e2:	bf00      	nop
 80061e4:	e002      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80061e6:	bf00      	nop
 80061e8:	e000      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80061ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10d      	bne.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061f4:	4b05      	ldr	r3, [pc, #20]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80061f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80061fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006204:	4a01      	ldr	r2, [pc, #4]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006206:	430b      	orrs	r3, r1
 8006208:	6553      	str	r3, [r2, #84]	@ 0x54
 800620a:	e005      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800620c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006210:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006214:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006224:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006226:	2300      	movs	r3, #0
 8006228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800622a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800622e:	460b      	mov	r3, r1
 8006230:	4313      	orrs	r3, r2
 8006232:	d009      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006234:	4baa      	ldr	r3, [pc, #680]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006238:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800623c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006240:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006242:	4aa7      	ldr	r2, [pc, #668]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006244:	430b      	orrs	r3, r1
 8006246:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006248:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006254:	653b      	str	r3, [r7, #80]	@ 0x50
 8006256:	2300      	movs	r3, #0
 8006258:	657b      	str	r3, [r7, #84]	@ 0x54
 800625a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800625e:	460b      	mov	r3, r1
 8006260:	4313      	orrs	r3, r2
 8006262:	d00a      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006264:	4b9e      	ldr	r3, [pc, #632]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800626c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006270:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006274:	4a9a      	ldr	r2, [pc, #616]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006276:	430b      	orrs	r3, r1
 8006278:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800627a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006286:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006288:	2300      	movs	r3, #0
 800628a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800628c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006290:	460b      	mov	r3, r1
 8006292:	4313      	orrs	r3, r2
 8006294:	d009      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006296:	4b92      	ldr	r3, [pc, #584]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800629a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800629e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062a4:	4a8e      	ldr	r2, [pc, #568]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062a6:	430b      	orrs	r3, r1
 80062a8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80062aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80062b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80062b8:	2300      	movs	r3, #0
 80062ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80062bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80062c0:	460b      	mov	r3, r1
 80062c2:	4313      	orrs	r3, r2
 80062c4:	d00e      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062c6:	4b86      	ldr	r3, [pc, #536]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	4a85      	ldr	r2, [pc, #532]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80062d0:	6113      	str	r3, [r2, #16]
 80062d2:	4b83      	ldr	r3, [pc, #524]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062d4:	6919      	ldr	r1, [r3, #16]
 80062d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80062de:	4a80      	ldr	r2, [pc, #512]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80062e0:	430b      	orrs	r3, r1
 80062e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80062e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80062f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062f2:	2300      	movs	r3, #0
 80062f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80062fa:	460b      	mov	r3, r1
 80062fc:	4313      	orrs	r3, r2
 80062fe:	d009      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006300:	4b77      	ldr	r3, [pc, #476]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006304:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006308:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800630c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630e:	4a74      	ldr	r2, [pc, #464]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006310:	430b      	orrs	r3, r1
 8006312:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006314:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006320:	633b      	str	r3, [r7, #48]	@ 0x30
 8006322:	2300      	movs	r3, #0
 8006324:	637b      	str	r3, [r7, #52]	@ 0x34
 8006326:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800632a:	460b      	mov	r3, r1
 800632c:	4313      	orrs	r3, r2
 800632e:	d00a      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006330:	4b6b      	ldr	r3, [pc, #428]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006334:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800633c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006340:	4a67      	ldr	r2, [pc, #412]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006342:	430b      	orrs	r3, r1
 8006344:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	2100      	movs	r1, #0
 8006350:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006358:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800635c:	460b      	mov	r3, r1
 800635e:	4313      	orrs	r3, r2
 8006360:	d011      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006362:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006366:	3308      	adds	r3, #8
 8006368:	2100      	movs	r1, #0
 800636a:	4618      	mov	r0, r3
 800636c:	f001 fa4a 	bl	8007804 <RCCEx_PLL2_Config>
 8006370:	4603      	mov	r3, r0
 8006372:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006376:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006382:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006386:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	2100      	movs	r1, #0
 8006390:	6239      	str	r1, [r7, #32]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	627b      	str	r3, [r7, #36]	@ 0x24
 8006398:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800639c:	460b      	mov	r3, r1
 800639e:	4313      	orrs	r3, r2
 80063a0:	d011      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063a6:	3308      	adds	r3, #8
 80063a8:	2101      	movs	r1, #1
 80063aa:	4618      	mov	r0, r3
 80063ac:	f001 fa2a 	bl	8007804 <RCCEx_PLL2_Config>
 80063b0:	4603      	mov	r3, r0
 80063b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80063b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80063c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	2100      	movs	r1, #0
 80063d0:	61b9      	str	r1, [r7, #24]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	61fb      	str	r3, [r7, #28]
 80063d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80063dc:	460b      	mov	r3, r1
 80063de:	4313      	orrs	r3, r2
 80063e0:	d011      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063e6:	3308      	adds	r3, #8
 80063e8:	2102      	movs	r1, #2
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 fa0a 	bl	8007804 <RCCEx_PLL2_Config>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80063f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006402:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006406:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	2100      	movs	r1, #0
 8006410:	6139      	str	r1, [r7, #16]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800641c:	460b      	mov	r3, r1
 800641e:	4313      	orrs	r3, r2
 8006420:	d011      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006422:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006426:	3328      	adds	r3, #40	@ 0x28
 8006428:	2100      	movs	r1, #0
 800642a:	4618      	mov	r0, r3
 800642c:	f001 fa9c 	bl	8007968 <RCCEx_PLL3_Config>
 8006430:	4603      	mov	r3, r0
 8006432:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8006436:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006442:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	2100      	movs	r1, #0
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800645c:	460b      	mov	r3, r1
 800645e:	4313      	orrs	r3, r2
 8006460:	d011      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006462:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006466:	3328      	adds	r3, #40	@ 0x28
 8006468:	2101      	movs	r1, #1
 800646a:	4618      	mov	r0, r3
 800646c:	f001 fa7c 	bl	8007968 <RCCEx_PLL3_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006476:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006482:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006486:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	2100      	movs	r1, #0
 8006490:	6039      	str	r1, [r7, #0]
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	607b      	str	r3, [r7, #4]
 8006498:	e9d7 1200 	ldrd	r1, r2, [r7]
 800649c:	460b      	mov	r3, r1
 800649e:	4313      	orrs	r3, r2
 80064a0:	d011      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064a6:	3328      	adds	r3, #40	@ 0x28
 80064a8:	2102      	movs	r1, #2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f001 fa5c 	bl	8007968 <RCCEx_PLL3_Config>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80064b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d003      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80064c6:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e000      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80064da:	46bd      	mov	sp, r7
 80064dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e0:	58024400 	.word	0x58024400

080064e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b090      	sub	sp, #64	@ 0x40
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80064ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064f2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80064f6:	430b      	orrs	r3, r1
 80064f8:	f040 8094 	bne.w	8006624 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80064fc:	4b9e      	ldr	r3, [pc, #632]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	2b04      	cmp	r3, #4
 800650a:	f200 8087 	bhi.w	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800650e:	a201      	add	r2, pc, #4	@ (adr r2, 8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006514:	08006529 	.word	0x08006529
 8006518:	08006551 	.word	0x08006551
 800651c:	08006579 	.word	0x08006579
 8006520:	08006615 	.word	0x08006615
 8006524:	080065a1 	.word	0x080065a1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006528:	4b93      	ldr	r3, [pc, #588]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006530:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006534:	d108      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800653a:	4618      	mov	r0, r3
 800653c:	f001 f810 	bl	8007560 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006544:	f000 bd45 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006548:	2300      	movs	r3, #0
 800654a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800654c:	f000 bd41 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006550:	4b89      	ldr	r3, [pc, #548]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006558:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800655c:	d108      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800655e:	f107 0318 	add.w	r3, r7, #24
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fd54 	bl	8007010 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800656c:	f000 bd31 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006574:	f000 bd2d 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006578:	4b7f      	ldr	r3, [pc, #508]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006580:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006584:	d108      	bne.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006586:	f107 030c 	add.w	r3, r7, #12
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fe94 	bl	80072b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006594:	f000 bd1d 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006598:	2300      	movs	r3, #0
 800659a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800659c:	f000 bd19 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065a0:	4b75      	ldr	r3, [pc, #468]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80065a8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80065aa:	4b73      	ldr	r3, [pc, #460]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d10c      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80065b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065bc:	4b6e      	ldr	r3, [pc, #440]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	08db      	lsrs	r3, r3, #3
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	4a6d      	ldr	r2, [pc, #436]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
 80065cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065ce:	e01f      	b.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065d0:	4b69      	ldr	r3, [pc, #420]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065dc:	d106      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80065de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065e4:	d102      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80065e6:	4b66      	ldr	r3, [pc, #408]	@ (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80065e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065ea:	e011      	b.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065ec:	4b62      	ldr	r3, [pc, #392]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065f8:	d106      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80065fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006600:	d102      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006602:	4b60      	ldr	r3, [pc, #384]	@ (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006604:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006606:	e003      	b.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800660c:	f000 bce1 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006610:	f000 bcdf 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006614:	4b5c      	ldr	r3, [pc, #368]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006618:	f000 bcdb 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006620:	f000 bcd7 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006628:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800662c:	430b      	orrs	r3, r1
 800662e:	f040 80ad 	bne.w	800678c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006632:	4b51      	ldr	r3, [pc, #324]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006636:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800663a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800663c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006642:	d056      	beq.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800664a:	f200 8090 	bhi.w	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800664e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006650:	2bc0      	cmp	r3, #192	@ 0xc0
 8006652:	f000 8088 	beq.w	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006658:	2bc0      	cmp	r3, #192	@ 0xc0
 800665a:	f200 8088 	bhi.w	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800665e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006660:	2b80      	cmp	r3, #128	@ 0x80
 8006662:	d032      	beq.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006666:	2b80      	cmp	r3, #128	@ 0x80
 8006668:	f200 8081 	bhi.w	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800666c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006674:	2b40      	cmp	r3, #64	@ 0x40
 8006676:	d014      	beq.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006678:	e079      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800667a:	4b3f      	ldr	r3, [pc, #252]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006682:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006686:	d108      	bne.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800668c:	4618      	mov	r0, r3
 800668e:	f000 ff67 	bl	8007560 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006696:	f000 bc9c 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800669e:	f000 bc98 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066a2:	4b35      	ldr	r3, [pc, #212]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066ae:	d108      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066b0:	f107 0318 	add.w	r3, r7, #24
 80066b4:	4618      	mov	r0, r3
 80066b6:	f000 fcab 	bl	8007010 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066be:	f000 bc88 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066c6:	f000 bc84 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066d6:	d108      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066d8:	f107 030c 	add.w	r3, r7, #12
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 fdeb 	bl	80072b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066e6:	f000 bc74 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066ee:	f000 bc70 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066f2:	4b21      	ldr	r3, [pc, #132]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066fc:	4b1e      	ldr	r3, [pc, #120]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b04      	cmp	r3, #4
 8006706:	d10c      	bne.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670a:	2b00      	cmp	r3, #0
 800670c:	d109      	bne.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800670e:	4b1a      	ldr	r3, [pc, #104]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	08db      	lsrs	r3, r3, #3
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	4a18      	ldr	r2, [pc, #96]	@ (800677c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800671a:	fa22 f303 	lsr.w	r3, r2, r3
 800671e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006720:	e01f      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006722:	4b15      	ldr	r3, [pc, #84]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800672e:	d106      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006736:	d102      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006738:	4b11      	ldr	r3, [pc, #68]	@ (8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800673a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800673c:	e011      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800673e:	4b0e      	ldr	r3, [pc, #56]	@ (8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006746:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800674a:	d106      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800674c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006752:	d102      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006754:	4b0b      	ldr	r3, [pc, #44]	@ (8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006758:	e003      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800675e:	f000 bc38 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006762:	f000 bc36 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006766:	4b08      	ldr	r3, [pc, #32]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800676a:	f000 bc32 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006772:	f000 bc2e 	b.w	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006776:	bf00      	nop
 8006778:	58024400 	.word	0x58024400
 800677c:	03d09000 	.word	0x03d09000
 8006780:	003d0900 	.word	0x003d0900
 8006784:	017d7840 	.word	0x017d7840
 8006788:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800678c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006790:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006794:	430b      	orrs	r3, r1
 8006796:	f040 809c 	bne.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800679a:	4b9e      	ldr	r3, [pc, #632]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800679c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800679e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80067a2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80067a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067aa:	d054      	beq.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067b2:	f200 808b 	bhi.w	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80067b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80067bc:	f000 8083 	beq.w	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80067c6:	f200 8081 	bhi.w	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80067ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067d0:	d02f      	beq.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80067d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067d8:	d878      	bhi.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80067da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d004      	beq.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80067e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067e6:	d012      	beq.n	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80067e8:	e070      	b.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067ea:	4b8a      	ldr	r3, [pc, #552]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067f6:	d107      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 feaf 	bl	8007560 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006806:	e3e4      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006808:	2300      	movs	r3, #0
 800680a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800680c:	e3e1      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800680e:	4b81      	ldr	r3, [pc, #516]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006816:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800681a:	d107      	bne.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800681c:	f107 0318 	add.w	r3, r7, #24
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fbf5 	bl	8007010 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800682a:	e3d2      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800682c:	2300      	movs	r3, #0
 800682e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006830:	e3cf      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006832:	4b78      	ldr	r3, [pc, #480]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800683a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800683e:	d107      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006840:	f107 030c 	add.w	r3, r7, #12
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fd37 	bl	80072b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800684e:	e3c0      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006854:	e3bd      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006856:	4b6f      	ldr	r3, [pc, #444]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800685a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800685e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006860:	4b6c      	ldr	r3, [pc, #432]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b04      	cmp	r3, #4
 800686a:	d10c      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800686c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006872:	4b68      	ldr	r3, [pc, #416]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	08db      	lsrs	r3, r3, #3
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	4a66      	ldr	r2, [pc, #408]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800687e:	fa22 f303 	lsr.w	r3, r2, r3
 8006882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006884:	e01e      	b.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006886:	4b63      	ldr	r3, [pc, #396]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800688e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006892:	d106      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800689a:	d102      	bne.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800689c:	4b5f      	ldr	r3, [pc, #380]	@ (8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800689e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068a0:	e010      	b.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068a2:	4b5c      	ldr	r3, [pc, #368]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068ae:	d106      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80068b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068b6:	d102      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80068b8:	4b59      	ldr	r3, [pc, #356]	@ (8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80068ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068bc:	e002      	b.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80068c2:	e386      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80068c4:	e385      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80068c6:	4b57      	ldr	r3, [pc, #348]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80068c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ca:	e382      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068d0:	e37f      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80068d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068d6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80068da:	430b      	orrs	r3, r1
 80068dc:	f040 80a7 	bne.w	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80068e0:	4b4c      	ldr	r3, [pc, #304]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068e4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80068e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068f0:	d055      	beq.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80068f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068f8:	f200 8096 	bhi.w	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006902:	f000 8084 	beq.w	8006a0e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800690c:	f200 808c 	bhi.w	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006912:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006916:	d030      	beq.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800691e:	f200 8083 	bhi.w	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006924:	2b00      	cmp	r3, #0
 8006926:	d004      	beq.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800692e:	d012      	beq.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006930:	e07a      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006932:	4b38      	ldr	r3, [pc, #224]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800693a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800693e:	d107      	bne.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006944:	4618      	mov	r0, r3
 8006946:	f000 fe0b 	bl	8007560 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800694a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800694e:	e340      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006954:	e33d      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006956:	4b2f      	ldr	r3, [pc, #188]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800695e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006962:	d107      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006964:	f107 0318 	add.w	r3, r7, #24
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fb51 	bl	8007010 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006972:	e32e      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006978:	e32b      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800697a:	4b26      	ldr	r3, [pc, #152]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006982:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006986:	d107      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006988:	f107 030c 	add.w	r3, r7, #12
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fc93 	bl	80072b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006996:	e31c      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800699c:	e319      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800699e:	4b1d      	ldr	r3, [pc, #116]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d10c      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80069b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d109      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069ba:	4b16      	ldr	r3, [pc, #88]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	08db      	lsrs	r3, r3, #3
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	4a14      	ldr	r2, [pc, #80]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80069c6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069cc:	e01e      	b.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069ce:	4b11      	ldr	r3, [pc, #68]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069da:	d106      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80069dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069e2:	d102      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069e4:	4b0d      	ldr	r3, [pc, #52]	@ (8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80069e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069e8:	e010      	b.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069f6:	d106      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80069f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069fe:	d102      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a00:	4b07      	ldr	r3, [pc, #28]	@ (8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a04:	e002      	b.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006a0a:	e2e2      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a0c:	e2e1      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a0e:	4b05      	ldr	r3, [pc, #20]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a12:	e2de      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a14:	58024400 	.word	0x58024400
 8006a18:	03d09000 	.word	0x03d09000
 8006a1c:	003d0900 	.word	0x003d0900
 8006a20:	017d7840 	.word	0x017d7840
 8006a24:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a2c:	e2d1      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a32:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006a36:	430b      	orrs	r3, r1
 8006a38:	f040 809c 	bne.w	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006a3c:	4b93      	ldr	r3, [pc, #588]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a40:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006a44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a4c:	d054      	beq.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a54:	f200 808b 	bhi.w	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a5e:	f000 8083 	beq.w	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a68:	f200 8081 	bhi.w	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a72:	d02f      	beq.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a7a:	d878      	bhi.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a88:	d012      	beq.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006a8a:	e070      	b.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a8c:	4b7f      	ldr	r3, [pc, #508]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a98:	d107      	bne.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fd5e 	bl	8007560 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa8:	e293      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aae:	e290      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ab0:	4b76      	ldr	r3, [pc, #472]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ab8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006abc:	d107      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006abe:	f107 0318 	add.w	r3, r7, #24
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 faa4 	bl	8007010 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006acc:	e281      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ad2:	e27e      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ad4:	4b6d      	ldr	r3, [pc, #436]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ae0:	d107      	bne.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ae2:	f107 030c 	add.w	r3, r7, #12
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fbe6 	bl	80072b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006af0:	e26f      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006af6:	e26c      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006af8:	4b64      	ldr	r3, [pc, #400]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006afc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006b00:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b02:	4b62      	ldr	r3, [pc, #392]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0304 	and.w	r3, r3, #4
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d10c      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d109      	bne.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b14:	4b5d      	ldr	r3, [pc, #372]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	08db      	lsrs	r3, r3, #3
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	4a5c      	ldr	r2, [pc, #368]	@ (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006b20:	fa22 f303 	lsr.w	r3, r2, r3
 8006b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b26:	e01e      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b28:	4b58      	ldr	r3, [pc, #352]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b34:	d106      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b3c:	d102      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b3e:	4b55      	ldr	r3, [pc, #340]	@ (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b42:	e010      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b44:	4b51      	ldr	r3, [pc, #324]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b50:	d106      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b58:	d102      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b5a:	4b4f      	ldr	r3, [pc, #316]	@ (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b5e:	e002      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b60:	2300      	movs	r3, #0
 8006b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006b64:	e235      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b66:	e234      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b68:	4b4c      	ldr	r3, [pc, #304]	@ (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b6c:	e231      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b72:	e22e      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b78:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006b7c:	430b      	orrs	r3, r1
 8006b7e:	f040 808f 	bne.w	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006b82:	4b42      	ldr	r3, [pc, #264]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b86:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b92:	d06b      	beq.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b9a:	d874      	bhi.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ba2:	d056      	beq.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006baa:	d86c      	bhi.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bb2:	d03b      	beq.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006bba:	d864      	bhi.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bc2:	d021      	beq.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bca:	d85c      	bhi.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d004      	beq.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bd8:	d004      	beq.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006bda:	e054      	b.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006bdc:	f7fe fa22 	bl	8005024 <HAL_RCC_GetPCLK1Freq>
 8006be0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006be2:	e1f6      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006be4:	4b29      	ldr	r3, [pc, #164]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bf0:	d107      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bf2:	f107 0318 	add.w	r3, r7, #24
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fa0a 	bl	8007010 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c00:	e1e7      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c06:	e1e4      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c08:	4b20      	ldr	r3, [pc, #128]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c14:	d107      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c16:	f107 030c 	add.w	r3, r7, #12
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fb4c 	bl	80072b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c24:	e1d5      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c2a:	e1d2      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c2c:	4b17      	ldr	r3, [pc, #92]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d109      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c38:	4b14      	ldr	r3, [pc, #80]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	08db      	lsrs	r3, r3, #3
 8006c3e:	f003 0303 	and.w	r3, r3, #3
 8006c42:	4a13      	ldr	r2, [pc, #76]	@ (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006c44:	fa22 f303 	lsr.w	r3, r2, r3
 8006c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c4a:	e1c2      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c50:	e1bf      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006c52:	4b0e      	ldr	r3, [pc, #56]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c5e:	d102      	bne.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006c60:	4b0c      	ldr	r3, [pc, #48]	@ (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c64:	e1b5      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c66:	2300      	movs	r3, #0
 8006c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c6a:	e1b2      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c6c:	4b07      	ldr	r3, [pc, #28]	@ (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c78:	d102      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006c7a:	4b07      	ldr	r3, [pc, #28]	@ (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c7e:	e1a8      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c84:	e1a5      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c86:	2300      	movs	r3, #0
 8006c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c8a:	e1a2      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c8c:	58024400 	.word	0x58024400
 8006c90:	03d09000 	.word	0x03d09000
 8006c94:	003d0900 	.word	0x003d0900
 8006c98:	017d7840 	.word	0x017d7840
 8006c9c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	d173      	bne.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006cac:	4b9c      	ldr	r3, [pc, #624]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006cb4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cbc:	d02f      	beq.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cc4:	d863      	bhi.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d004      	beq.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cd2:	d012      	beq.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006cd4:	e05b      	b.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cd6:	4b92      	ldr	r3, [pc, #584]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ce2:	d107      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ce4:	f107 0318 	add.w	r3, r7, #24
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 f991 	bl	8007010 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cf2:	e16e      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cf8:	e16b      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cfa:	4b89      	ldr	r3, [pc, #548]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d06:	d107      	bne.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d08:	f107 030c 	add.w	r3, r7, #12
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 fad3 	bl	80072b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d16:	e15c      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d1c:	e159      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d1e:	4b80      	ldr	r3, [pc, #512]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d26:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d28:	4b7d      	ldr	r3, [pc, #500]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d10c      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d3a:	4b79      	ldr	r3, [pc, #484]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	08db      	lsrs	r3, r3, #3
 8006d40:	f003 0303 	and.w	r3, r3, #3
 8006d44:	4a77      	ldr	r2, [pc, #476]	@ (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006d46:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d4c:	e01e      	b.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d4e:	4b74      	ldr	r3, [pc, #464]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d5a:	d106      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d62:	d102      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d64:	4b70      	ldr	r3, [pc, #448]	@ (8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d68:	e010      	b.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d76:	d106      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d7e:	d102      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d80:	4b6a      	ldr	r3, [pc, #424]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d84:	e002      	b.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d8a:	e122      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d8c:	e121      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d92:	e11e      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d98:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006d9c:	430b      	orrs	r3, r1
 8006d9e:	d133      	bne.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006da0:	4b5f      	ldr	r3, [pc, #380]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006da8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d004      	beq.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006db6:	d012      	beq.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006db8:	e023      	b.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dba:	4b59      	ldr	r3, [pc, #356]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dc6:	d107      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fbc7 	bl	8007560 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dd6:	e0fc      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ddc:	e0f9      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dde:	4b50      	ldr	r3, [pc, #320]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006de6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dea:	d107      	bne.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dec:	f107 0318 	add.w	r3, r7, #24
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 f90d 	bl	8007010 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dfa:	e0ea      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e00:	e0e7      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e06:	e0e4      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e0c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006e10:	430b      	orrs	r3, r1
 8006e12:	f040 808d 	bne.w	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006e16:	4b42      	ldr	r3, [pc, #264]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e1a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006e1e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e26:	d06b      	beq.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e2e:	d874      	bhi.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e36:	d056      	beq.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e3e:	d86c      	bhi.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e46:	d03b      	beq.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006e4e:	d864      	bhi.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e56:	d021      	beq.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e5e:	d85c      	bhi.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d004      	beq.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e6c:	d004      	beq.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006e6e:	e054      	b.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006e70:	f000 f8b8 	bl	8006fe4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e74:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e76:	e0ac      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e78:	4b29      	ldr	r3, [pc, #164]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e84:	d107      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e86:	f107 0318 	add.w	r3, r7, #24
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 f8c0 	bl	8007010 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e94:	e09d      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e9a:	e09a      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e9c:	4b20      	ldr	r3, [pc, #128]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ea4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ea8:	d107      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eaa:	f107 030c 	add.w	r3, r7, #12
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fa02 	bl	80072b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb8:	e08b      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ebe:	e088      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ec0:	4b17      	ldr	r3, [pc, #92]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d109      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ecc:	4b14      	ldr	r3, [pc, #80]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	08db      	lsrs	r3, r3, #3
 8006ed2:	f003 0303 	and.w	r3, r3, #3
 8006ed6:	4a13      	ldr	r2, [pc, #76]	@ (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ede:	e078      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee4:	e075      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ef2:	d102      	bne.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ef8:	e06b      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006efe:	e068      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f00:	4b07      	ldr	r3, [pc, #28]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f0c:	d102      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006f0e:	4b07      	ldr	r3, [pc, #28]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f12:	e05e      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f18:	e05b      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f1e:	e058      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f20:	58024400 	.word	0x58024400
 8006f24:	03d09000 	.word	0x03d09000
 8006f28:	003d0900 	.word	0x003d0900
 8006f2c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f34:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	d148      	bne.n	8006fce <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006f3c:	4b27      	ldr	r3, [pc, #156]	@ (8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f4c:	d02a      	beq.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f54:	d838      	bhi.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d004      	beq.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f62:	d00d      	beq.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006f64:	e030      	b.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f66:	4b1d      	ldr	r3, [pc, #116]	@ (8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f72:	d102      	bne.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006f74:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f78:	e02b      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f7e:	e028      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f80:	4b16      	ldr	r3, [pc, #88]	@ (8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f8c:	d107      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fae4 	bl	8007560 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f9c:	e019      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fa2:	e016      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fb0:	d107      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fb2:	f107 0318 	add.w	r3, r7, #24
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 f82a 	bl	8007010 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fc0:	e007      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fc6:	e004      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fcc:	e001      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8006fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3740      	adds	r7, #64	@ 0x40
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	58024400 	.word	0x58024400
 8006fe0:	017d7840 	.word	0x017d7840

08006fe4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006fe8:	f7fd ffec 	bl	8004fc4 <HAL_RCC_GetHCLKFreq>
 8006fec:	4602      	mov	r2, r0
 8006fee:	4b06      	ldr	r3, [pc, #24]	@ (8007008 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	091b      	lsrs	r3, r3, #4
 8006ff4:	f003 0307 	and.w	r3, r3, #7
 8006ff8:	4904      	ldr	r1, [pc, #16]	@ (800700c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ffa:	5ccb      	ldrb	r3, [r1, r3]
 8006ffc:	f003 031f 	and.w	r3, r3, #31
 8007000:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007004:	4618      	mov	r0, r3
 8007006:	bd80      	pop	{r7, pc}
 8007008:	58024400 	.word	0x58024400
 800700c:	08010bbc 	.word	0x08010bbc

08007010 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007010:	b480      	push	{r7}
 8007012:	b089      	sub	sp, #36	@ 0x24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007018:	4ba1      	ldr	r3, [pc, #644]	@ (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800701a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701c:	f003 0303 	and.w	r3, r3, #3
 8007020:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007022:	4b9f      	ldr	r3, [pc, #636]	@ (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007026:	0b1b      	lsrs	r3, r3, #12
 8007028:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800702c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800702e:	4b9c      	ldr	r3, [pc, #624]	@ (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007032:	091b      	lsrs	r3, r3, #4
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800703a:	4b99      	ldr	r3, [pc, #612]	@ (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703e:	08db      	lsrs	r3, r3, #3
 8007040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	fb02 f303 	mul.w	r3, r2, r3
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 8111 	beq.w	8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	2b02      	cmp	r3, #2
 8007062:	f000 8083 	beq.w	800716c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b02      	cmp	r3, #2
 800706a:	f200 80a1 	bhi.w	80071b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d056      	beq.n	8007128 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800707a:	e099      	b.n	80071b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800707c:	4b88      	ldr	r3, [pc, #544]	@ (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0320 	and.w	r3, r3, #32
 8007084:	2b00      	cmp	r3, #0
 8007086:	d02d      	beq.n	80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007088:	4b85      	ldr	r3, [pc, #532]	@ (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	08db      	lsrs	r3, r3, #3
 800708e:	f003 0303 	and.w	r3, r3, #3
 8007092:	4a84      	ldr	r2, [pc, #528]	@ (80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007094:	fa22 f303 	lsr.w	r3, r2, r3
 8007098:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	ee07 3a90 	vmov	s15, r3
 80070a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070b2:	4b7b      	ldr	r3, [pc, #492]	@ (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070e2:	e087      	b.n	80071f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070f6:	4b6a      	ldr	r3, [pc, #424]	@ (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007106:	ed97 6a03 	vldr	s12, [r7, #12]
 800710a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800710e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800711a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800711e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007126:	e065      	b.n	80071f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007132:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713a:	4b59      	ldr	r3, [pc, #356]	@ (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800713c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800714a:	ed97 6a03 	vldr	s12, [r7, #12]
 800714e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800715e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800716a:	e043      	b.n	80071f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80072b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800717a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800717e:	4b48      	ldr	r3, [pc, #288]	@ (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800718e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007192:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800719a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800719e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ae:	e021      	b.n	80071f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c2:	4b37      	ldr	r3, [pc, #220]	@ (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80071f4:	4b2a      	ldr	r3, [pc, #168]	@ (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f8:	0a5b      	lsrs	r3, r3, #9
 80071fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007206:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800720a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800720e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800721a:	ee17 2a90 	vmov	r2, s15
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007222:	4b1f      	ldr	r3, [pc, #124]	@ (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007226:	0c1b      	lsrs	r3, r3, #16
 8007228:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800722c:	ee07 3a90 	vmov	s15, r3
 8007230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007234:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007238:	ee37 7a87 	vadd.f32	s14, s15, s14
 800723c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007248:	ee17 2a90 	vmov	r2, s15
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007250:	4b13      	ldr	r3, [pc, #76]	@ (80072a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007254:	0e1b      	lsrs	r3, r3, #24
 8007256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007266:	ee37 7a87 	vadd.f32	s14, s15, s14
 800726a:	edd7 6a07 	vldr	s13, [r7, #28]
 800726e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007276:	ee17 2a90 	vmov	r2, s15
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800727e:	e008      	b.n	8007292 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	609a      	str	r2, [r3, #8]
}
 8007292:	bf00      	nop
 8007294:	3724      	adds	r7, #36	@ 0x24
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	58024400 	.word	0x58024400
 80072a4:	03d09000 	.word	0x03d09000
 80072a8:	46000000 	.word	0x46000000
 80072ac:	4c742400 	.word	0x4c742400
 80072b0:	4a742400 	.word	0x4a742400
 80072b4:	4bbebc20 	.word	0x4bbebc20

080072b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b089      	sub	sp, #36	@ 0x24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072c0:	4ba1      	ldr	r3, [pc, #644]	@ (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c4:	f003 0303 	and.w	r3, r3, #3
 80072c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80072ca:	4b9f      	ldr	r3, [pc, #636]	@ (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ce:	0d1b      	lsrs	r3, r3, #20
 80072d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072d6:	4b9c      	ldr	r3, [pc, #624]	@ (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80072e2:	4b99      	ldr	r3, [pc, #612]	@ (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072e6:	08db      	lsrs	r3, r3, #3
 80072e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	fb02 f303 	mul.w	r3, r2, r3
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 8111 	beq.w	8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	2b02      	cmp	r3, #2
 800730a:	f000 8083 	beq.w	8007414 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	2b02      	cmp	r3, #2
 8007312:	f200 80a1 	bhi.w	8007458 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d056      	beq.n	80073d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007322:	e099      	b.n	8007458 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007324:	4b88      	ldr	r3, [pc, #544]	@ (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0320 	and.w	r3, r3, #32
 800732c:	2b00      	cmp	r3, #0
 800732e:	d02d      	beq.n	800738c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007330:	4b85      	ldr	r3, [pc, #532]	@ (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	08db      	lsrs	r3, r3, #3
 8007336:	f003 0303 	and.w	r3, r3, #3
 800733a:	4a84      	ldr	r2, [pc, #528]	@ (800754c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800733c:	fa22 f303 	lsr.w	r3, r2, r3
 8007340:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	ee07 3a90 	vmov	s15, r3
 8007348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800735a:	4b7b      	ldr	r3, [pc, #492]	@ (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800735c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800736a:	ed97 6a03 	vldr	s12, [r7, #12]
 800736e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800737a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800737e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007386:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800738a:	e087      	b.n	800749c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007396:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800739a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800739e:	4b6a      	ldr	r3, [pc, #424]	@ (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80073b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073ce:	e065      	b.n	800749c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e2:	4b59      	ldr	r3, [pc, #356]	@ (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ea:	ee07 3a90 	vmov	s15, r3
 80073ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800740a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007412:	e043      	b.n	800749c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800755c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007426:	4b48      	ldr	r3, [pc, #288]	@ (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007436:	ed97 6a03 	vldr	s12, [r7, #12]
 800743a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800743e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800744a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800744e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007456:	e021      	b.n	800749c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007462:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007558 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800746a:	4b37      	ldr	r3, [pc, #220]	@ (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800746c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747a:	ed97 6a03 	vldr	s12, [r7, #12]
 800747e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007550 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800748a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800748e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800749a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800749c:	4b2a      	ldr	r3, [pc, #168]	@ (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800749e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a0:	0a5b      	lsrs	r3, r3, #9
 80074a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c2:	ee17 2a90 	vmov	r2, s15
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80074ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ce:	0c1b      	lsrs	r3, r3, #16
 80074d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074d4:	ee07 3a90 	vmov	s15, r3
 80074d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80074e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074f0:	ee17 2a90 	vmov	r2, s15
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80074f8:	4b13      	ldr	r3, [pc, #76]	@ (8007548 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fc:	0e1b      	lsrs	r3, r3, #24
 80074fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800750e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007512:	edd7 6a07 	vldr	s13, [r7, #28]
 8007516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800751a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800751e:	ee17 2a90 	vmov	r2, s15
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007526:	e008      	b.n	800753a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	609a      	str	r2, [r3, #8]
}
 800753a:	bf00      	nop
 800753c:	3724      	adds	r7, #36	@ 0x24
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	58024400 	.word	0x58024400
 800754c:	03d09000 	.word	0x03d09000
 8007550:	46000000 	.word	0x46000000
 8007554:	4c742400 	.word	0x4c742400
 8007558:	4a742400 	.word	0x4a742400
 800755c:	4bbebc20 	.word	0x4bbebc20

08007560 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007560:	b480      	push	{r7}
 8007562:	b089      	sub	sp, #36	@ 0x24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007568:	4ba0      	ldr	r3, [pc, #640]	@ (80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800756a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756c:	f003 0303 	and.w	r3, r3, #3
 8007570:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007572:	4b9e      	ldr	r3, [pc, #632]	@ (80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007576:	091b      	lsrs	r3, r3, #4
 8007578:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800757c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800757e:	4b9b      	ldr	r3, [pc, #620]	@ (80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007588:	4b98      	ldr	r3, [pc, #608]	@ (80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800758a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800758c:	08db      	lsrs	r3, r3, #3
 800758e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	fb02 f303 	mul.w	r3, r2, r3
 8007598:	ee07 3a90 	vmov	s15, r3
 800759c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 8111 	beq.w	80077ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	f000 8083 	beq.w	80076ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	f200 80a1 	bhi.w	80076fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d056      	beq.n	8007676 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80075c8:	e099      	b.n	80076fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075ca:	4b88      	ldr	r3, [pc, #544]	@ (80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d02d      	beq.n	8007632 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075d6:	4b85      	ldr	r3, [pc, #532]	@ (80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	08db      	lsrs	r3, r3, #3
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	4a83      	ldr	r2, [pc, #524]	@ (80077f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80075e2:	fa22 f303 	lsr.w	r3, r2, r3
 80075e6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007600:	4b7a      	ldr	r3, [pc, #488]	@ (80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007608:	ee07 3a90 	vmov	s15, r3
 800760c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007610:	ed97 6a03 	vldr	s12, [r7, #12]
 8007614:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80077f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800761c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007620:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800762c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007630:	e087      	b.n	8007742 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	ee07 3a90 	vmov	s15, r3
 8007638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800763c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80077f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007644:	4b69      	ldr	r3, [pc, #420]	@ (80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764c:	ee07 3a90 	vmov	s15, r3
 8007650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007654:	ed97 6a03 	vldr	s12, [r7, #12]
 8007658:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80077f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800765c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007664:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007670:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007674:	e065      	b.n	8007742 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	ee07 3a90 	vmov	s15, r3
 800767c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007680:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80077fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007688:	4b58      	ldr	r3, [pc, #352]	@ (80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800768a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007690:	ee07 3a90 	vmov	s15, r3
 8007694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007698:	ed97 6a03 	vldr	s12, [r7, #12]
 800769c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80077f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076b8:	e043      	b.n	8007742 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	ee07 3a90 	vmov	s15, r3
 80076c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007800 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80076c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076cc:	4b47      	ldr	r3, [pc, #284]	@ (80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d4:	ee07 3a90 	vmov	s15, r3
 80076d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80076e0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80077f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076fc:	e021      	b.n	8007742 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	ee07 3a90 	vmov	s15, r3
 8007704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007708:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80077f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800770c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007710:	4b36      	ldr	r3, [pc, #216]	@ (80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007718:	ee07 3a90 	vmov	s15, r3
 800771c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007720:	ed97 6a03 	vldr	s12, [r7, #12]
 8007724:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80077f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007728:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007730:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007740:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007742:	4b2a      	ldr	r3, [pc, #168]	@ (80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007746:	0a5b      	lsrs	r3, r3, #9
 8007748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800774c:	ee07 3a90 	vmov	s15, r3
 8007750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007754:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007758:	ee37 7a87 	vadd.f32	s14, s15, s14
 800775c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007768:	ee17 2a90 	vmov	r2, s15
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007770:	4b1e      	ldr	r3, [pc, #120]	@ (80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007774:	0c1b      	lsrs	r3, r3, #16
 8007776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007782:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007786:	ee37 7a87 	vadd.f32	s14, s15, s14
 800778a:	edd7 6a07 	vldr	s13, [r7, #28]
 800778e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007796:	ee17 2a90 	vmov	r2, s15
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800779e:	4b13      	ldr	r3, [pc, #76]	@ (80077ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a2:	0e1b      	lsrs	r3, r3, #24
 80077a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077a8:	ee07 3a90 	vmov	s15, r3
 80077ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80077bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077c4:	ee17 2a90 	vmov	r2, s15
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80077cc:	e008      	b.n	80077e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	609a      	str	r2, [r3, #8]
}
 80077e0:	bf00      	nop
 80077e2:	3724      	adds	r7, #36	@ 0x24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	58024400 	.word	0x58024400
 80077f0:	03d09000 	.word	0x03d09000
 80077f4:	46000000 	.word	0x46000000
 80077f8:	4c742400 	.word	0x4c742400
 80077fc:	4a742400 	.word	0x4a742400
 8007800:	4bbebc20 	.word	0x4bbebc20

08007804 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007812:	4b53      	ldr	r3, [pc, #332]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 8007814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	2b03      	cmp	r3, #3
 800781c:	d101      	bne.n	8007822 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e099      	b.n	8007956 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007822:	4b4f      	ldr	r3, [pc, #316]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a4e      	ldr	r2, [pc, #312]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 8007828:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800782c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800782e:	f7f9 fb15 	bl	8000e5c <HAL_GetTick>
 8007832:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007834:	e008      	b.n	8007848 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007836:	f7f9 fb11 	bl	8000e5c <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d901      	bls.n	8007848 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e086      	b.n	8007956 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007848:	4b45      	ldr	r3, [pc, #276]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f0      	bne.n	8007836 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007854:	4b42      	ldr	r3, [pc, #264]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 8007856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007858:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	031b      	lsls	r3, r3, #12
 8007862:	493f      	ldr	r1, [pc, #252]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 8007864:	4313      	orrs	r3, r2
 8007866:	628b      	str	r3, [r1, #40]	@ 0x28
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	3b01      	subs	r3, #1
 800786e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	3b01      	subs	r3, #1
 8007878:	025b      	lsls	r3, r3, #9
 800787a:	b29b      	uxth	r3, r3
 800787c:	431a      	orrs	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	3b01      	subs	r3, #1
 8007884:	041b      	lsls	r3, r3, #16
 8007886:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	3b01      	subs	r3, #1
 8007892:	061b      	lsls	r3, r3, #24
 8007894:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007898:	4931      	ldr	r1, [pc, #196]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 800789a:	4313      	orrs	r3, r2
 800789c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800789e:	4b30      	ldr	r3, [pc, #192]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 80078a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	492d      	ldr	r1, [pc, #180]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80078b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 80078b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b4:	f023 0220 	bic.w	r2, r3, #32
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	4928      	ldr	r1, [pc, #160]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80078c2:	4b27      	ldr	r3, [pc, #156]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 80078c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c6:	4a26      	ldr	r2, [pc, #152]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 80078c8:	f023 0310 	bic.w	r3, r3, #16
 80078cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80078ce:	4b24      	ldr	r3, [pc, #144]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 80078d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078d2:	4b24      	ldr	r3, [pc, #144]	@ (8007964 <RCCEx_PLL2_Config+0x160>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	69d2      	ldr	r2, [r2, #28]
 80078da:	00d2      	lsls	r2, r2, #3
 80078dc:	4920      	ldr	r1, [pc, #128]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80078e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 80078e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 80078e8:	f043 0310 	orr.w	r3, r3, #16
 80078ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d106      	bne.n	8007902 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80078f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 80078f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f8:	4a19      	ldr	r2, [pc, #100]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 80078fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007900:	e00f      	b.n	8007922 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d106      	bne.n	8007916 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007908:	4b15      	ldr	r3, [pc, #84]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 800790a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790c:	4a14      	ldr	r2, [pc, #80]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 800790e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007912:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007914:	e005      	b.n	8007922 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007916:	4b12      	ldr	r3, [pc, #72]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 8007918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791a:	4a11      	ldr	r2, [pc, #68]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 800791c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007920:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007922:	4b0f      	ldr	r3, [pc, #60]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a0e      	ldr	r2, [pc, #56]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 8007928:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800792c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800792e:	f7f9 fa95 	bl	8000e5c <HAL_GetTick>
 8007932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007934:	e008      	b.n	8007948 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007936:	f7f9 fa91 	bl	8000e5c <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d901      	bls.n	8007948 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e006      	b.n	8007956 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007948:	4b05      	ldr	r3, [pc, #20]	@ (8007960 <RCCEx_PLL2_Config+0x15c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0f0      	beq.n	8007936 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007954:	7bfb      	ldrb	r3, [r7, #15]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	58024400 	.word	0x58024400
 8007964:	ffff0007 	.word	0xffff0007

08007968 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007976:	4b53      	ldr	r3, [pc, #332]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797a:	f003 0303 	and.w	r3, r3, #3
 800797e:	2b03      	cmp	r3, #3
 8007980:	d101      	bne.n	8007986 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e099      	b.n	8007aba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007986:	4b4f      	ldr	r3, [pc, #316]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a4e      	ldr	r2, [pc, #312]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 800798c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007992:	f7f9 fa63 	bl	8000e5c <HAL_GetTick>
 8007996:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007998:	e008      	b.n	80079ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800799a:	f7f9 fa5f 	bl	8000e5c <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d901      	bls.n	80079ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e086      	b.n	8007aba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079ac:	4b45      	ldr	r3, [pc, #276]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1f0      	bne.n	800799a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80079b8:	4b42      	ldr	r3, [pc, #264]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 80079ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	051b      	lsls	r3, r3, #20
 80079c6:	493f      	ldr	r1, [pc, #252]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	3b01      	subs	r3, #1
 80079d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	3b01      	subs	r3, #1
 80079dc:	025b      	lsls	r3, r3, #9
 80079de:	b29b      	uxth	r3, r3
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	041b      	lsls	r3, r3, #16
 80079ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80079ee:	431a      	orrs	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	3b01      	subs	r3, #1
 80079f6:	061b      	lsls	r3, r3, #24
 80079f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80079fc:	4931      	ldr	r1, [pc, #196]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007a02:	4b30      	ldr	r3, [pc, #192]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	492d      	ldr	r1, [pc, #180]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007a14:	4b2b      	ldr	r3, [pc, #172]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a18:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	4928      	ldr	r1, [pc, #160]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007a26:	4b27      	ldr	r3, [pc, #156]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2a:	4a26      	ldr	r2, [pc, #152]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a32:	4b24      	ldr	r3, [pc, #144]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a36:	4b24      	ldr	r3, [pc, #144]	@ (8007ac8 <RCCEx_PLL3_Config+0x160>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	69d2      	ldr	r2, [r2, #28]
 8007a3e:	00d2      	lsls	r2, r2, #3
 8007a40:	4920      	ldr	r1, [pc, #128]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007a46:	4b1f      	ldr	r3, [pc, #124]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d106      	bne.n	8007a66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a58:	4b1a      	ldr	r3, [pc, #104]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5c:	4a19      	ldr	r2, [pc, #100]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a64:	e00f      	b.n	8007a86 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d106      	bne.n	8007a7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a6c:	4b15      	ldr	r3, [pc, #84]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a70:	4a14      	ldr	r2, [pc, #80]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007a78:	e005      	b.n	8007a86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a7a:	4b12      	ldr	r3, [pc, #72]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7e:	4a11      	ldr	r2, [pc, #68]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a86:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a92:	f7f9 f9e3 	bl	8000e5c <HAL_GetTick>
 8007a96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a98:	e008      	b.n	8007aac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a9a:	f7f9 f9df 	bl	8000e5c <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d901      	bls.n	8007aac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e006      	b.n	8007aba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007aac:	4b05      	ldr	r3, [pc, #20]	@ (8007ac4 <RCCEx_PLL3_Config+0x15c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d0f0      	beq.n	8007a9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	58024400 	.word	0x58024400
 8007ac8:	ffff0007 	.word	0xffff0007

08007acc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08a      	sub	sp, #40	@ 0x28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e075      	b.n	8007bca <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d105      	bne.n	8007af6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f90b 	bl	8007d0c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2204      	movs	r2, #4
 8007afa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f868 	bl	8007bd4 <HAL_SD_InitCard>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e05d      	b.n	8007bca <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007b0e:	f107 0308 	add.w	r3, r7, #8
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 fdbf 	bl	8008698 <HAL_SD_GetCardStatus>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e052      	b.n	8007bca <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007b24:	7e3b      	ldrb	r3, [r7, #24]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007b2a:	7e7b      	ldrb	r3, [r7, #25]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d10a      	bne.n	8007b4e <HAL_SD_Init+0x82>
 8007b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d102      	bne.n	8007b44 <HAL_SD_Init+0x78>
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d004      	beq.n	8007b4e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b4c:	e00b      	b.n	8007b66 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d104      	bne.n	8007b60 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b5e:	e002      	b.n	8007b66 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fe7d 	bl	800886c <HAL_SD_ConfigWideBusOperation>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e026      	b.n	8007bca <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007b7c:	f7f9 f96e 	bl	8000e5c <HAL_GetTick>
 8007b80:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007b82:	e011      	b.n	8007ba8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007b84:	f7f9 f96a 	bl	8000e5c <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b92:	d109      	bne.n	8007ba8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b9a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e010      	b.n	8007bca <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 f82d 	bl	8008c08 <HAL_SD_GetCardState>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d1e7      	bne.n	8007b84 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3728      	adds	r7, #40	@ 0x28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007bd4:	b590      	push	{r4, r7, lr}
 8007bd6:	b08d      	sub	sp, #52	@ 0x34
 8007bd8:	af02      	add	r7, sp, #8
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007be0:	2300      	movs	r3, #0
 8007be2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007be8:	2300      	movs	r3, #0
 8007bea:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007bec:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8007bf0:	f04f 0100 	mov.w	r1, #0
 8007bf4:	f7fe fc76 	bl	80064e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007bf8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d109      	bne.n	8007c14 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007c0e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e070      	b.n	8007cf6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c16:	0a1b      	lsrs	r3, r3, #8
 8007c18:	4a39      	ldr	r2, [pc, #228]	@ (8007d00 <HAL_SD_InitCard+0x12c>)
 8007c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1e:	091b      	lsrs	r3, r3, #4
 8007c20:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681c      	ldr	r4, [r3, #0]
 8007c26:	466a      	mov	r2, sp
 8007c28:	f107 0318 	add.w	r3, r7, #24
 8007c2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007c30:	e882 0003 	stmia.w	r2, {r0, r1}
 8007c34:	f107 030c 	add.w	r3, r7, #12
 8007c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f002 ff1e 	bl	800aa7c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f002 ff61 	bl	800ab0c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d007      	beq.n	8007c72 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007c62:	4a28      	ldr	r2, [pc, #160]	@ (8007d04 <HAL_SD_InitCard+0x130>)
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7f9 f901 	bl	8000e74 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f001 f8b6 	bl	8008de4 <SD_PowerON>
 8007c78:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007c7a:	6a3b      	ldr	r3, [r7, #32]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00b      	beq.n	8007c98 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e02e      	b.n	8007cf6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 ffd5 	bl	8008c48 <SD_InitCard>
 8007c9e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00b      	beq.n	8007cbe <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	431a      	orrs	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e01b      	b.n	8007cf6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f002 ffb6 	bl	800ac38 <SDMMC_CmdBlockLength>
 8007ccc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00f      	beq.n	8007cf4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8007d08 <HAL_SD_InitCard+0x134>)
 8007cda:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e000      	b.n	8007cf6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	372c      	adds	r7, #44	@ 0x2c
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd90      	pop	{r4, r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	014f8b59 	.word	0x014f8b59
 8007d04:	00012110 	.word	0x00012110
 8007d08:	1fe00fff 	.word	0x1fe00fff

08007d0c <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b092      	sub	sp, #72	@ 0x48
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d2e:	f7f9 f895 	bl	8000e5c <HAL_GetTick>
 8007d32:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d107      	bne.n	8007d52 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d46:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e167      	b.n	8008022 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	f040 815a 	bne.w	8008014 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	441a      	add	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d907      	bls.n	8007d84 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d78:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e14e      	b.n	8008022 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2203      	movs	r2, #3
 8007d88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2200      	movs	r2, #0
 8007d92:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d002      	beq.n	8007da2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9e:	025b      	lsls	r3, r3, #9
 8007da0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007da2:	f04f 33ff 	mov.w	r3, #4294967295
 8007da6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	025b      	lsls	r3, r3, #9
 8007dac:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007dae:	2390      	movs	r3, #144	@ 0x90
 8007db0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007db2:	2302      	movs	r3, #2
 8007db4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f107 0214 	add.w	r2, r7, #20
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f002 ff09 	bl	800abe0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68da      	ldr	r2, [r3, #12]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ddc:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d90a      	bls.n	8007dfa <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2202      	movs	r2, #2
 8007de8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007df0:	4618      	mov	r0, r3
 8007df2:	f002 ff67 	bl	800acc4 <SDMMC_CmdReadMultiBlock>
 8007df6:	6478      	str	r0, [r7, #68]	@ 0x44
 8007df8:	e009      	b.n	8007e0e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e06:	4618      	mov	r0, r3
 8007e08:	f002 ff39 	bl	800ac7e <SDMMC_CmdReadSingleBlock>
 8007e0c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007e0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d012      	beq.n	8007e3a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a84      	ldr	r2, [pc, #528]	@ (800802c <HAL_SD_ReadBlocks+0x30c>)
 8007e1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e22:	431a      	orrs	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e0f3      	b.n	8008022 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e3e:	e058      	b.n	8007ef2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d033      	beq.n	8007eb6 <HAL_SD_ReadBlocks+0x196>
 8007e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e50:	2b1f      	cmp	r3, #31
 8007e52:	d930      	bls.n	8007eb6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8007e54:	2300      	movs	r3, #0
 8007e56:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e58:	e027      	b.n	8007eaa <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f002 fe36 	bl	800aad0 <SDMMC_ReadFIFO>
 8007e64:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e6c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e70:	3301      	adds	r3, #1
 8007e72:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e76:	0a1b      	lsrs	r3, r3, #8
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e80:	3301      	adds	r3, #1
 8007e82:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e86:	0c1b      	lsrs	r3, r3, #16
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e90:	3301      	adds	r3, #1
 8007e92:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e96:	0e1b      	lsrs	r3, r3, #24
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < 8U; count++)
 8007ea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007eac:	2b07      	cmp	r3, #7
 8007eae:	d9d4      	bls.n	8007e5a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eb2:	3b20      	subs	r3, #32
 8007eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007eb6:	f7f8 ffd1 	bl	8000e5c <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d902      	bls.n	8007ecc <HAL_SD_ReadBlocks+0x1ac>
 8007ec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d112      	bne.n	8007ef2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a56      	ldr	r2, [pc, #344]	@ (800802c <HAL_SD_ReadBlocks+0x30c>)
 8007ed2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ed8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e097      	b.n	8008022 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ef8:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d09f      	beq.n	8007e40 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f0e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d022      	beq.n	8007f64 <HAL_SD_ReadBlocks+0x244>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d91f      	bls.n	8007f64 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d01b      	beq.n	8007f64 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f002 ff31 	bl	800ad98 <SDMMC_CmdStopTransfer>
 8007f36:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8007f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d012      	beq.n	8007f64 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a3a      	ldr	r2, [pc, #232]	@ (800802c <HAL_SD_ReadBlocks+0x30c>)
 8007f44:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e05e      	b.n	8008022 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f6a:	f003 0308 	and.w	r3, r3, #8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d012      	beq.n	8007f98 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a2d      	ldr	r2, [pc, #180]	@ (800802c <HAL_SD_ReadBlocks+0x30c>)
 8007f78:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f7e:	f043 0208 	orr.w	r2, r3, #8
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e044      	b.n	8008022 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d012      	beq.n	8007fcc <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a20      	ldr	r2, [pc, #128]	@ (800802c <HAL_SD_ReadBlocks+0x30c>)
 8007fac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fb2:	f043 0202 	orr.w	r2, r3, #2
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e02a      	b.n	8008022 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fd2:	f003 0320 	and.w	r3, r3, #32
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d012      	beq.n	8008000 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a13      	ldr	r2, [pc, #76]	@ (800802c <HAL_SD_ReadBlocks+0x30c>)
 8007fe0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe6:	f043 0220 	orr.w	r2, r3, #32
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e010      	b.n	8008022 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a0a      	ldr	r2, [pc, #40]	@ (8008030 <HAL_SD_ReadBlocks+0x310>)
 8008006:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	e006      	b.n	8008022 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008018:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
  }
}
 8008022:	4618      	mov	r0, r3
 8008024:	3748      	adds	r7, #72	@ 0x48
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	1fe00fff 	.word	0x1fe00fff
 8008030:	18000f3a 	.word	0x18000f3a

08008034 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b092      	sub	sp, #72	@ 0x48
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008042:	f7f8 ff0b 	bl	8000e5c <HAL_GetTick>
 8008046:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d107      	bne.n	8008066 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800805a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e16b      	b.n	800833e <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b01      	cmp	r3, #1
 8008070:	f040 815e 	bne.w	8008330 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800807a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	441a      	add	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008084:	429a      	cmp	r2, r3
 8008086:	d907      	bls.n	8008098 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800808c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e152      	b.n	800833e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2203      	movs	r2, #3
 800809c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2200      	movs	r2, #0
 80080a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d002      	beq.n	80080b6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80080b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b2:	025b      	lsls	r3, r3, #9
 80080b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80080b6:	f04f 33ff 	mov.w	r3, #4294967295
 80080ba:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	025b      	lsls	r3, r3, #9
 80080c0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80080c2:	2390      	movs	r3, #144	@ 0x90
 80080c4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80080c6:	2300      	movs	r3, #0
 80080c8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f107 0218 	add.w	r2, r7, #24
 80080da:	4611      	mov	r1, r2
 80080dc:	4618      	mov	r0, r3
 80080de:	f002 fd7f 	bl	800abe0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68da      	ldr	r2, [r3, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080f0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d90a      	bls.n	800810e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2220      	movs	r2, #32
 80080fc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008104:	4618      	mov	r0, r3
 8008106:	f002 fe23 	bl	800ad50 <SDMMC_CmdWriteMultiBlock>
 800810a:	6478      	str	r0, [r7, #68]	@ 0x44
 800810c:	e009      	b.n	8008122 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2210      	movs	r2, #16
 8008112:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800811a:	4618      	mov	r0, r3
 800811c:	f002 fdf5 	bl	800ad0a <SDMMC_CmdWriteSingleBlock>
 8008120:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8008122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008124:	2b00      	cmp	r3, #0
 8008126:	d012      	beq.n	800814e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a86      	ldr	r2, [pc, #536]	@ (8008348 <HAL_SD_WriteBlocks+0x314>)
 800812e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008136:	431a      	orrs	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e0f7      	b.n	800833e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008152:	e05c      	b.n	800820e <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800815a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d037      	beq.n	80081d2 <HAL_SD_WriteBlocks+0x19e>
 8008162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008164:	2b1f      	cmp	r3, #31
 8008166:	d934      	bls.n	80081d2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8008168:	2300      	movs	r3, #0
 800816a:	643b      	str	r3, [r7, #64]	@ 0x40
 800816c:	e02b      	b.n	80081c6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800816e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008176:	3301      	adds	r3, #1
 8008178:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800817a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	021a      	lsls	r2, r3, #8
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	4313      	orrs	r3, r2
 8008184:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008188:	3301      	adds	r3, #1
 800818a:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800818c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	041a      	lsls	r2, r3, #16
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	4313      	orrs	r3, r2
 8008196:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800819a:	3301      	adds	r3, #1
 800819c:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800819e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	061a      	lsls	r2, r3, #24
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80081aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ac:	3301      	adds	r3, #1
 80081ae:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f107 0214 	add.w	r2, r7, #20
 80081b8:	4611      	mov	r1, r2
 80081ba:	4618      	mov	r0, r3
 80081bc:	f002 fc95 	bl	800aaea <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80081c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081c2:	3301      	adds	r3, #1
 80081c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80081c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081c8:	2b07      	cmp	r3, #7
 80081ca:	d9d0      	bls.n	800816e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80081cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ce:	3b20      	subs	r3, #32
 80081d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80081d2:	f7f8 fe43 	bl	8000e5c <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80081de:	429a      	cmp	r2, r3
 80081e0:	d902      	bls.n	80081e8 <HAL_SD_WriteBlocks+0x1b4>
 80081e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d112      	bne.n	800820e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a56      	ldr	r2, [pc, #344]	@ (8008348 <HAL_SD_WriteBlocks+0x314>)
 80081ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081f6:	431a      	orrs	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e097      	b.n	800833e <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008214:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8008218:	2b00      	cmp	r3, #0
 800821a:	d09b      	beq.n	8008154 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800822a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008236:	2b00      	cmp	r3, #0
 8008238:	d022      	beq.n	8008280 <HAL_SD_WriteBlocks+0x24c>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d91f      	bls.n	8008280 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008244:	2b03      	cmp	r3, #3
 8008246:	d01b      	beq.n	8008280 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4618      	mov	r0, r3
 800824e:	f002 fda3 	bl	800ad98 <SDMMC_CmdStopTransfer>
 8008252:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008256:	2b00      	cmp	r3, #0
 8008258:	d012      	beq.n	8008280 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a3a      	ldr	r2, [pc, #232]	@ (8008348 <HAL_SD_WriteBlocks+0x314>)
 8008260:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008268:	431a      	orrs	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e05e      	b.n	800833e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008286:	f003 0308 	and.w	r3, r3, #8
 800828a:	2b00      	cmp	r3, #0
 800828c:	d012      	beq.n	80082b4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a2d      	ldr	r2, [pc, #180]	@ (8008348 <HAL_SD_WriteBlocks+0x314>)
 8008294:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800829a:	f043 0208 	orr.w	r2, r3, #8
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e044      	b.n	800833e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d012      	beq.n	80082e8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a20      	ldr	r2, [pc, #128]	@ (8008348 <HAL_SD_WriteBlocks+0x314>)
 80082c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ce:	f043 0202 	orr.w	r2, r3, #2
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e02a      	b.n	800833e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ee:	f003 0310 	and.w	r3, r3, #16
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d012      	beq.n	800831c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a13      	ldr	r2, [pc, #76]	@ (8008348 <HAL_SD_WriteBlocks+0x314>)
 80082fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008302:	f043 0210 	orr.w	r2, r3, #16
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e010      	b.n	800833e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a0a      	ldr	r2, [pc, #40]	@ (800834c <HAL_SD_WriteBlocks+0x318>)
 8008322:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	e006      	b.n	800833e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008334:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
  }
}
 800833e:	4618      	mov	r0, r3
 8008340:	3748      	adds	r7, #72	@ 0x48
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	1fe00fff 	.word	0x1fe00fff
 800834c:	18000f3a 	.word	0x18000f3a

08008350 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800835e:	0f9b      	lsrs	r3, r3, #30
 8008360:	b2da      	uxtb	r2, r3
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800836a:	0e9b      	lsrs	r3, r3, #26
 800836c:	b2db      	uxtb	r3, r3
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	b2da      	uxtb	r2, r3
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800837c:	0e1b      	lsrs	r3, r3, #24
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f003 0303 	and.w	r3, r3, #3
 8008384:	b2da      	uxtb	r2, r3
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800838e:	0c1b      	lsrs	r3, r3, #16
 8008390:	b2da      	uxtb	r2, r3
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800839a:	0a1b      	lsrs	r3, r3, #8
 800839c:	b2da      	uxtb	r2, r3
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083b0:	0d1b      	lsrs	r3, r3, #20
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083bc:	0c1b      	lsrs	r3, r3, #16
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	f003 030f 	and.w	r3, r3, #15
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083ce:	0bdb      	lsrs	r3, r3, #15
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083e0:	0b9b      	lsrs	r3, r3, #14
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	b2da      	uxtb	r2, r3
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083f2:	0b5b      	lsrs	r3, r3, #13
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	f003 0301 	and.w	r3, r3, #1
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008404:	0b1b      	lsrs	r3, r3, #12
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	b2da      	uxtb	r2, r3
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2200      	movs	r2, #0
 8008416:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841c:	2b00      	cmp	r3, #0
 800841e:	d163      	bne.n	80084e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008424:	009a      	lsls	r2, r3, #2
 8008426:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800842a:	4013      	ands	r3, r2
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8008430:	0f92      	lsrs	r2, r2, #30
 8008432:	431a      	orrs	r2, r3
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800843c:	0edb      	lsrs	r3, r3, #27
 800843e:	b2db      	uxtb	r3, r3
 8008440:	f003 0307 	and.w	r3, r3, #7
 8008444:	b2da      	uxtb	r2, r3
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800844e:	0e1b      	lsrs	r3, r3, #24
 8008450:	b2db      	uxtb	r3, r3
 8008452:	f003 0307 	and.w	r3, r3, #7
 8008456:	b2da      	uxtb	r2, r3
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008460:	0d5b      	lsrs	r3, r3, #21
 8008462:	b2db      	uxtb	r3, r3
 8008464:	f003 0307 	and.w	r3, r3, #7
 8008468:	b2da      	uxtb	r2, r3
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008472:	0c9b      	lsrs	r3, r3, #18
 8008474:	b2db      	uxtb	r3, r3
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	b2da      	uxtb	r2, r3
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008484:	0bdb      	lsrs	r3, r3, #15
 8008486:	b2db      	uxtb	r3, r3
 8008488:	f003 0307 	and.w	r3, r3, #7
 800848c:	b2da      	uxtb	r2, r3
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	691b      	ldr	r3, [r3, #16]
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	7e1b      	ldrb	r3, [r3, #24]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	f003 0307 	and.w	r3, r3, #7
 80084a6:	3302      	adds	r3, #2
 80084a8:	2201      	movs	r2, #1
 80084aa:	fa02 f303 	lsl.w	r3, r2, r3
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80084b2:	fb03 f202 	mul.w	r2, r3, r2
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	7a1b      	ldrb	r3, [r3, #8]
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	f003 030f 	and.w	r3, r3, #15
 80084c4:	2201      	movs	r2, #1
 80084c6:	409a      	lsls	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80084d4:	0a52      	lsrs	r2, r2, #9
 80084d6:	fb03 f202 	mul.w	r2, r3, r2
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80084e6:	e031      	b.n	800854c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d11d      	bne.n	800852c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084f4:	041b      	lsls	r3, r3, #16
 80084f6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084fe:	0c1b      	lsrs	r3, r3, #16
 8008500:	431a      	orrs	r2, r3
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	3301      	adds	r3, #1
 800850c:	029a      	lsls	r2, r3, #10
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008520:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	655a      	str	r2, [r3, #84]	@ 0x54
 800852a:	e00f      	b.n	800854c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a58      	ldr	r2, [pc, #352]	@ (8008694 <HAL_SD_GetCardCSD+0x344>)
 8008532:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008538:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e09d      	b.n	8008688 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008550:	0b9b      	lsrs	r3, r3, #14
 8008552:	b2db      	uxtb	r3, r3
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	b2da      	uxtb	r2, r3
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008562:	09db      	lsrs	r3, r3, #7
 8008564:	b2db      	uxtb	r3, r3
 8008566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800856a:	b2da      	uxtb	r2, r3
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008574:	b2db      	uxtb	r3, r3
 8008576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800857a:	b2da      	uxtb	r2, r3
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008584:	0fdb      	lsrs	r3, r3, #31
 8008586:	b2da      	uxtb	r2, r3
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008590:	0f5b      	lsrs	r3, r3, #29
 8008592:	b2db      	uxtb	r3, r3
 8008594:	f003 0303 	and.w	r3, r3, #3
 8008598:	b2da      	uxtb	r2, r3
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085a2:	0e9b      	lsrs	r3, r3, #26
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085b4:	0d9b      	lsrs	r3, r3, #22
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	f003 030f 	and.w	r3, r3, #15
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085c6:	0d5b      	lsrs	r3, r3, #21
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	b2da      	uxtb	r2, r3
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085e2:	0c1b      	lsrs	r3, r3, #16
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085f6:	0bdb      	lsrs	r3, r3, #15
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800860a:	0b9b      	lsrs	r3, r3, #14
 800860c:	b2db      	uxtb	r3, r3
 800860e:	f003 0301 	and.w	r3, r3, #1
 8008612:	b2da      	uxtb	r2, r3
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800861e:	0b5b      	lsrs	r3, r3, #13
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	b2da      	uxtb	r2, r3
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008632:	0b1b      	lsrs	r3, r3, #12
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	b2da      	uxtb	r2, r3
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008646:	0a9b      	lsrs	r3, r3, #10
 8008648:	b2db      	uxtb	r3, r3
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	b2da      	uxtb	r2, r3
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800865a:	0a1b      	lsrs	r3, r3, #8
 800865c:	b2db      	uxtb	r3, r3
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	b2da      	uxtb	r2, r3
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800866e:	085b      	lsrs	r3, r3, #1
 8008670:	b2db      	uxtb	r3, r3
 8008672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008676:	b2da      	uxtb	r2, r3
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	1fe00fff 	.word	0x1fe00fff

08008698 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b094      	sub	sp, #80	@ 0x50
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d101      	bne.n	80086b8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e0a7      	b.n	8008808 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80086b8:	f107 0308 	add.w	r3, r7, #8
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fc1e 	bl	8008f00 <SD_SendSDStatus>
 80086c4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80086c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d011      	beq.n	80086f0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a4f      	ldr	r2, [pc, #316]	@ (8008810 <HAL_SD_GetCardStatus+0x178>)
 80086d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80086ee:	e070      	b.n	80087d2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	099b      	lsrs	r3, r3, #6
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	f003 0303 	and.w	r3, r3, #3
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	095b      	lsrs	r3, r3, #5
 8008704:	b2db      	uxtb	r3, r3
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	b2da      	uxtb	r2, r3
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	0a1b      	lsrs	r3, r3, #8
 8008714:	b29b      	uxth	r3, r3
 8008716:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800871a:	b29a      	uxth	r2, r3
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	0e1b      	lsrs	r3, r3, #24
 8008720:	b29b      	uxth	r3, r3
 8008722:	4313      	orrs	r3, r2
 8008724:	b29a      	uxth	r2, r3
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	061a      	lsls	r2, r3, #24
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	021b      	lsls	r3, r3, #8
 8008732:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008736:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	0a1b      	lsrs	r3, r3, #8
 800873c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008740:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	0e1b      	lsrs	r3, r3, #24
 8008746:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	b2da      	uxtb	r2, r3
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	0a1b      	lsrs	r3, r3, #8
 8008758:	b2da      	uxtb	r2, r3
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	0d1b      	lsrs	r3, r3, #20
 8008762:	b2db      	uxtb	r3, r3
 8008764:	f003 030f 	and.w	r3, r3, #15
 8008768:	b2da      	uxtb	r2, r3
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	0c1b      	lsrs	r3, r3, #16
 8008772:	b29b      	uxth	r3, r3
 8008774:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008778:	b29a      	uxth	r2, r3
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	b29b      	uxth	r3, r3
 800877e:	b2db      	uxtb	r3, r3
 8008780:	b29b      	uxth	r3, r3
 8008782:	4313      	orrs	r3, r2
 8008784:	b29a      	uxth	r2, r3
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	0a9b      	lsrs	r3, r3, #10
 800878e:	b2db      	uxtb	r3, r3
 8008790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008794:	b2da      	uxtb	r2, r3
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	0a1b      	lsrs	r3, r3, #8
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	f003 0303 	and.w	r3, r3, #3
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	091b      	lsrs	r3, r3, #4
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	f003 030f 	and.w	r3, r3, #15
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	f003 030f 	and.w	r3, r3, #15
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	0e1b      	lsrs	r3, r3, #24
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80087da:	4618      	mov	r0, r3
 80087dc:	f002 fa2c 	bl	800ac38 <SDMMC_CmdBlockLength>
 80087e0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80087e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00d      	beq.n	8008804 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a08      	ldr	r2, [pc, #32]	@ (8008810 <HAL_SD_GetCardStatus+0x178>)
 80087ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087f4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8008804:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8008808:	4618      	mov	r0, r3
 800880a:	3750      	adds	r7, #80	@ 0x50
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	1fe00fff 	.word	0x1fe00fff

08008814 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800886c:	b590      	push	{r4, r7, lr}
 800886e:	b08d      	sub	sp, #52	@ 0x34
 8008870:	af02      	add	r7, sp, #8
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2203      	movs	r2, #3
 8008880:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008888:	2b03      	cmp	r3, #3
 800888a:	d02e      	beq.n	80088ea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008892:	d106      	bne.n	80088a2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008898:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	635a      	str	r2, [r3, #52]	@ 0x34
 80088a0:	e029      	b.n	80088f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088a8:	d10a      	bne.n	80088c0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fc20 	bl	80090f0 <SD_WideBus_Enable>
 80088b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	431a      	orrs	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80088be:	e01a      	b.n	80088f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10a      	bne.n	80088dc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fc5d 	bl	8009186 <SD_WideBus_Disable>
 80088cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80088da:	e00c      	b.n	80088f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80088e8:	e005      	b.n	80088f6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d007      	beq.n	800890e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a5f      	ldr	r2, [pc, #380]	@ (8008a80 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008904:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800890c:	e096      	b.n	8008a3c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800890e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8008912:	f04f 0100 	mov.w	r1, #0
 8008916:	f7fd fde5 	bl	80064e4 <HAL_RCCEx_GetPeriphCLKFreq>
 800891a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 8083 	beq.w	8008a2a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695a      	ldr	r2, [r3, #20]
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	4950      	ldr	r1, [pc, #320]	@ (8008a84 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008942:	fba1 1303 	umull	r1, r3, r1, r3
 8008946:	0e1b      	lsrs	r3, r3, #24
 8008948:	429a      	cmp	r2, r3
 800894a:	d303      	bcc.n	8008954 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	695b      	ldr	r3, [r3, #20]
 8008950:	61bb      	str	r3, [r7, #24]
 8008952:	e05a      	b.n	8008a0a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800895c:	d103      	bne.n	8008966 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	61bb      	str	r3, [r7, #24]
 8008964:	e051      	b.n	8008a0a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800896a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800896e:	d126      	bne.n	80089be <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10e      	bne.n	8008996 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	4a43      	ldr	r2, [pc, #268]	@ (8008a88 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d906      	bls.n	800898e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	4a40      	ldr	r2, [pc, #256]	@ (8008a84 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008984:	fba2 2303 	umull	r2, r3, r2, r3
 8008988:	0e5b      	lsrs	r3, r3, #25
 800898a:	61bb      	str	r3, [r7, #24]
 800898c:	e03d      	b.n	8008a0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	61bb      	str	r3, [r7, #24]
 8008994:	e039      	b.n	8008a0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	69fa      	ldr	r2, [r7, #28]
 800899e:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a2:	4a39      	ldr	r2, [pc, #228]	@ (8008a88 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d906      	bls.n	80089b6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	4a36      	ldr	r2, [pc, #216]	@ (8008a84 <HAL_SD_ConfigWideBusOperation+0x218>)
 80089ac:	fba2 2303 	umull	r2, r3, r2, r3
 80089b0:	0e5b      	lsrs	r3, r3, #25
 80089b2:	61bb      	str	r3, [r7, #24]
 80089b4:	e029      	b.n	8008a0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	61bb      	str	r3, [r7, #24]
 80089bc:	e025      	b.n	8008a0a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10e      	bne.n	80089e4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	4a30      	ldr	r2, [pc, #192]	@ (8008a8c <HAL_SD_ConfigWideBusOperation+0x220>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d906      	bls.n	80089dc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	4a2c      	ldr	r2, [pc, #176]	@ (8008a84 <HAL_SD_ConfigWideBusOperation+0x218>)
 80089d2:	fba2 2303 	umull	r2, r3, r2, r3
 80089d6:	0e1b      	lsrs	r3, r3, #24
 80089d8:	61bb      	str	r3, [r7, #24]
 80089da:	e016      	b.n	8008a0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	61bb      	str	r3, [r7, #24]
 80089e2:	e012      	b.n	8008a0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	69fa      	ldr	r2, [r7, #28]
 80089ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80089f0:	4a26      	ldr	r2, [pc, #152]	@ (8008a8c <HAL_SD_ConfigWideBusOperation+0x220>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d906      	bls.n	8008a04 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	4a22      	ldr	r2, [pc, #136]	@ (8008a84 <HAL_SD_ConfigWideBusOperation+0x218>)
 80089fa:	fba2 2303 	umull	r2, r3, r2, r3
 80089fe:	0e1b      	lsrs	r3, r3, #24
 8008a00:	61bb      	str	r3, [r7, #24]
 8008a02:	e002      	b.n	8008a0a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681c      	ldr	r4, [r3, #0]
 8008a0e:	466a      	mov	r2, sp
 8008a10:	f107 0314 	add.w	r3, r7, #20
 8008a14:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008a18:	e882 0003 	stmia.w	r2, {r0, r1}
 8008a1c:	f107 0308 	add.w	r3, r7, #8
 8008a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a22:	4620      	mov	r0, r4
 8008a24:	f002 f82a 	bl	800aa7c <SDMMC_Init>
 8008a28:	e008      	b.n	8008a3c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a2e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008a44:	4618      	mov	r0, r3
 8008a46:	f002 f8f7 	bl	800ac38 <SDMMC_CmdBlockLength>
 8008a4a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00c      	beq.n	8008a6c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a0a      	ldr	r2, [pc, #40]	@ (8008a80 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008a58:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	431a      	orrs	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008a74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	372c      	adds	r7, #44	@ 0x2c
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd90      	pop	{r4, r7, pc}
 8008a80:	1fe00fff 	.word	0x1fe00fff
 8008a84:	55e63b89 	.word	0x55e63b89
 8008a88:	02faf080 	.word	0x02faf080
 8008a8c:	017d7840 	.word	0x017d7840

08008a90 <HAL_SD_ConfigSpeedBusOperation>:
  *            @arg SDMMC_SPEED_MODE_ULTRA: Ultra high speed mode
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_SD_ConfigSpeedBusOperation(SD_HandleTypeDef *hsd, uint32_t SpeedMode)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SDMMC_SPEED_MODE(SpeedMode));
  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2203      	movs	r2, #3
 8008aa2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        status = HAL_ERROR;
        break;
    }
  }
#else
  switch (SpeedMode)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d027      	beq.n	8008afc <HAL_SD_ConfigSpeedBusOperation+0x6c>
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d85c      	bhi.n	8008b6c <HAL_SD_ConfigSpeedBusOperation+0xdc>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d003      	beq.n	8008ac0 <HAL_SD_ConfigSpeedBusOperation+0x30>
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d046      	beq.n	8008b4c <HAL_SD_ConfigSpeedBusOperation+0xbc>
 8008abe:	e055      	b.n	8008b6c <HAL_SD_ConfigSpeedBusOperation+0xdc>
  {
    case SDMMC_SPEED_MODE_AUTO:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ac8:	d008      	beq.n	8008adc <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ad2:	d003      	beq.n	8008adc <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d150      	bne.n	8008b7e <HAL_SD_ConfigSpeedBusOperation+0xee>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008adc:	4947      	ldr	r1, [pc, #284]	@ (8008bfc <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fc6c 	bl	80093bc <SD_SwitchSpeed>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d049      	beq.n	8008b7e <HAL_SD_ConfigSpeedBusOperation+0xee>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aee:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	75fb      	strb	r3, [r7, #23]
      }
      else
      {
        /*Nothing to do, Use defaultSpeed */
      }
      break;
 8008afa:	e040      	b.n	8008b7e <HAL_SD_ConfigSpeedBusOperation+0xee>
    }
    case SDMMC_SPEED_MODE_HIGH:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b04:	d008      	beq.n	8008b18 <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8008b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b0e:	d003      	beq.n	8008b18 <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d10f      	bne.n	8008b38 <HAL_SD_ConfigSpeedBusOperation+0xa8>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008b18:	4938      	ldr	r1, [pc, #224]	@ (8008bfc <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fc4e 	bl	80093bc <SD_SwitchSpeed>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d011      	beq.n	8008b4a <HAL_SD_ConfigSpeedBusOperation+0xba>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b2a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	75fb      	strb	r3, [r7, #23]
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008b36:	e008      	b.n	8008b4a <HAL_SD_ConfigSpeedBusOperation+0xba>
        }
      }
      else
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008b48:	e01c      	b.n	8008b84 <HAL_SD_ConfigSpeedBusOperation+0xf4>
 8008b4a:	e01b      	b.n	8008b84 <HAL_SD_ConfigSpeedBusOperation+0xf4>
    }
    case SDMMC_SPEED_MODE_DEFAULT:
    {
      /* Switch to default Speed */
      if (SD_SwitchSpeed(hsd, SDMMC_SDR12_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8008b4c:	492c      	ldr	r1, [pc, #176]	@ (8008c00 <HAL_SD_ConfigSpeedBusOperation+0x170>)
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fc34 	bl	80093bc <SD_SwitchSpeed>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d013      	beq.n	8008b82 <HAL_SD_ConfigSpeedBusOperation+0xf2>
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b5e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	75fb      	strb	r3, [r7, #23]
      }

      break;
 8008b6a:	e00a      	b.n	8008b82 <HAL_SD_ConfigSpeedBusOperation+0xf2>
    }
    case SDMMC_SPEED_MODE_ULTRA: /*not valid without transceiver*/
    default:
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b70:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b7c:	e002      	b.n	8008b84 <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 8008b7e:	bf00      	nop
 8008b80:	e000      	b.n	8008b84 <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 8008b82:	bf00      	nop
  }
#endif /* USE_SD_TRANSCEIVER */

  /* Verify that SD card is ready to use after Speed mode switch*/
  tickstart = HAL_GetTick();
 8008b84:	f7f8 f96a 	bl	8000e5c <HAL_GetTick>
 8008b88:	6138      	str	r0, [r7, #16]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008b8a:	e011      	b.n	8008bb0 <HAL_SD_ConfigSpeedBusOperation+0x120>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008b8c:	f7f8 f966 	bl	8000e5c <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9a:	d109      	bne.n	8008bb0 <HAL_SD_ConfigSpeedBusOperation+0x120>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008ba2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e021      	b.n	8008bf4 <HAL_SD_ConfigSpeedBusOperation+0x164>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f829 	bl	8008c08 <HAL_SD_GetCardState>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b04      	cmp	r3, #4
 8008bba:	d1e7      	bne.n	8008b8c <HAL_SD_ConfigSpeedBusOperation+0xfc>
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f002 f837 	bl	800ac38 <SDMMC_CmdBlockLength>
 8008bca:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00b      	beq.n	8008bea <HAL_SD_ConfigSpeedBusOperation+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8008c04 <HAL_SD_ConfigSpeedBusOperation+0x174>)
 8008bd8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	431a      	orrs	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	75fb      	strb	r3, [r7, #23]
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  return status;
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	80ffff01 	.word	0x80ffff01
 8008c00:	80ffff00 	.word	0x80ffff00
 8008c04:	1fe00fff 	.word	0x1fe00fff

08008c08 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008c14:	f107 030c 	add.w	r3, r7, #12
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fa40 	bl	80090a0 <SD_SendStatus>
 8008c20:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	0a5b      	lsrs	r3, r3, #9
 8008c38:	f003 030f 	and.w	r3, r3, #15
 8008c3c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008c3e:	693b      	ldr	r3, [r7, #16]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b090      	sub	sp, #64	@ 0x40
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008c50:	2300      	movs	r3, #0
 8008c52:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008c54:	f7f8 f902 	bl	8000e5c <HAL_GetTick>
 8008c58:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f001 ff65 	bl	800ab2e <SDMMC_GetPowerState>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c6a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008c6e:	e0b5      	b.n	8008ddc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d02e      	beq.n	8008cd6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f002 f9b0 	bl	800afe2 <SDMMC_CmdSendCID>
 8008c82:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <SD_InitCard+0x46>
    {
      return errorstate;
 8008c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8c:	e0a6      	b.n	8008ddc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f001 ff90 	bl	800abba <SDMMC_GetResponse>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2104      	movs	r1, #4
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f001 ff87 	bl	800abba <SDMMC_GetResponse>
 8008cac:	4602      	mov	r2, r0
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2108      	movs	r1, #8
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f001 ff7e 	bl	800abba <SDMMC_GetResponse>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	210c      	movs	r1, #12
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f001 ff75 	bl	800abba <SDMMC_GetResponse>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d01d      	beq.n	8008d1a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008cde:	e019      	b.n	8008d14 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f107 020a 	add.w	r2, r7, #10
 8008ce8:	4611      	mov	r1, r2
 8008cea:	4618      	mov	r0, r3
 8008cec:	f002 f9b8 	bl	800b060 <SDMMC_CmdSetRelAdd>
 8008cf0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <SD_InitCard+0xb4>
      {
        return errorstate;
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfa:	e06f      	b.n	8008ddc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008cfc:	f7f8 f8ae 	bl	8000e5c <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	f241 3287 	movw	r2, #4999	@ 0x1387
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d902      	bls.n	8008d14 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008d0e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008d12:	e063      	b.n	8008ddc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008d14:	897b      	ldrh	r3, [r7, #10]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0e2      	beq.n	8008ce0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	d036      	beq.n	8008d90 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008d22:	897b      	ldrh	r3, [r7, #10]
 8008d24:	461a      	mov	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d32:	041b      	lsls	r3, r3, #16
 8008d34:	4619      	mov	r1, r3
 8008d36:	4610      	mov	r0, r2
 8008d38:	f002 f972 	bl	800b020 <SDMMC_CmdSendCSD>
 8008d3c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <SD_InitCard+0x100>
    {
      return errorstate;
 8008d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d46:	e049      	b.n	8008ddc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f001 ff33 	bl	800abba <SDMMC_GetResponse>
 8008d54:	4602      	mov	r2, r0
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2104      	movs	r1, #4
 8008d60:	4618      	mov	r0, r3
 8008d62:	f001 ff2a 	bl	800abba <SDMMC_GetResponse>
 8008d66:	4602      	mov	r2, r0
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2108      	movs	r1, #8
 8008d72:	4618      	mov	r0, r3
 8008d74:	f001 ff21 	bl	800abba <SDMMC_GetResponse>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	210c      	movs	r1, #12
 8008d84:	4618      	mov	r0, r3
 8008d86:	f001 ff18 	bl	800abba <SDMMC_GetResponse>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2104      	movs	r1, #4
 8008d96:	4618      	mov	r0, r3
 8008d98:	f001 ff0f 	bl	800abba <SDMMC_GetResponse>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	0d1a      	lsrs	r2, r3, #20
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008da4:	f107 030c 	add.w	r3, r7, #12
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7ff fad0 	bl	8008350 <HAL_SD_GetCardCSD>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d002      	beq.n	8008dbc <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008db6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008dba:	e00f      	b.n	8008ddc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc4:	041b      	lsls	r3, r3, #16
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	4610      	mov	r0, r2
 8008dca:	f002 f821 	bl	800ae10 <SDMMC_CmdSelDesel>
 8008dce:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <SD_InitCard+0x192>
  {
    return errorstate;
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd8:	e000      	b.n	8008ddc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3740      	adds	r7, #64	@ 0x40
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008df0:	2300      	movs	r3, #0
 8008df2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008df4:	2300      	movs	r3, #0
 8008df6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f002 f82a 	bl	800ae56 <SDMMC_CmdGoIdleState>
 8008e02:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <SD_PowerON+0x2a>
  {
    return errorstate;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	e072      	b.n	8008ef4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f002 f83d 	bl	800ae92 <SDMMC_CmdOperCond>
 8008e18:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e20:	d10d      	bne.n	8008e3e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f002 f812 	bl	800ae56 <SDMMC_CmdGoIdleState>
 8008e32:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d004      	beq.n	8008e44 <SD_PowerON+0x60>
    {
      return errorstate;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	e05a      	b.n	8008ef4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d137      	bne.n	8008ebc <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2100      	movs	r1, #0
 8008e52:	4618      	mov	r0, r3
 8008e54:	f002 f83d 	bl	800aed2 <SDMMC_CmdAppCommand>
 8008e58:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d02d      	beq.n	8008ebc <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e60:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008e64:	e046      	b.n	8008ef4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f002 f830 	bl	800aed2 <SDMMC_CmdAppCommand>
 8008e72:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <SD_PowerON+0x9a>
    {
      return errorstate;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	e03a      	b.n	8008ef4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	491e      	ldr	r1, [pc, #120]	@ (8008efc <SD_PowerON+0x118>)
 8008e84:	4618      	mov	r0, r3
 8008e86:	f002 f847 	bl	800af18 <SDMMC_CmdAppOperCommand>
 8008e8a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d002      	beq.n	8008e98 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008e96:	e02d      	b.n	8008ef4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f001 fe8b 	bl	800abba <SDMMC_GetResponse>
 8008ea4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	0fdb      	lsrs	r3, r3, #31
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d101      	bne.n	8008eb2 <SD_PowerON+0xce>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e000      	b.n	8008eb4 <SD_PowerON+0xd0>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	613b      	str	r3, [r7, #16]

    count++;
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d802      	bhi.n	8008ecc <SD_PowerON+0xe8>
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0cc      	beq.n	8008e66 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d902      	bls.n	8008edc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008ed6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008eda:	e00b      	b.n	8008ef4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	c1100000 	.word	0xc1100000

08008f00 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08c      	sub	sp, #48	@ 0x30
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008f0a:	f7f7 ffa7 	bl	8000e5c <HAL_GetTick>
 8008f0e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2100      	movs	r1, #0
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f001 fe4d 	bl	800abba <SDMMC_GetResponse>
 8008f20:	4603      	mov	r3, r0
 8008f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f2a:	d102      	bne.n	8008f32 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008f2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008f30:	e0b0      	b.n	8009094 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	2140      	movs	r1, #64	@ 0x40
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f001 fe7d 	bl	800ac38 <SDMMC_CmdBlockLength>
 8008f3e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d005      	beq.n	8008f52 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
 8008f50:	e0a0      	b.n	8009094 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f5a:	041b      	lsls	r3, r3, #16
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4610      	mov	r0, r2
 8008f60:	f001 ffb7 	bl	800aed2 <SDMMC_CmdAppCommand>
 8008f64:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d005      	beq.n	8008f78 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	e08d      	b.n	8009094 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f78:	f04f 33ff 	mov.w	r3, #4294967295
 8008f7c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008f7e:	2340      	movs	r3, #64	@ 0x40
 8008f80:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008f82:	2360      	movs	r3, #96	@ 0x60
 8008f84:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f86:	2302      	movs	r3, #2
 8008f88:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f107 0208 	add.w	r2, r7, #8
 8008f9a:	4611      	mov	r1, r2
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f001 fe1f 	bl	800abe0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f002 f89f 	bl	800b0ea <SDMMC_CmdStatusRegister>
 8008fac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d02b      	beq.n	800900c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	e069      	b.n	8009094 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d013      	beq.n	8008ff6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008fce:	2300      	movs	r3, #0
 8008fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fd2:	e00d      	b.n	8008ff0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f001 fd79 	bl	800aad0 <SDMMC_ReadFIFO>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe2:	601a      	str	r2, [r3, #0]
        pData++;
 8008fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe6:	3304      	adds	r3, #4
 8008fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8008fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fec:	3301      	adds	r3, #1
 8008fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ff2:	2b07      	cmp	r3, #7
 8008ff4:	d9ee      	bls.n	8008fd4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ff6:	f7f7 ff31 	bl	8000e5c <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009004:	d102      	bne.n	800900c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009006:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800900a:	e043      	b.n	8009094 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009012:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0d2      	beq.n	8008fc0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009020:	f003 0308 	and.w	r3, r3, #8
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009028:	2308      	movs	r3, #8
 800902a:	e033      	b.n	8009094 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009032:	f003 0302 	and.w	r3, r3, #2
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800903a:	2302      	movs	r3, #2
 800903c:	e02a      	b.n	8009094 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009044:	f003 0320 	and.w	r3, r3, #32
 8009048:	2b00      	cmp	r3, #0
 800904a:	d017      	beq.n	800907c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800904c:	2320      	movs	r3, #32
 800904e:	e021      	b.n	8009094 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4618      	mov	r0, r3
 8009056:	f001 fd3b 	bl	800aad0 <SDMMC_ReadFIFO>
 800905a:	4602      	mov	r2, r0
 800905c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905e:	601a      	str	r2, [r3, #0]
    pData++;
 8009060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009062:	3304      	adds	r3, #4
 8009064:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009066:	f7f7 fef9 	bl	8000e5c <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009074:	d102      	bne.n	800907c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009076:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800907a:	e00b      	b.n	8009094 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009082:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1e2      	bne.n	8009050 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a03      	ldr	r2, [pc, #12]	@ (800909c <SD_SendSDStatus+0x19c>)
 8009090:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3730      	adds	r7, #48	@ 0x30
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	18000f3a 	.word	0x18000f3a

080090a0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d102      	bne.n	80090b6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80090b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80090b4:	e018      	b.n	80090e8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090be:	041b      	lsls	r3, r3, #16
 80090c0:	4619      	mov	r1, r3
 80090c2:	4610      	mov	r0, r2
 80090c4:	f001 ffee 	bl	800b0a4 <SDMMC_CmdSendStatus>
 80090c8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	e009      	b.n	80090e8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2100      	movs	r1, #0
 80090da:	4618      	mov	r0, r3
 80090dc:	f001 fd6d 	bl	800abba <SDMMC_GetResponse>
 80090e0:	4602      	mov	r2, r0
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80090f8:	2300      	movs	r3, #0
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	2300      	movs	r3, #0
 80090fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2100      	movs	r1, #0
 8009106:	4618      	mov	r0, r3
 8009108:	f001 fd57 	bl	800abba <SDMMC_GetResponse>
 800910c:	4603      	mov	r3, r0
 800910e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009112:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009116:	d102      	bne.n	800911e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009118:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800911c:	e02f      	b.n	800917e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800911e:	f107 030c 	add.w	r3, r7, #12
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f879 	bl	800921c <SD_FindSCR>
 800912a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	e023      	b.n	800917e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d01c      	beq.n	800917a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009148:	041b      	lsls	r3, r3, #16
 800914a:	4619      	mov	r1, r3
 800914c:	4610      	mov	r0, r2
 800914e:	f001 fec0 	bl	800aed2 <SDMMC_CmdAppCommand>
 8009152:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	e00f      	b.n	800917e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2102      	movs	r1, #2
 8009164:	4618      	mov	r0, r3
 8009166:	f001 fef7 	bl	800af58 <SDMMC_CmdBusWidth>
 800916a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	e003      	b.n	800917e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009176:	2300      	movs	r3, #0
 8009178:	e001      	b.n	800917e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800917a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b086      	sub	sp, #24
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800918e:	2300      	movs	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	2300      	movs	r3, #0
 8009194:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	2100      	movs	r1, #0
 800919c:	4618      	mov	r0, r3
 800919e:	f001 fd0c 	bl	800abba <SDMMC_GetResponse>
 80091a2:	4603      	mov	r3, r0
 80091a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091ac:	d102      	bne.n	80091b4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80091ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80091b2:	e02f      	b.n	8009214 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80091b4:	f107 030c 	add.w	r3, r7, #12
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f82e 	bl	800921c <SD_FindSCR>
 80091c0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d001      	beq.n	80091cc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	e023      	b.n	8009214 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d01c      	beq.n	8009210 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091de:	041b      	lsls	r3, r3, #16
 80091e0:	4619      	mov	r1, r3
 80091e2:	4610      	mov	r0, r2
 80091e4:	f001 fe75 	bl	800aed2 <SDMMC_CmdAppCommand>
 80091e8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	e00f      	b.n	8009214 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2100      	movs	r1, #0
 80091fa:	4618      	mov	r0, r3
 80091fc:	f001 feac 	bl	800af58 <SDMMC_CmdBusWidth>
 8009200:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	e003      	b.n	8009214 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800920c:	2300      	movs	r3, #0
 800920e:	e001      	b.n	8009214 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009210:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009214:	4618      	mov	r0, r3
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08e      	sub	sp, #56	@ 0x38
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009226:	f7f7 fe19 	bl	8000e5c <HAL_GetTick>
 800922a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800922c:	2300      	movs	r3, #0
 800922e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009230:	2300      	movs	r3, #0
 8009232:	60bb      	str	r3, [r7, #8]
 8009234:	2300      	movs	r3, #0
 8009236:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2108      	movs	r1, #8
 8009242:	4618      	mov	r0, r3
 8009244:	f001 fcf8 	bl	800ac38 <SDMMC_CmdBlockLength>
 8009248:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800924a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009252:	e0ad      	b.n	80093b0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800925c:	041b      	lsls	r3, r3, #16
 800925e:	4619      	mov	r1, r3
 8009260:	4610      	mov	r0, r2
 8009262:	f001 fe36 	bl	800aed2 <SDMMC_CmdAppCommand>
 8009266:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <SD_FindSCR+0x56>
  {
    return errorstate;
 800926e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009270:	e09e      	b.n	80093b0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009272:	f04f 33ff 	mov.w	r3, #4294967295
 8009276:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009278:	2308      	movs	r3, #8
 800927a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800927c:	2330      	movs	r3, #48	@ 0x30
 800927e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009280:	2302      	movs	r3, #2
 8009282:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009284:	2300      	movs	r3, #0
 8009286:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009288:	2301      	movs	r3, #1
 800928a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f107 0210 	add.w	r2, r7, #16
 8009294:	4611      	mov	r1, r2
 8009296:	4618      	mov	r0, r3
 8009298:	f001 fca2 	bl	800abe0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f001 fe7c 	bl	800af9e <SDMMC_CmdSendSCR>
 80092a6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80092a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d027      	beq.n	80092fe <SD_FindSCR+0xe2>
  {
    return errorstate;
 80092ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b0:	e07e      	b.n	80093b0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d113      	bne.n	80092e8 <SD_FindSCR+0xcc>
 80092c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d110      	bne.n	80092e8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f001 fc00 	bl	800aad0 <SDMMC_ReadFIFO>
 80092d0:	4603      	mov	r3, r0
 80092d2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4618      	mov	r0, r3
 80092da:	f001 fbf9 	bl	800aad0 <SDMMC_ReadFIFO>
 80092de:	4603      	mov	r3, r0
 80092e0:	60fb      	str	r3, [r7, #12]
      index++;
 80092e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e4:	3301      	adds	r3, #1
 80092e6:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80092e8:	f7f7 fdb8 	bl	8000e5c <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f6:	d102      	bne.n	80092fe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80092f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80092fc:	e058      	b.n	80093b0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009304:	f240 532a 	movw	r3, #1322	@ 0x52a
 8009308:	4013      	ands	r3, r2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0d1      	beq.n	80092b2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009314:	f003 0308 	and.w	r3, r3, #8
 8009318:	2b00      	cmp	r3, #0
 800931a:	d005      	beq.n	8009328 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2208      	movs	r2, #8
 8009322:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009324:	2308      	movs	r3, #8
 8009326:	e043      	b.n	80093b0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800932e:	f003 0302 	and.w	r3, r3, #2
 8009332:	2b00      	cmp	r3, #0
 8009334:	d005      	beq.n	8009342 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2202      	movs	r2, #2
 800933c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800933e:	2302      	movs	r3, #2
 8009340:	e036      	b.n	80093b0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009348:	f003 0320 	and.w	r3, r3, #32
 800934c:	2b00      	cmp	r3, #0
 800934e:	d005      	beq.n	800935c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2220      	movs	r2, #32
 8009356:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009358:	2320      	movs	r3, #32
 800935a:	e029      	b.n	80093b0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a15      	ldr	r2, [pc, #84]	@ (80093b8 <SD_FindSCR+0x19c>)
 8009362:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	061a      	lsls	r2, r3, #24
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	021b      	lsls	r3, r3, #8
 800936c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009370:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	0a1b      	lsrs	r3, r3, #8
 8009376:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800937a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	0e1b      	lsrs	r3, r3, #24
 8009380:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009384:	601a      	str	r2, [r3, #0]
    scr++;
 8009386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009388:	3304      	adds	r3, #4
 800938a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	061a      	lsls	r2, r3, #24
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	021b      	lsls	r3, r3, #8
 8009394:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009398:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	0a1b      	lsrs	r3, r3, #8
 800939e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80093a2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	0e1b      	lsrs	r3, r3, #24
 80093a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80093aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3738      	adds	r7, #56	@ 0x38
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	18000f3a 	.word	0x18000f3a

080093bc <SD_SwitchSpeed>:
  * @param  hsd: SD handle
  * @param  SwitchSpeedMode: SD speed mode( SDMMC_SDR12_SWITCH_PATTERN, SDMMC_SDR25_SWITCH_PATTERN)
  * @retval SD Card error state
  */
uint32_t SD_SwitchSpeed(SD_HandleTypeDef *hsd, uint32_t SwitchSpeedMode)
{
 80093bc:	b590      	push	{r4, r7, lr}
 80093be:	b09d      	sub	sp, #116	@ 0x74
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80093c6:	2300      	movs	r3, #0
 80093c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 80093ca:	f107 0308 	add.w	r3, r7, #8
 80093ce:	2240      	movs	r2, #64	@ 0x40
 80093d0:	2100      	movs	r1, #0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f007 fa60 	bl	8010898 <memset>
  uint32_t count;
  uint32_t loop = 0 ;
 80093d8:	2300      	movs	r3, #0
 80093da:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t Timeout = HAL_GetTick();
 80093dc:	f7f7 fd3e 	bl	8000e5c <HAL_GetTick>
 80093e0:	6638      	str	r0, [r7, #96]	@ 0x60

  if (hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d102      	bne.n	80093f0 <SD_SwitchSpeed+0x34>
  {
    /* Standard Speed Card <= 12.5Mhz  */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093ea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80093ee:	e0ad      	b.n	800954c <SD_SwitchSpeed+0x190>
  }

  if (hsd->SdCard.CardSpeed >= CARD_HIGH_SPEED)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093f4:	2bff      	cmp	r3, #255	@ 0xff
 80093f6:	f240 80a8 	bls.w	800954a <SD_SwitchSpeed+0x18e>
  {
    /* Initialize the Data control register */
    hsd->Instance->DCTRL = 0;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2200      	movs	r2, #0
 8009400:	62da      	str	r2, [r3, #44]	@ 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2140      	movs	r1, #64	@ 0x40
 8009408:	4618      	mov	r0, r3
 800940a:	f001 fc15 	bl	800ac38 <SDMMC_CmdBlockLength>
 800940e:	66f8      	str	r0, [r7, #108]	@ 0x6c

    if (errorstate != HAL_SD_ERROR_NONE)
 8009410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <SD_SwitchSpeed+0x5e>
    {
      return errorstate;
 8009416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009418:	e098      	b.n	800954c <SD_SwitchSpeed+0x190>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800941a:	f04f 33ff 	mov.w	r3, #4294967295
 800941e:	64bb      	str	r3, [r7, #72]	@ 0x48
    sdmmc_datainitstructure.DataLength    = 64U;
 8009420:	2340      	movs	r3, #64	@ 0x40
 8009422:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8009424:	2360      	movs	r3, #96	@ 0x60
 8009426:	653b      	str	r3, [r7, #80]	@ 0x50
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009428:	2302      	movs	r3, #2
 800942a:	657b      	str	r3, [r7, #84]	@ 0x54
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800942c:	2300      	movs	r3, #0
 800942e:	65bb      	str	r3, [r7, #88]	@ 0x58
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8009430:	2301      	movs	r3, #1
 8009432:	65fb      	str	r3, [r7, #92]	@ 0x5c

    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800943c:	4611      	mov	r1, r2
 800943e:	4618      	mov	r0, r3
 8009440:	f001 fbce 	bl	800abe0 <SDMMC_ConfigData>


    errorstate = SDMMC_CmdSwitch(hsd->Instance, SwitchSpeedMode);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6839      	ldr	r1, [r7, #0]
 800944a:	4618      	mov	r0, r3
 800944c:	f001 fe6f 	bl	800b12e <SDMMC_CmdSwitch>
 8009450:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (errorstate != HAL_SD_ERROR_NONE)
 8009452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009454:	2b00      	cmp	r3, #0
 8009456:	d036      	beq.n	80094c6 <SD_SwitchSpeed+0x10a>
    {
      return errorstate;
 8009458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800945a:	e077      	b.n	800954c <SD_SwitchSpeed+0x190>
    }

    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009462:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009466:	2b00      	cmp	r3, #0
 8009468:	d01a      	beq.n	80094a0 <SD_SwitchSpeed+0xe4>
      {
        for (count = 0U; count < 8U; count++)
 800946a:	2300      	movs	r3, #0
 800946c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800946e:	e011      	b.n	8009494 <SD_SwitchSpeed+0xd8>
        {
          SD_hs[(8U * loop) + count]  = SDMMC_ReadFIFO(hsd->Instance);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6819      	ldr	r1, [r3, #0]
 8009474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009476:	00da      	lsls	r2, r3, #3
 8009478:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800947a:	18d4      	adds	r4, r2, r3
 800947c:	4608      	mov	r0, r1
 800947e:	f001 fb27 	bl	800aad0 <SDMMC_ReadFIFO>
 8009482:	4602      	mov	r2, r0
 8009484:	00a3      	lsls	r3, r4, #2
 8009486:	3370      	adds	r3, #112	@ 0x70
 8009488:	443b      	add	r3, r7
 800948a:	f843 2c68 	str.w	r2, [r3, #-104]
        for (count = 0U; count < 8U; count++)
 800948e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009490:	3301      	adds	r3, #1
 8009492:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009494:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009496:	2b07      	cmp	r3, #7
 8009498:	d9ea      	bls.n	8009470 <SD_SwitchSpeed+0xb4>
        }
        loop ++;
 800949a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800949c:	3301      	adds	r3, #1
 800949e:	667b      	str	r3, [r7, #100]	@ 0x64
      }

      if ((HAL_GetTick() - Timeout) >=  SDMMC_DATATIMEOUT)
 80094a0:	f7f7 fcdc 	bl	8000e5c <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ae:	d10a      	bne.n	80094c6 <SD_SwitchSpeed+0x10a>
      {
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80094b6:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_SD_ERROR_TIMEOUT;
 80094c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80094c4:	e042      	b.n	800954c <SD_SwitchSpeed+0x190>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094cc:	f240 532a 	movw	r3, #1322	@ 0x52a
 80094d0:	4013      	ands	r3, r2
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0c2      	beq.n	800945c <SD_SwitchSpeed+0xa0>
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094dc:	f003 0308 	and.w	r3, r3, #8
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d005      	beq.n	80094f0 <SD_SwitchSpeed+0x134>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2208      	movs	r2, #8
 80094ea:	639a      	str	r2, [r3, #56]	@ 0x38

      return errorstate;
 80094ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094ee:	e02d      	b.n	800954c <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094f6:	f003 0302 	and.w	r3, r3, #2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d007      	beq.n	800950e <SD_SwitchSpeed+0x152>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2202      	movs	r2, #2
 8009504:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;
 8009506:	2302      	movs	r3, #2
 8009508:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 800950a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800950c:	e01e      	b.n	800954c <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009514:	f003 0320 	and.w	r3, r3, #32
 8009518:	2b00      	cmp	r3, #0
 800951a:	d007      	beq.n	800952c <SD_SwitchSpeed+0x170>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2220      	movs	r2, #32
 8009522:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_RX_OVERRUN;
 8009524:	2320      	movs	r3, #32
 8009526:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 8009528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800952a:	e00f      	b.n	800954c <SD_SwitchSpeed+0x190>
    {
      /* No error flag set */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a08      	ldr	r2, [pc, #32]	@ (8009554 <SD_SwitchSpeed+0x198>)
 8009532:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Test if the switch mode HS is ok */
    if ((((uint8_t *)SD_hs)[13] & 2U) != 2U)
 8009534:	f107 0308 	add.w	r3, r7, #8
 8009538:	330d      	adds	r3, #13
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	f003 0302 	and.w	r3, r3, #2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d102      	bne.n	800954a <SD_SwitchSpeed+0x18e>
    {
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009544:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009548:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }

  }

  return errorstate;
 800954a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800954c:	4618      	mov	r0, r3
 800954e:	3774      	adds	r7, #116	@ 0x74
 8009550:	46bd      	mov	sp, r7
 8009552:	bd90      	pop	{r4, r7, pc}
 8009554:	18000f3a 	.word	0x18000f3a

08009558 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e02b      	b.n	80095c4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	d106      	bne.n	8009586 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f825 	bl	80095d0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2202      	movs	r2, #2
 800958a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	3304      	adds	r3, #4
 8009596:	4619      	mov	r1, r3
 8009598:	4610      	mov	r0, r2
 800959a:	f001 f96d 	bl	800a878 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6818      	ldr	r0, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	461a      	mov	r2, r3
 80095a8:	6839      	ldr	r1, [r7, #0]
 80095aa:	f001 f9c1 	bl	800a930 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80095ae:	4b07      	ldr	r3, [pc, #28]	@ (80095cc <HAL_SDRAM_Init+0x74>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a06      	ldr	r2, [pc, #24]	@ (80095cc <HAL_SDRAM_Init+0x74>)
 80095b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80095b8:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	52004000 	.word	0x52004000

080095d0 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80095f6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d101      	bne.n	8009602 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80095fe:	2302      	movs	r3, #2
 8009600:	e021      	b.n	8009646 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d002      	beq.n	800960e <HAL_SDRAM_SendCommand+0x2a>
 8009608:	7dfb      	ldrb	r3, [r7, #23]
 800960a:	2b05      	cmp	r3, #5
 800960c:	d118      	bne.n	8009640 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2202      	movs	r2, #2
 8009612:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	68b9      	ldr	r1, [r7, #8]
 800961e:	4618      	mov	r0, r3
 8009620:	f001 f9f0 	bl	800aa04 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2b02      	cmp	r3, #2
 800962a:	d104      	bne.n	8009636 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2205      	movs	r2, #5
 8009630:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009634:	e006      	b.n	8009644 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800963e:	e001      	b.n	8009644 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e000      	b.n	8009646 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}

0800964e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	b082      	sub	sp, #8
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b02      	cmp	r3, #2
 8009662:	d101      	bne.n	8009668 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009664:	2302      	movs	r3, #2
 8009666:	e016      	b.n	8009696 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b01      	cmp	r3, #1
 8009672:	d10f      	bne.n	8009694 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2202      	movs	r2, #2
 8009678:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	4618      	mov	r0, r3
 8009684:	f001 f9e2 	bl	800aa4c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	e000      	b.n	8009696 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e10f      	b.n	80098d2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a87      	ldr	r2, [pc, #540]	@ (80098dc <HAL_SPI_Init+0x23c>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d00f      	beq.n	80096e2 <HAL_SPI_Init+0x42>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a86      	ldr	r2, [pc, #536]	@ (80098e0 <HAL_SPI_Init+0x240>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d00a      	beq.n	80096e2 <HAL_SPI_Init+0x42>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a84      	ldr	r2, [pc, #528]	@ (80098e4 <HAL_SPI_Init+0x244>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d005      	beq.n	80096e2 <HAL_SPI_Init+0x42>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	2b0f      	cmp	r3, #15
 80096dc:	d901      	bls.n	80096e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e0f7      	b.n	80098d2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fbbc 	bl	8009e60 <SPI_GetPacketSize>
 80096e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a7b      	ldr	r2, [pc, #492]	@ (80098dc <HAL_SPI_Init+0x23c>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d00c      	beq.n	800970e <HAL_SPI_Init+0x6e>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a79      	ldr	r2, [pc, #484]	@ (80098e0 <HAL_SPI_Init+0x240>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d007      	beq.n	800970e <HAL_SPI_Init+0x6e>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a78      	ldr	r2, [pc, #480]	@ (80098e4 <HAL_SPI_Init+0x244>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d002      	beq.n	800970e <HAL_SPI_Init+0x6e>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b08      	cmp	r3, #8
 800970c:	d811      	bhi.n	8009732 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009712:	4a72      	ldr	r2, [pc, #456]	@ (80098dc <HAL_SPI_Init+0x23c>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d009      	beq.n	800972c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a70      	ldr	r2, [pc, #448]	@ (80098e0 <HAL_SPI_Init+0x240>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d004      	beq.n	800972c <HAL_SPI_Init+0x8c>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a6f      	ldr	r2, [pc, #444]	@ (80098e4 <HAL_SPI_Init+0x244>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d104      	bne.n	8009736 <HAL_SPI_Init+0x96>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2b10      	cmp	r3, #16
 8009730:	d901      	bls.n	8009736 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e0cd      	b.n	80098d2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d106      	bne.n	8009750 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f003 fdb8 	bl	800d2c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2202      	movs	r2, #2
 8009754:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 0201 	bic.w	r2, r2, #1
 8009766:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009772:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800977c:	d119      	bne.n	80097b2 <HAL_SPI_Init+0x112>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009786:	d103      	bne.n	8009790 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800978c:	2b00      	cmp	r3, #0
 800978e:	d008      	beq.n	80097a2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10c      	bne.n	80097b2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800979c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097a0:	d107      	bne.n	80097b2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80097b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00f      	beq.n	80097de <HAL_SPI_Init+0x13e>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	2b06      	cmp	r3, #6
 80097c4:	d90b      	bls.n	80097de <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	430a      	orrs	r2, r1
 80097da:	601a      	str	r2, [r3, #0]
 80097dc:	e007      	b.n	80097ee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80097ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	69da      	ldr	r2, [r3, #28]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f6:	431a      	orrs	r2, r3
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	431a      	orrs	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009800:	ea42 0103 	orr.w	r1, r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	68da      	ldr	r2, [r3, #12]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	430a      	orrs	r2, r1
 800980e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009818:	431a      	orrs	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981e:	431a      	orrs	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	431a      	orrs	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	431a      	orrs	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	431a      	orrs	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	431a      	orrs	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	431a      	orrs	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009842:	431a      	orrs	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	431a      	orrs	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800984e:	ea42 0103 	orr.w	r1, r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	430a      	orrs	r2, r1
 800985c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d113      	bne.n	800988e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009878:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800988c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f022 0201 	bic.w	r2, r2, #1
 800989c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00a      	beq.n	80098c0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	430a      	orrs	r2, r1
 80098be:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	40013000 	.word	0x40013000
 80098e0:	40003800 	.word	0x40003800
 80098e4:	40003c00 	.word	0x40003c00

080098e8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b088      	sub	sp, #32
 80098ec:	af02      	add	r7, sp, #8
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	4613      	mov	r3, r2
 80098f6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	3320      	adds	r3, #32
 80098fe:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009900:	f7f7 faac 	bl	8000e5c <HAL_GetTick>
 8009904:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b01      	cmp	r3, #1
 8009910:	d001      	beq.n	8009916 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009912:	2302      	movs	r3, #2
 8009914:	e1d1      	b.n	8009cba <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <HAL_SPI_Transmit+0x3a>
 800991c:	88fb      	ldrh	r3, [r7, #6]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e1c9      	b.n	8009cba <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800992c:	2b01      	cmp	r3, #1
 800992e:	d101      	bne.n	8009934 <HAL_SPI_Transmit+0x4c>
 8009930:	2302      	movs	r3, #2
 8009932:	e1c2      	b.n	8009cba <HAL_SPI_Transmit+0x3d2>
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2203      	movs	r2, #3
 8009940:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	88fa      	ldrh	r2, [r7, #6]
 8009956:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	88fa      	ldrh	r2, [r7, #6]
 800995e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800998c:	d108      	bne.n	80099a0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	e009      	b.n	80099b4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80099b2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	4b96      	ldr	r3, [pc, #600]	@ (8009c14 <HAL_SPI_Transmit+0x32c>)
 80099bc:	4013      	ands	r3, r2
 80099be:	88f9      	ldrh	r1, [r7, #6]
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	6812      	ldr	r2, [r2, #0]
 80099c4:	430b      	orrs	r3, r1
 80099c6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f042 0201 	orr.w	r2, r2, #1
 80099d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099e0:	d107      	bne.n	80099f2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	2b0f      	cmp	r3, #15
 80099f8:	d947      	bls.n	8009a8a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80099fa:	e03f      	b.n	8009a7c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	f003 0302 	and.w	r3, r3, #2
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d114      	bne.n	8009a34 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	6812      	ldr	r2, [r2, #0]
 8009a14:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a1a:	1d1a      	adds	r2, r3, #4
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009a32:	e023      	b.n	8009a7c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a34:	f7f7 fa12 	bl	8000e5c <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d803      	bhi.n	8009a4c <HAL_SPI_Transmit+0x164>
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4a:	d102      	bne.n	8009a52 <HAL_SPI_Transmit+0x16a>
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d114      	bne.n	8009a7c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 f936 	bl	8009cc4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	e11e      	b.n	8009cba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1b9      	bne.n	80099fc <HAL_SPI_Transmit+0x114>
 8009a88:	e0f1      	b.n	8009c6e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	2b07      	cmp	r3, #7
 8009a90:	f240 80e6 	bls.w	8009c60 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009a94:	e05d      	b.n	8009b52 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d132      	bne.n	8009b0a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d918      	bls.n	8009ae2 <HAL_SPI_Transmit+0x1fa>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d014      	beq.n	8009ae2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6812      	ldr	r2, [r2, #0]
 8009ac2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ac8:	1d1a      	adds	r2, r3, #4
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	3b02      	subs	r3, #2
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009ae0:	e037      	b.n	8009b52 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ae6:	881a      	ldrh	r2, [r3, #0]
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009af0:	1c9a      	adds	r2, r3, #2
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	3b01      	subs	r3, #1
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009b08:	e023      	b.n	8009b52 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b0a:	f7f7 f9a7 	bl	8000e5c <HAL_GetTick>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	1ad3      	subs	r3, r2, r3
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d803      	bhi.n	8009b22 <HAL_SPI_Transmit+0x23a>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b20:	d102      	bne.n	8009b28 <HAL_SPI_Transmit+0x240>
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d114      	bne.n	8009b52 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f000 f8cb 	bl	8009cc4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e0b3      	b.n	8009cba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d19b      	bne.n	8009a96 <HAL_SPI_Transmit+0x1ae>
 8009b5e:	e086      	b.n	8009c6e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	f003 0302 	and.w	r3, r3, #2
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d154      	bne.n	8009c18 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	d918      	bls.n	8009bac <HAL_SPI_Transmit+0x2c4>
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b7e:	2b40      	cmp	r3, #64	@ 0x40
 8009b80:	d914      	bls.n	8009bac <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6812      	ldr	r2, [r2, #0]
 8009b8c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b92:	1d1a      	adds	r2, r3, #4
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	3b04      	subs	r3, #4
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009baa:	e059      	b.n	8009c60 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d917      	bls.n	8009be8 <HAL_SPI_Transmit+0x300>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d013      	beq.n	8009be8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bc4:	881a      	ldrh	r2, [r3, #0]
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bce:	1c9a      	adds	r2, r3, #2
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	3b02      	subs	r3, #2
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009be6:	e03b      	b.n	8009c60 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3320      	adds	r3, #32
 8009bf2:	7812      	ldrb	r2, [r2, #0]
 8009bf4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009c12:	e025      	b.n	8009c60 <HAL_SPI_Transmit+0x378>
 8009c14:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c18:	f7f7 f920 	bl	8000e5c <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d803      	bhi.n	8009c30 <HAL_SPI_Transmit+0x348>
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c2e:	d102      	bne.n	8009c36 <HAL_SPI_Transmit+0x34e>
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d114      	bne.n	8009c60 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f000 f844 	bl	8009cc4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e02c      	b.n	8009cba <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f47f af79 	bne.w	8009b60 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2200      	movs	r2, #0
 8009c76:	2108      	movs	r1, #8
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 f8c3 	bl	8009e04 <SPI_WaitOnFlagUntilTimeout>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d007      	beq.n	8009c94 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c8a:	f043 0220 	orr.w	r2, r3, #32
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f000 f815 	bl	8009cc4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e000      	b.n	8009cba <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
  }
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop

08009cc4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	699a      	ldr	r2, [r3, #24]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0208 	orr.w	r2, r2, #8
 8009ce2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699a      	ldr	r2, [r3, #24]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f042 0210 	orr.w	r2, r2, #16
 8009cf2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f022 0201 	bic.w	r2, r2, #1
 8009d02:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6919      	ldr	r1, [r3, #16]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8009e00 <SPI_CloseTransfer+0x13c>)
 8009d10:	400b      	ands	r3, r1
 8009d12:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689a      	ldr	r2, [r3, #8]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009d22:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	2b04      	cmp	r3, #4
 8009d2e:	d014      	beq.n	8009d5a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f003 0320 	and.w	r3, r3, #32
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00f      	beq.n	8009d5a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	699a      	ldr	r2, [r3, #24]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f042 0220 	orr.w	r2, r2, #32
 8009d58:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d014      	beq.n	8009d90 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00f      	beq.n	8009d90 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d76:	f043 0204 	orr.w	r2, r3, #4
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	699a      	ldr	r2, [r3, #24]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d8e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00f      	beq.n	8009dba <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009da0:	f043 0201 	orr.w	r2, r3, #1
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	699a      	ldr	r2, [r3, #24]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009db8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00f      	beq.n	8009de4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dca:	f043 0208 	orr.w	r2, r3, #8
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	699a      	ldr	r2, [r3, #24]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009de2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009df4:	bf00      	nop
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	fffffc90 	.word	0xfffffc90

08009e04 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	603b      	str	r3, [r7, #0]
 8009e10:	4613      	mov	r3, r2
 8009e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e14:	e010      	b.n	8009e38 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e16:	f7f7 f821 	bl	8000e5c <HAL_GetTick>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d803      	bhi.n	8009e2e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2c:	d102      	bne.n	8009e34 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d101      	bne.n	8009e38 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e00f      	b.n	8009e58 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	695a      	ldr	r2, [r3, #20]
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	4013      	ands	r3, r2
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	bf0c      	ite	eq
 8009e48:	2301      	moveq	r3, #1
 8009e4a:	2300      	movne	r3, #0
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	461a      	mov	r2, r3
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d0df      	beq.n	8009e16 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e6c:	095b      	lsrs	r3, r3, #5
 8009e6e:	3301      	adds	r3, #1
 8009e70:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	3301      	adds	r3, #1
 8009e78:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	3307      	adds	r3, #7
 8009e7e:	08db      	lsrs	r3, r3, #3
 8009e80:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	fb02 f303 	mul.w	r3, r2, r3
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b082      	sub	sp, #8
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d101      	bne.n	8009ea8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e049      	b.n	8009f3c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d106      	bne.n	8009ec2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f003 fab7 	bl	800d430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2202      	movs	r2, #2
 8009ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	f000 fadf 	bl	800a498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d001      	beq.n	8009f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e054      	b.n	800a006 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68da      	ldr	r2, [r3, #12]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f042 0201 	orr.w	r2, r2, #1
 8009f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a26      	ldr	r2, [pc, #152]	@ (800a014 <HAL_TIM_Base_Start_IT+0xd0>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d022      	beq.n	8009fc4 <HAL_TIM_Base_Start_IT+0x80>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f86:	d01d      	beq.n	8009fc4 <HAL_TIM_Base_Start_IT+0x80>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a22      	ldr	r2, [pc, #136]	@ (800a018 <HAL_TIM_Base_Start_IT+0xd4>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d018      	beq.n	8009fc4 <HAL_TIM_Base_Start_IT+0x80>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a21      	ldr	r2, [pc, #132]	@ (800a01c <HAL_TIM_Base_Start_IT+0xd8>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d013      	beq.n	8009fc4 <HAL_TIM_Base_Start_IT+0x80>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a1f      	ldr	r2, [pc, #124]	@ (800a020 <HAL_TIM_Base_Start_IT+0xdc>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d00e      	beq.n	8009fc4 <HAL_TIM_Base_Start_IT+0x80>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a1e      	ldr	r2, [pc, #120]	@ (800a024 <HAL_TIM_Base_Start_IT+0xe0>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d009      	beq.n	8009fc4 <HAL_TIM_Base_Start_IT+0x80>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a1c      	ldr	r2, [pc, #112]	@ (800a028 <HAL_TIM_Base_Start_IT+0xe4>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d004      	beq.n	8009fc4 <HAL_TIM_Base_Start_IT+0x80>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800a02c <HAL_TIM_Base_Start_IT+0xe8>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d115      	bne.n	8009ff0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	689a      	ldr	r2, [r3, #8]
 8009fca:	4b19      	ldr	r3, [pc, #100]	@ (800a030 <HAL_TIM_Base_Start_IT+0xec>)
 8009fcc:	4013      	ands	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b06      	cmp	r3, #6
 8009fd4:	d015      	beq.n	800a002 <HAL_TIM_Base_Start_IT+0xbe>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fdc:	d011      	beq.n	800a002 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f042 0201 	orr.w	r2, r2, #1
 8009fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fee:	e008      	b.n	800a002 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f042 0201 	orr.w	r2, r2, #1
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	e000      	b.n	800a004 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a002:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	40010000 	.word	0x40010000
 800a018:	40000400 	.word	0x40000400
 800a01c:	40000800 	.word	0x40000800
 800a020:	40000c00 	.word	0x40000c00
 800a024:	40010400 	.word	0x40010400
 800a028:	40001800 	.word	0x40001800
 800a02c:	40014000 	.word	0x40014000
 800a030:	00010007 	.word	0x00010007

0800a034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d020      	beq.n	800a098 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f003 0302 	and.w	r3, r3, #2
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d01b      	beq.n	800a098 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f06f 0202 	mvn.w	r2, #2
 800a068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	f003 0303 	and.w	r3, r3, #3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d003      	beq.n	800a086 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f9ec 	bl	800a45c <HAL_TIM_IC_CaptureCallback>
 800a084:	e005      	b.n	800a092 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f9de 	bl	800a448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 f9ef 	bl	800a470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	f003 0304 	and.w	r3, r3, #4
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d020      	beq.n	800a0e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f003 0304 	and.w	r3, r3, #4
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d01b      	beq.n	800a0e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f06f 0204 	mvn.w	r2, #4
 800a0b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d003      	beq.n	800a0d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f9c6 	bl	800a45c <HAL_TIM_IC_CaptureCallback>
 800a0d0:	e005      	b.n	800a0de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f9b8 	bl	800a448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f9c9 	bl	800a470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	f003 0308 	and.w	r3, r3, #8
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d020      	beq.n	800a130 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f003 0308 	and.w	r3, r3, #8
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d01b      	beq.n	800a130 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f06f 0208 	mvn.w	r2, #8
 800a100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2204      	movs	r2, #4
 800a106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	69db      	ldr	r3, [r3, #28]
 800a10e:	f003 0303 	and.w	r3, r3, #3
 800a112:	2b00      	cmp	r3, #0
 800a114:	d003      	beq.n	800a11e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f9a0 	bl	800a45c <HAL_TIM_IC_CaptureCallback>
 800a11c:	e005      	b.n	800a12a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f992 	bl	800a448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 f9a3 	bl	800a470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f003 0310 	and.w	r3, r3, #16
 800a136:	2b00      	cmp	r3, #0
 800a138:	d020      	beq.n	800a17c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f003 0310 	and.w	r3, r3, #16
 800a140:	2b00      	cmp	r3, #0
 800a142:	d01b      	beq.n	800a17c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f06f 0210 	mvn.w	r2, #16
 800a14c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2208      	movs	r2, #8
 800a152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f97a 	bl	800a45c <HAL_TIM_IC_CaptureCallback>
 800a168:	e005      	b.n	800a176 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 f96c 	bl	800a448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f97d 	bl	800a470 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	f003 0301 	and.w	r3, r3, #1
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00c      	beq.n	800a1a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f003 0301 	and.w	r3, r3, #1
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d007      	beq.n	800a1a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f06f 0201 	mvn.w	r2, #1
 800a198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f94a 	bl	800a434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d104      	bne.n	800a1b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00c      	beq.n	800a1ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d007      	beq.n	800a1ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a1c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fb41 	bl	800a850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d00c      	beq.n	800a1f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d007      	beq.n	800a1f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a1ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fb39 	bl	800a864 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00c      	beq.n	800a216 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a202:	2b00      	cmp	r3, #0
 800a204:	d007      	beq.n	800a216 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a20e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f937 	bl	800a484 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	f003 0320 	and.w	r3, r3, #32
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00c      	beq.n	800a23a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f003 0320 	and.w	r3, r3, #32
 800a226:	2b00      	cmp	r3, #0
 800a228:	d007      	beq.n	800a23a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f06f 0220 	mvn.w	r2, #32
 800a232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fb01 	bl	800a83c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a23a:	bf00      	nop
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
	...

0800a244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d101      	bne.n	800a260 <HAL_TIM_ConfigClockSource+0x1c>
 800a25c:	2302      	movs	r3, #2
 800a25e:	e0dc      	b.n	800a41a <HAL_TIM_ConfigClockSource+0x1d6>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2202      	movs	r2, #2
 800a26c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	4b6a      	ldr	r3, [pc, #424]	@ (800a424 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a27c:	4013      	ands	r3, r2
 800a27e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a64      	ldr	r2, [pc, #400]	@ (800a428 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a296:	4293      	cmp	r3, r2
 800a298:	f000 80a9 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x1aa>
 800a29c:	4a62      	ldr	r2, [pc, #392]	@ (800a428 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	f200 80ae 	bhi.w	800a400 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2a4:	4a61      	ldr	r2, [pc, #388]	@ (800a42c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	f000 80a1 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x1aa>
 800a2ac:	4a5f      	ldr	r2, [pc, #380]	@ (800a42c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	f200 80a6 	bhi.w	800a400 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2b4:	4a5e      	ldr	r2, [pc, #376]	@ (800a430 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	f000 8099 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x1aa>
 800a2bc:	4a5c      	ldr	r2, [pc, #368]	@ (800a430 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	f200 809e 	bhi.w	800a400 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a2c8:	f000 8091 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x1aa>
 800a2cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a2d0:	f200 8096 	bhi.w	800a400 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2d8:	f000 8089 	beq.w	800a3ee <HAL_TIM_ConfigClockSource+0x1aa>
 800a2dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2e0:	f200 808e 	bhi.w	800a400 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2e8:	d03e      	beq.n	800a368 <HAL_TIM_ConfigClockSource+0x124>
 800a2ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2ee:	f200 8087 	bhi.w	800a400 <HAL_TIM_ConfigClockSource+0x1bc>
 800a2f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2f6:	f000 8086 	beq.w	800a406 <HAL_TIM_ConfigClockSource+0x1c2>
 800a2fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2fe:	d87f      	bhi.n	800a400 <HAL_TIM_ConfigClockSource+0x1bc>
 800a300:	2b70      	cmp	r3, #112	@ 0x70
 800a302:	d01a      	beq.n	800a33a <HAL_TIM_ConfigClockSource+0xf6>
 800a304:	2b70      	cmp	r3, #112	@ 0x70
 800a306:	d87b      	bhi.n	800a400 <HAL_TIM_ConfigClockSource+0x1bc>
 800a308:	2b60      	cmp	r3, #96	@ 0x60
 800a30a:	d050      	beq.n	800a3ae <HAL_TIM_ConfigClockSource+0x16a>
 800a30c:	2b60      	cmp	r3, #96	@ 0x60
 800a30e:	d877      	bhi.n	800a400 <HAL_TIM_ConfigClockSource+0x1bc>
 800a310:	2b50      	cmp	r3, #80	@ 0x50
 800a312:	d03c      	beq.n	800a38e <HAL_TIM_ConfigClockSource+0x14a>
 800a314:	2b50      	cmp	r3, #80	@ 0x50
 800a316:	d873      	bhi.n	800a400 <HAL_TIM_ConfigClockSource+0x1bc>
 800a318:	2b40      	cmp	r3, #64	@ 0x40
 800a31a:	d058      	beq.n	800a3ce <HAL_TIM_ConfigClockSource+0x18a>
 800a31c:	2b40      	cmp	r3, #64	@ 0x40
 800a31e:	d86f      	bhi.n	800a400 <HAL_TIM_ConfigClockSource+0x1bc>
 800a320:	2b30      	cmp	r3, #48	@ 0x30
 800a322:	d064      	beq.n	800a3ee <HAL_TIM_ConfigClockSource+0x1aa>
 800a324:	2b30      	cmp	r3, #48	@ 0x30
 800a326:	d86b      	bhi.n	800a400 <HAL_TIM_ConfigClockSource+0x1bc>
 800a328:	2b20      	cmp	r3, #32
 800a32a:	d060      	beq.n	800a3ee <HAL_TIM_ConfigClockSource+0x1aa>
 800a32c:	2b20      	cmp	r3, #32
 800a32e:	d867      	bhi.n	800a400 <HAL_TIM_ConfigClockSource+0x1bc>
 800a330:	2b00      	cmp	r3, #0
 800a332:	d05c      	beq.n	800a3ee <HAL_TIM_ConfigClockSource+0x1aa>
 800a334:	2b10      	cmp	r3, #16
 800a336:	d05a      	beq.n	800a3ee <HAL_TIM_ConfigClockSource+0x1aa>
 800a338:	e062      	b.n	800a400 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a34a:	f000 f9c9 	bl	800a6e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a35c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	609a      	str	r2, [r3, #8]
      break;
 800a366:	e04f      	b.n	800a408 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a378:	f000 f9b2 	bl	800a6e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689a      	ldr	r2, [r3, #8]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a38a:	609a      	str	r2, [r3, #8]
      break;
 800a38c:	e03c      	b.n	800a408 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a39a:	461a      	mov	r2, r3
 800a39c:	f000 f922 	bl	800a5e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2150      	movs	r1, #80	@ 0x50
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 f97c 	bl	800a6a4 <TIM_ITRx_SetConfig>
      break;
 800a3ac:	e02c      	b.n	800a408 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	f000 f941 	bl	800a642 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2160      	movs	r1, #96	@ 0x60
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f000 f96c 	bl	800a6a4 <TIM_ITRx_SetConfig>
      break;
 800a3cc:	e01c      	b.n	800a408 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3da:	461a      	mov	r2, r3
 800a3dc:	f000 f902 	bl	800a5e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2140      	movs	r1, #64	@ 0x40
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 f95c 	bl	800a6a4 <TIM_ITRx_SetConfig>
      break;
 800a3ec:	e00c      	b.n	800a408 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	4610      	mov	r0, r2
 800a3fa:	f000 f953 	bl	800a6a4 <TIM_ITRx_SetConfig>
      break;
 800a3fe:	e003      	b.n	800a408 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	73fb      	strb	r3, [r7, #15]
      break;
 800a404:	e000      	b.n	800a408 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a418:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	ffceff88 	.word	0xffceff88
 800a428:	00100040 	.word	0x00100040
 800a42c:	00100030 	.word	0x00100030
 800a430:	00100020 	.word	0x00100020

0800a434 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a43c:	bf00      	nop
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a478:	bf00      	nop
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a48c:	bf00      	nop
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a46      	ldr	r2, [pc, #280]	@ (800a5c4 <TIM_Base_SetConfig+0x12c>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d013      	beq.n	800a4d8 <TIM_Base_SetConfig+0x40>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4b6:	d00f      	beq.n	800a4d8 <TIM_Base_SetConfig+0x40>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a43      	ldr	r2, [pc, #268]	@ (800a5c8 <TIM_Base_SetConfig+0x130>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d00b      	beq.n	800a4d8 <TIM_Base_SetConfig+0x40>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a42      	ldr	r2, [pc, #264]	@ (800a5cc <TIM_Base_SetConfig+0x134>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d007      	beq.n	800a4d8 <TIM_Base_SetConfig+0x40>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a41      	ldr	r2, [pc, #260]	@ (800a5d0 <TIM_Base_SetConfig+0x138>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d003      	beq.n	800a4d8 <TIM_Base_SetConfig+0x40>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a40      	ldr	r2, [pc, #256]	@ (800a5d4 <TIM_Base_SetConfig+0x13c>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d108      	bne.n	800a4ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a35      	ldr	r2, [pc, #212]	@ (800a5c4 <TIM_Base_SetConfig+0x12c>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d01f      	beq.n	800a532 <TIM_Base_SetConfig+0x9a>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4f8:	d01b      	beq.n	800a532 <TIM_Base_SetConfig+0x9a>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a32      	ldr	r2, [pc, #200]	@ (800a5c8 <TIM_Base_SetConfig+0x130>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d017      	beq.n	800a532 <TIM_Base_SetConfig+0x9a>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a31      	ldr	r2, [pc, #196]	@ (800a5cc <TIM_Base_SetConfig+0x134>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d013      	beq.n	800a532 <TIM_Base_SetConfig+0x9a>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a30      	ldr	r2, [pc, #192]	@ (800a5d0 <TIM_Base_SetConfig+0x138>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d00f      	beq.n	800a532 <TIM_Base_SetConfig+0x9a>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a2f      	ldr	r2, [pc, #188]	@ (800a5d4 <TIM_Base_SetConfig+0x13c>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d00b      	beq.n	800a532 <TIM_Base_SetConfig+0x9a>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a2e      	ldr	r2, [pc, #184]	@ (800a5d8 <TIM_Base_SetConfig+0x140>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d007      	beq.n	800a532 <TIM_Base_SetConfig+0x9a>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a2d      	ldr	r2, [pc, #180]	@ (800a5dc <TIM_Base_SetConfig+0x144>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d003      	beq.n	800a532 <TIM_Base_SetConfig+0x9a>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a2c      	ldr	r2, [pc, #176]	@ (800a5e0 <TIM_Base_SetConfig+0x148>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d108      	bne.n	800a544 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	68fa      	ldr	r2, [r7, #12]
 800a540:	4313      	orrs	r3, r2
 800a542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	4313      	orrs	r3, r2
 800a550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	689a      	ldr	r2, [r3, #8]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a16      	ldr	r2, [pc, #88]	@ (800a5c4 <TIM_Base_SetConfig+0x12c>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d00f      	beq.n	800a590 <TIM_Base_SetConfig+0xf8>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a18      	ldr	r2, [pc, #96]	@ (800a5d4 <TIM_Base_SetConfig+0x13c>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d00b      	beq.n	800a590 <TIM_Base_SetConfig+0xf8>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a17      	ldr	r2, [pc, #92]	@ (800a5d8 <TIM_Base_SetConfig+0x140>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d007      	beq.n	800a590 <TIM_Base_SetConfig+0xf8>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a16      	ldr	r2, [pc, #88]	@ (800a5dc <TIM_Base_SetConfig+0x144>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d003      	beq.n	800a590 <TIM_Base_SetConfig+0xf8>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a15      	ldr	r2, [pc, #84]	@ (800a5e0 <TIM_Base_SetConfig+0x148>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d103      	bne.n	800a598 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	691a      	ldr	r2, [r3, #16]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	f003 0301 	and.w	r3, r3, #1
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d105      	bne.n	800a5b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	f023 0201 	bic.w	r2, r3, #1
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	611a      	str	r2, [r3, #16]
  }
}
 800a5b6:	bf00      	nop
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	40010000 	.word	0x40010000
 800a5c8:	40000400 	.word	0x40000400
 800a5cc:	40000800 	.word	0x40000800
 800a5d0:	40000c00 	.word	0x40000c00
 800a5d4:	40010400 	.word	0x40010400
 800a5d8:	40014000 	.word	0x40014000
 800a5dc:	40014400 	.word	0x40014400
 800a5e0:	40014800 	.word	0x40014800

0800a5e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b087      	sub	sp, #28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6a1b      	ldr	r3, [r3, #32]
 800a5f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	f023 0201 	bic.w	r2, r3, #1
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a60e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	011b      	lsls	r3, r3, #4
 800a614:	693a      	ldr	r2, [r7, #16]
 800a616:	4313      	orrs	r3, r2
 800a618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f023 030a 	bic.w	r3, r3, #10
 800a620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	4313      	orrs	r3, r2
 800a628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	697a      	ldr	r2, [r7, #20]
 800a634:	621a      	str	r2, [r3, #32]
}
 800a636:	bf00      	nop
 800a638:	371c      	adds	r7, #28
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a642:	b480      	push	{r7}
 800a644:	b087      	sub	sp, #28
 800a646:	af00      	add	r7, sp, #0
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	60b9      	str	r1, [r7, #8]
 800a64c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6a1b      	ldr	r3, [r3, #32]
 800a652:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6a1b      	ldr	r3, [r3, #32]
 800a658:	f023 0210 	bic.w	r2, r3, #16
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	699b      	ldr	r3, [r3, #24]
 800a664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a66c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	031b      	lsls	r3, r3, #12
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	4313      	orrs	r3, r2
 800a676:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a67e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	011b      	lsls	r3, r3, #4
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	4313      	orrs	r3, r2
 800a688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	621a      	str	r2, [r3, #32]
}
 800a696:	bf00      	nop
 800a698:	371c      	adds	r7, #28
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
	...

0800a6a4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	4b09      	ldr	r3, [pc, #36]	@ (800a6dc <TIM_ITRx_SetConfig+0x38>)
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	f043 0307 	orr.w	r3, r3, #7
 800a6c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	609a      	str	r2, [r3, #8]
}
 800a6ce:	bf00      	nop
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	ffcfff8f 	.word	0xffcfff8f

0800a6e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
 800a6ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a6fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	021a      	lsls	r2, r3, #8
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	431a      	orrs	r2, r3
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	4313      	orrs	r3, r2
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	609a      	str	r2, [r3, #8]
}
 800a714:	bf00      	nop
 800a716:	371c      	adds	r7, #28
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a730:	2b01      	cmp	r3, #1
 800a732:	d101      	bne.n	800a738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a734:	2302      	movs	r3, #2
 800a736:	e06d      	b.n	800a814 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2202      	movs	r2, #2
 800a744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a30      	ldr	r2, [pc, #192]	@ (800a820 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d004      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a2f      	ldr	r2, [pc, #188]	@ (800a824 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d108      	bne.n	800a77e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a772:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a784:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a20      	ldr	r2, [pc, #128]	@ (800a820 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d022      	beq.n	800a7e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7aa:	d01d      	beq.n	800a7e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a828 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d018      	beq.n	800a7e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a1c      	ldr	r2, [pc, #112]	@ (800a82c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d013      	beq.n	800a7e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a1a      	ldr	r2, [pc, #104]	@ (800a830 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d00e      	beq.n	800a7e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a15      	ldr	r2, [pc, #84]	@ (800a824 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d009      	beq.n	800a7e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a16      	ldr	r2, [pc, #88]	@ (800a834 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d004      	beq.n	800a7e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a15      	ldr	r2, [pc, #84]	@ (800a838 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d10c      	bne.n	800a802 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	40010000 	.word	0x40010000
 800a824:	40010400 	.word	0x40010400
 800a828:	40000400 	.word	0x40000400
 800a82c:	40000800 	.word	0x40000800
 800a830:	40000c00 	.word	0x40000c00
 800a834:	40001800 	.word	0x40001800
 800a838:	40014000 	.word	0x40014000

0800a83c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d121      	bne.n	800a8ce <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	4b27      	ldr	r3, [pc, #156]	@ (800a92c <FMC_SDRAM_Init+0xb4>)
 800a890:	4013      	ands	r3, r2
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	6851      	ldr	r1, [r2, #4]
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	6892      	ldr	r2, [r2, #8]
 800a89a:	4311      	orrs	r1, r2
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	68d2      	ldr	r2, [r2, #12]
 800a8a0:	4311      	orrs	r1, r2
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	6912      	ldr	r2, [r2, #16]
 800a8a6:	4311      	orrs	r1, r2
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	6952      	ldr	r2, [r2, #20]
 800a8ac:	4311      	orrs	r1, r2
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	6992      	ldr	r2, [r2, #24]
 800a8b2:	4311      	orrs	r1, r2
 800a8b4:	683a      	ldr	r2, [r7, #0]
 800a8b6:	69d2      	ldr	r2, [r2, #28]
 800a8b8:	4311      	orrs	r1, r2
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	6a12      	ldr	r2, [r2, #32]
 800a8be:	4311      	orrs	r1, r2
 800a8c0:	683a      	ldr	r2, [r7, #0]
 800a8c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a8c4:	430a      	orrs	r2, r1
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	601a      	str	r2, [r3, #0]
 800a8cc:	e026      	b.n	800a91c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	69d9      	ldr	r1, [r3, #28]
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	4319      	orrs	r1, r3
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e4:	430b      	orrs	r3, r1
 800a8e6:	431a      	orrs	r2, r3
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a92c <FMC_SDRAM_Init+0xb4>)
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	6851      	ldr	r1, [r2, #4]
 800a8f8:	683a      	ldr	r2, [r7, #0]
 800a8fa:	6892      	ldr	r2, [r2, #8]
 800a8fc:	4311      	orrs	r1, r2
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	68d2      	ldr	r2, [r2, #12]
 800a902:	4311      	orrs	r1, r2
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	6912      	ldr	r2, [r2, #16]
 800a908:	4311      	orrs	r1, r2
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	6952      	ldr	r2, [r2, #20]
 800a90e:	4311      	orrs	r1, r2
 800a910:	683a      	ldr	r2, [r7, #0]
 800a912:	6992      	ldr	r2, [r2, #24]
 800a914:	430a      	orrs	r2, r1
 800a916:	431a      	orrs	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	ffff8000 	.word	0xffff8000

0800a930 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d128      	bne.n	800a994 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	1e59      	subs	r1, r3, #1
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	3b01      	subs	r3, #1
 800a956:	011b      	lsls	r3, r3, #4
 800a958:	4319      	orrs	r1, r3
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	3b01      	subs	r3, #1
 800a960:	021b      	lsls	r3, r3, #8
 800a962:	4319      	orrs	r1, r3
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	3b01      	subs	r3, #1
 800a96a:	031b      	lsls	r3, r3, #12
 800a96c:	4319      	orrs	r1, r3
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	3b01      	subs	r3, #1
 800a974:	041b      	lsls	r3, r3, #16
 800a976:	4319      	orrs	r1, r3
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	695b      	ldr	r3, [r3, #20]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	051b      	lsls	r3, r3, #20
 800a980:	4319      	orrs	r1, r3
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	699b      	ldr	r3, [r3, #24]
 800a986:	3b01      	subs	r3, #1
 800a988:	061b      	lsls	r3, r3, #24
 800a98a:	430b      	orrs	r3, r1
 800a98c:	431a      	orrs	r2, r3
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	609a      	str	r2, [r3, #8]
 800a992:	e02d      	b.n	800a9f0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	689a      	ldr	r2, [r3, #8]
 800a998:	4b19      	ldr	r3, [pc, #100]	@ (800aa00 <FMC_SDRAM_Timing_Init+0xd0>)
 800a99a:	4013      	ands	r3, r2
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	68d2      	ldr	r2, [r2, #12]
 800a9a0:	3a01      	subs	r2, #1
 800a9a2:	0311      	lsls	r1, r2, #12
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	6952      	ldr	r2, [r2, #20]
 800a9a8:	3a01      	subs	r2, #1
 800a9aa:	0512      	lsls	r2, r2, #20
 800a9ac:	430a      	orrs	r2, r1
 800a9ae:	431a      	orrs	r2, r3
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	1e59      	subs	r1, r3, #1
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	011b      	lsls	r3, r3, #4
 800a9ca:	4319      	orrs	r1, r3
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	021b      	lsls	r3, r3, #8
 800a9d4:	4319      	orrs	r1, r3
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	041b      	lsls	r3, r3, #16
 800a9de:	4319      	orrs	r1, r3
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	061b      	lsls	r3, r3, #24
 800a9e8:	430b      	orrs	r3, r1
 800a9ea:	431a      	orrs	r2, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	ff0f0fff 	.word	0xff0f0fff

0800aa04 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	691a      	ldr	r2, [r3, #16]
 800aa14:	4b0c      	ldr	r3, [pc, #48]	@ (800aa48 <FMC_SDRAM_SendCommand+0x44>)
 800aa16:	4013      	ands	r3, r2
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	6811      	ldr	r1, [r2, #0]
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	6852      	ldr	r2, [r2, #4]
 800aa20:	4311      	orrs	r1, r2
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	6892      	ldr	r2, [r2, #8]
 800aa26:	3a01      	subs	r2, #1
 800aa28:	0152      	lsls	r2, r2, #5
 800aa2a:	4311      	orrs	r1, r2
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	68d2      	ldr	r2, [r2, #12]
 800aa30:	0252      	lsls	r2, r2, #9
 800aa32:	430a      	orrs	r2, r1
 800aa34:	431a      	orrs	r2, r3
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3714      	adds	r7, #20
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr
 800aa48:	ffc00000 	.word	0xffc00000

0800aa4c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	695a      	ldr	r2, [r3, #20]
 800aa5a:	4b07      	ldr	r3, [pc, #28]	@ (800aa78 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	683a      	ldr	r2, [r7, #0]
 800aa60:	0052      	lsls	r2, r2, #1
 800aa62:	431a      	orrs	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	ffffc001 	.word	0xffffc001

0800aa7c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	b480      	push	{r7}
 800aa80:	b085      	sub	sp, #20
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	f107 001c 	add.w	r0, r7, #28
 800aa8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800aa92:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800aa94:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800aa96:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800aa98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800aa9a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800aa9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800aa9e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aaa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800aaa2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	4b07      	ldr	r3, [pc, #28]	@ (800aacc <SDMMC_Init+0x50>)
 800aab0:	4013      	ands	r3, r2
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	431a      	orrs	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3714      	adds	r7, #20
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	b004      	add	sp, #16
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	ffc02c00 	.word	0xffc02c00

0800aad0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800aade:	4618      	mov	r0, r3
 800aae0:	370c      	adds	r7, #12
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800aaea:	b480      	push	{r7}
 800aaec:	b083      	sub	sp, #12
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f043 0203 	orr.w	r2, r3, #3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ab2e:	b480      	push	{r7}
 800ab30:	b083      	sub	sp, #12
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 0303 	and.w	r3, r3, #3
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	370c      	adds	r7, #12
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
	...

0800ab4c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ab6a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ab70:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ab76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68da      	ldr	r2, [r3, #12]
 800ab82:	4b06      	ldr	r3, [pc, #24]	@ (800ab9c <SDMMC_SendCommand+0x50>)
 800ab84:	4013      	ands	r3, r2
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	431a      	orrs	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	fffee0c0 	.word	0xfffee0c0

0800aba0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	b2db      	uxtb	r3, r3
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800abba:	b480      	push	{r7}
 800abbc:	b085      	sub	sp, #20
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	3314      	adds	r3, #20
 800abc8:	461a      	mov	r2, r3
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	4413      	add	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3714      	adds	r7, #20
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abea:	2300      	movs	r3, #0
 800abec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	685a      	ldr	r2, [r3, #4]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ac06:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ac0c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ac12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	431a      	orrs	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ac2a:	2300      	movs	r3, #0

}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b088      	sub	sp, #32
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac46:	2310      	movs	r3, #16
 800ac48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac50:	2300      	movs	r3, #0
 800ac52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac5a:	f107 0308 	add.w	r3, r7, #8
 800ac5e:	4619      	mov	r1, r3
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f7ff ff73 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac6a:	2110      	movs	r1, #16
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fa81 	bl	800b174 <SDMMC_GetCmdResp1>
 800ac72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac74:	69fb      	ldr	r3, [r7, #28]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3720      	adds	r7, #32
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b088      	sub	sp, #32
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac8c:	2311      	movs	r3, #17
 800ac8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac96:	2300      	movs	r3, #0
 800ac98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aca0:	f107 0308 	add.w	r3, r7, #8
 800aca4:	4619      	mov	r1, r3
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff ff50 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800acac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acb0:	2111      	movs	r1, #17
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fa5e 	bl	800b174 <SDMMC_GetCmdResp1>
 800acb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acba:	69fb      	ldr	r3, [r7, #28]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3720      	adds	r7, #32
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800acd2:	2312      	movs	r3, #18
 800acd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800acda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acdc:	2300      	movs	r3, #0
 800acde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ace0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ace4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ace6:	f107 0308 	add.w	r3, r7, #8
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff ff2d 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800acf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acf6:	2112      	movs	r1, #18
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 fa3b 	bl	800b174 <SDMMC_GetCmdResp1>
 800acfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad00:	69fb      	ldr	r3, [r7, #28]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3720      	adds	r7, #32
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b088      	sub	sp, #32
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ad18:	2318      	movs	r3, #24
 800ad1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad22:	2300      	movs	r3, #0
 800ad24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad2c:	f107 0308 	add.w	r3, r7, #8
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7ff ff0a 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad3c:	2118      	movs	r1, #24
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fa18 	bl	800b174 <SDMMC_GetCmdResp1>
 800ad44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad46:	69fb      	ldr	r3, [r7, #28]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3720      	adds	r7, #32
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b088      	sub	sp, #32
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad5e:	2319      	movs	r3, #25
 800ad60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad72:	f107 0308 	add.w	r3, r7, #8
 800ad76:	4619      	mov	r1, r3
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7ff fee7 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad82:	2119      	movs	r1, #25
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 f9f5 	bl	800b174 <SDMMC_GetCmdResp1>
 800ad8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad8c:	69fb      	ldr	r3, [r7, #28]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3720      	adds	r7, #32
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
	...

0800ad98 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b088      	sub	sp, #32
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ada4:	230c      	movs	r3, #12
 800ada6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ada8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adae:	2300      	movs	r3, #0
 800adb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800adb6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800add0:	f107 0308 	add.w	r3, r7, #8
 800add4:	4619      	mov	r1, r3
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f7ff feb8 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800addc:	4a0b      	ldr	r2, [pc, #44]	@ (800ae0c <SDMMC_CmdStopTransfer+0x74>)
 800adde:	210c      	movs	r1, #12
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 f9c7 	bl	800b174 <SDMMC_GetCmdResp1>
 800ade6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800adfa:	d101      	bne.n	800ae00 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800adfc:	2300      	movs	r3, #0
 800adfe:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ae00:	69fb      	ldr	r3, [r7, #28]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3720      	adds	r7, #32
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	05f5e100 	.word	0x05f5e100

0800ae10 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b088      	sub	sp, #32
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ae1e:	2307      	movs	r3, #7
 800ae20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae32:	f107 0308 	add.w	r3, r7, #8
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f7ff fe87 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ae3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae42:	2107      	movs	r1, #7
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f995 	bl	800b174 <SDMMC_GetCmdResp1>
 800ae4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae4c:	69fb      	ldr	r3, [r7, #28]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3720      	adds	r7, #32
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b088      	sub	sp, #32
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae62:	2300      	movs	r3, #0
 800ae64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ae66:	2300      	movs	r3, #0
 800ae68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ae72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae74:	f107 0308 	add.w	r3, r7, #8
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff fe66 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fbb9 	bl	800b5f8 <SDMMC_GetCmdError>
 800ae86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae88:	69fb      	ldr	r3, [r7, #28]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3720      	adds	r7, #32
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b088      	sub	sp, #32
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ae9a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ae9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aea0:	2308      	movs	r3, #8
 800aea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aeb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeb4:	f107 0308 	add.w	r3, r7, #8
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7ff fe46 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fb4b 	bl	800b55c <SDMMC_GetCmdResp7>
 800aec6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aec8:	69fb      	ldr	r3, [r7, #28]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3720      	adds	r7, #32
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b088      	sub	sp, #32
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aee0:	2337      	movs	r3, #55	@ 0x37
 800aee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aef2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aef4:	f107 0308 	add.w	r3, r7, #8
 800aef8:	4619      	mov	r1, r3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7ff fe26 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800af00:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af04:	2137      	movs	r1, #55	@ 0x37
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f934 	bl	800b174 <SDMMC_GetCmdResp1>
 800af0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af0e:	69fb      	ldr	r3, [r7, #28]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3720      	adds	r7, #32
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b088      	sub	sp, #32
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800af26:	2329      	movs	r3, #41	@ 0x29
 800af28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af30:	2300      	movs	r3, #0
 800af32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af3a:	f107 0308 	add.w	r3, r7, #8
 800af3e:	4619      	mov	r1, r3
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7ff fe03 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fa50 	bl	800b3ec <SDMMC_GetCmdResp3>
 800af4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af4e:	69fb      	ldr	r3, [r7, #28]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3720      	adds	r7, #32
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af66:	2306      	movs	r3, #6
 800af68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800af6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af70:	2300      	movs	r3, #0
 800af72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af7a:	f107 0308 	add.w	r3, r7, #8
 800af7e:	4619      	mov	r1, r3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7ff fde3 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800af86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af8a:	2106      	movs	r1, #6
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f8f1 	bl	800b174 <SDMMC_GetCmdResp1>
 800af92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af94:	69fb      	ldr	r3, [r7, #28]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3720      	adds	r7, #32
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b088      	sub	sp, #32
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800afa6:	2300      	movs	r3, #0
 800afa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800afaa:	2333      	movs	r3, #51	@ 0x33
 800afac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800afb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afb4:	2300      	movs	r3, #0
 800afb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800afbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afbe:	f107 0308 	add.w	r3, r7, #8
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f7ff fdc1 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800afca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afce:	2133      	movs	r1, #51	@ 0x33
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f8cf 	bl	800b174 <SDMMC_GetCmdResp1>
 800afd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afd8:	69fb      	ldr	r3, [r7, #28]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3720      	adds	r7, #32
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b088      	sub	sp, #32
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800afea:	2300      	movs	r3, #0
 800afec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800afee:	2302      	movs	r3, #2
 800aff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aff2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800aff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aff8:	2300      	movs	r3, #0
 800affa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800affc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b000:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b002:	f107 0308 	add.w	r3, r7, #8
 800b006:	4619      	mov	r1, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f7ff fd9f 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f9a2 	bl	800b358 <SDMMC_GetCmdResp2>
 800b014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b016:	69fb      	ldr	r3, [r7, #28]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3720      	adds	r7, #32
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b088      	sub	sp, #32
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b02e:	2309      	movs	r3, #9
 800b030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b032:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800b036:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b038:	2300      	movs	r3, #0
 800b03a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b03c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b040:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b042:	f107 0308 	add.w	r3, r7, #8
 800b046:	4619      	mov	r1, r3
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7ff fd7f 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f982 	bl	800b358 <SDMMC_GetCmdResp2>
 800b054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b056:	69fb      	ldr	r3, [r7, #28]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3720      	adds	r7, #32
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b088      	sub	sp, #32
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b06a:	2300      	movs	r3, #0
 800b06c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b06e:	2303      	movs	r3, #3
 800b070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b072:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b078:	2300      	movs	r3, #0
 800b07a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b07c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b080:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b082:	f107 0308 	add.w	r3, r7, #8
 800b086:	4619      	mov	r1, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff fd5f 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	2103      	movs	r1, #3
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f9ea 	bl	800b46c <SDMMC_GetCmdResp6>
 800b098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b09a:	69fb      	ldr	r3, [r7, #28]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3720      	adds	r7, #32
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b088      	sub	sp, #32
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b0b2:	230d      	movs	r3, #13
 800b0b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b0c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0c6:	f107 0308 	add.w	r3, r7, #8
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7ff fd3d 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b0d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0d6:	210d      	movs	r1, #13
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f84b 	bl	800b174 <SDMMC_GetCmdResp1>
 800b0de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0e0:	69fb      	ldr	r3, [r7, #28]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3720      	adds	r7, #32
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b088      	sub	sp, #32
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b0f6:	230d      	movs	r3, #13
 800b0f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b100:	2300      	movs	r3, #0
 800b102:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b108:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b10a:	f107 0308 	add.w	r3, r7, #8
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f7ff fd1b 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b11a:	210d      	movs	r1, #13
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f829 	bl	800b174 <SDMMC_GetCmdResp1>
 800b122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b124:	69fb      	ldr	r3, [r7, #28]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3720      	adds	r7, #32
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b088      	sub	sp, #32
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800b13c:	2306      	movs	r3, #6
 800b13e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b140:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b146:	2300      	movs	r3, #0
 800b148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b14a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b14e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b150:	f107 0308 	add.w	r3, r7, #8
 800b154:	4619      	mov	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7ff fcf8 	bl	800ab4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800b15c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b160:	2106      	movs	r1, #6
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f806 	bl	800b174 <SDMMC_GetCmdResp1>
 800b168:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b16a:	69fb      	ldr	r3, [r7, #28]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3720      	adds	r7, #32
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b088      	sub	sp, #32
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	460b      	mov	r3, r1
 800b17e:	607a      	str	r2, [r7, #4]
 800b180:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b182:	4b70      	ldr	r3, [pc, #448]	@ (800b344 <SDMMC_GetCmdResp1+0x1d0>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a70      	ldr	r2, [pc, #448]	@ (800b348 <SDMMC_GetCmdResp1+0x1d4>)
 800b188:	fba2 2303 	umull	r2, r3, r2, r3
 800b18c:	0a5a      	lsrs	r2, r3, #9
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	fb02 f303 	mul.w	r3, r2, r3
 800b194:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	1e5a      	subs	r2, r3, #1
 800b19a:	61fa      	str	r2, [r7, #28]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d102      	bne.n	800b1a6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b1a4:	e0c9      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1aa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b1ac:	69ba      	ldr	r2, [r7, #24]
 800b1ae:	4b67      	ldr	r3, [pc, #412]	@ (800b34c <SDMMC_GetCmdResp1+0x1d8>)
 800b1b0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d0ef      	beq.n	800b196 <SDMMC_GetCmdResp1+0x22>
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d1ea      	bne.n	800b196 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1c4:	f003 0304 	and.w	r3, r3, #4
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d004      	beq.n	800b1d6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2204      	movs	r2, #4
 800b1d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1d2:	2304      	movs	r3, #4
 800b1d4:	e0b1      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1da:	f003 0301 	and.w	r3, r3, #1
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d004      	beq.n	800b1ec <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e0a6      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	4a58      	ldr	r2, [pc, #352]	@ (800b350 <SDMMC_GetCmdResp1+0x1dc>)
 800b1f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f7ff fcd4 	bl	800aba0 <SDMMC_GetCommandResponse>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	7afb      	ldrb	r3, [r7, #11]
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d001      	beq.n	800b206 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b202:	2301      	movs	r3, #1
 800b204:	e099      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b206:	2100      	movs	r1, #0
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f7ff fcd6 	bl	800abba <SDMMC_GetResponse>
 800b20e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b210:	697a      	ldr	r2, [r7, #20]
 800b212:	4b50      	ldr	r3, [pc, #320]	@ (800b354 <SDMMC_GetCmdResp1+0x1e0>)
 800b214:	4013      	ands	r3, r2
 800b216:	2b00      	cmp	r3, #0
 800b218:	d101      	bne.n	800b21e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b21a:	2300      	movs	r3, #0
 800b21c:	e08d      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	2b00      	cmp	r3, #0
 800b222:	da02      	bge.n	800b22a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b224:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b228:	e087      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d001      	beq.n	800b238 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b234:	2340      	movs	r3, #64	@ 0x40
 800b236:	e080      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b242:	2380      	movs	r3, #128	@ 0x80
 800b244:	e079      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b250:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b254:	e071      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d002      	beq.n	800b266 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b260:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b264:	e069      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b274:	e061      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b280:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b284:	e059      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d002      	beq.n	800b296 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b290:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b294:	e051      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b2a4:	e049      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b2b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b2b4:	e041      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b2c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2c4:	e039      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b2d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b2d4:	e031      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b2e0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b2e4:	e029      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b2f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b2f4:	e021      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b300:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b304:	e019      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b310:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b314:	e011      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b320:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b324:	e009      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f003 0308 	and.w	r3, r3, #8
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b330:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b334:	e001      	b.n	800b33a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b336:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3720      	adds	r7, #32
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20000000 	.word	0x20000000
 800b348:	10624dd3 	.word	0x10624dd3
 800b34c:	00200045 	.word	0x00200045
 800b350:	002000c5 	.word	0x002000c5
 800b354:	fdffe008 	.word	0xfdffe008

0800b358 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b360:	4b1f      	ldr	r3, [pc, #124]	@ (800b3e0 <SDMMC_GetCmdResp2+0x88>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a1f      	ldr	r2, [pc, #124]	@ (800b3e4 <SDMMC_GetCmdResp2+0x8c>)
 800b366:	fba2 2303 	umull	r2, r3, r2, r3
 800b36a:	0a5b      	lsrs	r3, r3, #9
 800b36c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b370:	fb02 f303 	mul.w	r3, r2, r3
 800b374:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	1e5a      	subs	r2, r3, #1
 800b37a:	60fa      	str	r2, [r7, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d102      	bne.n	800b386 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b380:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b384:	e026      	b.n	800b3d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b38a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b392:	2b00      	cmp	r3, #0
 800b394:	d0ef      	beq.n	800b376 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1ea      	bne.n	800b376 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3a4:	f003 0304 	and.w	r3, r3, #4
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d004      	beq.n	800b3b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2204      	movs	r2, #4
 800b3b0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3b2:	2304      	movs	r3, #4
 800b3b4:	e00e      	b.n	800b3d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d004      	beq.n	800b3cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e003      	b.n	800b3d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a06      	ldr	r2, [pc, #24]	@ (800b3e8 <SDMMC_GetCmdResp2+0x90>)
 800b3d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr
 800b3e0:	20000000 	.word	0x20000000
 800b3e4:	10624dd3 	.word	0x10624dd3
 800b3e8:	002000c5 	.word	0x002000c5

0800b3ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b3f4:	4b1a      	ldr	r3, [pc, #104]	@ (800b460 <SDMMC_GetCmdResp3+0x74>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a1a      	ldr	r2, [pc, #104]	@ (800b464 <SDMMC_GetCmdResp3+0x78>)
 800b3fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b3fe:	0a5b      	lsrs	r3, r3, #9
 800b400:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b404:	fb02 f303 	mul.w	r3, r2, r3
 800b408:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	1e5a      	subs	r2, r3, #1
 800b40e:	60fa      	str	r2, [r7, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d102      	bne.n	800b41a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b414:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b418:	e01b      	b.n	800b452 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b41e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b426:	2b00      	cmp	r3, #0
 800b428:	d0ef      	beq.n	800b40a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1ea      	bne.n	800b40a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b438:	f003 0304 	and.w	r3, r3, #4
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d004      	beq.n	800b44a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2204      	movs	r2, #4
 800b444:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b446:	2304      	movs	r3, #4
 800b448:	e003      	b.n	800b452 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4a06      	ldr	r2, [pc, #24]	@ (800b468 <SDMMC_GetCmdResp3+0x7c>)
 800b44e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3714      	adds	r7, #20
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	20000000 	.word	0x20000000
 800b464:	10624dd3 	.word	0x10624dd3
 800b468:	002000c5 	.word	0x002000c5

0800b46c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b088      	sub	sp, #32
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	460b      	mov	r3, r1
 800b476:	607a      	str	r2, [r7, #4]
 800b478:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b47a:	4b35      	ldr	r3, [pc, #212]	@ (800b550 <SDMMC_GetCmdResp6+0xe4>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a35      	ldr	r2, [pc, #212]	@ (800b554 <SDMMC_GetCmdResp6+0xe8>)
 800b480:	fba2 2303 	umull	r2, r3, r2, r3
 800b484:	0a5b      	lsrs	r3, r3, #9
 800b486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b48a:	fb02 f303 	mul.w	r3, r2, r3
 800b48e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	1e5a      	subs	r2, r3, #1
 800b494:	61fa      	str	r2, [r7, #28]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d102      	bne.n	800b4a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b49a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b49e:	e052      	b.n	800b546 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4a4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d0ef      	beq.n	800b490 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d1ea      	bne.n	800b490 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4be:	f003 0304 	and.w	r3, r3, #4
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d004      	beq.n	800b4d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2204      	movs	r2, #4
 800b4ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4cc:	2304      	movs	r3, #4
 800b4ce:	e03a      	b.n	800b546 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4d4:	f003 0301 	and.w	r3, r3, #1
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d004      	beq.n	800b4e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e02f      	b.n	800b546 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f7ff fb5a 	bl	800aba0 <SDMMC_GetCommandResponse>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	7afb      	ldrb	r3, [r7, #11]
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d001      	beq.n	800b4fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e025      	b.n	800b546 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	4a16      	ldr	r2, [pc, #88]	@ (800b558 <SDMMC_GetCmdResp6+0xec>)
 800b4fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b500:	2100      	movs	r1, #0
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f7ff fb59 	bl	800abba <SDMMC_GetResponse>
 800b508:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b510:	2b00      	cmp	r3, #0
 800b512:	d106      	bne.n	800b522 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	0c1b      	lsrs	r3, r3, #16
 800b518:	b29a      	uxth	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b51e:	2300      	movs	r3, #0
 800b520:	e011      	b.n	800b546 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d002      	beq.n	800b532 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b52c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b530:	e009      	b.n	800b546 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d002      	beq.n	800b542 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b53c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b540:	e001      	b.n	800b546 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b542:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b546:	4618      	mov	r0, r3
 800b548:	3720      	adds	r7, #32
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	20000000 	.word	0x20000000
 800b554:	10624dd3 	.word	0x10624dd3
 800b558:	002000c5 	.word	0x002000c5

0800b55c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b564:	4b22      	ldr	r3, [pc, #136]	@ (800b5f0 <SDMMC_GetCmdResp7+0x94>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a22      	ldr	r2, [pc, #136]	@ (800b5f4 <SDMMC_GetCmdResp7+0x98>)
 800b56a:	fba2 2303 	umull	r2, r3, r2, r3
 800b56e:	0a5b      	lsrs	r3, r3, #9
 800b570:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b574:	fb02 f303 	mul.w	r3, r2, r3
 800b578:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	1e5a      	subs	r2, r3, #1
 800b57e:	60fa      	str	r2, [r7, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d102      	bne.n	800b58a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b584:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b588:	e02c      	b.n	800b5e4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b58e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b596:	2b00      	cmp	r3, #0
 800b598:	d0ef      	beq.n	800b57a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d1ea      	bne.n	800b57a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5a8:	f003 0304 	and.w	r3, r3, #4
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d004      	beq.n	800b5ba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2204      	movs	r2, #4
 800b5b4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5b6:	2304      	movs	r3, #4
 800b5b8:	e014      	b.n	800b5e4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5be:	f003 0301 	and.w	r3, r3, #1
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d004      	beq.n	800b5d0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e009      	b.n	800b5e4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d002      	beq.n	800b5e2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2240      	movs	r2, #64	@ 0x40
 800b5e0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b5e2:	2300      	movs	r3, #0

}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3714      	adds	r7, #20
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	20000000 	.word	0x20000000
 800b5f4:	10624dd3 	.word	0x10624dd3

0800b5f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b600:	4b11      	ldr	r3, [pc, #68]	@ (800b648 <SDMMC_GetCmdError+0x50>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a11      	ldr	r2, [pc, #68]	@ (800b64c <SDMMC_GetCmdError+0x54>)
 800b606:	fba2 2303 	umull	r2, r3, r2, r3
 800b60a:	0a5b      	lsrs	r3, r3, #9
 800b60c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b610:	fb02 f303 	mul.w	r3, r2, r3
 800b614:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	1e5a      	subs	r2, r3, #1
 800b61a:	60fa      	str	r2, [r7, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d102      	bne.n	800b626 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b620:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b624:	e009      	b.n	800b63a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b62a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d0f1      	beq.n	800b616 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a06      	ldr	r2, [pc, #24]	@ (800b650 <SDMMC_GetCmdError+0x58>)
 800b636:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	20000000 	.word	0x20000000
 800b64c:	10624dd3 	.word	0x10624dd3
 800b650:	002000c5 	.word	0x002000c5

0800b654 <__AVI_SearchID>:
  * @param  size:
  * @param  id:
  * @retval ID
  */
uint32_t __AVI_SearchID(uint8_t* buf,  uint32_t size, uint8_t *id)
{
 800b654:	b480      	push	{r7}
 800b656:	b087      	sub	sp, #28
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
 uint16_t i;
  size-=4;
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	3b04      	subs	r3, #4
 800b664:	60bb      	str	r3, [r7, #8]
  for(i=0;i<size;i++)
 800b666:	2300      	movs	r3, #0
 800b668:	82fb      	strh	r3, [r7, #22]
 800b66a:	e02a      	b.n	800b6c2 <__AVI_SearchID+0x6e>
  {
    if(buf[i] == id[0])
 800b66c:	8afb      	ldrh	r3, [r7, #22]
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	4413      	add	r3, r2
 800b672:	781a      	ldrb	r2, [r3, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d11f      	bne.n	800b6bc <__AVI_SearchID+0x68>
      if(buf[i+1] == id[1])
 800b67c:	8afb      	ldrh	r3, [r7, #22]
 800b67e:	3301      	adds	r3, #1
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	4413      	add	r3, r2
 800b684:	781a      	ldrb	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	3301      	adds	r3, #1
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d115      	bne.n	800b6bc <__AVI_SearchID+0x68>
        if(buf[i+2] == id[2])  
 800b690:	8afb      	ldrh	r3, [r7, #22]
 800b692:	3302      	adds	r3, #2
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	4413      	add	r3, r2
 800b698:	781a      	ldrb	r2, [r3, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	3302      	adds	r3, #2
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d10b      	bne.n	800b6bc <__AVI_SearchID+0x68>
          if(buf[i+3] == id[3])
 800b6a4:	8afb      	ldrh	r3, [r7, #22]
 800b6a6:	3303      	adds	r3, #3
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	781a      	ldrb	r2, [r3, #0]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	3303      	adds	r3, #3
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d101      	bne.n	800b6bc <__AVI_SearchID+0x68>
            return i;  
 800b6b8:	8afb      	ldrh	r3, [r7, #22]
 800b6ba:	e007      	b.n	800b6cc <__AVI_SearchID+0x78>
  for(i=0;i<size;i++)
 800b6bc:	8afb      	ldrh	r3, [r7, #22]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	82fb      	strh	r3, [r7, #22]
 800b6c2:	8afb      	ldrh	r3, [r7, #22]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d8d0      	bhi.n	800b66c <__AVI_SearchID+0x18>
  }
  return 0;    
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	371c      	adds	r7, #28
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <__AVI_GetStreamInfo>:
  * @param  havi: AVI handle
  * @param  buf:   
  * @retval AVI status
  */
AVISTATUS __AVI_GetStreamInfo( AVI_CONTEXT * pavi, uint8_t* buf)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  
  pavi->aviInfo.StreamID = AVI_MAKEWORD (buf+2);    
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	3302      	adds	r3, #2
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	021b      	lsls	r3, r3, #8
 800b6ea:	b21a      	sxth	r2, r3
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	3303      	adds	r3, #3
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	b21b      	sxth	r3, r3
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	b21b      	sxth	r3, r3
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	83da      	strh	r2, [r3, #30]
  pavi->aviInfo.StreamSize = AVI_MAKEDWORD (buf+4);  
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	3304      	adds	r3, #4
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	461a      	mov	r2, r3
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	3305      	adds	r3, #5
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	021b      	lsls	r3, r3, #8
 800b70e:	431a      	orrs	r2, r3
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	3306      	adds	r3, #6
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	041b      	lsls	r3, r3, #16
 800b718:	431a      	orrs	r2, r3
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	3307      	adds	r3, #7
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	061b      	lsls	r3, r3, #24
 800b722:	4313      	orrs	r3, r2
 800b724:	461a      	mov	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	621a      	str	r2, [r3, #32]
  
  if(pavi->aviInfo.StreamSize%2)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	f003 0301 	and.w	r3, r3, #1
 800b732:	2b00      	cmp	r3, #0
 800b734:	d004      	beq.n	800b740 <__AVI_GetStreamInfo+0x68>
    pavi->aviInfo.StreamSize++;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	1c5a      	adds	r2, r3, #1
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	621a      	str	r2, [r3, #32]
  
  if((pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG) || (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG))
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	8bdb      	ldrh	r3, [r3, #30]
 800b744:	f246 4263 	movw	r2, #25699	@ 0x6463
 800b748:	4293      	cmp	r3, r2
 800b74a:	d005      	beq.n	800b758 <__AVI_GetStreamInfo+0x80>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	8bdb      	ldrh	r3, [r3, #30]
 800b750:	f247 7262 	movw	r2, #30562	@ 0x7762
 800b754:	4293      	cmp	r3, r2
 800b756:	d101      	bne.n	800b75c <__AVI_GetStreamInfo+0x84>
  {
    return AVI_OK;
 800b758:	2300      	movs	r3, #0
 800b75a:	e000      	b.n	800b75e <__AVI_GetStreamInfo+0x86>
  }
  
  return AVI_STREAM_ERR;  
 800b75c:	230b      	movs	r3, #11
}
 800b75e:	4618      	mov	r0, r3
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
	...

0800b76c <__AVI_Init>:
  * @param  buf:
  * @param  size: AVI file size     
  * @retval AVI status
  */
AVISTATUS __AVI_Init( AVI_CONTEXT * pavi, uint8_t *buf, uint32_t size)     
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08e      	sub	sp, #56	@ 0x38
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
  uint16_t offset;
  uint8_t *tbuf;
  AVISTATUS   res = AVI_OK;
 800b778:	2300      	movs	r3, #0
 800b77a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  STRH_HEADER *strhheader; 
  
  STRF_BMPHEADER *bmpheader; 
  STRF_WAVHEADER *wavheader; 
  
  tbuf=buf;
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	633b      	str	r3, [r7, #48]	@ 0x30
  aviheader=(AVI_HEADER*)buf; 
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if(aviheader->RiffID != AVI_RIFF_ID)
 800b786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a87      	ldr	r2, [pc, #540]	@ (800b9a8 <__AVI_Init+0x23c>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d001      	beq.n	800b794 <__AVI_Init+0x28>
  {
    return AVI_RIFF_ERR;
 800b790:	2301      	movs	r3, #1
 800b792:	e170      	b.n	800ba76 <__AVI_Init+0x30a>
  }
  
  if(aviheader->AviID != AVI_AVI_ID)
 800b794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	4a84      	ldr	r2, [pc, #528]	@ (800b9ac <__AVI_Init+0x240>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d001      	beq.n	800b7a2 <__AVI_Init+0x36>
  {
    return AVI_AVI_ERR;  
 800b79e:	2302      	movs	r3, #2
 800b7a0:	e169      	b.n	800ba76 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(AVI_HEADER);            
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	330c      	adds	r3, #12
 800b7a6:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf);
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800b7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a7f      	ldr	r2, [pc, #508]	@ (800b9b0 <__AVI_Init+0x244>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d001      	beq.n	800b7ba <__AVI_Init+0x4e>
  {
    return AVI_LIST_ERR;
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	e15d      	b.n	800ba76 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_HDRL_ID)
 800b7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	4a7d      	ldr	r2, [pc, #500]	@ (800b9b4 <__AVI_Init+0x248>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d001      	beq.n	800b7c8 <__AVI_Init+0x5c>
  {
    return AVI_HDRL_ERR;
 800b7c4:	2304      	movs	r3, #4
 800b7c6:	e156      	b.n	800ba76 <__AVI_Init+0x30a>
  }
  
  buf+=sizeof(LIST_HEADER);            
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	330c      	adds	r3, #12
 800b7cc:	60bb      	str	r3, [r7, #8]
  avihheader=(AVIH_HEADER*)(buf);                                   
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	627b      	str	r3, [r7, #36]	@ 0x24
  if(avihheader->BlockID != AVI_AVIH_ID)
 800b7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a78      	ldr	r2, [pc, #480]	@ (800b9b8 <__AVI_Init+0x24c>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d001      	beq.n	800b7e0 <__AVI_Init+0x74>
  {
    return AVI_AVIH_ERR;
 800b7dc:	2305      	movs	r3, #5
 800b7de:	e14a      	b.n	800ba76 <__AVI_Init+0x30a>
  }
  
  pavi->aviInfo.SecPerFrame=avihheader->SecPerFrame;        
 800b7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e2:	689a      	ldr	r2, [r3, #8]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	601a      	str	r2, [r3, #0]
  pavi->aviInfo.TotalFrame=avihheader->TotalFrame;          
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ea:	699a      	ldr	r2, [r3, #24]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	605a      	str	r2, [r3, #4]
  buf+=avihheader->BlockSize+8;            
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	3308      	adds	r3, #8
 800b7f6:	68ba      	ldr	r2, [r7, #8]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	60bb      	str	r3, [r7, #8]
  listheader=(LIST_HEADER*)(buf); 
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  if(listheader->ListID != AVI_LIST_ID)
 800b800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a6a      	ldr	r2, [pc, #424]	@ (800b9b0 <__AVI_Init+0x244>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d001      	beq.n	800b80e <__AVI_Init+0xa2>
  {
    return AVI_LIST_ERR;
 800b80a:	2303      	movs	r3, #3
 800b80c:	e133      	b.n	800ba76 <__AVI_Init+0x30a>
  }
  
  if(listheader->ListType != AVI_STRL_ID)
 800b80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	4a6a      	ldr	r2, [pc, #424]	@ (800b9bc <__AVI_Init+0x250>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d001      	beq.n	800b81c <__AVI_Init+0xb0>
  {
    return AVI_STRL_ERR;
 800b818:	2306      	movs	r3, #6
 800b81a:	e12c      	b.n	800ba76 <__AVI_Init+0x30a>
  }
  
  strhheader=(STRH_HEADER*)(buf+12);                                
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	330c      	adds	r3, #12
 800b820:	623b      	str	r3, [r7, #32]
  if(strhheader->BlockID != AVI_STRH_ID)
 800b822:	6a3b      	ldr	r3, [r7, #32]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a66      	ldr	r2, [pc, #408]	@ (800b9c0 <__AVI_Init+0x254>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d001      	beq.n	800b830 <__AVI_Init+0xc4>
  {
    return AVI_STRH_ERR;
 800b82c:	2307      	movs	r3, #7
 800b82e:	e122      	b.n	800ba76 <__AVI_Init+0x30a>
  }
  
  if(strhheader->StreamType == AVI_VIDS_STREAM)        
 800b830:	6a3b      	ldr	r3, [r7, #32]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	4a63      	ldr	r2, [pc, #396]	@ (800b9c4 <__AVI_Init+0x258>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d16a      	bne.n	800b910 <__AVI_Init+0x1a4>
  {
    if(strhheader->Handler != AVI_FORMAT_MJPG)
 800b83a:	6a3b      	ldr	r3, [r7, #32]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	4a62      	ldr	r2, [pc, #392]	@ (800b9c8 <__AVI_Init+0x25c>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d001      	beq.n	800b848 <__AVI_Init+0xdc>
    {
      return AVI_FORMAT_ERR;
 800b844:	230a      	movs	r3, #10
 800b846:	e116      	b.n	800ba76 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[0];      
 800b848:	4a60      	ldr	r2, [pc, #384]	@ (800b9cc <__AVI_Init+0x260>)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[1];      
 800b84e:	4a60      	ldr	r2, [pc, #384]	@ (800b9d0 <__AVI_Init+0x264>)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	629a      	str	r2, [r3, #40]	@ 0x28
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800b854:	6a3b      	ldr	r3, [r7, #32]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	3314      	adds	r3, #20
 800b85a:	68ba      	ldr	r2, [r7, #8]
 800b85c:	4413      	add	r3, r2
 800b85e:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a5b      	ldr	r2, [pc, #364]	@ (800b9d4 <__AVI_Init+0x268>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d001      	beq.n	800b86e <__AVI_Init+0x102>
    {
      return AVI_STRF_ERR;
 800b86a:	2308      	movs	r3, #8
 800b86c:	e103      	b.n	800ba76 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	68da      	ldr	r2, [r3, #12]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height; 
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	691a      	ldr	r2, [r3, #16]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	611a      	str	r2, [r3, #16]
    buf+=listheader->BlockSize+8;          
 800b87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	3308      	adds	r3, #8
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	4413      	add	r3, r2
 800b888:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800b88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a47      	ldr	r2, [pc, #284]	@ (800b9b0 <__AVI_Init+0x244>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d009      	beq.n	800b8ac <__AVI_Init+0x140>
    {
      pavi->aviInfo.SampleRate=0;          
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=0;          
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=0;          
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	839a      	strh	r2, [r3, #28]
 800b8aa:	e0b7      	b.n	800ba1c <__AVI_Init+0x2b0>
      
    }else
    {      
      if(listheader->ListType != AVI_STRL_ID)
 800b8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	4a42      	ldr	r2, [pc, #264]	@ (800b9bc <__AVI_Init+0x250>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d001      	beq.n	800b8ba <__AVI_Init+0x14e>
      {
        return AVI_STRL_ERR;    
 800b8b6:	2306      	movs	r3, #6
 800b8b8:	e0dd      	b.n	800ba76 <__AVI_Init+0x30a>
      }
      
      strhheader=(STRH_HEADER*)(buf+12);
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	330c      	adds	r3, #12
 800b8be:	623b      	str	r3, [r7, #32]
      if(strhheader->BlockID != AVI_STRH_ID)
 800b8c0:	6a3b      	ldr	r3, [r7, #32]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a3e      	ldr	r2, [pc, #248]	@ (800b9c0 <__AVI_Init+0x254>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d001      	beq.n	800b8ce <__AVI_Init+0x162>
      {
        return AVI_STRH_ERR;
 800b8ca:	2307      	movs	r3, #7
 800b8cc:	e0d3      	b.n	800ba76 <__AVI_Init+0x30a>
      }
      
      if(strhheader->StreamType != AVI_AUDS_STREAM)
 800b8ce:	6a3b      	ldr	r3, [r7, #32]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	4a41      	ldr	r2, [pc, #260]	@ (800b9d8 <__AVI_Init+0x26c>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d001      	beq.n	800b8dc <__AVI_Init+0x170>
      {
        return AVI_FORMAT_ERR;
 800b8d8:	230a      	movs	r3, #10
 800b8da:	e0cc      	b.n	800ba76 <__AVI_Init+0x30a>
      }
      
      wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800b8dc:	6a3b      	ldr	r3, [r7, #32]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	3314      	adds	r3, #20
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	61fb      	str	r3, [r7, #28]
      if(wavheader->BlockID != AVI_STRF_ID)
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a39      	ldr	r2, [pc, #228]	@ (800b9d4 <__AVI_Init+0x268>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d001      	beq.n	800b8f6 <__AVI_Init+0x18a>
      {
        return AVI_STRF_ERR;
 800b8f2:	2308      	movs	r3, #8
 800b8f4:	e0bf      	b.n	800ba76 <__AVI_Init+0x30a>
      }
      
      pavi->aviInfo.SampleRate=wavheader->SampleRate;      
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	68da      	ldr	r2, [r3, #12]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	615a      	str	r2, [r3, #20]
      pavi->aviInfo.Channels=wavheader->Channels;  
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	895a      	ldrh	r2, [r3, #10]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	831a      	strh	r2, [r3, #24]
      pavi->aviInfo.AudioType=wavheader->FormatTag;    
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	891a      	ldrh	r2, [r3, #8]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	839a      	strh	r2, [r3, #28]
 800b90e:	e085      	b.n	800ba1c <__AVI_Init+0x2b0>
    }
  }else if(strhheader->StreamType == AVI_AUDS_STREAM)         
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	4a30      	ldr	r2, [pc, #192]	@ (800b9d8 <__AVI_Init+0x26c>)
 800b916:	4293      	cmp	r3, r2
 800b918:	f040 8080 	bne.w	800ba1c <__AVI_Init+0x2b0>
  { 
    pavi->aviInfo.VideoFLAG=(uint8_t*)AVI_VIDS_FLAG_TBL[1];          
 800b91c:	4a2f      	ldr	r2, [pc, #188]	@ (800b9dc <__AVI_Init+0x270>)
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	625a      	str	r2, [r3, #36]	@ 0x24
    pavi->aviInfo.AudioFLAG=(uint8_t*)AVI_AUDS_FLAG_TBL[0];          
 800b922:	4a2f      	ldr	r2, [pc, #188]	@ (800b9e0 <__AVI_Init+0x274>)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	629a      	str	r2, [r3, #40]	@ 0x28
    wavheader=(STRF_WAVHEADER*)(buf+12+strhheader->BlockSize+8);
 800b928:	6a3b      	ldr	r3, [r7, #32]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	3314      	adds	r3, #20
 800b92e:	68ba      	ldr	r2, [r7, #8]
 800b930:	4413      	add	r3, r2
 800b932:	61fb      	str	r3, [r7, #28]
    if(wavheader->BlockID != AVI_STRF_ID)
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a26      	ldr	r2, [pc, #152]	@ (800b9d4 <__AVI_Init+0x268>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d001      	beq.n	800b942 <__AVI_Init+0x1d6>
    {
      return AVI_STRF_ERR;
 800b93e:	2308      	movs	r3, #8
 800b940:	e099      	b.n	800ba76 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.SampleRate=wavheader->SampleRate;        
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	68da      	ldr	r2, [r3, #12]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	615a      	str	r2, [r3, #20]
    pavi->aviInfo.Channels=wavheader->Channels;        
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	895a      	ldrh	r2, [r3, #10]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	831a      	strh	r2, [r3, #24]
    pavi->aviInfo.AudioType=wavheader->FormatTag;        
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	891a      	ldrh	r2, [r3, #8]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	839a      	strh	r2, [r3, #28]
    buf+=listheader->BlockSize+8;          
 800b95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	3308      	adds	r3, #8
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	4413      	add	r3, r2
 800b964:	60bb      	str	r3, [r7, #8]
    listheader=(LIST_HEADER*)(buf);
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	62bb      	str	r3, [r7, #40]	@ 0x28
    if(listheader->ListID != AVI_LIST_ID)
 800b96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a10      	ldr	r2, [pc, #64]	@ (800b9b0 <__AVI_Init+0x244>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d001      	beq.n	800b978 <__AVI_Init+0x20c>
    {
      return AVI_LIST_ERR;  
 800b974:	2303      	movs	r3, #3
 800b976:	e07e      	b.n	800ba76 <__AVI_Init+0x30a>
    }
    
    if(listheader->ListType != AVI_STRL_ID)
 800b978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	4a0f      	ldr	r2, [pc, #60]	@ (800b9bc <__AVI_Init+0x250>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d001      	beq.n	800b986 <__AVI_Init+0x21a>
    {
      return AVI_STRL_ERR;  
 800b982:	2306      	movs	r3, #6
 800b984:	e077      	b.n	800ba76 <__AVI_Init+0x30a>
    }
    
    strhheader=(STRH_HEADER*)(buf+12);
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	330c      	adds	r3, #12
 800b98a:	623b      	str	r3, [r7, #32]
    if(strhheader->BlockID != AVI_STRH_ID)
 800b98c:	6a3b      	ldr	r3, [r7, #32]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a0b      	ldr	r2, [pc, #44]	@ (800b9c0 <__AVI_Init+0x254>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d001      	beq.n	800b99a <__AVI_Init+0x22e>
    {
      return AVI_STRH_ERR;
 800b996:	2307      	movs	r3, #7
 800b998:	e06d      	b.n	800ba76 <__AVI_Init+0x30a>
    }
    
    if(strhheader->StreamType != AVI_VIDS_STREAM)
 800b99a:	6a3b      	ldr	r3, [r7, #32]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	4a09      	ldr	r2, [pc, #36]	@ (800b9c4 <__AVI_Init+0x258>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d01f      	beq.n	800b9e4 <__AVI_Init+0x278>
    {
      return AVI_FORMAT_ERR;
 800b9a4:	230a      	movs	r3, #10
 800b9a6:	e066      	b.n	800ba76 <__AVI_Init+0x30a>
 800b9a8:	46464952 	.word	0x46464952
 800b9ac:	20495641 	.word	0x20495641
 800b9b0:	5453494c 	.word	0x5453494c
 800b9b4:	6c726468 	.word	0x6c726468
 800b9b8:	68697661 	.word	0x68697661
 800b9bc:	6c727473 	.word	0x6c727473
 800b9c0:	68727473 	.word	0x68727473
 800b9c4:	73646976 	.word	0x73646976
 800b9c8:	47504a4d 	.word	0x47504a4d
 800b9cc:	080109cc 	.word	0x080109cc
 800b9d0:	080109e4 	.word	0x080109e4
 800b9d4:	66727473 	.word	0x66727473
 800b9d8:	73647561 	.word	0x73647561
 800b9dc:	080109d4 	.word	0x080109d4
 800b9e0:	080109dc 	.word	0x080109dc
    }
    
    bmpheader=(STRF_BMPHEADER*)(buf+12+strhheader->BlockSize+8);
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	3314      	adds	r3, #20
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	61bb      	str	r3, [r7, #24]
    if(bmpheader->BlockID != AVI_STRF_ID)
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a22      	ldr	r2, [pc, #136]	@ (800ba80 <__AVI_Init+0x314>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d001      	beq.n	800b9fe <__AVI_Init+0x292>
    {
      return AVI_STRF_ERR;  
 800b9fa:	2308      	movs	r3, #8
 800b9fc:	e03b      	b.n	800ba76 <__AVI_Init+0x30a>
    }
    
    if(bmpheader->bmiHeader.Compression != AVI_FORMAT_MJPG)
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	4a20      	ldr	r2, [pc, #128]	@ (800ba84 <__AVI_Init+0x318>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d001      	beq.n	800ba0c <__AVI_Init+0x2a0>
    {
      return AVI_FORMAT_ERR;
 800ba08:	230a      	movs	r3, #10
 800ba0a:	e034      	b.n	800ba76 <__AVI_Init+0x30a>
    }
    
    pavi->aviInfo.Width=bmpheader->bmiHeader.Width;
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	68da      	ldr	r2, [r3, #12]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	60da      	str	r2, [r3, #12]
    pavi->aviInfo.Height=bmpheader->bmiHeader.Height;   
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	691a      	ldr	r2, [r3, #16]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	611a      	str	r2, [r3, #16]
  }
  offset= __AVI_SearchID(tbuf,size,(uint8_t*)"movi");
 800ba1c:	4a1a      	ldr	r2, [pc, #104]	@ (800ba88 <__AVI_Init+0x31c>)
 800ba1e:	6879      	ldr	r1, [r7, #4]
 800ba20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ba22:	f7ff fe17 	bl	800b654 <__AVI_SearchID>
 800ba26:	4603      	mov	r3, r0
 800ba28:	82fb      	strh	r3, [r7, #22]
  if(offset == 0)
 800ba2a:	8afb      	ldrh	r3, [r7, #22]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d101      	bne.n	800ba34 <__AVI_Init+0x2c8>
  {
    return AVI_MOVI_ERR;
 800ba30:	2309      	movs	r3, #9
 800ba32:	e020      	b.n	800ba76 <__AVI_Init+0x30a>
  }
  
  if(pavi->aviInfo.SampleRate)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	695b      	ldr	r3, [r3, #20]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d01a      	beq.n	800ba72 <__AVI_Init+0x306>
  {
    tbuf+=offset;
 800ba3c:	8afb      	ldrh	r3, [r7, #22]
 800ba3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba40:	4413      	add	r3, r2
 800ba42:	633b      	str	r3, [r7, #48]	@ 0x30
    offset= __AVI_SearchID(tbuf,size,pavi->aviInfo.AudioFLAG);      
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba48:	461a      	mov	r2, r3
 800ba4a:	6879      	ldr	r1, [r7, #4]
 800ba4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ba4e:	f7ff fe01 	bl	800b654 <__AVI_SearchID>
 800ba52:	4603      	mov	r3, r0
 800ba54:	82fb      	strh	r3, [r7, #22]
    if(offset == 0)
 800ba56:	8afb      	ldrh	r3, [r7, #22]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d101      	bne.n	800ba60 <__AVI_Init+0x2f4>
    {
      return AVI_STREAM_ERR;
 800ba5c:	230b      	movs	r3, #11
 800ba5e:	e00a      	b.n	800ba76 <__AVI_Init+0x30a>
    }
    
    tbuf+=offset+4;
 800ba60:	8afb      	ldrh	r3, [r7, #22]
 800ba62:	3304      	adds	r3, #4
 800ba64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba66:	4413      	add	r3, r2
 800ba68:	633b      	str	r3, [r7, #48]	@ 0x30
    pavi->aviInfo.AudioBufSize=*((uint16_t*)tbuf);            
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba6c:	881a      	ldrh	r2, [r3, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	835a      	strh	r2, [r3, #26]
  }
  
  return res;
 800ba72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3738      	adds	r7, #56	@ 0x38
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	66727473 	.word	0x66727473
 800ba84:	47504a4d 	.word	0x47504a4d
 800ba88:	080109ec 	.word	0x080109ec

0800ba8c <AVI_ParserInit>:
  * @param  pAudioBuffer   : audio buffer
  * @param  AudioBufferSize: audio buffer size
* @retval AVI status (0 : no Error, 1: Error occurred)
  */
uint32_t AVI_ParserInit(AVI_CONTEXT * pavi, FIL *file, uint8_t *pVideoBuffer, uint32_t VideoBufferSize, uint8_t *pAudioBuffer, uint32_t AudioBufferSize)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b086      	sub	sp, #24
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
 800ba98:	603b      	str	r3, [r7, #0]
  uint32_t readSize= 0;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	617b      	str	r3, [r7, #20]
  
  pavi->pVideoBuffer = pVideoBuffer;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	635a      	str	r2, [r3, #52]	@ 0x34
  pavi->VideoBufferSize = VideoBufferSize;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	683a      	ldr	r2, [r7, #0]
 800baa8:	639a      	str	r2, [r3, #56]	@ 0x38

  pavi->pAudioBuffer = pAudioBuffer;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6a3a      	ldr	r2, [r7, #32]
 800baae:	63da      	str	r2, [r3, #60]	@ 0x3c
  pavi->AudioBufferSize = AudioBufferSize;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bab4:	641a      	str	r2, [r3, #64]	@ 0x40
  
  f_lseek(file, 0 );
 800bab6:	2100      	movs	r1, #0
 800bab8:	68b8      	ldr	r0, [r7, #8]
 800baba:	f004 faee 	bl	801009a <f_lseek>
  
  f_read(file, pavi->pVideoBuffer, VideoBufferSize,(UINT*) &readSize );
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bac2:	f107 0314 	add.w	r3, r7, #20
 800bac6:	683a      	ldr	r2, [r7, #0]
 800bac8:	68b8      	ldr	r0, [r7, #8]
 800baca:	f004 f8ff 	bl	800fccc <f_read>
  if(readSize != VideoBufferSize)
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	683a      	ldr	r2, [r7, #0]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d001      	beq.n	800bada <AVI_ParserInit+0x4e>
  {
    return 1;
 800bad6:	2301      	movs	r3, #1
 800bad8:	e013      	b.n	800bb02 <AVI_ParserInit+0x76>
  }
  else if(__AVI_Init(pavi, pavi->pVideoBuffer, VideoBufferSize) != AVI_OK)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	4619      	mov	r1, r3
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f7ff fe42 	bl	800b76c <__AVI_Init>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d001      	beq.n	800baf2 <AVI_ParserInit+0x66>
  {
    return 1;    
 800baee:	2301      	movs	r3, #1
 800baf0:	e007      	b.n	800bb02 <AVI_ParserInit+0x76>
  }

  pavi->FileSize= f_size(file);
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	68da      	ldr	r2, [r3, #12]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	645a      	str	r2, [r3, #68]	@ 0x44
  pavi->CurrentImage=0;  
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2200      	movs	r2, #0
 800bafe:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  return  0;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3718      	adds	r7, #24
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
	...

0800bb0c <AVI_GetFrame>:
  * @param  pavi: AVI context
  * @param  file:   AVI file
  * @retval type of frame  (audio frame or video frame )
  */
uint32_t AVI_GetFrame(AVI_CONTEXT * pavi, FIL *file)  
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  uint32_t  offset ;
  uint32_t readSize = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	60bb      	str	r3, [r7, #8]
  
  if(pavi->CurrentImage== 0 )
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d124      	bne.n	800bb6c <AVI_GetFrame+0x60>
  {
    
    f_lseek(file, 0 ); /* Go to the file start */
 800bb22:	2100      	movs	r1, #0
 800bb24:	6838      	ldr	r0, [r7, #0]
 800bb26:	f004 fab8 	bl	801009a <f_lseek>
    /* Read data*/
    f_read(file, pavi->pVideoBuffer, pavi->VideoBufferSize, (UINT*)&readSize );
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb32:	f107 0308 	add.w	r3, r7, #8
 800bb36:	6838      	ldr	r0, [r7, #0]
 800bb38:	f004 f8c8 	bl	800fccc <f_read>
    
    /* Check for "movi" tag */
    offset = __AVI_SearchID(pavi->pVideoBuffer,pavi->VideoBufferSize,(uint8_t*)"movi");
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb44:	4a2a      	ldr	r2, [pc, #168]	@ (800bbf0 <AVI_GetFrame+0xe4>)
 800bb46:	4619      	mov	r1, r3
 800bb48:	f7ff fd84 	bl	800b654 <__AVI_SearchID>
 800bb4c:	60f8      	str	r0, [r7, #12]
    /* Read first Frame info*/
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + offset +4);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	3304      	adds	r3, #4
 800bb56:	4413      	add	r3, r2
 800bb58:	4619      	mov	r1, r3
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f7ff fdbc 	bl	800b6d8 <__AVI_GetStreamInfo>
    /* go to the first frame offset in the avi file*/
    f_lseek(file, offset + 12 );
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	330c      	adds	r3, #12
 800bb64:	4619      	mov	r1, r3
 800bb66:	6838      	ldr	r0, [r7, #0]
 800bb68:	f004 fa97 	bl	801009a <f_lseek>
    
  }

  /* Get the current frame size */
  pavi->FrameSize = pavi->aviInfo.StreamSize; 
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a1a      	ldr	r2, [r3, #32]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	631a      	str	r2, [r3, #48]	@ 0x30
  
  if(pavi->aviInfo.StreamID  ==  AVI_VIDS_FLAG)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	8bdb      	ldrh	r3, [r3, #30]
 800bb78:	f246 4263 	movw	r2, #25699	@ 0x6463
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	d115      	bne.n	800bbac <AVI_GetFrame+0xa0>
  {
    /* the Frame is a Video Frame */
       
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pVideoBuffer, pavi->FrameSize + 8 , (UINT*)&readSize );
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb88:	f103 0208 	add.w	r2, r3, #8
 800bb8c:	f107 0308 	add.w	r3, r7, #8
 800bb90:	6838      	ldr	r0, [r7, #0]
 800bb92:	f004 f89b 	bl	800fccc <f_read>
    
    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pVideoBuffer + pavi->aviInfo.StreamSize );
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a1b      	ldr	r3, [r3, #32]
 800bb9e:	4413      	add	r3, r2
 800bba0:	4619      	mov	r1, r3
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7ff fd98 	bl	800b6d8 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_VIDEO_FRAME;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e01c      	b.n	800bbe6 <AVI_GetFrame+0xda>
  }
  if (pavi->aviInfo.StreamID  ==  AVI_AUDS_FLAG)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	8bdb      	ldrh	r3, [r3, #30]
 800bbb0:	f247 7262 	movw	r2, #30562	@ 0x7762
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d115      	bne.n	800bbe4 <AVI_GetFrame+0xd8>
  { /* the Frame is an Audio Frame */
    
    /* Read The current frame + the header of the next frame (8 bytes) */
    f_read(file, pavi->pAudioBuffer, pavi->FrameSize + 8, (UINT*)&readSize );
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbc0:	f103 0208 	add.w	r2, r3, #8
 800bbc4:	f107 0308 	add.w	r3, r7, #8
 800bbc8:	6838      	ldr	r0, [r7, #0]
 800bbca:	f004 f87f 	bl	800fccc <f_read>

    /* Get the info of the next frame */
    __AVI_GetStreamInfo(pavi, pavi->pAudioBuffer + pavi->aviInfo.StreamSize );
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	4413      	add	r3, r2
 800bbd8:	4619      	mov	r1, r3
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7ff fd7c 	bl	800b6d8 <__AVI_GetStreamInfo>
    /* Return VIDEO frame */
    return AVI_AUDIO_FRAME;
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	e000      	b.n	800bbe6 <AVI_GetFrame+0xda>
    
  }
  
  return 0;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	080109ec 	.word	0x080109ec

0800bbf4 <GC9A01_set_reset>:


//////////////////////////////////////////////// GLOBAL FUNCTIONS


void GC9A01_set_reset(uint8_t val) {
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800bbfe:	79fb      	ldrb	r3, [r7, #7]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d105      	bne.n	800bc10 <GC9A01_set_reset+0x1c>
    	HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, RESET);
 800bc04:	2200      	movs	r2, #0
 800bc06:	2120      	movs	r1, #32
 800bc08:	4806      	ldr	r0, [pc, #24]	@ (800bc24 <GC9A01_set_reset+0x30>)
 800bc0a:	f7f5 ff8f 	bl	8001b2c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
    }
}
 800bc0e:	e004      	b.n	800bc1a <GC9A01_set_reset+0x26>
        HAL_GPIO_WritePin(GC9A01_RST_GPIO_Port, GC9A01_RST_Pin, SET);
 800bc10:	2201      	movs	r2, #1
 800bc12:	2120      	movs	r1, #32
 800bc14:	4803      	ldr	r0, [pc, #12]	@ (800bc24 <GC9A01_set_reset+0x30>)
 800bc16:	f7f5 ff89 	bl	8001b2c <HAL_GPIO_WritePin>
}
 800bc1a:	bf00      	nop
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	58022400 	.word	0x58022400

0800bc28 <GC9A01_set_data_command>:

void GC9A01_set_data_command(uint8_t val) {
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	4603      	mov	r3, r0
 800bc30:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800bc32:	79fb      	ldrb	r3, [r7, #7]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d105      	bne.n	800bc44 <GC9A01_set_data_command+0x1c>
    	HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, RESET);
 800bc38:	2200      	movs	r2, #0
 800bc3a:	2140      	movs	r1, #64	@ 0x40
 800bc3c:	4806      	ldr	r0, [pc, #24]	@ (800bc58 <GC9A01_set_data_command+0x30>)
 800bc3e:	f7f5 ff75 	bl	8001b2c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
    }
}
 800bc42:	e004      	b.n	800bc4e <GC9A01_set_data_command+0x26>
        HAL_GPIO_WritePin(GC9A01_DC_GPIO_Port, GC9A01_DC_Pin, SET);
 800bc44:	2201      	movs	r2, #1
 800bc46:	2140      	movs	r1, #64	@ 0x40
 800bc48:	4803      	ldr	r0, [pc, #12]	@ (800bc58 <GC9A01_set_data_command+0x30>)
 800bc4a:	f7f5 ff6f 	bl	8001b2c <HAL_GPIO_WritePin>
}
 800bc4e:	bf00      	nop
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	58022400 	.word	0x58022400

0800bc5c <GC9A01_set_chip_select>:

void GC9A01_set_chip_select(uint8_t val) {
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	71fb      	strb	r3, [r7, #7]
    if (val==0) {
 800bc66:	79fb      	ldrb	r3, [r7, #7]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d105      	bne.n	800bc78 <GC9A01_set_chip_select+0x1c>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, RESET);
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	2102      	movs	r1, #2
 800bc70:	4806      	ldr	r0, [pc, #24]	@ (800bc8c <GC9A01_set_chip_select+0x30>)
 800bc72:	f7f5 ff5b 	bl	8001b2c <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
    }
}
 800bc76:	e004      	b.n	800bc82 <GC9A01_set_chip_select+0x26>
    	HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, SET);
 800bc78:	2201      	movs	r2, #1
 800bc7a:	2102      	movs	r1, #2
 800bc7c:	4803      	ldr	r0, [pc, #12]	@ (800bc8c <GC9A01_set_chip_select+0x30>)
 800bc7e:	f7f5 ff55 	bl	8001b2c <HAL_GPIO_WritePin>
}
 800bc82:	bf00      	nop
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	58022800 	.word	0x58022800

0800bc90 <GC9A01_write_command>:

void GC9A01_write_command(uint8_t cmd) {
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	4603      	mov	r3, r0
 800bc98:	71fb      	strb	r3, [r7, #7]
    GC9A01_set_data_command(OFF);
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	f7ff ffc4 	bl	800bc28 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 800bca0:	2000      	movs	r0, #0
 800bca2:	f7ff ffdb 	bl	800bc5c <GC9A01_set_chip_select>
    GC9A01_spi_tx(&cmd, sizeof(cmd));
 800bca6:	1dfb      	adds	r3, r7, #7
 800bca8:	2101      	movs	r1, #1
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f000 faae 	bl	800c20c <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 800bcb0:	2001      	movs	r0, #1
 800bcb2:	f7ff ffd3 	bl	800bc5c <GC9A01_set_chip_select>
}
 800bcb6:	bf00      	nop
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <GC9A01_write_data>:

void GC9A01_write_data(uint8_t *data, size_t len) {
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b082      	sub	sp, #8
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	6039      	str	r1, [r7, #0]
    GC9A01_set_data_command(ON);
 800bcc8:	2001      	movs	r0, #1
 800bcca:	f7ff ffad 	bl	800bc28 <GC9A01_set_data_command>
    GC9A01_set_chip_select(OFF);
 800bcce:	2000      	movs	r0, #0
 800bcd0:	f7ff ffc4 	bl	800bc5c <GC9A01_set_chip_select>
    GC9A01_spi_tx(data, len);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	4619      	mov	r1, r3
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fa96 	bl	800c20c <GC9A01_spi_tx>
    GC9A01_set_chip_select(ON);
 800bce0:	2001      	movs	r0, #1
 800bce2:	f7ff ffbb 	bl	800bc5c <GC9A01_set_chip_select>
}
 800bce6:	bf00      	nop
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <GC9A01_write_byte>:

static inline void GC9A01_write_byte(uint8_t val) {
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b082      	sub	sp, #8
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	71fb      	strb	r3, [r7, #7]
    GC9A01_write_data(&val, sizeof(val));
 800bcf8:	1dfb      	adds	r3, r7, #7
 800bcfa:	2101      	movs	r1, #1
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7ff ffde 	bl	800bcbe <GC9A01_write_data>
}
 800bd02:	bf00      	nop
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <GC9A01_init>:
void GC9A01_write_continue(uint8_t *data, size_t len) {
    GC9A01_write_command(MEM_WR_CONT);
    GC9A01_write_data(data, len);
}

void GC9A01_init(void) {
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	af00      	add	r7, sp, #0
    
    GC9A01_set_chip_select(ON);
 800bd0e:	2001      	movs	r0, #1
 800bd10:	f7ff ffa4 	bl	800bc5c <GC9A01_set_chip_select>
    HAL_Delay(5);
 800bd14:	2005      	movs	r0, #5
 800bd16:	f7f5 f8ad 	bl	8000e74 <HAL_Delay>
    GC9A01_set_reset(OFF);
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	f7ff ff6a 	bl	800bbf4 <GC9A01_set_reset>
    HAL_Delay(10);
 800bd20:	200a      	movs	r0, #10
 800bd22:	f7f5 f8a7 	bl	8000e74 <HAL_Delay>
    GC9A01_set_reset(ON);
 800bd26:	2001      	movs	r0, #1
 800bd28:	f7ff ff64 	bl	800bbf4 <GC9A01_set_reset>
    HAL_Delay(120);
 800bd2c:	2078      	movs	r0, #120	@ 0x78
 800bd2e:	f7f5 f8a1 	bl	8000e74 <HAL_Delay>
    
    /* Initial Sequence */ 
    
    GC9A01_write_command(0xEF);
 800bd32:	20ef      	movs	r0, #239	@ 0xef
 800bd34:	f7ff ffac 	bl	800bc90 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 800bd38:	20eb      	movs	r0, #235	@ 0xeb
 800bd3a:	f7ff ffa9 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800bd3e:	2014      	movs	r0, #20
 800bd40:	f7ff ffd5 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xFE);
 800bd44:	20fe      	movs	r0, #254	@ 0xfe
 800bd46:	f7ff ffa3 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_command(0xEF);
 800bd4a:	20ef      	movs	r0, #239	@ 0xef
 800bd4c:	f7ff ffa0 	bl	800bc90 <GC9A01_write_command>
    
    GC9A01_write_command(0xEB);
 800bd50:	20eb      	movs	r0, #235	@ 0xeb
 800bd52:	f7ff ff9d 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x14);
 800bd56:	2014      	movs	r0, #20
 800bd58:	f7ff ffc9 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x84);
 800bd5c:	2084      	movs	r0, #132	@ 0x84
 800bd5e:	f7ff ff97 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x40);
 800bd62:	2040      	movs	r0, #64	@ 0x40
 800bd64:	f7ff ffc3 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x85);
 800bd68:	2085      	movs	r0, #133	@ 0x85
 800bd6a:	f7ff ff91 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bd6e:	20ff      	movs	r0, #255	@ 0xff
 800bd70:	f7ff ffbd 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x86);
 800bd74:	2086      	movs	r0, #134	@ 0x86
 800bd76:	f7ff ff8b 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bd7a:	20ff      	movs	r0, #255	@ 0xff
 800bd7c:	f7ff ffb7 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x87);
 800bd80:	2087      	movs	r0, #135	@ 0x87
 800bd82:	f7ff ff85 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bd86:	20ff      	movs	r0, #255	@ 0xff
 800bd88:	f7ff ffb1 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x88);
 800bd8c:	2088      	movs	r0, #136	@ 0x88
 800bd8e:	f7ff ff7f 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x0A);
 800bd92:	200a      	movs	r0, #10
 800bd94:	f7ff ffab 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x89);
 800bd98:	2089      	movs	r0, #137	@ 0x89
 800bd9a:	f7ff ff79 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800bd9e:	2021      	movs	r0, #33	@ 0x21
 800bda0:	f7ff ffa5 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8A);
 800bda4:	208a      	movs	r0, #138	@ 0x8a
 800bda6:	f7ff ff73 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bdaa:	2000      	movs	r0, #0
 800bdac:	f7ff ff9f 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8B);
 800bdb0:	208b      	movs	r0, #139	@ 0x8b
 800bdb2:	f7ff ff6d 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x80);
 800bdb6:	2080      	movs	r0, #128	@ 0x80
 800bdb8:	f7ff ff99 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8C);
 800bdbc:	208c      	movs	r0, #140	@ 0x8c
 800bdbe:	f7ff ff67 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800bdc2:	2001      	movs	r0, #1
 800bdc4:	f7ff ff93 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8D);
 800bdc8:	208d      	movs	r0, #141	@ 0x8d
 800bdca:	f7ff ff61 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x01);
 800bdce:	2001      	movs	r0, #1
 800bdd0:	f7ff ff8d 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8E);
 800bdd4:	208e      	movs	r0, #142	@ 0x8e
 800bdd6:	f7ff ff5b 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bdda:	20ff      	movs	r0, #255	@ 0xff
 800bddc:	f7ff ff87 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x8F);
 800bde0:	208f      	movs	r0, #143	@ 0x8f
 800bde2:	f7ff ff55 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0xFF);
 800bde6:	20ff      	movs	r0, #255	@ 0xff
 800bde8:	f7ff ff81 	bl	800bcee <GC9A01_write_byte>
    
    
    GC9A01_write_command(0xB6);
 800bdec:	20b6      	movs	r0, #182	@ 0xb6
 800bdee:	f7ff ff4f 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	f7ff ff7b 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	f7ff ff78 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x36);
 800bdfe:	2036      	movs	r0, #54	@ 0x36
 800be00:	f7ff ff46 	bl	800bc90 <GC9A01_write_command>
#if ORIENTATION == 0
    GC9A01_write_byte(0x18);
#elif ORIENTATION == 1
    GC9A01_write_byte(0x28);
#elif ORIENTATION == 2
    GC9A01_write_byte(0x48);
 800be04:	2048      	movs	r0, #72	@ 0x48
 800be06:	f7ff ff72 	bl	800bcee <GC9A01_write_byte>
#else
    GC9A01_write_byte(0x88);
#endif
    
    GC9A01_write_command(COLOR_MODE);
 800be0a:	203a      	movs	r0, #58	@ 0x3a
 800be0c:	f7ff ff40 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(COLOR_MODE__16_BIT);
 800be10:	2005      	movs	r0, #5
 800be12:	f7ff ff6c 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x90);
 800be16:	2090      	movs	r0, #144	@ 0x90
 800be18:	f7ff ff3a 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x08);
 800be1c:	2008      	movs	r0, #8
 800be1e:	f7ff ff66 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800be22:	2008      	movs	r0, #8
 800be24:	f7ff ff63 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800be28:	2008      	movs	r0, #8
 800be2a:	f7ff ff60 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800be2e:	2008      	movs	r0, #8
 800be30:	f7ff ff5d 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBD);
 800be34:	20bd      	movs	r0, #189	@ 0xbd
 800be36:	f7ff ff2b 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x06);
 800be3a:	2006      	movs	r0, #6
 800be3c:	f7ff ff57 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBC);
 800be40:	20bc      	movs	r0, #188	@ 0xbc
 800be42:	f7ff ff25 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800be46:	2000      	movs	r0, #0
 800be48:	f7ff ff51 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xFF);
 800be4c:	20ff      	movs	r0, #255	@ 0xff
 800be4e:	f7ff ff1f 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x60);
 800be52:	2060      	movs	r0, #96	@ 0x60
 800be54:	f7ff ff4b 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800be58:	2001      	movs	r0, #1
 800be5a:	f7ff ff48 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800be5e:	2004      	movs	r0, #4
 800be60:	f7ff ff45 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xC3);
 800be64:	20c3      	movs	r0, #195	@ 0xc3
 800be66:	f7ff ff13 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 800be6a:	2013      	movs	r0, #19
 800be6c:	f7ff ff3f 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_command(0xC4);
 800be70:	20c4      	movs	r0, #196	@ 0xc4
 800be72:	f7ff ff0d 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x13);
 800be76:	2013      	movs	r0, #19
 800be78:	f7ff ff39 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xC9);
 800be7c:	20c9      	movs	r0, #201	@ 0xc9
 800be7e:	f7ff ff07 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x22);
 800be82:	2022      	movs	r0, #34	@ 0x22
 800be84:	f7ff ff33 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xBE);
 800be88:	20be      	movs	r0, #190	@ 0xbe
 800be8a:	f7ff ff01 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x11);
 800be8e:	2011      	movs	r0, #17
 800be90:	f7ff ff2d 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xE1);
 800be94:	20e1      	movs	r0, #225	@ 0xe1
 800be96:	f7ff fefb 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800be9a:	2010      	movs	r0, #16
 800be9c:	f7ff ff27 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 800bea0:	200e      	movs	r0, #14
 800bea2:	f7ff ff24 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xDF);
 800bea6:	20df      	movs	r0, #223	@ 0xdf
 800bea8:	f7ff fef2 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x21);
 800beac:	2021      	movs	r0, #33	@ 0x21
 800beae:	f7ff ff1e 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x0c);
 800beb2:	200c      	movs	r0, #12
 800beb4:	f7ff ff1b 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x02);
 800beb8:	2002      	movs	r0, #2
 800beba:	f7ff ff18 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF0);
 800bebe:	20f0      	movs	r0, #240	@ 0xf0
 800bec0:	f7ff fee6 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 800bec4:	2045      	movs	r0, #69	@ 0x45
 800bec6:	f7ff ff12 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800beca:	2009      	movs	r0, #9
 800becc:	f7ff ff0f 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bed0:	2008      	movs	r0, #8
 800bed2:	f7ff ff0c 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bed6:	2008      	movs	r0, #8
 800bed8:	f7ff ff09 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800bedc:	2026      	movs	r0, #38	@ 0x26
 800bede:	f7ff ff06 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 800bee2:	202a      	movs	r0, #42	@ 0x2a
 800bee4:	f7ff ff03 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF1);
 800bee8:	20f1      	movs	r0, #241	@ 0xf1
 800beea:	f7ff fed1 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800beee:	2043      	movs	r0, #67	@ 0x43
 800bef0:	f7ff fefd 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bef4:	2070      	movs	r0, #112	@ 0x70
 800bef6:	f7ff fefa 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800befa:	2072      	movs	r0, #114	@ 0x72
 800befc:	f7ff fef7 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 800bf00:	2036      	movs	r0, #54	@ 0x36
 800bf02:	f7ff fef4 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800bf06:	2037      	movs	r0, #55	@ 0x37
 800bf08:	f7ff fef1 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800bf0c:	206f      	movs	r0, #111	@ 0x6f
 800bf0e:	f7ff feee 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF2);
 800bf12:	20f2      	movs	r0, #242	@ 0xf2
 800bf14:	f7ff febc 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x45);
 800bf18:	2045      	movs	r0, #69	@ 0x45
 800bf1a:	f7ff fee8 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800bf1e:	2009      	movs	r0, #9
 800bf20:	f7ff fee5 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bf24:	2008      	movs	r0, #8
 800bf26:	f7ff fee2 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bf2a:	2008      	movs	r0, #8
 800bf2c:	f7ff fedf 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x26);
 800bf30:	2026      	movs	r0, #38	@ 0x26
 800bf32:	f7ff fedc 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x2A);
 800bf36:	202a      	movs	r0, #42	@ 0x2a
 800bf38:	f7ff fed9 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xF3);
 800bf3c:	20f3      	movs	r0, #243	@ 0xf3
 800bf3e:	f7ff fea7 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x43);
 800bf42:	2043      	movs	r0, #67	@ 0x43
 800bf44:	f7ff fed3 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bf48:	2070      	movs	r0, #112	@ 0x70
 800bf4a:	f7ff fed0 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x72);
 800bf4e:	2072      	movs	r0, #114	@ 0x72
 800bf50:	f7ff fecd 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x36);
 800bf54:	2036      	movs	r0, #54	@ 0x36
 800bf56:	f7ff feca 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x37);
 800bf5a:	2037      	movs	r0, #55	@ 0x37
 800bf5c:	f7ff fec7 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x6F);
 800bf60:	206f      	movs	r0, #111	@ 0x6f
 800bf62:	f7ff fec4 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xED);
 800bf66:	20ed      	movs	r0, #237	@ 0xed
 800bf68:	f7ff fe92 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x1B);
 800bf6c:	201b      	movs	r0, #27
 800bf6e:	f7ff febe 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x0B);
 800bf72:	200b      	movs	r0, #11
 800bf74:	f7ff febb 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xAE);
 800bf78:	20ae      	movs	r0, #174	@ 0xae
 800bf7a:	f7ff fe89 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x77);
 800bf7e:	2077      	movs	r0, #119	@ 0x77
 800bf80:	f7ff feb5 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xCD);
 800bf84:	20cd      	movs	r0, #205	@ 0xcd
 800bf86:	f7ff fe83 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x63);
 800bf8a:	2063      	movs	r0, #99	@ 0x63
 800bf8c:	f7ff feaf 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x70);
 800bf90:	2070      	movs	r0, #112	@ 0x70
 800bf92:	f7ff fe7d 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x07);
 800bf96:	2007      	movs	r0, #7
 800bf98:	f7ff fea9 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800bf9c:	2007      	movs	r0, #7
 800bf9e:	f7ff fea6 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x04);
 800bfa2:	2004      	movs	r0, #4
 800bfa4:	f7ff fea3 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x0E);
 800bfa8:	200e      	movs	r0, #14
 800bfaa:	f7ff fea0 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800bfae:	200f      	movs	r0, #15
 800bfb0:	f7ff fe9d 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x09);
 800bfb4:	2009      	movs	r0, #9
 800bfb6:	f7ff fe9a 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800bfba:	2007      	movs	r0, #7
 800bfbc:	f7ff fe97 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x08);
 800bfc0:	2008      	movs	r0, #8
 800bfc2:	f7ff fe94 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x03);
 800bfc6:	2003      	movs	r0, #3
 800bfc8:	f7ff fe91 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0xE8);
 800bfcc:	20e8      	movs	r0, #232	@ 0xe8
 800bfce:	f7ff fe5f 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x34);
 800bfd2:	2034      	movs	r0, #52	@ 0x34
 800bfd4:	f7ff fe8b 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x62);
 800bfd8:	2062      	movs	r0, #98	@ 0x62
 800bfda:	f7ff fe59 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800bfde:	2018      	movs	r0, #24
 800bfe0:	f7ff fe85 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x0D);
 800bfe4:	200d      	movs	r0, #13
 800bfe6:	f7ff fe82 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800bfea:	2071      	movs	r0, #113	@ 0x71
 800bfec:	f7ff fe7f 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0xED);
 800bff0:	20ed      	movs	r0, #237	@ 0xed
 800bff2:	f7ff fe7c 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bff6:	2070      	movs	r0, #112	@ 0x70
 800bff8:	f7ff fe79 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800bffc:	2070      	movs	r0, #112	@ 0x70
 800bffe:	f7ff fe76 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 800c002:	2018      	movs	r0, #24
 800c004:	f7ff fe73 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x0F);
 800c008:	200f      	movs	r0, #15
 800c00a:	f7ff fe70 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800c00e:	2071      	movs	r0, #113	@ 0x71
 800c010:	f7ff fe6d 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0xEF);
 800c014:	20ef      	movs	r0, #239	@ 0xef
 800c016:	f7ff fe6a 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800c01a:	2070      	movs	r0, #112	@ 0x70
 800c01c:	f7ff fe67 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800c020:	2070      	movs	r0, #112	@ 0x70
 800c022:	f7ff fe64 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x63);
 800c026:	2063      	movs	r0, #99	@ 0x63
 800c028:	f7ff fe32 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x18);
 800c02c:	2018      	movs	r0, #24
 800c02e:	f7ff fe5e 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x11);
 800c032:	2011      	movs	r0, #17
 800c034:	f7ff fe5b 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800c038:	2071      	movs	r0, #113	@ 0x71
 800c03a:	f7ff fe58 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800c03e:	20f1      	movs	r0, #241	@ 0xf1
 800c040:	f7ff fe55 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800c044:	2070      	movs	r0, #112	@ 0x70
 800c046:	f7ff fe52 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800c04a:	2070      	movs	r0, #112	@ 0x70
 800c04c:	f7ff fe4f 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x18);
 800c050:	2018      	movs	r0, #24
 800c052:	f7ff fe4c 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x13);
 800c056:	2013      	movs	r0, #19
 800c058:	f7ff fe49 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x71);
 800c05c:	2071      	movs	r0, #113	@ 0x71
 800c05e:	f7ff fe46 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0xF3);
 800c062:	20f3      	movs	r0, #243	@ 0xf3
 800c064:	f7ff fe43 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800c068:	2070      	movs	r0, #112	@ 0x70
 800c06a:	f7ff fe40 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x70);
 800c06e:	2070      	movs	r0, #112	@ 0x70
 800c070:	f7ff fe3d 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x64);
 800c074:	2064      	movs	r0, #100	@ 0x64
 800c076:	f7ff fe0b 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x28);
 800c07a:	2028      	movs	r0, #40	@ 0x28
 800c07c:	f7ff fe37 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x29);
 800c080:	2029      	movs	r0, #41	@ 0x29
 800c082:	f7ff fe34 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800c086:	20f1      	movs	r0, #241	@ 0xf1
 800c088:	f7ff fe31 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800c08c:	2001      	movs	r0, #1
 800c08e:	f7ff fe2e 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0xF1);
 800c092:	20f1      	movs	r0, #241	@ 0xf1
 800c094:	f7ff fe2b 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c098:	2000      	movs	r0, #0
 800c09a:	f7ff fe28 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800c09e:	2007      	movs	r0, #7
 800c0a0:	f7ff fe25 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x66);
 800c0a4:	2066      	movs	r0, #102	@ 0x66
 800c0a6:	f7ff fdf3 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x3C);
 800c0aa:	203c      	movs	r0, #60	@ 0x3c
 800c0ac:	f7ff fe1f 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	f7ff fe1c 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0xCD);
 800c0b6:	20cd      	movs	r0, #205	@ 0xcd
 800c0b8:	f7ff fe19 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x67);
 800c0bc:	2067      	movs	r0, #103	@ 0x67
 800c0be:	f7ff fe16 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 800c0c2:	2045      	movs	r0, #69	@ 0x45
 800c0c4:	f7ff fe13 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x45);
 800c0c8:	2045      	movs	r0, #69	@ 0x45
 800c0ca:	f7ff fe10 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800c0ce:	2010      	movs	r0, #16
 800c0d0:	f7ff fe0d 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	f7ff fe0a 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c0da:	2000      	movs	r0, #0
 800c0dc:	f7ff fe07 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	f7ff fe04 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x67);
 800c0e6:	2067      	movs	r0, #103	@ 0x67
 800c0e8:	f7ff fdd2 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x00);
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	f7ff fdfe 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x3C);
 800c0f2:	203c      	movs	r0, #60	@ 0x3c
 800c0f4:	f7ff fdfb 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	f7ff fdf8 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c0fe:	2000      	movs	r0, #0
 800c100:	f7ff fdf5 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c104:	2000      	movs	r0, #0
 800c106:	f7ff fdf2 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x01);
 800c10a:	2001      	movs	r0, #1
 800c10c:	f7ff fdef 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x54);
 800c110:	2054      	movs	r0, #84	@ 0x54
 800c112:	f7ff fdec 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x10);
 800c116:	2010      	movs	r0, #16
 800c118:	f7ff fde9 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x32);
 800c11c:	2032      	movs	r0, #50	@ 0x32
 800c11e:	f7ff fde6 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x98);
 800c122:	2098      	movs	r0, #152	@ 0x98
 800c124:	f7ff fde3 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x74);
 800c128:	2074      	movs	r0, #116	@ 0x74
 800c12a:	f7ff fdb1 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x10);
 800c12e:	2010      	movs	r0, #16
 800c130:	f7ff fddd 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x85);
 800c134:	2085      	movs	r0, #133	@ 0x85
 800c136:	f7ff fdda 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x80);
 800c13a:	2080      	movs	r0, #128	@ 0x80
 800c13c:	f7ff fdd7 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c140:	2000      	movs	r0, #0
 800c142:	f7ff fdd4 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c146:	2000      	movs	r0, #0
 800c148:	f7ff fdd1 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x4E);
 800c14c:	204e      	movs	r0, #78	@ 0x4e
 800c14e:	f7ff fdce 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x00);
 800c152:	2000      	movs	r0, #0
 800c154:	f7ff fdcb 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x98);
 800c158:	2098      	movs	r0, #152	@ 0x98
 800c15a:	f7ff fd99 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_byte(0x3e);
 800c15e:	203e      	movs	r0, #62	@ 0x3e
 800c160:	f7ff fdc5 	bl	800bcee <GC9A01_write_byte>
    GC9A01_write_byte(0x07);
 800c164:	2007      	movs	r0, #7
 800c166:	f7ff fdc2 	bl	800bcee <GC9A01_write_byte>
    
    GC9A01_write_command(0x35);
 800c16a:	2035      	movs	r0, #53	@ 0x35
 800c16c:	f7ff fd90 	bl	800bc90 <GC9A01_write_command>
    GC9A01_write_command(0x21);
 800c170:	2021      	movs	r0, #33	@ 0x21
 800c172:	f7ff fd8d 	bl	800bc90 <GC9A01_write_command>
    
    GC9A01_write_command(0x11);
 800c176:	2011      	movs	r0, #17
 800c178:	f7ff fd8a 	bl	800bc90 <GC9A01_write_command>
    HAL_Delay(120);
 800c17c:	2078      	movs	r0, #120	@ 0x78
 800c17e:	f7f4 fe79 	bl	8000e74 <HAL_Delay>
    GC9A01_write_command(0x29);
 800c182:	2029      	movs	r0, #41	@ 0x29
 800c184:	f7ff fd84 	bl	800bc90 <GC9A01_write_command>
    HAL_Delay(20);
 800c188:	2014      	movs	r0, #20
 800c18a:	f7f4 fe73 	bl	8000e74 <HAL_Delay>
    
}
 800c18e:	bf00      	nop
 800c190:	bd80      	pop	{r7, pc}

0800c192 <GC9A01_set_frame>:

void GC9A01_set_frame(struct GC9A01_frame frame) {
 800c192:	b580      	push	{r7, lr}
 800c194:	b084      	sub	sp, #16
 800c196:	af00      	add	r7, sp, #0
 800c198:	463b      	mov	r3, r7
 800c19a:	e883 0003 	stmia.w	r3, {r0, r1}

    uint8_t data[4];
    
    GC9A01_write_command(COL_ADDR_SET);
 800c19e:	202a      	movs	r0, #42	@ 0x2a
 800c1a0:	f7ff fd76 	bl	800bc90 <GC9A01_write_command>
    data[0] = (frame.start.X >> 8) & 0xFF;
 800c1a4:	883b      	ldrh	r3, [r7, #0]
 800c1a6:	0a1b      	lsrs	r3, r3, #8
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.X & 0xFF;
 800c1ae:	883b      	ldrh	r3, [r7, #0]
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.X >> 8) & 0xFF;
 800c1b4:	88bb      	ldrh	r3, [r7, #4]
 800c1b6:	0a1b      	lsrs	r3, r3, #8
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.X & 0xFF;
 800c1be:	88bb      	ldrh	r3, [r7, #4]
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 800c1c4:	f107 030c 	add.w	r3, r7, #12
 800c1c8:	2104      	movs	r1, #4
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7ff fd77 	bl	800bcbe <GC9A01_write_data>

    GC9A01_write_command(ROW_ADDR_SET);
 800c1d0:	202b      	movs	r0, #43	@ 0x2b
 800c1d2:	f7ff fd5d 	bl	800bc90 <GC9A01_write_command>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 800c1d6:	887b      	ldrh	r3, [r7, #2]
 800c1d8:	0a1b      	lsrs	r3, r3, #8
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	733b      	strb	r3, [r7, #12]
    data[1] = frame.start.Y & 0xFF;
 800c1e0:	887b      	ldrh	r3, [r7, #2]
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	737b      	strb	r3, [r7, #13]
    data[2] = (frame.end.Y >> 8) & 0xFF;
 800c1e6:	88fb      	ldrh	r3, [r7, #6]
 800c1e8:	0a1b      	lsrs	r3, r3, #8
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	73bb      	strb	r3, [r7, #14]
    data[3] = frame.end.Y & 0xFF;
 800c1f0:	88fb      	ldrh	r3, [r7, #6]
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	73fb      	strb	r3, [r7, #15]
    GC9A01_write_data(data, sizeof(data));
 800c1f6:	f107 030c 	add.w	r3, r7, #12
 800c1fa:	2104      	movs	r1, #4
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7ff fd5e 	bl	800bcbe <GC9A01_write_data>
    
}
 800c202:	bf00      	nop
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
	...

0800c20c <GC9A01_spi_tx>:

//////////////////////////////////////////////// PRIVATE FUNCTIONS

HAL_StatusTypeDef ret;
void GC9A01_spi_tx(uint8_t *data, uint16_t size)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	460b      	mov	r3, r1
 800c216:	807b      	strh	r3, [r7, #2]


	ret = HAL_SPI_Transmit(&hspi5, data, size, HAL_MAX_DELAY);
 800c218:	887a      	ldrh	r2, [r7, #2]
 800c21a:	f04f 33ff 	mov.w	r3, #4294967295
 800c21e:	6879      	ldr	r1, [r7, #4]
 800c220:	4806      	ldr	r0, [pc, #24]	@ (800c23c <GC9A01_spi_tx+0x30>)
 800c222:	f7fd fb61 	bl	80098e8 <HAL_SPI_Transmit>
 800c226:	4603      	mov	r3, r0
 800c228:	461a      	mov	r2, r3
 800c22a:	4b05      	ldr	r3, [pc, #20]	@ (800c240 <GC9A01_spi_tx+0x34>)
 800c22c:	701a      	strb	r2, [r3, #0]

	if(ret != HAL_OK)
 800c22e:	4b04      	ldr	r3, [pc, #16]	@ (800c240 <GC9A01_spi_tx+0x34>)
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
		return;

}
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	20000310 	.word	0x20000310
 800c240:	200001d8 	.word	0x200001d8

0800c244 <JPEG_Decode_DMA>:
  * @param  FrameSourceAddress    : video buffer address.
  * @param  DestAddress : YCbCr destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint32_t FrameSourceAddress ,uint32_t FrameSize, uint32_t DestAddress)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b086      	sub	sp, #24
 800c248:	af02      	add	r7, sp, #8
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
 800c250:	603b      	str	r3, [r7, #0]
  JPEGSourceAddress =  FrameSourceAddress ;
 800c252:	4a11      	ldr	r2, [pc, #68]	@ (800c298 <JPEG_Decode_DMA+0x54>)
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	6013      	str	r3, [r2, #0]
  FrameBufferAddress = DestAddress;
 800c258:	4a10      	ldr	r2, [pc, #64]	@ (800c29c <JPEG_Decode_DMA+0x58>)
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	6013      	str	r3, [r2, #0]
  Input_frameIndex=0;
 800c25e:	4b10      	ldr	r3, [pc, #64]	@ (800c2a0 <JPEG_Decode_DMA+0x5c>)
 800c260:	2200      	movs	r2, #0
 800c262:	601a      	str	r2, [r3, #0]
  Input_frameSize = FrameSize;
 800c264:	4a0f      	ldr	r2, [pc, #60]	@ (800c2a4 <JPEG_Decode_DMA+0x60>)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6013      	str	r3, [r2, #0]
  
  Jpeg_HWDecodingEnd = 0;
 800c26a:	4b0f      	ldr	r3, [pc, #60]	@ (800c2a8 <JPEG_Decode_DMA+0x64>)
 800c26c:	2200      	movs	r2, #0
 800c26e:	601a      	str	r2, [r3, #0]
  
  /* Start JPEG decoding with DMA method */
  HAL_JPEG_Decode_DMA(hjpeg ,(uint8_t *)JPEGSourceAddress ,CHUNK_SIZE_IN ,(uint8_t *)FrameBufferAddress ,CHUNK_SIZE_OUT);
 800c270:	4b09      	ldr	r3, [pc, #36]	@ (800c298 <JPEG_Decode_DMA+0x54>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4619      	mov	r1, r3
 800c276:	4b09      	ldr	r3, [pc, #36]	@ (800c29c <JPEG_Decode_DMA+0x58>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	461a      	mov	r2, r3
 800c27c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	4613      	mov	r3, r2
 800c284:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f7f5 fd9a 	bl	8001dc2 <HAL_JPEG_Decode_DMA>
  
  
  return 0;
 800c28e:	2300      	movs	r3, #0
  
}
 800c290:	4618      	mov	r0, r3
 800c292:	3710      	adds	r7, #16
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	200001e4 	.word	0x200001e4
 800c29c:	200001e0 	.word	0x200001e0
 800c2a0:	200001ec 	.word	0x200001ec
 800c2a4:	200001e8 	.word	0x200001e8
 800c2a8:	200001dc 	.word	0x200001dc

0800c2ac <HAL_JPEG_InfoReadyCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param pInfo: JPEG Info Struct pointer
  * @retval None
  */
void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{  
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
}
 800c2b6:	bf00      	nop
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
	...

0800c2c4 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consumed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  uint32_t inDataLength; 
  Input_frameIndex += NbDecodedData;
 800c2ce:	4b19      	ldr	r3, [pc, #100]	@ (800c334 <HAL_JPEG_GetDataCallback+0x70>)
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	4a17      	ldr	r2, [pc, #92]	@ (800c334 <HAL_JPEG_GetDataCallback+0x70>)
 800c2d8:	6013      	str	r3, [r2, #0]
  if( Input_frameIndex < Input_frameSize)
 800c2da:	4b16      	ldr	r3, [pc, #88]	@ (800c334 <HAL_JPEG_GetDataCallback+0x70>)
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	4b16      	ldr	r3, [pc, #88]	@ (800c338 <HAL_JPEG_GetDataCallback+0x74>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d218      	bcs.n	800c318 <HAL_JPEG_GetDataCallback+0x54>
  {
   JPEGSourceAddress = JPEGSourceAddress + NbDecodedData;
 800c2e6:	4b15      	ldr	r3, [pc, #84]	@ (800c33c <HAL_JPEG_GetDataCallback+0x78>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	4a13      	ldr	r2, [pc, #76]	@ (800c33c <HAL_JPEG_GetDataCallback+0x78>)
 800c2f0:	6013      	str	r3, [r2, #0]
    
    if((Input_frameSize - Input_frameIndex) >= CHUNK_SIZE_IN)
 800c2f2:	4b11      	ldr	r3, [pc, #68]	@ (800c338 <HAL_JPEG_GetDataCallback+0x74>)
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	4b0f      	ldr	r3, [pc, #60]	@ (800c334 <HAL_JPEG_GetDataCallback+0x70>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c300:	d303      	bcc.n	800c30a <HAL_JPEG_GetDataCallback+0x46>
    {
      inDataLength = CHUNK_SIZE_IN;
 800c302:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c306:	60fb      	str	r3, [r7, #12]
 800c308:	e008      	b.n	800c31c <HAL_JPEG_GetDataCallback+0x58>
    }
    else
    {
      inDataLength = Input_frameSize - Input_frameIndex;
 800c30a:	4b0b      	ldr	r3, [pc, #44]	@ (800c338 <HAL_JPEG_GetDataCallback+0x74>)
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	4b09      	ldr	r3, [pc, #36]	@ (800c334 <HAL_JPEG_GetDataCallback+0x70>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	1ad3      	subs	r3, r2, r3
 800c314:	60fb      	str	r3, [r7, #12]
 800c316:	e001      	b.n	800c31c <HAL_JPEG_GetDataCallback+0x58>
    }    
  }
  else
  {
    inDataLength = 0; 
 800c318:	2300      	movs	r3, #0
 800c31a:	60fb      	str	r3, [r7, #12]
  }
  HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEGSourceAddress, inDataLength);    
 800c31c:	4b07      	ldr	r3, [pc, #28]	@ (800c33c <HAL_JPEG_GetDataCallback+0x78>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	4619      	mov	r1, r3
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f7f5 fe07 	bl	8001f38 <HAL_JPEG_ConfigInputBuffer>
  
}
 800c32a:	bf00      	nop
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	200001ec 	.word	0x200001ec
 800c338:	200001e8 	.word	0x200001e8
 800c33c:	200001e4 	.word	0x200001e4

0800c340 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
  /* Update JPEG encoder output buffer address*/  
  FrameBufferAddress += OutDataLength;
 800c34c:	4b08      	ldr	r3, [pc, #32]	@ (800c370 <HAL_JPEG_DataReadyCallback+0x30>)
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	4413      	add	r3, r2
 800c354:	4a06      	ldr	r2, [pc, #24]	@ (800c370 <HAL_JPEG_DataReadyCallback+0x30>)
 800c356:	6013      	str	r3, [r2, #0]

  HAL_JPEG_ConfigOutputBuffer(hjpeg, (uint8_t *)FrameBufferAddress, CHUNK_SIZE_OUT); 
 800c358:	4b05      	ldr	r3, [pc, #20]	@ (800c370 <HAL_JPEG_DataReadyCallback+0x30>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c360:	4619      	mov	r1, r3
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f7f5 fdfa 	bl	8001f5c <HAL_JPEG_ConfigOutputBuffer>
}
 800c368:	bf00      	nop
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	200001e0 	.word	0x200001e0

0800c374 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  Error_Handler();
 800c37c:	f000 f838 	bl	800c3f0 <Error_Handler>
}
 800c380:	bf00      	nop
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{    
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1; 
 800c390:	4b04      	ldr	r3, [pc, #16]	@ (800c3a4 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 800c392:	2201      	movs	r2, #1
 800c394:	601a      	str	r2, [r3, #0]
}
 800c396:	bf00      	nop
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	200001dc 	.word	0x200001dc

0800c3a8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	af00      	add	r7, sp, #0

  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
 800c3ac:	f000 f8ba 	bl	800c524 <MPU_Config>
   
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 800c3b0:	f000 f8fa 	bl	800c5a8 <CPU_CACHE_Enable>
  
  HAL_Init();
 800c3b4:	f7f4 fccc 	bl	8000d50 <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 800c3b8:	f000 f81e 	bl	800c3f8 <SystemClock_Config>
  
  MX_GPIO_Init();
 800c3bc:	f000 f9b6 	bl	800c72c <MX_GPIO_Init>
  MX_SPI5_Init();
 800c3c0:	f000 f960 	bl	800c684 <MX_SPI5_Init>

  MX_TIM3_Init();
 800c3c4:	f000 fa68 	bl	800c898 <MX_TIM3_Init>
  GC9A01_init();
 800c3c8:	f7ff fc9f 	bl	800bd0a <GC9A01_init>
 
 /*Initialize The SDRAM */  
  BSP_SDRAM_Init(0);
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	f7f4 fa8f 	bl	80008f0 <BSP_SDRAM_Init>
  //BSP_LCD_GetXSize(0 ,&LCD_X_Size);
  //BSP_LCD_GetYSize(0 ,&LCD_Y_Size);
  
  /*##-2- Initialize the HW JPEG Codec  ######################################*/
  /* Init the HAL JPEG driver */
  JPEG_Handle.Instance = JPEG;
 800c3d2:	4b05      	ldr	r3, [pc, #20]	@ (800c3e8 <main+0x40>)
 800c3d4:	4a05      	ldr	r2, [pc, #20]	@ (800c3ec <main+0x44>)
 800c3d6:	601a      	str	r2, [r3, #0]
  HAL_JPEG_Init(&JPEG_Handle);    
 800c3d8:	4803      	ldr	r0, [pc, #12]	@ (800c3e8 <main+0x40>)
 800c3da:	f7f5 fbdb 	bl	8001b94 <HAL_JPEG_Init>

  smart_watch_process();
 800c3de:	f000 fb83 	bl	800cae8 <smart_watch_process>

  /* Infinite loop */
  while (1);
 800c3e2:	bf00      	nop
 800c3e4:	e7fd      	b.n	800c3e2 <main+0x3a>
 800c3e6:	bf00      	nop
 800c3e8:	200001f0 	.word	0x200001f0
 800c3ec:	52003000 	.word	0x52003000

0800c3f0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	af00      	add	r7, sp, #0

  /* Turn LED3 on */
  while(1);
 800c3f4:	bf00      	nop
 800c3f6:	e7fd      	b.n	800c3f4 <Error_Handler+0x4>

0800c3f8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b09e      	sub	sp, #120	@ 0x78
 800c3fc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800c404:	2004      	movs	r0, #4
 800c406:	f7f7 fdf9 	bl	8003ffc <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800c40a:	2300      	movs	r3, #0
 800c40c:	607b      	str	r3, [r7, #4]
 800c40e:	4b42      	ldr	r3, [pc, #264]	@ (800c518 <SystemClock_Config+0x120>)
 800c410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c412:	4a41      	ldr	r2, [pc, #260]	@ (800c518 <SystemClock_Config+0x120>)
 800c414:	f023 0301 	bic.w	r3, r3, #1
 800c418:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c41a:	4b3f      	ldr	r3, [pc, #252]	@ (800c518 <SystemClock_Config+0x120>)
 800c41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c41e:	f003 0301 	and.w	r3, r3, #1
 800c422:	607b      	str	r3, [r7, #4]
 800c424:	4b3d      	ldr	r3, [pc, #244]	@ (800c51c <SystemClock_Config+0x124>)
 800c426:	699b      	ldr	r3, [r3, #24]
 800c428:	4a3c      	ldr	r2, [pc, #240]	@ (800c51c <SystemClock_Config+0x124>)
 800c42a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c42e:	6193      	str	r3, [r2, #24]
 800c430:	4b3a      	ldr	r3, [pc, #232]	@ (800c51c <SystemClock_Config+0x124>)
 800c432:	699b      	ldr	r3, [r3, #24]
 800c434:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c438:	607b      	str	r3, [r7, #4]
 800c43a:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800c43c:	bf00      	nop
 800c43e:	4b37      	ldr	r3, [pc, #220]	@ (800c51c <SystemClock_Config+0x124>)
 800c440:	699b      	ldr	r3, [r3, #24]
 800c442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c44a:	d1f8      	bne.n	800c43e <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800c44c:	2301      	movs	r3, #1
 800c44e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800c450:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800c454:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800c456:	2300      	movs	r3, #0
 800c458:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800c45a:	2300      	movs	r3, #0
 800c45c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800c45e:	2302      	movs	r3, #2
 800c460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800c462:	2302      	movs	r3, #2
 800c464:	633b      	str	r3, [r7, #48]	@ 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800c466:	2305      	movs	r3, #5
 800c468:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 70;
 800c46a:	2346      	movs	r3, #70	@ 0x46
 800c46c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800c46e:	2300      	movs	r3, #0
 800c470:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800c472:	2302      	movs	r3, #2
 800c474:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800c476:	2302      	movs	r3, #2
 800c478:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800c47a:	2304      	movs	r3, #4
 800c47c:	643b      	str	r3, [r7, #64]	@ 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800c47e:	2300      	movs	r3, #0
 800c480:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800c482:	2308      	movs	r3, #8
 800c484:	64bb      	str	r3, [r7, #72]	@ 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800c486:	f107 0308 	add.w	r3, r7, #8
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7f7 fe10 	bl	80040b0 <HAL_RCC_OscConfig>
 800c490:	4603      	mov	r3, r0
 800c492:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 800c496:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d001      	beq.n	800c4a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800c49e:	f7ff ffa7 	bl	800c3f0 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800c4a2:	233f      	movs	r3, #63	@ 0x3f
 800c4a4:	657b      	str	r3, [r7, #84]	@ 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800c4a6:	2303      	movs	r3, #3
 800c4a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800c4ae:	2308      	movs	r3, #8
 800c4b0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800c4b2:	2340      	movs	r3, #64	@ 0x40
 800c4b4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800c4b6:	2340      	movs	r3, #64	@ 0x40
 800c4b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800c4ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800c4c0:	2340      	movs	r3, #64	@ 0x40
 800c4c2:	673b      	str	r3, [r7, #112]	@ 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800c4c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c4c8:	2104      	movs	r1, #4
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7f8 fa4a 	bl	8004964 <HAL_RCC_ClockConfig>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if(ret != HAL_OK)
 800c4d6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800c4de:	f7ff ff87 	bl	800c3f0 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */
 
  /*activate CSI clock mondatory for I/O Compensation Cell*/  
  __HAL_RCC_CSI_ENABLE() ;
 800c4e2:	4b0f      	ldr	r3, [pc, #60]	@ (800c520 <SystemClock_Config+0x128>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a0e      	ldr	r2, [pc, #56]	@ (800c520 <SystemClock_Config+0x128>)
 800c4e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4ec:	6013      	str	r3, [r2, #0]
    
  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800c4ee:	4b0c      	ldr	r3, [pc, #48]	@ (800c520 <SystemClock_Config+0x128>)
 800c4f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c4f4:	4a0a      	ldr	r2, [pc, #40]	@ (800c520 <SystemClock_Config+0x128>)
 800c4f6:	f043 0302 	orr.w	r3, r3, #2
 800c4fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800c4fe:	4b08      	ldr	r3, [pc, #32]	@ (800c520 <SystemClock_Config+0x128>)
 800c500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800c504:	f003 0302 	and.w	r3, r3, #2
 800c508:	603b      	str	r3, [r7, #0]
 800c50a:	683b      	ldr	r3, [r7, #0]
  
  /* Enables the I/O Compensation Cell */    
  HAL_EnableCompensationCell();  
 800c50c:	f7f4 fce2 	bl	8000ed4 <HAL_EnableCompensationCell>

  //uint32_t sisclk = HAL_RCC_GetSysClockFreq();
  //HAL_Delay(1);

}
 800c510:	bf00      	nop
 800c512:	3778      	adds	r7, #120	@ 0x78
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	58000400 	.word	0x58000400
 800c51c:	58024800 	.word	0x58024800
 800c520:	58024400 	.word	0x58024400

0800c524 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;
  
  /* Disable the MPU */
  HAL_MPU_Disable();
 800c52a:	f7f4 fdf3 	bl	8001114 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800c52e:	2301      	movs	r3, #1
 800c530:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 800c532:	2300      	movs	r3, #0
 800c534:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800c536:	231f      	movs	r3, #31
 800c538:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800c53a:	2300      	movs	r3, #0
 800c53c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800c53e:	2300      	movs	r3, #0
 800c540:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800c542:	2300      	movs	r3, #0
 800c544:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800c546:	2301      	movs	r3, #1
 800c548:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800c54e:	2300      	movs	r3, #0
 800c550:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800c552:	2387      	movs	r3, #135	@ 0x87
 800c554:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800c556:	2301      	movs	r3, #1
 800c558:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800c55a:	463b      	mov	r3, r7
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7f4 fe11 	bl	8001184 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800c562:	2301      	movs	r3, #1
 800c564:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 800c566:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800c56a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800c56c:	2318      	movs	r3, #24
 800c56e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800c570:	2303      	movs	r3, #3
 800c572:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800c574:	2300      	movs	r3, #0
 800c576:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800c578:	2301      	movs	r3, #1
 800c57a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800c57c:	2300      	movs	r3, #0
 800c57e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800c580:	2301      	movs	r3, #1
 800c582:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800c584:	2300      	movs	r3, #0
 800c586:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800c588:	2300      	movs	r3, #0
 800c58a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800c58c:	2300      	movs	r3, #0
 800c58e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800c590:	463b      	mov	r3, r7
 800c592:	4618      	mov	r0, r3
 800c594:	f7f4 fdf6 	bl	8001184 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800c598:	2004      	movs	r0, #4
 800c59a:	f7f4 fdd3 	bl	8001144 <HAL_MPU_Enable>
}
 800c59e:	bf00      	nop
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
	...

0800c5a8 <CPU_CACHE_Enable>:
* @brief  CPU L1-Cache enable.
* @param  None
* @retval None
*/
static void CPU_CACHE_Enable(void)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800c5ae:	4b34      	ldr	r3, [pc, #208]	@ (800c680 <CPU_CACHE_Enable+0xd8>)
 800c5b0:	695b      	ldr	r3, [r3, #20]
 800c5b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d11b      	bne.n	800c5f2 <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800c5ba:	f3bf 8f4f 	dsb	sy
}
 800c5be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c5c0:	f3bf 8f6f 	isb	sy
}
 800c5c4:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800c5c6:	4b2e      	ldr	r3, [pc, #184]	@ (800c680 <CPU_CACHE_Enable+0xd8>)
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800c5ce:	f3bf 8f4f 	dsb	sy
}
 800c5d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c5d4:	f3bf 8f6f 	isb	sy
}
 800c5d8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800c5da:	4b29      	ldr	r3, [pc, #164]	@ (800c680 <CPU_CACHE_Enable+0xd8>)
 800c5dc:	695b      	ldr	r3, [r3, #20]
 800c5de:	4a28      	ldr	r2, [pc, #160]	@ (800c680 <CPU_CACHE_Enable+0xd8>)
 800c5e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c5e4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c5e6:	f3bf 8f4f 	dsb	sy
}
 800c5ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c5ec:	f3bf 8f6f 	isb	sy
}
 800c5f0:	e000      	b.n	800c5f4 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800c5f2:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800c5f4:	4b22      	ldr	r3, [pc, #136]	@ (800c680 <CPU_CACHE_Enable+0xd8>)
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d138      	bne.n	800c672 <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800c600:	4b1f      	ldr	r3, [pc, #124]	@ (800c680 <CPU_CACHE_Enable+0xd8>)
 800c602:	2200      	movs	r2, #0
 800c604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800c608:	f3bf 8f4f 	dsb	sy
}
 800c60c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800c60e:	4b1c      	ldr	r3, [pc, #112]	@ (800c680 <CPU_CACHE_Enable+0xd8>)
 800c610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c614:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	0b5b      	lsrs	r3, r3, #13
 800c61a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c61e:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	08db      	lsrs	r3, r3, #3
 800c624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c628:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	015a      	lsls	r2, r3, #5
 800c62e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800c632:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800c638:	4911      	ldr	r1, [pc, #68]	@ (800c680 <CPU_CACHE_Enable+0xd8>)
 800c63a:	4313      	orrs	r3, r2
 800c63c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	1e5a      	subs	r2, r3, #1
 800c644:	607a      	str	r2, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1ef      	bne.n	800c62a <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	1e5a      	subs	r2, r3, #1
 800c64e:	60ba      	str	r2, [r7, #8]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d1e5      	bne.n	800c620 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800c654:	f3bf 8f4f 	dsb	sy
}
 800c658:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800c65a:	4b09      	ldr	r3, [pc, #36]	@ (800c680 <CPU_CACHE_Enable+0xd8>)
 800c65c:	695b      	ldr	r3, [r3, #20]
 800c65e:	4a08      	ldr	r2, [pc, #32]	@ (800c680 <CPU_CACHE_Enable+0xd8>)
 800c660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c664:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800c666:	f3bf 8f4f 	dsb	sy
}
 800c66a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c66c:	f3bf 8f6f 	isb	sy
}
 800c670:	e000      	b.n	800c674 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800c672:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800c674:	bf00      	nop
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr
 800c680:	e000ed00 	.word	0xe000ed00

0800c684 <MX_SPI5_Init>:

static void MX_SPI5_Init(void)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800c688:	4b26      	ldr	r3, [pc, #152]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c68a:	4a27      	ldr	r2, [pc, #156]	@ (800c728 <MX_SPI5_Init+0xa4>)
 800c68c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800c68e:	4b25      	ldr	r3, [pc, #148]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c690:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800c694:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800c696:	4b23      	ldr	r3, [pc, #140]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c698:	2200      	movs	r2, #0
 800c69a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800c69c:	4b21      	ldr	r3, [pc, #132]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c69e:	2207      	movs	r2, #7
 800c6a0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c6a2:	4b20      	ldr	r3, [pc, #128]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c6a8:	4b1e      	ldr	r3, [pc, #120]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800c6ae:	4b1d      	ldr	r3, [pc, #116]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800c6b4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c6b6:	4b1b      	ldr	r3, [pc, #108]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c6bc:	4b19      	ldr	r3, [pc, #100]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800c6c2:	4b18      	ldr	r3, [pc, #96]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c6c8:	4b16      	ldr	r3, [pc, #88]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 800c6ce:	4b15      	ldr	r3, [pc, #84]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800c6d4:	4b13      	ldr	r3, [pc, #76]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800c6da:	4b12      	ldr	r3, [pc, #72]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800c6e0:	4b10      	ldr	r3, [pc, #64]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c6e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800c6ec:	4b0d      	ldr	r3, [pc, #52]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800c6f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800c6f8:	4b0a      	ldr	r3, [pc, #40]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800c6fe:	4b09      	ldr	r3, [pc, #36]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c700:	2200      	movs	r2, #0
 800c702:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800c704:	4b07      	ldr	r3, [pc, #28]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c706:	2200      	movs	r2, #0
 800c708:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800c70a:	4b06      	ldr	r3, [pc, #24]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c70c:	2200      	movs	r2, #0
 800c70e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800c710:	4804      	ldr	r0, [pc, #16]	@ (800c724 <MX_SPI5_Init+0xa0>)
 800c712:	f7fc ffc5 	bl	80096a0 <HAL_SPI_Init>
 800c716:	4603      	mov	r3, r0
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d001      	beq.n	800c720 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 800c71c:	f7ff fe68 	bl	800c3f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800c720:	bf00      	nop
 800c722:	bd80      	pop	{r7, pc}
 800c724:	20000310 	.word	0x20000310
 800c728:	40015000 	.word	0x40015000

0800c72c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b08c      	sub	sp, #48	@ 0x30
 800c730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c732:	f107 031c 	add.w	r3, r7, #28
 800c736:	2200      	movs	r2, #0
 800c738:	601a      	str	r2, [r3, #0]
 800c73a:	605a      	str	r2, [r3, #4]
 800c73c:	609a      	str	r2, [r3, #8]
 800c73e:	60da      	str	r2, [r3, #12]
 800c740:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c742:	4b51      	ldr	r3, [pc, #324]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c748:	4a4f      	ldr	r2, [pc, #316]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c74a:	f043 0304 	orr.w	r3, r3, #4
 800c74e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c752:	4b4d      	ldr	r3, [pc, #308]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c758:	f003 0304 	and.w	r3, r3, #4
 800c75c:	61bb      	str	r3, [r7, #24]
 800c75e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c760:	4b49      	ldr	r3, [pc, #292]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c766:	4a48      	ldr	r2, [pc, #288]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c768:	f043 0308 	orr.w	r3, r3, #8
 800c76c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c770:	4b45      	ldr	r3, [pc, #276]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c776:	f003 0308 	and.w	r3, r3, #8
 800c77a:	617b      	str	r3, [r7, #20]
 800c77c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c77e:	4b42      	ldr	r3, [pc, #264]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c784:	4a40      	ldr	r2, [pc, #256]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c786:	f043 0301 	orr.w	r3, r3, #1
 800c78a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c78e:	4b3e      	ldr	r3, [pc, #248]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c794:	f003 0301 	and.w	r3, r3, #1
 800c798:	613b      	str	r3, [r7, #16]
 800c79a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800c79c:	4b3a      	ldr	r3, [pc, #232]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c79e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7a2:	4a39      	ldr	r2, [pc, #228]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c7a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c7a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c7ac:	4b36      	ldr	r3, [pc, #216]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c7ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7b6:	60fb      	str	r3, [r7, #12]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c7ba:	4b33      	ldr	r3, [pc, #204]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c7bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7c0:	4a31      	ldr	r2, [pc, #196]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c7c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c7ca:	4b2f      	ldr	r3, [pc, #188]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c7cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7d4:	60bb      	str	r3, [r7, #8]
 800c7d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800c7d8:	4b2b      	ldr	r3, [pc, #172]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c7da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7de:	4a2a      	ldr	r2, [pc, #168]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c7e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c7e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c7e8:	4b27      	ldr	r3, [pc, #156]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c7ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c7f2:	607b      	str	r3, [r7, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c7f6:	4b24      	ldr	r3, [pc, #144]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c7f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c7fc:	4a22      	ldr	r2, [pc, #136]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c7fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c802:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800c806:	4b20      	ldr	r3, [pc, #128]	@ (800c888 <MX_GPIO_Init+0x15c>)
 800c808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c80c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c810:	603b      	str	r3, [r7, #0]
 800c812:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GC9A01_CS_GPIO_Port, GC9A01_CS_Pin, GPIO_PIN_RESET);
 800c814:	2200      	movs	r2, #0
 800c816:	2102      	movs	r1, #2
 800c818:	481c      	ldr	r0, [pc, #112]	@ (800c88c <MX_GPIO_Init+0x160>)
 800c81a:	f7f5 f987 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin, GPIO_PIN_RESET);
 800c81e:	2200      	movs	r2, #0
 800c820:	2161      	movs	r1, #97	@ 0x61
 800c822:	481b      	ldr	r0, [pc, #108]	@ (800c890 <MX_GPIO_Init+0x164>)
 800c824:	f7f5 f982 	bl	8001b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GC9A01_CS_Pin */
  GPIO_InitStruct.Pin = GC9A01_CS_Pin;
 800c828:	2302      	movs	r3, #2
 800c82a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c82c:	2301      	movs	r3, #1
 800c82e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c830:	2300      	movs	r3, #0
 800c832:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c834:	2300      	movs	r3, #0
 800c836:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GC9A01_CS_GPIO_Port, &GPIO_InitStruct);
 800c838:	f107 031c 	add.w	r3, r7, #28
 800c83c:	4619      	mov	r1, r3
 800c83e:	4813      	ldr	r0, [pc, #76]	@ (800c88c <MX_GPIO_Init+0x160>)
 800c840:	f7f4 ffac 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pins : GC9A01_BL_Pin GC9A01_DC_Pin GC9A01_RST_Pin */
  GPIO_InitStruct.Pin = GC9A01_BL_Pin|GC9A01_DC_Pin|GC9A01_RST_Pin;
 800c844:	2361      	movs	r3, #97	@ 0x61
 800c846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c848:	2301      	movs	r3, #1
 800c84a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c84c:	2300      	movs	r3, #0
 800c84e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c850:	2300      	movs	r3, #0
 800c852:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800c854:	f107 031c 	add.w	r3, r7, #28
 800c858:	4619      	mov	r1, r3
 800c85a:	480d      	ldr	r0, [pc, #52]	@ (800c890 <MX_GPIO_Init+0x164>)
 800c85c:	f7f4 ff9e 	bl	800179c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin =  GPIO_PIN_12;
 800c860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c866:	2301      	movs	r3, #1
 800c868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c86a:	2300      	movs	r3, #0
 800c86c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c86e:	2300      	movs	r3, #0
 800c870:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c872:	f107 031c 	add.w	r3, r7, #28
 800c876:	4619      	mov	r1, r3
 800c878:	4806      	ldr	r0, [pc, #24]	@ (800c894 <MX_GPIO_Init+0x168>)
 800c87a:	f7f4 ff8f 	bl	800179c <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800c87e:	bf00      	nop
 800c880:	3730      	adds	r7, #48	@ 0x30
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	58024400 	.word	0x58024400
 800c88c:	58022800 	.word	0x58022800
 800c890:	58022400 	.word	0x58022400
 800c894:	58020c00 	.word	0x58020c00

0800c898 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b088      	sub	sp, #32
 800c89c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c89e:	f107 0310 	add.w	r3, r7, #16
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]
 800c8a6:	605a      	str	r2, [r3, #4]
 800c8a8:	609a      	str	r2, [r3, #8]
 800c8aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c8ac:	1d3b      	adds	r3, r7, #4
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	601a      	str	r2, [r3, #0]
 800c8b2:	605a      	str	r2, [r3, #4]
 800c8b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800c8b6:	4b1e      	ldr	r3, [pc, #120]	@ (800c930 <MX_TIM3_Init+0x98>)
 800c8b8:	4a1e      	ldr	r2, [pc, #120]	@ (800c934 <MX_TIM3_Init+0x9c>)
 800c8ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 17499;
 800c8bc:	4b1c      	ldr	r3, [pc, #112]	@ (800c930 <MX_TIM3_Init+0x98>)
 800c8be:	f244 425b 	movw	r2, #17499	@ 0x445b
 800c8c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c8c4:	4b1a      	ldr	r3, [pc, #104]	@ (800c930 <MX_TIM3_Init+0x98>)
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800c8ca:	4b19      	ldr	r3, [pc, #100]	@ (800c930 <MX_TIM3_Init+0x98>)
 800c8cc:	f242 720f 	movw	r2, #9999	@ 0x270f
 800c8d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c8d2:	4b17      	ldr	r3, [pc, #92]	@ (800c930 <MX_TIM3_Init+0x98>)
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c8d8:	4b15      	ldr	r3, [pc, #84]	@ (800c930 <MX_TIM3_Init+0x98>)
 800c8da:	2200      	movs	r2, #0
 800c8dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800c8de:	4814      	ldr	r0, [pc, #80]	@ (800c930 <MX_TIM3_Init+0x98>)
 800c8e0:	f7fd fad9 	bl	8009e96 <HAL_TIM_Base_Init>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d001      	beq.n	800c8ee <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800c8ea:	f7ff fd81 	bl	800c3f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c8ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c8f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800c8f4:	f107 0310 	add.w	r3, r7, #16
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	480d      	ldr	r0, [pc, #52]	@ (800c930 <MX_TIM3_Init+0x98>)
 800c8fc:	f7fd fca2 	bl	800a244 <HAL_TIM_ConfigClockSource>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d001      	beq.n	800c90a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800c906:	f7ff fd73 	bl	800c3f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c90a:	2300      	movs	r3, #0
 800c90c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c90e:	2300      	movs	r3, #0
 800c910:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c912:	1d3b      	adds	r3, r7, #4
 800c914:	4619      	mov	r1, r3
 800c916:	4806      	ldr	r0, [pc, #24]	@ (800c930 <MX_TIM3_Init+0x98>)
 800c918:	f7fd ff02 	bl	800a720 <HAL_TIMEx_MasterConfigSynchronization>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d001      	beq.n	800c926 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800c922:	f7ff fd65 	bl	800c3f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800c926:	bf00      	nop
 800c928:	3720      	adds	r7, #32
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	200002c4 	.word	0x200002c4
 800c934:	40000400 	.word	0x40000400

0800c938 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	4603      	mov	r3, r0
 800c940:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c942:	4b0c      	ldr	r3, [pc, #48]	@ (800c974 <SD_CheckStatus+0x3c>)
 800c944:	2201      	movs	r2, #1
 800c946:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState(0) == BSP_ERROR_NONE)
 800c948:	2000      	movs	r0, #0
 800c94a:	f7f3 fef9 	bl	8000740 <BSP_SD_GetCardState>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d107      	bne.n	800c964 <SD_CheckStatus+0x2c>
  {
    Stat &= ~STA_NOINIT;
 800c954:	4b07      	ldr	r3, [pc, #28]	@ (800c974 <SD_CheckStatus+0x3c>)
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	f023 0301 	bic.w	r3, r3, #1
 800c95e:	b2da      	uxtb	r2, r3
 800c960:	4b04      	ldr	r3, [pc, #16]	@ (800c974 <SD_CheckStatus+0x3c>)
 800c962:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 800c964:	4b03      	ldr	r3, [pc, #12]	@ (800c974 <SD_CheckStatus+0x3c>)
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	b2db      	uxtb	r3, r3
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	2000000d 	.word	0x2000000d

0800c978 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	4603      	mov	r3, r0
 800c980:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c982:	79fb      	ldrb	r3, [r7, #7]
 800c984:	4618      	mov	r0, r3
 800c986:	f7ff ffd7 	bl	800c938 <SD_CheckStatus>
 800c98a:	4603      	mov	r3, r0
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	4603      	mov	r3, r0
 800c99c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c99e:	79fb      	ldrb	r3, [r7, #7]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7ff ffc9 	bl	800c938 <SD_CheckStatus>
 800c9a6:	4603      	mov	r3, r0
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}

0800c9b0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60b9      	str	r1, [r7, #8]
 800c9b8:	607a      	str	r2, [r7, #4]
 800c9ba:	603b      	str	r3, [r7, #0]
 800c9bc:	4603      	mov	r3, r0
 800c9be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_ReadBlocks(0,(uint32_t*)buff, 
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	68b9      	ldr	r1, [r7, #8]
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	f7f3 fe58 	bl	8000680 <BSP_SD_ReadBlocks>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d108      	bne.n	800c9e8 <SD_read+0x38>
                       (uint32_t) (sector), 
                       count) == BSP_ERROR_NONE)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState(0)!= BSP_ERROR_NONE)
 800c9d6:	bf00      	nop
 800c9d8:	2000      	movs	r0, #0
 800c9da:	f7f3 feb1 	bl	8000740 <BSP_SD_GetCardState>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1f9      	bne.n	800c9d8 <SD_read+0x28>
    {
    }
    res = RES_OK;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800c9e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3718      	adds	r7, #24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b086      	sub	sp, #24
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
 800c9fc:	603b      	str	r3, [r7, #0]
 800c9fe:	4603      	mov	r3, r0
 800ca00:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ca02:	2301      	movs	r3, #1
 800ca04:	75fb      	strb	r3, [r7, #23]
  
  if(BSP_SD_WriteBlocks(0,(uint32_t*)buff, 
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	68b9      	ldr	r1, [r7, #8]
 800ca0c:	2000      	movs	r0, #0
 800ca0e:	f7f3 fe67 	bl	80006e0 <BSP_SD_WriteBlocks>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d108      	bne.n	800ca2a <SD_write+0x38>
                        (uint32_t)(sector), 
                        count) == BSP_ERROR_NONE)
  {
  /* wait until the Write operation is finished */
    while(BSP_SD_GetCardState(0) != BSP_ERROR_NONE)
 800ca18:	bf00      	nop
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	f7f3 fe90 	bl	8000740 <BSP_SD_GetCardState>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d1f9      	bne.n	800ca1a <SD_write+0x28>
    {
    }    
    res = RES_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 800ca2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3718      	adds	r7, #24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b08c      	sub	sp, #48	@ 0x30
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	603a      	str	r2, [r7, #0]
 800ca3e:	71fb      	strb	r3, [r7, #7]
 800ca40:	460b      	mov	r3, r1
 800ca42:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ca44:	2301      	movs	r3, #1
 800ca46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ca4a:	4b26      	ldr	r3, [pc, #152]	@ (800cae4 <SD_ioctl+0xb0>)
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	f003 0301 	and.w	r3, r3, #1
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d001      	beq.n	800ca5c <SD_ioctl+0x28>
 800ca58:	2303      	movs	r3, #3
 800ca5a:	e03e      	b.n	800cada <SD_ioctl+0xa6>
  
  switch (cmd)
 800ca5c:	79bb      	ldrb	r3, [r7, #6]
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d836      	bhi.n	800cad0 <SD_ioctl+0x9c>
 800ca62:	a201      	add	r2, pc, #4	@ (adr r2, 800ca68 <SD_ioctl+0x34>)
 800ca64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca68:	0800ca79 	.word	0x0800ca79
 800ca6c:	0800ca81 	.word	0x0800ca81
 800ca70:	0800ca9b 	.word	0x0800ca9b
 800ca74:	0800cab7 	.word	0x0800cab7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ca7e:	e02a      	b.n	800cad6 <SD_ioctl+0xa2>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800ca80:	f107 0308 	add.w	r3, r7, #8
 800ca84:	4619      	mov	r1, r3
 800ca86:	2000      	movs	r0, #0
 800ca88:	f7f3 fe74 	bl	8000774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ca8c:	6a3a      	ldr	r2, [r7, #32]
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ca92:	2300      	movs	r3, #0
 800ca94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ca98:	e01d      	b.n	800cad6 <SD_ioctl+0xa2>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800ca9a:	f107 0308 	add.w	r3, r7, #8
 800ca9e:	4619      	mov	r1, r3
 800caa0:	2000      	movs	r0, #0
 800caa2:	f7f3 fe67 	bl	8000774 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800caa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800caae:	2300      	movs	r3, #0
 800cab0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cab4:	e00f      	b.n	800cad6 <SD_ioctl+0xa2>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(0,&CardInfo);
 800cab6:	f107 0308 	add.w	r3, r7, #8
 800caba:	4619      	mov	r1, r3
 800cabc:	2000      	movs	r0, #0
 800cabe:	f7f3 fe59 	bl	8000774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 800cac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	601a      	str	r2, [r3, #0]
  res = RES_OK;
 800cac8:	2300      	movs	r3, #0
 800caca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cace:	e002      	b.n	800cad6 <SD_ioctl+0xa2>
  
  default:
    res = RES_PARERR;
 800cad0:	2304      	movs	r3, #4
 800cad2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }
  
  return res;
 800cad6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3730      	adds	r7, #48	@ 0x30
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	2000000d 	.word	0x2000000d

0800cae8 <smart_watch_process>:
uint16_t frameToSkip = 0;
uint16_t frame_time;


void smart_watch_process(void)
{
 800cae8:	b590      	push	{r4, r7, lr}
 800caea:	b0a1      	sub	sp, #132	@ 0x84
 800caec:	af02      	add	r7, sp, #8

  char *file_name[24];
  file_name[0] = "video_000.avi";
 800caee:	4b97      	ldr	r3, [pc, #604]	@ (800cd4c <smart_watch_process+0x264>)
 800caf0:	60bb      	str	r3, [r7, #8]
  file_name[1] = "video_001.avi";
 800caf2:	4b97      	ldr	r3, [pc, #604]	@ (800cd50 <smart_watch_process+0x268>)
 800caf4:	60fb      	str	r3, [r7, #12]
  file_name[2] = "video_002.avi";
 800caf6:	4b97      	ldr	r3, [pc, #604]	@ (800cd54 <smart_watch_process+0x26c>)
 800caf8:	613b      	str	r3, [r7, #16]
  file_name[3] = "video_003.avi";
 800cafa:	4b97      	ldr	r3, [pc, #604]	@ (800cd58 <smart_watch_process+0x270>)
 800cafc:	617b      	str	r3, [r7, #20]
  file_name[4] = "video_004.avi";
 800cafe:	4b97      	ldr	r3, [pc, #604]	@ (800cd5c <smart_watch_process+0x274>)
 800cb00:	61bb      	str	r3, [r7, #24]
  file_name[5] = "video_005.avi";
 800cb02:	4b97      	ldr	r3, [pc, #604]	@ (800cd60 <smart_watch_process+0x278>)
 800cb04:	61fb      	str	r3, [r7, #28]
  file_name[6] = "video_006.avi";
 800cb06:	4b97      	ldr	r3, [pc, #604]	@ (800cd64 <smart_watch_process+0x27c>)
 800cb08:	623b      	str	r3, [r7, #32]
  file_name[7] = "video_007.avi";
 800cb0a:	4b97      	ldr	r3, [pc, #604]	@ (800cd68 <smart_watch_process+0x280>)
 800cb0c:	627b      	str	r3, [r7, #36]	@ 0x24
  file_name[8] = "video_008.avi";
 800cb0e:	4b97      	ldr	r3, [pc, #604]	@ (800cd6c <smart_watch_process+0x284>)
 800cb10:	62bb      	str	r3, [r7, #40]	@ 0x28
  file_name[9] = "video_009.avi";
 800cb12:	4b97      	ldr	r3, [pc, #604]	@ (800cd70 <smart_watch_process+0x288>)
 800cb14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  file_name[10] = "video_010.avi";
 800cb16:	4b97      	ldr	r3, [pc, #604]	@ (800cd74 <smart_watch_process+0x28c>)
 800cb18:	633b      	str	r3, [r7, #48]	@ 0x30
  file_name[11] = "video_011.avi";
 800cb1a:	4b97      	ldr	r3, [pc, #604]	@ (800cd78 <smart_watch_process+0x290>)
 800cb1c:	637b      	str	r3, [r7, #52]	@ 0x34
  file_name[12] = "video_012.avi";
 800cb1e:	4b97      	ldr	r3, [pc, #604]	@ (800cd7c <smart_watch_process+0x294>)
 800cb20:	63bb      	str	r3, [r7, #56]	@ 0x38
  file_name[13] = "video_013.avi";
 800cb22:	4b97      	ldr	r3, [pc, #604]	@ (800cd80 <smart_watch_process+0x298>)
 800cb24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  file_name[14] = "video_014.avi";
 800cb26:	4b97      	ldr	r3, [pc, #604]	@ (800cd84 <smart_watch_process+0x29c>)
 800cb28:	643b      	str	r3, [r7, #64]	@ 0x40
  file_name[15] = "video_015.avi";
 800cb2a:	4b97      	ldr	r3, [pc, #604]	@ (800cd88 <smart_watch_process+0x2a0>)
 800cb2c:	647b      	str	r3, [r7, #68]	@ 0x44
  file_name[16] = "video_016.avi";
 800cb2e:	4b97      	ldr	r3, [pc, #604]	@ (800cd8c <smart_watch_process+0x2a4>)
 800cb30:	64bb      	str	r3, [r7, #72]	@ 0x48
  file_name[17] = "video_017.avi";
 800cb32:	4b97      	ldr	r3, [pc, #604]	@ (800cd90 <smart_watch_process+0x2a8>)
 800cb34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  file_name[18] = "video_018.avi";
 800cb36:	4b97      	ldr	r3, [pc, #604]	@ (800cd94 <smart_watch_process+0x2ac>)
 800cb38:	653b      	str	r3, [r7, #80]	@ 0x50
  file_name[19] = "video_019.avi";
 800cb3a:	4b97      	ldr	r3, [pc, #604]	@ (800cd98 <smart_watch_process+0x2b0>)
 800cb3c:	657b      	str	r3, [r7, #84]	@ 0x54
  file_name[20] = "video_020.avi";
 800cb3e:	4b97      	ldr	r3, [pc, #604]	@ (800cd9c <smart_watch_process+0x2b4>)
 800cb40:	65bb      	str	r3, [r7, #88]	@ 0x58
  file_name[21] = "video_021.avi";
 800cb42:	4b97      	ldr	r3, [pc, #604]	@ (800cda0 <smart_watch_process+0x2b8>)
 800cb44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  file_name[22] = "video_022.avi";
 800cb46:	4b97      	ldr	r3, [pc, #604]	@ (800cda4 <smart_watch_process+0x2bc>)
 800cb48:	663b      	str	r3, [r7, #96]	@ 0x60
  file_name[23] = "video_023.avi";
 800cb4a:	4b97      	ldr	r3, [pc, #604]	@ (800cda8 <smart_watch_process+0x2c0>)
 800cb4c:	667b      	str	r3, [r7, #100]	@ 0x64


  /*##-3- Link the micro SD disk I/O driver ##################################*/
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 800cb4e:	4997      	ldr	r1, [pc, #604]	@ (800cdac <smart_watch_process+0x2c4>)
 800cb50:	4897      	ldr	r0, [pc, #604]	@ (800cdb0 <smart_watch_process+0x2c8>)
 800cb52:	f003 fcf7 	bl	8010544 <FATFS_LinkDriver>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f040 80f3 	bne.w	800cd44 <smart_watch_process+0x25c>
  {
    /*##-4- Init the SD Card #################################################*/
    SD_Initialize();
 800cb5e:	f000 faef 	bl	800d140 <SD_Initialize>

    if(BSP_SD_IsDetected(0))
 800cb62:	2000      	movs	r0, #0
 800cb64:	f7f3 fd68 	bl	8000638 <BSP_SD_IsDetected>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f000 80dd 	beq.w	800cd2a <smart_watch_process+0x242>
    {
      /*##-5- Register the file system object to the FatFs module ##############*/
      if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 800cb70:	2200      	movs	r2, #0
 800cb72:	498e      	ldr	r1, [pc, #568]	@ (800cdac <smart_watch_process+0x2c4>)
 800cb74:	488f      	ldr	r0, [pc, #572]	@ (800cdb4 <smart_watch_process+0x2cc>)
 800cb76:	f002 fe99 	bl	800f8ac <f_mount>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f040 80d7 	bne.w	800cd30 <smart_watch_process+0x248>
      {

    	for(int i = 0 ; i < 24 ; i++)
 800cb82:	2300      	movs	r3, #0
 800cb84:	677b      	str	r3, [r7, #116]	@ 0x74
 800cb86:	e0cb      	b.n	800cd20 <smart_watch_process+0x238>
    	{

    		char *name = file_name[i];
 800cb88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	3378      	adds	r3, #120	@ 0x78
 800cb8e:	443b      	add	r3, r7
 800cb90:	f853 3c70 	ldr.w	r3, [r3, #-112]
 800cb94:	673b      	str	r3, [r7, #112]	@ 0x70

    		/*##-6- Open the MJPEG avi file with read access #######################*/
    		if(f_open(&MJPEG_File, name, FA_READ) == FR_OK)
 800cb96:	2201      	movs	r2, #1
 800cb98:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800cb9a:	4887      	ldr	r0, [pc, #540]	@ (800cdb8 <smart_watch_process+0x2d0>)
 800cb9c:	f002 fecc 	bl	800f938 <f_open>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f040 80b6 	bne.w	800cd14 <smart_watch_process+0x22c>
    		{

    			isfirstFrame = 1;
 800cba8:	4b84      	ldr	r3, [pc, #528]	@ (800cdbc <smart_watch_process+0x2d4>)
 800cbaa:	2201      	movs	r2, #1
 800cbac:	601a      	str	r2, [r3, #0]

    			/* parse the AVI file Header*/
    			if(AVI_ParserInit(&AVI_Handel, &MJPEG_File, MJPEG_VideoBuffer, MJPEG_VID_BUFFER_SIZE, MJPEG_AudioBuffer, MJPEG_AUD_BUFFER_SIZE) != 0)
 800cbae:	2300      	movs	r3, #0
 800cbb0:	9301      	str	r3, [sp, #4]
 800cbb2:	4b83      	ldr	r3, [pc, #524]	@ (800cdc0 <smart_watch_process+0x2d8>)
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 800cbba:	4a82      	ldr	r2, [pc, #520]	@ (800cdc4 <smart_watch_process+0x2dc>)
 800cbbc:	497e      	ldr	r1, [pc, #504]	@ (800cdb8 <smart_watch_process+0x2d0>)
 800cbbe:	4882      	ldr	r0, [pc, #520]	@ (800cdc8 <smart_watch_process+0x2e0>)
 800cbc0:	f7fe ff64 	bl	800ba8c <AVI_ParserInit>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d001      	beq.n	800cbce <smart_watch_process+0xe6>
    			{

    				while(1);
 800cbca:	bf00      	nop
 800cbcc:	e7fd      	b.n	800cbca <smart_watch_process+0xe2>
    					continue;

    				}
					*/

    				if(frameToSkip > 0)
 800cbce:	4b7f      	ldr	r3, [pc, #508]	@ (800cdcc <smart_watch_process+0x2e4>)
 800cbd0:	881b      	ldrh	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00b      	beq.n	800cbee <smart_watch_process+0x106>
    				{

    					frameToSkip--;
 800cbd6:	4b7d      	ldr	r3, [pc, #500]	@ (800cdcc <smart_watch_process+0x2e4>)
 800cbd8:	881b      	ldrh	r3, [r3, #0]
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	4b7b      	ldr	r3, [pc, #492]	@ (800cdcc <smart_watch_process+0x2e4>)
 800cbe0:	801a      	strh	r2, [r3, #0]
    					AVI_Handel.CurrentImage ++;
 800cbe2:	4b79      	ldr	r3, [pc, #484]	@ (800cdc8 <smart_watch_process+0x2e0>)
 800cbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	4a77      	ldr	r2, [pc, #476]	@ (800cdc8 <smart_watch_process+0x2e0>)
 800cbea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cbec:	e083      	b.n	800ccf6 <smart_watch_process+0x20e>

    				}

    				//uint32_t oldTime = HAL_GetTick();

    				FrameType = AVI_GetFrame(&AVI_Handel, &MJPEG_File);
 800cbee:	4972      	ldr	r1, [pc, #456]	@ (800cdb8 <smart_watch_process+0x2d0>)
 800cbf0:	4875      	ldr	r0, [pc, #468]	@ (800cdc8 <smart_watch_process+0x2e0>)
 800cbf2:	f7fe ff8b 	bl	800bb0c <AVI_GetFrame>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	4a75      	ldr	r2, [pc, #468]	@ (800cdd0 <smart_watch_process+0x2e8>)
 800cbfa:	6013      	str	r3, [r2, #0]

    				if(FrameType == AVI_VIDEO_FRAME)
 800cbfc:	4b74      	ldr	r3, [pc, #464]	@ (800cdd0 <smart_watch_process+0x2e8>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d145      	bne.n	800cc90 <smart_watch_process+0x1a8>
    				{

    					AVI_Handel.CurrentImage ++;
 800cc04:	4b70      	ldr	r3, [pc, #448]	@ (800cdc8 <smart_watch_process+0x2e0>)
 800cc06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc08:	3301      	adds	r3, #1
 800cc0a:	4a6f      	ldr	r2, [pc, #444]	@ (800cdc8 <smart_watch_process+0x2e0>)
 800cc0c:	62d3      	str	r3, [r2, #44]	@ 0x2c


    					JPEG_Decode_DMA(&JPEG_Handle,(uint32_t) MJPEG_VideoBuffer ,AVI_Handel.FrameSize, jpegOutDataAdreess );
 800cc0e:	496d      	ldr	r1, [pc, #436]	@ (800cdc4 <smart_watch_process+0x2dc>)
 800cc10:	4b6d      	ldr	r3, [pc, #436]	@ (800cdc8 <smart_watch_process+0x2e0>)
 800cc12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc14:	4b6f      	ldr	r3, [pc, #444]	@ (800cdd4 <smart_watch_process+0x2ec>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	486f      	ldr	r0, [pc, #444]	@ (800cdd8 <smart_watch_process+0x2f0>)
 800cc1a:	f7ff fb13 	bl	800c244 <JPEG_Decode_DMA>

    					while(Jpeg_HWDecodingEnd == 0);
 800cc1e:	bf00      	nop
 800cc20:	4b6e      	ldr	r3, [pc, #440]	@ (800cddc <smart_watch_process+0x2f4>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d0fb      	beq.n	800cc20 <smart_watch_process+0x138>

    					if(isfirstFrame == 1)
 800cc28:	4b64      	ldr	r3, [pc, #400]	@ (800cdbc <smart_watch_process+0x2d4>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d119      	bne.n	800cc64 <smart_watch_process+0x17c>
    					{

    						isfirstFrame = 0;
 800cc30:	4b62      	ldr	r3, [pc, #392]	@ (800cdbc <smart_watch_process+0x2d4>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	601a      	str	r2, [r3, #0]

    						HAL_JPEG_GetInfo(&JPEG_Handle, &JPEG_Info);
 800cc36:	496a      	ldr	r1, [pc, #424]	@ (800cde0 <smart_watch_process+0x2f8>)
 800cc38:	4867      	ldr	r0, [pc, #412]	@ (800cdd8 <smart_watch_process+0x2f0>)
 800cc3a:	f7f5 f82d 	bl	8001c98 <HAL_JPEG_GetInfo>

    						DMA2D_Init(JPEG_Info.ImageWidth, JPEG_Info.ImageHeight, JPEG_Info.ChromaSubsampling);
 800cc3e:	4b68      	ldr	r3, [pc, #416]	@ (800cde0 <smart_watch_process+0x2f8>)
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	b29b      	uxth	r3, r3
 800cc44:	4a66      	ldr	r2, [pc, #408]	@ (800cde0 <smart_watch_process+0x2f8>)
 800cc46:	6892      	ldr	r2, [r2, #8]
 800cc48:	b291      	uxth	r1, r2
 800cc4a:	4a65      	ldr	r2, [pc, #404]	@ (800cde0 <smart_watch_process+0x2f8>)
 800cc4c:	6852      	ldr	r2, [r2, #4]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f000 f9b8 	bl	800cfc4 <DMA2D_Init>

    						frame_time = AVI_Handel.aviInfo.SecPerFrame;
 800cc54:	4b5c      	ldr	r3, [pc, #368]	@ (800cdc8 <smart_watch_process+0x2e0>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	4b62      	ldr	r3, [pc, #392]	@ (800cde4 <smart_watch_process+0x2fc>)
 800cc5c:	801a      	strh	r2, [r3, #0]

    						HAL_TIM_Base_Start_IT(&htim3);
 800cc5e:	4862      	ldr	r0, [pc, #392]	@ (800cde8 <smart_watch_process+0x300>)
 800cc60:	f7fd f970 	bl	8009f44 <HAL_TIM_Base_Start_IT>

    					}

    					DMA2D_CopyBuffer((uint32_t *)jpegOutDataAdreess, (uint32_t *)LCD_FRAME_BUFFER, JPEG_Info.ImageWidth, JPEG_Info.ImageHeight);
 800cc64:	4b5b      	ldr	r3, [pc, #364]	@ (800cdd4 <smart_watch_process+0x2ec>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	4b5d      	ldr	r3, [pc, #372]	@ (800cde0 <smart_watch_process+0x2f8>)
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	b29a      	uxth	r2, r3
 800cc70:	4b5b      	ldr	r3, [pc, #364]	@ (800cde0 <smart_watch_process+0x2f8>)
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	495d      	ldr	r1, [pc, #372]	@ (800cdec <smart_watch_process+0x304>)
 800cc78:	f000 fa24 	bl	800d0c4 <DMA2D_CopyBuffer>

    					jpegOutDataAdreess = (jpegOutDataAdreess == JPEG_OUTPUT_DATA_BUFFER0) ? JPEG_OUTPUT_DATA_BUFFER1 : JPEG_OUTPUT_DATA_BUFFER0;
 800cc7c:	4b55      	ldr	r3, [pc, #340]	@ (800cdd4 <smart_watch_process+0x2ec>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a5b      	ldr	r2, [pc, #364]	@ (800cdf0 <smart_watch_process+0x308>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d101      	bne.n	800cc8a <smart_watch_process+0x1a2>
 800cc86:	4b5b      	ldr	r3, [pc, #364]	@ (800cdf4 <smart_watch_process+0x30c>)
 800cc88:	e000      	b.n	800cc8c <smart_watch_process+0x1a4>
 800cc8a:	4b59      	ldr	r3, [pc, #356]	@ (800cdf0 <smart_watch_process+0x308>)
 800cc8c:	4a51      	ldr	r2, [pc, #324]	@ (800cdd4 <smart_watch_process+0x2ec>)
 800cc8e:	6013      	str	r3, [r2, #0]

    				}

    				uint16_t width = JPEG_Info.ImageWidth;
 800cc90:	4b53      	ldr	r3, [pc, #332]	@ (800cde0 <smart_watch_process+0x2f8>)
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    				uint16_t height = JPEG_Info.ImageHeight;
 800cc98:	4b51      	ldr	r3, [pc, #324]	@ (800cde0 <smart_watch_process+0x2f8>)
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

    				uint16_t xPos = (LCD_X_Size - width)/2;					// Center the image in x
 800cca0:	4b55      	ldr	r3, [pc, #340]	@ (800cdf8 <smart_watch_process+0x310>)
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	085b      	lsrs	r3, r3, #1
 800ccac:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    				uint16_t yPos = (LCD_Y_Size - height)/2;					// Center the image in y
 800ccb0:	4b52      	ldr	r3, [pc, #328]	@ (800cdfc <smart_watch_process+0x314>)
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	085b      	lsrs	r3, r3, #1
 800ccbc:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

    				doubleFormat pOut;
    				pOut.u8Arr = (uint8_t *)LCD_FRAME_BUFFER;
 800ccc0:	4b4a      	ldr	r3, [pc, #296]	@ (800cdec <smart_watch_process+0x304>)
 800ccc2:	607b      	str	r3, [r7, #4]

    				depth24To16(&pOut, ( width * height ), 3);
 800ccc4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800ccc8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cccc:	fb12 f303 	smulbb	r3, r2, r3
 800ccd0:	b299      	uxth	r1, r3
 800ccd2:	1d3b      	adds	r3, r7, #4
 800ccd4:	2203      	movs	r2, #3
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f000 f898 	bl	800ce0c <depth24To16>

    				//uint32_t newTime = 0;
    				//uint32_t elapsed = 0;

    				// Display the image
    				lcd_draw(xPos, yPos, width, height, pOut.u8Arr);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8b7 406c 	ldrh.w	r4, [r7, #108]	@ 0x6c
 800cce2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800cce6:	f8b7 1068 	ldrh.w	r1, [r7, #104]	@ 0x68
 800ccea:	f8b7 006a 	ldrh.w	r0, [r7, #106]	@ 0x6a
 800ccee:	9300      	str	r3, [sp, #0]
 800ccf0:	4623      	mov	r3, r4
 800ccf2:	f000 f915 	bl	800cf20 <lcd_draw>

    				//elapsed = newTime - oldTime;

    				//HAL_Delay(1);

    			}while(AVI_Handel.CurrentImage  <  AVI_Handel.aviInfo.TotalFrame);
 800ccf6:	4b34      	ldr	r3, [pc, #208]	@ (800cdc8 <smart_watch_process+0x2e0>)
 800ccf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccfa:	4b33      	ldr	r3, [pc, #204]	@ (800cdc8 <smart_watch_process+0x2e0>)
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	f4ff af65 	bcc.w	800cbce <smart_watch_process+0xe6>

    			HAL_DMA2D_PollForTransfer(&DMA2D_Handle, 50);  /* wait for the Last DMA2D transfer to ends */
 800cd04:	2132      	movs	r1, #50	@ 0x32
 800cd06:	483e      	ldr	r0, [pc, #248]	@ (800ce00 <smart_watch_process+0x318>)
 800cd08:	f7f4 fb0b 	bl	8001322 <HAL_DMA2D_PollForTransfer>

    			/*Close the avi file*/
    			f_close(&MJPEG_File);
 800cd0c:	482a      	ldr	r0, [pc, #168]	@ (800cdb8 <smart_watch_process+0x2d0>)
 800cd0e:	f003 f99a 	bl	8010046 <f_close>
 800cd12:	e002      	b.n	800cd1a <smart_watch_process+0x232>

    		}
    		else /* Can't Open avi file*/
    		{

    			file_error = 1;
 800cd14:	4b3b      	ldr	r3, [pc, #236]	@ (800ce04 <smart_watch_process+0x31c>)
 800cd16:	2201      	movs	r2, #1
 800cd18:	601a      	str	r2, [r3, #0]
    	for(int i = 0 ; i < 24 ; i++)
 800cd1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	677b      	str	r3, [r7, #116]	@ 0x74
 800cd20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd22:	2b17      	cmp	r3, #23
 800cd24:	f77f af30 	ble.w	800cb88 <smart_watch_process+0xa0>
 800cd28:	e002      	b.n	800cd30 <smart_watch_process+0x248>

    }
    else
    {

      sd_detection_error = 1;
 800cd2a:	4b37      	ldr	r3, [pc, #220]	@ (800ce08 <smart_watch_process+0x320>)
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	601a      	str	r2, [r3, #0]

    }

    if((file_error != 0) || (sd_detection_error != 0))
 800cd30:	4b34      	ldr	r3, [pc, #208]	@ (800ce04 <smart_watch_process+0x31c>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d104      	bne.n	800cd42 <smart_watch_process+0x25a>
 800cd38:	4b33      	ldr	r3, [pc, #204]	@ (800ce08 <smart_watch_process+0x320>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d100      	bne.n	800cd42 <smart_watch_process+0x25a>

    }

  }

}
 800cd40:	e000      	b.n	800cd44 <smart_watch_process+0x25c>
      while(1);
 800cd42:	e7fe      	b.n	800cd42 <smart_watch_process+0x25a>
}
 800cd44:	bf00      	nop
 800cd46:	377c      	adds	r7, #124	@ 0x7c
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd90      	pop	{r4, r7, pc}
 800cd4c:	080109f4 	.word	0x080109f4
 800cd50:	08010a04 	.word	0x08010a04
 800cd54:	08010a14 	.word	0x08010a14
 800cd58:	08010a24 	.word	0x08010a24
 800cd5c:	08010a34 	.word	0x08010a34
 800cd60:	08010a44 	.word	0x08010a44
 800cd64:	08010a54 	.word	0x08010a54
 800cd68:	08010a64 	.word	0x08010a64
 800cd6c:	08010a74 	.word	0x08010a74
 800cd70:	08010a84 	.word	0x08010a84
 800cd74:	08010a94 	.word	0x08010a94
 800cd78:	08010aa4 	.word	0x08010aa4
 800cd7c:	08010ab4 	.word	0x08010ab4
 800cd80:	08010ac4 	.word	0x08010ac4
 800cd84:	08010ad4 	.word	0x08010ad4
 800cd88:	08010ae4 	.word	0x08010ae4
 800cd8c:	08010af4 	.word	0x08010af4
 800cd90:	08010b04 	.word	0x08010b04
 800cd94:	08010b14 	.word	0x08010b14
 800cd98:	08010b24 	.word	0x08010b24
 800cd9c:	08010b34 	.word	0x08010b34
 800cda0:	08010b44 	.word	0x08010b44
 800cda4:	08010b54 	.word	0x08010b54
 800cda8:	08010b64 	.word	0x08010b64
 800cdac:	200185dc 	.word	0x200185dc
 800cdb0:	08010e2c 	.word	0x08010e2c
 800cdb4:	200183a8 	.word	0x200183a8
 800cdb8:	200185e0 	.word	0x200185e0
 800cdbc:	20000398 	.word	0x20000398
 800cdc0:	200183a8 	.word	0x200183a8
 800cdc4:	200003a8 	.word	0x200003a8
 800cdc8:	20018810 	.word	0x20018810
 800cdcc:	20018858 	.word	0x20018858
 800cdd0:	200003a4 	.word	0x200003a4
 800cdd4:	20000010 	.word	0x20000010
 800cdd8:	200001f0 	.word	0x200001f0
 800cddc:	200001dc 	.word	0x200001dc
 800cde0:	200002b0 	.word	0x200002b0
 800cde4:	2001885a 	.word	0x2001885a
 800cde8:	200002c4 	.word	0x200002c4
 800cdec:	d0a00000 	.word	0xd0a00000
 800cdf0:	d0600000 	.word	0xd0600000
 800cdf4:	d0800000 	.word	0xd0800000
 800cdf8:	20000014 	.word	0x20000014
 800cdfc:	20000018 	.word	0x20000018
 800ce00:	20000248 	.word	0x20000248
 800ce04:	2000039c 	.word	0x2000039c
 800ce08:	200003a0 	.word	0x200003a0

0800ce0c <depth24To16>:


static void depth24To16(doubleFormat *pxArr, uint16_t length, uint8_t bpx)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	460b      	mov	r3, r1
 800ce16:	807b      	strh	r3, [r7, #2]
 800ce18:	4613      	mov	r3, r2
 800ce1a:	707b      	strb	r3, [r7, #1]

	uint8_t b;
	uint8_t g;
	uint8_t r;

	int i = 0;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	60fb      	str	r3, [r7, #12]



    if(swap)
 800ce20:	4b3d      	ldr	r3, [pc, #244]	@ (800cf18 <depth24To16+0x10c>)
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00c      	beq.n	800ce42 <depth24To16+0x36>
    {

    	swap = 0;
 800ce28:	4b3b      	ldr	r3, [pc, #236]	@ (800cf18 <depth24To16+0x10c>)
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	701a      	strb	r2, [r3, #0]

    	i = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60fb      	str	r3, [r7, #12]
    	length /= 2;
 800ce32:	887b      	ldrh	r3, [r7, #2]
 800ce34:	085b      	lsrs	r3, r3, #1
 800ce36:	807b      	strh	r3, [r7, #2]
    	length += 1000;
 800ce38:	887b      	ldrh	r3, [r7, #2]
 800ce3a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800ce3e:	807b      	strh	r3, [r7, #2]
 800ce40:	e05e      	b.n	800cf00 <depth24To16+0xf4>

    }
    else
    {

    	swap = 1;
 800ce42:	4b35      	ldr	r3, [pc, #212]	@ (800cf18 <depth24To16+0x10c>)
 800ce44:	2201      	movs	r2, #1
 800ce46:	701a      	strb	r2, [r3, #0]

    	i = ( length / 2 ) - 2000;
 800ce48:	887b      	ldrh	r3, [r7, #2]
 800ce4a:	085b      	lsrs	r3, r3, #1
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800ce52:	60fb      	str	r3, [r7, #12]

    }

	for( ; i < length ; i++)
 800ce54:	e054      	b.n	800cf00 <depth24To16+0xf4>
	{

		b = pxArr->u8Arr[i*bpx];
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	787a      	ldrb	r2, [r7, #1]
 800ce5c:	68f9      	ldr	r1, [r7, #12]
 800ce5e:	fb01 f202 	mul.w	r2, r1, r2
 800ce62:	4413      	add	r3, r2
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	72fb      	strb	r3, [r7, #11]
		g = pxArr->u8Arr[i*bpx+1];
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	787b      	ldrb	r3, [r7, #1]
 800ce6e:	68f9      	ldr	r1, [r7, #12]
 800ce70:	fb01 f303 	mul.w	r3, r1, r3
 800ce74:	3301      	adds	r3, #1
 800ce76:	4413      	add	r3, r2
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	72bb      	strb	r3, [r7, #10]
		r = pxArr->u8Arr[i*bpx+2];
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	787b      	ldrb	r3, [r7, #1]
 800ce82:	68f9      	ldr	r1, [r7, #12]
 800ce84:	fb01 f303 	mul.w	r3, r1, r3
 800ce88:	3302      	adds	r3, #2
 800ce8a:	4413      	add	r3, r2
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	727b      	strb	r3, [r7, #9]

		pxArr->u16Arr[i] = color565(r, g, b);
 800ce90:	7a7b      	ldrb	r3, [r7, #9]
 800ce92:	021b      	lsls	r3, r3, #8
 800ce94:	b21a      	sxth	r2, r3
 800ce96:	4b21      	ldr	r3, [pc, #132]	@ (800cf1c <depth24To16+0x110>)
 800ce98:	4013      	ands	r3, r2
 800ce9a:	b21a      	sxth	r2, r3
 800ce9c:	7abb      	ldrb	r3, [r7, #10]
 800ce9e:	00db      	lsls	r3, r3, #3
 800cea0:	b21b      	sxth	r3, r3
 800cea2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 800cea6:	b21b      	sxth	r3, r3
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	b21a      	sxth	r2, r3
 800ceac:	7afb      	ldrb	r3, [r7, #11]
 800ceae:	08db      	lsrs	r3, r3, #3
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	b21b      	sxth	r3, r3
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	b219      	sxth	r1, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	005b      	lsls	r3, r3, #1
 800cec0:	4413      	add	r3, r2
 800cec2:	b28a      	uxth	r2, r1
 800cec4:	801a      	strh	r2, [r3, #0]
		pxArr->u16Arr[i] = ( ( ( pxArr->u16Arr[i] & 0x00ff ) << 8 ) | (( pxArr->u16Arr[i] & 0xff00 ) >> 8) );
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	005b      	lsls	r3, r3, #1
 800cece:	4413      	add	r3, r2
 800ced0:	881b      	ldrh	r3, [r3, #0]
 800ced2:	021b      	lsls	r3, r3, #8
 800ced4:	b21a      	sxth	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6819      	ldr	r1, [r3, #0]
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	005b      	lsls	r3, r3, #1
 800cede:	440b      	add	r3, r1
 800cee0:	881b      	ldrh	r3, [r3, #0]
 800cee2:	0a1b      	lsrs	r3, r3, #8
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	b21b      	sxth	r3, r3
 800cee8:	4313      	orrs	r3, r2
 800ceea:	b219      	sxth	r1, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	005b      	lsls	r3, r3, #1
 800cef4:	4413      	add	r3, r2
 800cef6:	b28a      	uxth	r2, r1
 800cef8:	801a      	strh	r2, [r3, #0]
	for( ; i < length ; i++)
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	3301      	adds	r3, #1
 800cefe:	60fb      	str	r3, [r7, #12]
 800cf00:	887b      	ldrh	r3, [r7, #2]
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	dba6      	blt.n	800ce56 <depth24To16+0x4a>

	}

}
 800cf08:	bf00      	nop
 800cf0a:	bf00      	nop
 800cf0c:	3714      	adds	r7, #20
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	2001885c 	.word	0x2001885c
 800cf1c:	fffff800 	.word	0xfffff800

0800cf20 <lcd_draw>:


static void lcd_draw(uint16_t sx, uint16_t sy, uint16_t wd, uint16_t ht, uint8_t *data)
{
 800cf20:	b590      	push	{r4, r7, lr}
 800cf22:	b087      	sub	sp, #28
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	4604      	mov	r4, r0
 800cf28:	4608      	mov	r0, r1
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	4623      	mov	r3, r4
 800cf30:	80fb      	strh	r3, [r7, #6]
 800cf32:	4603      	mov	r3, r0
 800cf34:	80bb      	strh	r3, [r7, #4]
 800cf36:	460b      	mov	r3, r1
 800cf38:	807b      	strh	r3, [r7, #2]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	803b      	strh	r3, [r7, #0]
	   struct GC9A01_frame frame;



	    // Imposta il frame per l'intera area specificata
	   	if(swap)
 800cf3e:	4b20      	ldr	r3, [pc, #128]	@ (800cfc0 <lcd_draw+0xa0>)
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00b      	beq.n	800cf5e <lcd_draw+0x3e>
	   	{

	   		swap = 0;
 800cf46:	4b1e      	ldr	r3, [pc, #120]	@ (800cfc0 <lcd_draw+0xa0>)
 800cf48:	2200      	movs	r2, #0
 800cf4a:	701a      	strb	r2, [r3, #0]

	        frame.start.X = 0;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	81bb      	strh	r3, [r7, #12]
	        frame.start.Y = 0;
 800cf50:	2300      	movs	r3, #0
 800cf52:	81fb      	strh	r3, [r7, #14]
	        frame.end.X = 239;
 800cf54:	23ef      	movs	r3, #239	@ 0xef
 800cf56:	823b      	strh	r3, [r7, #16]
	        frame.end.Y = 119;
 800cf58:	2377      	movs	r3, #119	@ 0x77
 800cf5a:	827b      	strh	r3, [r7, #18]
 800cf5c:	e00e      	b.n	800cf7c <lcd_draw+0x5c>

	   	}
	   	else
	   	{

	   		swap = 1;
 800cf5e:	4b18      	ldr	r3, [pc, #96]	@ (800cfc0 <lcd_draw+0xa0>)
 800cf60:	2201      	movs	r2, #1
 800cf62:	701a      	strb	r2, [r3, #0]

	   		data += ( 240 * 240 );
 800cf64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf66:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800cf6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	        frame.start.X = 0;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	81bb      	strh	r3, [r7, #12]
	        frame.start.Y = 120;
 800cf70:	2378      	movs	r3, #120	@ 0x78
 800cf72:	81fb      	strh	r3, [r7, #14]
	        frame.end.X = 239;
 800cf74:	23ef      	movs	r3, #239	@ 0xef
 800cf76:	823b      	strh	r3, [r7, #16]
	        frame.end.Y = 239;
 800cf78:	23ef      	movs	r3, #239	@ 0xef
 800cf7a:	827b      	strh	r3, [r7, #18]

	   	}

	    GC9A01_set_frame(frame);
 800cf7c:	f107 030c 	add.w	r3, r7, #12
 800cf80:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cf84:	f7ff f905 	bl	800c192 <GC9A01_set_frame>

	    // Invia il comando per iniziare la scrittura della memoria
	    GC9A01_write_command(MEM_WR);
 800cf88:	202c      	movs	r0, #44	@ 0x2c
 800cf8a:	f7fe fe81 	bl	800bc90 <GC9A01_write_command>

	    // Imposta modalità dati e chip select basso per la trasmissione
	    GC9A01_set_data_command(ON);
 800cf8e:	2001      	movs	r0, #1
 800cf90:	f7fe fe4a 	bl	800bc28 <GC9A01_set_data_command>
	    GC9A01_set_chip_select(OFF);
 800cf94:	2000      	movs	r0, #0
 800cf96:	f7fe fe61 	bl	800bc5c <GC9A01_set_chip_select>

	    // Invia tutti i dati dell'immagine in un unico blocco
	    uint32_t total_bytes = wd * ht; // 2 byte per pixel
 800cf9a:	887b      	ldrh	r3, [r7, #2]
 800cf9c:	883a      	ldrh	r2, [r7, #0]
 800cf9e:	fb02 f303 	mul.w	r3, r2, r3
 800cfa2:	617b      	str	r3, [r7, #20]

	    GC9A01_spi_tx(data, total_bytes);
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfac:	f7ff f92e 	bl	800c20c <GC9A01_spi_tx>

	    // Riporta chip select alto dopo la trasmissione
	    GC9A01_set_chip_select(ON);
 800cfb0:	2001      	movs	r0, #1
 800cfb2:	f7fe fe53 	bl	800bc5c <GC9A01_set_chip_select>

}
 800cfb6:	bf00      	nop
 800cfb8:	371c      	adds	r7, #28
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd90      	pop	{r4, r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	2001885d 	.word	0x2001885d

0800cfc4 <DMA2D_Init>:


static void DMA2D_Init(uint16_t xsize, uint16_t ysize, uint32_t ChromaSampling)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	4603      	mov	r3, r0
 800cfcc:	603a      	str	r2, [r7, #0]
 800cfce:	80fb      	strh	r3, [r7, #6]
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	80bb      	strh	r3, [r7, #4]
  uint32_t cssMode = JPEG_420_SUBSAMPLING, inputLineOffset = 0;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	60fb      	str	r3, [r7, #12]
 800cfd8:	2300      	movs	r3, #0
 800cfda:	60bb      	str	r3, [r7, #8]

  HAL_DMA2D_MspInit(&DMA2D_Handle);
 800cfdc:	4836      	ldr	r0, [pc, #216]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800cfde:	f000 f9ff 	bl	800d3e0 <HAL_DMA2D_MspInit>

  if(ChromaSampling == JPEG_420_SUBSAMPLING)
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d10d      	bne.n	800d004 <DMA2D_Init+0x40>
  {
    cssMode = DMA2D_CSS_420;
 800cfe8:	2302      	movs	r3, #2
 800cfea:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800cfec:	88fb      	ldrh	r3, [r7, #6]
 800cfee:	f003 030f 	and.w	r3, r3, #15
 800cff2:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d025      	beq.n	800d046 <DMA2D_Init+0x82>
    {
      inputLineOffset = 16 - inputLineOffset;
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	f1c3 0310 	rsb	r3, r3, #16
 800d000:	60bb      	str	r3, [r7, #8]
 800d002:	e020      	b.n	800d046 <DMA2D_Init+0x82>
    }
  }
  else if(ChromaSampling == JPEG_444_SUBSAMPLING)
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d10d      	bne.n	800d026 <DMA2D_Init+0x62>
  {
    cssMode = DMA2D_NO_CSS;
 800d00a:	2300      	movs	r3, #0
 800d00c:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 8;
 800d00e:	88fb      	ldrh	r3, [r7, #6]
 800d010:	f003 0307 	and.w	r3, r3, #7
 800d014:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d014      	beq.n	800d046 <DMA2D_Init+0x82>
    {
      inputLineOffset = 8 - inputLineOffset;
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	f1c3 0308 	rsb	r3, r3, #8
 800d022:	60bb      	str	r3, [r7, #8]
 800d024:	e00f      	b.n	800d046 <DMA2D_Init+0x82>
    }
  }
  else if(ChromaSampling == JPEG_422_SUBSAMPLING)
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d10c      	bne.n	800d046 <DMA2D_Init+0x82>
  {
    cssMode = DMA2D_CSS_422;
 800d02c:	2301      	movs	r3, #1
 800d02e:	60fb      	str	r3, [r7, #12]

    inputLineOffset = xsize % 16;
 800d030:	88fb      	ldrh	r3, [r7, #6]
 800d032:	f003 030f 	and.w	r3, r3, #15
 800d036:	60bb      	str	r3, [r7, #8]
    if(inputLineOffset != 0)
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d003      	beq.n	800d046 <DMA2D_Init+0x82>
    {
      inputLineOffset = 16 - inputLineOffset;
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	f1c3 0310 	rsb	r3, r3, #16
 800d044:	60bb      	str	r3, [r7, #8]
    }
  }

  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/
  DMA2D_Handle.Init.Mode         = DMA2D_M2M_PFC;
 800d046:	4b1c      	ldr	r3, [pc, #112]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d048:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d04c:	605a      	str	r2, [r3, #4]
  DMA2D_Handle.Init.ColorMode    = DMA2D_OUTPUT_RGB888;
 800d04e:	4b1a      	ldr	r3, [pc, #104]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d050:	2201      	movs	r2, #1
 800d052:	609a      	str	r2, [r3, #8]
  DMA2D_Handle.Init.OutputOffset = LCD_X_Size - xsize;
 800d054:	4b19      	ldr	r3, [pc, #100]	@ (800d0bc <DMA2D_Init+0xf8>)
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	88fb      	ldrh	r3, [r7, #6]
 800d05a:	1ad3      	subs	r3, r2, r3
 800d05c:	4a16      	ldr	r2, [pc, #88]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d05e:	60d3      	str	r3, [r2, #12]
  DMA2D_Handle.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No Output Alpha Inversion*/
 800d060:	4b15      	ldr	r3, [pc, #84]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d062:	2200      	movs	r2, #0
 800d064:	611a      	str	r2, [r3, #16]
  DMA2D_Handle.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */
 800d066:	4b14      	ldr	r3, [pc, #80]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d068:	2200      	movs	r2, #0
 800d06a:	615a      	str	r2, [r3, #20]

  /*##-2- DMA2D Callbacks Configuration ######################################*/
  DMA2D_Handle.XferCpltCallback  = NULL;
 800d06c:	4b12      	ldr	r3, [pc, #72]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d06e:	2200      	movs	r2, #0
 800d070:	621a      	str	r2, [r3, #32]

  /*##-3- Foreground Configuration ###########################################*/
  DMA2D_Handle.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800d072:	4b11      	ldr	r3, [pc, #68]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d074:	2201      	movs	r2, #1
 800d076:	64da      	str	r2, [r3, #76]	@ 0x4c
  DMA2D_Handle.LayerCfg[1].InputAlpha = 0xFF;
 800d078:	4b0f      	ldr	r3, [pc, #60]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d07a:	22ff      	movs	r2, #255	@ 0xff
 800d07c:	651a      	str	r2, [r3, #80]	@ 0x50
  DMA2D_Handle.LayerCfg[1].InputColorMode = DMA2D_INPUT_YCBCR;
 800d07e:	4b0e      	ldr	r3, [pc, #56]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d080:	220b      	movs	r2, #11
 800d082:	649a      	str	r2, [r3, #72]	@ 0x48
  DMA2D_Handle.LayerCfg[1].ChromaSubSampling = cssMode;
 800d084:	4a0c      	ldr	r2, [pc, #48]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	65d3      	str	r3, [r2, #92]	@ 0x5c
  DMA2D_Handle.LayerCfg[1].InputOffset = inputLineOffset;
 800d08a:	4a0b      	ldr	r2, [pc, #44]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	6453      	str	r3, [r2, #68]	@ 0x44
  DMA2D_Handle.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
 800d090:	4b09      	ldr	r3, [pc, #36]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d092:	2200      	movs	r2, #0
 800d094:	659a      	str	r2, [r3, #88]	@ 0x58
  DMA2D_Handle.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */
 800d096:	4b08      	ldr	r3, [pc, #32]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d098:	2200      	movs	r2, #0
 800d09a:	655a      	str	r2, [r3, #84]	@ 0x54

  DMA2D_Handle.Instance          = DMA2D;
 800d09c:	4b06      	ldr	r3, [pc, #24]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d09e:	4a08      	ldr	r2, [pc, #32]	@ (800d0c0 <DMA2D_Init+0xfc>)
 800d0a0:	601a      	str	r2, [r3, #0]

  /*##-4- DMA2D Initialization     ###########################################*/
  HAL_DMA2D_Init(&DMA2D_Handle);
 800d0a2:	4805      	ldr	r0, [pc, #20]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d0a4:	f7f4 f8ae 	bl	8001204 <HAL_DMA2D_Init>
  HAL_DMA2D_ConfigLayer(&DMA2D_Handle, 1);
 800d0a8:	2101      	movs	r1, #1
 800d0aa:	4803      	ldr	r0, [pc, #12]	@ (800d0b8 <DMA2D_Init+0xf4>)
 800d0ac:	f7f4 fa22 	bl	80014f4 <HAL_DMA2D_ConfigLayer>

}
 800d0b0:	bf00      	nop
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	20000248 	.word	0x20000248
 800d0bc:	20000014 	.word	0x20000014
 800d0c0:	52001000 	.word	0x52001000

0800d0c4 <DMA2D_CopyBuffer>:


static void DMA2D_CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t ImageWidth, uint16_t ImageHeight)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b08a      	sub	sp, #40	@ 0x28
 800d0c8:	af02      	add	r7, sp, #8
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	80fb      	strh	r3, [r7, #6]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	80bb      	strh	r3, [r7, #4]

  uint32_t xPos, yPos, destination;


  /*##-1- calculate the destination transfer address  ############*/
  xPos = (LCD_X_Size - JPEG_Info.ImageWidth)/2;
 800d0da:	4b15      	ldr	r3, [pc, #84]	@ (800d130 <DMA2D_CopyBuffer+0x6c>)
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	4b15      	ldr	r3, [pc, #84]	@ (800d134 <DMA2D_CopyBuffer+0x70>)
 800d0e0:	68db      	ldr	r3, [r3, #12]
 800d0e2:	1ad3      	subs	r3, r2, r3
 800d0e4:	085b      	lsrs	r3, r3, #1
 800d0e6:	61fb      	str	r3, [r7, #28]
  yPos = (LCD_Y_Size - JPEG_Info.ImageHeight)/2;
 800d0e8:	4b13      	ldr	r3, [pc, #76]	@ (800d138 <DMA2D_CopyBuffer+0x74>)
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	4b11      	ldr	r3, [pc, #68]	@ (800d134 <DMA2D_CopyBuffer+0x70>)
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	085b      	lsrs	r3, r3, #1
 800d0f4:	61bb      	str	r3, [r7, #24]

  destination = (uint32_t)pDst + ((yPos * LCD_X_Size) + xPos) * 4;
 800d0f6:	4b0e      	ldr	r3, [pc, #56]	@ (800d130 <DMA2D_CopyBuffer+0x6c>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	69ba      	ldr	r2, [r7, #24]
 800d0fc:	fb03 f202 	mul.w	r2, r3, r2
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	4413      	add	r3, r2
 800d104:	009a      	lsls	r2, r3, #2
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	4413      	add	r3, r2
 800d10a:	617b      	str	r3, [r7, #20]

  /* wait for the DMA2D transfer to ends */
  HAL_DMA2D_PollForTransfer(&DMA2D_Handle, HAL_MAX_DELAY);
 800d10c:	f04f 31ff 	mov.w	r1, #4294967295
 800d110:	480a      	ldr	r0, [pc, #40]	@ (800d13c <DMA2D_CopyBuffer+0x78>)
 800d112:	f7f4 f906 	bl	8001322 <HAL_DMA2D_PollForTransfer>
  /* copy the new decoded frame to the LCD Frame buffer*/
  HAL_DMA2D_Start(&DMA2D_Handle, (uint32_t)pSrc, destination, ImageWidth, ImageHeight);
 800d116:	68f9      	ldr	r1, [r7, #12]
 800d118:	88fa      	ldrh	r2, [r7, #6]
 800d11a:	88bb      	ldrh	r3, [r7, #4]
 800d11c:	9300      	str	r3, [sp, #0]
 800d11e:	4613      	mov	r3, r2
 800d120:	697a      	ldr	r2, [r7, #20]
 800d122:	4806      	ldr	r0, [pc, #24]	@ (800d13c <DMA2D_CopyBuffer+0x78>)
 800d124:	f7f4 f8d2 	bl	80012cc <HAL_DMA2D_Start>

}
 800d128:	bf00      	nop
 800d12a:	3720      	adds	r7, #32
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	20000014 	.word	0x20000014
 800d134:	200002b0 	.word	0x200002b0
 800d138:	20000018 	.word	0x20000018
 800d13c:	20000248 	.word	0x20000248

0800d140 <SD_Initialize>:


static void SD_Initialize(void)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	af00      	add	r7, sp, #0
  BSP_SD_Init(0);
 800d144:	2000      	movs	r0, #0
 800d146:	f7f3 f9d3 	bl	80004f0 <BSP_SD_Init>
}
 800d14a:	bf00      	nop
 800d14c:	bd80      	pop	{r7, pc}
	...

0800d150 <HAL_JPEG_MspInit>:
  *           - NVIC configuration for DMA interrupt request enable
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef *hjpeg)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef   hmdmaIn;
  static MDMA_HandleTypeDef   hmdmaOut;  
  
  /* Enable JPEG clock */
  __HAL_RCC_JPGDECEN_CLK_ENABLE();
 800d158:	4b54      	ldr	r3, [pc, #336]	@ (800d2ac <HAL_JPEG_MspInit+0x15c>)
 800d15a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d15e:	4a53      	ldr	r2, [pc, #332]	@ (800d2ac <HAL_JPEG_MspInit+0x15c>)
 800d160:	f043 0320 	orr.w	r3, r3, #32
 800d164:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d168:	4b50      	ldr	r3, [pc, #320]	@ (800d2ac <HAL_JPEG_MspInit+0x15c>)
 800d16a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d16e:	f003 0320 	and.w	r3, r3, #32
 800d172:	60fb      	str	r3, [r7, #12]
 800d174:	68fb      	ldr	r3, [r7, #12]
  
  /* Enable MDMA clock */
  __HAL_RCC_MDMA_CLK_ENABLE();
 800d176:	4b4d      	ldr	r3, [pc, #308]	@ (800d2ac <HAL_JPEG_MspInit+0x15c>)
 800d178:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d17c:	4a4b      	ldr	r2, [pc, #300]	@ (800d2ac <HAL_JPEG_MspInit+0x15c>)
 800d17e:	f043 0301 	orr.w	r3, r3, #1
 800d182:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d186:	4b49      	ldr	r3, [pc, #292]	@ (800d2ac <HAL_JPEG_MspInit+0x15c>)
 800d188:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d18c:	f003 0301 	and.w	r3, r3, #1
 800d190:	60bb      	str	r3, [r7, #8]
 800d192:	68bb      	ldr	r3, [r7, #8]
  
  HAL_NVIC_SetPriority(JPEG_IRQn, 0x07, 0x0F);
 800d194:	220f      	movs	r2, #15
 800d196:	2107      	movs	r1, #7
 800d198:	2079      	movs	r0, #121	@ 0x79
 800d19a:	f7f3 ff86 	bl	80010aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(JPEG_IRQn);  
 800d19e:	2079      	movs	r0, #121	@ 0x79
 800d1a0:	f7f3 ff9d 	bl	80010de <HAL_NVIC_EnableIRQ>
  
  /* Input MDMA */
  /* Set the parameters to be configured */ 
  hmdmaIn.Init.Priority           = MDMA_PRIORITY_HIGH;
 800d1a4:	4b42      	ldr	r3, [pc, #264]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d1a6:	2280      	movs	r2, #128	@ 0x80
 800d1a8:	60da      	str	r2, [r3, #12]
  hmdmaIn.Init.Endianness         = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800d1aa:	4b41      	ldr	r3, [pc, #260]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	611a      	str	r2, [r3, #16]
  hmdmaIn.Init.SourceInc          = MDMA_SRC_INC_BYTE;
 800d1b0:	4b3f      	ldr	r3, [pc, #252]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d1b2:	2202      	movs	r2, #2
 800d1b4:	615a      	str	r2, [r3, #20]
  hmdmaIn.Init.DestinationInc     = MDMA_DEST_INC_DISABLE;
 800d1b6:	4b3e      	ldr	r3, [pc, #248]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	619a      	str	r2, [r3, #24]
  hmdmaIn.Init.SourceDataSize     = MDMA_SRC_DATASIZE_BYTE;
 800d1bc:	4b3c      	ldr	r3, [pc, #240]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d1be:	2200      	movs	r2, #0
 800d1c0:	61da      	str	r2, [r3, #28]
  hmdmaIn.Init.DestDataSize       = MDMA_DEST_DATASIZE_WORD;
 800d1c2:	4b3b      	ldr	r3, [pc, #236]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d1c4:	2280      	movs	r2, #128	@ 0x80
 800d1c6:	621a      	str	r2, [r3, #32]
  hmdmaIn.Init.DataAlignment      = MDMA_DATAALIGN_PACKENABLE;   
 800d1c8:	4b39      	ldr	r3, [pc, #228]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d1ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800d1ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdmaIn.Init.SourceBurst        = MDMA_SOURCE_BURST_32BEATS;
 800d1d0:	4b37      	ldr	r3, [pc, #220]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d1d2:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800d1d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdmaIn.Init.DestBurst          = MDMA_DEST_BURST_16BEATS; 
 800d1d8:	4b35      	ldr	r3, [pc, #212]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d1da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800d1de:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdmaIn.Init.SourceBlockAddressOffset = 0;
 800d1e0:	4b33      	ldr	r3, [pc, #204]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdmaIn.Init.DestBlockAddressOffset  = 0;
 800d1e6:	4b32      	ldr	r3, [pc, #200]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /*Using JPEG Input FIFO Threshold as a trigger for the MDMA*/
  hmdmaIn.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH; /* Set the MDMA HW trigger to JPEG Input FIFO Threshold flag*/  
 800d1ec:	4b30      	ldr	r3, [pc, #192]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d1ee:	2211      	movs	r2, #17
 800d1f0:	605a      	str	r2, [r3, #4]
  hmdmaIn.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;  
 800d1f2:	4b2f      	ldr	r3, [pc, #188]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	609a      	str	r2, [r3, #8]
  hmdmaIn.Init.BufferTransferLength = 32; /*Set the MDMA buffer size to the JPEG FIFO threshold size i.e 32 bytes (8 words)*/
 800d1f8:	4b2d      	ldr	r3, [pc, #180]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d1fa:	2220      	movs	r2, #32
 800d1fc:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hmdmaIn.Instance = MDMA_Channel1;
 800d1fe:	4b2c      	ldr	r3, [pc, #176]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d200:	4a2c      	ldr	r2, [pc, #176]	@ (800d2b4 <HAL_JPEG_MspInit+0x164>)
 800d202:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hjpeg, hdmain, hmdmaIn);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a2a      	ldr	r2, [pc, #168]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d208:	631a      	str	r2, [r3, #48]	@ 0x30
 800d20a:	4a29      	ldr	r2, [pc, #164]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6413      	str	r3, [r2, #64]	@ 0x40
  
  /* DeInitialize the DMA Stream */
  HAL_MDMA_DeInit(&hmdmaIn);  
 800d210:	4827      	ldr	r0, [pc, #156]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d212:	f7f6 fb8f 	bl	8003934 <HAL_MDMA_DeInit>
  /* Initialize the DMA stream */
  HAL_MDMA_Init(&hmdmaIn);
 800d216:	4826      	ldr	r0, [pc, #152]	@ (800d2b0 <HAL_JPEG_MspInit+0x160>)
 800d218:	f7f6 fb40 	bl	800389c <HAL_MDMA_Init>
  
  
  /* Output MDMA */
  /* Set the parameters to be configured */ 
  hmdmaOut.Init.Priority        = MDMA_PRIORITY_VERY_HIGH;
 800d21c:	4b26      	ldr	r3, [pc, #152]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d21e:	22c0      	movs	r2, #192	@ 0xc0
 800d220:	60da      	str	r2, [r3, #12]
  hmdmaOut.Init.Endianness      = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800d222:	4b25      	ldr	r3, [pc, #148]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d224:	2200      	movs	r2, #0
 800d226:	611a      	str	r2, [r3, #16]
  hmdmaOut.Init.SourceInc       = MDMA_SRC_INC_DISABLE;
 800d228:	4b23      	ldr	r3, [pc, #140]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	615a      	str	r2, [r3, #20]
  hmdmaOut.Init.DestinationInc  = MDMA_DEST_INC_BYTE;
 800d22e:	4b22      	ldr	r3, [pc, #136]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d230:	2208      	movs	r2, #8
 800d232:	619a      	str	r2, [r3, #24]
  hmdmaOut.Init.SourceDataSize  = MDMA_SRC_DATASIZE_WORD;
 800d234:	4b20      	ldr	r3, [pc, #128]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d236:	2220      	movs	r2, #32
 800d238:	61da      	str	r2, [r3, #28]
  hmdmaOut.Init.DestDataSize    = MDMA_DEST_DATASIZE_BYTE;
 800d23a:	4b1f      	ldr	r3, [pc, #124]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d23c:	2200      	movs	r2, #0
 800d23e:	621a      	str	r2, [r3, #32]
  hmdmaOut.Init.DataAlignment   = MDMA_DATAALIGN_PACKENABLE;
 800d240:	4b1d      	ldr	r3, [pc, #116]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d242:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800d246:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdmaOut.Init.SourceBurst     = MDMA_SOURCE_BURST_32BEATS;
 800d248:	4b1b      	ldr	r3, [pc, #108]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d24a:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800d24e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hmdmaOut.Init.DestBurst       = MDMA_DEST_BURST_32BEATS;  
 800d250:	4b19      	ldr	r3, [pc, #100]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d252:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800d256:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdmaOut.Init.SourceBlockAddressOffset = 0;
 800d258:	4b17      	ldr	r3, [pc, #92]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	635a      	str	r2, [r3, #52]	@ 0x34
  hmdmaOut.Init.DestBlockAddressOffset  = 0;
 800d25e:	4b16      	ldr	r3, [pc, #88]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d260:	2200      	movs	r2, #0
 800d262:	639a      	str	r2, [r3, #56]	@ 0x38
  
  
  /*Using JPEG Output FIFO Threshold as a trigger for the MDMA*/
  hmdmaOut.Init.Request              = MDMA_REQUEST_JPEG_OUTFIFO_TH; /* Set the MDMA HW trigger to JPEG Output FIFO Threshold flag*/ 
 800d264:	4b14      	ldr	r3, [pc, #80]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d266:	2213      	movs	r2, #19
 800d268:	605a      	str	r2, [r3, #4]
  hmdmaOut.Init.TransferTriggerMode  = MDMA_BUFFER_TRANSFER;    
 800d26a:	4b13      	ldr	r3, [pc, #76]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d26c:	2200      	movs	r2, #0
 800d26e:	609a      	str	r2, [r3, #8]
  hmdmaOut.Init.BufferTransferLength = 32; /*Set the MDMA buffer size to the JPEG FIFO threshold size i.e 32 bytes (8 words)*/
 800d270:	4b11      	ldr	r3, [pc, #68]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d272:	2220      	movs	r2, #32
 800d274:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hmdmaOut.Instance = MDMA_Channel0;
 800d276:	4b10      	ldr	r3, [pc, #64]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d278:	4a10      	ldr	r2, [pc, #64]	@ (800d2bc <HAL_JPEG_MspInit+0x16c>)
 800d27a:	601a      	str	r2, [r3, #0]
  /* DeInitialize the DMA Stream */
  HAL_MDMA_DeInit(&hmdmaOut);  
 800d27c:	480e      	ldr	r0, [pc, #56]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d27e:	f7f6 fb59 	bl	8003934 <HAL_MDMA_DeInit>
  /* Initialize the DMA stream */
  HAL_MDMA_Init(&hmdmaOut);
 800d282:	480d      	ldr	r0, [pc, #52]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d284:	f7f6 fb0a 	bl	800389c <HAL_MDMA_Init>
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hjpeg, hdmaout, hmdmaOut);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	4a0b      	ldr	r2, [pc, #44]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d28c:	635a      	str	r2, [r3, #52]	@ 0x34
 800d28e:	4a0a      	ldr	r2, [pc, #40]	@ (800d2b8 <HAL_JPEG_MspInit+0x168>)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6413      	str	r3, [r2, #64]	@ 0x40
  
  
  HAL_NVIC_SetPriority(MDMA_IRQn, 0x00, 0x00);
 800d294:	2200      	movs	r2, #0
 800d296:	2100      	movs	r1, #0
 800d298:	207a      	movs	r0, #122	@ 0x7a
 800d29a:	f7f3 ff06 	bl	80010aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 800d29e:	207a      	movs	r0, #122	@ 0x7a
 800d2a0:	f7f3 ff1d 	bl	80010de <HAL_NVIC_EnableIRQ>
  
}
 800d2a4:	bf00      	nop
 800d2a6:	3710      	adds	r7, #16
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}
 800d2ac:	58024400 	.word	0x58024400
 800d2b0:	20018860 	.word	0x20018860
 800d2b4:	52000080 	.word	0x52000080
 800d2b8:	200188cc 	.word	0x200188cc
 800d2bc:	52000040 	.word	0x52000040

0800d2c0 <HAL_SPI_MspInit>:
  HAL_MDMA_DeInit(hjpeg->hdmaout);
}


void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b0be      	sub	sp, #248	@ 0xf8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2c8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	601a      	str	r2, [r3, #0]
 800d2d0:	605a      	str	r2, [r3, #4]
 800d2d2:	609a      	str	r2, [r3, #8]
 800d2d4:	60da      	str	r2, [r3, #12]
 800d2d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d2d8:	f107 0318 	add.w	r3, r7, #24
 800d2dc:	22c8      	movs	r2, #200	@ 0xc8
 800d2de:	2100      	movs	r1, #0
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f003 fad9 	bl	8010898 <memset>
  if(hspi->Instance==SPI5)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	4a39      	ldr	r2, [pc, #228]	@ (800d3d0 <HAL_SPI_MspInit+0x110>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d16a      	bne.n	800d3c6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800d2f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d2f4:	f04f 0300 	mov.w	r3, #0
 800d2f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d302:	f107 0318 	add.w	r3, r7, #24
 800d306:	4618      	mov	r0, r3
 800d308:	f7f7 fea2 	bl	8005050 <HAL_RCCEx_PeriphCLKConfig>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d001      	beq.n	800d316 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800d312:	f7ff f86d 	bl	800c3f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800d316:	4b2f      	ldr	r3, [pc, #188]	@ (800d3d4 <HAL_SPI_MspInit+0x114>)
 800d318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d31c:	4a2d      	ldr	r2, [pc, #180]	@ (800d3d4 <HAL_SPI_MspInit+0x114>)
 800d31e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d322:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d326:	4b2b      	ldr	r3, [pc, #172]	@ (800d3d4 <HAL_SPI_MspInit+0x114>)
 800d328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d32c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d330:	617b      	str	r3, [r7, #20]
 800d332:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800d334:	4b27      	ldr	r3, [pc, #156]	@ (800d3d4 <HAL_SPI_MspInit+0x114>)
 800d336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d33a:	4a26      	ldr	r2, [pc, #152]	@ (800d3d4 <HAL_SPI_MspInit+0x114>)
 800d33c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d340:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d344:	4b23      	ldr	r3, [pc, #140]	@ (800d3d4 <HAL_SPI_MspInit+0x114>)
 800d346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d34a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d34e:	613b      	str	r3, [r7, #16]
 800d350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800d352:	4b20      	ldr	r3, [pc, #128]	@ (800d3d4 <HAL_SPI_MspInit+0x114>)
 800d354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d358:	4a1e      	ldr	r2, [pc, #120]	@ (800d3d4 <HAL_SPI_MspInit+0x114>)
 800d35a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d35e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d362:	4b1c      	ldr	r3, [pc, #112]	@ (800d3d4 <HAL_SPI_MspInit+0x114>)
 800d364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d36c:	60fb      	str	r3, [r7, #12]
 800d36e:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PK0     ------> SPI5_SCK
    PJ11     ------> SPI5_MISO
    PJ10     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 800d370:	2301      	movs	r3, #1
 800d372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d376:	2302      	movs	r3, #2
 800d378:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d37c:	2300      	movs	r3, #0
 800d37e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d382:	2300      	movs	r3, #0
 800d384:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800d388:	2305      	movs	r3, #5
 800d38a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 800d38e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d392:	4619      	mov	r1, r3
 800d394:	4810      	ldr	r0, [pc, #64]	@ (800d3d8 <HAL_SPI_MspInit+0x118>)
 800d396:	f7f4 fa01 	bl	800179c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800d39a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800d39e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3a2:	2302      	movs	r3, #2
 800d3a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800d3b4:	2305      	movs	r3, #5
 800d3b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800d3ba:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800d3be:	4619      	mov	r1, r3
 800d3c0:	4806      	ldr	r0, [pc, #24]	@ (800d3dc <HAL_SPI_MspInit+0x11c>)
 800d3c2:	f7f4 f9eb 	bl	800179c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800d3c6:	bf00      	nop
 800d3c8:	37f8      	adds	r7, #248	@ 0xf8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	40015000 	.word	0x40015000
 800d3d4:	58024400 	.word	0x58024400
 800d3d8:	58022800 	.word	0x58022800
 800d3dc:	58022400 	.word	0x58022400

0800d3e0 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a0e      	ldr	r2, [pc, #56]	@ (800d428 <HAL_DMA2D_MspInit+0x48>)
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d116      	bne.n	800d420 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800d3f2:	4b0e      	ldr	r3, [pc, #56]	@ (800d42c <HAL_DMA2D_MspInit+0x4c>)
 800d3f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d3f8:	4a0c      	ldr	r2, [pc, #48]	@ (800d42c <HAL_DMA2D_MspInit+0x4c>)
 800d3fa:	f043 0310 	orr.w	r3, r3, #16
 800d3fe:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800d402:	4b0a      	ldr	r3, [pc, #40]	@ (800d42c <HAL_DMA2D_MspInit+0x4c>)
 800d404:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800d408:	f003 0310 	and.w	r3, r3, #16
 800d40c:	60fb      	str	r3, [r7, #12]
 800d40e:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800d410:	2200      	movs	r2, #0
 800d412:	2100      	movs	r1, #0
 800d414:	205a      	movs	r0, #90	@ 0x5a
 800d416:	f7f3 fe48 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800d41a:	205a      	movs	r0, #90	@ 0x5a
 800d41c:	f7f3 fe5f 	bl	80010de <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800d420:	bf00      	nop
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	52001000 	.word	0x52001000
 800d42c:	58024400 	.word	0x58024400

0800d430 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4a0e      	ldr	r2, [pc, #56]	@ (800d478 <HAL_TIM_Base_MspInit+0x48>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d116      	bne.n	800d470 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d442:	4b0e      	ldr	r3, [pc, #56]	@ (800d47c <HAL_TIM_Base_MspInit+0x4c>)
 800d444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d448:	4a0c      	ldr	r2, [pc, #48]	@ (800d47c <HAL_TIM_Base_MspInit+0x4c>)
 800d44a:	f043 0302 	orr.w	r3, r3, #2
 800d44e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800d452:	4b0a      	ldr	r3, [pc, #40]	@ (800d47c <HAL_TIM_Base_MspInit+0x4c>)
 800d454:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d458:	f003 0302 	and.w	r3, r3, #2
 800d45c:	60fb      	str	r3, [r7, #12]
 800d45e:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800d460:	2200      	movs	r2, #0
 800d462:	2100      	movs	r1, #0
 800d464:	201d      	movs	r0, #29
 800d466:	f7f3 fe20 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800d46a:	201d      	movs	r0, #29
 800d46c:	f7f3 fe37 	bl	80010de <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800d470:	bf00      	nop
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	40000400 	.word	0x40000400
 800d47c:	58024400 	.word	0x58024400

0800d480 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800d480:	b480      	push	{r7}
 800d482:	af00      	add	r7, sp, #0
}
 800d484:	bf00      	nop
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800d48e:	b480      	push	{r7}
 800d490:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800d492:	bf00      	nop
 800d494:	e7fd      	b.n	800d492 <HardFault_Handler+0x4>

0800d496 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800d496:	b480      	push	{r7}
 800d498:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800d49a:	bf00      	nop
 800d49c:	e7fd      	b.n	800d49a <MemManage_Handler+0x4>

0800d49e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800d49e:	b480      	push	{r7}
 800d4a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800d4a2:	bf00      	nop
 800d4a4:	e7fd      	b.n	800d4a2 <BusFault_Handler+0x4>

0800d4a6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800d4a6:	b480      	push	{r7}
 800d4a8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800d4aa:	bf00      	nop
 800d4ac:	e7fd      	b.n	800d4aa <UsageFault_Handler+0x4>

0800d4ae <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800d4ae:	b480      	push	{r7}
 800d4b0:	af00      	add	r7, sp, #0
}
 800d4b2:	bf00      	nop
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	af00      	add	r7, sp, #0
}
 800d4c0:	bf00      	nop
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr

0800d4ca <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800d4ca:	b480      	push	{r7}
 800d4cc:	af00      	add	r7, sp, #0
}
 800d4ce:	bf00      	nop
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800d4dc:	f7f3 fcaa 	bl	8000e34 <HAL_IncTick>
}
 800d4e0:	bf00      	nop
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <JPEG_IRQHandler>:
  * @param  None
  * @retval None
  */

void JPEG_IRQHandler(void)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	af00      	add	r7, sp, #0
  HAL_JPEG_IRQHandler(&JPEG_Handle);
 800d4e8:	4802      	ldr	r0, [pc, #8]	@ (800d4f4 <JPEG_IRQHandler+0x10>)
 800d4ea:	f7f4 fd53 	bl	8001f94 <HAL_JPEG_IRQHandler>
}
 800d4ee:	bf00      	nop
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	200001f0 	.word	0x200001f0

0800d4f8 <MDMA_IRQHandler>:
  * @param  None
  * @retval None
  */

void MDMA_IRQHandler()
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	af00      	add	r7, sp, #0
  /* Check the interrupt and clear flag */
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmain);
 800d4fc:	4b05      	ldr	r3, [pc, #20]	@ (800d514 <MDMA_IRQHandler+0x1c>)
 800d4fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d500:	4618      	mov	r0, r3
 800d502:	f7f6 fb17 	bl	8003b34 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(JPEG_Handle.hdmaout);  
 800d506:	4b03      	ldr	r3, [pc, #12]	@ (800d514 <MDMA_IRQHandler+0x1c>)
 800d508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7f6 fb12 	bl	8003b34 <HAL_MDMA_IRQHandler>
}
 800d510:	bf00      	nop
 800d512:	bd80      	pop	{r7, pc}
 800d514:	200001f0 	.word	0x200001f0

0800d518 <TIM3_IRQHandler>:



void TIM3_IRQHandler(void)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800d51e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800d522:	481b      	ldr	r0, [pc, #108]	@ (800d590 <TIM3_IRQHandler+0x78>)
 800d524:	f7f4 fb1b 	bl	8001b5e <HAL_GPIO_TogglePin>

  static uint16_t frames_old = 0;

  uint16_t frames = abs( AVI_Handel.CurrentImage - frames_old );
 800d528:	4b1a      	ldr	r3, [pc, #104]	@ (800d594 <TIM3_IRQHandler+0x7c>)
 800d52a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d52c:	4a1a      	ldr	r2, [pc, #104]	@ (800d598 <TIM3_IRQHandler+0x80>)
 800d52e:	8812      	ldrh	r2, [r2, #0]
 800d530:	1a9b      	subs	r3, r3, r2
 800d532:	2b00      	cmp	r3, #0
 800d534:	bfb8      	it	lt
 800d536:	425b      	neglt	r3, r3
 800d538:	80fb      	strh	r3, [r7, #6]

  uint16_t frame_actual = (2 / (float)( frame_time / 1000000.0 ) );
 800d53a:	4b18      	ldr	r3, [pc, #96]	@ (800d59c <TIM3_IRQHandler+0x84>)
 800d53c:	881b      	ldrh	r3, [r3, #0]
 800d53e:	ee07 3a90 	vmov	s15, r3
 800d542:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800d546:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 800d588 <TIM3_IRQHandler+0x70>
 800d54a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d54e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 800d552:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d55a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d55e:	ee17 3a90 	vmov	r3, s15
 800d562:	80bb      	strh	r3, [r7, #4]

  frameToSkip = ( frame_actual - frames );
 800d564:	88ba      	ldrh	r2, [r7, #4]
 800d566:	88fb      	ldrh	r3, [r7, #6]
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	b29a      	uxth	r2, r3
 800d56c:	4b0c      	ldr	r3, [pc, #48]	@ (800d5a0 <TIM3_IRQHandler+0x88>)
 800d56e:	801a      	strh	r2, [r3, #0]

  frames_old = AVI_Handel.CurrentImage;
 800d570:	4b08      	ldr	r3, [pc, #32]	@ (800d594 <TIM3_IRQHandler+0x7c>)
 800d572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d574:	b29a      	uxth	r2, r3
 800d576:	4b08      	ldr	r3, [pc, #32]	@ (800d598 <TIM3_IRQHandler+0x80>)
 800d578:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800d57a:	480a      	ldr	r0, [pc, #40]	@ (800d5a4 <TIM3_IRQHandler+0x8c>)
 800d57c:	f7fc fd5a 	bl	800a034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800d580:	bf00      	nop
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	00000000 	.word	0x00000000
 800d58c:	412e8480 	.word	0x412e8480
 800d590:	58020c00 	.word	0x58020c00
 800d594:	20018810 	.word	0x20018810
 800d598:	20018938 	.word	0x20018938
 800d59c:	2001885a 	.word	0x2001885a
 800d5a0:	20018858 	.word	0x20018858
 800d5a4:	200002c4 	.word	0x200002c4

0800d5a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b086      	sub	sp, #24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d5b0:	4a14      	ldr	r2, [pc, #80]	@ (800d604 <_sbrk+0x5c>)
 800d5b2:	4b15      	ldr	r3, [pc, #84]	@ (800d608 <_sbrk+0x60>)
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d5bc:	4b13      	ldr	r3, [pc, #76]	@ (800d60c <_sbrk+0x64>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d102      	bne.n	800d5ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d5c4:	4b11      	ldr	r3, [pc, #68]	@ (800d60c <_sbrk+0x64>)
 800d5c6:	4a12      	ldr	r2, [pc, #72]	@ (800d610 <_sbrk+0x68>)
 800d5c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d5ca:	4b10      	ldr	r3, [pc, #64]	@ (800d60c <_sbrk+0x64>)
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	4413      	add	r3, r2
 800d5d2:	693a      	ldr	r2, [r7, #16]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d207      	bcs.n	800d5e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d5d8:	f003 f976 	bl	80108c8 <__errno>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	220c      	movs	r2, #12
 800d5e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d5e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d5e6:	e009      	b.n	800d5fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d5e8:	4b08      	ldr	r3, [pc, #32]	@ (800d60c <_sbrk+0x64>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d5ee:	4b07      	ldr	r3, [pc, #28]	@ (800d60c <_sbrk+0x64>)
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	4a05      	ldr	r2, [pc, #20]	@ (800d60c <_sbrk+0x64>)
 800d5f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3718      	adds	r7, #24
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	20020000 	.word	0x20020000
 800d608:	00002000 	.word	0x00002000
 800d60c:	2001893c 	.word	0x2001893c
 800d610:	20018ac0 	.word	0x20018ac0

0800d614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800d614:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800d64c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800d618:	f7f3 fb12 	bl	8000c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d61c:	480c      	ldr	r0, [pc, #48]	@ (800d650 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800d61e:	490d      	ldr	r1, [pc, #52]	@ (800d654 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800d620:	4a0d      	ldr	r2, [pc, #52]	@ (800d658 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800d622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d624:	e002      	b.n	800d62c <LoopCopyDataInit>

0800d626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d62a:	3304      	adds	r3, #4

0800d62c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d62c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d62e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d630:	d3f9      	bcc.n	800d626 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d632:	4a0a      	ldr	r2, [pc, #40]	@ (800d65c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800d634:	4c0a      	ldr	r4, [pc, #40]	@ (800d660 <LoopFillZerobss+0x22>)
  movs r3, #0
 800d636:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d638:	e001      	b.n	800d63e <LoopFillZerobss>

0800d63a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d63a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d63c:	3204      	adds	r2, #4

0800d63e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d63e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d640:	d3fb      	bcc.n	800d63a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d642:	f003 f947 	bl	80108d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d646:	f7fe feaf 	bl	800c3a8 <main>
  bx  lr
 800d64a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d64c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800d650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d654:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800d658:	08011288 	.word	0x08011288
  ldr r2, =_sbss
 800d65c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800d660:	20018abc 	.word	0x20018abc

0800d664 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d664:	e7fe      	b.n	800d664 <ADC3_IRQHandler>
	...

0800d668 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	4603      	mov	r3, r0
 800d670:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d672:	79fb      	ldrb	r3, [r7, #7]
 800d674:	4a08      	ldr	r2, [pc, #32]	@ (800d698 <disk_status+0x30>)
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	4413      	add	r3, r2
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	79fa      	ldrb	r2, [r7, #7]
 800d680:	4905      	ldr	r1, [pc, #20]	@ (800d698 <disk_status+0x30>)
 800d682:	440a      	add	r2, r1
 800d684:	7a12      	ldrb	r2, [r2, #8]
 800d686:	4610      	mov	r0, r2
 800d688:	4798      	blx	r3
 800d68a:	4603      	mov	r3, r0
 800d68c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d690:	4618      	mov	r0, r3
 800d692:	3710      	adds	r7, #16
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	20018968 	.word	0x20018968

0800d69c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d6aa:	79fb      	ldrb	r3, [r7, #7]
 800d6ac:	4a0e      	ldr	r2, [pc, #56]	@ (800d6e8 <disk_initialize+0x4c>)
 800d6ae:	5cd3      	ldrb	r3, [r2, r3]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d114      	bne.n	800d6de <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d6b4:	79fb      	ldrb	r3, [r7, #7]
 800d6b6:	4a0c      	ldr	r2, [pc, #48]	@ (800d6e8 <disk_initialize+0x4c>)
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	4413      	add	r3, r2
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	79fa      	ldrb	r2, [r7, #7]
 800d6c2:	4909      	ldr	r1, [pc, #36]	@ (800d6e8 <disk_initialize+0x4c>)
 800d6c4:	440a      	add	r2, r1
 800d6c6:	7a12      	ldrb	r2, [r2, #8]
 800d6c8:	4610      	mov	r0, r2
 800d6ca:	4798      	blx	r3
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800d6d0:	7bfb      	ldrb	r3, [r7, #15]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d103      	bne.n	800d6de <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800d6d6:	79fb      	ldrb	r3, [r7, #7]
 800d6d8:	4a03      	ldr	r2, [pc, #12]	@ (800d6e8 <disk_initialize+0x4c>)
 800d6da:	2101      	movs	r1, #1
 800d6dc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3710      	adds	r7, #16
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	20018968 	.word	0x20018968

0800d6ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d6ec:	b590      	push	{r4, r7, lr}
 800d6ee:	b087      	sub	sp, #28
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60b9      	str	r1, [r7, #8]
 800d6f4:	607a      	str	r2, [r7, #4]
 800d6f6:	603b      	str	r3, [r7, #0]
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d6fc:	7bfb      	ldrb	r3, [r7, #15]
 800d6fe:	4a0a      	ldr	r2, [pc, #40]	@ (800d728 <disk_read+0x3c>)
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	4413      	add	r3, r2
 800d704:	685b      	ldr	r3, [r3, #4]
 800d706:	689c      	ldr	r4, [r3, #8]
 800d708:	7bfb      	ldrb	r3, [r7, #15]
 800d70a:	4a07      	ldr	r2, [pc, #28]	@ (800d728 <disk_read+0x3c>)
 800d70c:	4413      	add	r3, r2
 800d70e:	7a18      	ldrb	r0, [r3, #8]
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	68b9      	ldr	r1, [r7, #8]
 800d716:	47a0      	blx	r4
 800d718:	4603      	mov	r3, r0
 800d71a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d71c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	371c      	adds	r7, #28
 800d722:	46bd      	mov	sp, r7
 800d724:	bd90      	pop	{r4, r7, pc}
 800d726:	bf00      	nop
 800d728:	20018968 	.word	0x20018968

0800d72c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d72c:	b590      	push	{r4, r7, lr}
 800d72e:	b087      	sub	sp, #28
 800d730:	af00      	add	r7, sp, #0
 800d732:	60b9      	str	r1, [r7, #8]
 800d734:	607a      	str	r2, [r7, #4]
 800d736:	603b      	str	r3, [r7, #0]
 800d738:	4603      	mov	r3, r0
 800d73a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d73c:	7bfb      	ldrb	r3, [r7, #15]
 800d73e:	4a0a      	ldr	r2, [pc, #40]	@ (800d768 <disk_write+0x3c>)
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	4413      	add	r3, r2
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	68dc      	ldr	r4, [r3, #12]
 800d748:	7bfb      	ldrb	r3, [r7, #15]
 800d74a:	4a07      	ldr	r2, [pc, #28]	@ (800d768 <disk_write+0x3c>)
 800d74c:	4413      	add	r3, r2
 800d74e:	7a18      	ldrb	r0, [r3, #8]
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	68b9      	ldr	r1, [r7, #8]
 800d756:	47a0      	blx	r4
 800d758:	4603      	mov	r3, r0
 800d75a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d75c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d75e:	4618      	mov	r0, r3
 800d760:	371c      	adds	r7, #28
 800d762:	46bd      	mov	sp, r7
 800d764:	bd90      	pop	{r4, r7, pc}
 800d766:	bf00      	nop
 800d768:	20018968 	.word	0x20018968

0800d76c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	4603      	mov	r3, r0
 800d774:	603a      	str	r2, [r7, #0]
 800d776:	71fb      	strb	r3, [r7, #7]
 800d778:	460b      	mov	r3, r1
 800d77a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d77c:	79fb      	ldrb	r3, [r7, #7]
 800d77e:	4a09      	ldr	r2, [pc, #36]	@ (800d7a4 <disk_ioctl+0x38>)
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	4413      	add	r3, r2
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	691b      	ldr	r3, [r3, #16]
 800d788:	79fa      	ldrb	r2, [r7, #7]
 800d78a:	4906      	ldr	r1, [pc, #24]	@ (800d7a4 <disk_ioctl+0x38>)
 800d78c:	440a      	add	r2, r1
 800d78e:	7a10      	ldrb	r0, [r2, #8]
 800d790:	79b9      	ldrb	r1, [r7, #6]
 800d792:	683a      	ldr	r2, [r7, #0]
 800d794:	4798      	blx	r3
 800d796:	4603      	mov	r3, r0
 800d798:	73fb      	strb	r3, [r7, #15]
  return res;
 800d79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3710      	adds	r7, #16
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	20018968 	.word	0x20018968

0800d7a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	af00      	add	r7, sp, #0
  return 0;
 800d7ac:	2300      	movs	r3, #0
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b085      	sub	sp, #20
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d7c8:	89fb      	ldrh	r3, [r7, #14]
 800d7ca:	021b      	lsls	r3, r3, #8
 800d7cc:	b21a      	sxth	r2, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	b21b      	sxth	r3, r3
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	b21b      	sxth	r3, r3
 800d7d8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d7da:	89fb      	ldrh	r3, [r7, #14]
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3714      	adds	r7, #20
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b085      	sub	sp, #20
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	3303      	adds	r3, #3
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	021b      	lsls	r3, r3, #8
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	3202      	adds	r2, #2
 800d800:	7812      	ldrb	r2, [r2, #0]
 800d802:	4313      	orrs	r3, r2
 800d804:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	021b      	lsls	r3, r3, #8
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	3201      	adds	r2, #1
 800d80e:	7812      	ldrb	r2, [r2, #0]
 800d810:	4313      	orrs	r3, r2
 800d812:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	021b      	lsls	r3, r3, #8
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	7812      	ldrb	r2, [r2, #0]
 800d81c:	4313      	orrs	r3, r2
 800d81e:	60fb      	str	r3, [r7, #12]
	return rv;
 800d820:	68fb      	ldr	r3, [r7, #12]
}
 800d822:	4618      	mov	r0, r3
 800d824:	3714      	adds	r7, #20
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d82e:	b480      	push	{r7}
 800d830:	b083      	sub	sp, #12
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	460b      	mov	r3, r1
 800d838:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	1c5a      	adds	r2, r3, #1
 800d83e:	607a      	str	r2, [r7, #4]
 800d840:	887a      	ldrh	r2, [r7, #2]
 800d842:	b2d2      	uxtb	r2, r2
 800d844:	701a      	strb	r2, [r3, #0]
 800d846:	887b      	ldrh	r3, [r7, #2]
 800d848:	0a1b      	lsrs	r3, r3, #8
 800d84a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	1c5a      	adds	r2, r3, #1
 800d850:	607a      	str	r2, [r7, #4]
 800d852:	887a      	ldrh	r2, [r7, #2]
 800d854:	b2d2      	uxtb	r2, r2
 800d856:	701a      	strb	r2, [r3, #0]
}
 800d858:	bf00      	nop
 800d85a:	370c      	adds	r7, #12
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	1c5a      	adds	r2, r3, #1
 800d872:	607a      	str	r2, [r7, #4]
 800d874:	683a      	ldr	r2, [r7, #0]
 800d876:	b2d2      	uxtb	r2, r2
 800d878:	701a      	strb	r2, [r3, #0]
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	0a1b      	lsrs	r3, r3, #8
 800d87e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	1c5a      	adds	r2, r3, #1
 800d884:	607a      	str	r2, [r7, #4]
 800d886:	683a      	ldr	r2, [r7, #0]
 800d888:	b2d2      	uxtb	r2, r2
 800d88a:	701a      	strb	r2, [r3, #0]
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	0a1b      	lsrs	r3, r3, #8
 800d890:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	1c5a      	adds	r2, r3, #1
 800d896:	607a      	str	r2, [r7, #4]
 800d898:	683a      	ldr	r2, [r7, #0]
 800d89a:	b2d2      	uxtb	r2, r2
 800d89c:	701a      	strb	r2, [r3, #0]
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	0a1b      	lsrs	r3, r3, #8
 800d8a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	1c5a      	adds	r2, r3, #1
 800d8a8:	607a      	str	r2, [r7, #4]
 800d8aa:	683a      	ldr	r2, [r7, #0]
 800d8ac:	b2d2      	uxtb	r2, r2
 800d8ae:	701a      	strb	r2, [r3, #0]
}
 800d8b0:	bf00      	nop
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d8bc:	b480      	push	{r7}
 800d8be:	b087      	sub	sp, #28
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d00d      	beq.n	800d8f2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d8d6:	693a      	ldr	r2, [r7, #16]
 800d8d8:	1c53      	adds	r3, r2, #1
 800d8da:	613b      	str	r3, [r7, #16]
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	1c59      	adds	r1, r3, #1
 800d8e0:	6179      	str	r1, [r7, #20]
 800d8e2:	7812      	ldrb	r2, [r2, #0]
 800d8e4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	3b01      	subs	r3, #1
 800d8ea:	607b      	str	r3, [r7, #4]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1f1      	bne.n	800d8d6 <mem_cpy+0x1a>
	}
}
 800d8f2:	bf00      	nop
 800d8f4:	371c      	adds	r7, #28
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr

0800d8fe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d8fe:	b480      	push	{r7}
 800d900:	b087      	sub	sp, #28
 800d902:	af00      	add	r7, sp, #0
 800d904:	60f8      	str	r0, [r7, #12]
 800d906:	60b9      	str	r1, [r7, #8]
 800d908:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	1c5a      	adds	r2, r3, #1
 800d912:	617a      	str	r2, [r7, #20]
 800d914:	68ba      	ldr	r2, [r7, #8]
 800d916:	b2d2      	uxtb	r2, r2
 800d918:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	3b01      	subs	r3, #1
 800d91e:	607b      	str	r3, [r7, #4]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1f3      	bne.n	800d90e <mem_set+0x10>
}
 800d926:	bf00      	nop
 800d928:	bf00      	nop
 800d92a:	371c      	adds	r7, #28
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr

0800d934 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d934:	b480      	push	{r7}
 800d936:	b089      	sub	sp, #36	@ 0x24
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	61fb      	str	r3, [r7, #28]
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d948:	2300      	movs	r3, #0
 800d94a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	1c5a      	adds	r2, r3, #1
 800d950:	61fa      	str	r2, [r7, #28]
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	4619      	mov	r1, r3
 800d956:	69bb      	ldr	r3, [r7, #24]
 800d958:	1c5a      	adds	r2, r3, #1
 800d95a:	61ba      	str	r2, [r7, #24]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	1acb      	subs	r3, r1, r3
 800d960:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	3b01      	subs	r3, #1
 800d966:	607b      	str	r3, [r7, #4]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d002      	beq.n	800d974 <mem_cmp+0x40>
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d0eb      	beq.n	800d94c <mem_cmp+0x18>

	return r;
 800d974:	697b      	ldr	r3, [r7, #20]
}
 800d976:	4618      	mov	r0, r3
 800d978:	3724      	adds	r7, #36	@ 0x24
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr

0800d982 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d982:	b480      	push	{r7}
 800d984:	b083      	sub	sp, #12
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
 800d98a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d98c:	e002      	b.n	800d994 <chk_chr+0x12>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	3301      	adds	r3, #1
 800d992:	607b      	str	r3, [r7, #4]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d005      	beq.n	800d9a8 <chk_chr+0x26>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d1f2      	bne.n	800d98e <chk_chr+0xc>
	return *str;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	60bb      	str	r3, [r7, #8]
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	60fb      	str	r3, [r7, #12]
 800d9ca:	e029      	b.n	800da20 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d9cc:	4a27      	ldr	r2, [pc, #156]	@ (800da6c <chk_lock+0xb4>)
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	011b      	lsls	r3, r3, #4
 800d9d2:	4413      	add	r3, r2
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d01d      	beq.n	800da16 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d9da:	4a24      	ldr	r2, [pc, #144]	@ (800da6c <chk_lock+0xb4>)
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	011b      	lsls	r3, r3, #4
 800d9e0:	4413      	add	r3, r2
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d116      	bne.n	800da1a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d9ec:	4a1f      	ldr	r2, [pc, #124]	@ (800da6c <chk_lock+0xb4>)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	011b      	lsls	r3, r3, #4
 800d9f2:	4413      	add	r3, r2
 800d9f4:	3304      	adds	r3, #4
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d10c      	bne.n	800da1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800da00:	4a1a      	ldr	r2, [pc, #104]	@ (800da6c <chk_lock+0xb4>)
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	011b      	lsls	r3, r3, #4
 800da06:	4413      	add	r3, r2
 800da08:	3308      	adds	r3, #8
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800da10:	429a      	cmp	r2, r3
 800da12:	d102      	bne.n	800da1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800da14:	e007      	b.n	800da26 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800da16:	2301      	movs	r3, #1
 800da18:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	3301      	adds	r3, #1
 800da1e:	60fb      	str	r3, [r7, #12]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2b01      	cmp	r3, #1
 800da24:	d9d2      	bls.n	800d9cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2b02      	cmp	r3, #2
 800da2a:	d109      	bne.n	800da40 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d102      	bne.n	800da38 <chk_lock+0x80>
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	2b02      	cmp	r3, #2
 800da36:	d101      	bne.n	800da3c <chk_lock+0x84>
 800da38:	2300      	movs	r3, #0
 800da3a:	e010      	b.n	800da5e <chk_lock+0xa6>
 800da3c:	2312      	movs	r3, #18
 800da3e:	e00e      	b.n	800da5e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d108      	bne.n	800da58 <chk_lock+0xa0>
 800da46:	4a09      	ldr	r2, [pc, #36]	@ (800da6c <chk_lock+0xb4>)
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	011b      	lsls	r3, r3, #4
 800da4c:	4413      	add	r3, r2
 800da4e:	330c      	adds	r3, #12
 800da50:	881b      	ldrh	r3, [r3, #0]
 800da52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da56:	d101      	bne.n	800da5c <chk_lock+0xa4>
 800da58:	2310      	movs	r3, #16
 800da5a:	e000      	b.n	800da5e <chk_lock+0xa6>
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3714      	adds	r7, #20
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop
 800da6c:	20018948 	.word	0x20018948

0800da70 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800da76:	2300      	movs	r3, #0
 800da78:	607b      	str	r3, [r7, #4]
 800da7a:	e002      	b.n	800da82 <enq_lock+0x12>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	3301      	adds	r3, #1
 800da80:	607b      	str	r3, [r7, #4]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2b01      	cmp	r3, #1
 800da86:	d806      	bhi.n	800da96 <enq_lock+0x26>
 800da88:	4a09      	ldr	r2, [pc, #36]	@ (800dab0 <enq_lock+0x40>)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	011b      	lsls	r3, r3, #4
 800da8e:	4413      	add	r3, r2
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d1f2      	bne.n	800da7c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2b02      	cmp	r3, #2
 800da9a:	bf14      	ite	ne
 800da9c:	2301      	movne	r3, #1
 800da9e:	2300      	moveq	r3, #0
 800daa0:	b2db      	uxtb	r3, r3
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	370c      	adds	r7, #12
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	20018948 	.word	0x20018948

0800dab4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b085      	sub	sp, #20
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dabe:	2300      	movs	r3, #0
 800dac0:	60fb      	str	r3, [r7, #12]
 800dac2:	e01f      	b.n	800db04 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800dac4:	4a41      	ldr	r2, [pc, #260]	@ (800dbcc <inc_lock+0x118>)
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	011b      	lsls	r3, r3, #4
 800daca:	4413      	add	r3, r2
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d113      	bne.n	800dafe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800dad6:	4a3d      	ldr	r2, [pc, #244]	@ (800dbcc <inc_lock+0x118>)
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	011b      	lsls	r3, r3, #4
 800dadc:	4413      	add	r3, r2
 800dade:	3304      	adds	r3, #4
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d109      	bne.n	800dafe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800daea:	4a38      	ldr	r2, [pc, #224]	@ (800dbcc <inc_lock+0x118>)
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	011b      	lsls	r3, r3, #4
 800daf0:	4413      	add	r3, r2
 800daf2:	3308      	adds	r3, #8
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d006      	beq.n	800db0c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	3301      	adds	r3, #1
 800db02:	60fb      	str	r3, [r7, #12]
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2b01      	cmp	r3, #1
 800db08:	d9dc      	bls.n	800dac4 <inc_lock+0x10>
 800db0a:	e000      	b.n	800db0e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800db0c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2b02      	cmp	r3, #2
 800db12:	d132      	bne.n	800db7a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800db14:	2300      	movs	r3, #0
 800db16:	60fb      	str	r3, [r7, #12]
 800db18:	e002      	b.n	800db20 <inc_lock+0x6c>
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	3301      	adds	r3, #1
 800db1e:	60fb      	str	r3, [r7, #12]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d806      	bhi.n	800db34 <inc_lock+0x80>
 800db26:	4a29      	ldr	r2, [pc, #164]	@ (800dbcc <inc_lock+0x118>)
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	011b      	lsls	r3, r3, #4
 800db2c:	4413      	add	r3, r2
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d1f2      	bne.n	800db1a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2b02      	cmp	r3, #2
 800db38:	d101      	bne.n	800db3e <inc_lock+0x8a>
 800db3a:	2300      	movs	r3, #0
 800db3c:	e040      	b.n	800dbc0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	4922      	ldr	r1, [pc, #136]	@ (800dbcc <inc_lock+0x118>)
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	011b      	lsls	r3, r3, #4
 800db48:	440b      	add	r3, r1
 800db4a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	689a      	ldr	r2, [r3, #8]
 800db50:	491e      	ldr	r1, [pc, #120]	@ (800dbcc <inc_lock+0x118>)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	011b      	lsls	r3, r3, #4
 800db56:	440b      	add	r3, r1
 800db58:	3304      	adds	r3, #4
 800db5a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	695a      	ldr	r2, [r3, #20]
 800db60:	491a      	ldr	r1, [pc, #104]	@ (800dbcc <inc_lock+0x118>)
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	011b      	lsls	r3, r3, #4
 800db66:	440b      	add	r3, r1
 800db68:	3308      	adds	r3, #8
 800db6a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800db6c:	4a17      	ldr	r2, [pc, #92]	@ (800dbcc <inc_lock+0x118>)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	011b      	lsls	r3, r3, #4
 800db72:	4413      	add	r3, r2
 800db74:	330c      	adds	r3, #12
 800db76:	2200      	movs	r2, #0
 800db78:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d009      	beq.n	800db94 <inc_lock+0xe0>
 800db80:	4a12      	ldr	r2, [pc, #72]	@ (800dbcc <inc_lock+0x118>)
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	011b      	lsls	r3, r3, #4
 800db86:	4413      	add	r3, r2
 800db88:	330c      	adds	r3, #12
 800db8a:	881b      	ldrh	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d001      	beq.n	800db94 <inc_lock+0xe0>
 800db90:	2300      	movs	r3, #0
 800db92:	e015      	b.n	800dbc0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d108      	bne.n	800dbac <inc_lock+0xf8>
 800db9a:	4a0c      	ldr	r2, [pc, #48]	@ (800dbcc <inc_lock+0x118>)
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	011b      	lsls	r3, r3, #4
 800dba0:	4413      	add	r3, r2
 800dba2:	330c      	adds	r3, #12
 800dba4:	881b      	ldrh	r3, [r3, #0]
 800dba6:	3301      	adds	r3, #1
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	e001      	b.n	800dbb0 <inc_lock+0xfc>
 800dbac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dbb0:	4906      	ldr	r1, [pc, #24]	@ (800dbcc <inc_lock+0x118>)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	011b      	lsls	r3, r3, #4
 800dbb6:	440b      	add	r3, r1
 800dbb8:	330c      	adds	r3, #12
 800dbba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	3301      	adds	r3, #1
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3714      	adds	r7, #20
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr
 800dbcc:	20018948 	.word	0x20018948

0800dbd0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b085      	sub	sp, #20
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	3b01      	subs	r3, #1
 800dbdc:	607b      	str	r3, [r7, #4]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d825      	bhi.n	800dc30 <dec_lock+0x60>
		n = Files[i].ctr;
 800dbe4:	4a17      	ldr	r2, [pc, #92]	@ (800dc44 <dec_lock+0x74>)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	011b      	lsls	r3, r3, #4
 800dbea:	4413      	add	r3, r2
 800dbec:	330c      	adds	r3, #12
 800dbee:	881b      	ldrh	r3, [r3, #0]
 800dbf0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800dbf2:	89fb      	ldrh	r3, [r7, #14]
 800dbf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dbf8:	d101      	bne.n	800dbfe <dec_lock+0x2e>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800dbfe:	89fb      	ldrh	r3, [r7, #14]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d002      	beq.n	800dc0a <dec_lock+0x3a>
 800dc04:	89fb      	ldrh	r3, [r7, #14]
 800dc06:	3b01      	subs	r3, #1
 800dc08:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800dc0a:	4a0e      	ldr	r2, [pc, #56]	@ (800dc44 <dec_lock+0x74>)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	011b      	lsls	r3, r3, #4
 800dc10:	4413      	add	r3, r2
 800dc12:	330c      	adds	r3, #12
 800dc14:	89fa      	ldrh	r2, [r7, #14]
 800dc16:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800dc18:	89fb      	ldrh	r3, [r7, #14]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d105      	bne.n	800dc2a <dec_lock+0x5a>
 800dc1e:	4a09      	ldr	r2, [pc, #36]	@ (800dc44 <dec_lock+0x74>)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	011b      	lsls	r3, r3, #4
 800dc24:	4413      	add	r3, r2
 800dc26:	2200      	movs	r2, #0
 800dc28:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	737b      	strb	r3, [r7, #13]
 800dc2e:	e001      	b.n	800dc34 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800dc30:	2302      	movs	r3, #2
 800dc32:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800dc34:	7b7b      	ldrb	r3, [r7, #13]
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3714      	adds	r7, #20
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	20018948 	.word	0x20018948

0800dc48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800dc50:	2300      	movs	r3, #0
 800dc52:	60fb      	str	r3, [r7, #12]
 800dc54:	e010      	b.n	800dc78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dc56:	4a0d      	ldr	r2, [pc, #52]	@ (800dc8c <clear_lock+0x44>)
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	011b      	lsls	r3, r3, #4
 800dc5c:	4413      	add	r3, r2
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d105      	bne.n	800dc72 <clear_lock+0x2a>
 800dc66:	4a09      	ldr	r2, [pc, #36]	@ (800dc8c <clear_lock+0x44>)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	011b      	lsls	r3, r3, #4
 800dc6c:	4413      	add	r3, r2
 800dc6e:	2200      	movs	r2, #0
 800dc70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	3301      	adds	r3, #1
 800dc76:	60fb      	str	r3, [r7, #12]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d9eb      	bls.n	800dc56 <clear_lock+0xe>
	}
}
 800dc7e:	bf00      	nop
 800dc80:	bf00      	nop
 800dc82:	3714      	adds	r7, #20
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	20018948 	.word	0x20018948

0800dc90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b086      	sub	sp, #24
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	78db      	ldrb	r3, [r3, #3]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d034      	beq.n	800dd0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dca8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	7858      	ldrb	r0, [r3, #1]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	697a      	ldr	r2, [r7, #20]
 800dcb8:	f7ff fd38 	bl	800d72c <disk_write>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d002      	beq.n	800dcc8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	73fb      	strb	r3, [r7, #15]
 800dcc6:	e022      	b.n	800dd0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2200      	movs	r2, #0
 800dccc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcd2:	697a      	ldr	r2, [r7, #20]
 800dcd4:	1ad2      	subs	r2, r2, r3
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	69db      	ldr	r3, [r3, #28]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d217      	bcs.n	800dd0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	789b      	ldrb	r3, [r3, #2]
 800dce2:	613b      	str	r3, [r7, #16]
 800dce4:	e010      	b.n	800dd08 <sync_window+0x78>
					wsect += fs->fsize;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	69db      	ldr	r3, [r3, #28]
 800dcea:	697a      	ldr	r2, [r7, #20]
 800dcec:	4413      	add	r3, r2
 800dcee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	7858      	ldrb	r0, [r3, #1]
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	697a      	ldr	r2, [r7, #20]
 800dcfe:	f7ff fd15 	bl	800d72c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	3b01      	subs	r3, #1
 800dd06:	613b      	str	r3, [r7, #16]
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d8eb      	bhi.n	800dce6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800dd0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3718      	adds	r7, #24
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dd22:	2300      	movs	r3, #0
 800dd24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd2a:	683a      	ldr	r2, [r7, #0]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d01b      	beq.n	800dd68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f7ff ffad 	bl	800dc90 <sync_window>
 800dd36:	4603      	mov	r3, r0
 800dd38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800dd3a:	7bfb      	ldrb	r3, [r7, #15]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d113      	bne.n	800dd68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	7858      	ldrb	r0, [r3, #1]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	683a      	ldr	r2, [r7, #0]
 800dd4e:	f7ff fccd 	bl	800d6ec <disk_read>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d004      	beq.n	800dd62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dd58:	f04f 33ff 	mov.w	r3, #4294967295
 800dd5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	683a      	ldr	r2, [r7, #0]
 800dd66:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800dd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
	...

0800dd74 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f7ff ff87 	bl	800dc90 <sync_window>
 800dd82:	4603      	mov	r3, r0
 800dd84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dd86:	7bfb      	ldrb	r3, [r7, #15]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d158      	bne.n	800de3e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	2b03      	cmp	r3, #3
 800dd92:	d148      	bne.n	800de26 <sync_fs+0xb2>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	791b      	ldrb	r3, [r3, #4]
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d144      	bne.n	800de26 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	3334      	adds	r3, #52	@ 0x34
 800dda0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dda4:	2100      	movs	r1, #0
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7ff fda9 	bl	800d8fe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	3334      	adds	r3, #52	@ 0x34
 800ddb0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ddb4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7ff fd38 	bl	800d82e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	3334      	adds	r3, #52	@ 0x34
 800ddc2:	4921      	ldr	r1, [pc, #132]	@ (800de48 <sync_fs+0xd4>)
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7ff fd4d 	bl	800d864 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	3334      	adds	r3, #52	@ 0x34
 800ddce:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ddd2:	491e      	ldr	r1, [pc, #120]	@ (800de4c <sync_fs+0xd8>)
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7ff fd45 	bl	800d864 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	3334      	adds	r3, #52	@ 0x34
 800ddde:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	695b      	ldr	r3, [r3, #20]
 800dde6:	4619      	mov	r1, r3
 800dde8:	4610      	mov	r0, r2
 800ddea:	f7ff fd3b 	bl	800d864 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	3334      	adds	r3, #52	@ 0x34
 800ddf2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	691b      	ldr	r3, [r3, #16]
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	4610      	mov	r0, r2
 800ddfe:	f7ff fd31 	bl	800d864 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	1c5a      	adds	r2, r3, #1
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	7858      	ldrb	r0, [r3, #1]
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de1a:	2301      	movs	r3, #1
 800de1c:	f7ff fc86 	bl	800d72c <disk_write>
			fs->fsi_flag = 0;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2200      	movs	r2, #0
 800de24:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	785b      	ldrb	r3, [r3, #1]
 800de2a:	2200      	movs	r2, #0
 800de2c:	2100      	movs	r1, #0
 800de2e:	4618      	mov	r0, r3
 800de30:	f7ff fc9c 	bl	800d76c <disk_ioctl>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <sync_fs+0xca>
 800de3a:	2301      	movs	r3, #1
 800de3c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800de3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3710      	adds	r7, #16
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	41615252 	.word	0x41615252
 800de4c:	61417272 	.word	0x61417272

0800de50 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800de50:	b480      	push	{r7}
 800de52:	b083      	sub	sp, #12
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	3b02      	subs	r3, #2
 800de5e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	699b      	ldr	r3, [r3, #24]
 800de64:	3b02      	subs	r3, #2
 800de66:	683a      	ldr	r2, [r7, #0]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d301      	bcc.n	800de70 <clust2sect+0x20>
 800de6c:	2300      	movs	r3, #0
 800de6e:	e008      	b.n	800de82 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	895b      	ldrh	r3, [r3, #10]
 800de74:	461a      	mov	r2, r3
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	fb03 f202 	mul.w	r2, r3, r2
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de80:	4413      	add	r3, r2
}
 800de82:	4618      	mov	r0, r3
 800de84:	370c      	adds	r7, #12
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr

0800de8e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800de8e:	b580      	push	{r7, lr}
 800de90:	b086      	sub	sp, #24
 800de92:	af00      	add	r7, sp, #0
 800de94:	6078      	str	r0, [r7, #4]
 800de96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d904      	bls.n	800deae <get_fat+0x20>
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	699b      	ldr	r3, [r3, #24]
 800dea8:	683a      	ldr	r2, [r7, #0]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d302      	bcc.n	800deb4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800deae:	2301      	movs	r3, #1
 800deb0:	617b      	str	r3, [r7, #20]
 800deb2:	e08e      	b.n	800dfd2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800deb4:	f04f 33ff 	mov.w	r3, #4294967295
 800deb8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	2b03      	cmp	r3, #3
 800dec0:	d061      	beq.n	800df86 <get_fat+0xf8>
 800dec2:	2b03      	cmp	r3, #3
 800dec4:	dc7b      	bgt.n	800dfbe <get_fat+0x130>
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d002      	beq.n	800ded0 <get_fat+0x42>
 800deca:	2b02      	cmp	r3, #2
 800decc:	d041      	beq.n	800df52 <get_fat+0xc4>
 800dece:	e076      	b.n	800dfbe <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	60fb      	str	r3, [r7, #12]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	085b      	lsrs	r3, r3, #1
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	4413      	add	r3, r2
 800dedc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	0a5b      	lsrs	r3, r3, #9
 800dee6:	4413      	add	r3, r2
 800dee8:	4619      	mov	r1, r3
 800deea:	6938      	ldr	r0, [r7, #16]
 800deec:	f7ff ff14 	bl	800dd18 <move_window>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d166      	bne.n	800dfc4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	1c5a      	adds	r2, r3, #1
 800defa:	60fa      	str	r2, [r7, #12]
 800defc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df00:	693a      	ldr	r2, [r7, #16]
 800df02:	4413      	add	r3, r2
 800df04:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800df08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	0a5b      	lsrs	r3, r3, #9
 800df12:	4413      	add	r3, r2
 800df14:	4619      	mov	r1, r3
 800df16:	6938      	ldr	r0, [r7, #16]
 800df18:	f7ff fefe 	bl	800dd18 <move_window>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d152      	bne.n	800dfc8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df28:	693a      	ldr	r2, [r7, #16]
 800df2a:	4413      	add	r3, r2
 800df2c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800df30:	021b      	lsls	r3, r3, #8
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	4313      	orrs	r3, r2
 800df36:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	f003 0301 	and.w	r3, r3, #1
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d002      	beq.n	800df48 <get_fat+0xba>
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	091b      	lsrs	r3, r3, #4
 800df46:	e002      	b.n	800df4e <get_fat+0xc0>
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df4e:	617b      	str	r3, [r7, #20]
			break;
 800df50:	e03f      	b.n	800dfd2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	0a1b      	lsrs	r3, r3, #8
 800df5a:	4413      	add	r3, r2
 800df5c:	4619      	mov	r1, r3
 800df5e:	6938      	ldr	r0, [r7, #16]
 800df60:	f7ff feda 	bl	800dd18 <move_window>
 800df64:	4603      	mov	r3, r0
 800df66:	2b00      	cmp	r3, #0
 800df68:	d130      	bne.n	800dfcc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	005b      	lsls	r3, r3, #1
 800df74:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800df78:	4413      	add	r3, r2
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7ff fc1c 	bl	800d7b8 <ld_word>
 800df80:	4603      	mov	r3, r0
 800df82:	617b      	str	r3, [r7, #20]
			break;
 800df84:	e025      	b.n	800dfd2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	09db      	lsrs	r3, r3, #7
 800df8e:	4413      	add	r3, r2
 800df90:	4619      	mov	r1, r3
 800df92:	6938      	ldr	r0, [r7, #16]
 800df94:	f7ff fec0 	bl	800dd18 <move_window>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d118      	bne.n	800dfd0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800dfac:	4413      	add	r3, r2
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7ff fc1a 	bl	800d7e8 <ld_dword>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800dfba:	617b      	str	r3, [r7, #20]
			break;
 800dfbc:	e009      	b.n	800dfd2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	617b      	str	r3, [r7, #20]
 800dfc2:	e006      	b.n	800dfd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dfc4:	bf00      	nop
 800dfc6:	e004      	b.n	800dfd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dfc8:	bf00      	nop
 800dfca:	e002      	b.n	800dfd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dfcc:	bf00      	nop
 800dfce:	e000      	b.n	800dfd2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dfd0:	bf00      	nop
		}
	}

	return val;
 800dfd2:	697b      	ldr	r3, [r7, #20]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3718      	adds	r7, #24
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dfdc:	b590      	push	{r4, r7, lr}
 800dfde:	b089      	sub	sp, #36	@ 0x24
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dfe8:	2302      	movs	r3, #2
 800dfea:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	2b01      	cmp	r3, #1
 800dff0:	f240 80d9 	bls.w	800e1a6 <put_fat+0x1ca>
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	699b      	ldr	r3, [r3, #24]
 800dff8:	68ba      	ldr	r2, [r7, #8]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	f080 80d3 	bcs.w	800e1a6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	781b      	ldrb	r3, [r3, #0]
 800e004:	2b03      	cmp	r3, #3
 800e006:	f000 8096 	beq.w	800e136 <put_fat+0x15a>
 800e00a:	2b03      	cmp	r3, #3
 800e00c:	f300 80cb 	bgt.w	800e1a6 <put_fat+0x1ca>
 800e010:	2b01      	cmp	r3, #1
 800e012:	d002      	beq.n	800e01a <put_fat+0x3e>
 800e014:	2b02      	cmp	r3, #2
 800e016:	d06e      	beq.n	800e0f6 <put_fat+0x11a>
 800e018:	e0c5      	b.n	800e1a6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	61bb      	str	r3, [r7, #24]
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	085b      	lsrs	r3, r3, #1
 800e022:	69ba      	ldr	r2, [r7, #24]
 800e024:	4413      	add	r3, r2
 800e026:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e02c:	69bb      	ldr	r3, [r7, #24]
 800e02e:	0a5b      	lsrs	r3, r3, #9
 800e030:	4413      	add	r3, r2
 800e032:	4619      	mov	r1, r3
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f7ff fe6f 	bl	800dd18 <move_window>
 800e03a:	4603      	mov	r3, r0
 800e03c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e03e:	7ffb      	ldrb	r3, [r7, #31]
 800e040:	2b00      	cmp	r3, #0
 800e042:	f040 80a9 	bne.w	800e198 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	1c59      	adds	r1, r3, #1
 800e050:	61b9      	str	r1, [r7, #24]
 800e052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e056:	4413      	add	r3, r2
 800e058:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	f003 0301 	and.w	r3, r3, #1
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00d      	beq.n	800e080 <put_fat+0xa4>
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	b25b      	sxtb	r3, r3
 800e06a:	f003 030f 	and.w	r3, r3, #15
 800e06e:	b25a      	sxtb	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	b2db      	uxtb	r3, r3
 800e074:	011b      	lsls	r3, r3, #4
 800e076:	b25b      	sxtb	r3, r3
 800e078:	4313      	orrs	r3, r2
 800e07a:	b25b      	sxtb	r3, r3
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	e001      	b.n	800e084 <put_fat+0xa8>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	b2db      	uxtb	r3, r3
 800e084:	697a      	ldr	r2, [r7, #20]
 800e086:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2201      	movs	r2, #1
 800e08c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e092:	69bb      	ldr	r3, [r7, #24]
 800e094:	0a5b      	lsrs	r3, r3, #9
 800e096:	4413      	add	r3, r2
 800e098:	4619      	mov	r1, r3
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	f7ff fe3c 	bl	800dd18 <move_window>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e0a4:	7ffb      	ldrb	r3, [r7, #31]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d178      	bne.n	800e19c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e0b0:	69bb      	ldr	r3, [r7, #24]
 800e0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0b6:	4413      	add	r3, r2
 800e0b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	f003 0301 	and.w	r3, r3, #1
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d003      	beq.n	800e0cc <put_fat+0xf0>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	091b      	lsrs	r3, r3, #4
 800e0c8:	b2db      	uxtb	r3, r3
 800e0ca:	e00e      	b.n	800e0ea <put_fat+0x10e>
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	b25b      	sxtb	r3, r3
 800e0d2:	f023 030f 	bic.w	r3, r3, #15
 800e0d6:	b25a      	sxtb	r2, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	0a1b      	lsrs	r3, r3, #8
 800e0dc:	b25b      	sxtb	r3, r3
 800e0de:	f003 030f 	and.w	r3, r3, #15
 800e0e2:	b25b      	sxtb	r3, r3
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	b25b      	sxtb	r3, r3
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	697a      	ldr	r2, [r7, #20]
 800e0ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	70da      	strb	r2, [r3, #3]
			break;
 800e0f4:	e057      	b.n	800e1a6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	0a1b      	lsrs	r3, r3, #8
 800e0fe:	4413      	add	r3, r2
 800e100:	4619      	mov	r1, r3
 800e102:	68f8      	ldr	r0, [r7, #12]
 800e104:	f7ff fe08 	bl	800dd18 <move_window>
 800e108:	4603      	mov	r3, r0
 800e10a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e10c:	7ffb      	ldrb	r3, [r7, #31]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d146      	bne.n	800e1a0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	005b      	lsls	r3, r3, #1
 800e11c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e120:	4413      	add	r3, r2
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	b292      	uxth	r2, r2
 800e126:	4611      	mov	r1, r2
 800e128:	4618      	mov	r0, r3
 800e12a:	f7ff fb80 	bl	800d82e <st_word>
			fs->wflag = 1;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2201      	movs	r2, #1
 800e132:	70da      	strb	r2, [r3, #3]
			break;
 800e134:	e037      	b.n	800e1a6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e13a:	68bb      	ldr	r3, [r7, #8]
 800e13c:	09db      	lsrs	r3, r3, #7
 800e13e:	4413      	add	r3, r2
 800e140:	4619      	mov	r1, r3
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f7ff fde8 	bl	800dd18 <move_window>
 800e148:	4603      	mov	r3, r0
 800e14a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e14c:	7ffb      	ldrb	r3, [r7, #31]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d128      	bne.n	800e1a4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e166:	4413      	add	r3, r2
 800e168:	4618      	mov	r0, r3
 800e16a:	f7ff fb3d 	bl	800d7e8 <ld_dword>
 800e16e:	4603      	mov	r3, r0
 800e170:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e174:	4323      	orrs	r3, r4
 800e176:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e186:	4413      	add	r3, r2
 800e188:	6879      	ldr	r1, [r7, #4]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7ff fb6a 	bl	800d864 <st_dword>
			fs->wflag = 1;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2201      	movs	r2, #1
 800e194:	70da      	strb	r2, [r3, #3]
			break;
 800e196:	e006      	b.n	800e1a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e198:	bf00      	nop
 800e19a:	e004      	b.n	800e1a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e19c:	bf00      	nop
 800e19e:	e002      	b.n	800e1a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e1a0:	bf00      	nop
 800e1a2:	e000      	b.n	800e1a6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e1a4:	bf00      	nop
		}
	}
	return res;
 800e1a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3724      	adds	r7, #36	@ 0x24
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd90      	pop	{r4, r7, pc}

0800e1b0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b088      	sub	sp, #32
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	60b9      	str	r1, [r7, #8]
 800e1ba:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d904      	bls.n	800e1d6 <remove_chain+0x26>
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	699b      	ldr	r3, [r3, #24]
 800e1d0:	68ba      	ldr	r2, [r7, #8]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d301      	bcc.n	800e1da <remove_chain+0x2a>
 800e1d6:	2302      	movs	r3, #2
 800e1d8:	e04b      	b.n	800e272 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d00c      	beq.n	800e1fa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e4:	6879      	ldr	r1, [r7, #4]
 800e1e6:	69b8      	ldr	r0, [r7, #24]
 800e1e8:	f7ff fef8 	bl	800dfdc <put_fat>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e1f0:	7ffb      	ldrb	r3, [r7, #31]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d001      	beq.n	800e1fa <remove_chain+0x4a>
 800e1f6:	7ffb      	ldrb	r3, [r7, #31]
 800e1f8:	e03b      	b.n	800e272 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e1fa:	68b9      	ldr	r1, [r7, #8]
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f7ff fe46 	bl	800de8e <get_fat>
 800e202:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d031      	beq.n	800e26e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d101      	bne.n	800e214 <remove_chain+0x64>
 800e210:	2302      	movs	r3, #2
 800e212:	e02e      	b.n	800e272 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e21a:	d101      	bne.n	800e220 <remove_chain+0x70>
 800e21c:	2301      	movs	r3, #1
 800e21e:	e028      	b.n	800e272 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e220:	2200      	movs	r2, #0
 800e222:	68b9      	ldr	r1, [r7, #8]
 800e224:	69b8      	ldr	r0, [r7, #24]
 800e226:	f7ff fed9 	bl	800dfdc <put_fat>
 800e22a:	4603      	mov	r3, r0
 800e22c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e22e:	7ffb      	ldrb	r3, [r7, #31]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <remove_chain+0x88>
 800e234:	7ffb      	ldrb	r3, [r7, #31]
 800e236:	e01c      	b.n	800e272 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	695a      	ldr	r2, [r3, #20]
 800e23c:	69bb      	ldr	r3, [r7, #24]
 800e23e:	699b      	ldr	r3, [r3, #24]
 800e240:	3b02      	subs	r3, #2
 800e242:	429a      	cmp	r2, r3
 800e244:	d20b      	bcs.n	800e25e <remove_chain+0xae>
			fs->free_clst++;
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	695b      	ldr	r3, [r3, #20]
 800e24a:	1c5a      	adds	r2, r3, #1
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e250:	69bb      	ldr	r3, [r7, #24]
 800e252:	791b      	ldrb	r3, [r3, #4]
 800e254:	f043 0301 	orr.w	r3, r3, #1
 800e258:	b2da      	uxtb	r2, r3
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	699b      	ldr	r3, [r3, #24]
 800e266:	68ba      	ldr	r2, [r7, #8]
 800e268:	429a      	cmp	r2, r3
 800e26a:	d3c6      	bcc.n	800e1fa <remove_chain+0x4a>
 800e26c:	e000      	b.n	800e270 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e26e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e270:	2300      	movs	r3, #0
}
 800e272:	4618      	mov	r0, r3
 800e274:	3720      	adds	r7, #32
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b088      	sub	sp, #32
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
 800e282:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d10d      	bne.n	800e2ac <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	691b      	ldr	r3, [r3, #16]
 800e294:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e296:	69bb      	ldr	r3, [r7, #24]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d004      	beq.n	800e2a6 <create_chain+0x2c>
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	699b      	ldr	r3, [r3, #24]
 800e2a0:	69ba      	ldr	r2, [r7, #24]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d31b      	bcc.n	800e2de <create_chain+0x64>
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	61bb      	str	r3, [r7, #24]
 800e2aa:	e018      	b.n	800e2de <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e2ac:	6839      	ldr	r1, [r7, #0]
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f7ff fded 	bl	800de8e <get_fat>
 800e2b4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d801      	bhi.n	800e2c0 <create_chain+0x46>
 800e2bc:	2301      	movs	r3, #1
 800e2be:	e070      	b.n	800e3a2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c6:	d101      	bne.n	800e2cc <create_chain+0x52>
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	e06a      	b.n	800e3a2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	699b      	ldr	r3, [r3, #24]
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d201      	bcs.n	800e2da <create_chain+0x60>
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	e063      	b.n	800e3a2 <create_chain+0x128>
		scl = clst;
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e2de:	69bb      	ldr	r3, [r7, #24]
 800e2e0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	699b      	ldr	r3, [r3, #24]
 800e2ec:	69fa      	ldr	r2, [r7, #28]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d307      	bcc.n	800e302 <create_chain+0x88>
				ncl = 2;
 800e2f2:	2302      	movs	r3, #2
 800e2f4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e2f6:	69fa      	ldr	r2, [r7, #28]
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d901      	bls.n	800e302 <create_chain+0x88>
 800e2fe:	2300      	movs	r3, #0
 800e300:	e04f      	b.n	800e3a2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e302:	69f9      	ldr	r1, [r7, #28]
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f7ff fdc2 	bl	800de8e <get_fat>
 800e30a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d00e      	beq.n	800e330 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2b01      	cmp	r3, #1
 800e316:	d003      	beq.n	800e320 <create_chain+0xa6>
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e31e:	d101      	bne.n	800e324 <create_chain+0xaa>
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	e03e      	b.n	800e3a2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e324:	69fa      	ldr	r2, [r7, #28]
 800e326:	69bb      	ldr	r3, [r7, #24]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d1da      	bne.n	800e2e2 <create_chain+0x68>
 800e32c:	2300      	movs	r3, #0
 800e32e:	e038      	b.n	800e3a2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e330:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e332:	f04f 32ff 	mov.w	r2, #4294967295
 800e336:	69f9      	ldr	r1, [r7, #28]
 800e338:	6938      	ldr	r0, [r7, #16]
 800e33a:	f7ff fe4f 	bl	800dfdc <put_fat>
 800e33e:	4603      	mov	r3, r0
 800e340:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e342:	7dfb      	ldrb	r3, [r7, #23]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d109      	bne.n	800e35c <create_chain+0xe2>
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d006      	beq.n	800e35c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e34e:	69fa      	ldr	r2, [r7, #28]
 800e350:	6839      	ldr	r1, [r7, #0]
 800e352:	6938      	ldr	r0, [r7, #16]
 800e354:	f7ff fe42 	bl	800dfdc <put_fat>
 800e358:	4603      	mov	r3, r0
 800e35a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e35c:	7dfb      	ldrb	r3, [r7, #23]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d116      	bne.n	800e390 <create_chain+0x116>
		fs->last_clst = ncl;
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	69fa      	ldr	r2, [r7, #28]
 800e366:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	695a      	ldr	r2, [r3, #20]
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	699b      	ldr	r3, [r3, #24]
 800e370:	3b02      	subs	r3, #2
 800e372:	429a      	cmp	r2, r3
 800e374:	d804      	bhi.n	800e380 <create_chain+0x106>
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	695b      	ldr	r3, [r3, #20]
 800e37a:	1e5a      	subs	r2, r3, #1
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	791b      	ldrb	r3, [r3, #4]
 800e384:	f043 0301 	orr.w	r3, r3, #1
 800e388:	b2da      	uxtb	r2, r3
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	711a      	strb	r2, [r3, #4]
 800e38e:	e007      	b.n	800e3a0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e390:	7dfb      	ldrb	r3, [r7, #23]
 800e392:	2b01      	cmp	r3, #1
 800e394:	d102      	bne.n	800e39c <create_chain+0x122>
 800e396:	f04f 33ff 	mov.w	r3, #4294967295
 800e39a:	e000      	b.n	800e39e <create_chain+0x124>
 800e39c:	2301      	movs	r3, #1
 800e39e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e3a0:	69fb      	ldr	r3, [r7, #28]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3720      	adds	r7, #32
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e3aa:	b480      	push	{r7}
 800e3ac:	b087      	sub	sp, #28
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	6078      	str	r0, [r7, #4]
 800e3b2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3be:	3304      	adds	r3, #4
 800e3c0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	0a5b      	lsrs	r3, r3, #9
 800e3c6:	68fa      	ldr	r2, [r7, #12]
 800e3c8:	8952      	ldrh	r2, [r2, #10]
 800e3ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3ce:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	1d1a      	adds	r2, r3, #4
 800e3d4:	613a      	str	r2, [r7, #16]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d101      	bne.n	800e3e4 <clmt_clust+0x3a>
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	e010      	b.n	800e406 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e3e4:	697a      	ldr	r2, [r7, #20]
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d307      	bcc.n	800e3fc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e3ec:	697a      	ldr	r2, [r7, #20]
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	617b      	str	r3, [r7, #20]
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	3304      	adds	r3, #4
 800e3f8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e3fa:	e7e9      	b.n	800e3d0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e3fc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	4413      	add	r3, r2
}
 800e406:	4618      	mov	r0, r3
 800e408:	371c      	adds	r7, #28
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr

0800e412 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e412:	b580      	push	{r7, lr}
 800e414:	b086      	sub	sp, #24
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
 800e41a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e428:	d204      	bcs.n	800e434 <dir_sdi+0x22>
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	f003 031f 	and.w	r3, r3, #31
 800e430:	2b00      	cmp	r3, #0
 800e432:	d001      	beq.n	800e438 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e434:	2302      	movs	r3, #2
 800e436:	e063      	b.n	800e500 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	683a      	ldr	r2, [r7, #0]
 800e43c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d106      	bne.n	800e458 <dir_sdi+0x46>
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	2b02      	cmp	r3, #2
 800e450:	d902      	bls.n	800e458 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e456:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d10c      	bne.n	800e478 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	095b      	lsrs	r3, r3, #5
 800e462:	693a      	ldr	r2, [r7, #16]
 800e464:	8912      	ldrh	r2, [r2, #8]
 800e466:	4293      	cmp	r3, r2
 800e468:	d301      	bcc.n	800e46e <dir_sdi+0x5c>
 800e46a:	2302      	movs	r3, #2
 800e46c:	e048      	b.n	800e500 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	61da      	str	r2, [r3, #28]
 800e476:	e029      	b.n	800e4cc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	895b      	ldrh	r3, [r3, #10]
 800e47c:	025b      	lsls	r3, r3, #9
 800e47e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e480:	e019      	b.n	800e4b6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6979      	ldr	r1, [r7, #20]
 800e486:	4618      	mov	r0, r3
 800e488:	f7ff fd01 	bl	800de8e <get_fat>
 800e48c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e494:	d101      	bne.n	800e49a <dir_sdi+0x88>
 800e496:	2301      	movs	r3, #1
 800e498:	e032      	b.n	800e500 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d904      	bls.n	800e4aa <dir_sdi+0x98>
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	699b      	ldr	r3, [r3, #24]
 800e4a4:	697a      	ldr	r2, [r7, #20]
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d301      	bcc.n	800e4ae <dir_sdi+0x9c>
 800e4aa:	2302      	movs	r3, #2
 800e4ac:	e028      	b.n	800e500 <dir_sdi+0xee>
			ofs -= csz;
 800e4ae:	683a      	ldr	r2, [r7, #0]
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	1ad3      	subs	r3, r2, r3
 800e4b4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e4b6:	683a      	ldr	r2, [r7, #0]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d2e1      	bcs.n	800e482 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e4be:	6979      	ldr	r1, [r7, #20]
 800e4c0:	6938      	ldr	r0, [r7, #16]
 800e4c2:	f7ff fcc5 	bl	800de50 <clust2sect>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	697a      	ldr	r2, [r7, #20]
 800e4d0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	69db      	ldr	r3, [r3, #28]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d101      	bne.n	800e4de <dir_sdi+0xcc>
 800e4da:	2302      	movs	r3, #2
 800e4dc:	e010      	b.n	800e500 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	69da      	ldr	r2, [r3, #28]
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	0a5b      	lsrs	r3, r3, #9
 800e4e6:	441a      	add	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4f8:	441a      	add	r2, r3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e4fe:	2300      	movs	r3, #0
}
 800e500:	4618      	mov	r0, r3
 800e502:	3718      	adds	r7, #24
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b086      	sub	sp, #24
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	695b      	ldr	r3, [r3, #20]
 800e51c:	3320      	adds	r3, #32
 800e51e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	69db      	ldr	r3, [r3, #28]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d003      	beq.n	800e530 <dir_next+0x28>
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e52e:	d301      	bcc.n	800e534 <dir_next+0x2c>
 800e530:	2304      	movs	r3, #4
 800e532:	e0aa      	b.n	800e68a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f040 8098 	bne.w	800e670 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	69db      	ldr	r3, [r3, #28]
 800e544:	1c5a      	adds	r2, r3, #1
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	699b      	ldr	r3, [r3, #24]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d10b      	bne.n	800e56a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	095b      	lsrs	r3, r3, #5
 800e556:	68fa      	ldr	r2, [r7, #12]
 800e558:	8912      	ldrh	r2, [r2, #8]
 800e55a:	4293      	cmp	r3, r2
 800e55c:	f0c0 8088 	bcc.w	800e670 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	61da      	str	r2, [r3, #28]
 800e566:	2304      	movs	r3, #4
 800e568:	e08f      	b.n	800e68a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	0a5b      	lsrs	r3, r3, #9
 800e56e:	68fa      	ldr	r2, [r7, #12]
 800e570:	8952      	ldrh	r2, [r2, #10]
 800e572:	3a01      	subs	r2, #1
 800e574:	4013      	ands	r3, r2
 800e576:	2b00      	cmp	r3, #0
 800e578:	d17a      	bne.n	800e670 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e57a:	687a      	ldr	r2, [r7, #4]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	699b      	ldr	r3, [r3, #24]
 800e580:	4619      	mov	r1, r3
 800e582:	4610      	mov	r0, r2
 800e584:	f7ff fc83 	bl	800de8e <get_fat>
 800e588:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d801      	bhi.n	800e594 <dir_next+0x8c>
 800e590:	2302      	movs	r3, #2
 800e592:	e07a      	b.n	800e68a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e59a:	d101      	bne.n	800e5a0 <dir_next+0x98>
 800e59c:	2301      	movs	r3, #1
 800e59e:	e074      	b.n	800e68a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	699b      	ldr	r3, [r3, #24]
 800e5a4:	697a      	ldr	r2, [r7, #20]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d358      	bcc.n	800e65c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d104      	bne.n	800e5ba <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	61da      	str	r2, [r3, #28]
 800e5b6:	2304      	movs	r3, #4
 800e5b8:	e067      	b.n	800e68a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e5ba:	687a      	ldr	r2, [r7, #4]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	699b      	ldr	r3, [r3, #24]
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	4610      	mov	r0, r2
 800e5c4:	f7ff fe59 	bl	800e27a <create_chain>
 800e5c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d101      	bne.n	800e5d4 <dir_next+0xcc>
 800e5d0:	2307      	movs	r3, #7
 800e5d2:	e05a      	b.n	800e68a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d101      	bne.n	800e5de <dir_next+0xd6>
 800e5da:	2302      	movs	r3, #2
 800e5dc:	e055      	b.n	800e68a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e4:	d101      	bne.n	800e5ea <dir_next+0xe2>
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	e04f      	b.n	800e68a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e5ea:	68f8      	ldr	r0, [r7, #12]
 800e5ec:	f7ff fb50 	bl	800dc90 <sync_window>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d001      	beq.n	800e5fa <dir_next+0xf2>
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e047      	b.n	800e68a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	3334      	adds	r3, #52	@ 0x34
 800e5fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e602:	2100      	movs	r1, #0
 800e604:	4618      	mov	r0, r3
 800e606:	f7ff f97a 	bl	800d8fe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e60a:	2300      	movs	r3, #0
 800e60c:	613b      	str	r3, [r7, #16]
 800e60e:	6979      	ldr	r1, [r7, #20]
 800e610:	68f8      	ldr	r0, [r7, #12]
 800e612:	f7ff fc1d 	bl	800de50 <clust2sect>
 800e616:	4602      	mov	r2, r0
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	631a      	str	r2, [r3, #48]	@ 0x30
 800e61c:	e012      	b.n	800e644 <dir_next+0x13c>
						fs->wflag = 1;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2201      	movs	r2, #1
 800e622:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f7ff fb33 	bl	800dc90 <sync_window>
 800e62a:	4603      	mov	r3, r0
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d001      	beq.n	800e634 <dir_next+0x12c>
 800e630:	2301      	movs	r3, #1
 800e632:	e02a      	b.n	800e68a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	3301      	adds	r3, #1
 800e638:	613b      	str	r3, [r7, #16]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e63e:	1c5a      	adds	r2, r3, #1
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	631a      	str	r2, [r3, #48]	@ 0x30
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	895b      	ldrh	r3, [r3, #10]
 800e648:	461a      	mov	r2, r3
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d3e6      	bcc.n	800e61e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	1ad2      	subs	r2, r2, r3
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	697a      	ldr	r2, [r7, #20]
 800e660:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e662:	6979      	ldr	r1, [r7, #20]
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f7ff fbf3 	bl	800de50 <clust2sect>
 800e66a:	4602      	mov	r2, r0
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	68ba      	ldr	r2, [r7, #8]
 800e674:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e682:	441a      	add	r2, r3
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e688:	2300      	movs	r3, #0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3718      	adds	r7, #24
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b086      	sub	sp, #24
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
 800e69a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e6a2:	2100      	movs	r1, #0
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7ff feb4 	bl	800e412 <dir_sdi>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e6ae:	7dfb      	ldrb	r3, [r7, #23]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d12b      	bne.n	800e70c <dir_alloc+0x7a>
		n = 0;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	69db      	ldr	r3, [r3, #28]
 800e6bc:	4619      	mov	r1, r3
 800e6be:	68f8      	ldr	r0, [r7, #12]
 800e6c0:	f7ff fb2a 	bl	800dd18 <move_window>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e6c8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d11d      	bne.n	800e70a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6a1b      	ldr	r3, [r3, #32]
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	2be5      	cmp	r3, #229	@ 0xe5
 800e6d6:	d004      	beq.n	800e6e2 <dir_alloc+0x50>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6a1b      	ldr	r3, [r3, #32]
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d107      	bne.n	800e6f2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	613b      	str	r3, [r7, #16]
 800e6e8:	693a      	ldr	r2, [r7, #16]
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d102      	bne.n	800e6f6 <dir_alloc+0x64>
 800e6f0:	e00c      	b.n	800e70c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e6f6:	2101      	movs	r1, #1
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f7ff ff05 	bl	800e508 <dir_next>
 800e6fe:	4603      	mov	r3, r0
 800e700:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e702:	7dfb      	ldrb	r3, [r7, #23]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d0d7      	beq.n	800e6b8 <dir_alloc+0x26>
 800e708:	e000      	b.n	800e70c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e70a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e70c:	7dfb      	ldrb	r3, [r7, #23]
 800e70e:	2b04      	cmp	r3, #4
 800e710:	d101      	bne.n	800e716 <dir_alloc+0x84>
 800e712:	2307      	movs	r3, #7
 800e714:	75fb      	strb	r3, [r7, #23]
	return res;
 800e716:	7dfb      	ldrb	r3, [r7, #23]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3718      	adds	r7, #24
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	331a      	adds	r3, #26
 800e72e:	4618      	mov	r0, r3
 800e730:	f7ff f842 	bl	800d7b8 <ld_word>
 800e734:	4603      	mov	r3, r0
 800e736:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	2b03      	cmp	r3, #3
 800e73e:	d109      	bne.n	800e754 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	3314      	adds	r3, #20
 800e744:	4618      	mov	r0, r3
 800e746:	f7ff f837 	bl	800d7b8 <ld_word>
 800e74a:	4603      	mov	r3, r0
 800e74c:	041b      	lsls	r3, r3, #16
 800e74e:	68fa      	ldr	r2, [r7, #12]
 800e750:	4313      	orrs	r3, r2
 800e752:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e754:	68fb      	ldr	r3, [r7, #12]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3710      	adds	r7, #16
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e75e:	b580      	push	{r7, lr}
 800e760:	b084      	sub	sp, #16
 800e762:	af00      	add	r7, sp, #0
 800e764:	60f8      	str	r0, [r7, #12]
 800e766:	60b9      	str	r1, [r7, #8]
 800e768:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	331a      	adds	r3, #26
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	b292      	uxth	r2, r2
 800e772:	4611      	mov	r1, r2
 800e774:	4618      	mov	r0, r3
 800e776:	f7ff f85a 	bl	800d82e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	2b03      	cmp	r3, #3
 800e780:	d109      	bne.n	800e796 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	f103 0214 	add.w	r2, r3, #20
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	0c1b      	lsrs	r3, r3, #16
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	4619      	mov	r1, r3
 800e790:	4610      	mov	r0, r2
 800e792:	f7ff f84c 	bl	800d82e <st_word>
	}
}
 800e796:	bf00      	nop
 800e798:	3710      	adds	r7, #16
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}
	...

0800e7a0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e7a0:	b590      	push	{r4, r7, lr}
 800e7a2:	b087      	sub	sp, #28
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	331a      	adds	r3, #26
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7ff f802 	bl	800d7b8 <ld_word>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d001      	beq.n	800e7be <cmp_lfn+0x1e>
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	e059      	b.n	800e872 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e7c6:	1e5a      	subs	r2, r3, #1
 800e7c8:	4613      	mov	r3, r2
 800e7ca:	005b      	lsls	r3, r3, #1
 800e7cc:	4413      	add	r3, r2
 800e7ce:	009b      	lsls	r3, r3, #2
 800e7d0:	4413      	add	r3, r2
 800e7d2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	81fb      	strh	r3, [r7, #14]
 800e7d8:	2300      	movs	r3, #0
 800e7da:	613b      	str	r3, [r7, #16]
 800e7dc:	e033      	b.n	800e846 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e7de:	4a27      	ldr	r2, [pc, #156]	@ (800e87c <cmp_lfn+0xdc>)
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	4413      	add	r3, r2
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7fe ffe3 	bl	800d7b8 <ld_word>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e7f6:	89fb      	ldrh	r3, [r7, #14]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d01a      	beq.n	800e832 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	2bfe      	cmp	r3, #254	@ 0xfe
 800e800:	d812      	bhi.n	800e828 <cmp_lfn+0x88>
 800e802:	89bb      	ldrh	r3, [r7, #12]
 800e804:	4618      	mov	r0, r3
 800e806:	f001 feff 	bl	8010608 <ff_wtoupper>
 800e80a:	4603      	mov	r3, r0
 800e80c:	461c      	mov	r4, r3
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	1c5a      	adds	r2, r3, #1
 800e812:	617a      	str	r2, [r7, #20]
 800e814:	005b      	lsls	r3, r3, #1
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	4413      	add	r3, r2
 800e81a:	881b      	ldrh	r3, [r3, #0]
 800e81c:	4618      	mov	r0, r3
 800e81e:	f001 fef3 	bl	8010608 <ff_wtoupper>
 800e822:	4603      	mov	r3, r0
 800e824:	429c      	cmp	r4, r3
 800e826:	d001      	beq.n	800e82c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e828:	2300      	movs	r3, #0
 800e82a:	e022      	b.n	800e872 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e82c:	89bb      	ldrh	r3, [r7, #12]
 800e82e:	81fb      	strh	r3, [r7, #14]
 800e830:	e006      	b.n	800e840 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e832:	89bb      	ldrh	r3, [r7, #12]
 800e834:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e838:	4293      	cmp	r3, r2
 800e83a:	d001      	beq.n	800e840 <cmp_lfn+0xa0>
 800e83c:	2300      	movs	r3, #0
 800e83e:	e018      	b.n	800e872 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	3301      	adds	r3, #1
 800e844:	613b      	str	r3, [r7, #16]
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	2b0c      	cmp	r3, #12
 800e84a:	d9c8      	bls.n	800e7de <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e854:	2b00      	cmp	r3, #0
 800e856:	d00b      	beq.n	800e870 <cmp_lfn+0xd0>
 800e858:	89fb      	ldrh	r3, [r7, #14]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d008      	beq.n	800e870 <cmp_lfn+0xd0>
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	005b      	lsls	r3, r3, #1
 800e862:	687a      	ldr	r2, [r7, #4]
 800e864:	4413      	add	r3, r2
 800e866:	881b      	ldrh	r3, [r3, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d001      	beq.n	800e870 <cmp_lfn+0xd0>
 800e86c:	2300      	movs	r3, #0
 800e86e:	e000      	b.n	800e872 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e870:	2301      	movs	r3, #1
}
 800e872:	4618      	mov	r0, r3
 800e874:	371c      	adds	r7, #28
 800e876:	46bd      	mov	sp, r7
 800e878:	bd90      	pop	{r4, r7, pc}
 800e87a:	bf00      	nop
 800e87c:	08010ec0 	.word	0x08010ec0

0800e880 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b088      	sub	sp, #32
 800e884:	af00      	add	r7, sp, #0
 800e886:	60f8      	str	r0, [r7, #12]
 800e888:	60b9      	str	r1, [r7, #8]
 800e88a:	4611      	mov	r1, r2
 800e88c:	461a      	mov	r2, r3
 800e88e:	460b      	mov	r3, r1
 800e890:	71fb      	strb	r3, [r7, #7]
 800e892:	4613      	mov	r3, r2
 800e894:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	330d      	adds	r3, #13
 800e89a:	79ba      	ldrb	r2, [r7, #6]
 800e89c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	330b      	adds	r3, #11
 800e8a2:	220f      	movs	r2, #15
 800e8a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	330c      	adds	r3, #12
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	331a      	adds	r3, #26
 800e8b2:	2100      	movs	r1, #0
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7fe ffba 	bl	800d82e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e8ba:	79fb      	ldrb	r3, [r7, #7]
 800e8bc:	1e5a      	subs	r2, r3, #1
 800e8be:	4613      	mov	r3, r2
 800e8c0:	005b      	lsls	r3, r3, #1
 800e8c2:	4413      	add	r3, r2
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	4413      	add	r3, r2
 800e8c8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	82fb      	strh	r3, [r7, #22]
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e8d2:	8afb      	ldrh	r3, [r7, #22]
 800e8d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d007      	beq.n	800e8ec <put_lfn+0x6c>
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	1c5a      	adds	r2, r3, #1
 800e8e0:	61fa      	str	r2, [r7, #28]
 800e8e2:	005b      	lsls	r3, r3, #1
 800e8e4:	68fa      	ldr	r2, [r7, #12]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	881b      	ldrh	r3, [r3, #0]
 800e8ea:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e8ec:	4a17      	ldr	r2, [pc, #92]	@ (800e94c <put_lfn+0xcc>)
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	4413      	add	r3, r2
 800e8fa:	8afa      	ldrh	r2, [r7, #22]
 800e8fc:	4611      	mov	r1, r2
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fe ff95 	bl	800d82e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e904:	8afb      	ldrh	r3, [r7, #22]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d102      	bne.n	800e910 <put_lfn+0x90>
 800e90a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e90e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	3301      	adds	r3, #1
 800e914:	61bb      	str	r3, [r7, #24]
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	2b0c      	cmp	r3, #12
 800e91a:	d9da      	bls.n	800e8d2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e91c:	8afb      	ldrh	r3, [r7, #22]
 800e91e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e922:	4293      	cmp	r3, r2
 800e924:	d006      	beq.n	800e934 <put_lfn+0xb4>
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	005b      	lsls	r3, r3, #1
 800e92a:	68fa      	ldr	r2, [r7, #12]
 800e92c:	4413      	add	r3, r2
 800e92e:	881b      	ldrh	r3, [r3, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d103      	bne.n	800e93c <put_lfn+0xbc>
 800e934:	79fb      	ldrb	r3, [r7, #7]
 800e936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e93a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	79fa      	ldrb	r2, [r7, #7]
 800e940:	701a      	strb	r2, [r3, #0]
}
 800e942:	bf00      	nop
 800e944:	3720      	adds	r7, #32
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	08010ec0 	.word	0x08010ec0

0800e950 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b08c      	sub	sp, #48	@ 0x30
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	607a      	str	r2, [r7, #4]
 800e95c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e95e:	220b      	movs	r2, #11
 800e960:	68b9      	ldr	r1, [r7, #8]
 800e962:	68f8      	ldr	r0, [r7, #12]
 800e964:	f7fe ffaa 	bl	800d8bc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	2b05      	cmp	r3, #5
 800e96c:	d929      	bls.n	800e9c2 <gen_numname+0x72>
		sr = seq;
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e972:	e020      	b.n	800e9b6 <gen_numname+0x66>
			wc = *lfn++;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	1c9a      	adds	r2, r3, #2
 800e978:	607a      	str	r2, [r7, #4]
 800e97a:	881b      	ldrh	r3, [r3, #0]
 800e97c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800e97e:	2300      	movs	r3, #0
 800e980:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e982:	e015      	b.n	800e9b0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	005a      	lsls	r2, r3, #1
 800e988:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e98a:	f003 0301 	and.w	r3, r3, #1
 800e98e:	4413      	add	r3, r2
 800e990:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e992:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e994:	085b      	lsrs	r3, r3, #1
 800e996:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d003      	beq.n	800e9aa <gen_numname+0x5a>
 800e9a2:	69fa      	ldr	r2, [r7, #28]
 800e9a4:	4b30      	ldr	r3, [pc, #192]	@ (800ea68 <gen_numname+0x118>)
 800e9a6:	4053      	eors	r3, r2
 800e9a8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b2:	2b0f      	cmp	r3, #15
 800e9b4:	d9e6      	bls.n	800e984 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	881b      	ldrh	r3, [r3, #0]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d1da      	bne.n	800e974 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e9c2:	2307      	movs	r3, #7
 800e9c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	b2db      	uxtb	r3, r3
 800e9ca:	f003 030f 	and.w	r3, r3, #15
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	3330      	adds	r3, #48	@ 0x30
 800e9d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800e9d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e9da:	2b39      	cmp	r3, #57	@ 0x39
 800e9dc:	d904      	bls.n	800e9e8 <gen_numname+0x98>
 800e9de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e9e2:	3307      	adds	r3, #7
 800e9e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800e9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ea:	1e5a      	subs	r2, r3, #1
 800e9ec:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e9ee:	3330      	adds	r3, #48	@ 0x30
 800e9f0:	443b      	add	r3, r7
 800e9f2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e9f6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	091b      	lsrs	r3, r3, #4
 800e9fe:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d1df      	bne.n	800e9c6 <gen_numname+0x76>
	ns[i] = '~';
 800ea06:	f107 0214 	add.w	r2, r7, #20
 800ea0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea0c:	4413      	add	r3, r2
 800ea0e:	227e      	movs	r2, #126	@ 0x7e
 800ea10:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ea12:	2300      	movs	r3, #0
 800ea14:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea16:	e002      	b.n	800ea1e <gen_numname+0xce>
 800ea18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea1a:	3301      	adds	r3, #1
 800ea1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d205      	bcs.n	800ea32 <gen_numname+0xe2>
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea2a:	4413      	add	r3, r2
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	2b20      	cmp	r3, #32
 800ea30:	d1f2      	bne.n	800ea18 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ea32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea34:	2b07      	cmp	r3, #7
 800ea36:	d807      	bhi.n	800ea48 <gen_numname+0xf8>
 800ea38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea3a:	1c5a      	adds	r2, r3, #1
 800ea3c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ea3e:	3330      	adds	r3, #48	@ 0x30
 800ea40:	443b      	add	r3, r7
 800ea42:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ea46:	e000      	b.n	800ea4a <gen_numname+0xfa>
 800ea48:	2120      	movs	r1, #32
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4c:	1c5a      	adds	r2, r3, #1
 800ea4e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ea50:	68fa      	ldr	r2, [r7, #12]
 800ea52:	4413      	add	r3, r2
 800ea54:	460a      	mov	r2, r1
 800ea56:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ea58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea5a:	2b07      	cmp	r3, #7
 800ea5c:	d9e9      	bls.n	800ea32 <gen_numname+0xe2>
}
 800ea5e:	bf00      	nop
 800ea60:	bf00      	nop
 800ea62:	3730      	adds	r7, #48	@ 0x30
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	00011021 	.word	0x00011021

0800ea6c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ea74:	2300      	movs	r3, #0
 800ea76:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ea78:	230b      	movs	r3, #11
 800ea7a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ea7c:	7bfb      	ldrb	r3, [r7, #15]
 800ea7e:	b2da      	uxtb	r2, r3
 800ea80:	0852      	lsrs	r2, r2, #1
 800ea82:	01db      	lsls	r3, r3, #7
 800ea84:	4313      	orrs	r3, r2
 800ea86:	b2da      	uxtb	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	1c59      	adds	r1, r3, #1
 800ea8c:	6079      	str	r1, [r7, #4]
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	4413      	add	r3, r2
 800ea92:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	3b01      	subs	r3, #1
 800ea98:	60bb      	str	r3, [r7, #8]
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d1ed      	bne.n	800ea7c <sum_sfn+0x10>
	return sum;
 800eaa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3714      	adds	r7, #20
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr

0800eaae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b086      	sub	sp, #24
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800eabc:	2100      	movs	r1, #0
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f7ff fca7 	bl	800e412 <dir_sdi>
 800eac4:	4603      	mov	r3, r0
 800eac6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800eac8:	7dfb      	ldrb	r3, [r7, #23]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d001      	beq.n	800ead2 <dir_find+0x24>
 800eace:	7dfb      	ldrb	r3, [r7, #23]
 800ead0:	e0a9      	b.n	800ec26 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ead2:	23ff      	movs	r3, #255	@ 0xff
 800ead4:	753b      	strb	r3, [r7, #20]
 800ead6:	7d3b      	ldrb	r3, [r7, #20]
 800ead8:	757b      	strb	r3, [r7, #21]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f04f 32ff 	mov.w	r2, #4294967295
 800eae0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	69db      	ldr	r3, [r3, #28]
 800eae6:	4619      	mov	r1, r3
 800eae8:	6938      	ldr	r0, [r7, #16]
 800eaea:	f7ff f915 	bl	800dd18 <move_window>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eaf2:	7dfb      	ldrb	r3, [r7, #23]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f040 8090 	bne.w	800ec1a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6a1b      	ldr	r3, [r3, #32]
 800eafe:	781b      	ldrb	r3, [r3, #0]
 800eb00:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800eb02:	7dbb      	ldrb	r3, [r7, #22]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d102      	bne.n	800eb0e <dir_find+0x60>
 800eb08:	2304      	movs	r3, #4
 800eb0a:	75fb      	strb	r3, [r7, #23]
 800eb0c:	e08a      	b.n	800ec24 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6a1b      	ldr	r3, [r3, #32]
 800eb12:	330b      	adds	r3, #11
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eb1a:	73fb      	strb	r3, [r7, #15]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	7bfa      	ldrb	r2, [r7, #15]
 800eb20:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800eb22:	7dbb      	ldrb	r3, [r7, #22]
 800eb24:	2be5      	cmp	r3, #229	@ 0xe5
 800eb26:	d007      	beq.n	800eb38 <dir_find+0x8a>
 800eb28:	7bfb      	ldrb	r3, [r7, #15]
 800eb2a:	f003 0308 	and.w	r3, r3, #8
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d009      	beq.n	800eb46 <dir_find+0x98>
 800eb32:	7bfb      	ldrb	r3, [r7, #15]
 800eb34:	2b0f      	cmp	r3, #15
 800eb36:	d006      	beq.n	800eb46 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eb38:	23ff      	movs	r3, #255	@ 0xff
 800eb3a:	757b      	strb	r3, [r7, #21]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb42:	631a      	str	r2, [r3, #48]	@ 0x30
 800eb44:	e05e      	b.n	800ec04 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800eb46:	7bfb      	ldrb	r3, [r7, #15]
 800eb48:	2b0f      	cmp	r3, #15
 800eb4a:	d136      	bne.n	800ebba <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800eb52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d154      	bne.n	800ec04 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800eb5a:	7dbb      	ldrb	r3, [r7, #22]
 800eb5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00d      	beq.n	800eb80 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6a1b      	ldr	r3, [r3, #32]
 800eb68:	7b5b      	ldrb	r3, [r3, #13]
 800eb6a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800eb6c:	7dbb      	ldrb	r3, [r7, #22]
 800eb6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb72:	75bb      	strb	r3, [r7, #22]
 800eb74:	7dbb      	ldrb	r3, [r7, #22]
 800eb76:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	695a      	ldr	r2, [r3, #20]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800eb80:	7dba      	ldrb	r2, [r7, #22]
 800eb82:	7d7b      	ldrb	r3, [r7, #21]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d115      	bne.n	800ebb4 <dir_find+0x106>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a1b      	ldr	r3, [r3, #32]
 800eb8c:	330d      	adds	r3, #13
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	7d3a      	ldrb	r2, [r7, #20]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d10e      	bne.n	800ebb4 <dir_find+0x106>
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	68da      	ldr	r2, [r3, #12]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a1b      	ldr	r3, [r3, #32]
 800eb9e:	4619      	mov	r1, r3
 800eba0:	4610      	mov	r0, r2
 800eba2:	f7ff fdfd 	bl	800e7a0 <cmp_lfn>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d003      	beq.n	800ebb4 <dir_find+0x106>
 800ebac:	7d7b      	ldrb	r3, [r7, #21]
 800ebae:	3b01      	subs	r3, #1
 800ebb0:	b2db      	uxtb	r3, r3
 800ebb2:	e000      	b.n	800ebb6 <dir_find+0x108>
 800ebb4:	23ff      	movs	r3, #255	@ 0xff
 800ebb6:	757b      	strb	r3, [r7, #21]
 800ebb8:	e024      	b.n	800ec04 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ebba:	7d7b      	ldrb	r3, [r7, #21]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d109      	bne.n	800ebd4 <dir_find+0x126>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6a1b      	ldr	r3, [r3, #32]
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7ff ff51 	bl	800ea6c <sum_sfn>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	461a      	mov	r2, r3
 800ebce:	7d3b      	ldrb	r3, [r7, #20]
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d024      	beq.n	800ec1e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ebda:	f003 0301 	and.w	r3, r3, #1
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d10a      	bne.n	800ebf8 <dir_find+0x14a>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6a18      	ldr	r0, [r3, #32]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	3324      	adds	r3, #36	@ 0x24
 800ebea:	220b      	movs	r2, #11
 800ebec:	4619      	mov	r1, r3
 800ebee:	f7fe fea1 	bl	800d934 <mem_cmp>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d014      	beq.n	800ec22 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ebf8:	23ff      	movs	r3, #255	@ 0xff
 800ebfa:	757b      	strb	r3, [r7, #21]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ec02:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ec04:	2100      	movs	r1, #0
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f7ff fc7e 	bl	800e508 <dir_next>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ec10:	7dfb      	ldrb	r3, [r7, #23]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	f43f af65 	beq.w	800eae2 <dir_find+0x34>
 800ec18:	e004      	b.n	800ec24 <dir_find+0x176>
		if (res != FR_OK) break;
 800ec1a:	bf00      	nop
 800ec1c:	e002      	b.n	800ec24 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ec1e:	bf00      	nop
 800ec20:	e000      	b.n	800ec24 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ec22:	bf00      	nop

	return res;
 800ec24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3718      	adds	r7, #24
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
	...

0800ec30 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b08c      	sub	sp, #48	@ 0x30
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ec44:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d001      	beq.n	800ec50 <dir_register+0x20>
 800ec4c:	2306      	movs	r3, #6
 800ec4e:	e0e0      	b.n	800ee12 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ec50:	2300      	movs	r3, #0
 800ec52:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec54:	e002      	b.n	800ec5c <dir_register+0x2c>
 800ec56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec58:	3301      	adds	r3, #1
 800ec5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	68da      	ldr	r2, [r3, #12]
 800ec60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec62:	005b      	lsls	r3, r3, #1
 800ec64:	4413      	add	r3, r2
 800ec66:	881b      	ldrh	r3, [r3, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1f4      	bne.n	800ec56 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800ec72:	f107 030c 	add.w	r3, r7, #12
 800ec76:	220c      	movs	r2, #12
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fe fe1f 	bl	800d8bc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ec7e:	7dfb      	ldrb	r3, [r7, #23]
 800ec80:	f003 0301 	and.w	r3, r3, #1
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d032      	beq.n	800ecee <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2240      	movs	r2, #64	@ 0x40
 800ec8c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800ec90:	2301      	movs	r3, #1
 800ec92:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ec94:	e016      	b.n	800ecc4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800ec9c:	69fb      	ldr	r3, [r7, #28]
 800ec9e:	68da      	ldr	r2, [r3, #12]
 800eca0:	f107 010c 	add.w	r1, r7, #12
 800eca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca6:	f7ff fe53 	bl	800e950 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f7ff feff 	bl	800eaae <dir_find>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800ecb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d106      	bne.n	800eccc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ecbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ecc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc6:	2b63      	cmp	r3, #99	@ 0x63
 800ecc8:	d9e5      	bls.n	800ec96 <dir_register+0x66>
 800ecca:	e000      	b.n	800ecce <dir_register+0x9e>
			if (res != FR_OK) break;
 800eccc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ecce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecd0:	2b64      	cmp	r3, #100	@ 0x64
 800ecd2:	d101      	bne.n	800ecd8 <dir_register+0xa8>
 800ecd4:	2307      	movs	r3, #7
 800ecd6:	e09c      	b.n	800ee12 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ecd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ecdc:	2b04      	cmp	r3, #4
 800ecde:	d002      	beq.n	800ece6 <dir_register+0xb6>
 800ece0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ece4:	e095      	b.n	800ee12 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ece6:	7dfa      	ldrb	r2, [r7, #23]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ecee:	7dfb      	ldrb	r3, [r7, #23]
 800ecf0:	f003 0302 	and.w	r3, r3, #2
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d007      	beq.n	800ed08 <dir_register+0xd8>
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecfa:	330c      	adds	r3, #12
 800ecfc:	4a47      	ldr	r2, [pc, #284]	@ (800ee1c <dir_register+0x1ec>)
 800ecfe:	fba2 2303 	umull	r2, r3, r2, r3
 800ed02:	089b      	lsrs	r3, r3, #2
 800ed04:	3301      	adds	r3, #1
 800ed06:	e000      	b.n	800ed0a <dir_register+0xda>
 800ed08:	2301      	movs	r3, #1
 800ed0a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ed0c:	6a39      	ldr	r1, [r7, #32]
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f7ff fcbf 	bl	800e692 <dir_alloc>
 800ed14:	4603      	mov	r3, r0
 800ed16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ed1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d148      	bne.n	800edb4 <dir_register+0x184>
 800ed22:	6a3b      	ldr	r3, [r7, #32]
 800ed24:	3b01      	subs	r3, #1
 800ed26:	623b      	str	r3, [r7, #32]
 800ed28:	6a3b      	ldr	r3, [r7, #32]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d042      	beq.n	800edb4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	695a      	ldr	r2, [r3, #20]
 800ed32:	6a3b      	ldr	r3, [r7, #32]
 800ed34:	015b      	lsls	r3, r3, #5
 800ed36:	1ad3      	subs	r3, r2, r3
 800ed38:	4619      	mov	r1, r3
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f7ff fb69 	bl	800e412 <dir_sdi>
 800ed40:	4603      	mov	r3, r0
 800ed42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ed46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d132      	bne.n	800edb4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	3324      	adds	r3, #36	@ 0x24
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7ff fe8a 	bl	800ea6c <sum_sfn>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	69db      	ldr	r3, [r3, #28]
 800ed60:	4619      	mov	r1, r3
 800ed62:	69f8      	ldr	r0, [r7, #28]
 800ed64:	f7fe ffd8 	bl	800dd18 <move_window>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800ed6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d11d      	bne.n	800edb2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	68d8      	ldr	r0, [r3, #12]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6a19      	ldr	r1, [r3, #32]
 800ed7e:	6a3b      	ldr	r3, [r7, #32]
 800ed80:	b2da      	uxtb	r2, r3
 800ed82:	7efb      	ldrb	r3, [r7, #27]
 800ed84:	f7ff fd7c 	bl	800e880 <put_lfn>
				fs->wflag = 1;
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ed8e:	2100      	movs	r1, #0
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f7ff fbb9 	bl	800e508 <dir_next>
 800ed96:	4603      	mov	r3, r0
 800ed98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800ed9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d107      	bne.n	800edb4 <dir_register+0x184>
 800eda4:	6a3b      	ldr	r3, [r7, #32]
 800eda6:	3b01      	subs	r3, #1
 800eda8:	623b      	str	r3, [r7, #32]
 800edaa:	6a3b      	ldr	r3, [r7, #32]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1d5      	bne.n	800ed5c <dir_register+0x12c>
 800edb0:	e000      	b.n	800edb4 <dir_register+0x184>
				if (res != FR_OK) break;
 800edb2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800edb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d128      	bne.n	800ee0e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	69db      	ldr	r3, [r3, #28]
 800edc0:	4619      	mov	r1, r3
 800edc2:	69f8      	ldr	r0, [r7, #28]
 800edc4:	f7fe ffa8 	bl	800dd18 <move_window>
 800edc8:	4603      	mov	r3, r0
 800edca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800edce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d11b      	bne.n	800ee0e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6a1b      	ldr	r3, [r3, #32]
 800edda:	2220      	movs	r2, #32
 800eddc:	2100      	movs	r1, #0
 800edde:	4618      	mov	r0, r3
 800ede0:	f7fe fd8d 	bl	800d8fe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6a18      	ldr	r0, [r3, #32]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	3324      	adds	r3, #36	@ 0x24
 800edec:	220b      	movs	r2, #11
 800edee:	4619      	mov	r1, r3
 800edf0:	f7fe fd64 	bl	800d8bc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6a1b      	ldr	r3, [r3, #32]
 800edfe:	330c      	adds	r3, #12
 800ee00:	f002 0218 	and.w	r2, r2, #24
 800ee04:	b2d2      	uxtb	r2, r2
 800ee06:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ee0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3730      	adds	r7, #48	@ 0x30
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	4ec4ec4f 	.word	0x4ec4ec4f

0800ee20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b08a      	sub	sp, #40	@ 0x28
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	613b      	str	r3, [r7, #16]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	68db      	ldr	r3, [r3, #12]
 800ee36:	60fb      	str	r3, [r7, #12]
 800ee38:	2300      	movs	r3, #0
 800ee3a:	617b      	str	r3, [r7, #20]
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	61ba      	str	r2, [r7, #24]
 800ee46:	693a      	ldr	r2, [r7, #16]
 800ee48:	4413      	add	r3, r2
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ee4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee50:	2b1f      	cmp	r3, #31
 800ee52:	d940      	bls.n	800eed6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ee54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee56:	2b2f      	cmp	r3, #47	@ 0x2f
 800ee58:	d006      	beq.n	800ee68 <create_name+0x48>
 800ee5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee5c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ee5e:	d110      	bne.n	800ee82 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ee60:	e002      	b.n	800ee68 <create_name+0x48>
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	3301      	adds	r3, #1
 800ee66:	61bb      	str	r3, [r7, #24]
 800ee68:	693a      	ldr	r2, [r7, #16]
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	4413      	add	r3, r2
 800ee6e:	781b      	ldrb	r3, [r3, #0]
 800ee70:	2b2f      	cmp	r3, #47	@ 0x2f
 800ee72:	d0f6      	beq.n	800ee62 <create_name+0x42>
 800ee74:	693a      	ldr	r2, [r7, #16]
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	4413      	add	r3, r2
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ee7e:	d0f0      	beq.n	800ee62 <create_name+0x42>
			break;
 800ee80:	e02a      	b.n	800eed8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	2bfe      	cmp	r3, #254	@ 0xfe
 800ee86:	d901      	bls.n	800ee8c <create_name+0x6c>
 800ee88:	2306      	movs	r3, #6
 800ee8a:	e17d      	b.n	800f188 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ee8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ee92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ee94:	2101      	movs	r1, #1
 800ee96:	4618      	mov	r0, r3
 800ee98:	f001 fb7a 	bl	8010590 <ff_convert>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800eea0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d101      	bne.n	800eeaa <create_name+0x8a>
 800eea6:	2306      	movs	r3, #6
 800eea8:	e16e      	b.n	800f188 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800eeaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eeac:	2b7f      	cmp	r3, #127	@ 0x7f
 800eeae:	d809      	bhi.n	800eec4 <create_name+0xa4>
 800eeb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	488d      	ldr	r0, [pc, #564]	@ (800f0ec <create_name+0x2cc>)
 800eeb6:	f7fe fd64 	bl	800d982 <chk_chr>
 800eeba:	4603      	mov	r3, r0
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d001      	beq.n	800eec4 <create_name+0xa4>
 800eec0:	2306      	movs	r3, #6
 800eec2:	e161      	b.n	800f188 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800eec4:	697b      	ldr	r3, [r7, #20]
 800eec6:	1c5a      	adds	r2, r3, #1
 800eec8:	617a      	str	r2, [r7, #20]
 800eeca:	005b      	lsls	r3, r3, #1
 800eecc:	68fa      	ldr	r2, [r7, #12]
 800eece:	4413      	add	r3, r2
 800eed0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800eed2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800eed4:	e7b4      	b.n	800ee40 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800eed6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800eed8:	693a      	ldr	r2, [r7, #16]
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	441a      	add	r2, r3
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800eee2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eee4:	2b1f      	cmp	r3, #31
 800eee6:	d801      	bhi.n	800eeec <create_name+0xcc>
 800eee8:	2304      	movs	r3, #4
 800eeea:	e000      	b.n	800eeee <create_name+0xce>
 800eeec:	2300      	movs	r3, #0
 800eeee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800eef2:	e011      	b.n	800ef18 <create_name+0xf8>
		w = lfn[di - 1];
 800eef4:	697a      	ldr	r2, [r7, #20]
 800eef6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800eefa:	4413      	add	r3, r2
 800eefc:	005b      	lsls	r3, r3, #1
 800eefe:	68fa      	ldr	r2, [r7, #12]
 800ef00:	4413      	add	r3, r2
 800ef02:	881b      	ldrh	r3, [r3, #0]
 800ef04:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ef06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef08:	2b20      	cmp	r3, #32
 800ef0a:	d002      	beq.n	800ef12 <create_name+0xf2>
 800ef0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ef0e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef10:	d106      	bne.n	800ef20 <create_name+0x100>
		di--;
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	3b01      	subs	r3, #1
 800ef16:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d1ea      	bne.n	800eef4 <create_name+0xd4>
 800ef1e:	e000      	b.n	800ef22 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ef20:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	005b      	lsls	r3, r3, #1
 800ef26:	68fa      	ldr	r2, [r7, #12]
 800ef28:	4413      	add	r3, r2
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d101      	bne.n	800ef38 <create_name+0x118>
 800ef34:	2306      	movs	r3, #6
 800ef36:	e127      	b.n	800f188 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	3324      	adds	r3, #36	@ 0x24
 800ef3c:	220b      	movs	r2, #11
 800ef3e:	2120      	movs	r1, #32
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7fe fcdc 	bl	800d8fe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ef46:	2300      	movs	r3, #0
 800ef48:	61bb      	str	r3, [r7, #24]
 800ef4a:	e002      	b.n	800ef52 <create_name+0x132>
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	3301      	adds	r3, #1
 800ef50:	61bb      	str	r3, [r7, #24]
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	005b      	lsls	r3, r3, #1
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	4413      	add	r3, r2
 800ef5a:	881b      	ldrh	r3, [r3, #0]
 800ef5c:	2b20      	cmp	r3, #32
 800ef5e:	d0f5      	beq.n	800ef4c <create_name+0x12c>
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	005b      	lsls	r3, r3, #1
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	4413      	add	r3, r2
 800ef68:	881b      	ldrh	r3, [r3, #0]
 800ef6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef6c:	d0ee      	beq.n	800ef4c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ef6e:	69bb      	ldr	r3, [r7, #24]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d009      	beq.n	800ef88 <create_name+0x168>
 800ef74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef78:	f043 0303 	orr.w	r3, r3, #3
 800ef7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ef80:	e002      	b.n	800ef88 <create_name+0x168>
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	3b01      	subs	r3, #1
 800ef86:	617b      	str	r3, [r7, #20]
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d009      	beq.n	800efa2 <create_name+0x182>
 800ef8e:	697a      	ldr	r2, [r7, #20]
 800ef90:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ef94:	4413      	add	r3, r2
 800ef96:	005b      	lsls	r3, r3, #1
 800ef98:	68fa      	ldr	r2, [r7, #12]
 800ef9a:	4413      	add	r3, r2
 800ef9c:	881b      	ldrh	r3, [r3, #0]
 800ef9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800efa0:	d1ef      	bne.n	800ef82 <create_name+0x162>

	i = b = 0; ni = 8;
 800efa2:	2300      	movs	r3, #0
 800efa4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800efa8:	2300      	movs	r3, #0
 800efaa:	623b      	str	r3, [r7, #32]
 800efac:	2308      	movs	r3, #8
 800efae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	1c5a      	adds	r2, r3, #1
 800efb4:	61ba      	str	r2, [r7, #24]
 800efb6:	005b      	lsls	r3, r3, #1
 800efb8:	68fa      	ldr	r2, [r7, #12]
 800efba:	4413      	add	r3, r2
 800efbc:	881b      	ldrh	r3, [r3, #0]
 800efbe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800efc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	f000 8090 	beq.w	800f0e8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800efc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800efca:	2b20      	cmp	r3, #32
 800efcc:	d006      	beq.n	800efdc <create_name+0x1bc>
 800efce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800efd0:	2b2e      	cmp	r3, #46	@ 0x2e
 800efd2:	d10a      	bne.n	800efea <create_name+0x1ca>
 800efd4:	69ba      	ldr	r2, [r7, #24]
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	429a      	cmp	r2, r3
 800efda:	d006      	beq.n	800efea <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800efdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800efe0:	f043 0303 	orr.w	r3, r3, #3
 800efe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800efe8:	e07d      	b.n	800f0e6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800efea:	6a3a      	ldr	r2, [r7, #32]
 800efec:	69fb      	ldr	r3, [r7, #28]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d203      	bcs.n	800effa <create_name+0x1da>
 800eff2:	69ba      	ldr	r2, [r7, #24]
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d123      	bne.n	800f042 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	2b0b      	cmp	r3, #11
 800effe:	d106      	bne.n	800f00e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f004:	f043 0303 	orr.w	r3, r3, #3
 800f008:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f00c:	e075      	b.n	800f0fa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f00e:	69ba      	ldr	r2, [r7, #24]
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	429a      	cmp	r2, r3
 800f014:	d005      	beq.n	800f022 <create_name+0x202>
 800f016:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f01a:	f043 0303 	orr.w	r3, r3, #3
 800f01e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800f022:	69ba      	ldr	r2, [r7, #24]
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	429a      	cmp	r2, r3
 800f028:	d866      	bhi.n	800f0f8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	61bb      	str	r3, [r7, #24]
 800f02e:	2308      	movs	r3, #8
 800f030:	623b      	str	r3, [r7, #32]
 800f032:	230b      	movs	r3, #11
 800f034:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f036:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f03a:	009b      	lsls	r3, r3, #2
 800f03c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f040:	e051      	b.n	800f0e6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f044:	2b7f      	cmp	r3, #127	@ 0x7f
 800f046:	d914      	bls.n	800f072 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f048:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f04a:	2100      	movs	r1, #0
 800f04c:	4618      	mov	r0, r3
 800f04e:	f001 fa9f 	bl	8010590 <ff_convert>
 800f052:	4603      	mov	r3, r0
 800f054:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f056:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d004      	beq.n	800f066 <create_name+0x246>
 800f05c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f05e:	3b80      	subs	r3, #128	@ 0x80
 800f060:	4a23      	ldr	r2, [pc, #140]	@ (800f0f0 <create_name+0x2d0>)
 800f062:	5cd3      	ldrb	r3, [r2, r3]
 800f064:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f066:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f06a:	f043 0302 	orr.w	r3, r3, #2
 800f06e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f072:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f074:	2b00      	cmp	r3, #0
 800f076:	d007      	beq.n	800f088 <create_name+0x268>
 800f078:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f07a:	4619      	mov	r1, r3
 800f07c:	481d      	ldr	r0, [pc, #116]	@ (800f0f4 <create_name+0x2d4>)
 800f07e:	f7fe fc80 	bl	800d982 <chk_chr>
 800f082:	4603      	mov	r3, r0
 800f084:	2b00      	cmp	r3, #0
 800f086:	d008      	beq.n	800f09a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f088:	235f      	movs	r3, #95	@ 0x5f
 800f08a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800f08c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f090:	f043 0303 	orr.w	r3, r3, #3
 800f094:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f098:	e01b      	b.n	800f0d2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f09a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f09c:	2b40      	cmp	r3, #64	@ 0x40
 800f09e:	d909      	bls.n	800f0b4 <create_name+0x294>
 800f0a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0a2:	2b5a      	cmp	r3, #90	@ 0x5a
 800f0a4:	d806      	bhi.n	800f0b4 <create_name+0x294>
					b |= 2;
 800f0a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f0aa:	f043 0302 	orr.w	r3, r3, #2
 800f0ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f0b2:	e00e      	b.n	800f0d2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f0b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0b6:	2b60      	cmp	r3, #96	@ 0x60
 800f0b8:	d90b      	bls.n	800f0d2 <create_name+0x2b2>
 800f0ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0bc:	2b7a      	cmp	r3, #122	@ 0x7a
 800f0be:	d808      	bhi.n	800f0d2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f0c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f0c4:	f043 0301 	orr.w	r3, r3, #1
 800f0c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f0cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f0ce:	3b20      	subs	r3, #32
 800f0d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f0d2:	6a3b      	ldr	r3, [r7, #32]
 800f0d4:	1c5a      	adds	r2, r3, #1
 800f0d6:	623a      	str	r2, [r7, #32]
 800f0d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f0da:	b2d1      	uxtb	r1, r2
 800f0dc:	687a      	ldr	r2, [r7, #4]
 800f0de:	4413      	add	r3, r2
 800f0e0:	460a      	mov	r2, r1
 800f0e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f0e6:	e763      	b.n	800efb0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f0e8:	bf00      	nop
 800f0ea:	e006      	b.n	800f0fa <create_name+0x2da>
 800f0ec:	08010b74 	.word	0x08010b74
 800f0f0:	08010e40 	.word	0x08010e40
 800f0f4:	08010b80 	.word	0x08010b80
			if (si > di) break;			/* No extension */
 800f0f8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f100:	2be5      	cmp	r3, #229	@ 0xe5
 800f102:	d103      	bne.n	800f10c <create_name+0x2ec>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2205      	movs	r2, #5
 800f108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800f10c:	69fb      	ldr	r3, [r7, #28]
 800f10e:	2b08      	cmp	r3, #8
 800f110:	d104      	bne.n	800f11c <create_name+0x2fc>
 800f112:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f11c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f120:	f003 030c 	and.w	r3, r3, #12
 800f124:	2b0c      	cmp	r3, #12
 800f126:	d005      	beq.n	800f134 <create_name+0x314>
 800f128:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f12c:	f003 0303 	and.w	r3, r3, #3
 800f130:	2b03      	cmp	r3, #3
 800f132:	d105      	bne.n	800f140 <create_name+0x320>
 800f134:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f138:	f043 0302 	orr.w	r3, r3, #2
 800f13c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f144:	f003 0302 	and.w	r3, r3, #2
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d117      	bne.n	800f17c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f14c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f150:	f003 0303 	and.w	r3, r3, #3
 800f154:	2b01      	cmp	r3, #1
 800f156:	d105      	bne.n	800f164 <create_name+0x344>
 800f158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f15c:	f043 0310 	orr.w	r3, r3, #16
 800f160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f164:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f168:	f003 030c 	and.w	r3, r3, #12
 800f16c:	2b04      	cmp	r3, #4
 800f16e:	d105      	bne.n	800f17c <create_name+0x35c>
 800f170:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f174:	f043 0308 	orr.w	r3, r3, #8
 800f178:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800f182:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800f186:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3728      	adds	r7, #40	@ 0x28
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f1a4:	e002      	b.n	800f1ac <follow_path+0x1c>
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	603b      	str	r3, [r7, #0]
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	781b      	ldrb	r3, [r3, #0]
 800f1b0:	2b2f      	cmp	r3, #47	@ 0x2f
 800f1b2:	d0f8      	beq.n	800f1a6 <follow_path+0x16>
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	781b      	ldrb	r3, [r3, #0]
 800f1b8:	2b5c      	cmp	r3, #92	@ 0x5c
 800f1ba:	d0f4      	beq.n	800f1a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	2b1f      	cmp	r3, #31
 800f1c8:	d80a      	bhi.n	800f1e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2280      	movs	r2, #128	@ 0x80
 800f1ce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7ff f91c 	bl	800e412 <dir_sdi>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	75fb      	strb	r3, [r7, #23]
 800f1de:	e043      	b.n	800f268 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f1e0:	463b      	mov	r3, r7
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f7ff fe1b 	bl	800ee20 <create_name>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f1ee:	7dfb      	ldrb	r3, [r7, #23]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d134      	bne.n	800f25e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f7ff fc5a 	bl	800eaae <dir_find>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f204:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f206:	7dfb      	ldrb	r3, [r7, #23]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d00a      	beq.n	800f222 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f20c:	7dfb      	ldrb	r3, [r7, #23]
 800f20e:	2b04      	cmp	r3, #4
 800f210:	d127      	bne.n	800f262 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f212:	7afb      	ldrb	r3, [r7, #11]
 800f214:	f003 0304 	and.w	r3, r3, #4
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d122      	bne.n	800f262 <follow_path+0xd2>
 800f21c:	2305      	movs	r3, #5
 800f21e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f220:	e01f      	b.n	800f262 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f222:	7afb      	ldrb	r3, [r7, #11]
 800f224:	f003 0304 	and.w	r3, r3, #4
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d11c      	bne.n	800f266 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	799b      	ldrb	r3, [r3, #6]
 800f230:	f003 0310 	and.w	r3, r3, #16
 800f234:	2b00      	cmp	r3, #0
 800f236:	d102      	bne.n	800f23e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f238:	2305      	movs	r3, #5
 800f23a:	75fb      	strb	r3, [r7, #23]
 800f23c:	e014      	b.n	800f268 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	695b      	ldr	r3, [r3, #20]
 800f248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f24c:	4413      	add	r3, r2
 800f24e:	4619      	mov	r1, r3
 800f250:	68f8      	ldr	r0, [r7, #12]
 800f252:	f7ff fa65 	bl	800e720 <ld_clust>
 800f256:	4602      	mov	r2, r0
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f25c:	e7c0      	b.n	800f1e0 <follow_path+0x50>
			if (res != FR_OK) break;
 800f25e:	bf00      	nop
 800f260:	e002      	b.n	800f268 <follow_path+0xd8>
				break;
 800f262:	bf00      	nop
 800f264:	e000      	b.n	800f268 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f266:	bf00      	nop
			}
		}
	}

	return res;
 800f268:	7dfb      	ldrb	r3, [r7, #23]
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3718      	adds	r7, #24
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f272:	b480      	push	{r7}
 800f274:	b087      	sub	sp, #28
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f27a:	f04f 33ff 	mov.w	r3, #4294967295
 800f27e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d031      	beq.n	800f2ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	617b      	str	r3, [r7, #20]
 800f28e:	e002      	b.n	800f296 <get_ldnumber+0x24>
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	3301      	adds	r3, #1
 800f294:	617b      	str	r3, [r7, #20]
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	2b1f      	cmp	r3, #31
 800f29c:	d903      	bls.n	800f2a6 <get_ldnumber+0x34>
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	2b3a      	cmp	r3, #58	@ 0x3a
 800f2a4:	d1f4      	bne.n	800f290 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	2b3a      	cmp	r3, #58	@ 0x3a
 800f2ac:	d11c      	bne.n	800f2e8 <get_ldnumber+0x76>
			tp = *path;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	1c5a      	adds	r2, r3, #1
 800f2b8:	60fa      	str	r2, [r7, #12]
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	3b30      	subs	r3, #48	@ 0x30
 800f2be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	2b09      	cmp	r3, #9
 800f2c4:	d80e      	bhi.n	800f2e4 <get_ldnumber+0x72>
 800f2c6:	68fa      	ldr	r2, [r7, #12]
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d10a      	bne.n	800f2e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d107      	bne.n	800f2e4 <get_ldnumber+0x72>
					vol = (int)i;
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	3301      	adds	r3, #1
 800f2dc:	617b      	str	r3, [r7, #20]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	697a      	ldr	r2, [r7, #20]
 800f2e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	e002      	b.n	800f2ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f2ec:	693b      	ldr	r3, [r7, #16]
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	371c      	adds	r7, #28
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr
	...

0800f2fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b082      	sub	sp, #8
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2200      	movs	r2, #0
 800f30a:	70da      	strb	r2, [r3, #3]
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f04f 32ff 	mov.w	r2, #4294967295
 800f312:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f314:	6839      	ldr	r1, [r7, #0]
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f7fe fcfe 	bl	800dd18 <move_window>
 800f31c:	4603      	mov	r3, r0
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d001      	beq.n	800f326 <check_fs+0x2a>
 800f322:	2304      	movs	r3, #4
 800f324:	e038      	b.n	800f398 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	3334      	adds	r3, #52	@ 0x34
 800f32a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fe fa42 	bl	800d7b8 <ld_word>
 800f334:	4603      	mov	r3, r0
 800f336:	461a      	mov	r2, r3
 800f338:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d001      	beq.n	800f344 <check_fs+0x48>
 800f340:	2303      	movs	r3, #3
 800f342:	e029      	b.n	800f398 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f34a:	2be9      	cmp	r3, #233	@ 0xe9
 800f34c:	d009      	beq.n	800f362 <check_fs+0x66>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f354:	2beb      	cmp	r3, #235	@ 0xeb
 800f356:	d11e      	bne.n	800f396 <check_fs+0x9a>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800f35e:	2b90      	cmp	r3, #144	@ 0x90
 800f360:	d119      	bne.n	800f396 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	3334      	adds	r3, #52	@ 0x34
 800f366:	3336      	adds	r3, #54	@ 0x36
 800f368:	4618      	mov	r0, r3
 800f36a:	f7fe fa3d 	bl	800d7e8 <ld_dword>
 800f36e:	4603      	mov	r3, r0
 800f370:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f374:	4a0a      	ldr	r2, [pc, #40]	@ (800f3a0 <check_fs+0xa4>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d101      	bne.n	800f37e <check_fs+0x82>
 800f37a:	2300      	movs	r3, #0
 800f37c:	e00c      	b.n	800f398 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	3334      	adds	r3, #52	@ 0x34
 800f382:	3352      	adds	r3, #82	@ 0x52
 800f384:	4618      	mov	r0, r3
 800f386:	f7fe fa2f 	bl	800d7e8 <ld_dword>
 800f38a:	4603      	mov	r3, r0
 800f38c:	4a05      	ldr	r2, [pc, #20]	@ (800f3a4 <check_fs+0xa8>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d101      	bne.n	800f396 <check_fs+0x9a>
 800f392:	2300      	movs	r3, #0
 800f394:	e000      	b.n	800f398 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f396:	2302      	movs	r3, #2
}
 800f398:	4618      	mov	r0, r3
 800f39a:	3708      	adds	r7, #8
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}
 800f3a0:	00544146 	.word	0x00544146
 800f3a4:	33544146 	.word	0x33544146

0800f3a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b096      	sub	sp, #88	@ 0x58
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	60f8      	str	r0, [r7, #12]
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	4613      	mov	r3, r2
 800f3b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f3bc:	68f8      	ldr	r0, [r7, #12]
 800f3be:	f7ff ff58 	bl	800f272 <get_ldnumber>
 800f3c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f3c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	da01      	bge.n	800f3ce <find_volume+0x26>
 800f3ca:	230b      	movs	r3, #11
 800f3cc:	e22d      	b.n	800f82a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f3ce:	4aa1      	ldr	r2, [pc, #644]	@ (800f654 <find_volume+0x2ac>)
 800f3d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3d6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d101      	bne.n	800f3e2 <find_volume+0x3a>
 800f3de:	230c      	movs	r3, #12
 800f3e0:	e223      	b.n	800f82a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f3e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f3e8:	79fb      	ldrb	r3, [r7, #7]
 800f3ea:	f023 0301 	bic.w	r3, r3, #1
 800f3ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d01a      	beq.n	800f42e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3fa:	785b      	ldrb	r3, [r3, #1]
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7fe f933 	bl	800d668 <disk_status>
 800f402:	4603      	mov	r3, r0
 800f404:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f408:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f40c:	f003 0301 	and.w	r3, r3, #1
 800f410:	2b00      	cmp	r3, #0
 800f412:	d10c      	bne.n	800f42e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f414:	79fb      	ldrb	r3, [r7, #7]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d007      	beq.n	800f42a <find_volume+0x82>
 800f41a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f41e:	f003 0304 	and.w	r3, r3, #4
 800f422:	2b00      	cmp	r3, #0
 800f424:	d001      	beq.n	800f42a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f426:	230a      	movs	r3, #10
 800f428:	e1ff      	b.n	800f82a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f42a:	2300      	movs	r3, #0
 800f42c:	e1fd      	b.n	800f82a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f430:	2200      	movs	r2, #0
 800f432:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f436:	b2da      	uxtb	r2, r3
 800f438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f43a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f43e:	785b      	ldrb	r3, [r3, #1]
 800f440:	4618      	mov	r0, r3
 800f442:	f7fe f92b 	bl	800d69c <disk_initialize>
 800f446:	4603      	mov	r3, r0
 800f448:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f44c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f450:	f003 0301 	and.w	r3, r3, #1
 800f454:	2b00      	cmp	r3, #0
 800f456:	d001      	beq.n	800f45c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f458:	2303      	movs	r3, #3
 800f45a:	e1e6      	b.n	800f82a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f45c:	79fb      	ldrb	r3, [r7, #7]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d007      	beq.n	800f472 <find_volume+0xca>
 800f462:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f466:	f003 0304 	and.w	r3, r3, #4
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d001      	beq.n	800f472 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f46e:	230a      	movs	r3, #10
 800f470:	e1db      	b.n	800f82a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f472:	2300      	movs	r3, #0
 800f474:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f476:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f478:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f47a:	f7ff ff3f 	bl	800f2fc <check_fs>
 800f47e:	4603      	mov	r3, r0
 800f480:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f484:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f488:	2b02      	cmp	r3, #2
 800f48a:	d149      	bne.n	800f520 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f48c:	2300      	movs	r3, #0
 800f48e:	643b      	str	r3, [r7, #64]	@ 0x40
 800f490:	e01e      	b.n	800f4d0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f494:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f49a:	011b      	lsls	r3, r3, #4
 800f49c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f4a0:	4413      	add	r3, r2
 800f4a2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a6:	3304      	adds	r3, #4
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d006      	beq.n	800f4bc <find_volume+0x114>
 800f4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4b0:	3308      	adds	r3, #8
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fe f998 	bl	800d7e8 <ld_dword>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	e000      	b.n	800f4be <find_volume+0x116>
 800f4bc:	2200      	movs	r2, #0
 800f4be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4c0:	009b      	lsls	r3, r3, #2
 800f4c2:	3358      	adds	r3, #88	@ 0x58
 800f4c4:	443b      	add	r3, r7
 800f4c6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f4ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800f4d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4d2:	2b03      	cmp	r3, #3
 800f4d4:	d9dd      	bls.n	800f492 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f4da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d002      	beq.n	800f4e6 <find_volume+0x13e>
 800f4e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4e2:	3b01      	subs	r3, #1
 800f4e4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f4e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4e8:	009b      	lsls	r3, r3, #2
 800f4ea:	3358      	adds	r3, #88	@ 0x58
 800f4ec:	443b      	add	r3, r7
 800f4ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f4f2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f4f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d005      	beq.n	800f506 <find_volume+0x15e>
 800f4fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f4fc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f4fe:	f7ff fefd 	bl	800f2fc <check_fs>
 800f502:	4603      	mov	r3, r0
 800f504:	e000      	b.n	800f508 <find_volume+0x160>
 800f506:	2303      	movs	r3, #3
 800f508:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f50c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f510:	2b01      	cmp	r3, #1
 800f512:	d905      	bls.n	800f520 <find_volume+0x178>
 800f514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f516:	3301      	adds	r3, #1
 800f518:	643b      	str	r3, [r7, #64]	@ 0x40
 800f51a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f51c:	2b03      	cmp	r3, #3
 800f51e:	d9e2      	bls.n	800f4e6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f520:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f524:	2b04      	cmp	r3, #4
 800f526:	d101      	bne.n	800f52c <find_volume+0x184>
 800f528:	2301      	movs	r3, #1
 800f52a:	e17e      	b.n	800f82a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f52c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f530:	2b01      	cmp	r3, #1
 800f532:	d901      	bls.n	800f538 <find_volume+0x190>
 800f534:	230d      	movs	r3, #13
 800f536:	e178      	b.n	800f82a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f53a:	3334      	adds	r3, #52	@ 0x34
 800f53c:	330b      	adds	r3, #11
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fe f93a 	bl	800d7b8 <ld_word>
 800f544:	4603      	mov	r3, r0
 800f546:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f54a:	d001      	beq.n	800f550 <find_volume+0x1a8>
 800f54c:	230d      	movs	r3, #13
 800f54e:	e16c      	b.n	800f82a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f552:	3334      	adds	r3, #52	@ 0x34
 800f554:	3316      	adds	r3, #22
 800f556:	4618      	mov	r0, r3
 800f558:	f7fe f92e 	bl	800d7b8 <ld_word>
 800f55c:	4603      	mov	r3, r0
 800f55e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f562:	2b00      	cmp	r3, #0
 800f564:	d106      	bne.n	800f574 <find_volume+0x1cc>
 800f566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f568:	3334      	adds	r3, #52	@ 0x34
 800f56a:	3324      	adds	r3, #36	@ 0x24
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7fe f93b 	bl	800d7e8 <ld_dword>
 800f572:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f576:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f578:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f57c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f582:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f586:	789b      	ldrb	r3, [r3, #2]
 800f588:	2b01      	cmp	r3, #1
 800f58a:	d005      	beq.n	800f598 <find_volume+0x1f0>
 800f58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f58e:	789b      	ldrb	r3, [r3, #2]
 800f590:	2b02      	cmp	r3, #2
 800f592:	d001      	beq.n	800f598 <find_volume+0x1f0>
 800f594:	230d      	movs	r3, #13
 800f596:	e148      	b.n	800f82a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f59a:	789b      	ldrb	r3, [r3, #2]
 800f59c:	461a      	mov	r2, r3
 800f59e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5a0:	fb02 f303 	mul.w	r3, r2, r3
 800f5a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5b4:	895b      	ldrh	r3, [r3, #10]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d008      	beq.n	800f5cc <find_volume+0x224>
 800f5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5bc:	895b      	ldrh	r3, [r3, #10]
 800f5be:	461a      	mov	r2, r3
 800f5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5c2:	895b      	ldrh	r3, [r3, #10]
 800f5c4:	3b01      	subs	r3, #1
 800f5c6:	4013      	ands	r3, r2
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d001      	beq.n	800f5d0 <find_volume+0x228>
 800f5cc:	230d      	movs	r3, #13
 800f5ce:	e12c      	b.n	800f82a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d2:	3334      	adds	r3, #52	@ 0x34
 800f5d4:	3311      	adds	r3, #17
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7fe f8ee 	bl	800d7b8 <ld_word>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	461a      	mov	r2, r3
 800f5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e6:	891b      	ldrh	r3, [r3, #8]
 800f5e8:	f003 030f 	and.w	r3, r3, #15
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d001      	beq.n	800f5f6 <find_volume+0x24e>
 800f5f2:	230d      	movs	r3, #13
 800f5f4:	e119      	b.n	800f82a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5f8:	3334      	adds	r3, #52	@ 0x34
 800f5fa:	3313      	adds	r3, #19
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fe f8db 	bl	800d7b8 <ld_word>
 800f602:	4603      	mov	r3, r0
 800f604:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d106      	bne.n	800f61a <find_volume+0x272>
 800f60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f60e:	3334      	adds	r3, #52	@ 0x34
 800f610:	3320      	adds	r3, #32
 800f612:	4618      	mov	r0, r3
 800f614:	f7fe f8e8 	bl	800d7e8 <ld_dword>
 800f618:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f61c:	3334      	adds	r3, #52	@ 0x34
 800f61e:	330e      	adds	r3, #14
 800f620:	4618      	mov	r0, r3
 800f622:	f7fe f8c9 	bl	800d7b8 <ld_word>
 800f626:	4603      	mov	r3, r0
 800f628:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f62a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d101      	bne.n	800f634 <find_volume+0x28c>
 800f630:	230d      	movs	r3, #13
 800f632:	e0fa      	b.n	800f82a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f634:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f638:	4413      	add	r3, r2
 800f63a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f63c:	8912      	ldrh	r2, [r2, #8]
 800f63e:	0912      	lsrs	r2, r2, #4
 800f640:	b292      	uxth	r2, r2
 800f642:	4413      	add	r3, r2
 800f644:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f646:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d204      	bcs.n	800f658 <find_volume+0x2b0>
 800f64e:	230d      	movs	r3, #13
 800f650:	e0eb      	b.n	800f82a <find_volume+0x482>
 800f652:	bf00      	nop
 800f654:	20018940 	.word	0x20018940
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f658:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f65c:	1ad3      	subs	r3, r2, r3
 800f65e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f660:	8952      	ldrh	r2, [r2, #10]
 800f662:	fbb3 f3f2 	udiv	r3, r3, r2
 800f666:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d101      	bne.n	800f672 <find_volume+0x2ca>
 800f66e:	230d      	movs	r3, #13
 800f670:	e0db      	b.n	800f82a <find_volume+0x482>
		fmt = FS_FAT32;
 800f672:	2303      	movs	r3, #3
 800f674:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f67a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f67e:	4293      	cmp	r3, r2
 800f680:	d802      	bhi.n	800f688 <find_volume+0x2e0>
 800f682:	2302      	movs	r3, #2
 800f684:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f68a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f68e:	4293      	cmp	r3, r2
 800f690:	d802      	bhi.n	800f698 <find_volume+0x2f0>
 800f692:	2301      	movs	r3, #1
 800f694:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f69a:	1c9a      	adds	r2, r3, #2
 800f69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f69e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f6a4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f6a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f6a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f6aa:	441a      	add	r2, r3
 800f6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ae:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f6b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6b4:	441a      	add	r2, r3
 800f6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6b8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800f6ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f6be:	2b03      	cmp	r3, #3
 800f6c0:	d11e      	bne.n	800f700 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6c4:	3334      	adds	r3, #52	@ 0x34
 800f6c6:	332a      	adds	r3, #42	@ 0x2a
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fe f875 	bl	800d7b8 <ld_word>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d001      	beq.n	800f6d8 <find_volume+0x330>
 800f6d4:	230d      	movs	r3, #13
 800f6d6:	e0a8      	b.n	800f82a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6da:	891b      	ldrh	r3, [r3, #8]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d001      	beq.n	800f6e4 <find_volume+0x33c>
 800f6e0:	230d      	movs	r3, #13
 800f6e2:	e0a2      	b.n	800f82a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6e6:	3334      	adds	r3, #52	@ 0x34
 800f6e8:	332c      	adds	r3, #44	@ 0x2c
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fe f87c 	bl	800d7e8 <ld_dword>
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f4:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	009b      	lsls	r3, r3, #2
 800f6fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800f6fe:	e01f      	b.n	800f740 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f702:	891b      	ldrh	r3, [r3, #8]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d101      	bne.n	800f70c <find_volume+0x364>
 800f708:	230d      	movs	r3, #13
 800f70a:	e08e      	b.n	800f82a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f70e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f712:	441a      	add	r2, r3
 800f714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f716:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f718:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f71c:	2b02      	cmp	r3, #2
 800f71e:	d103      	bne.n	800f728 <find_volume+0x380>
 800f720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f722:	699b      	ldr	r3, [r3, #24]
 800f724:	005b      	lsls	r3, r3, #1
 800f726:	e00a      	b.n	800f73e <find_volume+0x396>
 800f728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f72a:	699a      	ldr	r2, [r3, #24]
 800f72c:	4613      	mov	r3, r2
 800f72e:	005b      	lsls	r3, r3, #1
 800f730:	4413      	add	r3, r2
 800f732:	085a      	lsrs	r2, r3, #1
 800f734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f736:	699b      	ldr	r3, [r3, #24]
 800f738:	f003 0301 	and.w	r3, r3, #1
 800f73c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f73e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f742:	69da      	ldr	r2, [r3, #28]
 800f744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f746:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f74a:	0a5b      	lsrs	r3, r3, #9
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d201      	bcs.n	800f754 <find_volume+0x3ac>
 800f750:	230d      	movs	r3, #13
 800f752:	e06a      	b.n	800f82a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f756:	f04f 32ff 	mov.w	r2, #4294967295
 800f75a:	615a      	str	r2, [r3, #20]
 800f75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f75e:	695a      	ldr	r2, [r3, #20]
 800f760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f762:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f766:	2280      	movs	r2, #128	@ 0x80
 800f768:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f76a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f76e:	2b03      	cmp	r3, #3
 800f770:	d149      	bne.n	800f806 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f774:	3334      	adds	r3, #52	@ 0x34
 800f776:	3330      	adds	r3, #48	@ 0x30
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fe f81d 	bl	800d7b8 <ld_word>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b01      	cmp	r3, #1
 800f782:	d140      	bne.n	800f806 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f786:	3301      	adds	r3, #1
 800f788:	4619      	mov	r1, r3
 800f78a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f78c:	f7fe fac4 	bl	800dd18 <move_window>
 800f790:	4603      	mov	r3, r0
 800f792:	2b00      	cmp	r3, #0
 800f794:	d137      	bne.n	800f806 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f798:	2200      	movs	r2, #0
 800f79a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f79e:	3334      	adds	r3, #52	@ 0x34
 800f7a0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7fe f807 	bl	800d7b8 <ld_word>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d127      	bne.n	800f806 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b8:	3334      	adds	r3, #52	@ 0x34
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f7fe f814 	bl	800d7e8 <ld_dword>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	4a1c      	ldr	r2, [pc, #112]	@ (800f834 <find_volume+0x48c>)
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d11e      	bne.n	800f806 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ca:	3334      	adds	r3, #52	@ 0x34
 800f7cc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7fe f809 	bl	800d7e8 <ld_dword>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	4a17      	ldr	r2, [pc, #92]	@ (800f838 <find_volume+0x490>)
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d113      	bne.n	800f806 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e0:	3334      	adds	r3, #52	@ 0x34
 800f7e2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fd fffe 	bl	800d7e8 <ld_dword>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7f4:	3334      	adds	r3, #52	@ 0x34
 800f7f6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fd fff4 	bl	800d7e8 <ld_dword>
 800f800:	4602      	mov	r2, r0
 800f802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f804:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f808:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f80c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f80e:	4b0b      	ldr	r3, [pc, #44]	@ (800f83c <find_volume+0x494>)
 800f810:	881b      	ldrh	r3, [r3, #0]
 800f812:	3301      	adds	r3, #1
 800f814:	b29a      	uxth	r2, r3
 800f816:	4b09      	ldr	r3, [pc, #36]	@ (800f83c <find_volume+0x494>)
 800f818:	801a      	strh	r2, [r3, #0]
 800f81a:	4b08      	ldr	r3, [pc, #32]	@ (800f83c <find_volume+0x494>)
 800f81c:	881a      	ldrh	r2, [r3, #0]
 800f81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f820:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f822:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f824:	f7fe fa10 	bl	800dc48 <clear_lock>
#endif
	return FR_OK;
 800f828:	2300      	movs	r3, #0
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3758      	adds	r7, #88	@ 0x58
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	41615252 	.word	0x41615252
 800f838:	61417272 	.word	0x61417272
 800f83c:	20018944 	.word	0x20018944

0800f840 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b084      	sub	sp, #16
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f84a:	2309      	movs	r3, #9
 800f84c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d01c      	beq.n	800f88e <validate+0x4e>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d018      	beq.n	800f88e <validate+0x4e>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d013      	beq.n	800f88e <validate+0x4e>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	889a      	ldrh	r2, [r3, #4]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	88db      	ldrh	r3, [r3, #6]
 800f870:	429a      	cmp	r2, r3
 800f872:	d10c      	bne.n	800f88e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	785b      	ldrb	r3, [r3, #1]
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fd fef4 	bl	800d668 <disk_status>
 800f880:	4603      	mov	r3, r0
 800f882:	f003 0301 	and.w	r3, r3, #1
 800f886:	2b00      	cmp	r3, #0
 800f888:	d101      	bne.n	800f88e <validate+0x4e>
			res = FR_OK;
 800f88a:	2300      	movs	r3, #0
 800f88c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f88e:	7bfb      	ldrb	r3, [r7, #15]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d102      	bne.n	800f89a <validate+0x5a>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	e000      	b.n	800f89c <validate+0x5c>
 800f89a:	2300      	movs	r3, #0
 800f89c:	683a      	ldr	r2, [r7, #0]
 800f89e:	6013      	str	r3, [r2, #0]
	return res;
 800f8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3710      	adds	r7, #16
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
	...

0800f8ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b088      	sub	sp, #32
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	4613      	mov	r3, r2
 800f8b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f8be:	f107 0310 	add.w	r3, r7, #16
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7ff fcd5 	bl	800f272 <get_ldnumber>
 800f8c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f8ca:	69fb      	ldr	r3, [r7, #28]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	da01      	bge.n	800f8d4 <f_mount+0x28>
 800f8d0:	230b      	movs	r3, #11
 800f8d2:	e02b      	b.n	800f92c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f8d4:	4a17      	ldr	r2, [pc, #92]	@ (800f934 <f_mount+0x88>)
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f8de:	69bb      	ldr	r3, [r7, #24]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d005      	beq.n	800f8f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f8e4:	69b8      	ldr	r0, [r7, #24]
 800f8e6:	f7fe f9af 	bl	800dc48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f8ea:	69bb      	ldr	r3, [r7, #24]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d002      	beq.n	800f8fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	490d      	ldr	r1, [pc, #52]	@ (800f934 <f_mount+0x88>)
 800f900:	69fb      	ldr	r3, [r7, #28]
 800f902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d002      	beq.n	800f912 <f_mount+0x66>
 800f90c:	79fb      	ldrb	r3, [r7, #7]
 800f90e:	2b01      	cmp	r3, #1
 800f910:	d001      	beq.n	800f916 <f_mount+0x6a>
 800f912:	2300      	movs	r3, #0
 800f914:	e00a      	b.n	800f92c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f916:	f107 010c 	add.w	r1, r7, #12
 800f91a:	f107 0308 	add.w	r3, r7, #8
 800f91e:	2200      	movs	r2, #0
 800f920:	4618      	mov	r0, r3
 800f922:	f7ff fd41 	bl	800f3a8 <find_volume>
 800f926:	4603      	mov	r3, r0
 800f928:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3720      	adds	r7, #32
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}
 800f934:	20018940 	.word	0x20018940

0800f938 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b09a      	sub	sp, #104	@ 0x68
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	4613      	mov	r3, r2
 800f944:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d101      	bne.n	800f950 <f_open+0x18>
 800f94c:	2309      	movs	r3, #9
 800f94e:	e1b9      	b.n	800fcc4 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f950:	79fb      	ldrb	r3, [r7, #7]
 800f952:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f956:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f958:	79fa      	ldrb	r2, [r7, #7]
 800f95a:	f107 0110 	add.w	r1, r7, #16
 800f95e:	f107 0308 	add.w	r3, r7, #8
 800f962:	4618      	mov	r0, r3
 800f964:	f7ff fd20 	bl	800f3a8 <find_volume>
 800f968:	4603      	mov	r3, r0
 800f96a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800f96e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f972:	2b00      	cmp	r3, #0
 800f974:	f040 819d 	bne.w	800fcb2 <f_open+0x37a>
		dj.obj.fs = fs;
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800f97c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800f980:	f000 fdef 	bl	8010562 <ff_memalloc>
 800f984:	65b8      	str	r0, [r7, #88]	@ 0x58
 800f986:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d101      	bne.n	800f990 <f_open+0x58>
 800f98c:	2311      	movs	r3, #17
 800f98e:	e199      	b.n	800fcc4 <f_open+0x38c>
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f994:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f996:	68ba      	ldr	r2, [r7, #8]
 800f998:	f107 0314 	add.w	r3, r7, #20
 800f99c:	4611      	mov	r1, r2
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f7ff fbf6 	bl	800f190 <follow_path>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f9aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d118      	bne.n	800f9e4 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f9b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f9b6:	b25b      	sxtb	r3, r3
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	da03      	bge.n	800f9c4 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800f9bc:	2306      	movs	r3, #6
 800f9be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800f9c2:	e00f      	b.n	800f9e4 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f9c4:	79fb      	ldrb	r3, [r7, #7]
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	bf8c      	ite	hi
 800f9ca:	2301      	movhi	r3, #1
 800f9cc:	2300      	movls	r3, #0
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	f107 0314 	add.w	r3, r7, #20
 800f9d6:	4611      	mov	r1, r2
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7fd ffed 	bl	800d9b8 <chk_lock>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f9e4:	79fb      	ldrb	r3, [r7, #7]
 800f9e6:	f003 031c 	and.w	r3, r3, #28
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d07f      	beq.n	800faee <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 800f9ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d017      	beq.n	800fa26 <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f9f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f9fa:	2b04      	cmp	r3, #4
 800f9fc:	d10e      	bne.n	800fa1c <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f9fe:	f7fe f837 	bl	800da70 <enq_lock>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d006      	beq.n	800fa16 <f_open+0xde>
 800fa08:	f107 0314 	add.w	r3, r7, #20
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7ff f90f 	bl	800ec30 <dir_register>
 800fa12:	4603      	mov	r3, r0
 800fa14:	e000      	b.n	800fa18 <f_open+0xe0>
 800fa16:	2312      	movs	r3, #18
 800fa18:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fa1c:	79fb      	ldrb	r3, [r7, #7]
 800fa1e:	f043 0308 	orr.w	r3, r3, #8
 800fa22:	71fb      	strb	r3, [r7, #7]
 800fa24:	e010      	b.n	800fa48 <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fa26:	7ebb      	ldrb	r3, [r7, #26]
 800fa28:	f003 0311 	and.w	r3, r3, #17
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d003      	beq.n	800fa38 <f_open+0x100>
					res = FR_DENIED;
 800fa30:	2307      	movs	r3, #7
 800fa32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fa36:	e007      	b.n	800fa48 <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fa38:	79fb      	ldrb	r3, [r7, #7]
 800fa3a:	f003 0304 	and.w	r3, r3, #4
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d002      	beq.n	800fa48 <f_open+0x110>
 800fa42:	2308      	movs	r3, #8
 800fa44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fa48:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d168      	bne.n	800fb22 <f_open+0x1ea>
 800fa50:	79fb      	ldrb	r3, [r7, #7]
 800fa52:	f003 0308 	and.w	r3, r3, #8
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d063      	beq.n	800fb22 <f_open+0x1ea>
				dw = GET_FATTIME();
 800fa5a:	f7fd fea5 	bl	800d7a8 <get_fattime>
 800fa5e:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fa60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa62:	330e      	adds	r3, #14
 800fa64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7fd fefc 	bl	800d864 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fa6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa6e:	3316      	adds	r3, #22
 800fa70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7fd fef6 	bl	800d864 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fa78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa7a:	330b      	adds	r3, #11
 800fa7c:	2220      	movs	r2, #32
 800fa7e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa84:	4611      	mov	r1, r2
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7fe fe4a 	bl	800e720 <ld_clust>
 800fa8c:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fa92:	2200      	movs	r2, #0
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7fe fe62 	bl	800e75e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fa9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa9c:	331c      	adds	r3, #28
 800fa9e:	2100      	movs	r1, #0
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7fd fedf 	bl	800d864 <st_dword>
					fs->wflag = 1;
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	2201      	movs	r2, #1
 800faaa:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800faac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d037      	beq.n	800fb22 <f_open+0x1ea>
						dw = fs->winsect;
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fab6:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800fab8:	f107 0314 	add.w	r3, r7, #20
 800fabc:	2200      	movs	r2, #0
 800fabe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fac0:	4618      	mov	r0, r3
 800fac2:	f7fe fb75 	bl	800e1b0 <remove_chain>
 800fac6:	4603      	mov	r3, r0
 800fac8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800facc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d126      	bne.n	800fb22 <f_open+0x1ea>
							res = move_window(fs, dw);
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fad8:	4618      	mov	r0, r3
 800fada:	f7fe f91d 	bl	800dd18 <move_window>
 800fade:	4603      	mov	r3, r0
 800fae0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fae8:	3a01      	subs	r2, #1
 800faea:	611a      	str	r2, [r3, #16]
 800faec:	e019      	b.n	800fb22 <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800faee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d115      	bne.n	800fb22 <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800faf6:	7ebb      	ldrb	r3, [r7, #26]
 800faf8:	f003 0310 	and.w	r3, r3, #16
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d003      	beq.n	800fb08 <f_open+0x1d0>
					res = FR_NO_FILE;
 800fb00:	2304      	movs	r3, #4
 800fb02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fb06:	e00c      	b.n	800fb22 <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fb08:	79fb      	ldrb	r3, [r7, #7]
 800fb0a:	f003 0302 	and.w	r3, r3, #2
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d007      	beq.n	800fb22 <f_open+0x1ea>
 800fb12:	7ebb      	ldrb	r3, [r7, #26]
 800fb14:	f003 0301 	and.w	r3, r3, #1
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d002      	beq.n	800fb22 <f_open+0x1ea>
						res = FR_DENIED;
 800fb1c:	2307      	movs	r3, #7
 800fb1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fb22:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d126      	bne.n	800fb78 <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fb2a:	79fb      	ldrb	r3, [r7, #7]
 800fb2c:	f003 0308 	and.w	r3, r3, #8
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d003      	beq.n	800fb3c <f_open+0x204>
				mode |= FA_MODIFIED;
 800fb34:	79fb      	ldrb	r3, [r7, #7]
 800fb36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb3a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800fb44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fb4a:	79fb      	ldrb	r3, [r7, #7]
 800fb4c:	2b01      	cmp	r3, #1
 800fb4e:	bf8c      	ite	hi
 800fb50:	2301      	movhi	r3, #1
 800fb52:	2300      	movls	r3, #0
 800fb54:	b2db      	uxtb	r3, r3
 800fb56:	461a      	mov	r2, r3
 800fb58:	f107 0314 	add.w	r3, r7, #20
 800fb5c:	4611      	mov	r1, r2
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fd ffa8 	bl	800dab4 <inc_lock>
 800fb64:	4602      	mov	r2, r0
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	691b      	ldr	r3, [r3, #16]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d102      	bne.n	800fb78 <f_open+0x240>
 800fb72:	2302      	movs	r3, #2
 800fb74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fb78:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	f040 8095 	bne.w	800fcac <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb86:	4611      	mov	r1, r2
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7fe fdc9 	bl	800e720 <ld_clust>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fb94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb96:	331c      	adds	r3, #28
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7fd fe25 	bl	800d7e8 <ld_dword>
 800fb9e:	4602      	mov	r2, r0
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2200      	movs	r2, #0
 800fba8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fbaa:	693a      	ldr	r2, [r7, #16]
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	88da      	ldrh	r2, [r3, #6]
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	79fa      	ldrb	r2, [r7, #7]
 800fbbc:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	3330      	adds	r3, #48	@ 0x30
 800fbd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fbd8:	2100      	movs	r1, #0
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f7fd fe8f 	bl	800d8fe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fbe0:	79fb      	ldrb	r3, [r7, #7]
 800fbe2:	f003 0320 	and.w	r3, r3, #32
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d060      	beq.n	800fcac <f_open+0x374>
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	68db      	ldr	r3, [r3, #12]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d05c      	beq.n	800fcac <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	68da      	ldr	r2, [r3, #12]
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	895b      	ldrh	r3, [r3, #10]
 800fbfe:	025b      	lsls	r3, r3, #9
 800fc00:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fc0e:	e016      	b.n	800fc3e <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7fe f93a 	bl	800de8e <get_fat>
 800fc1a:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fc1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d802      	bhi.n	800fc28 <f_open+0x2f0>
 800fc22:	2302      	movs	r3, #2
 800fc24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fc28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc2e:	d102      	bne.n	800fc36 <f_open+0x2fe>
 800fc30:	2301      	movs	r3, #1
 800fc32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fc36:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fc38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc3a:	1ad3      	subs	r3, r2, r3
 800fc3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fc3e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d103      	bne.n	800fc4e <f_open+0x316>
 800fc46:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fc48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d8e0      	bhi.n	800fc10 <f_open+0x2d8>
				}
				fp->clust = clst;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fc52:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fc54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d127      	bne.n	800fcac <f_open+0x374>
 800fc5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fc5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d022      	beq.n	800fcac <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fe f8f0 	bl	800de50 <clust2sect>
 800fc70:	64b8      	str	r0, [r7, #72]	@ 0x48
 800fc72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d103      	bne.n	800fc80 <f_open+0x348>
						res = FR_INT_ERR;
 800fc78:	2302      	movs	r3, #2
 800fc7a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fc7e:	e015      	b.n	800fcac <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fc80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fc82:	0a5a      	lsrs	r2, r3, #9
 800fc84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc86:	441a      	add	r2, r3
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	7858      	ldrb	r0, [r3, #1]
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	6a1a      	ldr	r2, [r3, #32]
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	f7fd fd26 	bl	800d6ec <disk_read>
 800fca0:	4603      	mov	r3, r0
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d002      	beq.n	800fcac <f_open+0x374>
 800fca6:	2301      	movs	r3, #1
 800fca8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800fcac:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800fcae:	f000 fc64 	bl	801057a <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fcb2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d002      	beq.n	800fcc0 <f_open+0x388>
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fcc0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3768      	adds	r7, #104	@ 0x68
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}

0800fccc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b08e      	sub	sp, #56	@ 0x38
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	60f8      	str	r0, [r7, #12]
 800fcd4:	60b9      	str	r1, [r7, #8]
 800fcd6:	607a      	str	r2, [r7, #4]
 800fcd8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	2200      	movs	r2, #0
 800fce2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f107 0214 	add.w	r2, r7, #20
 800fcea:	4611      	mov	r1, r2
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7ff fda7 	bl	800f840 <validate>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fcf8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d107      	bne.n	800fd10 <f_read+0x44>
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	7d5b      	ldrb	r3, [r3, #21]
 800fd04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fd08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d002      	beq.n	800fd16 <f_read+0x4a>
 800fd10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd14:	e115      	b.n	800ff42 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	7d1b      	ldrb	r3, [r3, #20]
 800fd1a:	f003 0301 	and.w	r3, r3, #1
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d101      	bne.n	800fd26 <f_read+0x5a>
 800fd22:	2307      	movs	r3, #7
 800fd24:	e10d      	b.n	800ff42 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	68da      	ldr	r2, [r3, #12]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	699b      	ldr	r3, [r3, #24]
 800fd2e:	1ad3      	subs	r3, r2, r3
 800fd30:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	6a3b      	ldr	r3, [r7, #32]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	f240 80fe 	bls.w	800ff38 <f_read+0x26c>
 800fd3c:	6a3b      	ldr	r3, [r7, #32]
 800fd3e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fd40:	e0fa      	b.n	800ff38 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	699b      	ldr	r3, [r3, #24]
 800fd46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	f040 80c6 	bne.w	800fedc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	699b      	ldr	r3, [r3, #24]
 800fd54:	0a5b      	lsrs	r3, r3, #9
 800fd56:	697a      	ldr	r2, [r7, #20]
 800fd58:	8952      	ldrh	r2, [r2, #10]
 800fd5a:	3a01      	subs	r2, #1
 800fd5c:	4013      	ands	r3, r2
 800fd5e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fd60:	69fb      	ldr	r3, [r7, #28]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d12f      	bne.n	800fdc6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	699b      	ldr	r3, [r3, #24]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d103      	bne.n	800fd76 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	689b      	ldr	r3, [r3, #8]
 800fd72:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd74:	e013      	b.n	800fd9e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d007      	beq.n	800fd8e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	699b      	ldr	r3, [r3, #24]
 800fd82:	4619      	mov	r1, r3
 800fd84:	68f8      	ldr	r0, [r7, #12]
 800fd86:	f7fe fb10 	bl	800e3aa <clmt_clust>
 800fd8a:	6338      	str	r0, [r7, #48]	@ 0x30
 800fd8c:	e007      	b.n	800fd9e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fd8e:	68fa      	ldr	r2, [r7, #12]
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	69db      	ldr	r3, [r3, #28]
 800fd94:	4619      	mov	r1, r3
 800fd96:	4610      	mov	r0, r2
 800fd98:	f7fe f879 	bl	800de8e <get_fat>
 800fd9c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d804      	bhi.n	800fdae <f_read+0xe2>
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	2202      	movs	r2, #2
 800fda8:	755a      	strb	r2, [r3, #21]
 800fdaa:	2302      	movs	r3, #2
 800fdac:	e0c9      	b.n	800ff42 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fdae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdb4:	d104      	bne.n	800fdc0 <f_read+0xf4>
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2201      	movs	r2, #1
 800fdba:	755a      	strb	r2, [r3, #21]
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	e0c0      	b.n	800ff42 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdc4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fdc6:	697a      	ldr	r2, [r7, #20]
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	69db      	ldr	r3, [r3, #28]
 800fdcc:	4619      	mov	r1, r3
 800fdce:	4610      	mov	r0, r2
 800fdd0:	f7fe f83e 	bl	800de50 <clust2sect>
 800fdd4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fdd6:	69bb      	ldr	r3, [r7, #24]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d104      	bne.n	800fde6 <f_read+0x11a>
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2202      	movs	r2, #2
 800fde0:	755a      	strb	r2, [r3, #21]
 800fde2:	2302      	movs	r3, #2
 800fde4:	e0ad      	b.n	800ff42 <f_read+0x276>
			sect += csect;
 800fde6:	69ba      	ldr	r2, [r7, #24]
 800fde8:	69fb      	ldr	r3, [r7, #28]
 800fdea:	4413      	add	r3, r2
 800fdec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	0a5b      	lsrs	r3, r3, #9
 800fdf2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fdf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d039      	beq.n	800fe6e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fdfa:	69fa      	ldr	r2, [r7, #28]
 800fdfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdfe:	4413      	add	r3, r2
 800fe00:	697a      	ldr	r2, [r7, #20]
 800fe02:	8952      	ldrh	r2, [r2, #10]
 800fe04:	4293      	cmp	r3, r2
 800fe06:	d905      	bls.n	800fe14 <f_read+0x148>
					cc = fs->csize - csect;
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	895b      	ldrh	r3, [r3, #10]
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	1ad3      	subs	r3, r2, r3
 800fe12:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	7858      	ldrb	r0, [r3, #1]
 800fe18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe1a:	69ba      	ldr	r2, [r7, #24]
 800fe1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fe1e:	f7fd fc65 	bl	800d6ec <disk_read>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d004      	beq.n	800fe32 <f_read+0x166>
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	2201      	movs	r2, #1
 800fe2c:	755a      	strb	r2, [r3, #21]
 800fe2e:	2301      	movs	r3, #1
 800fe30:	e087      	b.n	800ff42 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	7d1b      	ldrb	r3, [r3, #20]
 800fe36:	b25b      	sxtb	r3, r3
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	da14      	bge.n	800fe66 <f_read+0x19a>
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	6a1a      	ldr	r2, [r3, #32]
 800fe40:	69bb      	ldr	r3, [r7, #24]
 800fe42:	1ad3      	subs	r3, r2, r3
 800fe44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d90d      	bls.n	800fe66 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	6a1a      	ldr	r2, [r3, #32]
 800fe4e:	69bb      	ldr	r3, [r7, #24]
 800fe50:	1ad3      	subs	r3, r2, r3
 800fe52:	025b      	lsls	r3, r3, #9
 800fe54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe56:	18d0      	adds	r0, r2, r3
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	3330      	adds	r3, #48	@ 0x30
 800fe5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe60:	4619      	mov	r1, r3
 800fe62:	f7fd fd2b 	bl	800d8bc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fe66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe68:	025b      	lsls	r3, r3, #9
 800fe6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800fe6c:	e050      	b.n	800ff10 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	6a1b      	ldr	r3, [r3, #32]
 800fe72:	69ba      	ldr	r2, [r7, #24]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d02e      	beq.n	800fed6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	7d1b      	ldrb	r3, [r3, #20]
 800fe7c:	b25b      	sxtb	r3, r3
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	da18      	bge.n	800feb4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	7858      	ldrb	r0, [r3, #1]
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6a1a      	ldr	r2, [r3, #32]
 800fe90:	2301      	movs	r3, #1
 800fe92:	f7fd fc4b 	bl	800d72c <disk_write>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d004      	beq.n	800fea6 <f_read+0x1da>
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	2201      	movs	r2, #1
 800fea0:	755a      	strb	r2, [r3, #21]
 800fea2:	2301      	movs	r3, #1
 800fea4:	e04d      	b.n	800ff42 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	7d1b      	ldrb	r3, [r3, #20]
 800feaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800feae:	b2da      	uxtb	r2, r3
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	7858      	ldrb	r0, [r3, #1]
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800febe:	2301      	movs	r3, #1
 800fec0:	69ba      	ldr	r2, [r7, #24]
 800fec2:	f7fd fc13 	bl	800d6ec <disk_read>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d004      	beq.n	800fed6 <f_read+0x20a>
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	2201      	movs	r2, #1
 800fed0:	755a      	strb	r2, [r3, #21]
 800fed2:	2301      	movs	r3, #1
 800fed4:	e035      	b.n	800ff42 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	69ba      	ldr	r2, [r7, #24]
 800feda:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	699b      	ldr	r3, [r3, #24]
 800fee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fee4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800fee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800feea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	429a      	cmp	r2, r3
 800fef0:	d901      	bls.n	800fef6 <f_read+0x22a>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	699b      	ldr	r3, [r3, #24]
 800ff00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff04:	4413      	add	r3, r2
 800ff06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff08:	4619      	mov	r1, r3
 800ff0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ff0c:	f7fd fcd6 	bl	800d8bc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ff10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff14:	4413      	add	r3, r2
 800ff16:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	699a      	ldr	r2, [r3, #24]
 800ff1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff1e:	441a      	add	r2, r3
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	619a      	str	r2, [r3, #24]
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff2a:	441a      	add	r2, r3
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	601a      	str	r2, [r3, #0]
 800ff30:	687a      	ldr	r2, [r7, #4]
 800ff32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff34:	1ad3      	subs	r3, r2, r3
 800ff36:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	f47f af01 	bne.w	800fd42 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ff40:	2300      	movs	r3, #0
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3738      	adds	r7, #56	@ 0x38
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ff4a:	b580      	push	{r7, lr}
 800ff4c:	b086      	sub	sp, #24
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f107 0208 	add.w	r2, r7, #8
 800ff58:	4611      	mov	r1, r2
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7ff fc70 	bl	800f840 <validate>
 800ff60:	4603      	mov	r3, r0
 800ff62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff64:	7dfb      	ldrb	r3, [r7, #23]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d168      	bne.n	801003c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	7d1b      	ldrb	r3, [r3, #20]
 800ff6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d062      	beq.n	801003c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	7d1b      	ldrb	r3, [r3, #20]
 800ff7a:	b25b      	sxtb	r3, r3
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	da15      	bge.n	800ffac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	7858      	ldrb	r0, [r3, #1]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	6a1a      	ldr	r2, [r3, #32]
 800ff8e:	2301      	movs	r3, #1
 800ff90:	f7fd fbcc 	bl	800d72c <disk_write>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d001      	beq.n	800ff9e <f_sync+0x54>
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	e04f      	b.n	801003e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	7d1b      	ldrb	r3, [r3, #20]
 800ffa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffa6:	b2da      	uxtb	r2, r3
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ffac:	f7fd fbfc 	bl	800d7a8 <get_fattime>
 800ffb0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ffb2:	68ba      	ldr	r2, [r7, #8]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffb8:	4619      	mov	r1, r3
 800ffba:	4610      	mov	r0, r2
 800ffbc:	f7fd feac 	bl	800dd18 <move_window>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ffc4:	7dfb      	ldrb	r3, [r7, #23]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d138      	bne.n	801003c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	330b      	adds	r3, #11
 800ffd4:	781a      	ldrb	r2, [r3, #0]
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	330b      	adds	r3, #11
 800ffda:	f042 0220 	orr.w	r2, r2, #32
 800ffde:	b2d2      	uxtb	r2, r2
 800ffe0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6818      	ldr	r0, [r3, #0]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	689b      	ldr	r3, [r3, #8]
 800ffea:	461a      	mov	r2, r3
 800ffec:	68f9      	ldr	r1, [r7, #12]
 800ffee:	f7fe fbb6 	bl	800e75e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	f103 021c 	add.w	r2, r3, #28
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	68db      	ldr	r3, [r3, #12]
 800fffc:	4619      	mov	r1, r3
 800fffe:	4610      	mov	r0, r2
 8010000:	f7fd fc30 	bl	800d864 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	3316      	adds	r3, #22
 8010008:	6939      	ldr	r1, [r7, #16]
 801000a:	4618      	mov	r0, r3
 801000c:	f7fd fc2a 	bl	800d864 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	3312      	adds	r3, #18
 8010014:	2100      	movs	r1, #0
 8010016:	4618      	mov	r0, r3
 8010018:	f7fd fc09 	bl	800d82e <st_word>
					fs->wflag = 1;
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	2201      	movs	r2, #1
 8010020:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	4618      	mov	r0, r3
 8010026:	f7fd fea5 	bl	800dd74 <sync_fs>
 801002a:	4603      	mov	r3, r0
 801002c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	7d1b      	ldrb	r3, [r3, #20]
 8010032:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010036:	b2da      	uxtb	r2, r3
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801003c:	7dfb      	ldrb	r3, [r7, #23]
}
 801003e:	4618      	mov	r0, r3
 8010040:	3718      	adds	r7, #24
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}

08010046 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010046:	b580      	push	{r7, lr}
 8010048:	b084      	sub	sp, #16
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f7ff ff7b 	bl	800ff4a <f_sync>
 8010054:	4603      	mov	r3, r0
 8010056:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010058:	7bfb      	ldrb	r3, [r7, #15]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d118      	bne.n	8010090 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f107 0208 	add.w	r2, r7, #8
 8010064:	4611      	mov	r1, r2
 8010066:	4618      	mov	r0, r3
 8010068:	f7ff fbea 	bl	800f840 <validate>
 801006c:	4603      	mov	r3, r0
 801006e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010070:	7bfb      	ldrb	r3, [r7, #15]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d10c      	bne.n	8010090 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	691b      	ldr	r3, [r3, #16]
 801007a:	4618      	mov	r0, r3
 801007c:	f7fd fda8 	bl	800dbd0 <dec_lock>
 8010080:	4603      	mov	r3, r0
 8010082:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010084:	7bfb      	ldrb	r3, [r7, #15]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d102      	bne.n	8010090 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2200      	movs	r2, #0
 801008e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010090:	7bfb      	ldrb	r3, [r7, #15]
}
 8010092:	4618      	mov	r0, r3
 8010094:	3710      	adds	r7, #16
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}

0801009a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801009a:	b580      	push	{r7, lr}
 801009c:	b090      	sub	sp, #64	@ 0x40
 801009e:	af00      	add	r7, sp, #0
 80100a0:	6078      	str	r0, [r7, #4]
 80100a2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f107 0208 	add.w	r2, r7, #8
 80100aa:	4611      	mov	r1, r2
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7ff fbc7 	bl	800f840 <validate>
 80100b2:	4603      	mov	r3, r0
 80100b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80100b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d103      	bne.n	80100c8 <f_lseek+0x2e>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	7d5b      	ldrb	r3, [r3, #21]
 80100c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80100c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d002      	beq.n	80100d6 <f_lseek+0x3c>
 80100d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80100d4:	e1e6      	b.n	80104a4 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100da:	2b00      	cmp	r3, #0
 80100dc:	f000 80d1 	beq.w	8010282 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100e6:	d15a      	bne.n	801019e <f_lseek+0x104>
			tbl = fp->cltbl;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100ec:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80100ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100f0:	1d1a      	adds	r2, r3, #4
 80100f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	617b      	str	r3, [r7, #20]
 80100f8:	2302      	movs	r3, #2
 80100fa:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8010102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010104:	2b00      	cmp	r3, #0
 8010106:	d03a      	beq.n	801017e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801010a:	613b      	str	r3, [r7, #16]
 801010c:	2300      	movs	r3, #0
 801010e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010112:	3302      	adds	r3, #2
 8010114:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8010116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010118:	60fb      	str	r3, [r7, #12]
 801011a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801011c:	3301      	adds	r3, #1
 801011e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010124:	4618      	mov	r0, r3
 8010126:	f7fd feb2 	bl	800de8e <get_fat>
 801012a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801012c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801012e:	2b01      	cmp	r3, #1
 8010130:	d804      	bhi.n	801013c <f_lseek+0xa2>
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2202      	movs	r2, #2
 8010136:	755a      	strb	r2, [r3, #21]
 8010138:	2302      	movs	r3, #2
 801013a:	e1b3      	b.n	80104a4 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801013c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801013e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010142:	d104      	bne.n	801014e <f_lseek+0xb4>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2201      	movs	r2, #1
 8010148:	755a      	strb	r2, [r3, #21]
 801014a:	2301      	movs	r3, #1
 801014c:	e1aa      	b.n	80104a4 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	3301      	adds	r3, #1
 8010152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010154:	429a      	cmp	r2, r3
 8010156:	d0de      	beq.n	8010116 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010158:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	429a      	cmp	r2, r3
 801015e:	d809      	bhi.n	8010174 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010162:	1d1a      	adds	r2, r3, #4
 8010164:	627a      	str	r2, [r7, #36]	@ 0x24
 8010166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010168:	601a      	str	r2, [r3, #0]
 801016a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801016c:	1d1a      	adds	r2, r3, #4
 801016e:	627a      	str	r2, [r7, #36]	@ 0x24
 8010170:	693a      	ldr	r2, [r7, #16]
 8010172:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	699b      	ldr	r3, [r3, #24]
 8010178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801017a:	429a      	cmp	r2, r3
 801017c:	d3c4      	bcc.n	8010108 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010184:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	429a      	cmp	r2, r3
 801018c:	d803      	bhi.n	8010196 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801018e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010190:	2200      	movs	r2, #0
 8010192:	601a      	str	r2, [r3, #0]
 8010194:	e184      	b.n	80104a0 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010196:	2311      	movs	r3, #17
 8010198:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801019c:	e180      	b.n	80104a0 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	683a      	ldr	r2, [r7, #0]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d902      	bls.n	80101ae <f_lseek+0x114>
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	68db      	ldr	r3, [r3, #12]
 80101ac:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	683a      	ldr	r2, [r7, #0]
 80101b2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	f000 8172 	beq.w	80104a0 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	3b01      	subs	r3, #1
 80101c0:	4619      	mov	r1, r3
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7fe f8f1 	bl	800e3aa <clmt_clust>
 80101c8:	4602      	mov	r2, r0
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80101ce:	68ba      	ldr	r2, [r7, #8]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	69db      	ldr	r3, [r3, #28]
 80101d4:	4619      	mov	r1, r3
 80101d6:	4610      	mov	r0, r2
 80101d8:	f7fd fe3a 	bl	800de50 <clust2sect>
 80101dc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d104      	bne.n	80101ee <f_lseek+0x154>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2202      	movs	r2, #2
 80101e8:	755a      	strb	r2, [r3, #21]
 80101ea:	2302      	movs	r3, #2
 80101ec:	e15a      	b.n	80104a4 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	3b01      	subs	r3, #1
 80101f2:	0a5b      	lsrs	r3, r3, #9
 80101f4:	68ba      	ldr	r2, [r7, #8]
 80101f6:	8952      	ldrh	r2, [r2, #10]
 80101f8:	3a01      	subs	r2, #1
 80101fa:	4013      	ands	r3, r2
 80101fc:	69ba      	ldr	r2, [r7, #24]
 80101fe:	4413      	add	r3, r2
 8010200:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	699b      	ldr	r3, [r3, #24]
 8010206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801020a:	2b00      	cmp	r3, #0
 801020c:	f000 8148 	beq.w	80104a0 <f_lseek+0x406>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6a1b      	ldr	r3, [r3, #32]
 8010214:	69ba      	ldr	r2, [r7, #24]
 8010216:	429a      	cmp	r2, r3
 8010218:	f000 8142 	beq.w	80104a0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	7d1b      	ldrb	r3, [r3, #20]
 8010220:	b25b      	sxtb	r3, r3
 8010222:	2b00      	cmp	r3, #0
 8010224:	da18      	bge.n	8010258 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	7858      	ldrb	r0, [r3, #1]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6a1a      	ldr	r2, [r3, #32]
 8010234:	2301      	movs	r3, #1
 8010236:	f7fd fa79 	bl	800d72c <disk_write>
 801023a:	4603      	mov	r3, r0
 801023c:	2b00      	cmp	r3, #0
 801023e:	d004      	beq.n	801024a <f_lseek+0x1b0>
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2201      	movs	r2, #1
 8010244:	755a      	strb	r2, [r3, #21]
 8010246:	2301      	movs	r3, #1
 8010248:	e12c      	b.n	80104a4 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	7d1b      	ldrb	r3, [r3, #20]
 801024e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010252:	b2da      	uxtb	r2, r3
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	7858      	ldrb	r0, [r3, #1]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010262:	2301      	movs	r3, #1
 8010264:	69ba      	ldr	r2, [r7, #24]
 8010266:	f7fd fa41 	bl	800d6ec <disk_read>
 801026a:	4603      	mov	r3, r0
 801026c:	2b00      	cmp	r3, #0
 801026e:	d004      	beq.n	801027a <f_lseek+0x1e0>
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2201      	movs	r2, #1
 8010274:	755a      	strb	r2, [r3, #21]
 8010276:	2301      	movs	r3, #1
 8010278:	e114      	b.n	80104a4 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	69ba      	ldr	r2, [r7, #24]
 801027e:	621a      	str	r2, [r3, #32]
 8010280:	e10e      	b.n	80104a0 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	683a      	ldr	r2, [r7, #0]
 8010288:	429a      	cmp	r2, r3
 801028a:	d908      	bls.n	801029e <f_lseek+0x204>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	7d1b      	ldrb	r3, [r3, #20]
 8010290:	f003 0302 	and.w	r3, r3, #2
 8010294:	2b00      	cmp	r3, #0
 8010296:	d102      	bne.n	801029e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	699b      	ldr	r3, [r3, #24]
 80102a2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80102a4:	2300      	movs	r3, #0
 80102a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80102ac:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	f000 80a7 	beq.w	8010404 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	895b      	ldrh	r3, [r3, #10]
 80102ba:	025b      	lsls	r3, r3, #9
 80102bc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80102be:	6a3b      	ldr	r3, [r7, #32]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d01b      	beq.n	80102fc <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	1e5a      	subs	r2, r3, #1
 80102c8:	69fb      	ldr	r3, [r7, #28]
 80102ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80102ce:	6a3b      	ldr	r3, [r7, #32]
 80102d0:	1e59      	subs	r1, r3, #1
 80102d2:	69fb      	ldr	r3, [r7, #28]
 80102d4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80102d8:	429a      	cmp	r2, r3
 80102da:	d30f      	bcc.n	80102fc <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80102dc:	6a3b      	ldr	r3, [r7, #32]
 80102de:	1e5a      	subs	r2, r3, #1
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	425b      	negs	r3, r3
 80102e4:	401a      	ands	r2, r3
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	699b      	ldr	r3, [r3, #24]
 80102ee:	683a      	ldr	r2, [r7, #0]
 80102f0:	1ad3      	subs	r3, r2, r3
 80102f2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	69db      	ldr	r3, [r3, #28]
 80102f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80102fa:	e022      	b.n	8010342 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	689b      	ldr	r3, [r3, #8]
 8010300:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010304:	2b00      	cmp	r3, #0
 8010306:	d119      	bne.n	801033c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2100      	movs	r1, #0
 801030c:	4618      	mov	r0, r3
 801030e:	f7fd ffb4 	bl	800e27a <create_chain>
 8010312:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010316:	2b01      	cmp	r3, #1
 8010318:	d104      	bne.n	8010324 <f_lseek+0x28a>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2202      	movs	r2, #2
 801031e:	755a      	strb	r2, [r3, #21]
 8010320:	2302      	movs	r3, #2
 8010322:	e0bf      	b.n	80104a4 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801032a:	d104      	bne.n	8010336 <f_lseek+0x29c>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2201      	movs	r2, #1
 8010330:	755a      	strb	r2, [r3, #21]
 8010332:	2301      	movs	r3, #1
 8010334:	e0b6      	b.n	80104a4 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801033a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010340:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010344:	2b00      	cmp	r3, #0
 8010346:	d05d      	beq.n	8010404 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010348:	e03a      	b.n	80103c0 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801034a:	683a      	ldr	r2, [r7, #0]
 801034c:	69fb      	ldr	r3, [r7, #28]
 801034e:	1ad3      	subs	r3, r2, r3
 8010350:	603b      	str	r3, [r7, #0]
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	699a      	ldr	r2, [r3, #24]
 8010356:	69fb      	ldr	r3, [r7, #28]
 8010358:	441a      	add	r2, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	7d1b      	ldrb	r3, [r3, #20]
 8010362:	f003 0302 	and.w	r3, r3, #2
 8010366:	2b00      	cmp	r3, #0
 8010368:	d00b      	beq.n	8010382 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801036e:	4618      	mov	r0, r3
 8010370:	f7fd ff83 	bl	800e27a <create_chain>
 8010374:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010378:	2b00      	cmp	r3, #0
 801037a:	d108      	bne.n	801038e <f_lseek+0x2f4>
							ofs = 0; break;
 801037c:	2300      	movs	r3, #0
 801037e:	603b      	str	r3, [r7, #0]
 8010380:	e022      	b.n	80103c8 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010386:	4618      	mov	r0, r3
 8010388:	f7fd fd81 	bl	800de8e <get_fat>
 801038c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801038e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010394:	d104      	bne.n	80103a0 <f_lseek+0x306>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2201      	movs	r2, #1
 801039a:	755a      	strb	r2, [r3, #21]
 801039c:	2301      	movs	r3, #1
 801039e:	e081      	b.n	80104a4 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80103a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	d904      	bls.n	80103b0 <f_lseek+0x316>
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	699b      	ldr	r3, [r3, #24]
 80103aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d304      	bcc.n	80103ba <f_lseek+0x320>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2202      	movs	r2, #2
 80103b4:	755a      	strb	r2, [r3, #21]
 80103b6:	2302      	movs	r3, #2
 80103b8:	e074      	b.n	80104a4 <f_lseek+0x40a>
					fp->clust = clst;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80103be:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80103c0:	683a      	ldr	r2, [r7, #0]
 80103c2:	69fb      	ldr	r3, [r7, #28]
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d8c0      	bhi.n	801034a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	699a      	ldr	r2, [r3, #24]
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	441a      	add	r2, r3
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d012      	beq.n	8010404 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7fd fd34 	bl	800de50 <clust2sect>
 80103e8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80103ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d104      	bne.n	80103fa <f_lseek+0x360>
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2202      	movs	r2, #2
 80103f4:	755a      	strb	r2, [r3, #21]
 80103f6:	2302      	movs	r3, #2
 80103f8:	e054      	b.n	80104a4 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	0a5b      	lsrs	r3, r3, #9
 80103fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010400:	4413      	add	r3, r2
 8010402:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	699a      	ldr	r2, [r3, #24]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	68db      	ldr	r3, [r3, #12]
 801040c:	429a      	cmp	r2, r3
 801040e:	d90a      	bls.n	8010426 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	699a      	ldr	r2, [r3, #24]
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	7d1b      	ldrb	r3, [r3, #20]
 801041c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010420:	b2da      	uxtb	r2, r3
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	699b      	ldr	r3, [r3, #24]
 801042a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801042e:	2b00      	cmp	r3, #0
 8010430:	d036      	beq.n	80104a0 <f_lseek+0x406>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6a1b      	ldr	r3, [r3, #32]
 8010436:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010438:	429a      	cmp	r2, r3
 801043a:	d031      	beq.n	80104a0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	7d1b      	ldrb	r3, [r3, #20]
 8010440:	b25b      	sxtb	r3, r3
 8010442:	2b00      	cmp	r3, #0
 8010444:	da18      	bge.n	8010478 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	7858      	ldrb	r0, [r3, #1]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6a1a      	ldr	r2, [r3, #32]
 8010454:	2301      	movs	r3, #1
 8010456:	f7fd f969 	bl	800d72c <disk_write>
 801045a:	4603      	mov	r3, r0
 801045c:	2b00      	cmp	r3, #0
 801045e:	d004      	beq.n	801046a <f_lseek+0x3d0>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2201      	movs	r2, #1
 8010464:	755a      	strb	r2, [r3, #21]
 8010466:	2301      	movs	r3, #1
 8010468:	e01c      	b.n	80104a4 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	7d1b      	ldrb	r3, [r3, #20]
 801046e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010472:	b2da      	uxtb	r2, r3
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	7858      	ldrb	r0, [r3, #1]
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010482:	2301      	movs	r3, #1
 8010484:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010486:	f7fd f931 	bl	800d6ec <disk_read>
 801048a:	4603      	mov	r3, r0
 801048c:	2b00      	cmp	r3, #0
 801048e:	d004      	beq.n	801049a <f_lseek+0x400>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2201      	movs	r2, #1
 8010494:	755a      	strb	r2, [r3, #21]
 8010496:	2301      	movs	r3, #1
 8010498:	e004      	b.n	80104a4 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801049e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80104a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3740      	adds	r7, #64	@ 0x40
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b087      	sub	sp, #28
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	4613      	mov	r3, r2
 80104b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80104ba:	2301      	movs	r3, #1
 80104bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80104be:	2300      	movs	r3, #0
 80104c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80104c2:	4b1f      	ldr	r3, [pc, #124]	@ (8010540 <FATFS_LinkDriverEx+0x94>)
 80104c4:	7a5b      	ldrb	r3, [r3, #9]
 80104c6:	b2db      	uxtb	r3, r3
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d131      	bne.n	8010530 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80104cc:	4b1c      	ldr	r3, [pc, #112]	@ (8010540 <FATFS_LinkDriverEx+0x94>)
 80104ce:	7a5b      	ldrb	r3, [r3, #9]
 80104d0:	b2db      	uxtb	r3, r3
 80104d2:	461a      	mov	r2, r3
 80104d4:	4b1a      	ldr	r3, [pc, #104]	@ (8010540 <FATFS_LinkDriverEx+0x94>)
 80104d6:	2100      	movs	r1, #0
 80104d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80104da:	4b19      	ldr	r3, [pc, #100]	@ (8010540 <FATFS_LinkDriverEx+0x94>)
 80104dc:	7a5b      	ldrb	r3, [r3, #9]
 80104de:	b2db      	uxtb	r3, r3
 80104e0:	4a17      	ldr	r2, [pc, #92]	@ (8010540 <FATFS_LinkDriverEx+0x94>)
 80104e2:	009b      	lsls	r3, r3, #2
 80104e4:	4413      	add	r3, r2
 80104e6:	68fa      	ldr	r2, [r7, #12]
 80104e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80104ea:	4b15      	ldr	r3, [pc, #84]	@ (8010540 <FATFS_LinkDriverEx+0x94>)
 80104ec:	7a5b      	ldrb	r3, [r3, #9]
 80104ee:	b2db      	uxtb	r3, r3
 80104f0:	461a      	mov	r2, r3
 80104f2:	4b13      	ldr	r3, [pc, #76]	@ (8010540 <FATFS_LinkDriverEx+0x94>)
 80104f4:	4413      	add	r3, r2
 80104f6:	79fa      	ldrb	r2, [r7, #7]
 80104f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80104fa:	4b11      	ldr	r3, [pc, #68]	@ (8010540 <FATFS_LinkDriverEx+0x94>)
 80104fc:	7a5b      	ldrb	r3, [r3, #9]
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	1c5a      	adds	r2, r3, #1
 8010502:	b2d1      	uxtb	r1, r2
 8010504:	4a0e      	ldr	r2, [pc, #56]	@ (8010540 <FATFS_LinkDriverEx+0x94>)
 8010506:	7251      	strb	r1, [r2, #9]
 8010508:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801050a:	7dbb      	ldrb	r3, [r7, #22]
 801050c:	3330      	adds	r3, #48	@ 0x30
 801050e:	b2da      	uxtb	r2, r3
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	3301      	adds	r3, #1
 8010518:	223a      	movs	r2, #58	@ 0x3a
 801051a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	3302      	adds	r3, #2
 8010520:	222f      	movs	r2, #47	@ 0x2f
 8010522:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	3303      	adds	r3, #3
 8010528:	2200      	movs	r2, #0
 801052a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801052c:	2300      	movs	r3, #0
 801052e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010530:	7dfb      	ldrb	r3, [r7, #23]
}
 8010532:	4618      	mov	r0, r3
 8010534:	371c      	adds	r7, #28
 8010536:	46bd      	mov	sp, r7
 8010538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053c:	4770      	bx	lr
 801053e:	bf00      	nop
 8010540:	20018968 	.word	0x20018968

08010544 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801054e:	2200      	movs	r2, #0
 8010550:	6839      	ldr	r1, [r7, #0]
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f7ff ffaa 	bl	80104ac <FATFS_LinkDriverEx>
 8010558:	4603      	mov	r3, r0
}
 801055a:	4618      	mov	r0, r3
 801055c:	3708      	adds	r7, #8
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}

08010562 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8010562:	b580      	push	{r7, lr}
 8010564:	b082      	sub	sp, #8
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f000 f8d6 	bl	801071c <malloc>
 8010570:	4603      	mov	r3, r0
}
 8010572:	4618      	mov	r0, r3
 8010574:	3708      	adds	r7, #8
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}

0801057a <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 801057a:	b580      	push	{r7, lr}
 801057c:	b082      	sub	sp, #8
 801057e:	af00      	add	r7, sp, #0
 8010580:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f000 f8d2 	bl	801072c <free>
}
 8010588:	bf00      	nop
 801058a:	3708      	adds	r7, #8
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010590:	b480      	push	{r7}
 8010592:	b085      	sub	sp, #20
 8010594:	af00      	add	r7, sp, #0
 8010596:	4603      	mov	r3, r0
 8010598:	6039      	str	r1, [r7, #0]
 801059a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801059c:	88fb      	ldrh	r3, [r7, #6]
 801059e:	2b7f      	cmp	r3, #127	@ 0x7f
 80105a0:	d802      	bhi.n	80105a8 <ff_convert+0x18>
		c = chr;
 80105a2:	88fb      	ldrh	r3, [r7, #6]
 80105a4:	81fb      	strh	r3, [r7, #14]
 80105a6:	e025      	b.n	80105f4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d00b      	beq.n	80105c6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80105ae:	88fb      	ldrh	r3, [r7, #6]
 80105b0:	2bff      	cmp	r3, #255	@ 0xff
 80105b2:	d805      	bhi.n	80105c0 <ff_convert+0x30>
 80105b4:	88fb      	ldrh	r3, [r7, #6]
 80105b6:	3b80      	subs	r3, #128	@ 0x80
 80105b8:	4a12      	ldr	r2, [pc, #72]	@ (8010604 <ff_convert+0x74>)
 80105ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105be:	e000      	b.n	80105c2 <ff_convert+0x32>
 80105c0:	2300      	movs	r3, #0
 80105c2:	81fb      	strh	r3, [r7, #14]
 80105c4:	e016      	b.n	80105f4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80105c6:	2300      	movs	r3, #0
 80105c8:	81fb      	strh	r3, [r7, #14]
 80105ca:	e009      	b.n	80105e0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80105cc:	89fb      	ldrh	r3, [r7, #14]
 80105ce:	4a0d      	ldr	r2, [pc, #52]	@ (8010604 <ff_convert+0x74>)
 80105d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105d4:	88fa      	ldrh	r2, [r7, #6]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d006      	beq.n	80105e8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80105da:	89fb      	ldrh	r3, [r7, #14]
 80105dc:	3301      	adds	r3, #1
 80105de:	81fb      	strh	r3, [r7, #14]
 80105e0:	89fb      	ldrh	r3, [r7, #14]
 80105e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80105e4:	d9f2      	bls.n	80105cc <ff_convert+0x3c>
 80105e6:	e000      	b.n	80105ea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80105e8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80105ea:	89fb      	ldrh	r3, [r7, #14]
 80105ec:	3380      	adds	r3, #128	@ 0x80
 80105ee:	b29b      	uxth	r3, r3
 80105f0:	b2db      	uxtb	r3, r3
 80105f2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80105f4:	89fb      	ldrh	r3, [r7, #14]
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	3714      	adds	r7, #20
 80105fa:	46bd      	mov	sp, r7
 80105fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010600:	4770      	bx	lr
 8010602:	bf00      	nop
 8010604:	08010ed0 	.word	0x08010ed0

08010608 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010608:	b480      	push	{r7}
 801060a:	b087      	sub	sp, #28
 801060c:	af00      	add	r7, sp, #0
 801060e:	4603      	mov	r3, r0
 8010610:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010612:	88fb      	ldrh	r3, [r7, #6]
 8010614:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010618:	d201      	bcs.n	801061e <ff_wtoupper+0x16>
 801061a:	4b3e      	ldr	r3, [pc, #248]	@ (8010714 <ff_wtoupper+0x10c>)
 801061c:	e000      	b.n	8010620 <ff_wtoupper+0x18>
 801061e:	4b3e      	ldr	r3, [pc, #248]	@ (8010718 <ff_wtoupper+0x110>)
 8010620:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	1c9a      	adds	r2, r3, #2
 8010626:	617a      	str	r2, [r7, #20]
 8010628:	881b      	ldrh	r3, [r3, #0]
 801062a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801062c:	8a7b      	ldrh	r3, [r7, #18]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d068      	beq.n	8010704 <ff_wtoupper+0xfc>
 8010632:	88fa      	ldrh	r2, [r7, #6]
 8010634:	8a7b      	ldrh	r3, [r7, #18]
 8010636:	429a      	cmp	r2, r3
 8010638:	d364      	bcc.n	8010704 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	1c9a      	adds	r2, r3, #2
 801063e:	617a      	str	r2, [r7, #20]
 8010640:	881b      	ldrh	r3, [r3, #0]
 8010642:	823b      	strh	r3, [r7, #16]
 8010644:	8a3b      	ldrh	r3, [r7, #16]
 8010646:	0a1b      	lsrs	r3, r3, #8
 8010648:	81fb      	strh	r3, [r7, #14]
 801064a:	8a3b      	ldrh	r3, [r7, #16]
 801064c:	b2db      	uxtb	r3, r3
 801064e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010650:	88fa      	ldrh	r2, [r7, #6]
 8010652:	8a79      	ldrh	r1, [r7, #18]
 8010654:	8a3b      	ldrh	r3, [r7, #16]
 8010656:	440b      	add	r3, r1
 8010658:	429a      	cmp	r2, r3
 801065a:	da49      	bge.n	80106f0 <ff_wtoupper+0xe8>
			switch (cmd) {
 801065c:	89fb      	ldrh	r3, [r7, #14]
 801065e:	2b08      	cmp	r3, #8
 8010660:	d84f      	bhi.n	8010702 <ff_wtoupper+0xfa>
 8010662:	a201      	add	r2, pc, #4	@ (adr r2, 8010668 <ff_wtoupper+0x60>)
 8010664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010668:	0801068d 	.word	0x0801068d
 801066c:	0801069f 	.word	0x0801069f
 8010670:	080106b5 	.word	0x080106b5
 8010674:	080106bd 	.word	0x080106bd
 8010678:	080106c5 	.word	0x080106c5
 801067c:	080106cd 	.word	0x080106cd
 8010680:	080106d5 	.word	0x080106d5
 8010684:	080106dd 	.word	0x080106dd
 8010688:	080106e5 	.word	0x080106e5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801068c:	88fa      	ldrh	r2, [r7, #6]
 801068e:	8a7b      	ldrh	r3, [r7, #18]
 8010690:	1ad3      	subs	r3, r2, r3
 8010692:	005b      	lsls	r3, r3, #1
 8010694:	697a      	ldr	r2, [r7, #20]
 8010696:	4413      	add	r3, r2
 8010698:	881b      	ldrh	r3, [r3, #0]
 801069a:	80fb      	strh	r3, [r7, #6]
 801069c:	e027      	b.n	80106ee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801069e:	88fa      	ldrh	r2, [r7, #6]
 80106a0:	8a7b      	ldrh	r3, [r7, #18]
 80106a2:	1ad3      	subs	r3, r2, r3
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	f003 0301 	and.w	r3, r3, #1
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	88fa      	ldrh	r2, [r7, #6]
 80106ae:	1ad3      	subs	r3, r2, r3
 80106b0:	80fb      	strh	r3, [r7, #6]
 80106b2:	e01c      	b.n	80106ee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80106b4:	88fb      	ldrh	r3, [r7, #6]
 80106b6:	3b10      	subs	r3, #16
 80106b8:	80fb      	strh	r3, [r7, #6]
 80106ba:	e018      	b.n	80106ee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80106bc:	88fb      	ldrh	r3, [r7, #6]
 80106be:	3b20      	subs	r3, #32
 80106c0:	80fb      	strh	r3, [r7, #6]
 80106c2:	e014      	b.n	80106ee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80106c4:	88fb      	ldrh	r3, [r7, #6]
 80106c6:	3b30      	subs	r3, #48	@ 0x30
 80106c8:	80fb      	strh	r3, [r7, #6]
 80106ca:	e010      	b.n	80106ee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80106cc:	88fb      	ldrh	r3, [r7, #6]
 80106ce:	3b1a      	subs	r3, #26
 80106d0:	80fb      	strh	r3, [r7, #6]
 80106d2:	e00c      	b.n	80106ee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80106d4:	88fb      	ldrh	r3, [r7, #6]
 80106d6:	3308      	adds	r3, #8
 80106d8:	80fb      	strh	r3, [r7, #6]
 80106da:	e008      	b.n	80106ee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80106dc:	88fb      	ldrh	r3, [r7, #6]
 80106de:	3b50      	subs	r3, #80	@ 0x50
 80106e0:	80fb      	strh	r3, [r7, #6]
 80106e2:	e004      	b.n	80106ee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80106e4:	88fb      	ldrh	r3, [r7, #6]
 80106e6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80106ea:	80fb      	strh	r3, [r7, #6]
 80106ec:	bf00      	nop
			}
			break;
 80106ee:	e008      	b.n	8010702 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80106f0:	89fb      	ldrh	r3, [r7, #14]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d195      	bne.n	8010622 <ff_wtoupper+0x1a>
 80106f6:	8a3b      	ldrh	r3, [r7, #16]
 80106f8:	005b      	lsls	r3, r3, #1
 80106fa:	697a      	ldr	r2, [r7, #20]
 80106fc:	4413      	add	r3, r2
 80106fe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010700:	e78f      	b.n	8010622 <ff_wtoupper+0x1a>
			break;
 8010702:	bf00      	nop
	}

	return chr;
 8010704:	88fb      	ldrh	r3, [r7, #6]
}
 8010706:	4618      	mov	r0, r3
 8010708:	371c      	adds	r7, #28
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr
 8010712:	bf00      	nop
 8010714:	08010fd0 	.word	0x08010fd0
 8010718:	080111c4 	.word	0x080111c4

0801071c <malloc>:
 801071c:	4b02      	ldr	r3, [pc, #8]	@ (8010728 <malloc+0xc>)
 801071e:	4601      	mov	r1, r0
 8010720:	6818      	ldr	r0, [r3, #0]
 8010722:	f000 b82d 	b.w	8010780 <_malloc_r>
 8010726:	bf00      	nop
 8010728:	2000001c 	.word	0x2000001c

0801072c <free>:
 801072c:	4b02      	ldr	r3, [pc, #8]	@ (8010738 <free+0xc>)
 801072e:	4601      	mov	r1, r0
 8010730:	6818      	ldr	r0, [r3, #0]
 8010732:	f000 b8f5 	b.w	8010920 <_free_r>
 8010736:	bf00      	nop
 8010738:	2000001c 	.word	0x2000001c

0801073c <sbrk_aligned>:
 801073c:	b570      	push	{r4, r5, r6, lr}
 801073e:	4e0f      	ldr	r6, [pc, #60]	@ (801077c <sbrk_aligned+0x40>)
 8010740:	460c      	mov	r4, r1
 8010742:	6831      	ldr	r1, [r6, #0]
 8010744:	4605      	mov	r5, r0
 8010746:	b911      	cbnz	r1, 801074e <sbrk_aligned+0x12>
 8010748:	f000 f8ae 	bl	80108a8 <_sbrk_r>
 801074c:	6030      	str	r0, [r6, #0]
 801074e:	4621      	mov	r1, r4
 8010750:	4628      	mov	r0, r5
 8010752:	f000 f8a9 	bl	80108a8 <_sbrk_r>
 8010756:	1c43      	adds	r3, r0, #1
 8010758:	d103      	bne.n	8010762 <sbrk_aligned+0x26>
 801075a:	f04f 34ff 	mov.w	r4, #4294967295
 801075e:	4620      	mov	r0, r4
 8010760:	bd70      	pop	{r4, r5, r6, pc}
 8010762:	1cc4      	adds	r4, r0, #3
 8010764:	f024 0403 	bic.w	r4, r4, #3
 8010768:	42a0      	cmp	r0, r4
 801076a:	d0f8      	beq.n	801075e <sbrk_aligned+0x22>
 801076c:	1a21      	subs	r1, r4, r0
 801076e:	4628      	mov	r0, r5
 8010770:	f000 f89a 	bl	80108a8 <_sbrk_r>
 8010774:	3001      	adds	r0, #1
 8010776:	d1f2      	bne.n	801075e <sbrk_aligned+0x22>
 8010778:	e7ef      	b.n	801075a <sbrk_aligned+0x1e>
 801077a:	bf00      	nop
 801077c:	20018974 	.word	0x20018974

08010780 <_malloc_r>:
 8010780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010784:	1ccd      	adds	r5, r1, #3
 8010786:	f025 0503 	bic.w	r5, r5, #3
 801078a:	3508      	adds	r5, #8
 801078c:	2d0c      	cmp	r5, #12
 801078e:	bf38      	it	cc
 8010790:	250c      	movcc	r5, #12
 8010792:	2d00      	cmp	r5, #0
 8010794:	4606      	mov	r6, r0
 8010796:	db01      	blt.n	801079c <_malloc_r+0x1c>
 8010798:	42a9      	cmp	r1, r5
 801079a:	d904      	bls.n	80107a6 <_malloc_r+0x26>
 801079c:	230c      	movs	r3, #12
 801079e:	6033      	str	r3, [r6, #0]
 80107a0:	2000      	movs	r0, #0
 80107a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801087c <_malloc_r+0xfc>
 80107aa:	f000 f869 	bl	8010880 <__malloc_lock>
 80107ae:	f8d8 3000 	ldr.w	r3, [r8]
 80107b2:	461c      	mov	r4, r3
 80107b4:	bb44      	cbnz	r4, 8010808 <_malloc_r+0x88>
 80107b6:	4629      	mov	r1, r5
 80107b8:	4630      	mov	r0, r6
 80107ba:	f7ff ffbf 	bl	801073c <sbrk_aligned>
 80107be:	1c43      	adds	r3, r0, #1
 80107c0:	4604      	mov	r4, r0
 80107c2:	d158      	bne.n	8010876 <_malloc_r+0xf6>
 80107c4:	f8d8 4000 	ldr.w	r4, [r8]
 80107c8:	4627      	mov	r7, r4
 80107ca:	2f00      	cmp	r7, #0
 80107cc:	d143      	bne.n	8010856 <_malloc_r+0xd6>
 80107ce:	2c00      	cmp	r4, #0
 80107d0:	d04b      	beq.n	801086a <_malloc_r+0xea>
 80107d2:	6823      	ldr	r3, [r4, #0]
 80107d4:	4639      	mov	r1, r7
 80107d6:	4630      	mov	r0, r6
 80107d8:	eb04 0903 	add.w	r9, r4, r3
 80107dc:	f000 f864 	bl	80108a8 <_sbrk_r>
 80107e0:	4581      	cmp	r9, r0
 80107e2:	d142      	bne.n	801086a <_malloc_r+0xea>
 80107e4:	6821      	ldr	r1, [r4, #0]
 80107e6:	1a6d      	subs	r5, r5, r1
 80107e8:	4629      	mov	r1, r5
 80107ea:	4630      	mov	r0, r6
 80107ec:	f7ff ffa6 	bl	801073c <sbrk_aligned>
 80107f0:	3001      	adds	r0, #1
 80107f2:	d03a      	beq.n	801086a <_malloc_r+0xea>
 80107f4:	6823      	ldr	r3, [r4, #0]
 80107f6:	442b      	add	r3, r5
 80107f8:	6023      	str	r3, [r4, #0]
 80107fa:	f8d8 3000 	ldr.w	r3, [r8]
 80107fe:	685a      	ldr	r2, [r3, #4]
 8010800:	bb62      	cbnz	r2, 801085c <_malloc_r+0xdc>
 8010802:	f8c8 7000 	str.w	r7, [r8]
 8010806:	e00f      	b.n	8010828 <_malloc_r+0xa8>
 8010808:	6822      	ldr	r2, [r4, #0]
 801080a:	1b52      	subs	r2, r2, r5
 801080c:	d420      	bmi.n	8010850 <_malloc_r+0xd0>
 801080e:	2a0b      	cmp	r2, #11
 8010810:	d917      	bls.n	8010842 <_malloc_r+0xc2>
 8010812:	1961      	adds	r1, r4, r5
 8010814:	42a3      	cmp	r3, r4
 8010816:	6025      	str	r5, [r4, #0]
 8010818:	bf18      	it	ne
 801081a:	6059      	strne	r1, [r3, #4]
 801081c:	6863      	ldr	r3, [r4, #4]
 801081e:	bf08      	it	eq
 8010820:	f8c8 1000 	streq.w	r1, [r8]
 8010824:	5162      	str	r2, [r4, r5]
 8010826:	604b      	str	r3, [r1, #4]
 8010828:	4630      	mov	r0, r6
 801082a:	f000 f82f 	bl	801088c <__malloc_unlock>
 801082e:	f104 000b 	add.w	r0, r4, #11
 8010832:	1d23      	adds	r3, r4, #4
 8010834:	f020 0007 	bic.w	r0, r0, #7
 8010838:	1ac2      	subs	r2, r0, r3
 801083a:	bf1c      	itt	ne
 801083c:	1a1b      	subne	r3, r3, r0
 801083e:	50a3      	strne	r3, [r4, r2]
 8010840:	e7af      	b.n	80107a2 <_malloc_r+0x22>
 8010842:	6862      	ldr	r2, [r4, #4]
 8010844:	42a3      	cmp	r3, r4
 8010846:	bf0c      	ite	eq
 8010848:	f8c8 2000 	streq.w	r2, [r8]
 801084c:	605a      	strne	r2, [r3, #4]
 801084e:	e7eb      	b.n	8010828 <_malloc_r+0xa8>
 8010850:	4623      	mov	r3, r4
 8010852:	6864      	ldr	r4, [r4, #4]
 8010854:	e7ae      	b.n	80107b4 <_malloc_r+0x34>
 8010856:	463c      	mov	r4, r7
 8010858:	687f      	ldr	r7, [r7, #4]
 801085a:	e7b6      	b.n	80107ca <_malloc_r+0x4a>
 801085c:	461a      	mov	r2, r3
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	42a3      	cmp	r3, r4
 8010862:	d1fb      	bne.n	801085c <_malloc_r+0xdc>
 8010864:	2300      	movs	r3, #0
 8010866:	6053      	str	r3, [r2, #4]
 8010868:	e7de      	b.n	8010828 <_malloc_r+0xa8>
 801086a:	230c      	movs	r3, #12
 801086c:	6033      	str	r3, [r6, #0]
 801086e:	4630      	mov	r0, r6
 8010870:	f000 f80c 	bl	801088c <__malloc_unlock>
 8010874:	e794      	b.n	80107a0 <_malloc_r+0x20>
 8010876:	6005      	str	r5, [r0, #0]
 8010878:	e7d6      	b.n	8010828 <_malloc_r+0xa8>
 801087a:	bf00      	nop
 801087c:	20018978 	.word	0x20018978

08010880 <__malloc_lock>:
 8010880:	4801      	ldr	r0, [pc, #4]	@ (8010888 <__malloc_lock+0x8>)
 8010882:	f000 b84b 	b.w	801091c <__retarget_lock_acquire_recursive>
 8010886:	bf00      	nop
 8010888:	20018ab8 	.word	0x20018ab8

0801088c <__malloc_unlock>:
 801088c:	4801      	ldr	r0, [pc, #4]	@ (8010894 <__malloc_unlock+0x8>)
 801088e:	f000 b846 	b.w	801091e <__retarget_lock_release_recursive>
 8010892:	bf00      	nop
 8010894:	20018ab8 	.word	0x20018ab8

08010898 <memset>:
 8010898:	4402      	add	r2, r0
 801089a:	4603      	mov	r3, r0
 801089c:	4293      	cmp	r3, r2
 801089e:	d100      	bne.n	80108a2 <memset+0xa>
 80108a0:	4770      	bx	lr
 80108a2:	f803 1b01 	strb.w	r1, [r3], #1
 80108a6:	e7f9      	b.n	801089c <memset+0x4>

080108a8 <_sbrk_r>:
 80108a8:	b538      	push	{r3, r4, r5, lr}
 80108aa:	4d06      	ldr	r5, [pc, #24]	@ (80108c4 <_sbrk_r+0x1c>)
 80108ac:	2300      	movs	r3, #0
 80108ae:	4604      	mov	r4, r0
 80108b0:	4608      	mov	r0, r1
 80108b2:	602b      	str	r3, [r5, #0]
 80108b4:	f7fc fe78 	bl	800d5a8 <_sbrk>
 80108b8:	1c43      	adds	r3, r0, #1
 80108ba:	d102      	bne.n	80108c2 <_sbrk_r+0x1a>
 80108bc:	682b      	ldr	r3, [r5, #0]
 80108be:	b103      	cbz	r3, 80108c2 <_sbrk_r+0x1a>
 80108c0:	6023      	str	r3, [r4, #0]
 80108c2:	bd38      	pop	{r3, r4, r5, pc}
 80108c4:	20018ab4 	.word	0x20018ab4

080108c8 <__errno>:
 80108c8:	4b01      	ldr	r3, [pc, #4]	@ (80108d0 <__errno+0x8>)
 80108ca:	6818      	ldr	r0, [r3, #0]
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop
 80108d0:	2000001c 	.word	0x2000001c

080108d4 <__libc_init_array>:
 80108d4:	b570      	push	{r4, r5, r6, lr}
 80108d6:	4d0d      	ldr	r5, [pc, #52]	@ (801090c <__libc_init_array+0x38>)
 80108d8:	4c0d      	ldr	r4, [pc, #52]	@ (8010910 <__libc_init_array+0x3c>)
 80108da:	1b64      	subs	r4, r4, r5
 80108dc:	10a4      	asrs	r4, r4, #2
 80108de:	2600      	movs	r6, #0
 80108e0:	42a6      	cmp	r6, r4
 80108e2:	d109      	bne.n	80108f8 <__libc_init_array+0x24>
 80108e4:	4d0b      	ldr	r5, [pc, #44]	@ (8010914 <__libc_init_array+0x40>)
 80108e6:	4c0c      	ldr	r4, [pc, #48]	@ (8010918 <__libc_init_array+0x44>)
 80108e8:	f000 f864 	bl	80109b4 <_init>
 80108ec:	1b64      	subs	r4, r4, r5
 80108ee:	10a4      	asrs	r4, r4, #2
 80108f0:	2600      	movs	r6, #0
 80108f2:	42a6      	cmp	r6, r4
 80108f4:	d105      	bne.n	8010902 <__libc_init_array+0x2e>
 80108f6:	bd70      	pop	{r4, r5, r6, pc}
 80108f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80108fc:	4798      	blx	r3
 80108fe:	3601      	adds	r6, #1
 8010900:	e7ee      	b.n	80108e0 <__libc_init_array+0xc>
 8010902:	f855 3b04 	ldr.w	r3, [r5], #4
 8010906:	4798      	blx	r3
 8010908:	3601      	adds	r6, #1
 801090a:	e7f2      	b.n	80108f2 <__libc_init_array+0x1e>
 801090c:	08011280 	.word	0x08011280
 8010910:	08011280 	.word	0x08011280
 8010914:	08011280 	.word	0x08011280
 8010918:	08011284 	.word	0x08011284

0801091c <__retarget_lock_acquire_recursive>:
 801091c:	4770      	bx	lr

0801091e <__retarget_lock_release_recursive>:
 801091e:	4770      	bx	lr

08010920 <_free_r>:
 8010920:	b538      	push	{r3, r4, r5, lr}
 8010922:	4605      	mov	r5, r0
 8010924:	2900      	cmp	r1, #0
 8010926:	d041      	beq.n	80109ac <_free_r+0x8c>
 8010928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801092c:	1f0c      	subs	r4, r1, #4
 801092e:	2b00      	cmp	r3, #0
 8010930:	bfb8      	it	lt
 8010932:	18e4      	addlt	r4, r4, r3
 8010934:	f7ff ffa4 	bl	8010880 <__malloc_lock>
 8010938:	4a1d      	ldr	r2, [pc, #116]	@ (80109b0 <_free_r+0x90>)
 801093a:	6813      	ldr	r3, [r2, #0]
 801093c:	b933      	cbnz	r3, 801094c <_free_r+0x2c>
 801093e:	6063      	str	r3, [r4, #4]
 8010940:	6014      	str	r4, [r2, #0]
 8010942:	4628      	mov	r0, r5
 8010944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010948:	f7ff bfa0 	b.w	801088c <__malloc_unlock>
 801094c:	42a3      	cmp	r3, r4
 801094e:	d908      	bls.n	8010962 <_free_r+0x42>
 8010950:	6820      	ldr	r0, [r4, #0]
 8010952:	1821      	adds	r1, r4, r0
 8010954:	428b      	cmp	r3, r1
 8010956:	bf01      	itttt	eq
 8010958:	6819      	ldreq	r1, [r3, #0]
 801095a:	685b      	ldreq	r3, [r3, #4]
 801095c:	1809      	addeq	r1, r1, r0
 801095e:	6021      	streq	r1, [r4, #0]
 8010960:	e7ed      	b.n	801093e <_free_r+0x1e>
 8010962:	461a      	mov	r2, r3
 8010964:	685b      	ldr	r3, [r3, #4]
 8010966:	b10b      	cbz	r3, 801096c <_free_r+0x4c>
 8010968:	42a3      	cmp	r3, r4
 801096a:	d9fa      	bls.n	8010962 <_free_r+0x42>
 801096c:	6811      	ldr	r1, [r2, #0]
 801096e:	1850      	adds	r0, r2, r1
 8010970:	42a0      	cmp	r0, r4
 8010972:	d10b      	bne.n	801098c <_free_r+0x6c>
 8010974:	6820      	ldr	r0, [r4, #0]
 8010976:	4401      	add	r1, r0
 8010978:	1850      	adds	r0, r2, r1
 801097a:	4283      	cmp	r3, r0
 801097c:	6011      	str	r1, [r2, #0]
 801097e:	d1e0      	bne.n	8010942 <_free_r+0x22>
 8010980:	6818      	ldr	r0, [r3, #0]
 8010982:	685b      	ldr	r3, [r3, #4]
 8010984:	6053      	str	r3, [r2, #4]
 8010986:	4408      	add	r0, r1
 8010988:	6010      	str	r0, [r2, #0]
 801098a:	e7da      	b.n	8010942 <_free_r+0x22>
 801098c:	d902      	bls.n	8010994 <_free_r+0x74>
 801098e:	230c      	movs	r3, #12
 8010990:	602b      	str	r3, [r5, #0]
 8010992:	e7d6      	b.n	8010942 <_free_r+0x22>
 8010994:	6820      	ldr	r0, [r4, #0]
 8010996:	1821      	adds	r1, r4, r0
 8010998:	428b      	cmp	r3, r1
 801099a:	bf04      	itt	eq
 801099c:	6819      	ldreq	r1, [r3, #0]
 801099e:	685b      	ldreq	r3, [r3, #4]
 80109a0:	6063      	str	r3, [r4, #4]
 80109a2:	bf04      	itt	eq
 80109a4:	1809      	addeq	r1, r1, r0
 80109a6:	6021      	streq	r1, [r4, #0]
 80109a8:	6054      	str	r4, [r2, #4]
 80109aa:	e7ca      	b.n	8010942 <_free_r+0x22>
 80109ac:	bd38      	pop	{r3, r4, r5, pc}
 80109ae:	bf00      	nop
 80109b0:	20018978 	.word	0x20018978

080109b4 <_init>:
 80109b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109b6:	bf00      	nop
 80109b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109ba:	bc08      	pop	{r3}
 80109bc:	469e      	mov	lr, r3
 80109be:	4770      	bx	lr

080109c0 <_fini>:
 80109c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109c2:	bf00      	nop
 80109c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109c6:	bc08      	pop	{r3}
 80109c8:	469e      	mov	lr, r3
 80109ca:	4770      	bx	lr
